language: lua
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal res = {}\n\tfor i, v in ipairs(strings) do\n\t\tif v:startswith(prefix)\
    \ then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwfv51yrx.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpwfv51yrx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwfv51yrx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:sub(1, prefix:len()) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:find('^' .. prefix) then\n            table.insert(result, str)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local new_table = {}\n    for i, str in ipairs(strings) do\n  \
    \      if str:startswith(prefix) then\n            table.insert(new_table, str)\n\
    \        end\n    end\n    return new_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptixuxtce.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmptixuxtce.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptixuxtce.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for _, str in ipairs(strings) do\n    if str:startswith(prefix)\
    \ then\n      table.insert(filtered, str)\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsz4y04_1.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpsz4y04_1.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsz4y04_1.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, str in ipairs(strings) do\n   \
    \     if str:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for i, elem in ipairs(strings) do\n    if elem:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, elem)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, s in ipairs(strings) do\n     \
    \   if s:starts_with(prefix) then\n            table.insert(filtered, s)\n   \
    \     end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldp020g5.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpldp020g5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpldp020g5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _,string in ipairs(strings) do\n    if string:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, string)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local t = {}\n  for _, str in ipairs(strings) do\n    if string.sub(str,\
    \ 1, #prefix) == prefix then\n      table.insert(t, str)\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor i,str in ipairs(strings) do\n\t\tif str:starts_with(prefix)\
    \ then\n\t\t\tresult[#result+1] = str\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppqwwws_k.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmppqwwws_k.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppqwwws_k.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal ret = {}\n\tfor i, str in ipairs(strings) do\n\t\tif starts_with(str,\
    \ prefix) then\n\t\t\ttable.insert(ret, str)\n\t\tend\n\tend\n\treturn ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl9ru96tb.lua:9:\
    \ attempt to call a nil value (global 'starts_with')\nstack traceback:\n\t/tmp/tmpl9ru96tb.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpl9ru96tb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if string.startswith(str,\
    \ prefix) then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptaf93lh2.lua:9:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmptaf93lh2.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptaf93lh2.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for i, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\treturn filter(strings, function(s) return s:startswith(prefix) end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuhuiceak.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpuhuiceak.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpuhuiceak.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _,s in ipairs(strings) do\n    if string.startswith(s,\
    \ prefix) then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqotyc1ct.lua:9:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpqotyc1ct.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqotyc1ct.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for i, elem in ipairs(strings) do\n    \
    \    if (string.sub(elem, 1, string.len(prefix)) == prefix) then\n           \
    \ table.insert(result, elem)\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  return table.filter(strings, function(s) return string.startswith(s,\
    \ prefix) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp2pri3nu.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpp2pri3nu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpp2pri3nu.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\treturn map(\n\t\tfunction(s)\n\t\t\tif string.startswith(s, prefix)\
    \ then\n\t\t\t\treturn s\n\t\t\tend\n\t\tend,\n\t\tstrings\n\t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzzz5ui18.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpzzz5ui18.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzzz5ui18.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwnk162y.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpiwnk162y.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpiwnk162y.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local matches = {}\n    for _, value in ipairs(strings) do\n  \
    \      if value:startswith(prefix) then\n            table.insert(matches, value)\n\
    \        end\n    end\n    return matches\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8iwonk8g.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp8iwonk8g.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8iwonk8g.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for i, string in ipairs(strings) do\n  \
    \      if string:sub(1, prefix:len()) == prefix then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, v in ipairs(strings) do\n       \
    \ if v:startswith(prefix) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p3oy5to.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp_p3oy5to.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_p3oy5to.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for i = 1, #strings do\n    if strings[i]:sub(1,\
    \ #prefix) == prefix then\n      result[#result + 1] = strings[i]\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for i = 1, #strings do\n        if string.sub(strings[i],\
    \ 1, #prefix) == prefix then\n            table.insert(result, strings[i])\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local strings_prefixed = {}\n  for _, s in ipairs(strings) do\n \
    \   if string.startswith(s, prefix) then\n      table.insert(strings_prefixed,\
    \ s)\n    end\n  end\n  return strings_prefixed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvyiuffmj.lua:9:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpvyiuffmj.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvyiuffmj.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _,s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local ret = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:sub(1, #prefix) == prefix then\n            table.insert(ret, str)\n   \
    \     end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal ret = {}\n\tfor _, x in ipairs(strings) do\n\t\tif x:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(ret, x)\n\t\tend\n\tend\n\treturn\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if string.sub(s, 1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for i, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptt45yl6o.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmptt45yl6o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptt45yl6o.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for i, s in ipairs(strings) do\n     \
    \   if string.find(s, '^' .. prefix) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local matches = {}\n    for i = 1, #strings do\n        if string.find(strings[i],\
    \ '^' .. prefix) then\n            table.insert(matches, strings[i])\n       \
    \ end\n    end\n    return matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local r = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:starts_with(prefix) then\n            table.insert(r, str)\n        end\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgbn_pe2p.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpgbn_pe2p.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgbn_pe2p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:sub(1,\
    \ prefix:len()) == prefix then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local results = {}\n    for _, str in ipairs(strings) do\n    \
    \    if str:sub(1, #prefix) == prefix then\n            table.insert(results,\
    \ str)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal rv = {}\n\tfor i, v in ipairs(strings) do\n\t\tif v:startswith(prefix)\
    \ then\n\t\t\ttable.insert(rv, v)\n\t\tend\n\tend\n\treturn rv\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdk13z89z.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpdk13z89z.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdk13z89z.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpefag94c7.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpefag94c7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpefag94c7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    assert(type(strings) == 'table', \"Must provide a table of strings\
    \ to filter.\")\n    assert(type(prefix) == 'string', \"Must provide a string\
    \ to check for prefix.\")\n    local result = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.sub(string, 1, #prefix) == prefix then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local r = {}\n  for k,v in pairs(strings) do\n    if v:find('^' ..\
    \ prefix) then\n      r[k] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhi7_325.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", 5=\"xxxAAA\", 6=\"\
    xxx\"}\nstack traceback:\n\t/tmp/tmpmhi7_325.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(filtered, str)\n    end\n  end\n\
    \  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, string in ipairs(strings) do\n  \
    \      if string:starts_with(prefix) then\n            table.insert(result, string)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwggzw1fe.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpwggzw1fe.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwggzw1fe.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    assert(type(strings) == 'table')\n    assert(type(prefix) == 'string')\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbzqbdwwi.lua:17: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local ret = {}\n    for _, s in ipairs(strings) do\n        if\
    \ s:find('^' .. prefix) then\n            table.insert(ret, s)\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local t = {}\n    for _, v in ipairs(strings) do\n        if string.sub(v,\
    \ 1, #prefix) == prefix then\n            table.insert(t, v)\n        end\n  \
    \  end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal out = {}\n\tlocal prefix_len = #prefix\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif s:sub(1, prefix_len) == prefix then\n\t\t\ttable.insert(out, s)\n\
    \t\tend\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for _, str in ipairs(strings) do\n    if str:startswith(prefix)\
    \ then\n      table.insert(filtered, str)\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsz4y04_1.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpsz4y04_1.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsz4y04_1.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for i, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local prefixed = {}\n    for _, s in ipairs(strings) do\n     \
    \   if s:startswith(prefix) then\n            table.insert(prefixed, s)\n    \
    \    end\n    end\n    return prefixed\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2c7xby5.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpq2c7xby5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpq2c7xby5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      filtered[#filtered + 1] = s\n    end\n  end\n\
    \  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _,s in ipairs(strings) do\n        if\
    \ s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal output = {}\n\tfor i, str in ipairs(strings) do\n\t\tif str:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(output, str)\n\t\tend\n\tend\n\t\
    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal strings_with_prefix = {}\n\tlocal strings_without_prefix =\
    \ {}\n\tfor _, string in ipairs(strings) do\n\t\tif string:find(prefix, 1, true)\
    \ == 1 then\n\t\t\ttable.insert(strings_with_prefix, string)\n\t\telse\n\t\t\t\
    table.insert(strings_without_prefix, string)\n\t\tend\n\tend\n\treturn strings_with_prefix,\
    \ strings_without_prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local prefix_len = #prefix\n  local ret = {}\n  for _, k in ipairs(strings)\
    \ do\n    if k:sub(1, prefix_len) == prefix then\n      ret[#ret + 1] = k\n  \
    \  end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal pattern = '^' .. prefix\n\tlocal matched = {}\n\tfor _, str\
    \ in ipairs(strings) do\n\t\tif str:match(pattern) then\n\t\t\ttable.insert(matched,\
    \ str)\n\t\tend\n\tend\n\treturn matched\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  if not strings then return nil end\n  local result = {}\n  for k,v\
    \ in pairs(strings) do\n    if string.sub(v, 1, #prefix) == prefix then\n    \
    \  table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for k, v in pairs(strings) do\n        if\
    \ string.sub(v, 1, #prefix) == prefix then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal ret = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(ret, s)\n\t\tend\n\tend\n\treturn\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for i, str in ipairs(strings) do\n   \
    \     if str:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, s in ipairs(strings) do\n     \
    \   if starts_with(s, prefix) then\n            table.insert(filtered, s)\n  \
    \      end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyx8tbqyy.lua:9:\
    \ attempt to call a nil value (global 'starts_with')\nstack traceback:\n\t/tmp/tmpyx8tbqyy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpyx8tbqyy.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(filtered, s)\n    end\n  end\n  return filtered\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_3sk4kqp.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp_3sk4kqp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_3sk4kqp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  return filter(function(str) return starts_with(str, prefix) end,\
    \ strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsm0g6z8e.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpsm0g6z8e.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsm0g6z8e.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local r = {}\n    for _,str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(r, str)\n        end\n    end\n    return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswfptkrh.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpswfptkrh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpswfptkrh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tassert(type(strings) == 'table')\n\tassert(type(prefix) == 'string')\n\
    \tlocal output = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:sub(1, #prefix)\
    \ == prefix then\n\t\t\ttable.insert(output, str)\n\t\tend\n\tend\n\treturn output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, k in ipairs(strings) do\n    if string.sub(k,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(result, k)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _,s in ipairs(strings) do\n      \
    \  if string.sub(s, 1, string.len(prefix)) == prefix then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for i, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local t = {}\n    for _, v in ipairs(strings) do\n        if v:find('^'\
    \ .. prefix) then\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal out = {}\n\tfor _, s in ipairs(strings) do\n\t\tif str.startswith(s,\
    \ prefix) then\n\t\t\ttable.insert(out, s)\n\t\tend\n\tend\n\treturn out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf0c039y4.lua:9:\
    \ attempt to index a nil value (global 'str')\nstack traceback:\n\t/tmp/tmpf0c039y4.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpf0c039y4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal out = {}\n\tfor _, v in ipairs(strings) do\n\t\tif v:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(out, v)\n\t\tend\n\tend\n\treturn\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    return set.filter(strings, function(string)\n        return string:startswith(prefix)\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp05nnx0qt.lua:7:\
    \ attempt to index a nil value (global 'set')\nstack traceback:\n\t/tmp/tmp05nnx0qt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp05nnx0qt.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _,s in ipairs(strings) do\n    if s:starts_with(prefix)\
    \ then\n      result[#result+1] = s\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsapdo9fb.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpsapdo9fb.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsapdo9fb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local results = {}\n  for _, str in ipairs(strings) do\n    if str:starts(prefix)\
    \ then\n      table.insert(results, str)\n    end\n  end\n  return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jjck32s.lua:9:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmp2jjck32s.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2jjck32s.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local prefix_length = string.len(prefix)\n  local output = {}\n \
    \ for _, str in ipairs(strings) do\n    if string.sub(str, 1, prefix_length) ==\
    \ prefix then\n      table.insert(output, str)\n    end\n  end\n  return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, s in ipairs(strings) do\n     \
    \   if s:find('^' .. prefix) then\n            table.insert(filtered, s)\n   \
    \     end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local results = {}\n  for _, candidate in ipairs(strings) do\n  \
    \  if string.startswith(candidate, prefix) then\n      table.insert(results, candidate)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdflfcgih.lua:9:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpdflfcgih.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdflfcgih.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, k in ipairs(strings) do\n       \
    \ if k:startswith(prefix) then\n            table.insert(result, k)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpovhtrdpt.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpovhtrdpt.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpovhtrdpt.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, value in ipairs(strings) do\n    if vim.startswith(value,\
    \ prefix) then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8me6cr4t.lua:9:\
    \ attempt to index a nil value (global 'vim')\nstack traceback:\n\t/tmp/tmp8me6cr4t.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8me6cr4t.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  return lib.filter(strings, function(s) return string.startswith(s,\
    \ prefix) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmz4xw8uo.lua:7:\
    \ attempt to index a nil value (global 'lib')\nstack traceback:\n\t/tmp/tmpmz4xw8uo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmz4xw8uo.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local ret = {}\n    for _, v in ipairs(strings) do\n        if\
    \ v:startswith(prefix) then\n            table.insert(ret, v)\n        end\n \
    \   end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuvcl8217.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpuvcl8217.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpuvcl8217.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal ret = {}\n\tfor _,str in ipairs(strings) do\n\t\tif str:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(ret, str)\n\t\tend\n\tend\n\treturn\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local new_table = {}\n  for _,v in ipairs(strings) do\n    if v:find('^'..prefix)\
    \ then\n      table.insert(new_table, v)\n    end\n  end\n  return new_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, item in ipairs(strings) do\n  \
    \      if item:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ item)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, s in ipairs(strings) do\n     \
    \   if s:startswith(prefix) then\n            table.insert(filtered, s)\n    \
    \    end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptuar0s2s.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmptuar0s2s.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptuar0s2s.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal res = {}\n\tfor i,string in ipairs(strings) do\n\t\tif string:starts(prefix)\
    \ then\n\t\t\ttable.insert(res, string)\n\t\tend\n\tend\n\treturn res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp37_z1wqy.lua:9:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmp37_z1wqy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp37_z1wqy.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local new_strings = {}\n  for _, s in ipairs(strings) do\n    if\
    \ s:sub(1, #prefix) == prefix then\n      table.insert(new_strings, s)\n    end\n\
    \  end\n  return new_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for i, string in ipairs(strings) do\n  \
    \      if string.sub(string, 1, string.len(prefix)) == prefix then\n         \
    \   table.insert(result, string)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _,value in ipairs(strings) do\n    if string.sub(value,\
    \ 1, prefix:len()) == prefix then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  return rspamd_util.filter_input(strings, function(s)\n    if type(s)\
    \ == 'string' then\n      return s:sub(1, #prefix) == prefix\n    end\n    return\
    \ false\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_v8pevug.lua:7:\
    \ attempt to index a nil value (global 'rspamd_util')\nstack traceback:\n\t/tmp/tmp_v8pevug.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_v8pevug.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for i, str in ipairs(strings) do\n     \
    \   if str:find('^' .. prefix) then\n            table.insert(result, str)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif string.sub(str,\
    \ 1, string.len(prefix)) == prefix then\n\t\t\ttable.insert(result, str)\n\t\t\
    end\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for _, string in ipairs(strings) do\n    if\
    \ string.startswith(string, prefix) then\n      table.insert(filtered, string)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp373qviu.lua:9:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpp373qviu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpp373qviu.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local t = {}\n    for _, str in ipairs(strings) do\n        if\
    \ string.sub(str, 1, #prefix) == prefix then\n            table.insert(t, str)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local match = {}\n  for _, s in ipairs(strings) do\n    if is_prefix(s,\
    \ prefix) then\n      table.insert(match, s)\n    end\n  end\n  return match\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx2d_p2ls.lua:9:\
    \ attempt to call a nil value (global 'is_prefix')\nstack traceback:\n\t/tmp/tmpx2d_p2ls.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpx2d_p2ls.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, str in ipairs(strings) do\n   \
    \     if str:starts_with(prefix) then\n            table.insert(filtered, str)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbsizien.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpxbsizien.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxbsizien.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local results = {}\n    for _, s in ipairs(strings) do\n      \
    \  if string.sub(s, 1, #prefix) == prefix then\n            table.insert(results,\
    \ s)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local matches = {}\n    for i, s in ipairs(strings) do\n      \
    \  if s:starts_with(prefix) then\n            table.insert(matches, s)\n     \
    \   end\n    end\n    return matches\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgg5x7xx4.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpgg5x7xx4.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgg5x7xx4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6t3ej9p_.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp6t3ej9p_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6t3ej9p_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  if type(strings) ~= 'table' then\n    error('strings is not a table:\
    \ ' .. tostring(strings))\n  end\n  if type(prefix) ~= 'string' then\n    error('prefix\
    \ is not a string: ' .. tostring(prefix))\n  end\n  local result = {}\n  for k,\
    \ v in pairs(strings) do\n    if type(v) == 'string' and string.sub(v, 1, #prefix)\
    \ == prefix then\n      result[k] = v\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrt59jkf.lua:26:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", 5=\"xxxAAA\", 6=\"\
    xxx\"}\nstack traceback:\n\t/tmp/tmprrt59jkf.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for i,string in ipairs(strings) do\n    if\
    \ string:sub(1,#prefix) == prefix then\n      table.insert(filtered, string)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if string.sub(str, 1, string.len(prefix)) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local res = {}\n  for _, s in ipairs(strings) do\n    if s:starts_with(prefix)\
    \ then\n      table.insert(res, s)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpep_21xte.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpep_21xte.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpep_21xte.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local ret = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:sub(1, #prefix) == prefix then\n            table.insert(ret, str)\n   \
    \     end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for k,v in pairs(strings) do\n        if\
    \ string.sub(v, 1, #prefix) == prefix then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _,str in ipairs(strings) do\n      \
    \  if string.sub(str, 1, string.len(prefix)) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, str in ipairs(strings) do\n   \
    \     if starts_with(str, prefix) then\n            filtered[#filtered + 1] =\
    \ str\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1afnh5tf.lua:9:\
    \ attempt to call a nil value (global 'starts_with')\nstack traceback:\n\t/tmp/tmp1afnh5tf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1afnh5tf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  if #strings == 0 then\n    return {}\n  end\n  local result = {}\n\
    \  for _, s in ipairs(strings) do\n    if string.find(s, '^' .. prefix) then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for s in all(strings) do\n        if starts_with(s,\
    \ prefix) then\n            insert(result, s)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdaplucjy.lua:8:\
    \ attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmpdaplucjy.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpdaplucjy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for string, _ in pairs(strings) do\n    if string.startswith(string,\
    \ prefix) then\n      result[string] = true\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbilxzqfd.lua:9:\
    \ attempt to index a number value (local 'string')\nstack traceback:\n\t/tmp/tmpbilxzqfd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbilxzqfd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _,v in ipairs(strings) do\n        if\
    \ v:starts_with(prefix) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmpay_53f.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpmpay_53f.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmpay_53f.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for k,v in pairs(strings) do\n    if string.sub(v,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(filtered, v)\n   \
    \ end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    assert(type(strings) == 'table', \"expected a table\")\n    assert(type(prefix)\
    \ == 'string', \"expected a string\")\n    local ret = {}\n    for _, v in ipairs(strings)\
    \ do\n        if v:sub(1, prefix:len()) == prefix then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for k, v in pairs(strings) do\n    if v:sub(1,\
    \ #prefix) == prefix then\n      result[k] = v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpteu57j28.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", 5=\"xxxAAA\", 6=\"\
    xxx\"}\nstack traceback:\n\t/tmp/tmpteu57j28.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, s in ipairs(strings) do\n     \
    \   if s:sub(1, #prefix) == prefix then\n            table.insert(filtered, s)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _,s in ipairs(strings) do\n      \
    \  if s:find('^' .. prefix) then\n            table.insert(filtered, s)\n    \
    \    end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for i, v in ipairs(strings) do\n    if v:sub(1,\
    \ prefix:len()) == prefix then\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for k, v in pairs(strings) do\n        if\
    \ v:sub(1, prefix:len()) == prefix then\n            result[k] = v\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5bp8h9i.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", 5=\"xxxAAA\", 6=\"\
    xxx\"}\nstack traceback:\n\t/tmp/tmpk5bp8h9i.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local prefix_length = #prefix\n    local result = {}\n    for _,\
    \ s in ipairs(strings) do\n        if s:sub(1, prefix_length) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, s in ipairs(strings) do\n     \
    \   if s:sub(1, #prefix) == prefix then\n            filtered[#filtered + 1] =\
    \ s\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local results = {}\n  for i, v in ipairs(strings) do\n    if str_starts_with(v,\
    \ prefix) then\n      table.insert(results, v)\n    end\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8fct4p6p.lua:9:\
    \ attempt to call a nil value (global 'str_starts_with')\nstack traceback:\n\t\
    /tmp/tmp8fct4p6p.lua:9: in local 'candidate'\n\t/tmp/tmp8fct4p6p.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if string.sub(str, 1, string.len(prefix)) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, v in ipairs(strings) do\n       \
    \ if string.sub(v, 1, #prefix) == prefix then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal matches = {}\n\tfor _, v in ipairs(strings) do\n\t\tif v:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(matches, v)\n\t\tend\n\tend\n\t\
    return matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for k, v in pairs(strings) do\n        if\
    \ (type(v) == 'string' and string.sub(v, 1, string.len(prefix)) == prefix) then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal results = {}\n\tfor _, string in ipairs(strings) do\n\t\tif\
    \ string:startswith(prefix) then\n\t\t\tresults[#results + 1] = string\n\t\tend\n\
    \tend\n\treturn results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpan0pf2fc.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpan0pf2fc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpan0pf2fc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal output = {}\n\tfor _, str in ipairs(strings) do\n\t\tif string.sub(str,\
    \ 1, string.len(prefix)) == prefix then\n\t\t\ttable.insert(output, str)\n\t\t\
    end\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor _, v in ipairs(strings) do\n\t\tif string.sub(v,\
    \ 1, #prefix) == prefix then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local prefix_len = prefix:len()\n    local filtered = {}\n    for\
    \ _, str in ipairs(strings) do\n        if str:sub(1, prefix_len) == prefix then\n\
    \            table.insert(filtered, str)\n        end\n    end\n    return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local rtn = {}\n  for i = 1, #strings do\n    if vim.startswith(strings[i],\
    \ prefix) then\n      rtn[#rtn + 1] = strings[i]\n    end\n  end\n  return rtn\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5oov9ycc.lua:9:\
    \ attempt to index a nil value (global 'vim')\nstack traceback:\n\t/tmp/tmp5oov9ycc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5oov9ycc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for k,v in pairs(strings) do\n    if v:starts(prefix)\
    \ then\n      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnhmgk44u.lua:9:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmpnhmgk44u.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnhmgk44u.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, line in ipairs(strings) do\n    if line:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, line)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local ret = {}\n    for _, v in ipairs(strings) do\n        if\
    \ string.sub(v, 1, #prefix) == prefix then\n            table.insert(ret, v)\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, string in ipairs(strings) do\n  \
    \      if string.sub(string, 1, #prefix) == prefix then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local matches = {}\n  for _, name in ipairs(strings) do\n    if name:starts_with(prefix)\
    \ then\n      table.insert(matches, name)\n    end\n  end\n  return matches\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsyjyme_u.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpsyjyme_u.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsyjyme_u.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if starts_with(str, prefix) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01p2mn13.lua:9:\
    \ attempt to call a nil value (global 'starts_with')\nstack traceback:\n\t/tmp/tmp01p2mn13.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp01p2mn13.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:startswith(prefix)\
    \ then\n\t\t\tresult[#result + 1] = s\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmput56yesc.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmput56yesc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmput56yesc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local length = prefix:len()\n  local filtered = {}\n  for _,str in\
    \ ipairs(strings) do\n    if str:sub(1, length) == prefix then\n      table.insert(filtered,\
    \ str)\n    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor _, v in ipairs(strings) do\n\t\tif string.startswith(v,\
    \ prefix) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprtxjrccf.lua:9:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmprtxjrccf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprtxjrccf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local prefix_len = #prefix\n    local matching = {}\n    for _,\
    \ v in ipairs(strings) do\n        if v:sub(1, prefix_len) == prefix then\n  \
    \          table.insert(matching, v)\n        end\n    end\n    return matching\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for _, s in ipairs(strings) do\n    if (string.sub(s,\
    \ 1, string.len(prefix)) == prefix) then\n      table.insert(filtered, s)\n  \
    \  end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, string in ipairs(strings) do\n    if\
    \ string:startswith(prefix) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy0ku89wn.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpy0ku89wn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpy0ku89wn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local rv = {}\n    for _,s in ipairs(strings) do\n        if string.sub(s,\
    \ 1, #prefix) == prefix then\n            table.insert(rv, s)\n        end\n \
    \   end\n    return rv\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local results = {}\n  for _,string in ipairs(strings) do\n    if\
    \ string:sub(1, #prefix) == prefix then\n      table.insert(results, string)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for i, string in ipairs(strings) do\n  \
    \      if string.sub(string, 1, string.len(prefix)) == prefix then\n         \
    \   table.insert(result, string)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:startswith(prefix)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_ehm6l8.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp7_ehm6l8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7_ehm6l8.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6t3ej9p_.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp6t3ej9p_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6t3ej9p_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, v in ipairs(strings) do\n    if string.sub(v,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal prefix_len = prefix:len()\n\tlocal filtered = {}\n\tfor _,\
    \ s in ipairs(strings) do\n\t\tif s:sub(1, prefix_len) == prefix then\n\t\t\t\
    table.insert(filtered, s)\n\t\tend\n\tend\n\treturn filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local prefix_len = #prefix\n  local matches = {}\n  for i = 1, #strings\
    \ do\n    local string = strings[i]\n    if prefix == string:sub(1, prefix_len)\
    \ then\n      matches[#matches + 1] = string\n    end\n  end\n  return matches\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal filtered = {}\n\tfor _, s in ipairs(strings) do\n\t\tif string.startswith(s,\
    \ prefix) then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\treturn filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppj8_zdwf.lua:9:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmppj8_zdwf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppj8_zdwf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, entry in ipairs(strings) do\n   \
    \     if entry:find('^' .. prefix) then\n            table.insert(result, entry)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for i = 1, #strings do\n        if strings[i]:starts_with(prefix)\
    \ then\n            table.insert(result, strings[i])\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4huicoy7.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmp4huicoy7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4huicoy7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor _,name in ipairs(strings) do\n\t\tif string.sub(name,\
    \ 1, #prefix) == prefix then\n\t\t\ttable.insert(result, name)\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for i, string in ipairs(strings) do\n\
    \        if string:startswith(prefix) then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4wd9h02.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpg4wd9h02.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpg4wd9h02.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\treturn table.filter(strings, function(str)\n\t\treturn string.sub(str,\
    \ 1, string.len(prefix)) == prefix\n\tend)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpufuinar1.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpufuinar1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpufuinar1.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local output = {}\n  for _,value in ipairs(strings) do\n    if value:startswith(prefix)\
    \ then\n      table.insert(output, value)\n    end\n  end\n  return output\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_996x3i.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpw_996x3i.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpw_996x3i.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwnk162y.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpiwnk162y.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpiwnk162y.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal output = {}\n\tfor _, value in ipairs(strings) do\n\t\tif value:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(output, value)\n\t\tend\n\tend\n\
    \treturn output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  assert(prefix, 'required prefix')\n  local filtered = {}\n  for _,\
    \ str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix then\n     \
    \ table.insert(filtered, str)\n    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor _,string in ipairs(strings) do\n\t\tif string.sub(string,\
    \ 1, #prefix) == prefix then\n\t\t\ttable.insert(result, string)\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local count = #strings\n  local result = {}\n  for index = 1, count\
    \ do\n    local name = strings[index]\n    if string.sub(name, 1, #prefix) ==\
    \ prefix then\n      result[#result + 1] = name\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local out = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:sub(1, #prefix) == prefix then\n            table.insert(out, str)\n   \
    \     end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, v in ipairs(strings) do\n    if vim.startswith(v,\
    \ prefix) then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5duow7sw.lua:9:\
    \ attempt to index a nil value (global 'vim')\nstack traceback:\n\t/tmp/tmp5duow7sw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5duow7sw.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    return hs.fnutils.filter(strings, function(s) return s:match(prefix)\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp15axvcso.lua:7:\
    \ attempt to index a nil value (global 'hs')\nstack traceback:\n\t/tmp/tmp15axvcso.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp15axvcso.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwnk162y.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpiwnk162y.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpiwnk162y.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for i = 1, #strings do\n    if string.sub(strings[i],\
    \ 1, #prefix) == prefix then\n      table.insert(filtered, strings[i])\n    end\n\
    \  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if prefix == '' or s:startswith(prefix) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5po2i6di.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp5po2i6di.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5po2i6di.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local array = {}\n  for i, s in ipairs(strings) do\n    if string.sub(s,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(array, s)\n    end\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal matched = {}\n\tfor _, v in ipairs(strings) do\n\t\tif v:startswith(prefix)\
    \ then\n\t\t\ttable.insert(matched, v)\n\t\tend\n\tend\n\treturn matched\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnmx3z4t.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmplnmx3z4t.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplnmx3z4t.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:starts(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8vxas11.lua:9:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmpn8vxas11.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpn8vxas11.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _,str in ipairs(strings) do\n      \
    \  if str:startswith(prefix) then\n            table.insert(result, str)\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvro0e5zr.lua:9:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpvro0e5zr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvro0e5zr.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local r = {}\n  for k, v in pairs(strings) do\n    if v:sub(1, #prefix)\
    \ == prefix then\n      r[k] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4x4ijeic.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", 5=\"xxxAAA\", 6=\"\
    xxx\"}\nstack traceback:\n\t/tmp/tmp4x4ijeic.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for i, s in ipairs(strings) do\n    if string.sub(s,\
    \ 1, #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if starts_with(s,\
    \ prefix) then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ii1sr4n.lua:9:\
    \ attempt to call a nil value (global 'starts_with')\nstack traceback:\n\t/tmp/tmp8ii1sr4n.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8ii1sr4n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local copy = {}\n    for _, s in ipairs(strings) do\n        if\
    \ s:starts_with(prefix) then\n            table.insert(copy, s)\n        end\n\
    \    end\n    return copy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgmw744f.lua:9:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmppgmw744f.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppgmw744f.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, string in ipairs(strings) do\n    if\
    \ string:sub(1, #prefix) == prefix then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, item in ipairs(strings) do\n    if startswith(item,\
    \ prefix) then\n      table.insert(result, item)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprmum4a6h.lua:9:\
    \ attempt to call a nil value (global 'startswith')\nstack traceback:\n\t/tmp/tmprmum4a6h.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprmum4a6h.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local output = {}\n  for _,s in ipairs(strings) do\n    if starts_with(s,\
    \ prefix) then\n      table.insert(output, s)\n    end\n  end\n  return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpidnh4jju.lua:9:\
    \ attempt to call a nil value (global 'starts_with')\nstack traceback:\n\t/tmp/tmpidnh4jju.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpidnh4jju.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  assert(type(strings) == 'table', \"Expected a table of strings, got\
    \ \" .. type(strings))\n  assert(type(prefix) == 'string', \"Expected a string,\
    \ got \" .. type(prefix))\n  assert(prefix:len() == 1, \"Expected a string of\
    \ length 1, got \" .. prefix:len())\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdxp7aqit.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tassert(type(strings) == 'table', 'filter_by_prefix: strings')\n\t\
    assert(type(prefix) == 'string', 'filter_by_prefix: prefix')\n\tlocal results\
    \ = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:starts_with(prefix) then\n\
    \t\t\ttable.insert(results, str)\n\t\tend\n\tend\n\treturn results\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6yjj6fk.lua:11:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpq6yjj6fk.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpq6yjj6fk.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local out = {}\n  for _, v in ipairs(strings) do\n    if string.match(v,\
    \ '^' .. prefix) then\n      table.insert(out, v)\n    end\n  end\n  return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local results = {}\n    for k, v in pairs(strings) do\n       \
    \ if v:sub(1, #prefix) == prefix then\n            results[k] = v\n        end\n\
    \    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv31nhvdl.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", 5=\"xxxAAA\", 6=\"\
    xxx\"}\nstack traceback:\n\t/tmp/tmpv31nhvdl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for i = 1, #strings do\n    if strings[i]:sub(1,\
    \ #prefix) == prefix then\n      result[#result + 1] = strings[i]\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if string.sub(str,\
    \ 1, #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if (string.sub(str, 1, string.len(prefix)) == prefix) then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, v in ipairs(strings) do\n       \
    \ if util.str_startswith(v, prefix) then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprmzowxn_.lua:9:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmprmzowxn_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprmzowxn_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, string in ipairs(strings) do\n    if\
    \ string:sub(1, #prefix) == prefix then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local results = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(results, s)\n    end\n  end\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, string in ipairs(strings) do\n    if\
    \ string:sub(1, #prefix) == prefix then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
    \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  assert(type(strings) == 'table')\n  assert(type(prefix) == 'string')\n\
    \  local ret = {}\n  for _, s in ipairs(strings) do\n    if (s:sub(1, #prefix)\
    \ == prefix) then\n      table.insert(ret, s)\n    end\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978263
