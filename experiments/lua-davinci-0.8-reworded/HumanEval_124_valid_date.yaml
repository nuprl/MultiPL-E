name: HumanEval_124_valid_date
language: lua
prompt: "-- You have to write a function which validates a given date string and\n\
  -- returns true if the date is valid otherwise false.\n-- The date is valid if all\
  \ of the following rules are satisfied:\n-- 1. The date string is not empty.\n--\
  \ 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  -- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should\
  \ be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- true\n-- >>>\
  \ valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n-- false\n\
  -- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n-- false\n\
  local function valid_date(date)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
  \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
  \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
  \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
  \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
  \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
  \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
  \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
  \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local d, m, y = string.match(date, '(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \  local days, month, year = tonumber(d), tonumber(m), tonumber(y)\n  local max_days\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  -- check leap year\n \
    \ if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then\n    max_days[2]\
    \ = 29\n  end\n  if not (days and month and year) then\n    return false\n  end\n\
    \  if days < 1 or days > max_days[month] then\n    return false\n  end\n  if month\
    \ < 1 or month > 12 then\n    return false\n  end\n  return true\nend", "    --\
    \ TODO\nend", "  local m, d, y = string.match(date, '(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \  if not m or not d or not y then return false end\n  return true\nend", "  if\
    \ #date == 0 then\n    return false\n  end\n  local date_table = date:split('-')\n\
    \  if #date_table ~= 3 then\n    return false\n  end\n  local month, day, year\
    \ = date_table[1], date_table[2], date_table[3]\n  if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then\n    return false\n  end\n  if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n    return false\n  end\n  if month == '04' or month == '06' or month\
    \ == '09' or month == '11' then\n    if tonumber(day) > 30 then\n      return\
    \ false\n    end\n  end\n  if month == '02' then\n    if tonumber(day) > 29 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    if not date then\
    \ return false end\n    local y, m, d = date:match('(%d%d%d%d)%-(%d%d)%-(%d%d)')\n\
    \    if not y then return false end\n    if not m or not d then return false end\n\
    \    m, d, y = tonumber(m), tonumber(d), tonumber(y)\n    if (not m) or (not d)\
    \ or (not y) then return false end\n    if m < 1 or m > 12 then return false end\n\
    \    if m == 2 then\n        if y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0)\
    \ then\n            if d < 1 or d > 29 then return false end\n        else\n \
    \           if d < 1 or d > 28 then return false end\n        end\n    elseif\
    \ m == 4 or m == 6 or m == 9 or m == 11 then\n        if d < 1 or d > 30 then\
    \ return false end\n    else\n        if d < 1 or d > 31 then return false end\n\
    \    end\n    return true\nend", "    local vday = {\n        [1] = 31,\n    \
    \    [2] = 29,\n        [3] = 31,\n        [4] = 30,\n        [5] = 31,\n    \
    \    [6] = 30,\n        [7] = 31,\n        [8] = 31,\n        [9] = 30,\n    \
    \    [10] = 31,\n        [11] = 30,\n        [12] = 31\n    }\n    local day,\
    \ month, year = date:match '(%d%d)-(%d%d)-(%d%d%d%d)'\n    if not day or not month\
    \ or not year then\n        return false\n    end\n    local leap\n    if year\
    \ % 4 == 0 then\n        leap = true\n    else\n        leap = false\n    end\n\
    \    if tonumber(day) <= vday[tonumber(month)] then\n        return true\n   \
    \ else\n        return false\n    end\nend\nreturn valid_date", "\tlocal date_list\
    \ = date:split('-')\n\tlocal month = tonumber(date_list[1])\n\tlocal day = tonumber(date_list[2])\n\
    \tlocal year = tonumber(date_list[3])\n\tlocal is_valid = false\n\tif month >=\
    \ 1 and month <= 12 then\n\t\tif day >= 1 and day <= 31 then\n\t\t\tif month ==\
    \ 2 then\n\t\t\t\tif (year % 4 == 0 and year % 100 ~= 0) or year % 400 == 0 then\n\
    \t\t\t\t\tis_valid = day <= 29\n\t\t\t\telse\n\t\t\t\t\tis_valid = day <= 28\n\
    \t\t\t\tend\n\t\t\telseif month == 4 or month == 6 or month == 9 or month == 11\
    \ then\n\t\t\t\tis_valid = day <= 30\n\t\t\telse\n\t\t\t\tis_valid = true\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn is_valid\nend", "    return date:match('%d%d%-%d%d%-%d%d%d%d')\
    \ ~= nil\nend", "    -- >>> your code goes here\n    return false\nend", "   \
    \ local days_in_month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n   \
    \ local y, m, d = date:match('(%d+)-(%d+)-(%d+)')\n    if #date == 0 or #m ~=\
    \ 2 or #d ~= 2 or #y ~= 4 then\n        return false\n    end\n    m, d, y = tonumber(m),\
    \ tonumber(d), tonumber(y)\n    if (m < 1 or m > 12) or (d < 1 or d > days_in_month[m])\
    \ then\n        return false\n    end\n    if m == 2 and d == 29 and not (y %\
    \ 4 == 0 and (y % 100 ~= 0 or y % 400 == 0)) then\n        return false\n    end\n\
    \    return true\nend", "  -- body\n  local t = string.split(date,'-')\n  local\
    \ m = tonumber(t[1])\n  local d = tonumber(t[2])\n  local y = tonumber(t[3])\n\
    \  if m < 1 or m > 12 then\n    return false\n  end\n  if (m == 1 or m == 3 or\
    \ m == 5 or m == 7 or m == 8 or m == 10 or m == 12) and (d < 1 or d > 31) then\n\
    \    return false\n  end\n  if (m == 4 or m == 6 or m == 9 or m == 11) and (d\
    \ < 1 or d > 30) then\n    return false\n  end\n  if m == 2 and ((y % 4 == 0 and\
    \ y % 100 ~= 0) or y % 400 == 0) and (d < 1 or d > 29) then\n    return false\n\
    \  end\n  if m == 2 and ((y % 4 ~= 0) or (y % 100 == 0 and y % 400 ~= 0)) and\
    \ (d < 1 or d > 28) then\n    return false\n  end\n  return true\nend", "    if\
    \ date:match(\"%d%d-%d%d-%d%d%d%d\") == nil then\n        return false\n    end\n\
    \    local day, month, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if\
    \ month == \"04\" or month == \"06\" or month == \"09\" or month == \"11\" then\n\
    \        if tonumber(day) > 30 then\n            return false\n        end\n \
    \   elseif month == \"02\" then\n        if tonumber(day) > 29 then\n        \
    \    return false\n        end\n    elseif tonumber(day) > 31 then\n        return\
    \ false\n    end\n    if tonumber(month) > 12 then\n        return false\n   \
    \ end\n    return true\nend", "    local _, count = string.gsub(date, '-', '')\n\
    \    if count ~= 2 then\n        return false\n    end", "  -- implement me\n\
    end", "  -- Code here\nend", "  if date == nil or date == '' then\n    return\
    \ false\n  end\n  local year, month, day = date:match('(%d%d%d%d)-(%d%d)-(%d%d)')\n\
    \  if year == nil or month == nil or day == nil then\n    return false\n  end\n\
    \  year = tonumber(year)\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ if day < 1 or month < 1 or month > 12 then\n    return false\n  end\n  if month\
    \ == 2 then\n    if day > 29 then\n      return false\n    end\n  elseif month\
    \ % 2 == 0 then\n    if day > 30 then\n      return false\n    end\n  else\n \
    \   if day > 31 then\n      return false\n    end\n  end\n  return true\nend",
  "  local valid_date_format = \"^%d%d%p%d%d%p%d%d%d%d$\"\n  local d, m, y = date:match(\"\
    (%d%d)(%p)(%d%d)(%p)(%d%d%d%d)\")\n  if not date:match(valid_date_format) then\n\
    \    return false\n  end\n  if d == nil or m == nil or y == nil then\n    return\
    \ false\n  end\n  if m == \"-\" then\n    if tonumber(d) < 1 or tonumber(d) >\
    \ 31 then\n      return false\n    end\n    if tonumber(d) == 31 and not (tonumber(m)\
    \ == 1 or tonumber(m) == 3 or tonumber(m) == 5 or tonumber(m) == 7 or tonumber(m)\
    \ == 8 or tonumber(m) == 10 or tonumber(m) == 12) then\n      return false\n \
    \   end\n    if tonumber(d) > 30 and (tonumber(m) == 4 or tonumber(m) == 6 or\
    \ tonumber(m) == 9 or tonumber(m) == 11) then\n      return false\n    end\n \
    \   if tonumber(m) == 2 and tonumber(d) > 29 then\n      return false\n    end\n\
    \    if tonumber(m) < 1 or tonumber(m) > 12 then\n      return false\n    end\n\
    \    return true\n  end\nend", "  return rex.match(date, '(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}')\n\
    end", "\tif date:find('[^%d%-]') or date:len() > 10 then\n\t\treturn false\n\t\
    end\n\tlocal day, month, year = date:match('(%d%d)%-(%d%d)%-(%d%d%d%d)')\n\tif\
    \ not day or not month or not year then\n\t\treturn false\n\tend\n\tday, month,\
    \ year = tonumber(day), tonumber(month), tonumber(year)\n\tif day < 1 or day >\
    \ 31 or month < 1 or month > 12 then\n\t\treturn false\n\tend\n\tif month == 2\
    \ and day > 29 then\n\t\treturn false\n\tend\n\tif month % 2 == 0 and month ~=\
    \ 2 and day > 30 then\n\t\treturn false\n\tend\n\treturn true\nend", "  local\
    \ month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  local max_days = 30\n  if month\
    \ == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10\
    \ or month == 12 then\n    max_days = 31\n  elseif month == 2 then\n    max_days\
    \ = 28\n  end\n  return month and day and year and day >= 1 and day <= max_days\
    \ and month >= 1 and month <= 12\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
