name: HumanEval_163_generate_integers
language: lua
prompt: "-- Given two positive integers a and b, return the even digits between a\n\
  -- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8)\n\
  -- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(10,\
  \ 14)\n-- {}\nlocal function generate_integers(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n\
  \    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10,\
  \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
  \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if a > b then\n        a, b = b, a\n    end\n    local ret = {}\n\
    \    for i = a, b do\n        if i % 2 == 0 then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend", "\tlocal function _even_iter(a,\
    \ b)\n\t\tlocal c = a % 2 ~= 0 and a + 1 or a\n\t\treturn c, b\n\tend\n\treturn\
    \ coroutine.wrap(function()\n\t\treturn coroutine.yield(a)\n\tend), _even_iter\n\
    end", "    local set = {}\n    if a < b then\n        for i = a, b do\n      \
    \      if i % 2 == 0 then\n                set[#set + 1] = i\n            end\n\
    \        end\n    else\n        for i = b, a do\n            if i % 2 == 0 then\n\
    \                set[#set + 1] = i\n            end\n        end\n    end\n  \
    \  return set\nend", "    local integers = {}\n    if a < b then\n        for\
    \ i = a, b do\n            if i % 2 == 0 then\n                table.insert(integers,\
    \ i)\n            end\n        end\n    else\n        for i = b, a do\n      \
    \      if i % 2 == 0 then\n                table.insert(integers, i)\n       \
    \     end\n        end\n    end\n    return integers\nend", "    local result\
    \ = {}\n    for i = math.min(a, b), math.max(a, b) do\n        if (i % 2) == 0\
    \ then\n            table.insert(result, i)\n        end\n    end\n    return\
    \ result\nend", "    a = math.min(a, b)\n    b = math.max(a, b)\n    local result\
    \ = {}\n    for i = a, b do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "  local ints = {}\n  local\
    \ start = (a > b) and b or a\n  local finish = (a > b) and a or b\n  for i = start,\
    \ finish do\n    if i % 2 == 0 then\n      table.insert(ints, i)\n    end\n  end\n\
    \  return ints\nend", "  local result = {}\n  local start = a\n  local finish\
    \ = b\n  if a > b then\n    start = b\n    finish = a\n  end\n  for x = start,\
    \ finish do\n    if math.fmod(x, 2) == 0 then\n      table.insert(result, x)\n\
    \    end\n  end\n  return result\nend", "    local integers = {}\n    if a > b\
    \ then\n        for i = b, a do\n            if i % 2 == 0 then\n            \
    \    table.insert(integers, i)\n            end\n        end\n    else\n     \
    \   for i = a, b do\n            if i % 2 == 0 then\n                table.insert(integers,\
    \ i)\n            end\n        end\n    end\n    return integers\nend", "  local\
    \ integers = {}\n  a = a - a % 2\n  b = b - b % 2", "    local result = {}\n \
    \   local x = math.min(a, b)\n    local y = math.max(a, b)\n    while x % 2 ~=\
    \ 0 do\n        x = x + 1\n    end\n    while x <= y do\n        table.insert(result,\
    \ x)\n        x = x + 2\n    end\n    return result\nend", "  local result = {}\n\
    \  local start, stop\n  if a <= b then\n    start, stop = a, b\n  else\n    start,\
    \ stop = b, a\n  end\n  if start % 2 == 0 then\n    start = start + 1\n  end\n\
    \  for i = start, stop, 2 do\n    table.insert(result, i)\n  end\n  return result\n\
    end", "    local integers = {}\n    local start = a\n    local finish = b\n  \
    \  if a > b then\n        start = b\n        finish = a\n    end\n    for i =\
    \ start, finish do\n        if math.fmod(i, 2) == 0 then\n            table.insert(integers,\
    \ i)\n        end\n    end\n    return integers\nend", "    if a > b then\n  \
    \      a, b = b, a\n    end\n    local result = {}\n    for i = a, b do\n    \
    \    if i % 2 == 0 then\n            table.insert(result, i)\n        end\n  \
    \  end\n    return result\nend", "  local res = {}\n  local z = a\n  if a <= b\
    \ then\n    while z <= b do\n      if z % 2 == 0 then\n        table.insert(res,\
    \ z)\n      end\n      z = z + 1\n    end\n  else\n    while z >= b do\n     \
    \ if z % 2 == 0 then\n        table.insert(res, z)\n      end\n      z = z - 1\n\
    \    end\n  end\n  return res\nend", "    local result = {}\n    local lo, hi\n\
    \    if a < b then\n        lo, hi = a, b\n    else\n        lo, hi = b, a\n \
    \   end\n    for i = lo, hi do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "    local set = {}\n   \
    \ local lower = math.min(a, b)\n    local upper = math.max(a, b)\n    for i =\
    \ lower, upper do\n        if i % 2 == 0 then\n            table.insert(set, i)\n\
    \        end\n    end\n    return set\nend", "    local function even_digits(i)\n\
    \        local t = {}\n        while i > 0 do\n            if i % 2 == 0 then\n\
    \                table.insert(t, i % 10)\n            end\n            i = math.floor(i\
    \ / 10)\n        end\n        return t\n    end", "    local t = {}\n    if a\
    \ > b then\n        a, b = b, a\n    end\n    for i = a, b do\n        if i %\
    \ 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return\
    \ t\nend", "    local integers = {}\n    local smallest = math.min(a, b)\n   \
    \ local largest = math.max(a, b)\n    for i = smallest, largest do\n        if\
    \ i % 2 == 0 then\n            table.insert(integers, i)\n        end\n    end\n\
    \    return integers\nend", "    local res = {}\n    if a > b then\n        a,\
    \ b = b, a\n    end\n    for i = a, b do\n        if i % 2 == 0 then\n       \
    \     table.insert(res, i)\n        end\n    end\n    return res\nend", "  if\
    \ a > b then\n    local t = a\n    a = b\n    b = t\n  end\n  local r = {}\n \
    \ for i = a, b do\n    if i % 2 == 0 then\n      r[#r + 1] = i\n    end\n  end\n\
    \  return r\nend", "    local s = {}\n    for i = math.min(a, b), math.max(a,\
    \ b) do\n        if i % 2 == 0 then\n            s[#s + 1] = i\n        end\n\
    \    end\n    return s\nend", "    local integers = {}\n    local x = a\n    local\
    \ y = b\n    if a > b then\n        x = b\n        y = a\n    end\n    for i =\
    \ x, y do\n        if i % 2 == 0 then\n            table.insert(integers, i)\n\
    \        end\n    end\n    return integers\nend", "    if a > b then\n       \
    \ return generate_integers(b, a)\n    end\n    local evens = {}\n    local i =\
    \ a % 2 == 0 and a or a + 1\n    while i <= b do\n        evens[#evens + 1] =\
    \ i\n        i = i + 2\n    end\n    return evens\nend", "  -- TODO: your code\
    \ here\nend", "  if a > b then\n    return {}\n  end\n  if a % 2 == 0 then\n \
    \   return {a, unpack(generate_integers(a + 2, b))}\n  end\n  return generate_integers(a\
    \ + 1, b)\nend", "  if a == b then\n    return {a}\n  elseif a < b then\n    local\
    \ set = {}\n    for i = a, b do\n      table.insert(set, i)\n    end\n    return\
    \ set\n  else\n    local set = {}\n    for i = b, a do\n      table.insert(set,\
    \ i)\n    end\n    return set\n  end\nend", "    if a > b then a, b = b, a end\n\
    \    local ret = setmetatable({}, {__index = table})\n    for i = a, b do\n  \
    \      if (i % 2) == 0 then\n            ret[#ret + 1] = i\n        end\n    end\n\
    \    return ret\nend", "  -- your code here\nend", "  local result = {}\n  local\
    \ min = math.min(a, b)\n  local max = math.max(a, b)\n  for i = min, max do\n\
    \    if i % 2 == 0 then\n      table.insert(result, i)\n    end\n  end\n  return\
    \ result\nend", "    a = math.max(a, 2)\n    b = math.min(b, 9)\n    local result\
    \ = {}\n    for i = a, b do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "    local t = {}\n    local\
    \ r = math.min(a, b)\n    local e = math.max(a, b)\n    for i = r, e do\n    \
    \    if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n\
    \    return t\nend", "  if a > b then\n    a, b = b, a\n  end\n  return set.from_list(range.filter(is_even,\
    \ range.range(a, b)))\nend", "\tlocal result = {}\n\tif a > b then\n\t\ta, b =\
    \ b, a\n\tend\n\tfor i = a, b do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(result,\
    \ i)\n\t\tend\n\tend\n\treturn result\nend", "    if a > b then\n        a, b\
    \ = b, a\n    end\n    local r = {}\n    local n = a\n    while n <= b do\n  \
    \      r[#r + 1] = n\n        n = n + 2\n    end\n    return r\nend", "    local\
    \ nums = {}\n    local l, h = math.min(a, b), math.max(a, b)\n    for i = l, h\
    \ do\n        if i % 2 == 0 then\n            table.insert(nums, i)\n        end\n\
    \    end\n    return nums\nend", "    local set = {}\n    if a > b then\n    \
    \    a, b = b, a\n    end\n    for i = a, b do\n        if i % 2 == 0 then\n \
    \           set[#set + 1] = i\n        end\n    end\n    return set\nend", " \
    \   if (a > b) then\n        local tmp = a\n        a = b\n        b = tmp\n \
    \   end\n    local result = {}\n    for i = a, b do\n        if (i % 2 == 0) then\n\
    \            table.insert(result, i)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for i = math.min(a, b), math.max(a, b) do\n    if\
    \ i % 2 == 0 then\n      table.insert(result, i)\n    end\n  end\n  return result\n\
    end", "    local a, b = math.min(a, b), math.max(a, b)\n    local result = {}\n\
    \    local index = 1\n    for i = a, b do\n        if i % 2 == 0 then\n      \
    \      result[index] = i\n            index = index + 1\n        end\n    end\n\
    \    return result\nend", "    local set = {}\n    for i = math.min(a, b), math.max(a,\
    \ b) do\n        if i % 2 == 0 then\n            table.insert(set, i)\n      \
    \  end\n    end\n    return set\nend", "  local t = {}\n  if a > b then\n    for\
    \ i = b, a do\n      if i % 2 == 0 then\n        table.insert(t, i)\n      end\n\
    \    end\n  else\n    for i = a, b do\n      if i % 2 == 0 then\n        table.insert(t,\
    \ i)\n      end\n    end\n  end\n  return t\nend", "  --YOUR CODE HERE\nend",
  "  if a > b then\n    return generate_integers(b, a)\n  end\n  local result = {}\n\
    \  for i = a, b do\n    if (i % 2) == 0 then\n      table.insert(result, i)\n\
    \    end\n  end\n  return result\nend", "    local t = {}\n    if a > b then\n\
    \        a, b = b, a\n    end\n    for n = a, b do\n        if n % 2 == 0 then\n\
    \            t[#t + 1] = n\n        end\n    end\n    return t\nend", "    local\
    \ set_of_integers = {}\n    for i = math.min(a, b), math.max(a, b) do\n      \
    \  if i % 2 == 0 then\n            table.insert(set_of_integers, i)\n        end\n\
    \    end\n    return set_of_integers\nend", "  local smaller, larger = a, b\n\
    \  if smaller > larger then\n    smaller, larger = larger, smaller\n  end\n  if\
    \ smaller % 2 ~= 0 then\n    smaller = smaller + 1\n  end\n  if larger % 2 ~=\
    \ 0 then\n    larger = larger - 1\n  end\n  if smaller > larger then\n    return\
    \ {}\n  end\n  local ints = {}\n  for i = smaller, larger, 2 do\n    table.insert(ints,\
    \ i)\n  end\n  return ints\nend", "  local min = math.min(a, b)\n  local max =\
    \ math.max(a, b)\n  local c = {}\n  for i = min, max do\n    if i % 2 == 0 then\n\
    \      table.insert(c, i)\n    end\n  end\n  return c\nend", "  assert(a <= b)\n\
    \  local numbers = {}\n  for i = a, b do\n    if i % 2 == 0 then\n      table.insert(numbers,\
    \ i)\n    end\n  end\n  return numbers\nend", "  if a > b then\n    a, b = b,\
    \ a\n  end\n  local even_digits = {}\n  for i = a, b do\n    if i % 2 == 0 then\n\
    \      table.insert(even_digits, i)\n    end\n  end\n  return even_digits\nend",
  "    local a, b = math.min(a, b), math.max(a, b)\n    local integers = {}\n    for\
    \ i = a, b do\n        if i % 2 == 0 then\n            table.insert(integers,\
    \ i)\n        end\n    end\n    return integers\nend", "    local result = {}\n\
    \    a = math.min(a, b)\n    b = math.max(a, b)\n    for i = a, b do\n       \
    \ if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n\
    \    return result\nend", "    local set = {}\n    local function loop(x)\n  \
    \      if x % 2 == 0 then\n            set[#set + 1] = x\n        end\n      \
    \  if x ~= b then\n            loop(x + (a < b and 1 or -1))\n        end\n  \
    \  end\n    loop(a)\n    return set\nend", "    local result = {}\n    for i =\
    \ a, b do\n        if i % 2 == 0 then\n            table.insert(result, i)\n \
    \       end\n    end\n    return result\nend", "    if a > b then\n        return\
    \ generate_integers(b, a)\n    end\n    if a % 2 == 1 then\n        a = a + 1\n\
    \    end\n    local result = {}\n    for i = a, b, 2 do\n        table.insert(result,\
    \ i)\n    end\n    return result\nend", "  local integers = {}\n  for i = math.min(a,\
    \ b), math.max(a, b) do\n    if i % 2 == 0 then\n      table.insert(integers,\
    \ i)\n    end\n  end\n  return integers\nend", "    local function generate_integers_from(k)\n\
    \        if k > b then\n            return nil\n        elseif k > a and k % 2\
    \ == 0 then\n            return k, generate_integers_from(k + 1)\n        else\n\
    \            return generate_integers_from(k + 1)\n        end\n    end\n    return\
    \ generate_integers_from(a)\nend", "    -- ensure a < b\n    if a > b then\n \
    \       a, b = b, a\n    end", "  assert(type(a) == \"number\" and type(b) ==\
    \ \"number\" and a >= 0 and b >= 0,\n         \"function generate_integers: parameters\
    \ must be positive integers\")\n  local result = {}\n  if a <= b then\n    local\
    \ a_even = math.floor(a/2)\n    local b_even = math.floor(b/2)\n    for i = a_even,\
    \ b_even do\n      table.insert(result, i*2)\n    end\n  else\n    -- handle case\
    \ where a is greater than b by flipping a and b\n    local result = generate_integers(b,\
    \ a)\n    for i = 1, #result do\n      result[i] = result[#result + 1 - i]\n \
    \   end\n  end\n  return result\nend", "  local ret = {}\n  if a == b then\n \
    \   if a % 2 == 0 then\n      ret[1] = a\n    end\n  elseif a < b then\n    for\
    \ i = a, b do\n      if i % 2 == 0 then\n        ret[#ret + 1] = i\n      end\n\
    \    end\n  else\n    for i = a, b, -1 do\n      if i % 2 == 0 then\n        ret[#ret\
    \ + 1] = i\n      end\n    end\n  end\n  return ret\nend", "  if a > b then\n\
    \    a, b = b, a\n  end\n  local result = {}\n  for i = a, b do\n    if i % 2\
    \ == 0 then\n      table.insert(result, i)\n    end\n  end\n  return result\n\
    end", "  if a == b then\n    return {a}\n  elseif a < b then\n    return {\n \
    \     a,\n      a + 2,\n      a + 4,\n      a + 6,\n      a + 8,\n      a + 10,\n\
    \      a + 12,\n      a + 14,\n      a + 16,\n      a + 18,\n      a + 20,\n \
    \     a + 22,\n      a + 24,\n      a + 26,\n      a + 28,\n      a + 30,\n  \
    \    a + 32,\n      a + 34,\n      a + 36,\n      a + 38,\n      a + 40,\n   \
    \   a + 42,\n      a + 44,\n      a + 46,\n      a + 48,\n      a + 50,\n    \
    \  a + 52,\n      a + 54,\n      a + 56,\n      a + 58,\n      a + 60,\n     \
    \ a + 62,\n      a + 64,\n      a + 66,\n      a + 68,\n      a + 70,\n      a\
    \ + 72,\n      a + 74,\n      a + 76,\n      a + 78,\n      a + 80,\n      a +\
    \ 82,\n      a + 84,\n      a + 86,\n      a + 88,\n      a + 90,\n      a + 92,\n\
    \      a + 94,\n      a + 96,\n      a + 98,\n      a + 100,\n      a + 102,\n\
    \      a + 104,\n      a + 106,\n      a + 108,\n      a + 110,\n      a + 112,\n\
    \      a + 114,\n      a + 116,\n      a + 118,\n      a + 120,\n      a + 122,\n\
    \      a + 124,\n      a + 126,\n      a + 128,\n      a + 130,\n      a + 132,\n\
    \      a + 134,\n      a + 136,\n      a + 138,\n      a + 140,\n      a + 142,\n\
    \      a + 144,\n      a + 146,\n      a + 148,\n      a + 150,\n      a + 152,\n\
    \      a + 154,\n      a + 156,\n      a + 158,\n      a + 160,\n      a", " \
    \ local integers = {}\n  if a < b then\n    for i = a, b do\n      if i % 2 ==\
    \ 0 then\n        table.insert(integers, i)\n      end\n    end\n  else\n    for\
    \ i = b, a do\n      if i % 2 == 0 then\n        table.insert(integers, i)\n \
    \     end\n    end\n  end\n  return integers\nend", "    local t = {}\n    if\
    \ b < a then\n        a, b = b, a\n    end\n    for i = a, b do\n        if i\
    \ % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return\
    \ t\nend", "    -- Write your code here\nend", "    -- This function body should\
    \ be completed by you.\n    -- The local keyword is used to declare a local variable.\n\
    \    local set = {}\n    local i = math.min(a, b)\n    local j = math.max(a, b)\n\
    \    for i=i,j do\n        if i % 2 == 0 then\n            table.insert(set, i)\n\
    \        end\n    end\n    return set\nend", "  local c = a <= b and a or b\n\
    \  local d = a <= b and b or a\n  local list = {}\n  for i = c, d do\n    if i\
    \ % 2 == 0 then\n      table.insert(list, i)\n    end\n  end\n  return list\n\
    end", "    a = a or 0\n    b = b or 0\n    local r = {}\n    if a > b then\n \
    \       a, b = b, a\n    end\n    for i = a, b do\n        if i % 2 == 0 then\n\
    \            r[#r + 1] = i\n        end\n    end\n    return r\nend", "    local\
    \ even_digits = {}\n    local min = math.min(a, b)\n    local max = math.max(a,\
    \ b)\n    for i = min, max do\n        if i % 2 == 0 then\n            table.insert(even_digits,\
    \ i)\n        end\n    end\n    return even_digits\nend", "    local c = 0\n \
    \   local integs = {}\n    if a > b then\n        local c = a\n        a = b\n\
    \        b = c\n    end\n    for i = a, b do\n        if i % 2 == 0 then\n   \
    \         c = c + 1\n            integs[c] = i\n        end\n    end\n    return\
    \ integs\nend", "    local numbers = {}\n    local big, small = math.max(a, b),\
    \ math.min(a, b)\n    for i = small, big do\n        if i % 2 == 0 then\n    \
    \        table.insert(numbers, i)\n        end\n    end\n    return numbers\n\
    end", "    if a % 2 == 1 then\n        a = a + 1\n    end\n    if b % 2 == 1 then\n\
    \        b = b - 1\n    end\n    if a > b then\n        return {}\n    end\n \
    \   return range(a, b, 2)\nend\nassert(table_equals(generate_integers(2, 8), {2,\
    \ 4, 6, 8}))\nassert(table_equals(generate_integers(8, 2), {2, 4, 6, 8}))\nassert(table_equals(generate_integers(10,\
    \ 14), {}))", "  local ret = {}\n  if a < b then\n    for i = a, b do\n      if\
    \ is_even(i) then\n        ret[#ret + 1] = i\n      end\n    end\n  else\n   \
    \ for i = b, a do\n      if is_even(i) then\n        ret[#ret + 1] = i\n     \
    \ end\n    end\n  end\n  return ret\nend", "    if a > b then\n        a, b =\
    \ b, a\n    end\n    local t = {}\n    for i = a, b do\n        if i % 2 == 0\
    \ then\n            t[#t + 1] = i\n        end\n    end\n    return t\nend", " \
    \   local m = math.min(a, b)\n    local M = math.max(a, b)\n    local l = {}\n\
    \    for i = m, M do\n        if math.fmod(i, 2) == 0 then\n            table.insert(l,\
    \ i)\n        end\n    end\n    return l\nend", "    local integers = {}\n   \
    \ local start = a\n    local end_ = b\n    if a > b then\n        start = b\n\
    \        end_ = a\n    end\n    for i = start, end_ do\n        if i % 2 == 0\
    \ then\n            table.insert(integers, i)\n        end\n    end\n    return\
    \ integers\nend", "  if b < a then\n    a, b = b, a\n  end\n  local numbers =\
    \ {}\n  local n = a\n  while n <= b do\n    if n % 2 == 0 then\n      table.insert(numbers,\
    \ n)\n    end\n    n = n + 1\n  end\n  return numbers\nend", "  local start =\
    \ math.min(a, b)\n  local stop = math.max(a, b)\n  local out = {}\n  for k = start,\
    \ stop do\n    if k % 2 == 0 then\n      table.insert(out, k)\n    end\n  end\n\
    \  return out\nend", "    -- your code here\n    -- Second parameter must be greater\
    \ than first\n    if a > b then\n        return generate_integers(b, a)\n    end",
  "  if a > b then a, b = b, a end\n  if a % 2 == 1 then a = a + 1 end\n  if b % 2\
    \ == 1 then b = b - 1 end\n  local t = {}\n  for i = a, b, 2 do\n    t[#t + 1]\
    \ = i\n  end\n  return t\nend", "  local results = {}\n  for i = a, b do\n   \
    \ if i % 2 == 0 then\n      table.insert(results, i)\n    end\n  end\n  return\
    \ results\nend", "  if a <= b then\n    if a % 2 == 0 then\n      return {a} +\
    \ generate_integers(a + 2, b)\n    else\n      return generate_integers(a + 1,\
    \ b)\n    end\n  else\n    return {}\n  end\nend", "    local integers = {}\n\
    \    local min = math.min(a, b)\n    local max = math.max(a, b)\n    for i = min,\
    \ max do\n        if i % 2 == 0 then\n            table.insert(integers, i)\n\
    \        end\n    end\n    return integers\nend", "  local result = {}\n  local\
    \ start, finish = math.min(a, b), math.max(a, b)\n  for i = start, finish do\n\
    \    if i % 2 == 0 then\n      table.insert(result, i)\n    end\n  end\n  return\
    \ result\nend", "    local result = {}\n    if a <= b then\n        for i = a,\
    \ b do\n            if i % 2 == 0 then\n                table.insert(result, i)\n\
    \            end\n        end\n    else\n        for i = b, a do\n           \
    \ if i % 2 == 0 then\n                table.insert(result, i)\n            end\n\
    \        end\n    end\n    return result\nend", "    if a > b then\n        --\
    \ Swap a and b:\n        a, b = b, a\n    end\n    local evens = {}\n    for i\
    \ = a, b do\n        if i % 2 == 0 then\n            table.insert(evens, i)\n\
    \        end\n    end\n    return evens\nend", "  if a % 2 == 1 then\n    a =\
    \ a + 1\n  end\n  if b % 2 == 1 then\n    b = b - 1\n  end\n  if a >= b then\n\
    \    local arr = {}\n    while a >= b do\n      table.insert(arr, a)\n      a\
    \ = a - 2\n    end\n    return arr\n  else\n    local arr = {}\n    while a <=\
    \ b do\n      table.insert(arr, a)\n      a = a + 2\n    end\n    return arr\n\
    \  end\nend", "  local t = {}\n  if a > b then\n    a, b = b, a\n  end\n  for\
    \ i = a, b do\n    if i % 2 == 0 then\n      t[#t + 1] = i\n    end\n  end\n \
    \ return t\nend", "    local t = {}\n    local start = math.min(a, b)\n    local\
    \ stop = math.max(a, b)\n    for i = start, stop do\n        if i % 2 == 0 then\n\
    \            table.insert(t, i)\n        end\n    end\n    return t\nend", '    --
    YOUR CODE HERE', "\t-- Your code here\n\tprint(\"Solution: \")\nend", "  local\
    \ c\n  if a <= b then\n    c = a\n  else\n    c = b\n  end\n  local set = {}\n\
    \  for n = c, math.max(a, b), 2 do\n    table.insert(set, n)\n  end\n  return\
    \ set\nend", "    if a > b then\n        a, b = b, a\n    end\n    local result\
    \ = {}\n    for i = a, b do\n        if (i % 2) == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "    local t = {}\n    if\
    \ a < b then\n        for i = a, b do\n            if i % 2 == 0 then\n      \
    \          table.insert(t, i)\n            end\n        end\n    else\n      \
    \  for i = b, a do\n            if i % 2 == 0 then\n                table.insert(t,\
    \ i)\n            end\n        end\n    end\n    return t\nend", "  assert(a>0\
    \ and b>0)\n  if a == b then\n    return a % 2 == 0 and {a} or {}\n  end\n  local\
    \ r = {}\n  for i = math.min(a, b), math.max(a, b) do\n    if i % 2 == 0 then\n\
    \      table.insert(r, i)\n    end\n  end\n  return r\nend", "  if a > b then\n\
    \    a, b = b, a\n  end\n  local result = {}\n  for i = a, b do\n    if i % 2\
    \ == 0 then\n      table.insert(result, i)\n    end\n  end\n  return result\n\
    end", "  local results = {}\n  local min, max = math.min(a, b), math.max(a, b)\n\
    \  for i = min, max do\n    if i % 2 == 0 then table.insert(results, i) end\n\
    \  end\n  return results\nend", "  local t = {}\n  local s, e = a, b\n  if a >\
    \ b then\n    s, e = b, a\n  end\n  for i = s, e do\n    if i % 2 == 0 then\n\
    \      table.insert(t, i)\n    end\n  end\n  return t\nend", "  local res = {}\n\
    \  for i = a, b do\n    if math.fmod(i, 2) == 0 then\n      table.insert(res,\
    \ i)\n    end\n  end\n  return res\nend", "  local result = {}\n  if a > b then\n\
    \    a, b = b, a\n  end\n  for i = a, b do\n    if math.fmod(i, 2) == 0 then\n\
    \      table.insert(result, i)\n    end\n  end\n  return result\nend", "    assert(a\
    \ >= 0)\n    assert(b >= 0)\n    local res = {}\n    for i = math.min(a, b), math.max(a,\
    \ b) do\n        if i % 2 == 0 then\n            table.insert(res, i)\n      \
    \  end\n    end\n    return res\nend", "    local greater = math.max(a, b)\n \
    \   local lesser = math.min(a, b)\n    local evens = {}\n    for i = lesser, greater\
    \ do\n        if i % 2 == 0 then\n            table.insert(evens, i)\n       \
    \ end\n    end\n    return evens\nend", "    local evens = {}\n    if a < b then\n\
    \        for x = a, b do\n            if x % 2 == 0 then\n                table.insert(evens,\
    \ x)\n            end\n        end\n    else\n        for x = b, a do\n      \
    \      if x % 2 == 0 then\n                table.insert(evens, x)\n          \
    \  end\n        end\n    end\n    return evens\nend", "    local result = {}\n\
    \    for i = math.min(a, b), math.max(a, b) do\n        if i % 2 == 0 then\n \
    \           table.insert(result, i)\n        end\n    end\n    return result\n\
    end", "  local res = {}\n  local t\n  if a > b then\n    t = a\n    a = b\n  \
    \  b = t\n  end\n  if a % 2 == 0 then\n    a = a + 1\n  end\n  while a <= b do\n\
    \    res[#res + 1] = a\n    a = a + 2\n  end\n  return res\nend", "  local start\
    \ = math.min(a, b)\n  local stop = math.max(a, b)\n  local nums = {}\n  for i\
    \ = start, stop do\n    if i % 2 == 0 then\n      table.insert(nums, i)\n    end\n\
    \  end\n  return nums\nend", "\tlocal t = {}\n\tlocal even = a % 2 == 0\n\tlocal\
    \ start = even and a or a + 1\n\tlocal finish = even and b or b - 1\n\tfor i =\
    \ start, finish, 2 do\n\t\tt[#t + 1] = i\n\tend\n\treturn t\nend", "    local\
    \ result = {}\n    local lo, hi = math.min(a, b), math.max(a, b)\n    for i =\
    \ lo, hi do\n        if i % 2 == 0 then\n            table.insert(result, i)\n\
    \        end\n    end\n    return result\nend", "    local a, b = min(a, b), max(a,\
    \ b)\n    local r = {}\n    for i = a, b do\n        if i % 2 == 0 then\n    \
    \        r[#r + 1] = i\n        end\n    end\n    return r\nend", "  --\n  --\
    \ YOUR CODE HERE\n  --\nend", "    if (a > b) then\n        return {}\n    end\n\
    \    if (a % 2 == 0) then\n        local ret = {a}\n        for v in generate_integers(a\
    \ + 2, b) do\n            table.insert(ret, v)\n        end\n        return ret\n\
    \    else\n        return generate_integers(a + 1, b)\n    end\nend", "  local\
    \ function _generate_integers(a, b, s)\n    if a == b then\n      return (a %\
    \ 2 == 0) and s + a or s\n    elseif a > b then\n      return (a % 2 == 0) and\
    \ _generate_integers(a - 1, b, s + a) or _generate_integers(a - 1, b, s)\n   \
    \ else\n      return (a % 2 == 0) and _generate_integers(a + 1, b, s + a) or _generate_integers(a\
    \ + 1, b, s)\n    end\n  end\n  return _generate_integers(a, b, 0)\nend", "  \
    \  a = math.min(a, b)\n    b = math.max(a, b)\n    local res = {}\n    for i =\
    \ a, b do\n        if i % 2 == 0 then\n            table.insert(res, i)\n    \
    \    end\n    end\n    return res\nend", "    local result = {}\n    if a > b\
    \ then\n        a, b = b, a\n    end\n    for i = a, b do\n        if i % 2 ==\
    \ 0 then\n            table.insert(result, i)\n        end\n    end\n    return\
    \ result\nend", "\tlocal t = {}\n\tlocal start = math.min(a, b)\n\tlocal stop\
    \ = math.max(a, b)\n\tfor i = start, stop do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(t,\
    \ i)\n\t\tend\n\tend\n\treturn t\nend", "    local even_digits = {}\n    for i\
    \ = math.min(a, b), math.max(a, b) do\n        if i % 2 == 0 then\n          \
    \  table.insert(even_digits, i)\n        end\n    end\n    return even_digits\n\
    end", "    local result = {}\n    local smaller\n    local larger\n    if a <=\
    \ b then\n        smaller = a\n        larger = b\n    else\n        smaller =\
    \ b\n        larger = a\n    end\n    local i = smaller\n    while i <= larger\
    \ do\n        if i % 2 == 0 then\n            table.insert(result, i)\n      \
    \  end\n        i = i + 1\n    end\n    return result\nend", "\tlocal a = a %\
    \ 2 == 0 and a or a + 1\n\tlocal b = b % 2 == 0 and b or b - 1\n\treturn a > b\
    \ and {} or {a, generate_integers(a + 2, b)}\nend", "    if a > b then\n     \
    \   a, b = b, a\n    end\n    local s = {}\n    for i = a, b do\n        if i\
    \ % 2 == 0 then\n            s[#s + 1] = i\n        end\n    end\n    return s\n\
    end", "    local res = {}\n    a = math.min(a, b)\n    b = math.max(a, b)\n  \
    \  for i = a, b do\n        if i % 2 == 0 then\n            table.insert(res,\
    \ i)\n        end\n    end\n    return res\nend", "    local result = {}\n   \
    \ if a < b then\n        for i = a, b do\n            if i % 2 == 0 then\n   \
    \             table.insert(result, i)\n            end\n        end\n    else\n\
    \        for i = b, a do\n            if i % 2 == 0 then\n                table.insert(result,\
    \ i)\n            end\n        end\n    end\n    return result\nend", "  local\
    \ min = math.min(a, b)\n  local max = math.max(a, b)\n  local result = {}\n  for\
    \ i = min, max do\n    if i % 2 == 0 then\n      table.insert(result, i)\n   \
    \ end\n  end\n  return result\nend", "\tlocal res = {}\n\tfor i = math.min(a,\
    \ b), math.max(a, b) do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(res, i)\n\t\
    \tend\n\tend\n\treturn res\nend", "\tlocal t = {}\n\tif a > b then\n\t\ta, b =\
    \ b, a\n\tend\n\tfor i = a, b do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(t,\
    \ i)\n\t\tend\n\tend\n\treturn t\nend", "  local evens = {}\n  local low = (a\
    \ > b) and b or a\n  local high = (a > b) and a or b\n  for i = low, high do\n\
    \    if i % 2 == 0 then\n      table.insert(evens, i)\n    end\n  end\n  return\
    \ evens\nend", "  local out = {}\n  for i = a, b do\n    if i % 2 == 0 then\n\
    \      table.insert(out, i)\n    end\n  end\n  return out\nend", "    local t\
    \ = {}\n    local m, n = math.min(a, b), math.max(a, b)\n    for i = m, n do\n\
    \        if i % 2 == 0 then table.insert(t, i) end\n    end\n    return t\nend",
  "    local result = {}\n    if a > b then\n        a, b = b, a\n    end\n    for\
    \ i = a, b do\n        if i % 2 == 0 then\n            table.insert(result, i)\n\
    \        end\n    end\n    return result\nend", "    local r = {}\n    if a >\
    \ b then\n        a, b = b, a\n    end\n    for i = a, b do\n        if i % 2\
    \ == 0 then\n            r[#r + 1] = i\n        end\n    end\n    return r\nend",
  "  if a > b then\n    local c = a\n    a = b\n    b = c\n  end\n  if a % 2 == 1\
    \ then\n    a = a + 1\n  end\n  local res = {}\n  for i = a, b, 2 do\n    res[#res\
    \ + 1] = i\n  end\n  return res\nend", "\ta = math.max(a, 2)\n\tb = math.min(b,\
    \ 10000)\n\ta = a - a % 2\n\tb = b - b % 2\n\tlocal values = {}\n\tfor i = a,\
    \ b, 2 do\n\t\ttable.insert(values, i)\n\tend\n\treturn values\nend", "    assert(type(a)\
    \ == \"number\" and type(b) == \"number\" and a > 0 and b > 0,\n           \"\
    expecting a positive number\")\n    local integers = set()\n    if a <= b then\n\
    \        for i = a, b do\n            if i % 2 == 0 then\n                integers:insert(i)\n\
    \            end\n        end\n    else\n        for i = b, a do\n           \
    \ if i % 2 == 0 then\n                integers:insert(i)\n            end\n  \
    \      end\n    end\n    return integers\nend", "    --TODO: Implement\nend",
  "  local r = {}\n  local s = a\n  local e = b\n  if b < a then\n    s = b\n    e\
    \ = a\n  end\n  while s <= e do\n    if s % 2 == 0 then\n      table.insert(r,\
    \ s)\n    end\n    s = s + 1\n  end\n  return r\nend", "  local result = {}\n\
    \  for n = a, b do\n    if is_even(n) then\n      table.insert(result, n)\n  \
    \  end\n  end\n  return result\nend", "    if a > b then\n        local aux =\
    \ a\n        a = b\n        b = aux\n    end\n    local set = {}\n    local n\
    \ = (a % 2 == 0) and a or a + 1\n    while n <= b do\n        set[#set + 1] =\
    \ n\n        n = n + 2\n    end\n    return set\nend", "    local lower, upper\
    \ = math.min(a, b), math.max(a, b)\n    local out = {}\n    for i = lower, upper\
    \ do\n        if i % 2 == 0 then\n            table.insert(out, i)\n        end\n\
    \    end\n    return out\nend", "    local res = {}\n    if a <= b then\n    \
    \    for i = a, b do\n            if i % 2 == 0 then\n                table.insert(res,\
    \ i)\n            end\n        end\n    else\n        for i = b, a do\n      \
    \      if i % 2 == 0 then\n                table.insert(res, i)\n            end\n\
    \        end\n    end\n    return res\nend", "\tlocal integers = {}\n\tfor i =\
    \ a, b do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(integers, i)\n\t\tend\n\t\
    end\n\treturn integers\nend", "    local tbl = {}\n    for i = math.min(a, b),\
    \ math.max(a, b) do\n        if i % 2 == 0 then\n            table.insert(tbl,\
    \ i)\n        end\n    end\n    return tbl\nend", "  if a > b then\n    local\
    \ tmp = a\n    a = b\n    b = tmp\n  end\n  local set = {}\n  for i = a, b do\n\
    \    if i % 2 == 0 then\n      set[#set + 1] = i\n    end\n  end\n  return set\n\
    end", "\tassert(type(a) == \"number\")\n\tassert(type(b) == \"number\")\n\tassert(a\
    \ > 0)\n\tassert(b > 0)\n\tlocal result = {}\n\tlocal i = a\n\twhile i <= b do\n\
    \t\tif i % 2 == 0 then\n\t\t\ttable.insert(result, i)\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend", "    local result = {}\n    local x = a\n    while\
    \ x <= b do\n        if x % 2 == 0 then\n            table.insert(result, x)\n\
    \        end\n        x = x + 1\n    end\n    return result\nend", "    local\
    \ result = {}\n    local smaller, bigger = a, b\n    if a > b then\n        smaller,\
    \ bigger = b, a\n    end\n    for i = smaller, bigger do\n        if i % 2 ==\
    \ 0 then\n            table.insert(result, i)\n        end\n    end\n    return\
    \ result\nend", "\tlocal result = {}\n\tfor i = a, b do\n\t\tif i % 2 == 0 then\n\
    \t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend", "  if a\
    \ > b then\n    local t = a\n    a = b\n    b = t\n  end\n  local r = {}\n  local\
    \ j = 1\n  for i = a, b do\n    if i % 2 == 0 then\n      r[j] = i\n      j =\
    \ j + 1\n    end\n  end\n  return r\nend", "    local r = {}\n    for i = math.min(a,\
    \ b), math.max(a, b) do\n        if i % 2 == 0 then\n            table.insert(r,\
    \ i)\n        end\n    end\n    return r\nend", "  local lower = math.min(a, b)\n\
    \  local upper = math.max(a, b)\n  local result = {}\n  local count = 0\n  for\
    \ i = lower, upper do\n    if (i % 2) == 0 then\n      count = count + 1\n   \
    \   result[count] = i\n    end\n  end\n  return result\nend", "    if a > b then\
    \ a, b = b, a end\n    if a % 2 == 1 then a = a + 1 end\n    if b % 2 == 1 then\
    \ b = b - 1 end\n    local ret = {}\n    for i = a, b, 2 do\n        table.insert(ret,\
    \ i)\n    end\n    return ret\nend", "    local a, b = math.min(a, b), math.max(a,\
    \ b)\n    local result = {}\n    for x = a, b do\n        if x % 2 == 0 then\n\
    \            table.insert(result, x)\n        end\n    end\n    return result\n\
    end", "    if a > b then\n        a, b = b, a\n    end\n    if b < 2 then\n  \
    \      return {}\n    end\n    if a < 2 then\n        a = 2\n    end\n    local\
    \ evens = {}\n    for i = a, b, 2 do\n        table.insert(evens, i)\n    end\n\
    \    return evens\nend", "    local ret = {}\n    for i = math.min(a, b), math.max(a,\
    \ b) do\n        if i % 2 == 0 then\n            table.insert(ret, i)\n      \
    \  end\n    end\n    return ret\nend", "\tlocal a, b = math.min(a, b), math.max(a,\
    \ b)\n\tlocal out = {}\n\tfor i = a, b do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(out,\
    \ i)\n\t\tend\n\tend\n\treturn out\nend", "\tlocal result = { }\n\tfor i = a,\
    \ b do\n\t\tif is_even(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\
    \treturn result\nend", "  if a > b then\n    return {}\n  end\n  local list =\
    \ {}\n  for i = a, b do\n    if i % 2 == 0 then\n      table.insert(list, i)\n\
    \    end\n  end\n  return list\nend", "  if a > b then\n    a, b = b, a\n  end\n\
    \  local t = {}\n  if a % 2 == 0 then\n    t[#t+1] = a\n    a = a + 1\n  end\n\
    \  while a <= b do\n    t[#t+1] = a\n    a = a + 2\n  end\n  return t\nend", " \
    \   local result = {}\n    a = math.max(a, 2)\n    if a % 2 == 1 then\n      \
    \  a = a + 1\n    end\n    for i = a, b, 2 do\n        result[#result + 1] = i\n\
    \    end\n    return result\nend", "    local max = a > b and a or b\n    local\
    \ min = a < b and a or b\n    local t = {}\n    for i = min, max do\n        if\
    \ i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return\
    \ t\nend", "    local even_numbers = {}\n    if a > b then\n        a, b = b,\
    \ a\n    end\n    for i = a, b do\n        if i % 2 == 0 then\n            table.insert(even_numbers,\
    \ i)\n        end\n    end\n    return even_numbers\nend", "  local integers =\
    \ {}\n  local first = math.min(a, b)\n  local last = math.max(a, b)\n  for i =\
    \ first, last do\n    if i % 2 == 0 then\n      table.insert(integers, i)\n  \
    \  end\n  end\n  return integers\nend", "  local evens = {}\n  if a > b then\n\
    \    a, b = b, a\n  end\n  for i = a, b do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ i)\n    end\n  end\n  return evens\nend", "    local res = {}\n    if a > b\
    \ then\n        a, b = b, a\n    end\n    for i = a, b do\n        if i % 2 ==\
    \ 0 then\n            table.insert(res, i)\n        end\n    end\n    return res\n\
    end", "    -- TODO: implement this\n    return {}\nend", "  assert(a and b)\n\
    \  local r = {}\n  if a > b then\n    while a >= b do\n      if (a % 2) == 0 then\n\
    \        r[#r + 1] = a\n      end\n      a = a - 1\n    end\n  else\n    while\
    \ a <= b do\n      if (a % 2) == 0 then\n        r[#r + 1] = a\n      end\n  \
    \    a = a + 1\n    end\n  end\n  return r\nend", "  local result = {}\n  for\
    \ i = math.min(a, b), math.max(a, b) do\n    if math.fmod(i, 2) == 0 then\n  \
    \    table.insert(result, i)\n    end\n  end\n  return result\nend", "\tif b <\
    \ a then\n\t\tlocal t = a\n\t\ta = b\n\t\tb = t\n\tend\n\tlocal ts = {}\n\tlocal\
    \ s = a % 2 == 0 and a or a + 1\n\tlocal e = b % 2 == 0 and b or b - 1\n\tfor\
    \ i = s, e, 2 do\n\t\ttable.insert(ts, i)\n\tend\n\treturn ts\nend", "  -- TODO:\
    \ implement the function here\nend", "    --[[\n    Given two positive integers\
    \ a and b, return the even digits between a\n    and b, in ascending order.\n\
    \    ]]\n    local result = {}\n    if a > b then\n        local tmp = a\n   \
    \     a = b\n        b = tmp\n    end\n    for i = a, b do\n        if is_even(i)\
    \ then\n            table.insert(result, i)\n        end\n    end\n    return\
    \ result\nend", "    a = a or 0\n    b = b or 0\n    local low = math.min(a, b)\n\
    \    local high = math.max(a, b)\n    local set = {}\n    for i = low, high do\n\
    \        if i % 2 == 0 then\n            table.insert(set, i)\n        end\n \
    \   end\n    return set\nend", "\tlocal function create_iterator(x)\n\t\tlocal\
    \ i = 0\n\t\treturn function()\n\t\t\ti = i + 2\n\t\t\tlocal x = x + i\n\t\t\t\
    if x <= b then\n\t\t\t\treturn x\n\t\t\tend\n\t\tend\n\tend\n\treturn create_iterator(a\
    \ - 1)\nend", "  if a <= b then\n    local evens = {}\n    for i = a, b do\n \
    \     if i % 2 == 0 then\n        table.insert(evens, i)\n      end\n    end\n\
    \    return evens\n  else\n    return generate_integers(b, a)\n  end\nend", " \
    \   local t = {}\n    if a == b then\n        if (a % 2) == 0 then\n         \
    \   t[1] = a\n        end\n    elseif a < b then\n        for i = a, b do\n  \
    \          if (i % 2) == 0 then\n                t[#t + 1] = i\n            end\n\
    \        end\n    else\n        for i = b, a do\n            if (i % 2) == 0 then\n\
    \                t[#t + 1] = i\n            end\n        end\n    end\n    return\
    \ t\nend", "  if a > b then\n    local tmp = a\n    a = b\n    b = tmp\n  end\n\
    \  local tmp = {}\n  for i = a, b do\n    if i % 2 == 0 then\n      table.insert(tmp,\
    \ i)\n    end\n  end\n  return tmp\nend", "    local evens = {}\n    if a > b\
    \ then\n        a, b = b, a\n    end\n    for i = a, b do\n        if is_even(i)\
    \ then\n            table.insert(evens, i)\n        end\n    end\n    return evens\n\
    end", "    local ints = {}\n    local min = math.min(a, b)\n    local max = math.max(a,\
    \ b)\n    for i = min, max do\n        if i % 2 == 0 then\n            table.insert(ints,\
    \ i)\n        end\n    end\n    return ints\nend", "  local ints = {}\n  for i\
    \ = a, b do\n    if i % 2 == 0 then\n      table.insert(ints, i)\n    end\n  end\n\
    \  return ints\nend", "  local start = math.min(a, b)\n  local finish = math.max(a,\
    \ b)\n  local evens = {}\n  for i = start, finish do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, i)\n    end\n  end\n  return evens\nend", "  -- your\
    \ code here\nend", "    -- The range is empty if a and b have the same parity,\
    \ or a is even and\n    -- b is odd.\n    if a % 2 == b % 2 or (a % 2 == 0 and\
    \ b % 2 == 1) then\n        return {}\n    end", "  local evens = {}\n  local\
    \ mi, ma = math.min(a, b), math.max(a, b)\n  for i = mi, ma do\n    if i % 2 ==\
    \ 0 then\n      table.insert(evens, i)\n    end\n  end\n  return evens\nend",
  "    if a == b then\n        return {a}\n    elseif a > b then\n        return {a,\
    \ a - 2, a - 4, a - 6, a - 8}\n    else\n        return {a, a + 2, a + 4, a +\
    \ 6, a + 8}\n    end\nend", "    local integers = {}\n    local n = a\n    while\
    \ n <= b do\n        if n % 2 == 0 then\n            table.insert(integers, n)\n\
    \        end\n        n = n + 1\n    end\n    return integers\nend", "    local\
    \ ints = {}\n    for i = math.min(a, b), math.max(a, b) do\n        if i % 2 ==\
    \ 0 then\n            table.insert(ints, i)\n        end\n    end\n    return\
    \ ints\nend", "    local min = math.min(a, b)\n    local max = math.max(a, b)\n\
    \    local evens = {}\n    for i = min, max do\n        if i % 2 == 0 then\n \
    \           table.insert(evens, i)\n        end\n    end\n    return evens\nend",
  "  a = a - (a % 2)\n  b = b - (b % 2) + 2\n  local c = {}\n  for i = a, b, 2 do\n\
    \    c[#c + 1] = i\n  end\n  return c\nend", "  local start = a < b and a or b\n\
    \  local finish = a < b and b or a\n  local nums = {}\n  for i = start, finish\
    \ do\n    if i % 2 == 0 then\n      table.insert(nums, i)\n    end\n  end\n  return\
    \ nums\nend", "    -- This function could contain a lot of syntax errors.\n  \
    \  -- Complete it after you are able to solve the problems.\n    -- (do not remove\
    \ the following three lines, do not change their content)\n    local i\n    local\
    \ start\n    local stop\n    if a < b then\n        start = a\n        stop =\
    \ b\n    else\n        start = b\n        stop = a\n    end\n    local s = {}\n\
    \    for i = start, stop do\n        if i % 2 == 0 then\n            s[#s + 1]\
    \ = i\n        end\n    end\n    return s\nend", "    local result = {}\n    if\
    \ a > b then\n        a, b = b, a\n    end\n    for i = a, b do\n        if i\
    \ % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n \
    \   return result\nend", "    local result = {}\n    local c = math.min(a, b)\n\
    \    local d = math.max(a, b)\n    for i = c, d do\n        if is_even(i) then\n\
    \            table.insert(result, i)\n        end\n    end\n    return result\n\
    end", "    assert(a >= 0 and b >= 0)\n    local iter\n    local gen_val\n    local\
    \ gen_iters = 0\n    gen_val = a\n    iter = function ()\n        if a <= b then\n\
    \            if gen_val % 2 == 0 then\n                local ret_val = gen_val\n\
    \                gen_val = gen_val + 1\n                return ret_val\n     \
    \       else\n                gen_val = gen_val + 1\n                return iter()\n\
    \            end\n        else\n            if gen_val % 2 == 0 then\n       \
    \         local ret_val = gen_val\n                gen_val = gen_val - 1\n   \
    \             return ret_val\n            else\n                gen_val = gen_val\
    \ - 1\n                return iter()\n            end\n        end\n    end\n\
    \    return iter\nend", "    if a > b then\n        a, b = b, a\n    end\n   \
    \ local result = {}\n    for x = a, b do\n        if x % 2 == 0 then\n       \
    \     table.insert(result, x)\n        end\n    end\n    return result\nend",
  "  local res = {}\n  for i = a, b do\n    if math.fmod(i, 2) == 0 then\n      table.insert(res,\
    \ i)\n    end\n  end\n  return res\nend", "  local l = List.new()\n  for i = math.min(a,\
    \ b), math.max(a, b) do\n    if (i % 2) == 0 then\n      l:append(i)\n    end\n\
    \  end\n  return l\nend", "  -- TODO: your code here\nend", "    local res = {}\n\
    \    local min = math.min(a, b)\n    local max = math.max(a, b)\n    for i = min,\
    \ max do\n        if i % 2 == 0 then\n            table.insert(res, i)\n     \
    \   end\n    end\n    return res\nend", "  assert(a <= b)\n  if a % 2 == 1 then\n\
    \    a = a + 1\n  end\n  local i = a\n  local n = 0\n  while i <= b do\n    n\
    \ = n + 1\n    i = i + 2\n  end\n  local result = new_uint_array(n)\n  n = 0\n\
    \  i = a\n  while i <= b do\n    result[n] = i\n    n = n + 1\n    i = i + 2\n\
    \  end\n  return result\nend", "  local min, max = math.min(a, b), math.max(a,\
    \ b)\n  local res = {}\n  for n = min, max do\n    if is_even(n) then\n      table.insert(res,\
    \ n)\n    end\n  end\n  return res\nend", "\tlocal result = {}\n\tlocal z = 0\n\
    \tif a % 2 == 0 then\n\t\tz = a\n\telse\n\t\tz = a + 1\n\tend\n\tif b % 2 == 0\
    \ then\n\t\tif a < b then\n\t\t\tfor i = z, b, 2 do\n\t\t\t\ttable.insert(result,\
    \ i)\n\t\t\tend\n\t\telse\n\t\t\tfor i = z, a, -2 do\n\t\t\t\ttable.insert(result,\
    \ i)\n\t\t\tend\n\t\tend\n\telse\n\t\tif a < b then\n\t\t\tfor i = z, b - 1, 2\
    \ do\n\t\t\t\ttable.insert(result, i)\n\t\t\tend\n\t\telse\n\t\t\tfor i = z, a\
    \ - 1, -2 do\n\t\t\t\ttable.insert(result, i)\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    assert(a <= b)\n    local result = {}\n    for i = a, b do\n\
    \        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n\
    \    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
