name: HumanEval_163_generate_integers
language: lua
prompt: "-- Given two positive integers a and b, return the even digits between a\n\
  -- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8)\n\
  -- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(10,\
  \ 14)\n-- {}\nlocal function generate_integers(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n\
  \    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10,\
  \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
  \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if a > b then\n        a, b = b, a\n    end\n    local ret = {}\n\
    \    for i = a, b do\n        if i % 2 == 0 then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend", "\tlocal function _even_iter(a,\
    \ b)\n\t\tlocal c = a % 2 ~= 0 and a + 1 or a\n\t\treturn c, b\n\tend\n\treturn\
    \ coroutine.wrap(function()\n\t\treturn coroutine.yield(a)\n\tend), _even_iter\n\
    end", "    local set = {}\n    if a < b then\n        for i = a, b do\n      \
    \      if i % 2 == 0 then\n                set[#set + 1] = i\n            end\n\
    \        end\n    else\n        for i = b, a do\n            if i % 2 == 0 then\n\
    \                set[#set + 1] = i\n            end\n        end\n    end\n  \
    \  return set\nend", "    local integers = {}\n    if a < b then\n        for\
    \ i = a, b do\n            if i % 2 == 0 then\n                table.insert(integers,\
    \ i)\n            end\n        end\n    else\n        for i = b, a do\n      \
    \      if i % 2 == 0 then\n                table.insert(integers, i)\n       \
    \     end\n        end\n    end\n    return integers\nend", "    local result\
    \ = {}\n    for i = math.min(a, b), math.max(a, b) do\n        if (i % 2) == 0\
    \ then\n            table.insert(result, i)\n        end\n    end\n    return\
    \ result\nend", "    a = math.min(a, b)\n    b = math.max(a, b)\n    local result\
    \ = {}\n    for i = a, b do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "  local ints = {}\n  local\
    \ start = (a > b) and b or a\n  local finish = (a > b) and a or b\n  for i = start,\
    \ finish do\n    if i % 2 == 0 then\n      table.insert(ints, i)\n    end\n  end\n\
    \  return ints\nend", "  local result = {}\n  local start = a\n  local finish\
    \ = b\n  if a > b then\n    start = b\n    finish = a\n  end\n  for x = start,\
    \ finish do\n    if math.fmod(x, 2) == 0 then\n      table.insert(result, x)\n\
    \    end\n  end\n  return result\nend", "    local integers = {}\n    if a > b\
    \ then\n        for i = b, a do\n            if i % 2 == 0 then\n            \
    \    table.insert(integers, i)\n            end\n        end\n    else\n     \
    \   for i = a, b do\n            if i % 2 == 0 then\n                table.insert(integers,\
    \ i)\n            end\n        end\n    end\n    return integers\nend", "  local\
    \ integers = {}\n  a = a - a % 2\n  b = b - b % 2", "    local result = {}\n \
    \   local x = math.min(a, b)\n    local y = math.max(a, b)\n    while x % 2 ~=\
    \ 0 do\n        x = x + 1\n    end\n    while x <= y do\n        table.insert(result,\
    \ x)\n        x = x + 2\n    end\n    return result\nend", "  local result = {}\n\
    \  local start, stop\n  if a <= b then\n    start, stop = a, b\n  else\n    start,\
    \ stop = b, a\n  end\n  if start % 2 == 0 then\n    start = start + 1\n  end\n\
    \  for i = start, stop, 2 do\n    table.insert(result, i)\n  end\n  return result\n\
    end", "    local integers = {}\n    local start = a\n    local finish = b\n  \
    \  if a > b then\n        start = b\n        finish = a\n    end\n    for i =\
    \ start, finish do\n        if math.fmod(i, 2) == 0 then\n            table.insert(integers,\
    \ i)\n        end\n    end\n    return integers\nend", "    if a > b then\n  \
    \      a, b = b, a\n    end\n    local result = {}\n    for i = a, b do\n    \
    \    if i % 2 == 0 then\n            table.insert(result, i)\n        end\n  \
    \  end\n    return result\nend", "  local res = {}\n  local z = a\n  if a <= b\
    \ then\n    while z <= b do\n      if z % 2 == 0 then\n        table.insert(res,\
    \ z)\n      end\n      z = z + 1\n    end\n  else\n    while z >= b do\n     \
    \ if z % 2 == 0 then\n        table.insert(res, z)\n      end\n      z = z - 1\n\
    \    end\n  end\n  return res\nend", "    local result = {}\n    local lo, hi\n\
    \    if a < b then\n        lo, hi = a, b\n    else\n        lo, hi = b, a\n \
    \   end\n    for i = lo, hi do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "    local set = {}\n   \
    \ local lower = math.min(a, b)\n    local upper = math.max(a, b)\n    for i =\
    \ lower, upper do\n        if i % 2 == 0 then\n            table.insert(set, i)\n\
    \        end\n    end\n    return set\nend", "    local function even_digits(i)\n\
    \        local t = {}\n        while i > 0 do\n            if i % 2 == 0 then\n\
    \                table.insert(t, i % 10)\n            end\n            i = math.floor(i\
    \ / 10)\n        end\n        return t\n    end", "    local t = {}\n    if a\
    \ > b then\n        a, b = b, a\n    end\n    for i = a, b do\n        if i %\
    \ 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return\
    \ t\nend", "    local integers = {}\n    local smallest = math.min(a, b)\n   \
    \ local largest = math.max(a, b)\n    for i = smallest, largest do\n        if\
    \ i % 2 == 0 then\n            table.insert(integers, i)\n        end\n    end\n\
    \    return integers\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
