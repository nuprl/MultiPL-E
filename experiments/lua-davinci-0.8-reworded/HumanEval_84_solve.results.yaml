name: HumanEval_84_solve
language: lua
results:
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    -- sum\
    \ all digits of N in binary number\n    local bin = math.tointeger(N)\n    local\
    \ sum = 0\n    while bin > 0 do\n        sum = sum + bin % 2\n        bin = math.floor(bin\
    \ / 2)\n    end\n    return tostring(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kjwvmzv.lua:28:\
    \ expected: \"1\"\nactual: \"6\"\nstack traceback:\n\t/tmp/tmp2kjwvmzv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    return\
    \ dec2bin(N)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmovz2mzm.lua:15:\
    \ attempt to call a nil value (global 'dec2bin')\nstack traceback:\n\t/tmp/tmpmovz2mzm.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpmovz2mzm.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz2i8wkn.lua:21:\
    \ expected: \"1\"\nactual: nil\nstack traceback:\n\t/tmp/tmpvz2i8wkn.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    return\
    \ tostring(0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sj8y5ku.lua:21:\
    \ expected: \"1\"\nactual: \"0\"\nstack traceback:\n\t/tmp/tmp0sj8y5ku.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotlq88xo.lua:21:\
    \ expected: \"1\"\nactual: nil\nstack traceback:\n\t/tmp/tmpotlq88xo.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:to_binary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qq_psp6.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmp5qq_psp6.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp5qq_psp6.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local stringN = tostring(N)\n  for i=1, #stringN do\n    local digit\
    \ = tonumber(stringN:sub(i,i))\n    sum = sum + digit\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmdzeiw_.lua:27:\
    \ expected: \"1\"\nactual: 1\nstack traceback:\n\t/tmp/tmpfmdzeiw_.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local j = 1\n  while N > 0 do\n    local remainder = N % 2\n    bin[j]\
    \ = remainder\n    N = (N - remainder) / 2\n    j = j + 1\n  end\n  -- reverse\
    \ array\n  local len = #bin\n  local half = math.floor(len / 2)\n  for i = 1,\
    \ half do\n    bin[i], bin[len - i + 1] = bin[len - i + 1], bin[i]\n  end\n  return\
    \ table.concat(bin)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzey8_mg8.lua:35:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpzey8_mg8.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local num\
    \ = math.floor(N)\n  local total = 0\n  while num > 0 do\n    local lsd = num\
    \ % 2\n    num = math.floor(num / 2)\n    total = total + lsd\n  end\n  return\
    \ tostring(total)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudh6ams5.lua:28:\
    \ expected: \"1\"\nactual: \"6\"\nstack traceback:\n\t/tmp/tmpudh6ams5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bit=require\
    \ 'bit'\n  local bin=bit.tobinary(N)\n  return bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcus9mr0c.lua:16:\
    \ attempt to call a nil value (field 'tobinary')\nstack traceback:\n\t/tmp/tmpcus9mr0c.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpcus9mr0c.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local r\
    \ = 0\n    repeat\n        r = r + N % 2\n        N = N / 2\n    until N <= 0\n\
    \    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m18fdgz.lua:26:\
    \ expected: \"1\"\nactual: 12\nstack traceback:\n\t/tmp/tmp2m18fdgz.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  -- Write\
    \ your code here\n  -- To print results to the standard output you can use print\n\
    \  -- Example: print(\"Hello world\")\n  return tostring(N, 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyez3vve.lua:24:\
    \ expected: \"1\"\nactual: \"1000\"\nstack traceback:\n\t/tmp/tmptyez3vve.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    return\
    \ string.format(\"%b\", N)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9364od6f.lua:15:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp9364od6f.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp9364od6f.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ toBinary(n)\n    local b = ''\n    while n > 0 do\n      local mod = n % 2\n\
    \      n = math.floor(n / 2)\n      b = mod .. b\n    end\n    return b\n  end\n\
    \  local function sumDigits(n)\n    local s = 0\n    while n > 0 do\n      local\
    \ mod = n % 10\n      n = math.floor(n / 10)\n      s = s + mod\n    end\n   \
    \ return s\n  end\n  local sum = sumDigits(N)\n  return toBinary(sum)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  -- Binary\
    \ representation of N\n  local bin = string.format(\"%b\", N)\n  -- sum of digits\
    \ of binary number\n  local sum = 0\n  -- \n  for i = 1, #bin do\n    sum = sum\
    \ + tonumber(bin:sub(i, i))\n  end\n  return tostring(sum)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppztmjyqr.lua:16:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmppztmjyqr.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmppztmjyqr.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local binary\
    \ = {}\n    local x = 0\n    local sum = 0\n    for i = 10000, 0, -1 do\n    \
    \    x = math.floor(N / i)\n        if x == 1 then\n            table.insert(binary,\
    \ x)\n            N = N - i\n        else\n            table.insert(binary, 0)\n\
    \        end\n    end\n    for i, v in ipairs(binary) do\n        sum = sum +\
    \ v\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4g6ywhn4.lua:36:\
    \ expected: \"1\"\nactual: 1\nstack traceback:\n\t/tmp/tmp4g6ywhn4.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ decimalToBinary(N)\n    return tonumber(N, 2)\n  end\n  local function countDigits(N)\n\
    \    local result = 0\n    for _ in tostring(N):gmatch(\".\") do\n      result\
    \ = result + 1\n    end\n    return result\n  end\n  local function addBinaryDigits(N)\n\
    \    local result = 0\n    for n in tostring(N):gmatch(\".\") do\n      result\
    \ = result + tonumber(n)\n    end\n    return result\n  end\n  return addBinaryDigits(countDigits(decimalToBinary(N)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk4mqkhz6.lua:16:\
    \ bad argument #1 to 'tonumber' (string expected, got number)\nstack traceback:\n\
    \t/tmp/tmpk4mqkhz6.lua:16: in local 'decimalToBinary'\n\t/tmp/tmpk4mqkhz6.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmpk4mqkhz6.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    -- Write\
    \ your code here\n    -- To print results to the standard output you can use print\n\
    \    -- Example: print(\"Hello world\")\n    local result = ''\n    while N ~=\
    \ 0 do\n        local remainder = N % 2\n        N = math.floor(N / 2)\n     \
    \   result = remainder .. result\n    end\n    return result\nend\nreturn solve\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfmt5crsz.lua:27: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local out\
    \ = 0\n  while N > 0 do\n    out = out + N % 2\n    N = math.floor(N / 2)\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4enmxdeq.lua:26:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp4enmxdeq.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = 0\n  local number_to_string = tostring(N)\n  for i = 1, #number_to_string\
    \ do\n    result = result + tonumber(number_to_string:sub(i, i))\n  end\n  return\
    \ tostring(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzsdw_vu.lua:27:\
    \ expected: \"110\"\nactual: \"6\"\nstack traceback:\n\t/tmp/tmpbzsdw_vu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
