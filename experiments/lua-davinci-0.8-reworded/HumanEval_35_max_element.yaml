name: HumanEval_35_max_element
language: lua
prompt: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
  -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
  \ function max_element(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
  \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max = l[1]\n  for _, v in ipairs(l) do\n    if v > max then\n\
    \      max = v\n    end\n  end\n  return max\nend", "  local m = l[1]\n  for i\
    \ = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\n\
    end", "    local max = 0\n    for k, v in pairs(l) do\n        if v > max then\n\
    \            max = v\n        end\n    end\n    return max\nend", "    local max\
    \ = 0\n    for _, v in ipairs(l) do\n        if v > max then\n            max\
    \ = v\n        end\n    end\n    return max\nend", "  local max = l[1]\n  for\
    \ _, e in ipairs(l) do\n    if max < e then\n      max = e\n    end\n  end\n \
    \ return max\nend", "    if #l == 0 then\n        return nil\n    end\n    local\
    \ m = l[1]\n    for i = 2, #l do\n        if l[i] > m then\n            m = l[i]\n\
    \        end\n    end\n    return m\nend", "    local i = 0\n    for k, _ in pairs(l)\
    \ do\n        i = math.max(i, k)\n    end\n    return i\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local max = l[1]\n  for i = 2, #l do\n    if l[i] >\
    \ max then\n      max = l[i]\n    end\n  end\n  return max\nend", "    local max\
    \ = l[1]\n    for i=2,#l do\n        if l[i] > max then\n            max = l[i]\n\
    \        end\n    end\n    return max\nend", "    local max = l[1]\n    for i\
    \ = 2, #l do\n        if l[i] > max then\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "    local max_ = l[1]\n    for i = 2, #l do\n\
    \        if l[i] > max_ then\n            max_ = l[i]\n        end\n    end\n\
    \    return max_\nend", "\tlocal max = l[1]\n\tfor i=2,#l do\n\t\tif l[i] > max\
    \ then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend", "  local max = l[1]\n\
    \  for _, v in ipairs(l) do\n    if v > max then\n      max = v\n    end\n  end\n\
    \  return max\nend", "  if not l then return end\n  local max = l[1]\n  for i\
    \ = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return\
    \ max\nend", "  local mx = l[1]\n  for _, v in ipairs(l) do\n    if v > mx then\n\
    \      mx = v\n    end\n  end\n  return mx\nend", "    local max = 0\n    for\
    \ _,v in ipairs(l) do\n        if v > max then\n            max = v\n        end\n\
    \    end\n    return max\nend", "    assert_arg_number(1, l)\n    assert(l[1],\
    \ \"cannot take max of empty list\")\n    local ans = l[1]\n    for i = 2, #l\
    \ do\n        if l[i] > ans then\n            ans = l[i]\n        end\n    end\n\
    \    return ans\nend", "  local max = l[1]\n  for _, v in ipairs(l) do\n    if\
    \ v > max then\n      max = v\n    end\n  end\n  return max\nend", "    local\
    \ max_key, max_value = nil, -math.huge\n    for key, value in pairs(l) do\n  \
    \      if max_value < value then\n            max_key, max_value = key, value\n\
    \        end\n    end\n    return max_value\nend", "    local max = l[1]\n   \
    \ for i = 2, #l do\n        if l[i] > max then\n            max = l[i]\n     \
    \   end\n    end\n    return max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
