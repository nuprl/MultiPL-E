name: HumanEval_35_max_element
language: lua
prompt: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
  -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
  \ function max_element(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
  \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max = l[1]\n  for _, v in ipairs(l) do\n    if v > max then\n\
    \      max = v\n    end\n  end\n  return max\nend", "  local m = l[1]\n  for i\
    \ = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\n\
    end", "    local max = 0\n    for k, v in pairs(l) do\n        if v > max then\n\
    \            max = v\n        end\n    end\n    return max\nend", "    local max\
    \ = 0\n    for _, v in ipairs(l) do\n        if v > max then\n            max\
    \ = v\n        end\n    end\n    return max\nend", "  local max = l[1]\n  for\
    \ _, e in ipairs(l) do\n    if max < e then\n      max = e\n    end\n  end\n \
    \ return max\nend", "    if #l == 0 then\n        return nil\n    end\n    local\
    \ m = l[1]\n    for i = 2, #l do\n        if l[i] > m then\n            m = l[i]\n\
    \        end\n    end\n    return m\nend", "    local i = 0\n    for k, _ in pairs(l)\
    \ do\n        i = math.max(i, k)\n    end\n    return i\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local max = l[1]\n  for i = 2, #l do\n    if l[i] >\
    \ max then\n      max = l[i]\n    end\n  end\n  return max\nend", "    local max\
    \ = l[1]\n    for i=2,#l do\n        if l[i] > max then\n            max = l[i]\n\
    \        end\n    end\n    return max\nend", "    local max = l[1]\n    for i\
    \ = 2, #l do\n        if l[i] > max then\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "    local max_ = l[1]\n    for i = 2, #l do\n\
    \        if l[i] > max_ then\n            max_ = l[i]\n        end\n    end\n\
    \    return max_\nend", "\tlocal max = l[1]\n\tfor i=2,#l do\n\t\tif l[i] > max\
    \ then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend", "  local max = l[1]\n\
    \  for _, v in ipairs(l) do\n    if v > max then\n      max = v\n    end\n  end\n\
    \  return max\nend", "  if not l then return end\n  local max = l[1]\n  for i\
    \ = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return\
    \ max\nend", "  local mx = l[1]\n  for _, v in ipairs(l) do\n    if v > mx then\n\
    \      mx = v\n    end\n  end\n  return mx\nend", "    local max = 0\n    for\
    \ _,v in ipairs(l) do\n        if v > max then\n            max = v\n        end\n\
    \    end\n    return max\nend", "    assert_arg_number(1, l)\n    assert(l[1],\
    \ \"cannot take max of empty list\")\n    local ans = l[1]\n    for i = 2, #l\
    \ do\n        if l[i] > ans then\n            ans = l[i]\n        end\n    end\n\
    \    return ans\nend", "  local max = l[1]\n  for _, v in ipairs(l) do\n    if\
    \ v > max then\n      max = v\n    end\n  end\n  return max\nend", "    local\
    \ max_key, max_value = nil, -math.huge\n    for key, value in pairs(l) do\n  \
    \      if max_value < value then\n            max_key, max_value = key, value\n\
    \        end\n    end\n    return max_value\nend", "    local max = l[1]\n   \
    \ for i = 2, #l do\n        if l[i] > max then\n            max = l[i]\n     \
    \   end\n    end\n    return max\nend", "\tlocal max = nil\n\tlocal max_index\
    \ = nil\n\tfor k, v in pairs(l) do\n\t\tif max == nil or v > max then\n\t\t\t\
    max = v\n\t\t\tmax_index = k\n\t\tend\n\tend\n\treturn max, max_index\nend", " \
    \ local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n\
    \    end\n  end\n  return max\nend", "  local max = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\nend",
  "  local max = 0\n  for k, v in pairs(l) do\n    if v > max then\n      max = v\n\
    \    end\n  end\n  return max\nend", "\tlocal ret = nil\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif ret == nil or v > ret then\n\t\t\tret = v\n\t\tend\n\tend\n\treturn\
    \ ret\nend", "\tassert(type(l) == \"table\", \"max_element: first argument must\
    \ be a table\")\n\tlocal max = nil\n\tfor k, v in pairs(l) do\n\t\tif max == nil\
    \ or v > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\treturn max\nend", "    local\
    \ m = -math.huge\n    for _, v in ipairs(l) do\n        if v > m then\n      \
    \      m = v\n        end\n    end\n    return m\nend", "    local m = l[1]\n\
    \    for i = 2, #l do\n        if l[i] > m then\n            m = l[i]\n      \
    \  end\n    end\n    return m\nend", "  local r = l[1]\n  for i = 2, #l do\n \
    \   if l[i] > r then\n      r = l[i]\n    end\n  end\n  return r\nend", "  local\
    \ max = nil\n  for _,v in ipairs(l) do\n    if not max or max < v then\n     \
    \ max = v\n    end\n  end\n  return max\nend", "    return max(l)\nend", "   \
    \ return reduce(function(a, b) return max(a, b) end, l)\nend", "    local i =\
    \ 1\n    local m = l[i]\n    while i <= #l do\n        m = (l[i] > m) and l[i]\
    \ or m\n        i = i + 1\n    end\n    return m\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max\
    \ then\n      max = l[i]\n    end\n  end\n  return max\nend", "  local ret = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > ret then\n      ret = l[i]\n    end\n  end\n\
    \  return ret\nend", "\tlocal x = nil\n\tfor _, i in ipairs(l) do\n\t\tif x ==\
    \ nil or i > x then\n\t\t\tx = i\n\t\tend\n\tend\n\treturn x\nend", "\tassert(type(l)\
    \ == \"table\", \"l should be a table\")\n\tassert(#l >= 1, \"l should contain\
    \ at least one element\")\n\t\n\tlocal r = l[1]\n\tfor i = 2, #l do\n\t\tif l[i]\
    \ > r then\n\t\t\tr = l[i]\n\t\tend\n\tend\n\treturn r\nend", "  local m = nil\n\
    \  for e in each(l) do\n    if not m or e > m then\n      m = e\n    end\n  end\n\
    \  return m\nend", "    local m = math.mininteger\n    for _, v in ipairs(l) do\n\
    \        if v > m then\n            m = v\n        end\n    end\n    return m\n\
    end", "    assert(type(l) == \"table\", \"bad argument #1 (expected table, got\
    \ \" .. type(l) .. \")\")\n    local max = l[1]\n    for i = 2, #l do\n      \
    \  if l[i] > max then\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    local max = l[1]\n    for i = 2, #l do\n        if l[i] > max\
    \ then\n            max = l[i]\n        end\n    end\n    return max\nend", " \
    \   local m = l[1]\n    for i = 2, #l do\n        if l[i] > m then\n         \
    \   m = l[i]\n        end\n    end\n    return m\nend", "    local max = nil\n\
    \    for i, v in ipairs(l) do\n        if max == nil or v > max then\n       \
    \     max = v\n        end\n    end\n    return max\nend", "  local max = l[1]\n\
    \  for i=2,#l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n \
    \ return max\nend", "  local m = -math.huge\n  for i = 1, #l do\n    if l[i] >\
    \ m then\n      m = l[i]\n    end\n  end\n  return m\nend", "  local r = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > r then\n      r = l[i]\n    end\n  end\n  return\
    \ r\nend", "  return reduce(function(a, b) return math.max(a, b) end, l, l[1])\n\
    end", "    local max = l[1]\n    for _, v in ipairs(l) do\n        if v > max\
    \ then\n            max = v\n        end\n    end\n    return max\nend", "   \
    \ assert(#l > 0, \"max_element: Empty list\")\n    local max = l[1]\n    for i\
    \ = 2, #l do\n        if l[i] > max then\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "    local m = l[1]\n    for i = 2, #l do\n  \
    \      if l[i] > m then\n            m = l[i]\n        end\n    end\n    return\
    \ m\nend", "\tassert(type(l) == \"table\", \"Expected table for first argument,\
    \ got \"..type(l))\n\tlocal max = l[1]\n\tfor i=2, #l do\n\t\tif l[i] > max then\n\
    \t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend", "    local max = l[1]\n\
    \    for _, v in ipairs(l) do\n        if v > max then\n            max = v\n\
    \        end\n    end\n    return max\nend", "\tlocal max = l[1]\n\tfor i = 2,\
    \ #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\n\
    end", "    local max = -math.huge\n    for _, v in ipairs(l) do\n        if v\
    \ > max then\n            max = v\n        end\n    end\n    return max\nend",
  "    local max = -math.huge\n    for i,v in ipairs(l) do\n        if v > max then\n\
    \            max = v\n        end\n    end\n    return max\nend", "    local ret\
    \ = l[1]\n    for _, val in ipairs(l) do\n        if val > ret then\n        \
    \    ret = val\n        end\n    end\n    return ret\nend", "    local m = nil\n\
    \    for i = 1,#l do\n        m = (m and max(m, l[i])) or l[i]\n    end\n    return\
    \ m\nend", "  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n \
    \     max = l[i]\n    end\n  end\n  return max\nend", "    local max = l[1]\n\
    \    for i = 2, #l do\n        max = math.max(max, l[i])\n    end\n    return\
    \ max\nend", "    local max = l[1]\n    for i = 2, #l do\n        if l[i] > max\
    \ then\n            max = l[i]\n        end\n    end\n    return max\nend", " \
    \   assert(tables.is_list(l), \"max_element: the first argument must be a list.\"\
    )\n    local max_elm = l[1]\n    for i = 2, #l do\n        if l[i] > max_elm then\n\
    \            max_elm = l[i]\n        end\n    end\n    return max_elm\nend", "\t\
    local max = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\
    \t\tend\n\tend\n\treturn max\nend", "  local max = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\nend",
  "    local m = l[1]\n    for i, n in ipairs(l) do\n        if n > m then\n     \
    \       m = n\n        end\n    end\n    return m\nend", "    local max = l[1]\n\
    \    for i = 2, #l do\n        if l[i] > max then\n            max = l[i]\n  \
    \      end\n    end\n    return max\nend", "  local maximum = l[1]\n  for _, v\
    \ in ipairs(l) do\n    if maximum < v then\n      maximum = v\n    end\n  end\n\
    \  return maximum\nend", "    local _max = l[1]\n    for _, v in ipairs(l) do\n\
    \        if _max < v then\n            _max = v\n        end\n    end\n    return\
    \ _max\nend", "    local max = l[1]\n    for _, v in ipairs(l) do\n        if\
    \ v > max then\n            max = v\n        end\n    end\n    return max\nend",
  "    assert(is_sequence(l), \"Need a table.\")\n    local max = l[1]\n    for i\
    \ = 2, #l do\n        if l[i] > max then\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "    local max = nil\n    for _, v in ipairs(l)\
    \ do\n        if not max or v > max then\n            max = v\n        end\n \
    \   end\n    return max\nend", "  assert(type(l) == \"table\", \"expected a table\"\
    )\n  local max = l[1]\n  for _, e in ipairs(l) do\n    if e > max then\n     \
    \ max = e\n    end\n  end\n  return max\nend", "    local max_i = 1\n    for i\
    \ = 2, #l do\n        if l[i] > l[max_i] then\n            max_i = i\n       \
    \ end\n    end\n    return l[max_i]\nend", "  local m = l[1]\n  for i = 2, #l\
    \ do\n    m = math.max(m, l[i])\n  end\n  return m\nend", "\tlocal max = l[1]\n\
    \tfor i = 2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\
    \treturn max\nend", "  local max = -math.huge\n  for _, v in ipairs(l) do\n  \
    \  if v > max then\n      max = v\n    end\n  end\n  return max\nend", "\tlocal\
    \ max = l[1]\n\tfor _, v in ipairs(l) do\n\t\tif v > max then\n\t\t\tmax = v\n\
    \t\tend\n\tend\n\treturn max\nend", "    local max = l[1]\n    for i=2,#l do\n\
    \        if l[i] > max then\n            max = l[i]\n        end\n    end\n  \
    \  return max\nend", "  local max = l[1]\n  for _, v in ipairs(l) do\n    if v\
    \ > max then\n      max = v\n    end\n  end\n  return max\nend", "  local max\
    \ = l[1]\n  for i=2,#l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend", "\tlocal max = l[1]\n\tfor _, v in ipairs(l) do\n\t\
    \tif v > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\treturn max\nend", "    local\
    \ max = -math.huge\n    for _, v in ipairs(l) do\n        if v > max then\n  \
    \          max = v\n        end\n    end\n    return max\nend", "    local max\
    \ = l[1]\n    for i=2,#l do\n        max = math.max(max, l[i])\n    end\n    return\
    \ max\nend", "  return math.max(unpack(l))\nend", "  local max = l[1]\n  for _,\
    \ v in ipairs(l) do\n    if v > max then\n      max = v\n    end\n  end\n  return\
    \ max\nend", "    assert(type(l) == \"table\", \"max_element: expects table\"\
    )\n    local len = #l\n    if len == 0 then\n        return nil\n    end\n   \
    \ local m = l[1]\n    for i = 2, len do\n        if l[i] > m then\n          \
    \  m = l[i]\n        end\n    end\n    return m\nend", "  local max = l[1]\n \
    \ for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n\
    \  return max\nend", "\tlocal m = math.maxinteger\n\tfor _, v in ipairs(l) do\n\
    \t\tif v > m then\n\t\t\tm = v\n\t\tend\n\tend\n\treturn m\nend", "    local max\
    \ = l[1]\n    for _, v in ipairs(l) do\n        if v > max then\n            max\
    \ = v\n        end\n    end\n    return max\nend", "    if #l < 1 then\n     \
    \   return nil\n    end\n    local m = l[1]\n    for i = 2, #l do\n        if\
    \ l[i] > m then\n            m = l[i]\n        end\n    end\n    return m\nend",
  "  local max\n  for _,v in ipairs(l) do\n    if not max or v > max then\n      max\
    \ = v\n    end\n  end\n  return max\nend", "  local m = l[1]\n  for i = 2, #l\
    \ do\n    if l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend",
  "    local max = -math.huge\n    for _, v in ipairs(l) do\n        if v > max then\n\
    \            max = v\n        end\n    end\n    return max\nend", "    if type(l)\
    \ ~= \"table\" then\n        error(\"max_element: table required\")\n    end\n\
    \    local m = l[1]\n    for i = 2, #l do\n        m = math.max(m, l[i])\n   \
    \ end\n    return m\nend", "    if #l == 0 then return nil end\n    local max\
    \ = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n            max =\
    \ l[i]\n        end\n    end\n    return max\nend", "    local max = l[1]\n  \
    \  for i = 2, #l do\n        max = math.max(max, l[i])\n    end\n    return max\n\
    end", "    local max_val = l[1]\n    for _,v in ipairs(l) do\n        if v > max_val\
    \ then\n            max_val = v\n        end\n    end\n    return max_val\nend",
  "    local max_element = l[1]\n    for i = 2, #l do\n        if l[i] > max_element\
    \ then\n            max_element = l[i]\n        end\n    end\n    return max_element\n\
    end", "\tlocal max_el = 0\n\tfor _, v in ipairs(l) do\n\t\tif v > max_el then\n\
    \t\t\tmax_el = v\n\t\tend\n\tend\n\treturn max_el\nend", "    local maximum =\
    \ l[1]\n    for i = 2, #l do\n        if l[i] > maximum then\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend", "\tlocal max = l[1]\n\
    \tfor i=2,#l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\t\
    return max\nend", "    local i = 1\n    local max = l[i]\n    for j = 2, #l do\n\
    \        if l[j] > max then\n            max = l[j]\n            i = j\n     \
    \   end\n    end\n    return max, i\nend", "    local max = -math.huge\n    for\
    \ _, v in ipairs(l) do\n        if v > max then\n            max = v\n       \
    \ end\n    end\n    return max\nend", "\tlocal max = l[1]\n\tfor i=2,#l do\n\t\
    \tif l[i] > max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend", " \
    \ local m = l[1]\n  for _, e in ipairs(l) do\n    if e > m then\n      m = e\n\
    \    end\n  end\n  return m\nend", "  local max = l[1]\n  for i = 2, #l do\n \
    \   if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\nend",
  "  return reduce(l, '>', function(a, b) return b end)\nend", "    local max = l[1]\n\
    \    for i = 2, #l do\n        if l[i] > max then\n            max = l[i]\n  \
    \      end\n    end\n    return max\nend", "    local m = l[1]\n    for i = 2,\
    \ #l do\n        m = math.max(m, l[i])\n    end\n    return m\nend", "    local\
    \ max = l[1]\n    for _, v in ipairs(l) do\n        if v > max then\n        \
    \    max = v\n        end\n    end\n    return max\nend", "  local max = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n\
    \  return max\nend", "    local max = 0\n    for _,v in ipairs(l) do\n       \
    \ if v > max then\n            max = v\n        end\n    end\n    return max\n\
    end", "    local max = l[1]\n    for _,v in ipairs(l) do\n        if v > max then\n\
    \            max = v\n        end\n    end\n    return max\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local m = l[1]\n  for i = 2, #l do\n    if\
    \ l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend", "\tlocal max_val,\
    \ max_idx = l[1], 1\n\tfor i = 2, #l do\n\t\tif l[i] > max_val then\n\t\t\tmax_val,\
    \ max_idx = l[i], i\n\t\tend\n\tend\n\treturn max_val, max_idx\nend", "    local\
    \ max = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n            max\
    \ = l[i]\n        end\n    end\n    return max\nend", "    return reduce(l, math.max)\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local m = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend",
  "    local v = l[1]\n    for _, u in ipairs(l) do\n        if u > v then\n     \
    \       v = u\n        end\n    end\n    return v\nend", "    local m = l[1]\n\
    \    for _, e in ipairs(l) do\n        if e > m then\n            m = e\n    \
    \    end\n    end\n    return m\nend", "    local max = l[1]\n    for i=2,#l do\n\
    \        if l[i] > max then\n            max = l[i]\n        end\n    end\n  \
    \  return max\nend", "    local m = math.mininteger\n    for _, v in ipairs(l)\
    \ do\n        if m < v then\n            m = v\n        end\n    end\n    return\
    \ m\nend", "    local max = l[1]\n    for _, e in ipairs(l) do\n        if max\
    \ < e then\n            max = e\n        end\n    end\n    return max\nend", " \
    \   local i = #l\n    local max = l[i]\n    i = i - 1\n    while i > 0 do\n  \
    \      if l[i] > max then\n            max = l[i]\n        end\n        i = i\
    \ - 1\n    end\n    return max\nend", "  local mx = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > mx then\n      mx = l[i]\n    end\n  end\n  return mx\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local m = l[1]\n  for i = 2, #l do\n\
    \    m = math.max(m, l[i])\n  end\n  return m\nend", "    local max = l[1]\n \
    \   for i = 2, #l do\n        if l[i] > max then\n            max = l[i]\n   \
    \     end\n    end\n    return max\nend", "  local max = l[1]\n  for i = 2, #l\
    \ do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\n\
    end", "    local max = l[1]\n    for _, v in ipairs(l) do\n        if v > max\
    \ then\n            max = v\n        end\n    end\n    return max\nend", "  local\
    \ m = l[1]\n  for i=2,#l do\n    if l[i] > m then\n      m = l[i]\n    end\n \
    \ end\n  return m\nend", "    local max = l[1]\n    for i = 2, #l do\n       \
    \ max = math.max(max, l[i])\n    end\n    return max\nend", "    local max = nil\n\
    \    for _, v in ipairs(l) do\n        if (max == nil) or (v > max) then\n   \
    \         max = v\n        end\n    end\n    return max\nend", "  local max =\
    \ l[1]\n  for i=2,#l do\n    if l[i] > max then\n      max = l[i]\n    end\n \
    \ end\n  return max\nend", "\tlocal max = l[1]\n\tfor _, i in ipairs(l) do\n\t\
    \tif i > max then\n\t\t\tmax = i\n\t\tend\n\tend\n\treturn max\nend", "    if\
    \ #l == 0 then\n        return nil\n    end\n    local m = l[1]\n    for _,v in\
    \ ipairs(l) do\n        if v > m then\n            m = v\n        end\n    end\n\
    \    return m\nend", "\tlocal max = l[1]\n\tfor i=2,#l do\n\t\tif l[i] > max then\n\
    \t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend", "\tlocal maximum = nil\n\
    \tfor _, v in ipairs(l) do\n\t\tif not maximum or v > maximum then\n\t\t\tmaximum\
    \ = v\n\t\tend\n\tend\n\treturn maximum\nend", "    local max = nil\n    for _,\
    \ v in ipairs(l) do\n        if max == nil or v > max then\n            max =\
    \ v\n        end\n    end\n    return max\nend", "    local max = l[1]\n    for\
    \ i = 2, #l do\n        if l[i] > max then\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "    local max = l[1]\n    for i = 2, #l do\n\
    \        if l[i] > max then\n            max = l[i]\n        end\n    end\n  \
    \  return max\nend", "  if type(l) ~= \"table\" then return nil end\n  if #l ==\
    \ 0 then return nil end\n  local max = l[1]\n  for i = 2, #l do\n    if l[i] >\
    \ max then max = l[i] end\n  end\n  return max\nend", "  local max = l[1]\n  for\
    \ _, e in ipairs(l) do\n    if e > max then\n      max = e\n    end\n  end\n \
    \ return max\nend", "\tlocal maximum = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] >\
    \ maximum then\n\t\t\tmaximum = l[i]\n\t\tend\n\tend\n\treturn maximum\nend",
  "    local max = 0\n    for _, element in ipairs(l) do\n        if element > max\
    \ then\n            max = element\n        end\n    end\n    return max\nend",
  "  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n\
    \    end\n  end\n  return max\nend", "    local max = l[1]\n    for i = 2, #l\
    \ do\n        max = math.max(max, l[i])\n    end\n    return max\nend", "\tlocal\
    \ max = l[1]\n\tfor i=2,#l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\t\
    end\n\tend\n\treturn max\nend", "    local max = l[1]\n    for _, v in ipairs(l)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ return max\nend", "    local max = 0\n    for i=1,#l do\n        if l[i] > max\
    \ then\n            max = l[i]\n        end\n    end\n    return max\nend", " \
    \ local res = l[1]\n  for i=2,#l do\n    if res < l[i] then\n      res = l[i]\n\
    \    end\n  end\n  return res\nend", "    local max = -math.huge\n    for i =\
    \ 1, #l do\n        if l[i] > max then\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "\tlocal m = l[1]\n\tfor i = 2, #l do\n\t\tif\
    \ l[i] > m then\n\t\t\tm = l[i]\n\t\tend\n\tend\n\treturn m\nend", "  assert_arg_count(#l)\n\
    \  local m = l[1]\n  for i=2,#l do\n    if l[i] > m then\n      m = l[i]\n   \
    \ end\n  end\n  return m\nend", "  local _, max_v = min_max_element(l)\n  return\
    \ max_v\nend", "  local max = -math.huge\n  for _, v in ipairs(l) do\n    if v\
    \ > max then\n      max = v\n    end\n  end\n  return max\nend", "    local m\
    \ = l[1]\n    for _, x in ipairs(l) do\n        if x > m then\n            m =\
    \ x\n        end\n    end\n    return m\nend", "  local m = - math.huge\n  for\
    \ _, v in ipairs(l) do\n    if v > m then\n      m = v\n    end\n  end\n  return\
    \ m\nend", "    local m = l[1]\n    for i = 2, #l do\n        if l[i] > m then\n\
    \            m = l[i]\n        end\n    end\n    return m\nend", "\tlocal m =\
    \ -math.huge\n\tfor k, v in pairs(l) do\n\t\tif v > m then\n\t\t\tm = v\n\t\t\
    end\n\tend\n\treturn m\nend", "    local m = l[1]\n    for i, x in ipairs(l) do\n\
    \        if x > m then\n            m = x\n        end\n    end\n    return m\n\
    end", "    local m = l[1]\n    for _,v in ipairs(l) do\n        if v > m then\n\
    \            m = v\n        end\n    end\n    return m\nend", "    local result\
    \ = l[1]\n    for i = 2, #l do\n        if l[i] > result then\n            result\
    \ = l[i]\n        end\n    end\n    return result\nend", "    if type(l) ~= \"\
    table\" then return end\n    local max\n    for _, value in ipairs(l) do\n   \
    \     if max == nil or value > max then\n            max = value\n        end\n\
    \    end\n    return max\nend", "    local result = l[1]\n    for i = 2, #l do\n\
    \        if l[i] > result then\n            result = l[i]\n        end\n    end\n\
    \    return result\nend", "\tlocal ret = l[1]\n\tfor i = 2, #l do\n\t\tif l[i]\
    \ > ret then\n\t\t\tret = l[i]\n\t\tend\n\tend\n\treturn ret\nend", "  local max\
    \ = 0\n  for _,v in ipairs(l) do\n    if v > max then\n      max = v\n    end\n\
    \  end\n  return max\nend", "\treturn reduce(op.max, l[1], l)\nend", "    local\
    \ max = 0\n    for _, v in ipairs(l) do\n        if v > max then\n           \
    \ max = v\n        end\n    end\n    return max\nend", "\tlocal v = l[1]\n\tfor\
    \ i = 2, #l do\n\t\tif l[i] > v then\n\t\t\tv = l[i]\n\t\tend\n\tend\n\treturn\
    \ v\nend", "    local max = l[1]\n    for _, v in ipairs(l) do\n        if v >\
    \ max then\n            max = v\n        end\n    end\n    return max\nend", " \
    \   local max = 0\n    for _, v in ipairs(l) do\n        if v > max then\n   \
    \         max = v\n        end\n    end\n    return max\nend", "    local mx =\
    \ l[1]\n    for i = 2, #l do\n        if l[i] > mx then\n            mx = l[i]\n\
    \        end\n    end\n    return mx\nend", "  local max = l[1]\n  for _, v in\
    \ ipairs(l) do\n    if v > max then\n      max = v\n    end\n  end\n  return max\n\
    end", "    local max = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n\
    \            max = l[i]\n        end\n    end\n    return max\nend", "\tlocal\
    \ max = -math.huge\n\tfor _, e in ipairs(l) do\n\t\tif e > max then\n\t\t\tmax\
    \ = e\n\t\tend\n\tend\n\treturn max\nend", "    local m = l[1]\n    for i, v in\
    \ ipairs(l) do\n        if v > m then\n            m = v\n        end\n    end\n\
    \    return m\nend", "  assert(l ~= nil)\n  local e = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > e then\n      e = l[i]\n    end\n  end\n  return e\nend", "\tlocal\
    \ max = l[1]\n\tfor _, e in ipairs(l) do\n\t\tif e > max then\n\t\t\tmax = e\n\
    \t\tend\n\tend\n\treturn max\nend", "    local max = l[1]\n    for i = 2, #l do\n\
    \        max = math.max(max, l[i])\n    end\n    return max\nend", "    local\
    \ max = l[1]\n    for i=2,#l do\n        if l[i] > max then\n            max =\
    \ l[i]\n        end\n    end\n    return max\nend", "    local n = -math.huge\n\
    \    for _, e in ipairs(l) do\n        if e > n then\n            n = e\n    \
    \    end\n    end\n    return n\nend", "    return foldl(l, math.max, -math.huge)\n\
    end", "    local n = #l\n    local x = l[1]\n    for i = 2, n do\n        if l[i]\
    \ > x then\n            x = l[i]\n        end\n    end\n    return x\nend", " \
    \ local max = l[1]\n  for i = 2, #l do\n    max = math.max(max, l[i])\n  end\n\
    \  return max\nend", "    local r = l[1]\n    for _, v in ipairs(l) do\n     \
    \   if v > r then\n            r = v\n        end\n    end\n    return r\nend",
  "    local m = l[1]\n    for i = 2, #l do\n        if l[i] > m then\n          \
    \  m = l[i]\n        end\n    end\n    return m\nend", "    if #l == 0 then\n\
    \        return nil\n    end\n    local max = l[1]\n    for i = 2, #l do\n   \
    \     if l[i] > max then\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    local max = l[1]\n    for i = 2, #l do\n        if l[i] > max\
    \ then\n            max = l[i]\n        end\n    end\n    return max\nend", "\t\
    assert(#l > 0, \"ERROR: Cannot get max from an empty table\")\n\tlocal max = l[1]\n\
    \tfor i = 2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\
    \treturn max\nend", "    local max = l[1]\n    for i=2,#l do\n        if l[i]\
    \ > max then\n            max = l[i]\n        end\n    end\n    return max\nend",
  "  local m = l[1]\n  for _, v in ipairs(l) do\n    if v > m then\n      m = v\n\
    \    end\n  end\n  return m\nend", "    local max = 0\n    for i = 1, #l do\n\
    \        if l[i] > max then\n            max = l[i]\n        end\n    end\n  \
    \  return max\nend", "    assert(table.getn(l) > 0, 'Table should not be empty.')\n\
    \    local res = l[1]\n    for _, v in ipairs(l) do\n        if v > res then\n\
    \            res = v\n        end\n    end\n    return res\nend", "\tlocal m\n\
    \tfor _, v in ipairs(l) do\n\t\tif not m or v > m then\n\t\t\tm = v\n\t\tend\n\
    \tend\n\treturn m\nend", "  local a = l[1]\n  for i = 2, #l do\n    if l[i] >\
    \ a then\n      a = l[i]\n    end\n  end\n  return a\nend", "    if #l == 0 then\n\
    \        return nil\n    end\n    local max = l[1]\n    for i=2,#l do\n      \
    \  if l[i] > max then\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "  local a, b = l[1], l[2]\n  if a < b then a, b = b, a end\n  for\
    \ i = 3, #l do\n    local c = l[i]\n    if c > a then\n      a, b = c, a\n   \
    \ elseif c > b then\n      b = c\n    end\n  end\n  return a\nend", "    if type(l)\
    \ ~= \"table\" then\n        return nil\n    end\n    local max = -math.huge\n\
    \    for _, v in ipairs(l) do\n        if v > max then\n            max = v\n\
    \        end\n    end\n    return max\nend", "  assert(l ~= nil, \"empty table\"\
    )\n  local max = l[1]\n  for i = 2, #l do\n    max = math.max(max, l[i])\n  end\n\
    \  return max\nend", "\tlocal max = l[1]\n\tfor i=2,#l do\n\t\tif l[i] > max then\n\
    \t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend", "\tlocal m = l[1]\n\tfor\
    \ _, v in ipairs(l) do\n\t\tif v > m then\n\t\t\tm = v\n\t\tend\n\tend\n\treturn\
    \ m\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
