name: HumanEval_70_strange_sort_list
language: lua
results:
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local ret = {}\n  local f = false\n  local m = -math.huge\n  local min = math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min = v\n    end\n \
    \   if v > m then\n      m = v\n    end\n  end\n  while true do\n    if not f\
    \ then\n      table.insert(ret, min)\n      f = true\n    else\n      table.insert(ret,\
    \ m)\n      f = false\n    end\n    if min == m then\n      break\n    end\n \
    \   if not f then\n      lst[min] = 0\n      min = math.huge\n      for _, v in\
    \ ipairs(lst) do\n        if v < min then\n          min = v\n        end\n  \
    \    end\n    else\n      lst[m] = 0\n      m = -math.huge\n      for _, v in\
    \ ipairs(lst) do\n        if v > m then\n          m = v\n        end\n      end\n\
    \    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtblj9yd.lua:59:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 3, 0, 2, 0, 0}\nstack traceback:\n\t/tmp/tmpjtblj9yd.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvh_iw5p.lua:18:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpyvh_iw5p.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local ret = {}\n    local i = 1\n    local m = {}\n    local e = {}\n   \
    \ local t = {}\n    for _, v in ipairs(lst) do\n        if v < 0 then\n      \
    \      e[#e + 1] = v\n        elseif v > 0 then\n            m[#m + 1] = v\n \
    \       else\n            t[#t + 1] = v\n        end\n    end\n    local m_ =\
    \ {}\n    for _, v in ipairs(m) do\n        m_[#m_ + 1] = -v\n    end\n    local\
    \ mm = {}\n    for _, v in ipairs(m_) do\n        mm[#mm + 1] = {v, i}\n     \
    \   i = i + 1\n    end\n    local mmm = {}\n    for _, v in ipairs(mm) do\n  \
    \      mmm[#mmm + 1] = v\n    end\n    local ee = {}\n    for _, v in ipairs(e)\
    \ do\n        ee[#ee + 1] = {v, i}\n        i = i + 1\n    end\n    local tt =\
    \ {}\n    for _, v in ipairs(t) do\n        tt[#tt + 1] = {v, i}\n        i =\
    \ i + 1\n    end\n    table.sort(mmm, function(a, b) return a[1] < b[1] end)\n\
    \    table.sort(ee, function(a, b) return a[1] < b[1] end)\n    table.sort(tt,\
    \ function(a, b) return a[1] < b[1] end)\n    local a = math.floor(#mmm / 2)\n\
    \    local b = math.floor(#ee / 2)\n    local c = math.floor(#tt / 2)\n    for\
    \ i = 1, a do\n        ret[#ret + 1] = mmm[i][1]\n        ret[#ret + 1] = mmm[#mmm\
    \ - i + 1][1]\n    end\n    if a * 2 ~= #mmm then\n        ret[#ret + 1] = mmm[a\
    \ + 1][1]\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd0go3dc4.lua:77: 'end' expected (to close 'if' at line 59)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local sorted_lst = {}\n  while #lst > 0 do\n    table.insert(sorted_lst, table.remove(lst,\
    \ 1))\n    if #lst > 0 then\n      table.insert(sorted_lst, table.remove(lst))\n\
    \    end\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx800flpd.lua:28:\
    \ expected: {1, 9, 5, 8, 6, 7}\nactual: {5, 1, 6, 9, 7, 8}\nstack traceback:\n\
    \t/tmp/tmpx800flpd.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \   local idx = 0\n   local min = 0\n   local max = 0\n   local new = {}\n   local\
    \ count = 0\n   local i = 0\n   while count < #lst do\n      min = math.min(unpack(lst))\n\
    \      idx = table.index_of(lst, min)\n      lst[idx] = math.huge\n      table.insert(new,\
    \ min)\n      count = count + 1\n      i = i + 1\n      if i < #lst then\n   \
    \      max = math.max(unpack(lst))\n         idx = table.index_of(lst, max)\n\
    \         lst[idx] = -math.huge\n         table.insert(new, max)\n         count\
    \ = count + 1\n         i = i + 1\n      end\n   end\n   return new\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_sho3lec.lua:19:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_sho3lec.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp_sho3lec.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7u_ec8e_.lua:18:\
    \ expected: {1, 4, 2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmp7u_ec8e_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local sorted = { table.remove(lst, 1) }\n    local n = #lst\n    for i =\
    \ 1, n / 2 do\n        table.insert(sorted, table.remove(lst, 1))\n        table.insert(sorted,\
    \ table.remove(lst))\n    end\n    return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dldslmj.lua:24:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmp1dldslmj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local lst, result = tcopy(lst), {}\n    table.sort(lst)\n    for i = 1, #lst\
    \ do\n        if i % 2 == 1 then\n            result[#result + 1] = table.remove(lst,\
    \ 1)\n        else\n            result[#result + 1] = table.remove(lst)\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpscqnar_x.lua:12:\
    \ attempt to call a nil value (global 'tcopy')\nstack traceback:\n\t/tmp/tmpscqnar_x.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpscqnar_x.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    if #lst < 2 then\n        return lst\n    end\n    local min, max = min_max(lst)\n\
    \    local l1, l2 = {}, {}\n    for _, n in ipairs(lst) do\n        if n == min\
    \ or n == max then\n            table.insert(l1, n)\n        else\n          \
    \  table.insert(l2, n)\n        end\n    end\n    return strange_sort_list(l1)\
    \ .. strange_sort_list(l2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmek2i1iu.lua:15:\
    \ attempt to call a nil value (global 'min_max')\nstack traceback:\n\t/tmp/tmpmek2i1iu.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpmek2i1iu.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local result = {}\n    local from_min = true\n    local i = 1\n    while\
    \ #lst > 0 do\n        local min = math.min(unpack(lst))\n        local max =\
    \ math.max(unpack(lst))\n        if from_min then\n            table.insert(result,\
    \ min)\n            table.remove(lst, i)\n            from_min = false\n     \
    \   else\n            table.insert(result, max)\n            table.remove(lst,\
    \ i)\n            from_min = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmfq8_xke.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmfq8_xke.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpmfq8_xke.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local function function_in_function(lst, l, r)\n    -- Find minimum and maximum\
    \ values, and their positions.\n    local n, n_pos, x, x_pos = lst[l], l, lst[l],\
    \ l\n    for i = l + 1, r do\n      if lst[i] < n then\n        n, n_pos = lst[i],\
    \ i\n      end\n      if lst[i] > x then\n        x, x_pos = lst[i], i\n     \
    \ end\n    end\n    -- If some value is not on its place (its position is different\
    \ from the\n    -- current index in table), it means we have to put it on its\
    \ place.\n    -- Otherwise, we have to put value that is on wrong place.\n   \
    \ if n_pos ~= l then\n      return n, n_pos\n    else\n      return x, x_pos\n\
    \    end\n  end\n  -- Initialize table with minimum value on first position.\n\
    \  local n, n_pos = function_in_function(lst, 1, #lst)\n  lst[n_pos] = lst[1]\n\
    \  lst[1] = n\n  local current_idx = 2\n  -- Loop until all values are on the\
    \ right place.\n  while current_idx <= #lst do\n    n, n_pos = function_in_function(lst,\
    \ current_idx, #lst)\n    -- Put value on the current place.\n    lst[n_pos] =\
    \ lst[current_idx]\n    lst[current_idx] = n\n    current_idx = current_idx +\
    \ 1\n  end\n  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzpj83ov.lua:51:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 1, 2, 3}\nstack traceback:\n\t/tmp/tmplzpj83ov.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local res = {}\n    local n = 0\n    local m = 0\n    local lst_len = #lst\n\
    \    local min_elems = {}\n    local max_elems = {}\n    for _, v in ipairs(lst)\
    \ do\n        if v == min(lst) then\n            n = n + 1\n            min_elems[n]\
    \ = v\n        elseif v == max(lst) then\n            m = m + 1\n            max_elems[m]\
    \ = v\n        end\n    end\n    local s = n > m and n or m\n    for i = 1, lst_len\
    \ do\n        if i % 2 == 1 then\n            res[i] = min_elems[i / 2 + 1]\n\
    \        else\n            res[i] = max_elems[i / 2]\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjr4ixd2q.lua:19:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpjr4ixd2q.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpjr4ixd2q.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local min_value = min(lst)\n    local min_indeces = find_all(lst, min_value)\n\
    \    local max_value = max(lst)\n    local max_indeces = find_all(lst, max_value)\n\
    \    local sorted_list = {}\n    local minimum = true\n    local elements_left\
    \ = #lst\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuwxx370i.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local function min_max(lst)\n        local min_index = nil\n        local\
    \ max_index = nil\n        local min = math.huge\n        local max = -math.huge\n\
    \        for i = 1, #lst do\n            if lst[i] < min then\n              \
    \  min = lst[i]\n                min_index = i\n            end\n            if\
    \ lst[i] > max then\n                max = lst[i]\n                max_index =\
    \ i\n            end\n        end\n        return min_index, max_index\n    end\n\
    \    local function generate_sequence(N)\n        local n = 1\n        local sequence\
    \ = {}\n        for i = 1, N do\n            if i % 2 == 1 then\n            \
    \    sequence[i] = n\n            else\n                sequence[i] = N - n +\
    \ 1\n            end\n            n = n + 1\n        end\n        return sequence\n\
    \    end\n    local function strange_sort(lst)\n        local res = {}\n     \
    \   local N = #lst\n        local seq = generate_sequence(N)\n        local lst_copy\
    \ = utils.table_copy(lst)\n        local min_index, max_index = min_max(lst_copy)\n\
    \        res[1] = lst_copy[min_index]\n        table.remove(lst_copy, min_index)\n\
    \        table.remove(lst_copy, max_index - 1)\n        for i = 2, N do\n    \
    \        min_index, max_index = min_max(lst_copy)\n            res[seq[i]] = lst_copy[i\
    \ % 2 == 1 and min_index or max_index]\n            table.remove(lst_copy, min_index)\n\
    \            table.remove(lst_copy, max_index - 1)\n        end\n        return\
    \ res\n    end\n    return strange_sort(lst)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeb26h_ux.lua:46:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpeb26h_ux.lua:46:\
    \ in function </tmp/tmpeb26h_ux.lua:42>\n\t(...tail calls...)\n\t/tmp/tmpeb26h_ux.lua:65:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    if not lst or #lst == 0 then\n        return {}\n    end\n    local tbl =\
    \ {}\n    local len = #lst\n    table.sort(lst)\n    local is_min = true\n   \
    \ for i = 1, len do\n        local to_index = i\n        if is_min then\n    \
    \        to_index = 1\n        else\n            to_index = len - i + 1\n    \
    \    end\n        tbl[i] = lst[to_index]\n        table.remove(lst, to_index)\n\
    \        is_min = not is_min\n    end\n    return tbl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \tlocal result = {}\n\twhile #lst > 0 do\n\t\tlocal min_index = min_index_list(lst)\n\
    \t\tlocal max_index = max_index_list(lst)\n\t\tif min_index < max_index then\n\
    \t\t\ttable.insert(result, lst[min_index])\n\t\t\ttable.insert(result, lst[max_index])\n\
    \t\t\ttable.remove(lst, max_index)\n\t\t\ttable.remove(lst, min_index)\n\t\telse\n\
    \t\t\ttable.insert(result, lst[max_index])\n\t\t\ttable.insert(result, lst[min_index])\n\
    \t\t\ttable.remove(lst, min_index)\n\t\t\ttable.remove(lst, max_index)\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps7cqak16.lua:14:\
    \ attempt to call a nil value (global 'min_index_list')\nstack traceback:\n\t\
    /tmp/tmps7cqak16.lua:14: in local 'candidate'\n\t/tmp/tmps7cqak16.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local res = {}\n  while #lst > 0 do\n    -- min\n    local min = lst[1]\n \
    \   local min_index = 1\n    for i = 2, #lst do\n      if lst[i] < min then\n\
    \        min = lst[i]\n        min_index = i\n      end\n    end\n    table.insert(res,\
    \ min)\n    table.remove(lst, min_index)\n    -- max\n    local max = lst[1]\n\
    \    local max_index = 1\n    for i = 2, #lst do\n      if lst[i] > max then\n\
    \        max = lst[i]\n        max_index = i\n      end\n    end\n    table.insert(res,\
    \ max)\n    table.remove(lst, max_index)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  local a = {}\n  for _, v in ipairs(lst) do\n    a[#a + 1] = v\n  end\n  local\
    \ n = #a\n  local ans = {}\n  local function aux(idx)\n    if idx > n then\n \
    \     return\n    end\n    local mn, mnidx = a[1], 1\n    local mx, mxidx = a[1],\
    \ 1\n    for i = 2, n do\n      if a[i] < mn then\n        mn, mnidx = a[i], i\n\
    \      end\n      if a[i] > mx then\n        mx, mxidx = a[i], i\n      end\n\
    \    end\n    a[mnidx] = math.huge\n    ans[#ans + 1] = mn\n    a[mxidx] = -math.huge\n\
    \    ans[#ans + 1] = mx\n    aux(idx + 2)\n  end\n  aux(1)\n  return ans\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kmmra8.lua:45:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, -#Inf, #Inf}\nstack traceback:\n\t/tmp/tmp40kmmra8.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \  if lst[1] == nil then\n    return {}\n  end\n  local result = {}\n  local maxs\
    \ = {}\n  local mins = {}\n  local i = 1\n  local j = 1\n  local count = #lst\n\
    \  for n = 1, count do\n    if n % 2 == 1 then\n      result[n] = math.min(unpack(lst))\n\
    \      mins[i] = result[n]\n      i = i + 1\n    else\n      local max = math.max(unpack(lst))\n\
    \      if mins[i - 1] == max then\n        max = math.max(unpack(maxs))\n    \
    \  end\n      result[n] = max\n      maxs[j] = max\n      j = j + 1\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7uw51ah2.lua:23:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7uw51ah2.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp7uw51ah2.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of integers, return table in strange order.\n-- Strange\
    \ sorting, is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1,\
    \ 2, 3, 4})\n-- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5,\
    \ 5, 5}\n-- >>> strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n\
    \    local rsl = {}\n    local tmp = table_copy(lst)\n    local min_i = table_min_index(tmp)\n\
    \    local min = table_remove(tmp, min_i)\n    local max_i = table_max_index(tmp)\n\
    \    local max = table_remove(tmp, max_i)\n    local iter = 1\n    while min ~=\
    \ nil or max ~= nil do\n        if iter % 2 == 1 then\n            rsl[#rsl +\
    \ 1] = min\n            min_i = table_min_index(tmp)\n            min = table_remove(tmp,\
    \ min_i)\n        else\n            rsl[#rsl + 1] = max\n            max_i = table_max_index(tmp)\n\
    \            max = table_remove(tmp, max_i)\n        end\n        iter = iter\
    \ + 1\n    end\n    return rsl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptjene3a8.lua:13:\
    \ attempt to call a nil value (global 'table_copy')\nstack traceback:\n\t/tmp/tmptjene3a8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmptjene3a8.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
