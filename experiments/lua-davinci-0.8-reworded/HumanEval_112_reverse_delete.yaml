name: HumanEval_112_reverse_delete
language: lua
prompt: "-- Task\n-- We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n-- then check if the result\
  \ string is palindrome.\n-- A string is called palindrome if it reads the same backward\
  \ as forward.\n-- You should return a table containing the result string and true/false\
  \ for the check.\n-- Example\n-- >>> reverse_delete('abcde', 'ae')\n-- {'bcd', false}\n\
  -- >>> reverse_delete('abcdef', 'b')\n-- {'acdef', false}\n-- >>> reverse_delete('abcdedcba',\
  \ 'ab')\n-- {'cdedc', true}\nlocal function reverse_delete(s, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
  \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
  \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
  \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
  \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
  \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
  \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
  \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tfor i = 1, #c do\n\t\ts = s:gsub(c:sub(i, i), '')\n\tend\n\tlocal\
    \ tmp = s:reverse()\n\treturn {s, s == tmp}\nend", "  local r = ''\n  for i =\
    \ 1, #s do\n    local c = s:sub(i, i)\n    if not c:find(c) then\n      r = r\
    \ .. c\n    end\n  end\n  return {r, r == r:reverse()}\nend", "    -- your code\
    \ here\nend", "  local res = {}\n  for i=1, #s do\n    local char = s:sub(i, i)\n\
    \    if not c:find(char) then\n      table.insert(res, char)\n    end\n  end\n\
    \  local str = table.concat(res)\n  local palindrome = str == str:reverse()\n\
    \  return {str, palindrome}\nend", "  local str, palindrome = {}, {}\n  for i=1,\
    \ string.len(s) do\n    local ch = string.sub(s, i, i)\n    local c1 = string.find(c,\
    \ ch)\n    if not c1 then\n      table.insert(str, ch)\n    end\n  end\n  for\
    \ i=1, string.len(str) do\n    local ch = string.sub(str, i, i)\n    table.insert(palindrome,\
    \ ch)\n  end\n  local rev_str = string.reverse(str)\n  local rev_palindrome =\
    \ string.reverse(palindrome)\n  if rev_str == rev_palindrome then\n    return\
    \ {str, true}\n  else\n    return {str, false}\n  end\nend", "    local result\
    \ = ''\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n        if not c:find(ch)\
    \ then\n            result = result .. ch\n        end\n    end\n    return {result,\
    \ result == result:reverse()}\nend", "  local res = {}\n  for i = 1, #s do\n \
    \   if s:find(s:sub(i, i), 1, true) then\n      table.insert(res, s:sub(i, i))\n\
    \    end\n  end\n  return {table.concat(res), res == table.reverse(res)}\nend",
  "    local t = {}\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n      \
    \  if not c:find(ch) then\n            t[#t + 1] = ch\n        end\n    end\n\
    \    s = table.concat(t)\n    local function is_palindrome(s)\n        local half\
    \ = math.floor(#s / 2)\n        for i = 1, half do\n            if s:sub(i, i)\
    \ ~= s:sub(#s - i + 1, #s - i + 1) then\n                return false\n      \
    \      end\n        end\n        return true\n    end\n    return {s, is_palindrome(s)}\n\
    end", "\tlocal new_s = s:gsub('['..c..']', '')\n\treturn {new_s, new_s:reverse()\
    \ == new_s}\nend", "  for i = 1, #c do\n    s = s:gsub(c:sub(i, i), '')\n  end\n\
    \  return {s, s == s:reverse()}\nend", "    local s2 = s:gsub('['..c..']', '')\n\
    \    return {s2, s2:reverse() == s2}\nend", "    local res = ''\n    for i = 1,\
    \ #s do\n        if not c:find(s:sub(i, i)) then\n            res = res .. s:sub(i,\
    \ i)\n        end\n    end\n    return {res, res == res:reverse()}\nend", "  local\
    \ out = {}\n  local t = {}\n  for i = 1, #s do\n    if string.find(c, s:sub(i,\
    \ i)) then\n      t[i] = 0\n    else\n      t[i] = 1\n    end\n  end\n  for i\
    \ = 1, #s do\n    if t[i] == 1 then\n      table.insert(out, s:sub(i, i))\n  \
    \  end\n  end\n  out = table.concat(out)\n  local reverse_out = string.reverse(out)\n\
    \  local result = {}\n  if out == reverse_out then\n    table.insert(result, out)\n\
    \    table.insert(result, true)\n  else\n    table.insert(result, out)\n    table.insert(result,\
    \ false)\n  end\n  return result\nend", "    -- your code here\nend", "  for i\
    \ = 1, #c do\n    s = s:gsub(c:sub(i, i), '')\n  end\n  local function is_palindrome(s)\n\
    \    local len = #s\n    for i = 1, len / 2 do\n      if s:sub(i, i) ~= s:sub(len\
    \ - i + 1, len - i + 1) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  return {s, is_palindrome(s)}\nend", "    local s_clean = {}\n\
    \    for i = 1, #s do\n        local char = s:sub(i, i)\n        if not c:find(char)\
    \ then\n            s_clean[#s_clean + 1] = char\n        end\n    end\n    s_clean\
    \ = table.concat(s_clean)\n    local s_reverse = s_clean:reverse()\n    return\
    \ {s_clean, s_clean == s_reverse}\nend", "    -- your code here\nend", "    --\
    \ your code here\nend", "  return {s:gsub(c, ''), false}\nend", "  -- your code\
    \ here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
