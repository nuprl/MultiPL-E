name: HumanEval_151_double_the_difference
language: lua
prompt: "-- Given a table of numbers, return the sum of squares of the numbers\n--\
  \ in the table that are odd. Ignore numbers that are negative or not integers.\n\
  -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
  \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
  -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
  \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
  \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
  \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n   \
  \ lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for k,v in pairs(lst) do\n    if v > 0 and math.floor(v)\
    \ == v then\n      if v % 2 == 1 then\n        sum = sum + v^2\n      end\n  \
    \  end\n  end\n  return sum * 2\nend", "    local sum = 0\n    for i = 1, #lst\
    \ do\n        local val = lst[i]\n        if val % 2 == 1 and val > 0 then\n \
    \           sum = sum + val ^ 2\n        end\n    end\n    return sum * 2\nend",
  "    local sum_of_odds = 0\n    local sum_of_evens = 0\n    for i,x in ipairs(lst)\
    \ do\n        if x % 2 == 0 then\n            sum_of_evens = sum_of_evens + x\n\
    \        else\n            sum_of_odds = sum_of_odds + x\n        end\n    end\n\
    \    return sum_of_odds - sum_of_evens\nend", "  if #lst == 0 then\n    return\
    \ 0\n  end\n  local odd_lst = {}\n  for i = 1, #lst do\n    if lst[i] % 2 == 1\
    \ and lst[i] >= 0 then\n      odd_lst[#odd_lst + 1] = lst[i]\n    end\n  end\n\
    \  local sum = 0\n  for i = 1, #odd_lst do\n    sum = sum + odd_lst[i]\n  end\n\
    \  return 2 * sum\nend", "   local sum = 0\n   for i,x in ipairs(lst) do\n   \
    \   if x == math.floor(x) and x > 0 then\n         if x % 2 == 1 then\n      \
    \      sum = sum + x*x\n         end\n      end\n   end\n   return sum*2\nend",
  "    local sum_odd_squares = 0\n    for i = 1, #lst do\n        if lst[i] >= 0 and\
    \ lst[i] % 2 == 1 then\n            sum_odd_squares = sum_odd_squares + lst[i]\
    \ ^ 2\n        end\n    end\n    return sum_odd_squares * 2\nend", "    local\
    \ d = 0\n    local sum = 0\n    for i = 1, #lst do\n        if type(lst[i]) ==\
    \ \"number\" and lst[i] % 2 == 1 and lst[i] >= 0 then\n            d = d + lst[i]\
    \ * lst[i]\n        end\n    end\n    return d * 2\nend", "    local total = 0\n\
    \    for _, v in ipairs(lst) do\n        if type(v) == \"number\" and v > 0 and\
    \ math.floor(v) == v then\n            if v % 2 == 1 then\n                total\
    \ = total + v * v\n            end\n        end\n    end\n    return total * 2\n\
    end", "    local total = 0\n    for i,v in ipairs(lst) do\n        if type(v)\
    \ == \"number\" and not (v % 2 == 0) and v >= 0 then\n            total = total\
    \ + v * v\n        end\n    end\n    return total * 2\nend", "\tlocal sum = 0\n\
    \tfor i = 1, #lst do\n\t\tlocal x = lst[i]\n\t\tif x >= 0 and x % 1 == 0 then\n\
    \t\t\tsum = sum + (x - 2)^2\n\t\tend\n\tend\n\treturn sum\nend", "    --check\
    \ if empty\n    if #lst == 0 then\n        return 0\n    end\n    --define variables\n\
    \    local value = 0\n    local total = 0\n    local i = 1\n    --loop through\
    \ table\n    while i <= #lst do\n        --skip negatives and non-integers\n \
    \       if lst[i] > 0 and lst[i] % 1 == 0 then\n            --square value and\
    \ add to total\n            value = lst[i] * lst[i]\n            total = total\
    \ + value\n        end\n        i = i + 1\n    end\n    --if no even numbers,\
    \ return 0\n    if total == 0 then\n        return 0\n    end\n    --return sum\
    \ of even numbers\n    return 2 * total\nend", "    local sum = 0\n    for _,\
    \ v in ipairs(lst) do\n        if v % 2 == 1 and v >= 0 then\n            sum\
    \ = sum + (v*v)\n        end\n    end\n    return sum * 2\nend", "    -- YOUR\
    \ CODE HERE\n    if table_length(lst) == 0 then\n        return 0\n    end\n \
    \   return double_the_difference_helper(lst, 0, 0)\nend", "   local sum = 0\n\
    \   for _, value in ipairs(lst) do\n      if type(value) == \"number\" and value\
    \ % 2 == 1 and value >= 0 then\n         sum = sum + value * value\n      end\n\
    \   end\n   return sum * 2\nend", "   local sum = 0\n   for _, v in ipairs(lst)\
    \ do\n      if (v > 0) and math.floor(v) == v then\n         sum = sum + v*v\n\
    \      end\n   end\n   return sum\nend", "    local product, sum = 1, 0\n    for\
    \ k, v in pairs(lst) do\n        if tonumber(v) ~= nil and v >= 0 and math.floor(v)\
    \ == v then\n            sum = sum + v\n            product = product * v\n  \
    \      end\n    end\n    return (sum ^ 2) - (product ^ 2)\nend", "    local largest,\
    \ smallest = -1, math.huge\n    for _, n in ipairs(lst) do\n        if type(n)\
    \ == \"number\" and n % 1 == 0 and n >= 0 then\n            if n > largest then\n\
    \                largest = n\n            end\n            if n < smallest then\n\
    \                smallest = n\n            end\n        end\n    end\n    return\
    \ (largest - smallest) ^ 2\nend", "    local result = 0\n    for i,v in ipairs(lst)\
    \ do\n        if (v > 0) and (v % 2 == 1) then\n            result = result +\
    \ v*v\n        end\n    end\n    return result\nend", "\tlocal num = 0\n\tfor\
    \ k, v in pairs(lst) do\n\t\tlocal int = math.floor(v)\n\t\tif int % 2 == 1 and\
    \ int >= 0 then\n\t\t\tnum = num + v * v\n\t\tend\n\tend\n\treturn num * 2\nend",
  "    local sum = 0\n    for k, v in pairs(lst) do\n        if v > 0 and v % 2 ==\
    \ 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
