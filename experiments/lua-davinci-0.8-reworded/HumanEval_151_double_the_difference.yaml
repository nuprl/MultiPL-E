name: HumanEval_151_double_the_difference
language: lua
prompt: "-- Given a table of numbers, return the sum of squares of the numbers\n--\
  \ in the table that are odd. Ignore numbers that are negative or not integers.\n\
  -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
  \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
  -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
  \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
  \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
  \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n   \
  \ lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for k,v in pairs(lst) do\n    if v > 0 and math.floor(v)\
    \ == v then\n      if v % 2 == 1 then\n        sum = sum + v^2\n      end\n  \
    \  end\n  end\n  return sum * 2\nend", "    local sum = 0\n    for i = 1, #lst\
    \ do\n        local val = lst[i]\n        if val % 2 == 1 and val > 0 then\n \
    \           sum = sum + val ^ 2\n        end\n    end\n    return sum * 2\nend",
  "    local sum_of_odds = 0\n    local sum_of_evens = 0\n    for i,x in ipairs(lst)\
    \ do\n        if x % 2 == 0 then\n            sum_of_evens = sum_of_evens + x\n\
    \        else\n            sum_of_odds = sum_of_odds + x\n        end\n    end\n\
    \    return sum_of_odds - sum_of_evens\nend", "  if #lst == 0 then\n    return\
    \ 0\n  end\n  local odd_lst = {}\n  for i = 1, #lst do\n    if lst[i] % 2 == 1\
    \ and lst[i] >= 0 then\n      odd_lst[#odd_lst + 1] = lst[i]\n    end\n  end\n\
    \  local sum = 0\n  for i = 1, #odd_lst do\n    sum = sum + odd_lst[i]\n  end\n\
    \  return 2 * sum\nend", "   local sum = 0\n   for i,x in ipairs(lst) do\n   \
    \   if x == math.floor(x) and x > 0 then\n         if x % 2 == 1 then\n      \
    \      sum = sum + x*x\n         end\n      end\n   end\n   return sum*2\nend",
  "    local sum_odd_squares = 0\n    for i = 1, #lst do\n        if lst[i] >= 0 and\
    \ lst[i] % 2 == 1 then\n            sum_odd_squares = sum_odd_squares + lst[i]\
    \ ^ 2\n        end\n    end\n    return sum_odd_squares * 2\nend", "    local\
    \ d = 0\n    local sum = 0\n    for i = 1, #lst do\n        if type(lst[i]) ==\
    \ \"number\" and lst[i] % 2 == 1 and lst[i] >= 0 then\n            d = d + lst[i]\
    \ * lst[i]\n        end\n    end\n    return d * 2\nend", "    local total = 0\n\
    \    for _, v in ipairs(lst) do\n        if type(v) == \"number\" and v > 0 and\
    \ math.floor(v) == v then\n            if v % 2 == 1 then\n                total\
    \ = total + v * v\n            end\n        end\n    end\n    return total * 2\n\
    end", "    local total = 0\n    for i,v in ipairs(lst) do\n        if type(v)\
    \ == \"number\" and not (v % 2 == 0) and v >= 0 then\n            total = total\
    \ + v * v\n        end\n    end\n    return total * 2\nend", "\tlocal sum = 0\n\
    \tfor i = 1, #lst do\n\t\tlocal x = lst[i]\n\t\tif x >= 0 and x % 1 == 0 then\n\
    \t\t\tsum = sum + (x - 2)^2\n\t\tend\n\tend\n\treturn sum\nend", "    --check\
    \ if empty\n    if #lst == 0 then\n        return 0\n    end\n    --define variables\n\
    \    local value = 0\n    local total = 0\n    local i = 1\n    --loop through\
    \ table\n    while i <= #lst do\n        --skip negatives and non-integers\n \
    \       if lst[i] > 0 and lst[i] % 1 == 0 then\n            --square value and\
    \ add to total\n            value = lst[i] * lst[i]\n            total = total\
    \ + value\n        end\n        i = i + 1\n    end\n    --if no even numbers,\
    \ return 0\n    if total == 0 then\n        return 0\n    end\n    --return sum\
    \ of even numbers\n    return 2 * total\nend", "    local sum = 0\n    for _,\
    \ v in ipairs(lst) do\n        if v % 2 == 1 and v >= 0 then\n            sum\
    \ = sum + (v*v)\n        end\n    end\n    return sum * 2\nend", "    -- YOUR\
    \ CODE HERE\n    if table_length(lst) == 0 then\n        return 0\n    end\n \
    \   return double_the_difference_helper(lst, 0, 0)\nend", "   local sum = 0\n\
    \   for _, value in ipairs(lst) do\n      if type(value) == \"number\" and value\
    \ % 2 == 1 and value >= 0 then\n         sum = sum + value * value\n      end\n\
    \   end\n   return sum * 2\nend", "   local sum = 0\n   for _, v in ipairs(lst)\
    \ do\n      if (v > 0) and math.floor(v) == v then\n         sum = sum + v*v\n\
    \      end\n   end\n   return sum\nend", "    local product, sum = 1, 0\n    for\
    \ k, v in pairs(lst) do\n        if tonumber(v) ~= nil and v >= 0 and math.floor(v)\
    \ == v then\n            sum = sum + v\n            product = product * v\n  \
    \      end\n    end\n    return (sum ^ 2) - (product ^ 2)\nend", "    local largest,\
    \ smallest = -1, math.huge\n    for _, n in ipairs(lst) do\n        if type(n)\
    \ == \"number\" and n % 1 == 0 and n >= 0 then\n            if n > largest then\n\
    \                largest = n\n            end\n            if n < smallest then\n\
    \                smallest = n\n            end\n        end\n    end\n    return\
    \ (largest - smallest) ^ 2\nend", "    local result = 0\n    for i,v in ipairs(lst)\
    \ do\n        if (v > 0) and (v % 2 == 1) then\n            result = result +\
    \ v*v\n        end\n    end\n    return result\nend", "\tlocal num = 0\n\tfor\
    \ k, v in pairs(lst) do\n\t\tlocal int = math.floor(v)\n\t\tif int % 2 == 1 and\
    \ int >= 0 then\n\t\t\tnum = num + v * v\n\t\tend\n\tend\n\treturn num * 2\nend",
  "    local sum = 0\n    for k, v in pairs(lst) do\n        if v > 0 and v % 2 ==\
    \ 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend", "    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v)\
    \ == \"number\" and v == math.floor(v) and v > 0 then\n            sum = sum +\
    \ math.pow(v, 2)\n        end\n    end\n    return sum * 2\nend", "  -- YOUR CODE\
    \ HERE\n  error(\"double_the_difference not implemented\")\nend", "    -- Your\
    \ code here\n    return 0\nend", "  local v = 0\n  for k, v in pairs(lst) do\n\
    \    if type(v) == \"number\" and v > 0 and v % 2 == 1 then\n      v = v * v\n\
    \    else\n      v = 0\n    end\n  end\n  return v\nend", "  local sum = 0\n \
    \ for i = 1, #lst do\n    if lst[i] % 2 == 1 and lst[i] >= 0 then\n      sum =\
    \ sum + lst[i] * lst[i]\n    end\n  end\n  return sum * 2\nend", "  local square\
    \ = function(x) return x*x end\n  local sum = 0\n  for k, v in pairs(lst) do\n\
    \    if v % 2 == 1 and v > 0 then\n      sum = sum + square(v)\n    end\n  end\n\
    \  return sum * 2\nend", "  -- I'm assuming it's a linear list.\n  local odd_squares_sum\
    \ = 0\n  local even_squares_sum = 0\n  for _, e in ipairs(lst) do\n    if (e %\
    \ 2) == 1 and e > 0 then\n      odd_squares_sum = odd_squares_sum + e * e\n  \
    \  elseif (e % 2) == 0 and e > 0 then\n      even_squares_sum = even_squares_sum\
    \ + e * e\n    end\n  end\n  return 2 * (odd_squares_sum - even_squares_sum)\n\
    end", "  return sum_of_squares_of_odds(lst) * 2\nend", "   local sum = 0\n   for\
    \ i, val in ipairs(lst) do\n      if math.type(val) == \"integer\" and val > 0\
    \ then\n         if val % 2 == 1 then\n            sum = sum + val * val\n   \
    \      end\n      end\n   end\n   return sum * 2\nend", "    --[[ Write your code\
    \ here ]]\n    return 0\nend", "  local sum = 0\n  for k, v in pairs(lst) do\n\
    \    if type(v) == \"number\" and v % 2 == 1 and v >= 0 then\n      sum = sum\
    \ + v * v\n    end\n  end\n  return sum * 2\nend", "  -- Insert code here\nend",
  "    local sum_of_squares = 0\n    for _, n in ipairs(lst) do\n        if n % 2\
    \ == 1 and n > 0 then\n            sum_of_squares = sum_of_squares + n * n\n \
    \       end\n    end\n    return sum_of_squares * 2\nend", "  --\n  -- Your code\
    \ here\n  --\nend", "  -- your code here\nend", "  return 0\nend", "  local diff\
    \ = 0\n  for i = 1, #lst do\n    local n = lst[i]\n    if type(n) == \"number\"\
    \ and n == math.floor(n) and n > 0 then\n      if n % 2 == 0 then\n        diff\
    \ = diff - n\n      else\n        diff = diff + n\n      end\n    end\n  end\n\
    \  return diff * 2\nend", "    local sum = 0\n    for i,v in ipairs(lst) do\n\
    \        if (v > 0 and v%2 == 1) then\n            sum = sum + v*v\n        end\n\
    \    end\n    return sum*2\nend", "  local result = 0\n  for i = 1, #lst do\n\
    \    if type(lst[i]) == \"number\" and lst[i] > 0 and lst[i] % 2 == 1 then\n \
    \     result = result + lst[i] * lst[i]\n    end\n  end\n  return result\nend",
  "  local d = 0\n  for _,x in ipairs(lst) do\n    if type(x) == \"number\" and x\
    \ == math.floor(x) and x >= 0 then\n      if x % 2 == 1 then\n        d = d +\
    \ x^2\n      end\n    end\n  end\n  return d * 2\nend", "  local squares = 0\n\
    \  for _,i in ipairs(lst) do\n    if type(i) == \"number\" and i >= 0 and math.floor(i)\
    \ == i then\n      if i % 2 == 1 then\n        squares = squares + i * i\n   \
    \   end\n    end\n  end\n  return squares * 2\nend", "    local sum = 0\n    local\
    \ square = 0\n    for i = 1, #lst do\n        local val = lst[i]\n        if val\
    \ > 0 and val % 1 == 0 then\n            if val % 2 == 1 then\n              \
    \  sum = sum + val\n                square = square + val * val\n            end\n\
    \        end\n    end\n    return (sum * sum) - square\nend", "  local sum = 0\n\
    \  for i, n in ipairs(lst) do\n    if n >= 0 and n == math.floor(n) then\n   \
    \   if n % 2 == 1 then\n        sum = sum + n*n\n      end\n    end\n  end\n \
    \ return sum\nend", "\tlocal sum = 0\n\tfor i, v in ipairs(lst) do\n\t\tif math.floor(v)\
    \ == v and v > 0 then\n\t\t\tif v % 2 == 1 then\n\t\t\t\tsum = sum + v * v\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn sum * 2\nend", "    -- TODO: return the correct\
    \ value.\n    return 0\nend", "  \nend", "    if empty(lst) then\n        return\
    \ 0\n    else\n        if type(lst[1]) == \"number\" and lst[1] > 0 and (lst[1]%1)\
    \ == 0 then\n            if lst[1]%2 == 0 then\n                return double_the_difference(tail(lst))\
    \ + lst[1]^2\n            else\n                return double_the_difference(tail(lst))\n\
    \            end\n        else\n            return double_the_difference(tail(lst))\n\
    \        end\n    end\nend", "  -- TODO: Remove this line, and write your code\
    \ below.\n  --       Use the variable 'lst' and the functions in the\n  --   \
    \    table \"funcs\" to implement this function.", "    local sum = 0\n    for\
    \ _,v in ipairs(lst) do\n        if math.floor(v) == v and v > 0 then\n      \
    \      if v % 2 == 1 then\n                sum = sum + v * v\n            end\n\
    \        end\n    end\n    return sum * 2\nend", "    local sum = 0\n    for _,v\
    \ in ipairs(lst) do\n        if v % 2 == 1 and v > 0 then\n            sum = sum\
    \ + v * v\n        end\n    end\n    return sum * 2\nend", "    -- TODO: your\
    \ code here\n    local result = 0\n    for _, i in ipairs(lst) do\n        if\
    \ (i > 0) and (i % 2 == 1) then\n            result = result + i ^ 2\n       \
    \ end\n    end\n    return result\nend", "  local sum_squares = 0\n  for i, value\
    \ in ipairs(lst) do\n    if value % 2 == 1 and math.floor(value) == value and\
    \ value >= 0 then\n      sum_squares = sum_squares + value * value\n    end\n\
    \  end\n  return sum_squares * 2\nend", "   local s = 0\n   for i, v in ipairs(lst)\
    \ do\n      if (math.type(v) == \"integer\") and (v > 0) and (v % 2 == 1) then\n\
    \         s = s + v * v\n      end\n   end\n   return s * 2\nend", "\tlocal sum\
    \ = 0\n\tfor _,v in ipairs(lst) do\n\t\tif v > 0 and v%2 == 1 then\n\t\t\tsum\
    \ = sum + v*v\n\t\tend\n\tend\n\treturn sum\nend", "    local sum = 0\n    for\
    \ _,v in ipairs(lst) do\n        if type(v) == \"number\" and v % 2 == 1 and v\
    \ >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1\
    \ and v > 0 then\n      sum = sum + v * v\n    end\n  end\n  return sum * 2\n\
    end", "\tlocal sum_of_odds_squared = 0\n\tfor i, v in ipairs(lst) do\n\t\tif v\
    \ % 2 == 1 and v > 0 then\n\t\t\tsum_of_odds_squared = sum_of_odds_squared + v^2\n\
    \t\tend\n\tend\n\treturn sum_of_odds_squared * 2\nend", "  local sum_odds = 0\n\
    \  local sum_evens = 0\n  for i,v in ipairs(lst) do\n    if math.floor(v) == v\
    \ and v > 0 then\n      if v % 2 == 0 then\n        sum_evens = sum_evens + v\n\
    \      else\n        sum_odds = sum_odds + v\n      end\n    end\n  end\n  return\
    \ (sum_odds - sum_evens) * 2\nend", "    local sum = 0\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n  \
    \      end\n    end\n    return sum * 2\nend", "    sum = 0\n    square_sum =\
    \ 0\n    for _, num in ipairs(lst) do\n        if math.fmod(num, 2) == 1 and num\
    \ > 0 then\n            sum = sum + num\n            square_sum = square_sum +\
    \ num * num\n        end\n    end\n    if sum > 0 then\n        return 2 * square_sum\
    \ - sum * sum\n    else\n        return 0\n    end\nend", "  local sum = 0\n \
    \ for _, v in ipairs(lst) do\n    -- check if the value is an integer and positive\n\
    \    if v >= 0 and math.floor(v) == v then\n      if v % 2 == 1 then\n       \
    \ sum = sum + v * v\n      end\n    end\n  end\n  return sum * 2\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    local c1 = 0\n    local c2 = 0\n    for _, v\
    \ in ipairs(lst) do\n        if type(v) == \"number\" and v > 0 and v % 1 == 0\
    \ then\n            if v % 2 == 0 then\n                table.insert(t1, v)\n\
    \                c1 = c1 + 1\n            else\n                table.insert(t2,\
    \ v)\n                c2 = c2 + 1\n            end\n        end\n    end\n   \
    \ if c1 == 0 then\n        return 0\n    elseif c2 == 0 then\n        return 0\n\
    \    else\n        local av1 = 0\n        local av2 = 0\n        for _, v in ipairs(t1)\
    \ do\n            av1 = av1 + v\n        end\n        for _, v in ipairs(t2) do\n\
    \            av2 = av2 + v\n        end\n        return 2 * (av1 / c1 - av2 /\
    \ c2)\n    end\nend", "   -- Your code here.\n   local sum = 0\n   for i, v in\
    \ ipairs(lst) do\n      if (v > 0) and (v % 2 == 1) then\n         sum = sum +\
    \ v^2\n      end\n   end\n   return sum\nend", "  -- YOUR CODE HERE\n  local count\
    \ = 0\n  local result = 0\n  local result1 = 0\n  for i, v in ipairs(lst) do\n\
    \    if v % 2 == 1 and v >= 0 then\n      count = count + 1\n      result = result\
    \ + (v * v)\n    end\n  end\n  if count == 0 then\n    return 0\n  end\n  result1\
    \ = result - (count * count)\n  return result1 * 2\nend", "  if #lst == 0 then\n\
    \    return 0\n  end\n  if lst[1] > 0 and lst[1] % 2 == 1 then\n    return (lst[1]\
    \ ^ 2) + double_the_difference(lst:slice(2))\n  end\n  return double_the_difference(lst:slice(2))\n\
    end", "    local sum = 0\n    for i = 1, #lst do\n        if not lst[i] then\n\
    \            sum = sum + 0\n        elseif lst[i] % 2 == 1 then\n            sum\
    \ = sum + lst[i]^2\n        end\n    end\n    return sum\nend", "  if #lst ==\
    \ 0 then\n    return 0\n  end\n  if (lst[1] > 0) and (lst[1]%2 == 1) then\n  \
    \  return math.pow(lst[1], 2) + double_the_difference(lst[2, #lst])\n  else\n\
    \    return double_the_difference(lst[2, #lst])\n  end\nend", "\tlocal sum = 0\n\
    \tfor i = 1, #lst do\n\t\tif lst[i] == math.floor(lst[i]) and lst[i] > 0 then\n\
    \t\t\tsum = sum + lst[i]^2\n\t\tend\n\tend\n\treturn sum * 2\nend", "  local sum\
    \ = 0\n  local max = 0\n  local min = math.huge\n  for i = 1, #lst do\n    local\
    \ num = lst[i]\n    if num % 2 == 1 and num > 0 then\n      sum = sum + num\n\
    \    end\n    if num > max then\n      max = num\n    end\n    if num < min then\n\
    \      min = num\n    end\n  end\n  return (max - min) * 2\nend", "  local sum\
    \ = 0\n  for _,v in ipairs(lst) do\n    if type(v) == \"number\" and v >= 0 and\
    \ v%1 == 0 then\n      sum = sum + (v%2 == 0 and v or v*v)\n    end\n  end\n \
    \ return sum\nend", "  -- Insert your code here!\n  return 0\nend", "  -- TODO:\
    \ Write your code here.\n  local odd_sum = 0\n  local even_sum = 0\n  for i, val\
    \ in ipairs(lst) do\n    if math.floor(val) == val and val > 0 then\n      if\
    \ val % 2 == 0 then\n        even_sum = even_sum + val*val\n      else\n     \
    \   odd_sum = odd_sum + val*val\n      end\n    end\n  end\n  return 2*(odd_sum\
    \ - even_sum)\nend", "\tlocal sum = 0\n\tfor _, v in ipairs(lst) do\n\t\tif v\
    \ > 0 and math.floor(v) == v then\n\t\t\tif v % 2 == 1 then\n\t\t\t\tsum = sum\
    \ + v * v\n\t\t\tend\n\t\tend\n\tend\n\treturn sum * 2\nend", "    local sum =\
    \ 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\" and (v %\
    \ 2) == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n    end\n\
    \    return sum * 2\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n  \
    \  if v >= 0 and math.floor(v) == v then\n      sum = sum + v * v\n    end\n \
    \ end\n  return sum * 2\nend", "  local total = 0\n  for i = 1, #lst do\n    if\
    \ (lst[i] % 2 == 1 and lst[i] > 0) then\n      total = total + lst[i] * lst[i]\n\
    \    end\n  end\n  return total\nend", "  local i = 0\n  local sum = 0\n  while\
    \ lst[i + 1] do\n    local a = lst[i + 1]\n    if a == math.floor(a) and a >=\
    \ 0 then\n      local b = lst[i + 2]\n      if b == math.floor(b) and b >= 0 then\n\
    \        local bigger, smaller = a, b\n        if a < b then\n          bigger,\
    \ smaller = b, a\n        end\n        sum = sum + (bigger - smaller) ^ 2\n  \
    \    end\n    end\n    i = i + 1\n  end\n  return sum\nend", "\tif #lst == 0 then\
    \ return 0 end\n\tlocal sum1 = 0\n\tlocal sum2 = 0\n\tfor _, i in ipairs(lst)\
    \ do\n\t\tif i < 0 then i = 0 end\n\t\tif math.floor(i) == i then\n\t\t\tif i\
    \ % 2 == 0 then\n\t\t\t\tsum1 = sum1 + i^2\n\t\t\telse\n\t\t\t\tsum2 = sum2 +\
    \ i^2\n\t\t\tend\n\t\tend\n\tend\n\treturn (sum1 - sum2) * 2\nend", "    local\
    \ function square(num)\n        return num * num\n    end", "    local total =\
    \ 0\n    for i = 1, #lst do\n        if lst[i] > 0 and lst[i]%2 ~= 0 then\n  \
    \          total = total + lst[i] * lst[i]\n        end\n    end\n    return total\n\
    end", "    local sos = 0\n    for i = 1, #lst do\n        local v = lst[i]\n \
    \       if math.type(v) == \"integer\" and v > 0 then\n            sos = sos +\
    \ (v ^ 2)\n        end\n    end\n    return 2 * sos\nend", "    local function\
    \ square(x)\n        return x * x\n    end\n    local function is_odd(x)\n   \
    \     return x % 2 == 1\n    end\n    local function positive_integers(x)\n  \
    \      return x > 0 and x % 1 == 0\n    end\n    local sum = 0\n    for _, v in\
    \ ipairs(lst) do\n        if positive_integers(v) then\n            if is_odd(v)\
    \ then\n                sum = sum + square(v)\n            end\n        end\n\
    \    end\n    return sum * 2\nend", "\tlocal res = 0\n\tfor _, i in ipairs(lst)\
    \ do\n\t\tif i > 0 and math.floor(i) == i then\n\t\t\tres = res + i * i\n\t\t\
    end\n\tend\n\treturn res\nend", "  return sum_of_squares_of_odds(lst) - sum_of_evens(lst)\n\
    end", "    -- REPLACE WITH YOUR CODE\n    return 0\nend", "    -- STUDENT CODE\
    \ STARTS HERE\n    if #lst==0 then\n        return 0\n    end\n    local sum_of_odds\
    \ = 0\n    for i=1,#lst do\n        if (lst[i]%2==1 and lst[i]>=0) then\n    \
    \        sum_of_odds = sum_of_odds + lst[i]^2\n        end\n    end\n    return\
    \ sum_of_odds*2\n    -- STUDENT CODE ENDS HERE\nend", "  local total = 0\n  for\
    \ _, v in ipairs(lst) do\n    if v > 0 and math.floor(v) == v then\n      total\
    \ = total + v * v\n    end\n  end\n  return total * 2\nend", "\tlocal the_sum\
    \ = 0\n\tfor _,num in ipairs(lst) do\n\t\tif num > 0 and num % 2 == 1 then\n\t\
    \t\tthe_sum = the_sum + (num * num)\n\t\tend\n\tend\n\treturn the_sum * 2\nend",
  "  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 and lst[i] > 0 then\n\
    \      sum = sum + lst[i] * lst[i]\n    end\n  end\n  return sum * 2\nend", " \
    \   return 0\nend", "    local result = 0\n    for k, v in pairs(lst) do\n   \
    \     if v % 2 == 1 and v > 0 then\n            result = result + v ^ 2\n    \
    \    end\n    end\n    return result * 2\nend", "  local sum = 0\n  for _, i in\
    \ ipairs(lst) do\n    if (i > 0) and math.floor(i) == i then\n      sum = sum\
    \ + (i * i)\n    end\n  end\n  return sum * 2\nend", "    local sum = 0\n    for\
    \ i, v in ipairs(lst) do\n        if type(v) == \"number\" and v >= 0 and v ==\
    \ math.floor(v) then\n            if v % 2 == 1 then\n                sum = sum\
    \ + v * v\n            end\n        end\n    end\n    return sum * 2\nend", " \
    \   local sum = 0\n    for _, num in ipairs(lst) do\n        if num > 0 and math.floor(num)\
    \ == num then\n            if num % 2 == 1 then\n                sum = sum + num^2\n\
    \            end\n        end\n    end\n    return sum\nend", "  local sum = 0\n\
    \  for _, number in ipairs(lst) do\n    if type(number) == \"number\" and number\
    \ == math.floor(number) and number > 0 then\n      sum = sum + number^2\n    end\n\
    \  end\n  return sum\nend", "    -- assign a variable for the difference\n   \
    \ local diff = 0\n    -- for each value in the table\n    for i, num in ipairs(lst)\
    \ do\n        -- if the number is a positive integer\n        if num > 0 and math.floor(num)\
    \ == num then\n            -- add the square of the number if it is odd\n    \
    \        if num % 2 == 1 then\n                diff = diff + num * num\n     \
    \       end\n        end\n    end\n    -- return the difference\n    return diff\n\
    end", "    if #lst == 0 then\n        return 0\n    end\n    local all = 0\n \
    \   local odd = 0\n    for i = 1, #lst do\n        local num = lst[i]\n      \
    \  if num >= 0 and num % 1 == 0 then\n            all = all + num ^ 2\n      \
    \      if num % 2 == 1 then\n                odd = odd + num ^ 2\n           \
    \ end\n        end\n    end\n    return (all - odd) * 2\nend", "\tlocal sum =\
    \ 0\n\tfor k, v in pairs(lst) do\n\t\tif math.floor(v) ~= v or v < 0 then\n\t\t\
    \tlst[k] = nil\n\t\tend\n\tend\n\tfor _, v in pairs(lst) do\n\t\tsum = sum + v\n\
    \tend\n\tlocal diff = sum - 2 * (sum // 2)\n\treturn diff * diff\nend", "    local\
    \ sum = 0\n    local sum_of_squares = 0\n    local num_of_elements = 0\n    for\
    \ i,v in ipairs(lst) do\n        if v >= 0 and math.floor(v) == v then\n     \
    \       num_of_elements = num_of_elements + 1\n            sum = sum + v\n   \
    \         if v % 2 == 1 then\n                sum_of_squares = sum_of_squares\
    \ + v * v\n            end\n        end\n    end\n    return num_of_elements ==\
    \ 0 and 0 or 2 * sum_of_squares - sum * sum\nend", "\tlocal sum = 0\n\tfor i =\
    \ 1, #lst do\n\t\tlocal v = lst[i]\n\t\tif v > 0 and math.floor(v) == v then\n\
    \t\t\tif v % 2 == 1 then\n\t\t\t\tsum = sum + v^2\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn sum * 2\nend", "   local sum = 0\n   local even_sum = 0\n   for i,v in\
    \ ipairs(lst) do\n      if (v % 2 == 0) then\n         even_sum = even_sum + v\n\
    \      else\n         sum = sum + v\n      end\n   end\n   return (sum * sum)\
    \ - (even_sum * even_sum)\nend", "  local sum_of_odds_squared = 0\n  for i, v\
    \ in ipairs(lst) do\n    if type(v) == \"number\" and v >= 0 and v % 1 == 0 then\n\
    \      if v % 2 == 1 then\n        sum_of_odds_squared = sum_of_odds_squared +\
    \ v * v\n      end\n    end\n  end\n  return sum_of_odds_squared * 2\nend", " \
    \   local squares = {0}\n    for _, n in ipairs(lst) do\n        if n % 2 == 1\
    \ and n > 0 then\n            local sq = n * n\n            table.insert(squares,\
    \ sq)\n        end\n    end\n    return (squares[1] - squares[2]) * 2\nend", " \
    \   local sum_odd_squares = 0\n    local sum_even_squares = 0\n    for _, number\
    \ in ipairs(lst) do\n        if (number % 2 == 0) and (number > 0) then\n    \
    \        sum_even_squares = sum_even_squares + number * number\n        elseif\
    \ (number % 2 == 1) and (number > 0) then\n            sum_odd_squares = sum_odd_squares\
    \ + number * number\n        end\n    end\n    return (sum_odd_squares - sum_even_squares)\
    \ * 2\nend", "    -- Square the sum of all odd numbers\n    local square_sum =\
    \ 0\n    for k,v in pairs(lst) do\n        if v % 2 == 1 and v > 0 then\n    \
    \        square_sum = square_sum + v * v\n        end\n    end\n    return square_sum\
    \ * 2\nend", "    local sum = 0\n    for k, v in pairs(lst) do\n        if type(v)\
    \ == \"number\" and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n\
    \        end\n    end\n    return sum * 2\nend", "    local sum = 0\n    for _,\
    \ v in ipairs(lst) do\n        if not (v < 0 or v % 1 ~= 0) then\n           \
    \ sum = sum + math.pow(v, 2)\n        end\n    end\n    return sum * 2\nend",
  "    local sum, sum_of_squares = 0, 0\n    for _, num in ipairs(lst) do\n      \
    \  if type(num) == \"number\" and num >= 0 and math.floor(num) == num then\n \
    \           sum = sum + num\n            sum_of_squares = sum_of_squares + num\
    \ * num\n        end\n    end\n    return 2 * (sum_of_squares - sum)\nend", " \
    \   -- YOUR CODE HERE\n    local sum = 0\n    for k, v in pairs(lst) do\n    \
    \    if type(v) == \"number\" and v % 2 == 1 and v >= 0 then\n            sum\
    \ = sum + v * v\n        end\n    end\n    return sum * 2\nend", "    local sum\
    \ = 0\n    for _,x in ipairs(lst) do\n        if math.floor(x) == x and x >= 0\
    \ then\n            sum = sum + (x%2)*x*x\n        end\n    end\n    return 2*sum\n\
    end", "  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1,\
    \ #lst do\n    if (lst[i] % 2 ~= 0) and (lst[i] > 0) then\n      sum = sum + lst[i]\
    \ * lst[i]\n    end\n  end\n  return sum * 2\nend", "    local sum = 0\n    for\
    \ _, n in ipairs(lst) do\n        if n % 2 == 1 and n > 0 then\n            sum\
    \ = sum + n * n\n        end\n    end\n    return sum * 2\nend", "  assert(type(lst)\
    \ == \"table\")\n  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v)\
    \ == \"number\" and v >= 0 and math.floor(v) == v then\n      if v % 2 == 1 then\n\
    \        sum = sum + v^2\n      end\n    end\n  end\n  return sum * 2\nend", " \
    \ local sum = 0\n  for _,i in ipairs(lst) do\n    if type(i)==\"number\" and i>=0\
    \ and i%1==0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend", " \
    \ local num_elements = 0\n  local sum_odd_numbers = 0\n  local sum_even_numbers\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] >= 0 and math.floor(lst[i]) == lst[i]\
    \ then\n      num_elements = num_elements + 1\n      if num_elements % 2 == 0\
    \ then\n        sum_even_numbers = sum_even_numbers + lst[i]\n      else\n   \
    \     sum_odd_numbers = sum_odd_numbers + lst[i]\n      end\n    end\n  end\n\
    \  return (sum_odd_numbers - sum_even_numbers) ^ 2\nend", "   local function square(x)\n\
    \      return x * x\n   end\n   local function is_odd(x)\n      return x % 2 ==\
    \ 1\n   end\n   local function is_integer(x)\n      return x % 1 == 0\n   end\n\
    \   local function is_nonnegative(x)\n      return x >= 0\n   end\n   local function\
    \ is_valid(x)\n      return is_integer(x) and is_nonnegative(x)\n   end\n   local\
    \ function double(x)\n      return 2 * x\n   end\n   local function f_sum(x, y)\n\
    \      return x + y\n   end\n   local function f_multi(x, y)\n      return x *\
    \ y\n   end\n   return lst:map(square):filter(is_odd):filter(is_valid):reduce(f_sum,\
    \ 0)\nend", "    local odd_squares = 0\n    for i = 1, #lst do\n        if (lst[i]\
    \ % 2 ~= 0) and (lst[i] >= 0) then\n            odd_squares = odd_squares + (lst[i]\
    \ ^ 2)\n        end\n    end\n    return odd_squares * 2\nend", "    local sum\
    \ = 0\n    for i, n in ipairs(lst) do\n        if n % 2 == 1 and n >= 0 then\n\
    \            sum = sum + n * n\n        end\n    end\n    return sum * 2\nend",
  "    local sum = 0\n    for _, val in ipairs(lst) do\n        if type(val) == \"\
    number\" and val % 2 == 1 and val >= 0 then\n            sum = sum + val * val\n\
    \        end\n    end\n    return sum * 2\nend", "  local sum_odd_squares = 0\n\
    \  for _, x in ipairs(lst) do\n    if x > 0 and math.floor(x) == x then\n    \
    \  if x % 2 == 1 then\n        sum_odd_squares = sum_odd_squares + x * x\n   \
    \   end\n    end\n  end\n  return sum_odd_squares * 2\nend", "    --- YOUR CODE\
    \ HERE\n    local sum = 0\n    for _, n in ipairs(lst) do\n        if n > 0 and\
    \ n % 2 == 1 then\n            sum = sum + n * n\n        end\n    end\n    return\
    \ sum * 2\nend", "  -- TODO: remove the error statement and replace with your\
    \ code\n  error(\"double_the_difference not implemented\")\nend", "    local sum\
    \ = 0\n    for _,i in ipairs(lst) do\n        if type(i) == \"number\" and i%2\
    \ == 1 and i >= 0 then\n            sum = sum + i^2\n        end\n    end\n  \
    \  return sum\nend", "  local function squared(x)\n    return x*x\n  end\n  local\
    \ function is_positive_odd_int(x)\n    return x > 0 and x % 2 == 1 and math.floor(x)\
    \ == x\n  end\n  local function sum_of_squares(x, y)\n    return squared(x) +\
    \ squared(y)\n  end\n  return lst\n    :filter(is_positive_odd_int)\n    :map(squared)\n\
    \    :reduce(sum_of_squares, 0)\nend", "    local sum = 0\n    for i = 1, #lst\
    \ do\n        if lst[i] % 2 == 1 and lst[i] > 0 then\n            sum = sum +\
    \ (lst[i] * lst[i])\n        end\n    end\n    return sum\nend", "  return sum_of_odd_squares(lst)\
    \ - sum_of_even_squares(lst)\nend", "    -- YOUR CODE HERE\n    local sum = 0\n\
    \    for _, v in ipairs(lst) do\n        if v > 0 and math.floor(v) == v then\n\
    \            if v % 2 == 1 then\n                sum = sum + v * v\n         \
    \   end\n        end\n    end\n    return sum * 2\nend", "  return sum_of_squares_of_odds(lst)\
    \ * 2\nend", "    -- FILL IN YOUR CODE HERE\nend", "    -- YOUR CODE HERE\n  \
    \  if lst == {} then\n        return 0\n    end\n    sum = 0\n    for i, v in\
    \ ipairs(lst) do\n        if (v % 2 ~= 0) and (v > 0) then\n            sum =\
    \ sum + v*v\n        end\n    end\n    return sum*2\nend", "  -- YOUR CODE HERE\n\
    \  return sum_odd_squares(lst) - sum_odd(lst)\nend", "  local sum = 0\n  for i,v\
    \ in ipairs(lst) do\n    if v > 0 and math.floor(v) == v then\n      sum = sum\
    \ + v * v\n    end\n  end\n  return sum * 2\nend", "  -- BEGIN_SOLUTION\n  local\
    \ sum = 0\n  for _, n in ipairs(lst) do\n    if is_int(n) and n >= 0 then\n  \
    \    sum = sum + (n % 2 == 0 and 2*n or n*n)\n    end\n  end\n  return sum\n \
    \ -- END_SOLUTION\nend", "    -- your code here\nend", "    local function aux(lst,\
    \ i, j)\n        if not lst[i] then\n            return 0\n        elseif lst[i]\
    \ % 2 == 1 and lst[i] > 0 then\n            return (lst[i] ^ 2) + aux(lst, i +\
    \ 1, j)\n        else\n            return aux(lst, i + 1, j)\n        end\n  \
    \  end\n    return 2 * aux(lst, 1, #lst)\nend", "  local sum = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] % 2 == 1 and lst[i] > 0 then\n      sum = sum + (lst[i]\
    \ * lst[i])\n    end\n  end\n  return sum\nend", "  return 1\nend", "    local\
    \ odd_squares = 0\n    for _, value in ipairs(lst) do\n        if value > 0 and\
    \ value % 2 == 1 then\n            odd_squares = odd_squares + value * value\n\
    \        end\n    end\n    return odd_squares * 2\nend", "  local total = 0\n\
    \  for _, v in ipairs(lst) do\n    if v >= 0 and math.floor(v) == v then\n   \
    \   total = total + v * v\n    end\n  end\n  return total * 2\nend", "    -- TODO:\
    \ implement me\n    local sum = 0\n    for _,val in ipairs(lst) do\n        if\
    \ val%2 == 1 and val > 0 then\n            sum = sum + val*val\n        end\n\
    \    end\n    return sum\nend", "    local sum = 0\n    for _, num in ipairs(lst)\
    \ do\n        if num % 2 == 1 and num >= 0 and num % 1 == 0 then\n           \
    \ sum = sum + num * num\n        end\n    end\n    return sum * 2\nend", "  --\
    \ your code here\n  local sum = 0\n  for _,v in ipairs(lst) do\n    if type(v)\
    \ == \"number\" and math.floor(v) == v and v > 0 then\n      if v % 2 == 1 then\n\
    \        sum = sum + v * v\n      end\n    end\n  end\n  return sum * 2\nend",
  "  local accum = 0\n  for _,v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v == math.floor(v) then\n      if v % 2 == 1 then\n        accum =\
    \ accum + v * v\n      end\n    end\n  end\n  return accum * 2\nend", "    local\
    \ odd_squares_sum = 0\n    for i = 1, #lst do\n        if not (lst[i] % 2 == 0\
    \ or lst[i] < 0) then\n            odd_squares_sum = odd_squares_sum + lst[i]\
    \ * lst[i]\n        end\n    end\n    return odd_squares_sum * 2\nend", "    local\
    \ my_list = {}\n    local my_odds = {}\n    local total = 0\n    for i,n in ipairs(lst)\
    \ do\n        if (n % 2 ~= 0) and (n >= 0) then\n            table.insert(my_odds,\
    \ n)\n        end\n    end\n    for i,n in ipairs(my_odds) do\n        total =\
    \ total + n * n\n    end\n    return total\nend", "  local total = 0\n  for _,\
    \ v in ipairs(lst) do\n    local i = math.floor(v)\n    if i == v and i >= 0 and\
    \ i % 2 == 1 then\n      total = total + (i * i)\n    end\n  end\n  return total\
    \ * 2\nend", "  local result = 0\n  for k,v in pairs(lst) do\n    if type(v) ==\
    \ \"number\" and v >= 0 and v % 1 == 0 then\n      if v % 2 == 1 then\n      \
    \  result = result + v*v\n      end\n    end\n  end\n  return result*2\nend",
  "  local sum_of_squares = 0\n  for _, num in ipairs(lst) do\n    if is_int(num)\
    \ and num >= 0 then\n      if is_odd(num) then\n        sum_of_squares = sum_of_squares\
    \ + (num * num)\n      end\n    end\n  end\n  return 2 * sum_of_squares\nend",
  "    local sum_of_squares = 0\n    for k, v in pairs(lst) do\n        if v % 2 ==\
    \ 1 and v > 0 then\n            sum_of_squares = sum_of_squares + v * v\n    \
    \    end\n    end\n    return sum_of_squares * 2\nend", "  local sum = 0\n  for\
    \ _, val in ipairs(lst) do\n    if val > 0 and val == math.floor(val) then\n \
    \     local odd = val % 2 == 1\n      sum = sum + (odd and val^2 or 0)\n    end\n\
    \  end\n  return sum\nend", "    return 0\nend", "\tlocal sum_of_squares = 0\n\
    \tfor _,x in ipairs(lst) do\n\t\tif type(x) == \"number\" and x >= 0 and math.floor(x)\
    \ == x then\n\t\t\tsum_of_squares = sum_of_squares + x * x\n\t\tend\n\tend\n\t\
    return sum_of_squares * 2\nend", "  if #lst == 0 then\n    return 0\n  end\n \
    \ local sum1 = 0\n  local sum2 = 0\n  for _, i in ipairs(lst) do\n    if i >=\
    \ 0 and math.floor(i) == i then\n      if i % 2 == 1 then\n        sum1 = sum1\
    \ + (i * i)\n      else\n        sum2 = sum2 + (i * i)\n      end\n    end\n \
    \ end\n  return (sum1 - sum2) * 2\nend", "   local difference = 0\n   for _, v\
    \ in ipairs(lst) do\n      if type(v) == \"number\" and v > 0 and math.floor(v)\
    \ == v then\n         difference = difference + v * v\n      end\n   end\n   return\
    \ difference * 2\nend", "  return 0\nend", "    -- You may wish to use a nested\
    \ accumulator loop.\n    -- See how sum_of_squares is implemented in utils.lua\n\
    \    -- It uses a nested accumulator loop.\n    -- You may also find that you\
    \ need to add some arguments to this\n    -- function or change the order of some\
    \ of the arguments.\nend", "    -- your code here\nend", "    local result = 0\n\
    \    for _, v in ipairs(lst) do\n        if v % 2 == 1 and v > 0 then\n      \
    \      result = result + v * v\n        end\n    end\n    return result\nend",
  "\tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tif v > 0 and v%2 == 1 then\n\t\
    \t\tsum = sum + v*v\n\t\tend\n\tend\n\treturn sum\nend", "  --# <Your code goes\
    \ here>\n  return nil\nend", "    local result = 0\n    for _, value in ipairs(lst)\
    \ do\n        if value % 2 == 1 and value >= 0 then\n            result = result\
    \ + value * value\n        end\n    end\n    return result\nend", "    local sum\
    \ = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\" and v\
    \ >= 0 and math.floor(v) == v then\n            sum = sum + v ^ 2\n        end\n\
    \    end\n    return sum * 2\nend", "  local sum = 0\n  for _, i in ipairs(lst)\
    \ do\n    local rem = i % 2\n    if i > 0 and rem == 1 then\n      sum = sum +\
    \ i^2\n    end\n  end\n  return sum\nend", "    local ret = 0\n    for _,v in\
    \ ipairs(lst) do\n        if (v % 2 == 1) and (v > 0) then\n            ret =\
    \ ret + v * v\n        end\n    end\n    return ret\nend", "    return 0\nend",
  "    local sum = 0\n    for k, v in pairs(lst) do\n        if v > 0 and math.floor(v)\
    \ == v then\n            if v % 2 == 1 then\n                sum = sum + v^2\n\
    \            end\n        end\n    end\n    return sum * 2\nend", "  local sum\
    \ = 0\n  local square = 0\n  for _, num in ipairs(lst) do\n    if num % 2 == 1\
    \ and num >= 0 then\n      sum = sum + num\n      square = square + num^2\n  \
    \  end\n  end\n  return (sum)^2 - square\nend", "  local sum = 0\n  for k, v in\
    \ pairs(lst) do\n    if type(v) == \"number\" and v % 2 == 1 and v >= 0 then\n\
    \      sum = sum + (v * v)\n    end\n  end\n  return sum * 2\nend", "  local sum\
    \ = 0\n  for i, v in ipairs(lst) do\n    if type(v) == \"number\" and v >= 0 and\
    \ v % 1 == 0 then\n      if v % 2 == 1 then\n        sum = sum + v ^ 2\n     \
    \ end\n    end\n  end\n  return sum * 2\nend", "  local total = 0\n  local min\n\
    \  local max\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      total = total + v * v\n    end\n    if min == nil or v < min then\n   \
    \   min = v\n    end\n    if max == nil or v > max then\n      max = v\n    end\n\
    \  end\n  return 2 * (max - min)\nend", "  -- Write your code here\nend", "  \
    \  local ret = 0\n    for k, v in pairs(lst) do\n        if (k % 2) ~= 0 then\n\
    \            ret = ret + (v * v)\n        end\n    end\n    return ret\nend",
  "    if table.getn(lst) == 0 then\n        return 0\n    end\n    local total =\
    \ 0\n    for i,v in ipairs(lst) do\n        if type(v) == \"number\" and math.floor(v)\
    \ == v and v > 0 then\n            total = total + v*v\n        end\n    end\n\
    \    return total*2\nend", "  local tot = 0\n  for _,v in ipairs(lst) do\n   \
    \ if v % 2 == 1 and v > 0 then\n      tot = tot + (v*v)\n    end\n  end\n  return\
    \ tot\nend", "  local sum = 0\n  local num_odd = 0\n  for k,v in pairs(lst) do\n\
    \    if v % 2 == 1 and v >= 0 then\n      sum = sum + v*v\n      num_odd = num_odd\
    \ + 1\n    end\n  end\n  if num_odd == 0 then\n    return 0\n  else\n    return\
    \ sum*2\n  end\nend", "  return 0\nend", "\tlocal l, diff = lst or {}, 0\n\tfor\
    \ i = 1, #l do\n\t\tlocal v = l[i]\n\t\tif type(v) == \"number\" and v == math.floor(v)\
    \ and v >= 0 then\n\t\t\tif v % 2 == 1 then\n\t\t\t\tdiff = diff + v * v\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn diff * 2\nend", "\tlocal x = 0\n\tlocal y = 0\n\
    \tlocal i = 1\n\twhile i <= #lst do\n\t\tlocal n = lst[i]\n\t\tif type(n) == \"\
    number\" and n == math.floor(n) and n >= 0 then\n\t\t\tif n % 2 == 0 then\n\t\t\
    \t\tx = x + n\n\t\t\telse\n\t\t\t\ty = y + n\n\t\t\tend\n\t\tend\n\t\ti = i +\
    \ 1\n\tend\n\treturn 2 * (x - y)\nend", "  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if v > 0 and (v % 2 == 1) then\n      sum = sum + v * v\n    end\n \
    \ end\n  return sum * 2\nend", "\treturn sum_of_squares(lst) - square_of_sum(lst)\n\
    end", "    return 0\nend", "   local sum = 0\n   for i = 1, #lst do\n      local\
    \ x = lst[i]\n      if x >= 0 and math.floor(x) == x then\n         if x % 2 ==\
    \ 1 then\n            sum = sum + x * x\n         end\n      end\n   end\n   return\
    \ sum * 2\nend", "    -- Return the sum of the squares of the odd numbers in the\
    \ given list.\n    local function sum_of_odd_squares(lst)\n        local sum =\
    \ 0\n        for _, v in ipairs(lst) do\n            if v % 2 == 1 and v >= 0\
    \ and math.floor(v) == v then\n                sum = sum + v * v\n           \
    \ end\n        end\n        return sum\n    end", "    if #lst == 0 then\n   \
    \     return 0\n    end\n    local left, right = 0, 0\n    for _, num in ipairs(lst)\
    \ do\n        if math.floor(num) == num and num >= 0 then\n            left =\
    \ left + math.pow(num, 2)\n        end\n    end\n    for _, num in ipairs(lst)\
    \ do\n        if math.floor(num) == num and num >= 0 and num % 2 == 1 then\n \
    \           right = right + math.pow(num, 2)\n        end\n    end\n    return\
    \ 2 * right - left\nend", "  local len = #lst\n  if len == 0 then\n    return\
    \ 0\n  end\n  local min = lst[1]\n  local max = lst[1]\n  for i = 2, len do\n\
    \    local x = lst[i]\n    if x < min then\n      min = x\n    elseif x > max\
    \ then\n      max = x\n    end\n  end\n  return (max - min) * 2\nend", "  local\
    \ sum = 0\n  for _,n in ipairs(lst) do\n    if math.floor(n) ~= n or n < 0 then\n\
    \      -- skip non-integers and negative numbers\n    elseif n % 2 == 1 then\n\
    \      sum = sum + n*n\n    end\n  end\n  return sum * 2\nend", "    local answer\
    \ = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and v > 0 then\n\
    \            answer = answer + v * v\n        end\n    end\n    return answer\n\
    end", "  local sum = 0\n  for i,v in ipairs(lst) do\n    if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend", "  local sum = 0\n  for i, v in ipairs(lst) do\n    if v >= 0\
    \ and v % 2 == 1 then\n      sum = sum + (v * v)\n    end\n  end\n  return sum\
    \ * 2\nend", "    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2\
    \ == 1 and lst[i] >= 0 then\n            sum = sum + lst[i] ^ 2\n        end\n\
    \    end\n    return sum * 2\nend", "    local sum = 0\n    for _,x in ipairs(lst)\
    \ do\n        if x == math.floor(x) and x > 0 then\n            if x % 2 == 1\
    \ then\n                sum = sum + x * x\n            end\n        end\n    end\n\
    \    return sum * 2\nend", "  local sum_odd_squares = 0\n  for i, v in ipairs(lst)\
    \ do\n    if (v % 2 == 1) and (v > 0) then\n      sum_odd_squares = sum_odd_squares\
    \ + v^2\n    end\n  end\n  return sum_odd_squares * 2\nend", "  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n      sum = sum\
    \ + (v * v)\n    end\n  end\n  return sum * 2\nend", "    if #lst == 0 then\n\
    \        return 0\n    end\n    local largest = lst[1]\n    local smallest = lst[1]\n\
    \    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest\
    \ = lst[i]\n        end\n        if lst[i] > largest then\n            largest\
    \ = lst[i]\n        end\n    end\n    return (largest - smallest) * 2\nend", " \
    \  -- TODO: your code here\nend", "    if #lst == 0 then\n        return 0\n \
    \   end\n    local sum = 0\n    for _, num in ipairs(lst) do\n        local floored\
    \ = math.floor(num)\n        if floored == num and floored > 0 and floored % 2\
    \ == 1 then\n            sum = sum + floored ^ 2\n        end\n    end\n    return\
    \ sum * 2\nend", "\terror \"Not implemented\"\nend", "    local result = 0\n \
    \   for i = 1, #lst do\n        local item = lst[i]\n        if type(item) ==\
    \ \"number\" and item >= 0 and item % 1 == 0 then\n            if item % 2 ==\
    \ 1 then\n                result = result + item * item\n            end\n   \
    \     end\n    end\n    return result * 2\nend", "    local sum = 0\n    for _,\
    \ v in ipairs(lst) do\n        if type(v) == \"number\" and v > 0 and v % 2 ==\
    \ 1 then\n            sum = sum + v^2\n        end\n    end\n    return sum *\
    \ 2\nend", "  -- code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
