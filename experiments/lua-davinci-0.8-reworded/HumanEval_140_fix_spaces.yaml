name: HumanEval_140_fix_spaces
language: lua
prompt: "-- Given a string text, replace all spaces in it with underscores, \n-- and\
  \ if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
  \ spaces with - \n-- >>> fix_spaces(' Example')\n-- 'Example'\n-- >>> fix_spaces('\
  \ Example 1')\n-- 'Example_1'\n-- >>> fix_spaces(' Example 2')\n-- '_Example_2'\n\
  -- >>> fix_spaces(' Example 3')\n-- '_Example-3'\nlocal function fix_spaces(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
  \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
  \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
  \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
  \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\t-- replace all spaces with underscores\n\ttext = text:gsub(' ', '_')\n\
    \t-- replace all consecutive spaces with '-'\n\treturn text:gsub('_+', '-')\n\
    end", "  if not text then return end\n  text = text:gsub('^%s+', '')\n  if text:match('%s%s')\
    \ then\n    text = text:gsub('%s+', '-')\n  else\n    text = text:gsub('%s', '_')\n\
    \  end\n  return text\nend", "\treturn text:gsub('^%s*',''):gsub('%s+', '_'):gsub('%-%s*',\
    \ '_'):gsub('_+', function(s)\n\t\treturn (#s > 2) and '-' or '_'\n\tend)\nend",
  "  local result = text:gsub('  ', '-')\n  result = result:gsub(' ', '_')\n  return\
    \ result\nend", "    local spaces = ''\n    local fix_spaces = text:gsub(' ',\
    \ function(c)\n        if spaces == '  ' then\n            spaces = ''\n     \
    \       return '-'\n        else\n            spaces = spaces .. c\n         \
    \   return '_'\n        end\n    end)\n    return fix_spaces\nend", "    local\
    \ res = string.gsub(text, '  +', '-')\n    res = string.gsub(res, ' ', '_')\n\
    \    return res\nend", "    return (text:gsub('^%s+', ''):gsub('%s+', '_'):gsub('^_+',\
    \ ''):gsub('%s+', '-'):gsub('\\n', ' '))\nend", "    return text:gsub('%s', function(s)\
    \ return s == ' ' and '_' or '-' end)\nend", "\treturn (string.gsub(text, '%s+',\
    \ ' '):gsub('%s+', '_'):gsub('-', '_'))\nend", "    local pattern = '%s+'\n  \
    \  local replace = '-'\n    if text:match('%s') then\n        if text:match('^%s+')\
    \ then\n            text = text:gsub('^%s+', '')\n        end\n        if text:match('%s+$')\
    \ then\n            text = text:gsub('%s+$', '')\n        end\n        if not\
    \ text:match('%s+') then\n            text = text:gsub('%s', '_')\n        else\n\
    \            text = text:gsub(pattern, replace)\n        end\n    end\n    return\
    \ text\nend", "\treturn string.gsub(text, \"([ ]+)\", function(s)\n\t\treturn\
    \ string.len(s) > 2 and \"_\" or \"-\"\n\tend)\nend", "\treturn text:gsub('%s',\
    \ '_'):gsub('%s%s', '-'):gsub('^%s', '')\nend", "\tif type(text) ~= 'string' then\n\
    \t\terror(\"Error: fix_spaces requires string argument\")\n\tend\n\treturn text:gsub('%s%s+',\
    \ '-'):gsub('%s', '_')\nend", "    return string.gsub(text, '  +', '-')\n    \
    \          :gsub(' ', '_')\nend", "  if text == nil then\n    return nil\n  end\n\
    \  local out = string.gsub(text, '^%s*', '')\n  out = string.gsub(out, '%s*$',\
    \ '')\n  out = string.gsub(out, '%s+', '_')\n  out = string.gsub(out, '_+', '-')\n\
    \  return out\nend", "    local underscore = '_'\n    local dash = '-'\n    local\
    \ space = ' '\n    local new_text = ''\n    local count = 0\n    for i = 1, #text\
    \ do\n        local current_char = text:sub(i, i)\n        if i == 1 and current_char\
    \ == space then\n            -- Keep the starting space if it's the only space\n\
    \            if #text == 1 then\n                new_text = current_char\n   \
    \         end\n        elseif current_char == space then\n            count =\
    \ count + 1\n            if count > 2 then\n                -- Replace with dash\
    \ if there are more than 2 consecutive spaces\n                new_text = new_text\
    \ .. dash\n            else\n                -- Replace with underscore otherwise\n\
    \                new_text = new_text .. underscore\n            end\n        else\n\
    \            count = 0\n            new_text = new_text .. current_char\n    \
    \    end\n    end\n    return new_text\nend", "\treturn gsub(gsub(text, \" \"\
    , \"_\"), \"  +\", \"-\")\nend", "    text = text:gsub(' ', '_')\n    text = text:gsub('_+',\
    \ '-')\n    return text\nend", "  return (string.gsub(text, \"^ +\", \"\")\n \
    \         :gsub(\" +\", \"_\")\n          :gsub(\"(%s%s+)\", \"-\"))\nend", "\t\
    text = text:gsub('%s+', '_')\n\ttext = text:gsub('__+', '-')\n\treturn text\n\
    end", "    return string.gsub(text, \"^%s*\", \"\")\nend", "    local result =\
    \ string.gsub(text, ' ', '_')\n    result = string.gsub(result, '_+', '-')\n \
    \   return result\nend", "    if text:match(\"^%s\") then\n        text = \"_\"\
    \ .. text\n    end\n    if text:match(\"%s$\") then\n        text = text .. \"\
    _\"\n    end\n    text = text:gsub(\"%s%s\", \"-\")\n    text = text:gsub(\"%s\"\
    , \"_\")\n    return text\nend", "    local str = string.gsub(text, ' ', '_')\n\
    \    return string.gsub(str, '_+', '-')\nend", "    text = text:gsub('^%s+', '')\n\
    \    text = text:gsub('%s+$', '')\n    text = text:gsub('%s%s', '_')\n    text\
    \ = text:gsub('%s+', '-')\n    return text\nend", "  text = text:gsub('^%s', '')\n\
    \  text = text:gsub('%s', '_')\n  text = text:gsub('_+', '-')\n  return text\n\
    end", "    local fixed = text:gsub('%s+', '-')\n    fixed = fixed:gsub('^%s',\
    \ '')\n    fixed = fixed:gsub('%s$', '')\n    fixed = fixed:gsub('%s', '_')\n\
    \    return fixed\nend", "    return string.gsub(text, \" {2,}\", \"-\")\nend",
  "\ttext = text:gsub('%s', '_')\n\treturn text:gsub('_+', '-')\nend", "    local\
    \ result = \"\"\n    local prev_is_space = false\n    local two_or_more_spaces\
    \ = false\n    for c in string.gmatch(text, \".\") do\n        if c ~= \" \" then\n\
    \            result = result .. c\n            two_or_more_spaces = false\n  \
    \          prev_is_space = false\n        else\n            if not prev_is_space\
    \ then\n                result = result .. \"_\"\n                prev_is_space\
    \ = true\n            else\n                if not two_or_more_spaces then\n \
    \                   result = result .. \"-\"\n                    two_or_more_spaces\
    \ = true\n                end\n            end\n        end\n    end\n    return\
    \ result\nend", "    if type(text) ~= 'string' then\n        error('bad argument\
    \ #1 to \"fix_spaces\" (string expected, got ' .. type(text) .. ')', 2)\n    end\n\
    \    return (text:gsub('%s', '_'):gsub('%s%s%s', '-')):gsub('^%s', '')\nend",
  "\tif text == nil then\n\t\treturn nil\n\tend\n\ttext = string.gsub(text, '^%s+',\
    \ '')\n\ttext = string.gsub(text, '%s+$', '')\n\ttext = string.gsub(text, '%s',\
    \ '_')\n\ttext = string.gsub(text, '_-', '-')\n\treturn text\nend", "    -- replace\
    \ ' ' with '_'\n    text = string.gsub(text, ' ', '_')\n    -- replace '_' with\
    \ '-' if there are more than 2 consecutive\n    text = string.gsub(text, '_+',\
    \ '-')\n    return text\nend", "    text = text:gsub('%s%s', '-'):gsub('%s', '_')\n\
    \    return text\nend", "    local function clean_1(c)\n        if c == ' ' then\n\
    \            return '_'\n        else\n            return c\n        end\n   \
    \ end\n    local function clean_2(c1, c2)\n        if c1 == ' ' and c2 == ' '\
    \ then\n            return '-'\n        else\n            return c1\n        end\n\
    \    end\n    text = text:gsub('%s', clean_1)\n    text = text:gsub('(%s)(%s)',\
    \ clean_2)\n    return text\nend", "    return text:gsub('[%s]+', function(ws)\n\
    \        if #ws > 2 then\n            return '-'\n        else\n            return\
    \ '_'\n        end\n    end)\nend", "\treturn text:gsub(' ?%s(%s*)', '_%1'):gsub('_%s+',\
    \ '-')\nend", "\treturn text:gsub('  +','-')\n\t\t:gsub('^ ','')\n\t\t:gsub('\
    \ $','')\n\t\t:gsub(' ','_')\nend", "    return string.gsub(text, ' (.-) ', function(s)\n\
    \        if string.len(s) >= 2 then\n            return '-'\n        else\n  \
    \          return '_'\n        end\n    end)\nend", "    text = text:gsub('  ',\
    \ '-'):gsub(' ', '_')\n    return text\nend", "    local spaces = {\" \",\" \"\
    ,\" \"}\n    local underscores = {\"_\",\"_\",\"_\"}\n    local hyphens = {\"\
    -\",\"-\",\"-\"}\n    return text:gsub(\" \", \"_\"):gsub(\"%s{2,}\",table.concat(spaces)):gsub(table.concat(spaces),table.concat(underscores)):gsub(table.concat(underscores),table.concat(hyphens))\n\
    end", "    return (text:gsub(' +', '-')):gsub(' ', '_')\nend", "    --local text\
    \ = text:gsub('%s+', '-')\n    --text = text:gsub('^%s', '')\n    --text = text:gsub('%s$',\
    \ '')\n    return text:gsub('%s%s+', '-'):gsub('^%s', ''):gsub('%s$', ''):gsub('\
    \ ', '_')\nend", "  text = text:gsub(' ', '_')\n  return text:gsub('_+', '-')\n\
    end", "  -- Remove leading and trailing spaces\n  local text = text:match(\"^%s*(.-)%s*$\"\
    )\n  -- Replace all consecutive spaces with underscores\n  text = text:gsub(\"\
    %s+\", \"_\")\n  -- Replace underscores with a dash if it has more than 2 consecutive\
    \ spaces\n  text = text:gsub(\"_+\", \"-\")\n  return text\nend", "  -- TODO\n\
    \  local newtext = string.gsub(text, \"%s\", \"_\")\n  newtext = string.gsub(newtext,\
    \ \"__\", \"_\")\n  newtext = string.gsub(newtext, \"__\", \"-\")\n  return newtext\n\
    end", "\tif type(text) ~= 'string' then\n\t\treturn ''\n\tend\n\treturn text:gsub('\
    \  ', '-'):gsub(' ', '_')\nend", "    return string.gsub(text, \"  +\", \"-\"\
    ):gsub(\" \", \"_\")\nend", "    return string.gsub(text,'%s+','_')\nend", " \
    \   text = string.gsub(text, '^%s+', '')\n    text = string.gsub(text, '%s+$',\
    \ '')\n    text = string.gsub(text, '%s+', '_')\n    text = string.gsub(text,\
    \ '_+', '-')\n    return text\nend", "  text = string.gsub(text, ' ', '_')\n \
    \ text = string.gsub(text, '_+', '-')\n  return text\nend", "    return string.gsub(text,\
    \ ' ', '_')\nend", "    return rex.gsub(text, ' {2,}', '-'):gsub(' ', '_')\nend",
  "    -- fill in code\n    return text\nend", "    text = utils.strip(text)\n   \
    \ text = text:gsub('%s', '_')\n    text = text:gsub('%s+', '-')\n    return text\n\
    end", "    text = text:gsub('  +', ' -')\n    text = text:gsub(' ', '_')\n   \
    \ return text\nend", "    return gsub(text, '%s%s+', '-')\nend", "    return string.gsub(text,\
    \ '%s+', function(s)\n        if #s > 2 then\n            return '-'\n       \
    \ else\n            return '_'\n        end\n    end)\nend", "    local pattern\
    \ = '%s%s+'\n    local replacement = '-'\n    local result = text:gsub(pattern,\
    \ replacement)\n    return result\nend", "    local s = text:gsub('%s','_')\n\
    \    s = s:gsub('_+','-')\n    s = s:gsub('^-','_')\n    return s\nend", "   \
    \ local res = string.gsub(text, \" \", \"_\")\n    res = string.gsub(res, \"_+\"\
    , \"-\")\n    return res\nend", "  return text:gsub('  +', '-'):gsub(' ', '_')\n\
    end", "    return text:gsub('[ \\t]+', function(s)\n        if #s == 1 then\n\
    \            return '_'\n        else\n            return '-'\n        end\n \
    \   end)\nend", "    if type(text) ~= 'string' then\n        return text\n   \
    \ end\n    return text:gsub('%s', '_'):gsub('_+', '-')\nend", "    if not text\
    \ then return nil end\n    return text:gsub(' ', '_'):gsub('_+', '-')\nend", " \
    \   -- clean start\n    text = text:gsub('^%s+', '')\n    -- clean end\n    text\
    \ = text:gsub('%s+$', '')\n    -- replace multiple spaces with one\n    text =\
    \ text:gsub('%s+', ' ')\n    -- replace spaces with underscores\n    text = text:gsub('\
    \ ', '_')\n    -- replace more than 2 consecutive spaces with -\n    text = text:gsub('_+',\
    \ '-')\n    return text\nend", "    return text:gsub('%s+', '-')\nend", "\ttext\
    \ = text:gsub(' +', '_')\n\ttext = text:gsub('_+', '-')\n\ttext = text:gsub('^-',\
    \ '')\n\treturn text\nend", "    local m = text:gsub('%s+', '-')\n    return m:gsub('(%s)',\
    \ '_')\nend", "    -- TODO \n    -- \u8FD9\u91CC\u53EF\u4EE5\u7B80\u5355\u7684\
    \u7528string.gsub(text, ' ', '_')\u66FF\u6362\u6240\u6709\u7A7A\u683C\u3002\n\
    \    -- \u4F46\u662F\u8FD9\u91CC\u8FD8\u5305\u542B\u7740\u8FDE\u7EED\u7684\u7A7A\
    \u683C\uFF0C\u8FD9\u91CC\u53EF\u4EE5\u7528([ ]+)\u505A\u4E00\u4E2A\u6355\u83B7\
    \uFF0C\n    -- \u6355\u83B7\u7B2C\u4E00\u4E2A\u7A7A\u683C\u540E\u9762\u6240\u6709\
    \u8FDE\u7EED\u7684\u7A7A\u683C\uFF0C\u7136\u540E\u5728\u66FF\u6362\u5B57\u7B26\
    \u4E32\u91CC\u9762\u52A0\u4E0A\n    -- %1\uFF0C\u8FD9\u6837\uFF0C\u539F\u672C\u5E94\
    \u8BE5\u88AB\u66FF\u6362\u7684\u8FDE\u7EED\u7A7A\u683C\u4E5F\u88AB\u66FF\u6362\
    \u4E86\u3002\n    return text:gsub(' ', '_'):gsub('([ ]+)', '-')\nend", "    return\
    \ text:gsub('^%s+', ''):gsub('%s+', '_'):gsub('_%s+', '-'):gsub('%s+', '_')\n\
    end", "    return text:gsub(' ', '_'):gsub('%-%-+', '-'):gsub('_+', '_')\nend",
  "  local r = {}\n  local i = 1\n  local j = 1\n  local k = 1\n  local l = #text\n\
    \  local n = 0\n  for m = 1, l do\n    if text:sub(m, m) == ' ' then\n      n\
    \ = n + 1\n      if n == 1 then\n        r[i] = text:sub(j, m - 1)\n        i\
    \ = i + 1\n      end\n      if n == 2 then\n        r[i] = '_'\n        i = i\
    \ + 1\n      end\n      if n > 2 then\n        r[i] = '-'\n        i = i + 1\n\
    \      end\n      j = m + 1\n    else\n      n = 0\n    end\n  end\n  r[i] = text:sub(j,\
    \ l)\n  return table.concat(r)\nend", "    local found\n    repeat\n        text,\
    \ found = string.gsub(text, '  ', ' ')\n    until found == 0\n    text = string.gsub(text,\
    \ ' ', '_')\n    text = string.gsub(text, ' ', '-')\n    return text\nend", "\t\
    if type(text) ~= 'string' then\n\t\treturn text\n\tend\n\ttext = text:gsub('_',\
    \ '%%_')\n\ttext = text:gsub('%%', '%%%%')\n\ttext = text:gsub(' ', '_')\n\treturn\
    \ text:gsub('_+', '-')\nend", "\treturn text:gsub('%s%s+', '-'):gsub('%s', '_')\n\
    end", "  return (string.gsub(text, \" \", \"_\"))\nend", "    if not text then\
    \ return text end\n    return text:gsub(' ', '_'):gsub('_+', '-')\nend", "\tlocal\
    \ new_text = text:gsub(' +', '_')\n\tnew_text = new_text:gsub('_+', '-')\n\treturn\
    \ new_text\nend", "  text = string.gsub(text, '^ +', '')\n  text = string.gsub(text,\
    \ ' +$', '')\n  text = string.gsub(text, '  +', '-')\n  text = string.gsub(text,\
    \ ' ', '_')\n  return text\nend", "  local spaces = false\n  local last_space\
    \ = false\n  return (text:gsub('%s', function(s)\n    local s = s:gsub('%s', '_')\n\
    \    local s = s:gsub('__', '-')\n    if last_space then\n      last_space = false\n\
    \      return s\n    else\n      last_space = true\n      return '_' .. s\n  \
    \  end\n  end))\nend", "  text = gsub(text, '^%s+', '')\n  text = gsub(text, '%s+$',\
    \ '')\n  text = gsub(text, '%s+', '_')\n  text = gsub(text, '_+', '-')\n  return\
    \ text\nend", "\tif text == nil then\n\t\treturn text\n\tend\n\t-- Replace spaces\
    \ with underscore\n\ttext = text:gsub(' ', '_')\n\t-- Replace multiple spaces\
    \ with dash\n\ttext = text:gsub('_+', '-')\n\t-- Remove leading spaces\n\ttext\
    \ = text:gsub('^%-', '')\n\treturn text\nend", "    local s = string.gsub(text,\
    \ ' +', '_')\n    s = string.gsub(s, '_+', '-')\n    return s\nend", "    if text\
    \ == nil then\n        return ''\n    end\n    text = string.gsub(text, '   ',\
    \ ' - ')\n    text = string.gsub(text, '  ', ' _ ')\n    text = string.gsub(text,\
    \ ' ', '_')\n    return text\nend", "    if text:match('^%s+') then\n        text\
    \ = '_' .. text\n    end\n    if text:match('%s%s+') then\n        text = text:gsub('%s+',\
    \ '-')\n    end\n    return text:gsub('%s', '_')\nend", "    return text:gsub('%s+',\
    \ function(x) return #x > 2 and '-' or '_' end)\nend", "    local s = string.gsub(text,\
    \ \" \", \"_\")\n    return string.gsub(s, \"_{2,}\", \"-\")\nend", "    return\
    \ (text:gsub('  +', '-'):gsub(' ', '_'))\nend", "  if text == '' then return ''\
    \ end\n  local reg = ' +'\n  local space = '_'\n  local mulspace = '-'\n  local\
    \ i = string.find(text, reg)\n  if i == nil then return text end\n  if i == 1\
    \ then \n    if i + 1 == string.len(text) then\n      return space\n    else\n\
    \      local j = string.find(text, reg, i + 1)\n      if j == nil then\n     \
    \   return space .. fix_spaces(string.sub(text, i + 1))\n      else\n        if\
    \ j == i + 1 then\n          return mulspace .. fix_spaces(string.sub(text, j\
    \ + 1))\n        else\n          return space .. fix_spaces(string.sub(text, i\
    \ + 1))\n        end\n      end\n    end\n  else\n    local j = string.find(text,\
    \ reg, i + 1)\n    if j == nil then\n      return string.sub(text, 1, i - 1) ..\
    \ space .. fix_spaces(string.sub(text, i + 1))\n    else\n      if j == i + 1\
    \ then\n        return string.sub(text, 1, i - 1) .. mulspace .. fix_spaces(string.sub(text,\
    \ j + 1))\n      else\n        return string.sub(text, 1, i - 1) .. space .. fix_spaces(string.sub(text,\
    \ i + 1))\n      end\n    end\n  end\nend", "    return string.gsub(text, '  +',\
    \ '-'):gsub(' ', '_')\nend", "    local single_space = ' '\n    local underscore\
    \ = '_'\n    local double_space = '  '\n    local dashed_underscore = '-_'\n \
    \   local stripped_text = string.strip(text)\n    stripped_text = string.gsub(stripped_text,\
    \ single_space, underscore)\n    stripped_text = string.gsub(stripped_text, double_space,\
    \ dashed_underscore)\n    return stripped_text\nend", "    if not text then return\
    \ end\n    local nbsp = text:find(\"  \")\n    if nbsp then\n        return \"\
    -\"..fix_spaces(text:gsub(\"  \", \" \"))\n    else\n        return text:gsub(\"\
    \ \", \"_\")\n    end\nend", "    return text:gsub('^%s+', ''):gsub(' +','_'):gsub('_+','-')\n\
    end", "    return text:gsub('([^ ])', '%1'):gsub(' *', '_'):gsub('_+', '-')\n\
    end", "    local f = text:gsub('  ', '-'):gsub('  ', '-')\n    return f:gsub('\
    \ ', '_')\nend", "    -- replace all spaces in it with underscores\n    text =\
    \ gsub(text, ' ', '_')\n    -- if a string has more than 2 consecutive spaces,\
    \ \n    -- then replace all consecutive spaces with - \n    text = gsub(text,\
    \ '__+', '-')\n    return text\nend", "    -- Checks if the given text has more\
    \ than 2 consecutive spaces, \n    -- and if so, replaces all consecutive spaces\
    \ with - \n    -- >>> fix_spaces(' Example 1')\n    -- ' Example 1'\n    -- >>>\
    \ fix_spaces(' Example 2')\n    -- '  Example 2'\n    -- >>> fix_spaces(' Example\
    \ 3')\n    -- '  Example 3'\n    local function replace_consecutive_spaces(text)\n\
    \        return string.gsub(text, \"  +\", \" -\")\n    end", "    text = text:gsub('\
    \ ', '_')\n    text = text:gsub('_+', '-')\n    return text\nend", "\treturn string.gsub(text,\
    \ \" \", \"_\")\nend", "  -- Replace consecutive spaces with a single underscore.\n\
    \  text = string.gsub(text, \"%s+\", '_')\n  -- Replace remaining single spaces\
    \ with a single dash.\n  text = string.gsub(text, \" \", '-')\n  return text\n\
    end", "\tlocal newtext = text:gsub(' ', '_')\n\tnewtext = newtext:gsub('_+', '_')\n\
    \tnewtext = newtext:gsub('_', '-')\n\treturn newtext\nend", "    return (text:gsub('%s',\
    \ '_'):gsub('_+', '-'))\nend", "    local text = text:gsub('  +', '-')\n    return\
    \ text:gsub(' ', '_')\nend", "  text = text:gsub('%s+', '-')\n  text = text:gsub('%s+',\
    \ '_')\n  text = text:gsub('^%s+', '')\n  return text\nend", "    return text:gsub('(%s)%s%s+',\
    \ '%1-'):gsub('(%s)%s', '%1_')\nend", "  local a,b,c,d,e\n  a = string.gsub(text,\
    \ '  ', ' ')\n  b = string.gsub(a, ' ', '_')\n  c = string.gsub(b, '__', ' ')\n\
    \  d = string.gsub(c, ' ', '-')\n  e = string.gsub(d, '_-_', '-')\n  return e\n\
    end", "  local function fixed(c)\n    if c == ' ' then return '_' end\n    if\
    \ c == '-' then return ' ' end\n    return c\n  end\n  local result = text:gsub('\
    \  *', '  '):gsub(' ', '_'):gsub('%-', '  ')\n  return result:gsub('.', fixed)\n\
    end", "    local i = 1\n    local max = #text\n    local space_count = 0\n   \
    \ local result = {}\n    while i <= max do\n        local char = text:sub(i,i)\n\
    \        if char == ' ' then\n            if space_count > 1 then\n          \
    \      table.insert(result, '-')\n            else\n                table.insert(result,\
    \ '_')\n            end\n            space_count = space_count + 1\n        else\n\
    \            table.insert(result, char)\n            space_count = 0\n       \
    \ end\n        i = i + 1\n    end\n    return table.concat(result)\nend", "  \
    \  if type(text) ~= 'string' then return text end\n    local no_double_space =\
    \ text:gsub('  ', ' ')\n    return no_double_space:gsub(' ', '_'):gsub(' ', '-')\n\
    end", "\treturn text:gsub('%s', '_'):gsub('_+', '-')\nend", "  -- YOUR CODE HERE\n\
    \  -- return nil\nend", "\tlocal a = text:gsub('  +', ' ')\n\tlocal b = a:gsub('\
    \ ', '_')\n\tlocal c = b:gsub(' _', ' ')\n\tlocal d = c:gsub(' _', '-')\n\treturn\
    \ d\nend", "    return text:gsub('[ ]+', function(s)\n        return (#s > 2)\
    \ and '-' or '_'\n    end)\nend", "  local no_s = text:gsub(' ', '_')\n  return\
    \ no_s:gsub('_+', '-')\nend", "    local repl_text = text\n    repl_text = repl_text:gsub('^%s',\
    \ '')\n    repl_text = repl_text:gsub('%s', '_')\n    repl_text = repl_text:gsub('%s+',\
    \ '-')\n    return repl_text\nend", "\ttext = text:gsub(' ', '_')\n\ttext = text:gsub('%s+',\
    \ '-')\n\treturn text\nend", "    if type(text) ~= 'string' then\n        return\
    \ text\n    end\n    return text:gsub(' +', '-')\nend", "\ttext = text:gsub('^%s+',\
    \ '')\n\ttext = text:gsub('%s+$', '')\n\ttext = text:gsub('%s+', '_')\n\ttext\
    \ = text:gsub('_+', '-')\n\treturn text\nend", "\treturn text:gsub('%s+', '-'):gsub('^-',\
    \ ''):gsub('-$', ''):gsub('%s', '_')\nend", "    text = text:gsub('^ ', '') --\
    \ remove leading space\n    if string.find(text, '  ') then\n        text = text:gsub('\
    \  ', '-')\n    else\n        text = text:gsub(' ', '_')\n    end\n    return\
    \ text\nend", "    return (text:gsub('%s', '_'):gsub('_+', '-'))\nend", "  return\
    \ text:gsub(' ', '_'):gsub('_+', '-')\nend", "    -- gets rid of spaces at the\
    \ beginning and end, and replaces spaces with underscores\n    text = string.gsub(text,\
    \ \"^%s+\", \"\")\n    text = string.gsub(text, \"%s+$\", \"\")\n    text = string.gsub(text,\
    \ \"%s+\", \"_\")\n    -- replaces more than two consecutive underscores with\
    \ -\n    text = string.gsub(text, \"_+\", \"-\")\n    return text\nend", "   \
    \ -- TODO\n    local regex = [[\\s+]]\n    local replacement = '_'\n    if text:find(regex)\
    \ ~= nil then\n        if text:find(regex .. regex) ~= nil then\n            replacement\
    \ = '-'\n        end\n        text = text:gsub(regex, replacement)\n    end\n\
    \    return text\nend", "\treturn text:gsub('^ +', ''):gsub(' +', '_'):gsub('_+',\
    \ '-')\nend", "    return text:gsub('  ','-'):gsub(' ','_')\nend", "  local prev_space\
    \ = false\n  local count = 0\n  local result = \"\"\n  for i = 1, #text do\n \
    \   local c = text:sub(i, i)\n    if (c == \" \") then\n      prev_space = true\n\
    \      count = count + 1\n    else\n      if prev_space then\n        prev_space\
    \ = false\n        if count > 2 then\n          result = result .. \"-\"\n   \
    \     else\n          for j = 1, count do\n            result = result .. \"_\"\
    \n          end\n        end\n        count = 0\n      end\n      result = result\
    \ .. c\n    end\n  end\n  if count > 2 then\n    result = result .. \"-\"\n  else\n\
    \    for j = 1, count do\n      result = result .. \"_\"\n    end\n  end\n  return\
    \ result\nend", "    return string.gsub(text, '%s+', '_')\nend", "    text = text:gsub('%s$',\
    \ '')\n    text = text:gsub('^%s', '')\n    text = text:gsub(' ', '_')\n    text\
    \ = text:gsub('%s%s', '-')\n    return text\nend", "    text = text:gsub(' ',\
    \ '_')\n    text = text:gsub('_+', '-')\n    return text\nend", "  if text then\n\
    \    text = text:gsub(' ', '_')\n    text = text:gsub('_+', '_')\n    text = text:gsub('^_',\
    \ '')\n    text = text:gsub('_$', '')\n    text = text:gsub('_-_', '-')\n    text\
    \ = text:gsub('_+', '-')\n  end\n  return text\nend", "\treturn text:gsub('%s%s',\
    \ '-'):gsub('%s', '_')\nend", "  -- Remove all extra spaces at beginning and end\
    \ of string\n  text = string.gsub(text, \"^%s+\", \"\")\n  text = string.gsub(text,\
    \ \"%s+$\", \"\")\n  -- Remove all double spaces and replace with a single space\n\
    \  text = string.gsub(text, \"%s%s+\", \" \")\n  -- Replace all spaces with _\n\
    \  text = string.gsub(text, \" \", \"_\")\n  -- If a string has more than 2 consecutive\
    \ spaces, then replace all consecutive spaces with -\n  text = string.gsub(text,\
    \ \"_+\", \"-\")\n  return text\nend", "  if not text then return '' end\n  local\
    \ result = text:gsub('%s+', ' ')\n  result = result:gsub('%s', '_')\n  result\
    \ = result:gsub('_+', '_')\n  result = result:gsub('^_', '')\n  result = result:gsub('_$',\
    \ '')\n  return result\nend", "    return text:gsub('%s*([^ ])%s*', '%1'):gsub('%s+',\
    \ '_')\nend", "    local fixed = text:gsub(' +', '_')\n    return fixed:gsub('_+',\
    \ '-')\nend", "    text = text:gsub('  ', '-'):gsub(' ', '_')\n    return text\n\
    end", "\tassert(type(text) == 'string')\n\ttext = text:gsub('^%s+', '')\n\ttext\
    \ = text:gsub('%s+$', '')\n\ttext = text:gsub('%s+', '_')\n\treturn text\nend",
  "  text = gsub(text, \"  \", \"-\")\n  text = gsub(text, \" \", \"_\")\n  return\
    \ text\nend", "\tlocal text_fixed = string.gsub(text, '%s+', '-')\n\treturn string.gsub(text_fixed,\
    \ '^%s', '')\nend", "  return (text:gsub('%s', '_'):gsub('%s+', '-'))\nend", "\t\
    local new_text = string.gsub(text, \"%s{2,}\", '-'):gsub(\"%s\", \"_\")\n\treturn\
    \ new_text\nend", "    if not text then return text end\n    text = text:gsub('\
    \ +', ' ')\n    text = text:gsub('^ ', '')\n    text = text:gsub(' ', '_')\n \
    \   text = text:gsub('_+', '-')\n    return text\nend", "\ttext = string.gsub(text,\
    \ '\\t', ' ')\n\ttext = string.gsub(text, '  ', '\\1')\n\ttext = string.gsub(text,\
    \ ' ', '_')\n\ttext = string.gsub(text, '\\1\\1\\1', '-')\n\ttext = string.gsub(text,\
    \ '\\1\\1', '_')\n\treturn text\nend", "  return text:gsub('  ', '-'):gsub(' ',\
    \ '_')\nend", "    local quote_text = text:gsub('\"', '\\\\\"')\n    if quote_text:match('^%s')\
    \ then\n        quote_text = '_' .. quote_text\n    end\n    quote_text = quote_text:gsub('\
    \ +', function(spaces)\n        if #spaces > 2 then\n            return '-'\n\
    \        else\n            return '_'\n        end\n    end)\n    quote_text =\
    \ quote_text:gsub('^_', '')\n    quote_text = quote_text:gsub(' _', '_')\n   \
    \ quote_text = quote_text:gsub('%s+$', '')\n    return quote_text\nend", "  if\
    \ not text then return end\n  text = gsub(text, ' +', '_')\n  text = gsub(text,\
    \ '_+', '-')\n  return text\nend", "    return text:gsub(' +', ' '):gsub(' ',\
    \ '_'):gsub('_+', '-'):gsub('^-', '')\nend", "    -- YOUR CODE HERE\n    if text\
    \ == '' then\n        return text\n    elseif text:sub(1,1) == ' ' then\n    \
    \    if text:sub(2,2) == ' ' then\n            return text:sub(1,1) .. fix_spaces(text:sub(2))\n\
    \        else\n            return '_' .. fix_spaces(text:sub(2))\n        end\n\
    \    else\n        return text:sub(1,1) .. fix_spaces(text:sub(2))\n    end\n\
    end", "  return text:gsub(' ','_'):gsub('(%s%s%s)','-'):gsub('^(%s)','_')\nend",
  "    if (not text) then return '' end\n    text = text:gsub('%s', '_')\n    return\
    \ text:gsub('%s+', '-')\nend", "\tlocal result = text:gsub('\\n', ' ')\n\tresult\
    \ = result:gsub('  ', ' -')\n\tresult = result:gsub(' ', '_')\n\treturn result\n\
    end", "\tlocal result = ''\n\tlocal space_count = 0\n\tfor i = 1, #text do\n\t\
    \tlocal c = text:sub(i, i)\n\t\tif c == ' ' then\n\t\t\tspace_count = space_count\
    \ + 1\n\t\t\tif space_count > 2 then\n\t\t\t\tresult = result:sub(1, -2)\n\t\t\
    \t\tresult = result .. '-'\n\t\t\telse\n\t\t\t\tresult = result .. '_'\n\t\t\t\
    end\n\t\telse\n\t\t\tspace_count = 0\n\t\t\tresult = result .. c\n\t\tend\n\t\
    end\n\treturn result\nend", "    text = text:gsub(' +', '_')\n    text = text:gsub('_+',\
    \ '-')\n    return text\nend", "    return text:gsub('%s+', '-')\n    :gsub('^%s',\
    \ '')\n    :gsub('%s$', '')\n    :gsub(' ', '_')\nend", "    return (string.gsub(text,\
    \ \"  +\", \"-\"))\nend", "  if text then\n    return string.gsub(text, '  ',\
    \ '-'):gsub(' ', '_')\n  end\nend", "    if type(text) ~= 'string' then\n    \
    \    text = tostring(text)\n    end\n    text = text:gsub('%s+', '-')\n    text\
    \ = text:gsub('%s', '_')\n    return text\nend", "    local pattern = '%s'\n \
    \   local old = text\n    text = text:gsub(pattern, '_')\n    if text:match('^_')\
    \ and old:match('^%s') then\n        text = text:sub(2)\n    end\n    if text:match('_$')\
    \ and old:match('%s$') then\n        text = text:sub(1, -2)\n    end\n    return\
    \ text:gsub('_+', '-')\nend", "    return string.gsub(text, \"^%s*(.*%S)%s*$\"\
    , \"%1\")\nend", "\tif text == nil then return nil end\n\ttext = text:gsub('^%s+',\
    \ '')\n\ttext = text:gsub('%s+$', '')\n\ttext = text:gsub('%s+', '_')\n\ttext\
    \ = text:gsub('_+', '-')\n\treturn text\nend", "    local lua_pattern = \"^%s*(.-)%s*$\"\
    \n    local str = string.gsub(text, lua_pattern, \"%1\")\n    local result = string.gsub(str,\
    \ \" \", \"_\")\n    result = string.gsub(result, \"__\", \"_\")\n    result =\
    \ string.gsub(result, \"__\", \"-\")\n    return result\nend", "    -- Check if\
    \ there are consecutive spaces\n    local spaces = text:match('%s%s+')\n    local\
    \ replaced = text:gsub('%s', '_')\n    if spaces then\n        -- If so, remove\
    \ the spaces and replace them with -\n        return replaced:gsub('%s', '-')\n\
    \    else\n        -- Else, return the original text\n        return replaced\n\
    \    end\nend", "  return text:gsub('  ', '-'):gsub(' ', '_')\nend", "    return\
    \ text:gsub('%s+', '-'):gsub('^-', ''):gsub('^%s+', ''):gsub('(%s)', '_')\nend",
  "    return (text:gsub(' +', function(s)\n        if s:len() > 2 then\n        \
    \    return '-'\n        else\n            return '_'\n        end\n    end))\n\
    end", "\treturn string.gsub(text, \"%s\", function(s)\n\t\t\tif (s == \" \") then\n\
    \t\t\t\treturn \"_\"\n\t\t\telse\n\t\t\t\treturn \"-\"\n\t\t\tend\n\t\tend)\n\
    end", "  return string.gsub(text, \"    \", \" -- \")\n             :gsub(\" \
    \ \", \" _ \")\n             :gsub(\" \", \"_\")\n             :gsub(\"_+\", \"\
    _\")\nend", "    if(text==nil) then\n        return nil\n    end\n    local result\
    \ = string.gsub(text, \"[%s]+\", \"_\")\n    result = string.gsub(result, \"^_\"\
    , \"\")\n    result = string.gsub(result, \"_$\", \"\")\n    result = string.gsub(result,\
    \ \"_-_\", \"-\")\n    return result\nend", "    local res = text:gsub('  +',\
    \ '-'):gsub(' ', '_')\n    return res\nend", "  local fixed = string.gsub(text,\
    \ ' ', '_')\n  fixed = string.gsub(fixed, '__+', '-')\n  return fixed\nend", " \
    \   text = text:gsub('^ ', '')\n    text = text:gsub('  ', '_')\n    text = text:gsub('\
    \   ', '-')\n    return text\nend", "    text = string.gsub(text, \"^ +\", \"\"\
    )\n    return string.gsub(text, \"  +\", \" \")\nend", "    text = utils.str_replace(text,\
    \ '  ', ' -')\n    text = utils.str_replace(text, ' ', '_')\n    return text\n\
    end", "  if not text then\n    return text\n  end\n  return text:gsub('%s+', '-'):gsub('%s',\
    \ '_')\nend", "    --replaces spaces with underscores\n    text = string.gsub(text,\
    \ ' ', '_')\n    --replaces more than two consecutive spaces with a single -\n\
    \    text = string.gsub(text, '__', '-')\n    --replaces the first _ with a space\n\
    \    text = string.gsub(text, '^_', ' ')\n    return text\nend", "    return text:gsub('%s%s+',\
    \ '-'):gsub('%s', '_')\nend", "    local returnString = string.gsub(text, \" +\"\
    , \"_\")\n    returnString = string.gsub(returnString, \"_+\", \"_\")\n    returnString\
    \ = string.gsub(returnString, \"^_\", \"\")\n    returnString = string.gsub(returnString,\
    \ \"_$\", \"\")\n    return returnString\nend", "    if text == nil then\n   \
    \     return nil\n    end\n    local cnt = 1\n    while true do\n        local\
    \ idx = text:find('  ', cnt)\n        if idx == nil then\n            break\n\
    \        end\n        text = text:sub(1, idx) .. '-' .. text:sub(idx + 3)\n  \
    \      cnt = idx + 3\n    end\n    text = text:gsub(' ', '_')\n    return text\n\
    end", "    local first_char, space_flag = '', false\n    text = text:gsub('^ +',\
    \ function(s)\n        first_char = s\n        return ''\n    end)\n    text =\
    \ text:gsub('%s', function(s)\n        space_flag = true\n        return '_'\n\
    \    end)\n    if space_flag then\n        text = text:gsub('_+', '-')\n    end\n\
    \    return first_char .. text\nend", "\treturn text:gsub(' {2,}', '-'):gsub('\
    \ ', '_')\nend", "\t-- Given a string text, replace all spaces in it with underscores,\
    \ \n\t-- and if a string has more than 2 consecutive spaces, \n\t-- then replace\
    \ all consecutive spaces with - \n\t-- >>> fix_spaces(' Example')\n\t-- 'Example'\n\
    \t-- >>> fix_spaces(' Example 1')\n\t-- 'Example_1'\n\t-- >>> fix_spaces(' Example\
    \ 2')\n\t-- '_Example_2'\n\t-- >>> fix_spaces(' Example 3')\n\t-- '_Example-3'\n\
    \tlocal temp\n\tif string.find(text, ' ') == 1 then\n\t\ttemp = text:gsub(' ',\
    \ '_')\n\telse\n\t\ttemp = text:gsub(' ', '_')\n\tend\n\tif string.find(temp,\
    \ '__') ~= nil then\n\t\ttemp = temp:gsub('__', '-')\n\tend\n\tif string.find(temp,\
    \ '___') ~= nil then\n\t\ttemp = temp:gsub('___', '-')\n\tend\n\tif string.find(temp,\
    \ '____') ~= nil then\n\t\ttemp = temp:gsub('____', '-')\n\tend\n\treturn temp\n\
    end", "  local fixed_text = text:gsub('\\n', ' ')\n  fixed_text = fixed_text:gsub('\
    \ +', ' ')\n  fixed_text = fixed_text:gsub(' ', '_')\n  fixed_text = fixed_text:gsub('_+',\
    \ '-')\n  return fixed_text\nend", "    local new_text = text:gsub(' ','_')\n\
    \    new_text = new_text:gsub('_+','-')\n    return new_text\nend", "\tlocal text\
    \ = text:gsub('%s%s', '-'):gsub('^%s', ''):gsub('%s', '_')\n\treturn text\nend",
  "\treturn string.gsub(text, \" +\", function(space) \n\t\tif #space > 2 then\n\t\
    \t\treturn \"-\"\n\t\telse\n\t\t\treturn \"_\"\n\t\tend\n\tend)\nend", "    --\
    \ Trim spaces at the beginning of the string\n    text = string.gsub(text, '^%s+',\
    \ '')\n    -- Remove spaces\n    text = string.gsub(text, ' ', '_')\n    -- Remove\
    \ sequences of spaces\n    text = string.gsub(text, '%s+', '-')\n    return text\n\
    end", "\treturn gsub(gsub(text, ' {2,}', '-'), ' ', '_')\nend", "    return string.gsub(text,\
    \ '\\n', '')\nend", "    if type(text) ~= 'string' then\n        return\n    end\n\
    \    local res = text:gsub(' ', '_')\n    return res:gsub('%s%s+', '-')\nend",
  "\ttext = string.gsub(text,' ','_')\n\ttext = string.gsub(text,'_+','_')\n\ttext\
    \ = string.gsub(text,'(.-)_','%1-')\n\ttext = string.gsub(text,'-+','_')\n\ttext\
    \ = string.gsub(text,'^_+','')\n\ttext = string.gsub(text,'_+$','')\n\treturn\
    \ text\nend", "  local q = rsplit(regex.replace(text, ' +', '_'), ' +')\n  local\
    \ p = {}\n  for k,v in ipairs(q) do\n    if (k > 1) then\n      local first =\
    \ p[#p]\n      local last = v\n      if first == '' then\n        table.remove(p)\n\
    \      end\n      if last == '' then\n        v = '-'\n      end\n    end\n  \
    \  table.insert(p, v)\n  end\n  return table.concat(p, '_')\nend", "    if string.find(text,\
    \ ' ') then\n        text = string.gsub(text, ' ', '_')\n        if string.find(text,\
    \ '___') then\n            text = string.gsub(text, '___', '-')\n        end\n\
    \    end\n    return text\nend", "    local max = 0\n    local max_text = text\n\
    \    local e = string.gmatch(text, ' +')\n    for found in e do\n        local\
    \ len = string.len(found)\n        if len > max then\n            max = len\n\
    \            max_text = string.gsub(text, ' +', '_')\n        end\n    end\n \
    \   if max > 2 then\n        max_text = string.gsub(max_text, '_+', '-')\n   \
    \ end\n    return max_text\nend", "  local ret_val = ''\n  local last_was_space\
    \ = false\n  local spaces = 0\n  for i = 1, #text do\n    local c = text:sub(i,\
    \ i)\n    if c ~= ' ' then\n      if last_was_space and spaces > 1 then\n    \
    \    ret_val = ret_val .. '-'\n      elseif last_was_space then\n        ret_val\
    \ = ret_val .. '_'\n      end\n      ret_val = ret_val .. c\n      last_was_space\
    \ = false\n      spaces = 0\n    else\n      spaces = spaces + 1\n      last_was_space\
    \ = true\n    end\n  end\n  return ret_val\nend", "    return string.gsub(text,\
    \ '  ', '-')\n        :gsub('^ ', '_')\n        :gsub(' ', '_')\nend", "\treturn\
    \ string.gsub(text, '  +', '-'):gsub(' ', '_')\nend", "\tlocal i = 1\n\tlocal\
    \ length = #text\n\tlocal a = ''\n\twhile i <= length do\n\t\tlocal char = utf8.sub(text,\
    \ i, i)\n\t\ti = i + 1\n\t\tif char == ' ' then\n\t\t\tlocal j = i\n\t\t\twhile\
    \ j <= length do\n\t\t\t\tlocal char = utf8.sub(text, j, j)\n\t\t\t\tif char ~=\
    \ ' ' then\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\t\t\
    if j - i >= 2 then\n\t\t\t\ta = a .. '-'\n\t\t\telse\n\t\t\t\ta = a .. '_'\n\t\
    \t\tend\n\t\telse\n\t\t\ta = a .. char\n\t\tend\n\tend\n\treturn a\nend", "\t\
    local replaced_text = string.gsub(text, \"  \", \"-\")\n\treturn string.gsub(replaced_text,\
    \ \" \", \"_\")\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
