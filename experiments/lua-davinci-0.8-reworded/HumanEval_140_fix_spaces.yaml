name: HumanEval_140_fix_spaces
language: lua
prompt: "-- Given a string text, replace all spaces in it with underscores, \n-- and\
  \ if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
  \ spaces with - \n-- >>> fix_spaces(' Example')\n-- 'Example'\n-- >>> fix_spaces('\
  \ Example 1')\n-- 'Example_1'\n-- >>> fix_spaces(' Example 2')\n-- '_Example_2'\n\
  -- >>> fix_spaces(' Example 3')\n-- '_Example-3'\nlocal function fix_spaces(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
  \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
  \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
  \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
  \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\t-- replace all spaces with underscores\n\ttext = text:gsub(' ', '_')\n\
    \t-- replace all consecutive spaces with '-'\n\treturn text:gsub('_+', '-')\n\
    end", "  if not text then return end\n  text = text:gsub('^%s+', '')\n  if text:match('%s%s')\
    \ then\n    text = text:gsub('%s+', '-')\n  else\n    text = text:gsub('%s', '_')\n\
    \  end\n  return text\nend", "\treturn text:gsub('^%s*',''):gsub('%s+', '_'):gsub('%-%s*',\
    \ '_'):gsub('_+', function(s)\n\t\treturn (#s > 2) and '-' or '_'\n\tend)\nend",
  "  local result = text:gsub('  ', '-')\n  result = result:gsub(' ', '_')\n  return\
    \ result\nend", "    local spaces = ''\n    local fix_spaces = text:gsub(' ',\
    \ function(c)\n        if spaces == '  ' then\n            spaces = ''\n     \
    \       return '-'\n        else\n            spaces = spaces .. c\n         \
    \   return '_'\n        end\n    end)\n    return fix_spaces\nend", "    local\
    \ res = string.gsub(text, '  +', '-')\n    res = string.gsub(res, ' ', '_')\n\
    \    return res\nend", "    return (text:gsub('^%s+', ''):gsub('%s+', '_'):gsub('^_+',\
    \ ''):gsub('%s+', '-'):gsub('\\n', ' '))\nend", "    return text:gsub('%s', function(s)\
    \ return s == ' ' and '_' or '-' end)\nend", "\treturn (string.gsub(text, '%s+',\
    \ ' '):gsub('%s+', '_'):gsub('-', '_'))\nend", "    local pattern = '%s+'\n  \
    \  local replace = '-'\n    if text:match('%s') then\n        if text:match('^%s+')\
    \ then\n            text = text:gsub('^%s+', '')\n        end\n        if text:match('%s+$')\
    \ then\n            text = text:gsub('%s+$', '')\n        end\n        if not\
    \ text:match('%s+') then\n            text = text:gsub('%s', '_')\n        else\n\
    \            text = text:gsub(pattern, replace)\n        end\n    end\n    return\
    \ text\nend", "\treturn string.gsub(text, \"([ ]+)\", function(s)\n\t\treturn\
    \ string.len(s) > 2 and \"_\" or \"-\"\n\tend)\nend", "\treturn text:gsub('%s',\
    \ '_'):gsub('%s%s', '-'):gsub('^%s', '')\nend", "\tif type(text) ~= 'string' then\n\
    \t\terror(\"Error: fix_spaces requires string argument\")\n\tend\n\treturn text:gsub('%s%s+',\
    \ '-'):gsub('%s', '_')\nend", "    return string.gsub(text, '  +', '-')\n    \
    \          :gsub(' ', '_')\nend", "  if text == nil then\n    return nil\n  end\n\
    \  local out = string.gsub(text, '^%s*', '')\n  out = string.gsub(out, '%s*$',\
    \ '')\n  out = string.gsub(out, '%s+', '_')\n  out = string.gsub(out, '_+', '-')\n\
    \  return out\nend", "    local underscore = '_'\n    local dash = '-'\n    local\
    \ space = ' '\n    local new_text = ''\n    local count = 0\n    for i = 1, #text\
    \ do\n        local current_char = text:sub(i, i)\n        if i == 1 and current_char\
    \ == space then\n            -- Keep the starting space if it's the only space\n\
    \            if #text == 1 then\n                new_text = current_char\n   \
    \         end\n        elseif current_char == space then\n            count =\
    \ count + 1\n            if count > 2 then\n                -- Replace with dash\
    \ if there are more than 2 consecutive spaces\n                new_text = new_text\
    \ .. dash\n            else\n                -- Replace with underscore otherwise\n\
    \                new_text = new_text .. underscore\n            end\n        else\n\
    \            count = 0\n            new_text = new_text .. current_char\n    \
    \    end\n    end\n    return new_text\nend", "\treturn gsub(gsub(text, \" \"\
    , \"_\"), \"  +\", \"-\")\nend", "    text = text:gsub(' ', '_')\n    text = text:gsub('_+',\
    \ '-')\n    return text\nend", "  return (string.gsub(text, \"^ +\", \"\")\n \
    \         :gsub(\" +\", \"_\")\n          :gsub(\"(%s%s+)\", \"-\"))\nend", "\t\
    text = text:gsub('%s+', '_')\n\ttext = text:gsub('__+', '-')\n\treturn text\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
