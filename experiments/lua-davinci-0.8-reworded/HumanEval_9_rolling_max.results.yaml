language: lua
name: HumanEval_9_rolling_max
results:
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local t = {}\n    local max = -math.huge\n    for i,v in ipairs(numbers)\
    \ do\n        if v > max then\n            max = v\n        end\n        t[i]\
    \ = max\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local len = #numbers\n  local res = {}\n  local current_max = 0\n  for i=1,len\
    \ do\n    if current_max < numbers[i] then\n      current_max = numbers[i]\n \
    \   end\n    res[i] = current_max\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local length = #numbers\n    local result = {}\n    local current_max = numbers[1]\n\
    \    result[1] = current_max\n    for i = 2, length do\n        local next_number\
    \ = numbers[i]\n        if next_number > current_max then\n            current_max\
    \ = next_number\n        end\n        result[i] = current_max\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local list_max = {}\n    local current_max = nil\n    for _, number in ipairs(numbers)\
    \ do\n        if current_max == nil or number > current_max then\n           \
    \ current_max = number\n        end\n        table.insert(list_max, current_max)\n\
    \    end\n    return list_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local res = {}\n  for i = 1, #numbers do\n    res[i] = math.max(numbers[i],\
    \ res[i - 1] or 0)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tassert(type(numbers) == \"table\")\n\tlocal max_at_time = {}\n\tlocal max_value\
    \ = numbers[1]\n\tfor i = 1, #numbers do\n\t\tmax_value = math.max(max_value,\
    \ numbers[i])\n\t\tmax_at_time[i] = max_value\n\tend\n\treturn max_at_time\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local result = {max}\n    for i = 2, #numbers\
    \ do\n        max = math.max(max, numbers[i])\n        result[i] = max\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = numbers[1]\n  result[1] = max\n  for i=2,#numbers\
    \ do\n    if numbers[i] > max then\n      max = numbers[i]\n    end\n    result[i]\
    \ = max\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local maximum = -math.huge\n    for i = 1, #numbers\
    \ do\n        maximum = math.max(maximum, numbers[i])\n        result[i] = maximum\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i=2,#numbers do\n        local number = numbers[i]\n        if number\
    \ > current_max then\n            current_max = number\n        end\n        result[i]\
    \ = current_max\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  local maxes = {max}\n  for i = 2, #numbers do\n \
    \   max = math.max(max, numbers[i])\n    maxes[i] = max\n  end\n  return maxes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = -1\n    for i = 1, #numbers do\n     \
    \   max = math.max(max, numbers[i])\n        result[i] = max\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local res = {numbers[1]}\n    for i=2,#numbers do\n        res[i] = math.max(res[i-1],\
    \ numbers[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = nil\n    for i = 1, #numbers do\n    \
    \    if max == nil or numbers[i] > max then\n            max = numbers[i]\n  \
    \      end\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = 0\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if number > max then\n            max = number\n        end\n  \
    \      table.insert(result, max)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal max = -math.huge\n\tfor i = 1, #numbers do\n\t\t\
    if numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\t\tresult[i] = max\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = numbers[1]\n  result[1] = current_max\n\
    \  for i = 2, #numbers do\n    local num = numbers[i]\n    if num > current_max\
    \ then\n      current_max = num\n    end\n    result[i] = current_max\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  local maximums = {max}\n  for i = 2, #numbers do\n\
    \    if numbers[i] > max then\n      max = numbers[i]\n    end\n    maximums[i]\
    \ = max\n  end\n  return maximums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local maximum = numbers[1]\n  for i, v in ipairs(numbers)\
    \ do\n    maximum = math.max(maximum, v)\n    result[i] = maximum\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = -math.huge\n    for i, number\
    \ in ipairs(numbers) do\n        current_max = math.max(current_max, number)\n\
    \        result[i] = current_max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local ret = {}\n    local max_number = nil\n    for i,number in ipairs(numbers)\
    \ do\n        if max_number == nil or number > max_number then\n            max_number\
    \ = number\n        end\n        ret[i] = max_number\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = nil\n    for _, number in ipairs(numbers)\
    \ do\n        if current_max == nil or number > current_max then\n           \
    \ current_max = number\n        end\n        table.insert(result, current_max)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local running_max = nil\n  for i = 1, #numbers do\n  \
    \  local current = numbers[i]\n    if running_max == nil or current > running_max\
    \ then\n      running_max = current\n    end\n    result[i] = running_max\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = {}\n  local current_max = numbers[1]\n  max[1] = current_max\n\
    \  for i = 2, #numbers do\n    local number = numbers[i]\n    if number > current_max\
    \ then\n      current_max = number\n    end\n    max[i] = current_max\n  end\n\
    \  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  local result = {max}\n  for i=2,#numbers do\n   \
    \ max = math.max(max, numbers[i])\n    result[i] = max\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = table.copy(numbers)\n    for i = 2, #numbers do\n        result[i]\
    \ = math.max(result[i - 1], result[i])\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwig7_oh1.lua:6:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpwig7_oh1.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpwig7_oh1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local ret = {}\n    local current_max = numbers[1]\n    ret[1] = current_max\n\
    \    for i = 2, #numbers do\n        local number = numbers[i]\n        if number\
    \ > current_max then\n            current_max = number\n        end\n        ret[i]\
    \ = current_max\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = -math.huge\n  for i, n in ipairs(numbers)\
    \ do\n    max = math.max(max, n)\n    result[i] = max\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal max_number = numbers[1]\n\tresult[1] = max_number\n\
    \tfor i=2,#numbers do\n\t\tlocal n = numbers[i]\n\t\tif n > max_number then\n\t\
    \t\tmax_number = n\n\t\tend\n\t\tresult[i] = max_number\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_number = numbers[1]\n    result[1] = max_number\n\
    \    for i = 2, #numbers do\n        max_number = math.max(max_number, numbers[i])\n\
    \        result[i] = max_number\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local out = {}\n    local current_max = nil\n    for _, n in ipairs(numbers)\
    \ do\n        if current_max == nil or n > current_max then\n            current_max\
    \ = n\n        end\n        table.insert(out, current_max)\n    end\n    return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rolling_max_numbers = {}\n    local current_max = numbers[1]\n    rolling_max_numbers[1]\
    \ = current_max\n    for i = 2, #numbers do\n        current_max = math.max(current_max,\
    \ numbers[i])\n        rolling_max_numbers[i] = current_max\n    end\n    return\
    \ rolling_max_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = -math.huge\n    for i, v in ipairs(numbers)\
    \ do\n        max = math.max(max, v)\n        result[i] = max\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local curr_max = numbers[1]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplkp1ftor.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = numbers[1]\n    result[1] = max\n    for\
    \ i = 2, #numbers do\n        if numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = nil\n    for index, value in ipairs(numbers)\
    \ do\n        if not max or value > max then\n            max = value\n      \
    \  end\n        result[index] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal current_max = nil\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\tcurrent_max = current_max and math.max(current_max, number) or number\n\
    \t\ttable.insert(result, current_max)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rmax = {}\n    local current_max = -1\n    for i = 1, #numbers do\n\
    \        if current_max < numbers[i] then\n            current_max = numbers[i]\n\
    \        end\n        rmax[i] = current_max\n    end\n    return rmax\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = nil\n    for _, number in ipairs(numbers)\
    \ do\n        if current_max == nil or number > current_max then\n           \
    \ current_max = number\n        end\n        table.insert(result, current_max)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local r_max = {}\n    local len = #numbers\n    local max = numbers[1]\n\
    \    r_max[1] = max\n    for i = 2, len do\n        if numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n        r_max[i] = max\n    end\n\
    \    return r_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local result = {max}\n    for i = 2, #numbers\
    \ do\n        local value = numbers[i]\n        max = math.max(max, value)\n \
    \       result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_value = numbers[1]\n    result[1] = max_value\n\
    \    for i = 2, #numbers do\n        local new_number = numbers[i]\n        if\
    \ new_number > max_value then\n            max_value = new_number\n        end\n\
    \        result[i] = max_value\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = 0\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        max = math.max(max, number)\n        table.insert(result, max)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local n = #numbers\n    local window = numbers[1]\n    local result = {}\n\
    \    for i = 1, n do\n        window = math.max(window, numbers[i])\n        result[i]\
    \ = window\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = numbers[1]\n    for i = 1, #numbers do\n\
    \        if numbers[i] > max then\n            max = numbers[i]\n        end\n\
    \        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local last = nil\n    local result = {}\n    for i = 1, #numbers do\n   \
    \     local number = numbers[i]\n        last = math.max(last or number, number)\n\
    \        result[i] = last\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = nil\n    local rolling_max = {}\n    for i, n in ipairs(numbers)\
    \ do\n        if max == nil or n > max then\n            max = n\n        end\n\
    \        rolling_max[i] = max\n    end\n    return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = -math.huge\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        max = math.max(max, number)\n        table.insert(result, max)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max = nil\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\t\t\
    if not max or n > max then\n\t\t\tmax = n\n\t\tend\n\t\ttable.insert(result, max)\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = numbers[1]\n    result[1] = max\n    for\
    \ i = 2, #numbers do\n        max = math.max(max, numbers[i])\n        result[i]\
    \ = max\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local acc = table.new()\n  local current_max = numbers[1]\n  acc[1] = current_max\n\
    \  for i = 2, #numbers do\n    local n = numbers[i]\n    current_max = math.max(current_max,\
    \ n)\n    acc[i] = current_max\n  end\n  return acc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7t35m9z.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpf7t35m9z.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpf7t35m9z.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local ret = {}\n    for i, n in ipairs(numbers) do\n        if i == 1 then\n\
    \            ret[i] = n\n        else\n            ret[i] = math.max(ret[i - 1],\
    \ n)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal maximums = {numbers[1]}\n\tfor i = 2, #numbers do\n\t\tmaximums[i] = max(maximums[i\
    \ - 1], numbers[i])\n\tend\n\treturn maximums\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc71ilg9e.lua:8:\
    \ attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpc71ilg9e.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpc71ilg9e.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maximum = numbers[1]\n    local result = {maximum}\n    for i = 2,\
    \ #numbers do\n        local number = numbers[i]\n        if number > maximum\
    \ then\n            maximum = number\n        end\n        result[i] = maximum\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local output = {}\n    local current_max = numbers[1]\n    output[1] = current_max\n\
    \    for i = 2, #numbers do\n        local element = numbers[i]\n        if element\
    \ > current_max then\n            current_max = element\n        end\n       \
    \ output[i] = current_max\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = {}\n    local current_max = 0\n    for i, number in ipairs(numbers)\
    \ do\n        current_max = math.max(current_max, number)\n        max[i] = current_max\n\
    \    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = numbers[1]\n  result[1] = current_max\n\
    \  for i=2,#numbers do\n    if numbers[i] > current_max then\n      current_max\
    \ = numbers[i]\n    end\n    result[i] = current_max\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = - math.huge\n  for k,v in ipairs(numbers)\
    \ do\n    current_max = math.max(current_max, v)\n    result[k] = current_max\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maxs = {}\n    local max = numbers[1]\n    for _, v in ipairs(numbers)\
    \ do\n        if v > max then\n            max = v\n        end\n        table.insert(maxs,\
    \ max)\n    end\n    return maxs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal len = #numbers\n\tlocal maxs = {}\n\tfor i = 1, len do\n\t\tmaxs[i] =\
    \ math.max(numbers[i], maxs[i - 1] or numbers[i])\n\tend\n\treturn maxs\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local maximum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        if v > maximum then\n            maximum = v\n        end\n    \
    \    table.insert(result, maximum)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_found = 0\n    for _, number in ipairs(numbers)\
    \ do\n        if max_found < number then\n            max_found = number\n   \
    \     end\n        table.insert(result, max_found)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = -math.huge\n  for _, number in ipairs(numbers)\
    \ do\n    max = math.max(max, number)\n    table.insert(result, max)\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal r_max = {}\n\tlocal max = numbers[1]\n\ttable.insert(r_max, max)\n\tfor\
    \ i = 2, #numbers do\n\t\tmax = math.max(max, numbers[i])\n\t\ttable.insert(r_max,\
    \ max)\n\tend\n\treturn r_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local n = #numbers\n  local result = {numbers[1]}\n  for i = 2, n do\n    result[i]\
    \ = math.max(result[i - 1], numbers[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal rolling_max = {numbers[1]}\n\tfor i = 2, #numbers do\n\t\trolling_max[i]\
    \ = math.max(rolling_max[i - 1], numbers[i])\n\tend\n\treturn rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = {}\n  for i, n in ipairs(numbers) do\n    if i == 1 then\n\
    \      max_so_far[i] = n\n    else\n      max_so_far[i] = math.max(max_so_far[i\
    \ - 1], n)\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i = 2, #numbers do\n        local number = numbers[i]\n        if number\
    \ > current_max then\n            current_max = number\n        end\n        result[i]\
    \ = current_max\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local m = 0\n    for _, n in ipairs(numbers) do\n\
    \        m = math.max(m, n)\n        table.insert(result, m)\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = {}\n  for index, number in ipairs(numbers) do\n    max[index] =\
    \ math.max(number, max[index - 1] or 0)\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local res = {}\n    local max = 0\n    for _, x in ipairs(numbers) do\n \
    \       max = math.max(max, x)\n        table.insert(res, max)\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local maxes = {max}\n    for i = 2, #numbers\
    \ do\n        max = math.max(max, numbers[i])\n        maxes[i] = max\n    end\n\
    \    return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max, result = nil, {}\n\tfor i, v in ipairs(numbers) do\n\t\tif max ==\
    \ nil or v > max then\n\t\t\tmax = v\n\t\tend\n\t\tresult[i] = max\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal rolling_max = -math.huge\n\tfor i = 1, #numbers do\n\
    \t\trolling_max = math.max(rolling_max, numbers[i])\n\t\tresult[i] = rolling_max\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if not numbers then return {} end\n  local result = {}\n  local max_value =\
    \ nil\n  for i, value in ipairs(numbers) do\n    max_value = math.max(max_value\
    \ or value, value)\n    result[i] = max_value\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max_table = {}\n    local current_max = nil\n    for _,number in ipairs(numbers)\
    \ do\n        if current_max == nil or number > current_max then\n           \
    \ current_max = number\n        end\n        table.insert(max_table, current_max)\n\
    \    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maximum, result = numbers[1], {}\n    for i, x in ipairs(numbers) do\n\
    \        maximum = math.max(maximum, x)\n        result[i] = maximum\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local out = {}\n    local m = numbers[1]\n    for i, n in ipairs(numbers)\
    \ do\n        if n > m then\n            m = n\n        end\n        out[i] =\
    \ m\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = nil\n  for _, n in ipairs(numbers)\
    \ do\n    if current_max == nil or n > current_max then\n      current_max = n\n\
    \    end\n    table.insert(result, current_max)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local result = {}\n    result[1] = max\n    for\
    \ i = 2, #numbers do\n        max = math.max(max, numbers[i])\n        result[i]\
    \ = max\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maximal = numbers[1]\n    local result = {maximal}\n    for i = 2,\
    \ #numbers do\n        local current = numbers[i]\n        if current > maximal\
    \ then\n            maximal = current\n        end\n        result[i] = maximal\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max_so_far = numbers[1]\n    local rolling_max = {}\n    for i = 1,\
    \ #numbers do\n        max_so_far = math.max(max_so_far, numbers[i])\n       \
    \ rolling_max[i] = max_so_far\n    end\n    return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  local max_numbers = {max}\n  for i = 2, #numbers\
    \ do\n    max = math.max(max, numbers[i])\n    max_numbers[i] = max\n  end\n \
    \ return max_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  local result = {}\n  for i, number in ipairs(numbers)\
    \ do\n    if number > max then\n      max = number\n    end\n    result[i] = max\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = numbers[1]\n    result[1] = max\n    for\
    \ i = 2, #numbers do\n        if numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local output = { [0] = numbers[1] }\n    for i, number in ipairs(numbers)\
    \ do\n        output[i] = math.max(output[i - 1], number)\n    end\n    return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywbx8i4z.lua:17:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpywbx8i4z.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979051
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    return {max, map(function(i)\n        max = math.max(max,\
    \ i)\n        return max\n    end, numbers, 2)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn3wwy0t4.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpn3wwy0t4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn3wwy0t4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maxes = {}\n    local max = -math.huge\n    for i, number in ipairs(numbers)\
    \ do\n        max = math.max(max, number)\n        maxes[i] = max\n    end\n \
    \   return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local current_max = 0\n  for i = 1, #numbers do\n\
    \    current_max = math.max(current_max, numbers[i])\n    rolling_max[i] = current_max\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ if numbers[i] > max then\n      max = numbers[i]\n    end\n    result[i] = max\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = -math.huge\n  for i, v in ipairs(numbers)\
    \ do\n    current_max = math.max(current_max, v)\n    result[i] = current_max\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal m = numbers[1]\n\tresult[1] = m\n\tfor i = 2, #numbers\
    \ do\n\t\tlocal n = numbers[i]\n\t\tif n > m then\n\t\t\tm = n\n\t\tend\n\t\t\
    result[i] = m\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  local max_elements = { max }\n  for i = 2, #numbers\
    \ do\n    max = math.max(max, numbers[i])\n    max_elements[i] = max\n  end\n\
    \  return max_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = -math.huge\n  for i, value in ipairs(numbers)\
    \ do\n    max = math.max(max, value)\n    result[i] = max\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local found = {}\n  local max = numbers[1]\n  found[1] = max\n  for i = 2,\
    \ #numbers do\n    if numbers[i] > max then\n      max = numbers[i]\n    end\n\
    \    found[i] = max\n  end\n  return found\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = nil\n  for i, v in ipairs(numbers)\
    \ do\n    if current_max == nil or v > current_max then\n      current_max = v\n\
    \    end\n    result[i] = current_max\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local maxes = {}\n  local current_max = nil\n  for i = 1, #numbers do\n   \
    \ local number = numbers[i]\n    current_max = (current_max and math.max(current_max,\
    \ number)) or number\n    maxes[i] = current_max\n  end\n  return maxes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maxes = {}\n    local curr_max = numbers[1]\n    maxes[1] = curr_max\n\
    \    for i = 2, #numbers do\n        if numbers[i] > curr_max then\n         \
    \   curr_max = numbers[i]\n        end\n        maxes[i] = curr_max\n    end\n\
    \    return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal n = #numbers\n\tlocal result = {}\n\tlocal maximum = 0\n\tfor i=1,n do\n\
    \t\tmaximum = math.max(maximum, numbers[i])\n\t\tresult[i] = maximum\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tif #numbers == 0 then\n\t\treturn {}\n\tend\n\tlocal result = {numbers[1]}\n\
    \tfor i = 2, #numbers do\n\t\tresult[i] = math.max(result[i - 1], numbers[i])\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = -math.huge\n    for i = 1, #numbers do\n\
    \        max = math.max(max, numbers[i])\n        result[i] = max\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local maximum = -math.huge\n  local result = {}\n  for i, number in ipairs(numbers)\
    \ do\n    maximum = math.max(maximum, number)\n    result[i] = maximum\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal maxs = {}\n\tlocal max = numbers[1]\n\tfor i, number in ipairs(numbers)\
    \ do\n\t\tif number > max then\n\t\t\tmax = number\n\t\tend\n\t\tmaxs[i] = max\n\
    \tend\n\treturn maxs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rolling_max = {}\n    local max = numbers[1]\n    rolling_max[1] =\
    \ max\n    for i = 2, #numbers do\n        max = math.max(max, numbers[i])\n \
    \       rolling_max[i] = max\n    end\n    return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = numbers[1]\n    result[1] = max\n    for\
    \ i = 2, #numbers do\n        if numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maximums = {}\n    local current_max = 0\n    for _, number in ipairs(numbers)\
    \ do\n        if number > current_max then\n            current_max = number\n\
    \        end\n        table.insert(maximums, current_max)\n    end\n    return\
    \ maximums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maxs = {}\n    local last_max = numbers[1]\n    maxs[1] = last_max\n\
    \    for i = 2, #numbers do\n        if numbers[i] > last_max then\n         \
    \   last_max = numbers[i]\n        end\n        maxs[i] = last_max\n    end\n\
    \    return maxs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal maximum = math.mininteger\n\tlocal maxes = {}\n\tfor i, n in ipairs(numbers)\
    \ do\n\t\tif n > maximum then\n\t\t\tmaximum = n\n\t\tend\n\t\tmaxes[i] = maximum\n\
    \tend\n\treturn maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rolling_maxs = {}\n    local max = nil\n    for i, number in ipairs(numbers)\
    \ do\n        if max == nil or number > max then\n            max = number\n \
    \       end\n        rolling_maxs[i] = max\n    end\n    return rolling_maxs\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rolling_max_numbers = {}\n    local current_max = numbers[1]\n    for\
    \ i, v in ipairs(numbers) do\n        if v > current_max then\n            current_max\
    \ = v\n        end\n        rolling_max_numbers[i] = current_max\n    end\n  \
    \  return rolling_max_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = numbers[1]\n    result[1] = max\n    for\
    \ i=2,#numbers do\n        if numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local sequence_length = #numbers\n  local max_numbers = {}\n  local maximum\
    \ = numbers[1]\n  table.insert(max_numbers, maximum)\n  for i = 2, sequence_length\
    \ do\n    maximum = math.max(maximum, numbers[i])\n    table.insert(max_numbers,\
    \ maximum)\n  end\n  return max_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tif #numbers < 1 then\n\t\treturn {}\n\tend\n\tlocal rolling_max = { numbers[1]\
    \ }\n\tfor i=2, #numbers do\n\t\trolling_max[i] = math.max(rolling_max[i-1], numbers[i])\n\
    \tend\n\treturn rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = 0\n  for i, n in ipairs(numbers) do\n\
    \    current_max = math.max(current_max, n)\n    result[i] = current_max\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local nums = numbers:copy()\n    local max = nums[1]\n    for i=2,#nums do\n\
    \        if nums[i] > max then\n            max = nums[i]\n        end\n     \
    \   nums[i] = max\n    end\n    return nums\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpql2ys72j.lua:6:\
    \ attempt to call a nil value (method 'copy')\nstack traceback:\n\t/tmp/tmpql2ys72j.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpql2ys72j.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = numbers[1]\n  result[1] = current_max\n\
    \  for i = 2, #numbers do\n    current_max = math.max(current_max, numbers[i])\n\
    \    result[i] = current_max\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local last = 0\n    local rolling_max = {}\n    for i = 1, #numbers do\n\
    \        rolling_max[i] = math.max(last, numbers[i])\n        last = rolling_max[i]\n\
    \    end\n    return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = { }\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i = 2, #numbers do\n        local x = numbers[i]\n        if x > current_max\
    \ then\n            current_max = x\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local m = numbers[1]\n  for k, v in ipairs(numbers) do\n\
    \    if v > m then\n      m = v\n    end\n    result[k] = m\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = numbers[1]\n  for i = 1, #numbers\
    \ do\n    current_max = math.max(current_max, numbers[i])\n    result[i] = current_max\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local result = { max }\n    for i = 2, #numbers\
    \ do\n        max = math.max(max, numbers[i])\n        result[i] = max\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i = 2, #numbers do\n        local n = numbers[i]\n        if n > current_max\
    \ then\n            current_max = n\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = numbers[1]\n  local result = {max_so_far}\n  for i = 2,\
    \ #numbers do\n    max_so_far = math.max(max_so_far, numbers[i])\n    result[i]\
    \ = max_so_far\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local ret = {}\n    local cur_max = -math.huge\n    for i, v in ipairs(numbers)\
    \ do\n        if v > cur_max then\n            cur_max = v\n        end\n    \
    \    ret[i] = cur_max\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = nil\n    local result = {}\n    for _, v in ipairs(numbers) do\n\
    \        max = math.max(max or 0, v)\n        table.insert(result, max)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i = 2, #numbers do\n        current_max = math.max(current_max, numbers[i])\n\
    \        result[i] = current_max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = 0\n  for _, v in ipairs(numbers) do\n\
    \    current_max = math.max(current_max, v)\n    table.insert(result, current_max)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = 0\n  for i, n in ipairs(numbers) do\n    max\
    \ = math.max(max, n)\n    result[i] = max\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, #numbers do\n      \
    \  max = math.max(max, numbers[i])\n        result[i] = max\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {[0] = -math.huge}\n  for i, number in ipairs(numbers) do\n\
    \    result[i] = math.max(result[i - 1], number)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_fai01w.lua:16:\
    \ expected: {}\nactual: {0=-#Inf}\nstack traceback:\n\t/tmp/tmpu_fai01w.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = 0\n  local maxes = {}\n  for _, num in ipairs(numbers) do\n   \
    \ max = math.max(max, num)\n    table.insert(maxes, max)\n  end\n  return maxes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max_until_now = 0\n    local rolling_max = {}\n    for i, v in ipairs(numbers)\
    \ do\n        max_until_now = math.max(max_until_now, v)\n        rolling_max[i]\
    \ = max_until_now\n    end\n    return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local maxes = {}\n  local max = 0\n  for i = 1, #numbers do\n    max = math.max(max,\
    \ numbers[i])\n    maxes[i] = max\n  end\n  return maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max, output = numbers[1], {}\n    for i, n in ipairs(numbers) do\n\
    \        max = math.max(max, n)\n        output[i] = max\n    end\n    return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal maximum = {}\n\tlocal m = 0\n\tfor _, n in ipairs(numbers) do\n\t\tif\
    \ n > m then\n\t\t\tm = n\n\t\tend\n\t\tmaximum[#maximum + 1] = m\n\tend\n\treturn\
    \ maximum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = 0\n  local result = {}\n  for i = 1, #numbers do\n    max = math.max(max,\
    \ numbers[i])\n    result[i] = max\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = nil\n  for _, n in ipairs(numbers) do\n  \
    \  max = max and math.max(max, n) or n\n    table.insert(result, max)\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local maxes = {}\n  local max = numbers[1]\n  for i, val in ipairs(numbers)\
    \ do\n    if val > max then\n      max = val\n    end\n    maxes[i] = max\n  end\n\
    \  return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {numbers[1]}\n    for i = 2, #numbers do\n        local n\
    \ = numbers[i]\n        local current_max = result[i - 1]\n        if n > current_max\
    \ then\n            result[i] = n\n        else\n            result[i] = current_max\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = {}\n  local maximum = 0\n  for _, number in ipairs(numbers) do\n\
    \    maximum = math.max(maximum, number)\n    table.insert(max, maximum)\n  end\n\
    \  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_found = numbers[1]\n  local result = {numbers[1]}\n  for _, n in\
    \ ipairs(numbers) do\n    if n > max_found then\n      max_found = n\n    end\n\
    \    table.insert(result, max_found)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6j8im5kg.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp6j8im5kg.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  assert(type(numbers) == \"table\")\n  local max = 0\n  local result = {}\n\
    \  for i = 1, #numbers do\n    max = math.max(max, numbers[i])\n    result[i]\
    \ = max\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local ans = {}\n    local max = nil\n    for _, n in ipairs(numbers) do\n\
    \        if max == nil or n > max then\n            max = n\n        end\n   \
    \     table.insert(ans, max)\n    end\n    return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = -math.huge\n    for i, e in ipairs(numbers)\
    \ do\n        if e > max then\n            max = e\n        end\n        result[i]\
    \ = max\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max = numbers[1]\n\tlocal res = {max}\n\tfor i = 2, #numbers do\n\t\t\
    if numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\t\tres[i] = max\n\t\
    end\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local accumulator = {}\n  local max = 0\n  for _, value in ipairs(numbers)\
    \ do\n    if value > max then\n      max = value\n    end\n    table.insert(accumulator,\
    \ max)\n  end\n  return accumulator\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = 0\n    for i = 1, #numbers do\n\
    \        if numbers[i] > current_max then\n            current_max = numbers[i]\n\
    \        end\n        result[i] = current_max\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local n = #numbers\n    local m = {}\n    local maximum = numbers[1]\n  \
    \  m[1] = maximum\n    for i = 2, n do\n        maximum = math.max(maximum, numbers[i])\n\
    \        m[i] = maximum\n    end\n    return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maximum = 0\n    local previous_maximum = 0\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        previous_maximum = maximum\n\
    \        maximum = math.max(maximum, number)\n        result[#result + 1] = previous_maximum\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcl97_g0.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {0, 1, 2, 3}\nstack traceback:\n\t/tmp/tmphcl97_g0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_number = -math.huge\n    for i, number in\
    \ ipairs(numbers) do\n        max_number = math.max(max_number, number)\n    \
    \    result[i] = max_number\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local maximum = 0\n  local result = {}\n  for _, value in ipairs(numbers) do\n\
    \    maximum = math.max(maximum, value)\n    table.insert(result, maximum)\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal current_max = numbers[1]\n\tfor i, v in ipairs(numbers)\
    \ do\n\t\tif v > current_max then\n\t\t\tcurrent_max = v\n\t\tend\n\t\tresult[i]\
    \ = current_max\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max, results = 0, {}\n\tfor _, value in ipairs(numbers) do\n\t\tmax =\
    \ math.max(max, value)\n\t\tresults[#results + 1] = max\n\tend\n\treturn results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = numbers[1]\n  for i = 1, #numbers do\n   \
    \ max = math.max(max, numbers[i])\n    result[i] = max\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maximums = {}\n    local current_max = numbers[1]\n    maximums[1]\
    \ = current_max\n    for i = 2, #numbers do\n        if numbers[i] > current_max\
    \ then\n            current_max = numbers[i]\n        end\n        maximums[i]\
    \ = current_max\n    end\n    return maximums\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = 0\n  for i = 1, #numbers do\n    max = math.max(max,\
    \ numbers[i])\n    result[i] = max\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maximums = {}\n    local maximum = 0\n    for _, x in ipairs(numbers)\
    \ do\n        maximum = math.max(maximum, x)\n        table.insert(maximums, maximum)\n\
    \    end\n    return maximums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = nil\n    for _, number in ipairs(numbers)\
    \ do\n        if current_max == nil or number > current_max then\n           \
    \ current_max = number\n        end\n        table.insert(result, current_max)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal maxes = {numbers[1]}\n\tfor i = 2, #numbers do\n\t\tlocal n = numbers[i]\n\
    \t\tmaxes[i] = max(maxes[i - 1], n)\n\tend\n\treturn maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmploti_y1o.lua:9:\
    \ attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmploti_y1o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmploti_y1o.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local best = numbers[1]\n    for i = 1, #numbers do\n\
    \        if numbers[i] > best then\n            best = numbers[i]\n        end\n\
    \        result[i] = best\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  local result = {max}\n  for i = 2, #numbers do\n\
    \    if numbers[i] > max then\n      max = numbers[i]\n    end\n    result[i]\
    \ = max\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local max_sequence\
    \ = {numbers[1]}\n    for i = 2, #numbers do\n        max_sequence[i] = max(max_sequence[i\
    \ - 1], numbers[i])\n    end\n    return max_sequence\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf0dapyna.lua:11:\
    \ attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpf0dapyna.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpf0dapyna.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local size, max, ans = #numbers, numbers[1], {}\n  for i = 1, size do\n   \
    \ if numbers[i] > max then\n      max = numbers[i]\n    end\n    ans[i] = max\n\
    \  end\n  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local roll_max = {}\n  local maximum = numbers[1]\n  roll_max[1] = maximum\n\
    \  for i=2,#numbers do\n    if numbers[i] > maximum then\n      maximum = numbers[i]\n\
    \    end\n    roll_max[i] = maximum\n  end\n  return roll_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_value = -math.huge\n    for _, n in ipairs(numbers)\
    \ do\n        max_value = math.max(max_value, n)\n        table.insert(result,\
    \ max_value)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal rolling_max = {}\n\tlocal max = numbers[1]\n\trolling_max[1] = max\n\t\
    for i = 2, #numbers do\n\t\tif numbers[i] > max then\n\t\t\tmax = numbers[i]\n\
    \t\tend\n\t\trolling_max[i] = max\n\tend\n\treturn rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = {}\n    local current_max = -math.huge\n    for i, v in ipairs(numbers)\
    \ do\n        current_max = math.max(current_max, v)\n        max[i] = current_max\n\
    \    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rolled = {}\n    local current_max = nil\n    for i = 1, #numbers do\n\
    \        local number = numbers[i]\n        if not current_max or number > current_max\
    \ then\n            current_max = number\n        end\n        rolled[i] = current_max\n\
    \    end\n    return rolled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max    = numbers[1]\n  result[1]    = max\n  for\
    \ i=2,#numbers do\n    local x = numbers[i]\n    if x > max then\n      max =\
    \ x\n    end\n    result[i] = max\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = 0\n    for _, number in ipairs(numbers)\
    \ do\n        current_max = math.max(current_max, number)\n        table.insert(result,\
    \ current_max)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = numbers[1]\n  result[1] = max\n  for i = 2,\
    \ #numbers do\n    max = math.max(max, numbers[i])\n    result[i] = max\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local rolling_max_numbers = {max}\n    for i\
    \ = 2, #numbers do\n        if numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n        rolling_max_numbers[i] = max\n    end\n    return rolling_max_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local output = {}\n    local max = numbers[1]\n    output[1] = max\n    for\
    \ i = 2, #numbers do\n        local v = numbers[i]\n        if v > max then\n\
    \            max = v\n        end\n        output[i] = max\n    end\n    return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_value = numbers[1]\n    for i, n in ipairs(numbers)\
    \ do\n        if n > max_value then\n            max_value = n\n        end\n\
    \        result[i] = max_value\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local maxes = {}\n  local prev = numbers[1]\n  for _, num in ipairs(numbers)\
    \ do\n    if num > prev then\n      prev = num\n    end\n    table.insert(maxes,\
    \ prev)\n  end\n  return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local result = {max}\n    for i=2,#numbers do\n\
    \        if numbers[i] > max then\n            max = numbers[i]\n        end\n\
    \        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max_val = nil\n  for i, val in ipairs(numbers) do\n\
    \    max_val = math.max(max_val or val, val)\n    result[i] = max_val\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local greatest = -math.huge\n    for i, number in\
    \ ipairs(numbers) do\n        if number > greatest then\n            greatest\
    \ = number\n        end\n        result[i] = greatest\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local accumulator = {}\n    local curr_max = numbers[1]\n    for i = 1, #numbers\
    \ do\n        if numbers[i] > curr_max then\n            curr_max = numbers[i]\n\
    \        end\n        accumulator[i] = curr_max\n    end\n    return accumulator\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal maxes = {}\n\tfor i, e in ipairs(numbers) do\n\t\tmaxes[i] = math.max(e,\
    \ maxes[i - 1] or 0)\n\tend\n\treturn maxes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local cur_max = numbers[1]\n    for i = 1, #numbers\
    \ do\n        result[i] = cur_max\n        if numbers[i] > cur_max then\n    \
    \        cur_max = numbers[i]\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5_ww4po.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 2, 3}\nstack traceback:\n\t/tmp/tmpr5_ww4po.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = 0\n  for i = 1, #numbers do\n    local\
    \ num = numbers[i]\n    current_max = math.max(current_max, num)\n    result[i]\
    \ = current_max\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = numbers[1]\n    result[1] = max\n    for\
    \ i = 2, #numbers do\n        if numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979051
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = { }\n    local max = -math.huge\n    for i, n in ipairs(numbers)\
    \ do\n        if n > max then\n            max = n\n        end\n        result[i]\
    \ = max\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local data = {}\n    local current_max = 0\n    for i, v in ipairs(numbers)\
    \ do\n        current_max = math.max(current_max, v)\n        data[i] = current_max\n\
    \    end\n    return data\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i = 2, #numbers do\n        if numbers[i] > current_max then\n      \
    \      current_max = numbers[i]\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {\n        numbers[1]\n    }\n    for i = 2, #numbers do\n\
    \        table.insert(result, math.max(result[i - 1], numbers[i]))\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    for i = 1, #numbers\
    \ do\n        current_max = math.max(current_max, numbers[i])\n        result[i]\
    \ = current_max\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local mx = 0\n    for i = 1, #numbers do\n       \
    \ if mx < numbers[i] then\n            mx = numbers[i]\n        end\n        result[i]\
    \ = mx\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = 0\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if number > max then\n      max = number\n    end\n    table.insert(result,\
    \ max)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal max = nil\n\tfor i, v in ipairs(numbers) do\n\t\t\
    if not max or v > max then\n\t\t\tmax = v\n\t\tend\n\t\tresult[i] = max\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rollmax = {}\n  local max = 0\n  for i = 1, #numbers do\n    max = math.max(max,\
    \ numbers[i])\n    rollmax[i] = max\n  end\n  return rollmax\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max_numbers = {}\n    local current_max = numbers[1]\n    for _, number\
    \ in ipairs(numbers) do\n        current_max = math.max(current_max, number)\n\
    \        table.insert(max_numbers, current_max)\n    end\n    return max_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i = 2, #numbers do\n        local n = numbers[i]\n        if n > current_max\
    \ then\n            current_max = n\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i = 2, #numbers do\n        if numbers[i] > current_max then\n      \
    \      current_max = numbers[i]\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local maximum = numbers[1]\n    result[1] = maximum\n\
    \    for i = 2, #numbers do\n        local n = numbers[i]\n        if n > maximum\
    \ then\n            maximum = n\n        end\n        result[i] = maximum\n  \
    \  end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rv = {}\n  local max = 0\n  for i, number in ipairs(numbers) do\n   \
    \ max = math.max(max, number)\n    rv[i] = max\n  end\n  return rv\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max_seen = 0\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        max_seen = math.max(max_seen, number)\n        table.insert(result,\
    \ max_seen)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_number = numbers[1]\n    result[1] = max_number\n\
    \    for i=2,#numbers do\n        max_number = math.max(max_number, numbers[i])\n\
    \        result[i] = max_number\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  local rolling_maxes = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if n > max then\n      max = n\n    end\n    table.insert(rolling_maxes,\
    \ max)\n  end\n  return rolling_maxes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979052
