name: HumanEval_127_intersection
language: lua
results:
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n  local intersectionStart,\
    \ intersectionEnd = math.max(interval1[1], interval2[1]), math.min(interval1[2],\
    \ interval2[2])\n  if intersectionStart <= intersectionEnd then\n    local length\
    \ = intersectionEnd - intersectionStart + 1\n    for d = 2, math.floor(math.sqrt(length))\
    \ do\n      if length % d == 0 then\n        return 'NO'\n      end\n    end\n\
    \    return 'YES'\n  end\n  return 'NO'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersection\n    lu.assertEquals(candidate({1,\
    \ 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2,\
    \ 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_q1cl82.lua:37:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmp5_q1cl82.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n    local left =\
    \ math.max(interval1[1], interval2[1])\n    local right = math.min(interval1[2],\
    \ interval2[2])\n    if right < left then\n        return 'NO'\n    end\n    local\
    \ length = right - left + 1\n    if length == 1 then\n        return 'NO'\n  \
    \  end\n    local primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 }\n    for _,p in ipairs(primes)\
    \ do\n        if p == length then\n            return 'YES'\n        end\n   \
    \ end\n    return 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersection\n    lu.assertEquals(candidate({1, 2}, {2, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3,\
    \ -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n\
    \    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n \
    \   lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5rg_oje.lua:43:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpi5rg_oje.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  local\
    \ diff = finish - start\n  local isPrime = true\n  if diff < 0 then\n    return\
    \ 'NO'\n  end\n  for i = 2, diff do\n    if diff % i == 0 then\n      isPrime\
    \ = false\n      break\n    end\n  end\n  if isPrime then\n    return 'YES'\n\
    \  else\n    return 'NO'\n  end\nend\nreturn intersection\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersection\n    lu.assertEquals(candidate({1,\
    \ 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2,\
    \ 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpisj778os.lua:41: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n    -- your code\
    \ here\n    local a1, a2 = interval1[1], interval1[2]\n    local b1, b2 = interval2[1],\
    \ interval2[2]\n    if a1 > b2 or b1 > a2 then\n        return 'NO'\n    end\n\
    \    local res = math.min(a2, b2) - math.max(a1, b1) + 1\n    return isPrime(res)\
    \ and 'YES' or 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersection\n    lu.assertEquals(candidate({1, 2}, {2, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3,\
    \ -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n\
    \    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n \
    \   lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplbnlw3py.lua:28:\
    \ attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmplbnlw3py.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmplbnlw3py.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n    local max_start\
    \ = math.max(interval1[1], interval2[1])\n    local min_end = math.min(interval1[2],\
    \ interval2[2])\n    local s = {max_start, min_end}\n    local len = math.abs(s[1]\
    \ - s[2])\n    if s[1] > s[2] then return 'NO' end\n    if len == 0 then return\
    \ 'NO' end\n    local isPrime = true\n    for i = 2, len / 2 do\n        if len\
    \ % i == 0 then isPrime = false end\n    end\n    if isPrime then return 'YES'\
    \ else return 'NO' end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersection\n    lu.assertEquals(candidate({1, 2}, {2, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3,\
    \ -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n\
    \    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n \
    \   lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmxq3uu9.lua:38:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpmmxq3uu9.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n    local lower =\
    \ math.max(interval1[1], interval2[1])\n    local upper = math.min(interval1[2],\
    \ interval2[2])\n    local min, max = math.min(lower, upper), math.max(lower,\
    \ upper)\n    if min == max then\n        return 'NO'\n    end\n    if is_prime(math.abs(upper\
    \ - lower)) then\n        return 'YES'\n    end\n    return 'NO'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersection\n    lu.assertEquals(candidate({1,\
    \ 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2,\
    \ 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcc7trwvy.lua:27:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpcc7trwvy.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpcc7trwvy.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n    if (interval1[1]\
    \ >= interval2[2] or interval2[1] >= interval1[2]) then\n        return 'NO'\n\
    \    end\n    local max, min = math.max(interval1[1], interval2[1]), math.min(interval1[2],\
    \ interval2[2])\n    local x = max - min + 1\n    if (x <= 1) then\n        return\
    \ 'NO'\n    end\n    local factors = {}\n    for i = 2, math.sqrt(x) do\n    \
    \    if (x % i == 0) then\n            return 'NO'\n        end\n    end\n   \
    \ return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersection\n    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3,\
    \ -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n\
    \    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n \
    \   lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplr2plxat.lua:43:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmplr2plxat.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n  local start1, end1\
    \ = interval1[1], interval1[2]\n  local start2, end2 = interval2[1], interval2[2]\n\
    \  local start, end = math.max(start1, start2), math.min(end1, end2)\n  if start\
    \ > end then return 'NO' end\n  local interval = {start, end}\n  return isPrime(intervalLength(interval))\
    \ and 'YES' or 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersection\n    lu.assertEquals(candidate({1, 2}, {2, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3,\
    \ -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n\
    \    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n \
    \   lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps4t__eyg.lua:23: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n  local l, r = math.max(interval1[1],\
    \ interval2[1]), math.min(interval1[2], interval2[2])\n  if l > r then return\
    \ 'NO' end\n  local f = function(n) return math.abs(n) > 1 and not (n % 2 == 0\
    \ or n % 3 == 0) end\n  local flag = false\n  for i = 5, math.floor(math.sqrt(r))\
    \ do\n    if f(i) then\n      for j = i * i, r, i do\n        if j >= l and j\
    \ <= r then\n          flag = true\n          break\n        end\n      end\n\
    \    end\n  end\n  return flag and 'NO' or 'YES'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersection\n    lu.assertEquals(candidate({1,\
    \ 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2,\
    \ 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06clgwu2.lua:41:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmp06clgwu2.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n    local inter =\
    \ {start = 0, finish = 0}\n    if interval1[1] < interval2[1] then\n        inter[1]\
    \ = interval2[1]\n    else\n        inter[1] = interval1[1]\n    end\n    if interval1[2]\
    \ < interval2[2] then\n        inter[2] = interval1[2]\n    else\n        inter[2]\
    \ = interval2[2]\n    end\n    if inter[1] <= inter[2] then\n        local len\
    \ = inter[2] - inter[1] + 1\n        local primes = {2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n      \
    \  for _, p in ipairs(primes) do\n            if len == p then\n             \
    \   return 'YES'\n            end\n        end\n        return 'NO'\n    end\n\
    \    return 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersection\n    lu.assertEquals(candidate({1, 2}, {2, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3,\
    \ -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n\
    \    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n \
    \   lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptr95e6cs.lua:49:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmptr95e6cs.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n    return (interval1[1]\
    \ >= interval2[1] and interval1[1] <= interval2[2]) or (interval2[1] >= interval1[1]\
    \ and interval2[1] <= interval1[2])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersection\n    lu.assertEquals(candidate({1,\
    \ 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2,\
    \ 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfixxopi.lua:27:\
    \ expected: \"NO\"\nactual: true\nstack traceback:\n\t/tmp/tmprfixxopi.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n    local i1 = {}\n\
    \    local i2 = {}\n    for i,v in ipairs(interval1) do\n        i1[i] = v\n \
    \   end\n    for i,v in ipairs(interval2) do\n        i2[i] = v\n    end\n   \
    \ if i1[1] > i1[2] then\n        i1[1], i1[2] = i1[2], i1[1]\n    end\n    if\
    \ i2[1] > i2[2] then\n        i2[1], i2[2] = i2[2], i2[1]\n    end\n    local\
    \ int1 = range(i1[1], i1[2])\n    local int2 = range(i2[1], i2[2])\n    local\
    \ int_intersection = {}\n    for _,v in ipairs(int1) do\n        if is_contain(int2,\
    \ v) then\n            table.insert(int_intersection, v)\n        end\n    end\n\
    \    local len = #int_intersection\n    local is_prime = true\n    if len == 0\
    \ then\n        return 'NO'\n    end\n    if len ~= 1 then\n        for i = 2,\
    \ len - 1 do\n            if len % i == 0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n    end\n    if is_prime\
    \ then\n        return 'YES'\n    else\n        return 'NO'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
    \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
    \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
    \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
    \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
    \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbfq9qtzr.lua:35:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpbfq9qtzr.lua:35:\
    \ in local 'candidate'\n\t/tmp/tmpbfq9qtzr.lua:66: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n    local start_int,\
    \ end_int = 0, 0\n    if(interval1[1] < interval2[1]) then\n        start_int\
    \ = interval2[1]\n    else\n        start_int = interval1[1]\n    end\n    if(interval1[2]\
    \ < interval2[2]) then\n        end_int = interval1[2]\n    else\n        end_int\
    \ = interval2[2]\n    end\n    local int_length = end_int - start_int\n    if(int_length\
    \ < 0) then\n        return 'NO'\n    end\n    if(int_length == 1) then\n    \
    \    return 'NO'\n    end\n    for i = 2, int_length - 1 do\n        if((int_length\
    \ % i) == 0) then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
    \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
    \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
    \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
    \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
    \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq7f_gq7.lua:50:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmppq7f_gq7.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n  local i1, i2 =\
    \ {}, {}\n  for _, i in ipairs({interval1, interval2}) do\n    table.insert(i1,\
    \ i[1])\n    table.insert(i2, i[2])\n  end\n  local sort = table.sort\n  sort(i1)\n\
    \  sort(i2)\n  if i1[2] < i2[1] or i2[2] < i1[1] then\n    return 'NO'\n  end\n\
    \  local prime = function(n)\n    if n < 1 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local n = math.min(i1[2], i2[2])\
    \ - math.max(i1[1], i2[1]) + 1\n  return prime(n) and 'YES' or 'NO'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
    \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
    \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
    \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
    \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
    \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kh33vfk.lua:50:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmp0kh33vfk.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n  local a, b = interval1[1],\
    \ interval1[2]\n  local c, d = interval2[1], interval2[2]\n  if c > b or a > d\
    \ then return 'NO' end\n  local n = math.min(b, d) - math.max(a, c) + 1\n  if\
    \ n == 1 then return 'NO' end\n  for i = 2, math.floor(math.sqrt(n)) do\n    if\
    \ n % i == 0 then return 'NO' end\n  end\n  return 'YES'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersection\n    lu.assertEquals(candidate({1,\
    \ 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2,\
    \ 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqs_s_32.lua:36:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmppqs_s_32.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n  local start = math.max(interval1[1],\
    \ interval2[1])\n  local stop = math.min(interval1[2], interval2[2])\n  if start\
    \ > stop then return 'NO' end\n  return (start == 2 or start % 2 ~= 0) and stop\
    \ - start > 1 and 'YES' or 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersection\n    lu.assertEquals(candidate({1, 2}, {2, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3,\
    \ -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n\
    \    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n \
    \   lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknd_i4nz.lua:33:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpknd_i4nz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n    local start =\
    \ math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local n = finish - start + 1\n    if n == 1 then\n        return 'NO'\n   \
    \ end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersection\n    lu.assertEquals(candidate({1,\
    \ 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2,\
    \ 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ep3i0d0.lua:42:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmp2ep3i0d0.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n  local function\
    \ isPrime(n)\n    if n <= 1 then return false end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then return false end\n    end\n    return true\n  end\n\
    \  local s, e = math.max(interval1[1], interval2[1]), math.min(interval1[2], interval2[2])\n\
    \  if s > e then return 'NO' end\n  return isPrime(e - s + 1) and 'YES' or 'NO'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
    \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
    \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
    \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
    \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
    \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5jkemn9.lua:37:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpm5jkemn9.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  local\
    \ len = finish - start + 1\n  return len > 0 and IsPrime(len) and 'YES' or 'NO'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
    \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
    \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
    \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
    \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
    \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt5ayjeo7.lua:24:\
    \ attempt to call a nil value (global 'IsPrime')\nstack traceback:\n\t/tmp/tmpt5ayjeo7.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpt5ayjeo7.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
    \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
    \ which means that the interval (start, end)\n-- includes both start and end.\n\
    -- For each given interval, it is assumed that its start is less or equal its\
    \ end.\n-- Your task is to determine whether the length of intersection of these\
    \ two \n-- intervals is a prime number.\n-- Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n\
    -- If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
    \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n--\
    \ [input/output] samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>>\
    \ intersection({-1, 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n\
    -- 'YES'\nlocal function intersection(interval1, interval2)\n  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  for i = 2, start do\n    if start %\
    \ i == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersection\n    lu.assertEquals(candidate({1,\
    \ 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1, 1}, {0, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n    lu.assertEquals(candidate({-2,\
    \ 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11, 2}, {-1, -1}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2, -2}, {-3, -2}), 'NO')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6knxf80.lua:38:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpf6knxf80.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
