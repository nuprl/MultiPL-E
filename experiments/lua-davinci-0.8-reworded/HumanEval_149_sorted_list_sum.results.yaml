name: HumanEval_149_sorted_list_sum
language: lua
results:
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local tmp = {}\n    for _, v in ipairs(lst) do\n        tmp[#tmp + 1] = v\n\
    \    end\n    table.sort(tmp)\n    return tmp\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7x5jup_.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpc7x5jup_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local res = {}\n    for _, v in ipairs(lst) do\n        table.insert(res,\
    \ table.concat(v))\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvhr8xzs.lua:19:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpgvhr8xzs.lua:19: in local 'candidate'\n\t/tmp/tmpgvhr8xzs.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local ret = {}\n  for _, word in ipairs(lst) do\n    local length = word:len()\n\
    \    ret[length] = ret[length] or {}\n    table.insert(ret[length], word)\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpne5b4ydn.lua:29:\
    \ expected: {\"aa\"}\nactual: {{\"a\"}, {\"aa\"}, {\"aaa\"}}\nstack traceback:\n\
    \t/tmp/tmpne5b4ydn.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   -- Implement this function\n    if not lst or type(lst) ~= 'table' then\n\
    \        return {}\n    end\n    local function table_len(t)\n        local count\
    \ = 0\n        for _ in pairs(t) do count = count + 1 end\n        return count\n\
    \    end\n    if table_len(lst) == 0 then\n        return {}\n    end\n    local\
    \ lst_len = table_len(lst)\n    local new_list = {}\n    for key, _ in pairs(lst)\
    \ do\n        if string.len(lst[key]) % 2 == 0 then\n            table.insert(new_list,\
    \ lst[key])\n        end\n    end\n    table.sort(new_list, function(a, b)\n \
    \       if string.len(a) == string.len(b) then\n            return a < b\n   \
    \     else\n            return string.len(a) < string.len(b)\n        end\n  \
    \  end)\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local ret = {}\n  for _, e in ipairs(lst) do\n    ret[#ret + 1] = e\n  end\n\
    \  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8n9be7z.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp_8n9be7z.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local tbl = {}\n    for _, v in ipairs(lst) do\n        local n = #v\n   \
    \     tbl[n] = tbl[n] or {}\n        table.insert(tbl[n], v)\n    end\n    return\
    \ tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbs47nrt_.lua:29:\
    \ expected: {\"aa\"}\nactual: {{\"a\"}, {\"aa\"}, {\"aaa\"}}\nstack traceback:\n\
    \t/tmp/tmpbs47nrt_.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n\t\
    local sum = 0\n\ttable.sort(lst)\n\tfor _, v in ipairs(lst) do\n\t\tsum = sum\
    \ + v\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_0y8dv4.lua:20:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpj_0y8dv4.lua:20: in local 'candidate'\n\t/tmp/tmpj_0y8dv4.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local function sum(acc, it)\n    local n = tonumber(it)\n    return n and acc\
    \ + n or acc\n  end\n  return reduce(sum, 0, lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpajxfcv19.lua:21:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmpajxfcv19.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpajxfcv19.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local table_len = #lst\n    local new_lst = {}\n    local odd_indexes = {}\n\
    \    local i\n    for i = 1, table_len do\n        if i % 2 == 0 then\n      \
    \      new_lst[#new_lst + 1] = lst[i]\n        else\n            odd_indexes[#odd_indexes\
    \ + 1] = i\n        end\n    end\n    local table_len = #odd_indexes\n    for\
    \ i = table_len, 1, -1 do\n        table.remove(lst, odd_indexes[i])\n    end\n\
    \    for i = 1, #new_lst do\n        lst[#lst + 1] = new_lst[i]\n    end\n   \
    \ table.sort(lst)\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99qh2g3v.lua:42:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\"}\nstack traceback:\n\t/tmp/tmp99qh2g3v.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ -- your implementation here\n  return {\"hello\"}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vci1zgf.lua:24:\
    \ expected: {\"aa\"}\nactual: {\"hello\"}\nstack traceback:\n\t/tmp/tmp2vci1zgf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local c = 0\n  for _, v in ipairs(lst) do\n    c = c + v\n  end\n  return c\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphavuvpi2.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmphavuvpi2.lua:19: in local 'candidate'\n\t/tmp/tmphavuvpi2.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local result = {}\n  for _, i in ipairs(lst) do\n    if #i % 2 == 0 then\n \
    \     table.insert(result, i)\n    end\n  end\n  table.sort(result, function(a,\
    \ b)\n    if #a == #b then\n      return a < b\n    else\n      return #a < #b\n\
    \    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ table.sort(lst, function(a, b)\n    return a < b\n  end)\n  local out = {}\n\
    \  local total = 0\n  for i, v in ipairs(lst) do\n    if out[v] == nil then\n\
    \      out[v] = true\n      total = total + v\n    end\n  end\n  return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwps8pi4g.lua:25:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpwps8pi4g.lua:25: in local 'candidate'\n\t/tmp/tmpwps8pi4g.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n\t\
    local sum = 0\n\tfor i = 1, #lst do\n\t\tsum = sum + lst[i]\n\tend\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpac9dvlyp.lua:19:\
    \ attempt to perform arithmetic on a string value (field '?')\nstack traceback:\n\
    \t/tmp/tmpac9dvlyp.lua:19: in local 'candidate'\n\t/tmp/tmpac9dvlyp.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ -- YOUR CODE HERE\n  assert(type(lst) == 'table')\n  lst = sort(lst)\n  local\
    \ sum = 0\n  for i,v in ipairs(lst) do\n    sum = sum + v\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuj8q5fxj.lua:19:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpuj8q5fxj.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpuj8q5fxj.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local len = #lst\n  if len == 0 then\n    return {0}\n  elseif len == 1 then\n\
    \    return {lst[1]}\n  else\n    local lst1 = lst_clone(lst)\n    local lst2\
    \ = lst_clone(lst)\n    local l1 = sorted_list_sum(lst1)\n    local l2 = sorted_list_sum(lst2)\n\
    \    return sorted_list_merge(l1, l2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe3nqyufs.lua:23:\
    \ attempt to call a nil value (global 'lst_clone')\nstack traceback:\n\t/tmp/tmpe3nqyufs.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpe3nqyufs.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local n = #lst\n    local sorted_lst = {}\n    for i = 1, n do\n        local\
    \ min_index = 0\n        local min_val = math.huge\n        for j = 1, n do\n\
    \            if lst[j] < min_val then\n                min_val = lst[j]\n    \
    \            min_index = j\n            end\n        end\n        table.insert(sorted_lst,\
    \ min_val)\n        lst[min_index] = math.huge\n    end\n    return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe1k86drv.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpe1k86drv.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpe1k86drv.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ -- The below expression is the same as writing this function:\n  -- function(a,\
    \ b) return a < b end\n  table.sort(lst, function(a, b) return a < b end)\n  local\
    \ sum = 0\n  for _, val in ipairs(lst) do\n    sum = sum + val\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bqfr3ku.lua:22:\
    \ attempt to perform arithmetic on a string value (local 'val')\nstack traceback:\n\
    \t/tmp/tmp2bqfr3ku.lua:22: in local 'candidate'\n\t/tmp/tmp2bqfr3ku.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n\t\
    local sorted_lst = {}\n\tfor _,s in ipairs(lst) do\n\t\tlocal len = string.len(s)\n\
    \t\tif not sorted_lst[len] then\n\t\t\tsorted_lst[len] = {}\n\t\tend\n\t\ttable.insert(sorted_lst[len],\
    \ s)\n\tend\n\tlocal result = {}\n\tfor _,v in pairs(sorted_lst) do\n\t\ttable.sort(v)\n\
    \t\tfor _,s in ipairs(v) do\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl25ftyj9.lua:38:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpl25ftyj9.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local res = {}\n  for k, v in pairs(lst) do\n    table.insert(res, k)\n  end\n\
    \  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhy160_x.lua:28:\
    \ expected: {\"aa\"}\nactual: {1, 2, 3}\nstack traceback:\n\t/tmp/tmpdhy160_x.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
