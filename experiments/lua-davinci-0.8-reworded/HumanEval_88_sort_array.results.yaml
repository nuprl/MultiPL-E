language: lua
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = array[1] + array[#array]\n\
    \  local order\n  if sum % 2 == 0 then\n    order = \"desc\"\n  else\n    order\
    \ = \"asc\"\n  end\n  table.sort(array, function(a, b)\n    if order == \"asc\"\
    \ then\n      return a < b\n    else\n      return a > b\n    end\n  end)\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphtj1jfbr.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmphtj1jfbr.lua:16: in local 'candidate'\n\t/tmp/tmphtj1jfbr.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local i = 1\n    local j = #array\n\
    \    local tmp\n    local sum = array[i] + array[j]\n    local order = (sum %\
    \ 2 == 0)\n    while i < j do\n        if order then\n            if array[i]\
    \ < array[j] then\n                tmp = array[i]\n                array[i] =\
    \ array[j]\n                array[j] = tmp\n            end\n        else\n  \
    \          if array[i] > array[j] then\n                tmp = array[i]\n     \
    \           array[i] = array[j]\n                array[j] = tmp\n            end\n\
    \        end\n        i = i + 1\n        j = j - 1\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppe5ynsbz.lua:19:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmppe5ynsbz.lua:19: in local 'candidate'\n\t/tmp/tmppe5ynsbz.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Write your code here\n    local\
    \ len = #array\n    if len == 0 or len == 1 then\n        return array\n    end\n\
    \    local first = array[1]\n    local last = array[len]\n    if (first + last)\
    \ % 2 == 0 then\n        for i = 1, len / 2 do\n            array[i], array[len\
    \ - i + 1] = array[len - i + 1], array[i]\n        end\n    end\n    table.sort(array)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sws9765.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp_sws9765.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrq5xrpv.lua:24:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpdrq5xrpv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local array1 = {}\n    local array2\
    \ = {}\n    local array_len = 0\n    local array_sum = 0\n    local index = 0\n\
    \    local index1 = 0\n    local index2 = 0\n    local i = 0\n    local temp =\
    \ 0\n    for index, value in ipairs(array) do\n        array_len = array_len +\
    \ 1\n        array_sum = array_sum + value\n        if index % 2 == 0 then\n \
    \           index1 = index1 + 1\n            array1[index1] = value\n        else\n\
    \            index2 = index2 + 1\n            array2[index2] = value\n       \
    \ end\n    end\n    if array_sum % 2 == 0 then\n        for i = 1, index1 do\n\
    \            for j = i, index1 do\n                if array1[i] < array1[j] then\n\
    \                    temp = array1[i]\n                    array1[i] = array1[j]\n\
    \                    array1[j] = temp\n                end\n            end\n\
    \        end\n        for i = 1, index2 do\n            for j = i, index2 do\n\
    \                if array2[i] > array2[j] then\n                    temp = array2[i]\n\
    \                    array2[i] = array2[j]\n                    array2[j] = temp\n\
    \                end\n            end\n        end\n    else\n        for i =\
    \ 1, index1 do\n            for j = i, index1 do\n                if array1[i]\
    \ > array1[j] then\n                    temp = array1[i]\n                   \
    \ array1[i] = array1[j]\n                    array1[j] = temp\n              \
    \  end\n            end\n        end\n        for i = 1, index2 do\n         \
    \   for j = i, index2 do\n                if array2[i] < array2[j] then\n    \
    \                temp = array2[i]\n                    array2[i] = array2[j]\n\
    \                    array2[j] = temp\n                end\n            end\n\
    \        end\n    end\n    local array_ret = {}\n    index1 = 0\n    index2 =\
    \ 0\n    for i = 1, array_len do\n        if i % 2 == 0 then\n           \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprmaqytke.lua:94: ''end'' expected (to close ''if'' at line
    79) near <eof>

    '
  stdout: ''
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local t = table.move(array, 1,\
    \ #array, 1, {})\n    if #t <= 1 then\n        return t\n    end\n    local v1,\
    \ v2 = t[1], t[#t]\n    local sum = v1 + v2\n    if sum % 2 == 0 then\n      \
    \  table.sort(t, function(a, b) return a > b end)\n    else\n        table.sort(t)\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Write your code here\n    if\
    \ #array == 0 then\n        return array\n    end\n    local sum = array[1] +\
    \ array[#array]\n    local array_len = #array\n    if sum % 2 == 0 then\n    \
    \    for i = 1, array_len - 1 do\n            for j = i + 1, array_len do\n  \
    \              if array[i] < array[j] then\n                    array[i], array[j]\
    \ = array[j], array[i]\n                end\n            end\n        end\n  \
    \  else\n        for i = 1, array_len - 1 do\n            for j = i + 1, array_len\
    \ do\n                if array[i] > array[j] then\n                    array[i],\
    \ array[j] = array[j], array[i]\n                end\n            end\n      \
    \  end\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local n = #array\n    local v =\
    \ 0\n    for i = 1, n do\n        v = v + array[i]\n    end\n    if v % 2 == 0\
    \ then\n        local function compare(a, b)\n            return a > b\n     \
    \   end\n        table.sort(array, compare)\n    else\n        local function\
    \ compare(a, b)\n            return a < b\n        end\n        table.sort(array,\
    \ compare)\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp595kowd7.lua:41:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp595kowd7.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- your code here\n    table.sort(array)\n\
    \    local i, j, tmp = 1, #array, 0\n    while i < j do\n        tmp = array[i]\n\
    \        array[i] = array[j]\n        array[j] = tmp\n        i = i + 1\n    \
    \    j = j - 1\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpans3km9_.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpans3km9_.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local total = 0\n    for i = 1,\
    \ #array do\n        total = total + array[i]\n    end\n    if total % 2 == 0\
    \ then\n        table.sort(array, function(a, b) return a > b end)\n    else\n\
    \        table.sort(array, function(a, b) return a < b end)\n    end\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uhb3qvo.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp9uhb3qvo.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array)\n    end\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty2o12im.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpty2o12im.lua:16: in local 'candidate'\n\t/tmp/tmpty2o12im.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return array\n\
    \  end\n  if #array == 1 then\n    return array\n  end\n  local sum = array[1]\
    \ + array[#array]\n  if sum % 2 == 0 then\n    table.sort(array, function(a, b)\
    \ return a > b end)\n  else\n    table.sort(array, function(a, b) return a < b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- your code here\n    if #array\
    \ == 0 then\n        return array\n    end\n    if #array == 1 then\n        return\
    \ array\n    end\n    if #array % 2 == 0 then\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(array, function(a, b) return\
    \ a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb04otr8w.lua:36:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpb04otr8w.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return array\n\
    \  end\n  if #array == 1 then\n    return array\n  end\n  if array[1] + array[#array]\
    \ % 2 == 0 then\n    for i = 1, math.floor(#array / 2) do\n      array[i], array[#array\
    \ - i + 1] = array[#array - i + 1], array[i]\n    end\n  end\n  local function\
    \ modifi(a, b)\n    return a < b\n  end\n  table.sort(array, modifi)\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_v_5k63.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpv_v_5k63.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if array[1] and array[#array] then\n\
    \        if (array[1] + array[#array]) % 2 == 0 then\n            array = bubble_sort(array,\
    \ sort_desc)\n        else\n            array = bubble_sort(array, sort_asc)\n\
    \        end\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpewqbp_12.lua:18:\
    \ attempt to call a nil value (global 'bubble_sort')\nstack traceback:\n\t/tmp/tmpewqbp_12.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpewqbp_12.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function comp(a, b)\n   \
    \     return a < b\n    end\n    if #array == 0 or #array == 1 then\n        return\
    \ array\n    end\n    if (array[1] + array[#array]) % 2 == 0 then\n        table.sort(array,\
    \ comp)\n    else\n        table.sort(array, function(a, b) return not comp(a,\
    \ b) end)\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqobps44.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpuqobps44.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Implement your solution here.\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn32tv3u.lua:25:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpxn32tv3u.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array < 2 then\n        return\
    \ array\n    end\n    local is_odd = (array[1] + array[#array]) % 2 == 1\n   \
    \ return table.sort(array, is_odd and function(a, b) return a < b end or function(a,\
    \ b) return a > b end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv7h59oi.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpnv7h59oi.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local first_val = array[1]\n  \
    \  local last_val = array[#array]\n    local num = first_val + last_val\n    local\
    \ result = {}\n    for k, v in pairs(array) do\n        result[k] = v\n    end\n\
    \    local function odd_sort(a, b)\n        return a < b\n    end\n    local function\
    \ even_sort(a, b)\n        return a > b\n    end\n    if num % 2 == 0 then\n \
    \       table.sort(result, even_sort)\n    else\n        table.sort(result, odd_sort)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmq07mavw.lua:18:\
    \ attempt to perform arithmetic on a nil value (local 'first_val')\nstack traceback:\n\
    \t/tmp/tmpmq07mavw.lua:18: in local 'candidate'\n\t/tmp/tmpmq07mavw.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local res = array\n    local first_index_value\
    \ = array[1]\n    local last_index_value = array[#array]\n    local i = 2\n  \
    \  local n = #array\n    local flag = first_index_value + last_index_value\n \
    \   if flag % 2 == 0 then\n        while i <= n do\n            res[i] = array[n\
    \ + 1 - i]\n            i = i + 1\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe6t4jgfw.lua:21:\
    \ attempt to perform arithmetic on a nil value (local 'first_index_value')\nstack\
    \ traceback:\n\t/tmp/tmpe6t4jgfw.lua:21: in local 'candidate'\n\t/tmp/tmpe6t4jgfw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb95cjg9i.lua:23:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmpb95cjg9i.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- implementation here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeka3qc31.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpeka3qc31.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array < 2 then\n        return\
    \ array\n    end\n    local first, last = array[1], array[#array]\n    if (first\
    \ + last) % 2 == 0 then\n        table.sort(array, function(lhs, rhs) return lhs\
    \ > rhs end)\n    else\n        table.sort(array, function(lhs, rhs) return lhs\
    \ < rhs end)\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local lhs = array[1]\n    local\
    \ rhs = array[#array]\n    local first_index = 1\n    local last_index = #array\n\
    \    local sum = lhs + rhs\n    local odd = (sum % 2) == 1\n    local n = #array\n\
    \    local temp\n    if odd then\n        for i = 1, n - 1 do\n            for\
    \ j = 1, n - i do\n                lhs = array[j]\n                rhs = array[j\
    \ + 1]\n                if lhs > rhs then\n                    temp = array[j]\n\
    \                    array[j] = array[j + 1]\n                    array[j + 1]\
    \ = temp\n                end\n            end\n        end\n    else\n      \
    \  for i = 1, n - 1 do\n            for j = 1, n - i do\n                lhs =\
    \ array[j]\n                rhs = array[j + 1]\n                if lhs < rhs then\n\
    \                    temp = array[j]\n                    array[j] = array[j +\
    \ 1]\n                    array[j + 1] = temp\n                end\n         \
    \   end\n        end\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1mt32937.lua:20:\
    \ attempt to perform arithmetic on a nil value (local 'lhs')\nstack traceback:\n\
    \t/tmp/tmp1mt32937.lua:20: in local 'candidate'\n\t/tmp/tmp1mt32937.lua:55: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    local first = array[1]\n    local last = array[#array]\n\
    \    if (first + last) % 2 == 0 then\n        return table.sort(array, function(x,\
    \ y) return x > y end)\n    else\n        return table.sort(array, function(x,\
    \ y) return x < y end)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp881nwe.lua:32:\
    \ expected: {5}\nactual: nil\nstack traceback:\n\t/tmp/tmpzp881nwe.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm3qbd77.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvm3qbd77.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal len = #array\n\tlocal sum =\
    \ array[1] + array[len]\n\tif sum % 2 == 0 then\n\t\treturn t.reverse(array)\n\
    \telse\n\t\treturn array\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp3v0jw9b.lua:17:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpp3v0jw9b.lua:17: in local 'candidate'\n\t/tmp/tmpp3v0jw9b.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local array_length = #array\n \
    \   local sum = array[1] + array[array_length]\n    local index\n    if sum %\
    \ 2 == 0 then\n        for i = 1, array_length - 1 do\n            index = i\n\
    \            for j = i + 1, array_length do\n                if array[j] > array[index]\
    \ then\n                    index = j\n                end\n            end\n\
    \            array[i], array[index] = array[index], array[i]\n        end\n  \
    \  else\n        for i = 1, array_length - 1 do\n            index = i\n     \
    \       for j = i + 1, array_length do\n                if array[j] < array[index]\
    \ then\n                    index = j\n                end\n            end\n\
    \            array[i], array[index] = array[index], array[i]\n        end\n  \
    \  end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdqth3kmg.lua:17:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpdqth3kmg.lua:17: in local 'candidate'\n\t/tmp/tmpdqth3kmg.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    local a = 0\n    local b = #array\n    if (a + b) % 2 ==\
    \ 0 then\n        table.sort(array, function(a, b) return a > b end)\n    else\n\
    \        table.sort(array, function(a, b) return a < b end)\n    end\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxy2lhjeg.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpxy2lhjeg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local result = { }\n    for i =\
    \ 1, #array do\n        table.insert(result, array[i])\n    end\n    if #result\
    \ == 0 or #result == 1 then\n        return result\n    end\n    if #result %\
    \ 2 == 0 then\n        table.sort(result, function(a, b) return a > b end)\n \
    \   else\n        table.sort(result, function(a, b) return a < b end)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_ev8qvp.lua:36:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpj_ev8qvp.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local arrayCopy = array\n  -- todo\n\
    \  local upDown\n  local firstIndex = arrayCopy[1]\n  local lastIndex = arrayCopy[#arrayCopy]\n\
    \  local firstIndexLastIndexSum = firstIndex + lastIndex\n  if firstIndexLastIndexSum\
    \ % 2 == 0 then\n    upDown = true\n  else\n    upDown = false\n  end\n  table.sort(arrayCopy,\
    \ function(a, b)\n    if upDown then\n      return a > b\n    else\n      return\
    \ a < b\n    end\n  end)\n  return arrayCopy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr68d19cj.lua:21:\
    \ attempt to perform arithmetic on a nil value (local 'firstIndex')\nstack traceback:\n\
    \t/tmp/tmpr68d19cj.lua:21: in local 'candidate'\n\t/tmp/tmpr68d19cj.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- your code here\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9u65_dv.lua:25:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpa9u65_dv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    table.sort(array, function(a, b)\n        if (a + b) % 2\
    \ == 0 then\n            return a > b\n        else\n            return a < b\n\
    \        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmqviv36.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {4, 2, 0, 5, 3, 1}\nstack traceback:\n\
    \t/tmp/tmprmqviv36.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    local function cmp(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ cmp)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqpmo4kch.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpqpmo4kch.lua:16: in local 'candidate'\n\t/tmp/tmpqpmo4kch.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function asc_compare(i, j)\n\
    \        return i < j\n    end\n    local function desc_compare(i, j)\n      \
    \  return i > j\n    end\n    local t = #array\n    if t == 0 or t == 1 then\n\
    \        return array\n    end\n    local compare = asc_compare\n    if (array[1]\
    \ + array[t]) % 2 == 0 then\n        compare = desc_compare\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array < 2 then\n        return\
    \ array\n    end\n    local b = {table.unpack(array)}\n    local sum = b[1] +\
    \ b[#b]\n    local is_odd = sum % 2 == 1\n    if is_odd then\n        table.sort(b)\n\
    \    else\n        table.sort(b, function(x, y) return x > y end)\n    end\n \
    \   return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local len = #array\n    if len\
    \ == 0 or len == 1 then\n        return array\n    end\n    local sum = array[1]\
    \ + array[len]\n    if sum % 2 == 0 then\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(array, function(a, b) return\
    \ a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array and #array > 0 then\n  \
    \  local index = (array[1] + array[#array]) % 2\n    table.sort(array, function(a,\
    \ b)\n      if index == 1 then\n        return a < b\n      else\n        return\
    \ a > b\n      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function _is_even(num)\n\
    \        return num % 2 == 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt2cjkecg.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6idy1poo.lua:23:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmp6idy1poo.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local res = {}\n    for _, v in\
    \ ipairs(array) do\n        table.insert(res, v)\n    end\n    local f = function(a,\
    \ b)\n        if #array % 2 == 0 then\n            return a > b\n        else\n\
    \            return a < b\n        end\n    end\n    table.sort(res, f)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1oxc424.lua:36:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpt1oxc424.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    for i = 1, #array\
    \ do\n        sum = sum + array[i]\n    end\n    if sum % 2 == 0 then\n      \
    \  table.sort(array, function(a, b) return a > b end)\n    else\n        table.sort(array,\
    \ function(a, b) return a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbi3gr8r4.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpbi3gr8r4.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    for i, v in\
    \ ipairs(array) do\n        sum = sum + v\n    end\n    -- Use the built-in Lua\
    \ sort algorithm\n    if sum % 2 == 0 then\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(array)\n    end\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcs3zxvpk.lua:35:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpcs3zxvpk.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array)\n    end\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty2o12im.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpty2o12im.lua:16: in local 'candidate'\n\t/tmp/tmpty2o12im.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- your code here\n  local sum =\
    \ array[1] + array[#array]\n  for i = 1, #array - 1 do\n    for j = 1, #array\
    \ - i do\n      if sum % 2 == 0 then\n        if array[j] < array[j + 1] then\n\
    \          array[j], array[j + 1] = array[j + 1], array[j]\n        end\n    \
    \  else\n        if array[j] > array[j + 1] then\n          array[j], array[j\
    \ + 1] = array[j + 1], array[j]\n        end\n      end\n    end\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjhpa85xw.lua:17:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpjhpa85xw.lua:17: in local 'candidate'\n\t/tmp/tmpjhpa85xw.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    local method = array[1] + array[#array]\n    if method %\
    \ 2 == 0 then\n        table.sort(array, function(a, b) return a > b end)\n  \
    \  else\n        table.sort(array, function(a, b) return a < b end)\n    end\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        return table.sort(array, function(a, b) return\
    \ a > b end)\n    else\n        return table.sort(array)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp07d_0tza.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp07d_0tza.lua:16: in local 'candidate'\n\t/tmp/tmp07d_0tza.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Write your code here\n    --\
    \ \u8BA1\u7B97\u5217\u8868\u957F\u5EA6\n    local length = 0\n    for _ in pairs(array)\
    \ do\n        length = length + 1\n    end\n    if length < 2 then\n        return\
    \ array\n    end\n    local first = array[1]\n    local last = array[length]\n\
    \    -- \u5224\u65AD\u662F\u5426\u9700\u8981\u5347\u5E8F\u6392\u5217\n    local\
    \ order = first + last > 0 and last + first > 0\n    -- \u6392\u5E8F\n    table.sort(array,\
    \ function(a, b)\n        if order then\n            return a < b\n        else\n\
    \            return a > b\n        end\n    end)\n    return array\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2nilvk3.lua:46:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp_2nilvk3.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function quick_sort(a, b,\
    \ c)\n        local i, j = a, c\n        local key = b[(a + c) // 2]\n       \
    \ while i <= j do\n            while b[i] < key do\n                i = i + 1\n\
    \            end\n            while b[j] > key do\n                j = j - 1\n\
    \            end\n            if i <= j then\n                b[i], b[j] = b[j],\
    \ b[i]\n                i = i + 1\n                j = j - 1\n            end\n\
    \        end\n        if a < j then\n            quick_sort(a, b, j)\n       \
    \ end\n        if i < c then\n            quick_sort(i, b, c)\n        end\n \
    \   end\n    if not array or #array == 0 then\n        return array\n    end\n\
    \    local temp = {}\n    for i = 1, #array do\n        temp[i] = array[i]\n \
    \   end\n    if (temp[1] + temp[#temp]) % 2 == 0 then\n        quick_sort(1, temp,\
    \ #temp)\n    else\n        quick_sort(1, temp, #temp)\n        for i = 1, #temp\
    \ // 2 do\n            temp[i], temp[#temp - i + 1] = temp[#temp - i + 1], temp[i]\n\
    \        end\n    end\n    return temp\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3irkllf.lua:62:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpn3irkllf.lua:62: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return array\n\
    \  end\n  if #array % 2 == 0 then\n    table.sort(array, function(a, b) return\
    \ a > b end)\n  else\n    table.sort(array, function(a, b) return a < b end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcwpsp9c.lua:32:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmphcwpsp9c.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- TODO: Implement it.\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7bbvrgrd.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp7bbvrgrd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local left = array[1]\n    local\
    \ right = array[#array]\n    local cmp = left + right > 0 and function(a, b) return\
    \ a > b end or function(a, b) return a < b end\n    table.sort(array, cmp)\n \
    \   return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphkscvdu5.lua:18:\
    \ attempt to perform arithmetic on a nil value (local 'left')\nstack traceback:\n\
    \t/tmp/tmphkscvdu5.lua:18: in local 'candidate'\n\t/tmp/tmphkscvdu5.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 0 then\n    return table.sort(array,\
    \ function(a, b) return a > b end)\n  else\n    return table.sort(array, function(a,\
    \ b) return a < b end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszduju42.lua:30:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpszduju42.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = array[1] + array[#array]\n\
    \  if sum % 2 == 0 then\n    local function cmp(a, b)\n      return a > b\n  \
    \  end\n    table.sort(array, cmp)\n  else\n    local function cmp(a, b)\n   \
    \   return a < b\n    end\n    table.sort(array, cmp)\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg6o6jhwg.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpg6o6jhwg.lua:16: in local 'candidate'\n\t/tmp/tmpg6o6jhwg.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6f2zzun.lua:24:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpj6f2zzun.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function desc(a, b)\n   \
    \     return a > b\n    end\n    local function asc(a, b)\n        return a <\
    \ b\n    end\n    table.sort(array, #array % 2 == 0 and desc or asc)\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg27anqer.lua:31:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpg27anqer.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if next(array) then\n        if\
    \ #array % 2 == 0 then\n            table.sort(array, function(a, b) return a\
    \ > b end)\n        else\n            table.sort(array)\n        end\n    end\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52yu_s_v.lua:31:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmp52yu_s_v.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local n = #array\n  if n == 0 then\n\
    \    return array\n  end\n  local array2 = {}\n  for i = 1, n do\n    array2[i]\
    \ = array[i]\n  end\n  table.sort(array2)\n  if (array[1] + array[n]) % 2 == 0\
    \ then\n    local i = 1\n    while i <= n / 2 do\n      array[i], array[n + 1\
    \ - i] = array2[n + 1 - i], array2[i]\n      i = i + 1\n    end\n  else\n    for\
    \ i = 1, n do\n      array[i] = array2[i]\n    end\n  end\n  return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpede8lf4l.lua:45:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {6, 5, 4, 0, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpede8lf4l.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif #array == 0 then\n\t\treturn array\n\
    \tend\n\tif #array == 1 then\n\t\treturn array\n\tend\n\tif array[1] + array[#array]\
    \ % 2 == 0 then\n\t\ttable.sort(array, function(v1, v2) return v1 > v2 end)\n\t\
    else\n\t\ttable.sort(array, function(v1, v2) return v1 < v2 end)\n\tend\n\treturn\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckejdl7h.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpckejdl7h.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    local flag =\
    \ false\n    for k, v in pairs(array) do\n        sum = sum + v\n    end\n   \
    \ if sum % 2 == 0 then\n        flag = true\n    end\n    local function qsort(a,\
    \ l, r)\n        if l >= r then\n            return\n        end\n        local\
    \ i = l\n        local j = r\n        local pivot = a[i]\n        while i < j\
    \ do\n            if flag then\n                while i < j and a[j] >= pivot\
    \ do\n                    j = j - 1\n                end\n                if i\
    \ < j then\n                    a[i] = a[j]\n                    i = i + 1\n \
    \               end\n                while i < j and a[i] <= pivot do\n      \
    \              i = i + 1\n                end\n                if i < j then\n\
    \                    a[j] = a[i]\n                    j = j - 1\n            \
    \    end\n            else\n                while i < j and a[j] <= pivot do\n\
    \                    j = j - 1\n                end\n                if i < j\
    \ then\n                    a[i] = a[j]\n                    i = i + 1\n     \
    \           end\n                while i < j and a[i] >= pivot do\n          \
    \          i = i + 1\n                end\n                if i < j then\n   \
    \                 a[j] = a[i]\n                    j = j - 1\n               \
    \ end\n            end\n        end\n        a[i] = pivot\n        qsort(a, l,\
    \ i - 1)\n        qsort(a, i + 1, r)\n    end\n    qsort(array, 1, #array)\n \
    \   return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zdg3_1m.lua:77:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmp5zdg3_1m.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    table.sort(array, function(a, b)\n        if sum % 2 == 0 then\n        \
    \    return a > b\n        else\n            return a < b\n        end\n    end)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ki8umdz.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp1ki8umdz.lua:16: in local 'candidate'\n\t/tmp/tmp1ki8umdz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal x = array[1] + array[#array]\n\
    \tif x % 2 == 0 then\n\t\treturn sorted(array, true)\n\telse\n\t\treturn sorted(array)\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpufofzylh.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpufofzylh.lua:16: in local 'candidate'\n\t/tmp/tmpufofzylh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    for i = 1, #array\
    \ do\n        sum = sum + array[i]\n    end\n    local result = {}\n    for i\
    \ = 1, #array do\n        result[i] = array[i]\n    end\n    if sum % 2 == 0 then\n\
    \        table.sort(result, function(x, y) return x > y end)\n    else\n     \
    \   table.sort(result, function(x, y) return x < y end)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1g1k1wlr.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp1g1k1wlr.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return array\n\
    \  end\n  if #array == 1 then\n    return array\n  end\n  local total = 0\n  for\
    \ i = 1, #array do\n    total = total + array[i]\n  end\n  if total % 2 == 0 then\n\
    \    table.sort(array, function(a, b) return a > b end)\n  else\n    table.sort(array,\
    \ function(a, b) return a < b end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelkn9iii.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpelkn9iii.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tarray = array or {}\n\tlocal temp_array\
    \ = table.copy(array)\n\ttable.sort(temp_array)\n\tlocal sum = temp_array[1] +\
    \ temp_array[#temp_array]\n\tif sum % 2 == 0 then\n\t\ttable.reverse(temp_array)\n\
    \tend\n\treturn temp_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi7prvtrr.lua:17:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpi7prvtrr.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpi7prvtrr.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return array\n\
    \  end\n  local last_index = #array\n  local last_element = array[last_index]\n\
    \  local first_element = array[1]\n  if (first_element + last_element) % 2 ==\
    \ 0 then\n    local new_array = {}\n    for i=1, last_index do\n      new_array[i]\
    \ = array[last_index-i+1]\n    end\n    return new_array\n  else\n    return array\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirxvzpdt.lua:38:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpirxvzpdt.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local array_length = #array\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgwc_awh4.lua:30: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    local sum = array[1] + array[#array]\n    local sorted =\
    \ {}\n    for _, v in ipairs(array) do\n        table.insert(sorted, v)\n    end\n\
    \    table.sort(sorted, function(a, b)\n        if sum % 2 == 0 then\n       \
    \     return a > b\n        else\n            return a < b\n        end\n    end)\n\
    \    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local result, sum = {}, 0\n  for\
    \ i, v in ipairs(array) do\n    if i == 1 or i == #array then\n      sum = sum\
    \ + v\n    end\n    result[i] = v\n  end\n  if sum % 2 == 0 then\n    table.sort(result,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(result)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local head, tail = array[1], array[#array]\n\
    \    local order = (head + tail) % 2 == 0 and 1 or -1\n    table.sort(array, function(a,\
    \ b) return a * order < b * order end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxd25l1h8.lua:17:\
    \ attempt to perform arithmetic on a nil value (local 'head')\nstack traceback:\n\
    \t/tmp/tmpxd25l1h8.lua:17: in local 'candidate'\n\t/tmp/tmpxd25l1h8.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local key = math.random(1, 2)\n \
    \ local temp = {}\n  for i=1, #array do\n    temp[i] = array[i]\n  end\n  table.sort(temp,\
    \ function(a, b) return a > b end)\n  if key == 1 then\n    return temp\n  else\n\
    \    return array\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5eypjq53.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp5eypjq53.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if not array then\n        return\
    \ {}\n    end\n    local copy = copy_table(array)\n    if not copy then\n    \
    \    return copy\n    end\n    local len = #copy\n    if len < 2 then\n      \
    \  return copy\n    end\n    local left = copy[1]\n    local right = copy[len]\n\
    \    if (left + right) % 2 == 0 then\n        for i = 1, len do\n            for\
    \ j = i + 1, len do\n                if copy[i] < copy[j] then\n             \
    \       copy[i], copy[j] = copy[j], copy[i]\n                end\n           \
    \ end\n        end\n    else\n        for i = 1, len do\n            for j = i\
    \ + 1, len do\n                if copy[i] > copy[j] then\n                   \
    \ copy[i], copy[j] = copy[j], copy[i]\n                end\n            end\n\
    \        end\n    end\n    return copy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjtz0s1vk.lua:19:\
    \ attempt to call a nil value (global 'copy_table')\nstack traceback:\n\t/tmp/tmpjtz0s1vk.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpjtz0s1vk.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local is_odd = (#array % 2) ==\
    \ 1\n    local function merge(a, b)\n        local c = {}\n        while #a >\
    \ 0 and #b > 0 do\n            if is_odd then\n                if a[1] < b[1]\
    \ then\n                    table.insert(c, table.remove(a, 1))\n            \
    \    else\n                    table.insert(c, table.remove(b, 1))\n         \
    \       end\n            else\n                if a[1] > b[1] then\n         \
    \           table.insert(c, table.remove(a, 1))\n                else\n      \
    \              table.insert(c, table.remove(b, 1))\n                end\n    \
    \        end\n        end\n        while #a > 0 do\n            table.insert(c,\
    \ table.remove(a, 1))\n        end\n        while #b > 0 do\n            table.insert(c,\
    \ table.remove(b, 1))\n        end\n        return c\n    end\n    local function\
    \ merge_sort(array)\n        if #array <= 1 then\n            return array\n \
    \       end\n        local middle = math.floor(#array / 2)\n        local left\
    \ = merge_sort(table.pack(table.unpack(array, 1, middle)))\n        local right\
    \ = merge_sort(table.pack(table.unpack(array, middle + 1, #array)))\n        return\
    \ merge(left, right)\n    end\n    return table.pack(table.unpack(merge_sort(array)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0a0f0xp.lua:57:\
    \ expected: {}\nactual: {n=0}\nstack traceback:\n\t/tmp/tmpy0a0f0xp.lua:57: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    local sum = array[1] + array[#array]\n    local is_odd =\
    \ (sum % 2 == 1)\n    local comparetor = is_odd and \">\" or \"<\"\n    local\
    \ function cmp(a, b)\n        return (a > b) == is_odd\n    end\n    table.sort(array,\
    \ cmp)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4f4eey3.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpr4f4eey3.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array < 2 then\n        return\
    \ array\n    end\n    if (array[1] + array[#array]) % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- your code here\n  if #array ==\
    \ 0 then\n  \treturn array\n  end\n  if #array == 1 then\n  \treturn array\n \
    \ end\n  if #array % 2 == 0 then\n  \ttable.sort(array, function(a, b) return\
    \ a > b end)\n  else\n  \ttable.sort(array, function(a, b) return a < b end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_z81w__.lua:36:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpy_z81w__.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal sum = 0\n\tfor k, v in pairs(array)\
    \ do\n\t\tsum = sum + v\n\tend\n\tif sum % 2 == 0 then\n\t\ttable.sort(array,\
    \ function(a, b) return a > b end)\n\telse\n\t\ttable.sort(array)\n\tend\n\treturn\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4at_wvg.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpo4at_wvg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- TODO: Implement your code here\n\
    \  --return #array == 0 and {} or {2, 4, 3, 0, 1, 5}\n  if #array == 0 then\n\
    \    return {}\n  end\n  if #array == 1 then\n    return array\n  end\n  local\
    \ left = 1\n  local right = #array\n  local sum = array[left] + array[right]\n\
    \  if sum % 2 == 0 then\n    local t = array[left]\n    array[left] = array[right]\n\
    \    array[right] = t\n  end\n  for i = 1, #array do\n    for j = i + 1, #array\
    \ do\n      if array[i] > array[j] then\n        local tmp = array[i]\n      \
    \  array[i] = array[j]\n        array[j] = tmp\n      end\n    end\n  end\n  if\
    \ sum % 2 == 0 then\n    for i = 1, #array / 2 do\n      local tmp = array[i]\n\
    \      array[i] = array[#array - i + 1]\n      array[#array - i + 1] = tmp\n \
    \   end\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3kpki22.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmph3kpki22.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    for _, v in\
    \ ipairs(array) do\n        sum = sum + v\n    end\n    local comp = function(a,\
    \ b)\n        if (sum % 2 == 0) then\n            return a > b\n        else\n\
    \            return a < b\n        end\n    end\n    table.sort(array, comp)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wu8qkv2.lua:37:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp9wu8qkv2.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- your code here\n    return {}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb42xegj.lua:24:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmphb42xegj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    for k, v in\
    \ pairs(array) do\n        sum = sum + v\n    end\n    if sum % 2 == 0 then\n\
    \        table.sort(array, function(a, b) return a > b end)\n    else\n      \
    \  table.sort(array, function(a, b) return a < b end)\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ehg28zm.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp4ehg28zm.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if (#array == 0) then\n       \
    \ return {}\n    end\n    if (#array == 1) then\n        return {array[1]}\n \
    \   end\n    local odds, evens = {}, {}\n    for index, value in ipairs(array)\
    \ do\n        if (value % 2 == 0) then\n            table.insert(evens, value)\n\
    \        else\n            table.insert(odds, value)\n        end\n    end\n \
    \   table.sort(odds)\n    table.sort(evens, function(a, b) return a > b end)\n\
    \    return table.concat(odds, ',') .. ',' .. table.concat(evens, ',')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dfwb8nb.lua:40:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: \"1,3,5,4,2,0\"\nstack traceback:\n\t\
    /tmp/tmp9dfwb8nb.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    local is_odd = false\n    if array[1] + array[#array] %\
    \ 2 == 1 then\n        is_odd = true\n    end\n    local function compare(x, y)\n\
    \        if is_odd then\n            return x < y\n        else\n            return\
    \ x > y\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4swsevu.lua:39:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpp4swsevu.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    array = array or {}\n    local\
    \ o, e = {}, {}\n    for i, v in ipairs(array) do\n        if i % 2 == 0 then\n\
    \            o[#o + 1] = v\n        else\n            e[#e + 1] = v\n        end\n\
    \    end\n    table.sort(o)\n    table.sort(e, function(a, b) return a > b end)\n\
    \    for i, v in ipairs(o) do\n        array[#array + 1] = v\n    end\n    for\
    \ i, v in ipairs(e) do\n        array[#array + 1] = v\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8z6xzu1v.lua:40:\
    \ expected: {5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmp8z6xzu1v.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local function function_name(a, b)\n\
    \    if a > b then\n      return 1\n    elseif a < b then\n      return -1\n \
    \   else\n      return 0\n    end\n  end\n  if table.getn(array) < 2 then\n  \
    \  return array\n  end\n  table.sort(array, function_name)\n  if (array[1] + array[table.getn(array)])\
    \ % 2 == 0 then\n    return array\n  else\n    local out = {}\n    for i = table.getn(array),\
    \ 1, -1 do\n      table.insert(out, array[i])\n    end\n    return out\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6cp9ki82.lua:25:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmp6cp9ki82.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp6cp9ki82.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array < 2 then\n    return array\n\
    \  end\n  local sum = array[1] + array[#array]\n  if sum % 2 == 0 then\n    table.sort(array,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(array, function(a,\
    \ b) return a < b end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        return Table.sort(array, function(a, b) return\
    \ a > b end)\n    else\n        return Table.sort(array)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxi2wtjtz.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpxi2wtjtz.lua:16: in local 'candidate'\n\t/tmp/tmpxi2wtjtz.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum_first_last = 0\n    local\
    \ first_value = 0\n    local last_value = 0\n    local table_size = #array\n \
    \   local new_table = {}\n    local table_index = 1\n    local sort_method = 0\n\
    \    -- get sum of the first and last element\n    if table_size > 0 then\n  \
    \      first_value = array[1]\n        last_value = array[table_size]\n      \
    \  sum_first_last = first_value + last_value\n    end\n    -- check whether ascending\
    \ or descending\n    if sum_first_last % 2 == 0 then\n        sort_method = 1\n\
    \    else\n        sort_method = 2\n    end\n    -- print(\"first_value\", first_value)\n\
    \    -- print(\"last_value\", last_value)\n    -- print(\"sum_first_last\", sum_first_last)\n\
    \    -- print(\"sort_method\", sort_method)\n    -- sort the array\n    local\
    \ function sort_method_ascending(a, b)\n        return a < b\n    end\n    local\
    \ function sort_method_descending(a, b)\n        return a > b\n    end\n    if\
    \ sort_method == 1 then\n        table.sort(array, sort_method_ascending)\n  \
    \  else\n        table.sort(array, sort_method_descending)\n    end\n    -- copy\
    \ the array to new_table\n    while table_index <= table_size do\n        new_table[table_index]\
    \ = array[table_index]\n        table_index = table_index + 1\n    end\n    return\
    \ new_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o9y0uxr.lua:64:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmp3o9y0uxr.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- your code here\n  local size =\
    \ 0\n  for k, v in pairs(array) do\n    size = size + 1\n  end\n  if size == 0\
    \ then\n    return {}\n  end\n  if size == 1 then\n    return {array[1]}\n  end\n\
    \  local sum = array[1] + array[size]\n  local even = false\n  if sum % 2 == 0\
    \ then\n    even = true\n  end\n  local new_array = {}\n  for i = 1, size do\n\
    \    new_array[i] = array[i]\n  end\n  for i = 1, size do\n    for j = 1, size\
    \ - i do\n      if even then\n        if new_array[j] < new_array[j + 1] then\n\
    \          new_array[j], new_array[j + 1] = new_array[j + 1], new_array[j]\n \
    \       end\n      else\n        if new_array[j] > new_array[j + 1] then\n   \
    \       new_array[j], new_array[j + 1] = new_array[j + 1], new_array[j]\n    \
    \    end\n      end\n    end\n  end\n  return new_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3kpki22.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmph3kpki22.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- Write your code here\n  return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp085gue0u.lua:24:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmp085gue0u.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- length of array\n    local len\
    \ = #array\n    -- sum of first value and last value\n    local sum = array[1]\
    \ + array[len]\n    -- sort function\n    local function comp(a, b)\n        if\
    \ sum % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    -- sort array\n    table.sort(array, comp)\n\
    \    -- return array\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpklpcrbfa.lua:19:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpklpcrbfa.lua:19: in local 'candidate'\n\t/tmp/tmpklpcrbfa.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum, result = 0, {}\n   \
    \ for i, v in ipairs(array) do\n        sum = sum + v\n        result[i] = v\n\
    \    end\n    if sum % 2 == 0 then\n        sort(result, function(a, b) return\
    \ a > b end)\n    else\n        sort(result)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52yqz03i.lua:22:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp52yqz03i.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp52yqz03i.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return array\n\
    \  end\n  if #array == 1 then\n    return array\n  end\n  local index_first =\
    \ 1\n  local index_last = #array\n  local sum = array[index_first] + array[index_last]\n\
    \  if sum % 2 == 0 then\n    for i = 1, #array do\n      for j = i + 1, #array\
    \ do\n        if array[i] < array[j] then\n          array[i], array[j] = array[j],\
    \ array[i]\n        end\n      end\n    end\n  else\n    for i = 1, #array do\n\
    \      for j = i + 1, #array do\n        if array[i] > array[j] then\n       \
    \   array[i], array[j] = array[j], array[i]\n        end\n      end\n    end\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- your code here\n  local function\
    \ sum_indices(arr)\n    local sum = 0\n    for k, v in pairs(arr) do\n      sum\
    \ = sum + k + v\n    end\n    return sum\n  end\n  local c = {}\n  for k, v in\
    \ pairs(array) do\n    table.insert(c, v)\n  end\n  if sum_indices(array) % 2\
    \ == 0 then\n    table.sort(c, function(a, b) return a > b end)\n  else\n    table.sort(c,\
    \ function(a, b) return a < b end)\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfac5mge4.lua:41:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpfac5mge4.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local s = 0\n  local len = #array\n\
    \  for i = 1, len do\n    s = s + array[i]\n  end\n  if s % 2 == 0 then\n    for\
    \ i = 1, len do\n      for j = 1, len - i do\n        if array[j] < array[j +\
    \ 1] then\n          array[j], array[j + 1] = array[j + 1], array[j]\n       \
    \ end\n      end\n    end\n  else\n    for i = 1, len do\n      for j = 1, len\
    \ - i do\n        if array[j] > array[j + 1] then\n          array[j], array[j\
    \ + 1] = array[j + 1], array[j]\n        end\n      end\n    end\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2bl7z9f.lua:47:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmph2bl7z9f.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local l1 = {}\n    local l2 = {}\n\
    \    local l3 = {}\n    local k = 1\n    local h = 1\n    local count = 0\n  \
    \  for i, v in ipairs(array) do\n        if k % 2 == 0 then\n            l1[h]\
    \ = v\n            h = h + 1\n        else\n            l2[h] = v\n          \
    \  h = h + 1\n        end\n        k = k + 1\n    end\n    if k > 2 then\n   \
    \     table.sort(l1)\n        table.sort(l2, function(a, b) return a > b end)\n\
    \        for i, v in ipairs(l1) do\n            count = count + 1\n          \
    \  l3[count] = v\n        end\n        for i, v in ipairs(l2) do\n           \
    \ count = count + 1\n            l3[count] = v\n        end\n    else\n      \
    \  l3 = array\n    end\n    return l3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2jb3gkc.lua:54:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2}\nstack traceback:\n\t/tmp/tmpd2jb3gkc.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- write your code here\n    if\
    \ #array == 0 then\n        return array\n    end\n    local is_odd = (array[1]\
    \ + array[#array]) % 2 == 1\n    local compare = function(x, y)\n        if x\
    \ == y then\n            return false\n        end\n        if is_odd then\n \
    \           return x < y\n        else\n            return x > y\n        end\n\
    \    end\n    table.sort(array, compare)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local first, last = array[1], array[#array]\n\
    \  if (first + last) % 2 == 0 then\n    table.sort(array, function(a, b) return\
    \ a > b end)\n  else\n    table.sort(array)\n  end\n  return array\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpea97nb9z.lua:17:\
    \ attempt to perform arithmetic on a nil value (local 'first')\nstack traceback:\n\
    \t/tmp/tmpea97nb9z.lua:17: in local 'candidate'\n\t/tmp/tmpea97nb9z.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    return --[[your code here--]]\n\
    end\n```\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2590zvxw.lua:18: unexpected symbol near ''`''

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb95cjg9i.lua:23:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmpb95cjg9i.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = array[1] + array[#array]\n\
    \  table.sort(array, function(x, y)\n    if sum % 2 == 0 then\n      return x\
    \ > y\n    else\n      return x < y\n    end\n  end)\n  return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzy3cb7lr.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpzy3cb7lr.lua:16: in local 'candidate'\n\t/tmp/tmpzy3cb7lr.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local result = {}\n    local length\
    \ = 0\n    for i, v in ipairs(array) do\n        table.insert(result, v)\n   \
    \     length = length + 1\n    end\n    if length < 2 then\n        return result\n\
    \    end\n    if ((result[1] + result[length]) % 2) == 0 then\n        table.sort(result,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(result, function(a,\
    \ b) return a < b end)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- 1. Given an empty table, return\
    \ an empty table.\n    if #array == 0 then\n        return {}\n    end\n    --\
    \ 2. Given a table with one element, return the table itself.\n    if #array ==\
    \ 1 then\n        return array\n    end\n    -- 3. return a colua of the given\
    \ table after sorting,\n    -- you will sort the given table in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    -- or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \    local sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n        --\
    \ array should be sorted in descending order.\n        for i = 1, #array - 1 do\n\
    \            for j = i + 1, #array do\n                if array[i] < array[j]\
    \ then\n                    array[i], array[j] = array[j], array[i]\n        \
    \        end\n            end\n        end\n    else\n        -- array should\
    \ be sorted in ascending order.\n        for i = 1, #array - 1 do\n          \
    \  for j = i + 1, #array do\n                if array[i] > array[j] then\n   \
    \                 array[i], array[j] = array[j], array[i]\n                end\n\
    \            end\n        end\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- check empty array\n    if #array\
    \ == 0 then\n        return array\n    end\n    -- check ascending and descending\n\
    \    if (array[1] + array[#array]) % 2 == 0 then\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(array, function(a, b) return\
    \ a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    for i, v in\
    \ ipairs(array) do\n        sum = sum + v\n    end\n    local function less(x,\
    \ y)\n        if sum % 2 == 0 then\n            return x > y\n        else\n \
    \           return x < y\n        end\n    end\n    table.sort(array, less)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vr3tucy.lua:37:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp5vr3tucy.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local table_index = {}\n    local\
    \ table_index_value = {}\n    local table_index_sort = {}\n    local table_index_value_sort\
    \ = {}\n    local value = 0\n    local flag = true\n    for i in ipairs(array)\
    \ do\n        table.insert(table_index, i)\n        table.insert(table_index_value,\
    \ array[i])\n    end\n    if array[1] == nil then\n        return {}\n    end\n\
    \    for i in ipairs(table_index_value) do\n        if (flag == true) then\n \
    \           for j in ipairs(table_index_value) do\n                if (table_index_value[i]\
    \ > table_index_value[j]) then\n                    value = table_index_value[i]\n\
    \                    table_index_value[i] = table_index_value[j]\n           \
    \         table_index_value[j] = value\n                end\n            end\n\
    \        else\n            for j in ipairs(table_index_value) do\n           \
    \     if (table_index_value[i] < table_index_value[j]) then\n                \
    \    value = table_index_value[i]\n                    table_index_value[i] =\
    \ table_index_value[j]\n                    table_index_value[j] = value\n   \
    \             end\n            end\n        end\n    end\n    for i in ipairs(table_index_value)\
    \ do\n        for j in ipairs(table_index) do\n            if (table_index_value[i]\
    \ == array[j]) then\n                table.insert(table_index_sort, j)\n     \
    \           table.insert(table_index_value_sort, table_index_value[i])\n     \
    \       end\n        end\n    end\n    if (table_index_sort[1] + table_index_sort[#table_index_sort])\
    \ % 2 == 0 then\n        flag = false\n    end\n    for i in ipairs(table_index_value)\
    \ do\n        if (flag == true) then\n            for j in ipairs(table_index_value)\
    \ do\n                if (table_index_value[i] > table_index_value[j]) then\n\
    \                    value = table\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3hoxb052.lua:77: ''end'' expected (to close ''if'' at line
    62) near <eof>

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporqvg3gq.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmporqvg3gq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum_first_last = array[1] +\
    \ array[#array]\n  if sum_first_last % 2 == 0 then\n    table.sort(array, function(a,\
    \ b) return a > b end)\n  else\n    table.sort(array)\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnkay1fb2.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpnkay1fb2.lua:16: in local 'candidate'\n\t/tmp/tmpnkay1fb2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = array[1] + array[#array]\n\
    \  if sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7r3oojs3.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp7r3oojs3.lua:16: in local 'candidate'\n\t/tmp/tmp7r3oojs3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if not array then\n        return\
    \ {}\n    end\n    local array_length = #array\n    if array_length == 0 then\n\
    \        return {}\n    end\n    local first = array[1]\n    local last = array[array_length]\n\
    \    if (first + last) % 2 == 0 then\n        table.sort(array, function(a, b)\
    \ return a > b end)\n    else\n        table.sort(array, function(a, b) return\
    \ a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if (#array % 2 == 0) then\n    table.sort(array,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(array)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5f_35zr3.lua:29:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmp5f_35zr3.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array)\n    end\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty2o12im.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpty2o12im.lua:16: in local 'candidate'\n\t/tmp/tmpty2o12im.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local result = {}\n  for i = 1, #array\
    \ do\n    result[i] = array[i]\n  end\n  table.sort(result, function(a, b)\n \
    \   if (#array + 1) % 2 == 0 then\n      return a > b\n    else\n      return\
    \ a < b\n    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yiq06hd.lua:39:\
    \ expected: {23, 21, 14, 11}\nactual: {11, 14, 21, 23}\nstack traceback:\n\t/tmp/tmp7yiq06hd.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function is_odd(num)\n  \
    \      return num % 2 == 1\n    end\n    local function sum(a, b)\n        return\
    \ a + b\n    end\n    local function table_sum(t)\n        local len = #t\n  \
    \      local half = math.floor(len / 2)\n        local first_half = table.pack(table.unpack(t,\
    \ 1, half))\n        local second_half = table.pack(table.unpack(t, half + 1,\
    \ len))\n        local sum_of_first_half = table.reduce(first_half, sum)\n   \
    \     local sum_of_second_half = table.reduce(second_half, sum)\n        return\
    \ sum_of_first_half + sum_of_second_half\n    end\n    local sum_of_array = table_sum(array)\n\
    \    local is_ascending = is_odd(sum_of_array)\n    local function compare(a,\
    \ b)\n        if is_ascending then\n            return a < b\n        else\n \
    \           return a > b\n        end\n    end\n    local function compare_sort(a,\
    \ b)\n        if a == b then\n            return 0\n        elseif compare(a,\
    \ b) then\n            return -1\n        else\n            return 1\n       \
    \ end\n    end\n    table.sort(array, compare_sort)\n    return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp671j9png.lua:27:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmp671j9png.lua:27:\
    \ in local 'table_sum'\n\t/tmp/tmp671j9png.lua:31: in local 'candidate'\n\t/tmp/tmp671j9png.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = array[1] + array[#array]\n\
    \  if sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7r3oojs3.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp7r3oojs3.lua:16: in local 'candidate'\n\t/tmp/tmp7r3oojs3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local len = #array\n    local is_odd\
    \ = len % 2 == 1\n    local left = is_odd and 1 or 2\n    local right = is_odd\
    \ and len or len - 1\n    local index = len\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpezttrvci.lua:34: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local array_sum = 0\n    for i,\
    \ v in ipairs(array) do\n        array_sum = array_sum + v\n    end\n    if array_sum\
    \ % 2 == 0 then\n        table.sort(array, function(x, y) return x > y end)\n\
    \    else\n        table.sort(array, function(x, y) return x < y end)\n    end\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymoqob_e.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpymoqob_e.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    local is_even = false\n    if (array[1] + array[#array])\
    \ % 2 == 0 then\n        is_even = true\n    end\n    if is_even then\n      \
    \  table.sort(array, function(a, b) return a > b end)\n    else\n        table.sort(array,\
    \ function(a, b) return a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local r = {table.unpack(array)}\n\
    \    local f = math.fmod(r[1] + r[#r], 2) == 0 and function(a, b) return a > b\
    \ end or function(a, b) return a < b end\n    table.sort(r, f)\n    return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0c1wmmo0.lua:17:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp0c1wmmo0.lua:17: in local 'candidate'\n\t/tmp/tmp0c1wmmo0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    local first = array[1]\n    local last = array[#array]\n\
    \    if (first + last) % 2 == 0 then\n        table.sort(array, function(a, b)\
    \ return a > b end)\n    else\n        table.sort(array, function(a, b) return\
    \ a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Write your code here\n    local\
    \ i = 1\n    local j = #array\n    local flag = true\n    while i < j do\n   \
    \     while i < j and array[i] < array[j] do\n            i = i + 1\n        end\n\
    \        if i < j then\n            array[i], array[j] = array[j], array[i]\n\
    \            j = j - 1\n        end\n        while i < j and array[i] < array[j]\
    \ do\n            j = j - 1\n        end\n        if i < j then\n            array[i],\
    \ array[j] = array[j], array[i]\n            i = i + 1\n        end\n    end\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pi9nh60.lua:44:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp2pi9nh60.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    local is_odd = false\n    if array[1] + array[#array] %\
    \ 2 == 1 then\n        is_odd = true\n    end\n    local function cmp(a, b)\n\
    \        if is_odd then\n            return a < b\n        else\n            return\
    \ a > b\n        end\n    end\n    table.sort(array, cmp)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzsvg08w.lua:39:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmppzsvg08w.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8k81plh.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmph8k81plh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    return\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoxizrz7.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpyoxizrz7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = array[1] + array[#array]\n\
    \  local is_odd = sum % 2 == 1\n  local function cmp(lhs, rhs)\n    if is_odd\
    \ then\n      return lhs < rhs\n    else\n      return lhs > rhs\n    end\n  end\n\
    \  local result = {}\n  for i = 1, #array do\n    result[i] = array[i]\n  end\n\
    \  table.sort(result, cmp)\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5t__7i2d.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp5t__7i2d.lua:16: in local 'candidate'\n\t/tmp/tmp5t__7i2d.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array < 2 then\n        return\
    \ array\n    end\n    local a = array[1]\n    local b = array[#array]\n    if\
    \ (a + b) % 2 == 0 then\n        table.sort(array, function(a, b) return a > b\
    \ end)\n    else\n        table.sort(array)\n    end\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- for k, v in pairs(array) do\n\
    \    --     print(k, v)\n    -- end\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        table.sort(array, function(v1, v2) return v1\
    \ > v2 end)\n    else\n        table.sort(array, function(v1, v2) return v1 <\
    \ v2 end)\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0dr84wbb.lua:19:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp0dr84wbb.lua:19: in local 'candidate'\n\t/tmp/tmp0dr84wbb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\t-- write your code here\n\tlocal\
    \ first=array[1]\n\tlocal last=array[#array]\n\tlocal sum=first+last\n\tlocal\
    \ table={}\n\tif #array==0 then\n\t\treturn table\n\telseif #array==1 then\n\t\
    \ttable[1]=first\n\t\treturn table\n\telseif sum%2==0 then\n\t\tfor i=1,#array\
    \ do\n\t\t\ttable[i]=array[#array-i+1]\n\t\tend\n\t\treturn table\n\telse\n\t\t\
    return array\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpou17hbte.lua:19:\
    \ attempt to perform arithmetic on a nil value (local 'first')\nstack traceback:\n\
    \t/tmp/tmpou17hbte.lua:19: in local 'candidate'\n\t/tmp/tmpou17hbte.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function copy(t)\n      \
    \  local result = {}\n        for i = 1, #t do\n            result[i] = t[i]\n\
    \        end\n        return result\n    end\n    local array2 = copy(array)\n\
    \    table.sort(array2)\n    if array[1] + array[#array] % 2 == 0 then\n     \
    \   local len = #array2\n        for i = 1, len/2 do\n            array2[i], array2[len-i+1]\
    \ = array2[len-i+1], array2[i]\n        end\n    end\n    return array2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoeurex04.lua:25:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpoeurex04.lua:25: in local 'candidate'\n\t/tmp/tmpoeurex04.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local isDescending = #array > 0\
    \ and array[1] + array[#array] % 2 == 0\n    table.sort(array, function(a, b)\n\
    \        if isDescending then\n            return a > b\n        else\n      \
    \      return a < b\n        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jehs54z.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp6jehs54z.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- your code here\n  local i,j =\
    \ 1,#array\n  while i<j do\n    if array[i]%2==0 and array[j]%2==1 then i=i+1\n\
    \    elseif array[i]%2==1 and array[j]%2==0 then j=j-1\n    elseif array[i]>array[j]\
    \ then array[i],array[j]=array[j],array[i]\n    else\n      i=i+1\n      j=j-1\n\
    \    end\n  end\n  if i==j and #array>1 and array[1]%2==0 and array[j]%2==0 then\
    \ array[i],array[1]=array[1],array[i] end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr99caxbz.lua:36:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpr99caxbz.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local function compare(a, b)\n  \
    \  if array[1] + array[#array] % 2 == 0 then\n      return a > b\n    else\n \
    \     return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewmohb_7.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 3, 4, 5, 2, 6, 1}\nstack traceback:\n\
    \t/tmp/tmpewmohb_7.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if not array then\n        return\
    \ {}\n    end\n    local function odd(a, b)\n        return a < b\n    end\n \
    \   local function even(a, b)\n        return a > b\n    end\n    if #array <=\
    \ 1 then\n        return array\n    end\n    local head = array[1]\n    local\
    \ last = array[#array]\n    if (head + last) % 2 == 0 then\n        table.sort(array,\
    \ even)\n    else\n        table.sort(array, odd)\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local temp_array\
    \ = {}\n  for k, v in pairs(array) do\n    sum = sum + v\n    table.insert(temp_array,\
    \ v)\n  end\n  if sum % 2 == 0 then\n    table.sort(temp_array, function(a, b)\
    \ return a > b end)\n  else\n    table.sort(temp_array, function(a, b) return\
    \ a < b end)\n  end\n  return temp_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0w7psv16.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp0w7psv16.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- TODO: Implement this function!\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1h598ix.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpe1h598ix.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local size = #array\n    local\
    \ sum = array[1] + array[size]\n    local compare = sum % 2 == 0 and (function(a,\
    \ b) return a > b end) or (function(a, b) return a < b end)\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4jhnjf6.lua:17:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpe4jhnjf6.lua:17: in local 'candidate'\n\t/tmp/tmpe4jhnjf6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Write your code here\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqdvgap9.lua:25:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpyqdvgap9.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local even, odd = {}, {}\n  for i,\
    \ v in ipairs(array) do\n    if (i + v) % 2 == 0 then\n      table.insert(even,\
    \ v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  table.sort(even)\n\
    \  table.sort(odd, function(a, b) return a > b end)\n  for i, v in ipairs(odd)\
    \ do\n    table.insert(even, i, v)\n  end\n  return even\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxul13z9.lua:37:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 2, 0, 1, 3, 4}\nstack traceback:\n\
    \t/tmp/tmphxul13z9.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local first, last = array[1], array[#array]\n\
    \  local sum = first + last\n  table.sort(array, sum % 2 == 0 and greater_or_equal\
    \ or less_or_equal)\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbj4f68jr.lua:17:\
    \ attempt to perform arithmetic on a nil value (local 'first')\nstack traceback:\n\
    \t/tmp/tmpbj4f68jr.lua:17: in local 'candidate'\n\t/tmp/tmpbj4f68jr.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function is_even(num)\n \
    \       return num % 2 == 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0oru_13r.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- no data to sort\n    if #array\
    \ == 0 then\n        return array\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe3yxc1g9.lua:33: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3kpki22.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmph3kpki22.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local n = #array\n    if n <= 1\
    \ then\n        return array\n    end\n    if (array[1] + array[n]) % 2 == 0 then\n\
    \        for i = 1, math.floor(n / 2) do\n            array[i], array[n - i +\
    \ 1] = array[n - i + 1], array[i]\n        end\n    end\n    table.sort(array)\n\
    \    return array\nend\n_exports.sort_array = sort_array\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpbec7j49q.lua:28: attempt to index a nil value (global '_exports')\n\
    stack traceback:\n\t/tmp/tmpbec7j49q.lua:28: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6f2zzun.lua:24:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpj6f2zzun.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local start = array[1]\n  local end\
    \ = array[#array]\n  local sum = start + end\n  table.sort(array, function(a,\
    \ b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n      return a <\
    \ b\n    end\n  end)\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpejy6ydhz.lua:17: <name> expected near ''end''

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    if #array == 1 then\n        return array\n    end\n   \
    \ local f = array[1]\n    local l = array[#array]\n    if (f + l) % 2 == 0 then\n\
    \        table.sort(array, function(a, b) return a > b end)\n    else\n      \
    \  table.sort(array, function(a, b) return a < b end)\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local new_array = {}\n    local\
    \ sign = #array == 0 or (array[1] + array[#array]) % 2 == 0 and -1 or 1\n    for\
    \ i, v in ipairs(array) do\n        local index = 1\n        for j, c in ipairs(new_array)\
    \ do\n            if sign * v < sign * c then\n                index = j\n   \
    \             break\n            end\n        end\n        table.insert(new_array,\
    \ index, v)\n    end\n    return new_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6szz4mez.lua:36:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 0, 1, 3, 4, 2}\nstack traceback:\n\
    \t/tmp/tmp6szz4mez.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function odd_even(a, b)\n\
    \        return (a + b) % 2 == 0\n    end\n    local function odd_even_sort(a,\
    \ b)\n        if odd_even(a, b) then\n            return a > b\n        else\n\
    \            return a < b\n        end\n    end\n    table.sort(array, odd_even_sort)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmw93bjk.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {4, 2, 0, 5, 3, 1}\nstack traceback:\n\
    \t/tmp/tmpcmw93bjk.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    local has_element\
    \ = false\n    for i = 1, #array do\n        sum = sum + array[i]\n        has_element\
    \ = true\n    end\n    if not has_element then\n        return array\n    end\n\
    \    local ascending = (sum % 2) == 1\n    for i = 1, #array - 1 do\n        for\
    \ j = i + 1, #array do\n            if ascending then\n                if array[i]\
    \ > array[j] then\n                    array[i], array[j] = array[j], array[i]\n\
    \                end\n            else\n                if array[i] < array[j]\
    \ then\n                    array[i], array[j] = array[j], array[i]\n        \
    \        end\n            end\n        end\n    end\n    return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1r93il4.lua:48:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpy1r93il4.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local a, b, c = 0, 0, 1\n  if #array\
    \ % 2 == 0 then\n    c = -1\n  end\n  for i = 1, #array do\n    a = array[i]\n\
    \    for j = i, #array do\n      b = array[j]\n      if c * (a - b) > 0 then\n\
    \        array[i], array[j] = b, a\n        a = b\n      end\n    end\n  end\n\
    \  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0_sfsdb.lua:38:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpz0_sfsdb.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6idy1poo.lua:23:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmp6idy1poo.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = array[1] + array[#array]\n\
    \  local function comp(a, b)\n    if sum % 2 == 0 then\n      return a > b\n \
    \   else\n      return a < b\n    end\n  end\n  table.sort(array, comp)\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoesekeu8.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpoesekeu8.lua:16: in local 'candidate'\n\t/tmp/tmpoesekeu8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local length = #array\n    if length\
    \ == 0 or length == 1 then\n        return array\n    end\n    local sum = array[1]\
    \ + array[length]\n    local is_odd = math.fmod(sum, 2) == 1\n    local i = 1\n\
    \    local j = length\n    while i < j do\n        if is_odd then\n          \
    \  if array[i] > array[j] then\n                array[i], array[j] = array[j],\
    \ array[i]\n            end\n        else\n            if array[i] < array[j]\
    \ then\n                array[i], array[j] = array[j], array[i]\n            end\n\
    \        end\n        i = i + 1\n        j = j - 1\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcw_pc5u9.lua:45:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 1, 0, 3, 4, 5}\nstack traceback:\n\
    \t/tmp/tmpcw_pc5u9.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array)\n    end\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty2o12im.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpty2o12im.lua:16: in local 'candidate'\n\t/tmp/tmpty2o12im.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array)\n    end\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty2o12im.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpty2o12im.lua:16: in local 'candidate'\n\t/tmp/tmpty2o12im.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Your code here\n    -- \u5192\
    \u6CE1\u6392\u5E8F\n    if array == nil or #array == 0 then\n        return {}\n\
    \    end\n    for i = 1, #array - 1 do\n        for j = 1, #array - i do\n   \
    \         if array[j] > array[j + 1] then\n                array[j], array[j +\
    \ 1] = array[j + 1], array[j]\n            end\n        end\n    end\n    if array[1]\
    \ + array[#array] % 2 == 0 then\n        return array\n    else\n        for i\
    \ = 1, #array / 2 do\n            array[i], array[#array - i + 1] = array[#array\
    \ - i + 1], array[i]\n        end\n        return array\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0oocr36h.lua:43:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmp0oocr36h.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local function sort_test(a, b)\n\
    \    if a + b % 2 == 0 then\n      return a > b\n    else\n      return a < b\n\
    \    end\n  end\n  table.sort(array, sort_test)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmyj2crv.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {2, 4, 0, 1, 3, 5, 6}\nstack traceback:\n\
    \t/tmp/tmptmyj2crv.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3kpki22.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmph3kpki22.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array)\n    end\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty2o12im.lua:16:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpty2o12im.lua:16: in local 'candidate'\n\t/tmp/tmpty2o12im.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array % 2 == 0 then\n     \
    \   table.sort(array, function(a, b) return a > b end)\n    else\n        table.sort(array)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybc94zc1.lua:29:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpybc94zc1.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = array[1] + array[#array]\n\
    \    local comp = (sum % 2 == 0) and function(a, b) return a > b end or function(a,\
    \ b) return a < b end\n    table.sort(array, comp)\n    return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3y5s5rkx.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp3y5s5rkx.lua:16: in local 'candidate'\n\t/tmp/tmp3y5s5rkx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array <= 1 then\n        return\
    \ array\n    end\n    if array[1] + array[#array] % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgfhxjyh.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmplgfhxjyh.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal sum, asc = array[1] + array[#array],\
    \ true\n\tif sum % 2 == 0 then\n\t\tasc = false\n\tend\n\tlocal temp\n\tfor i\
    \ = 1, #array - 1 do\n\t\tfor j = i + 1, #array do\n\t\t\tif asc then\n\t\t\t\t\
    if array[i] > array[j] then\n\t\t\t\t\ttemp = array[i]\n\t\t\t\t\tarray[i] = array[j]\n\
    \t\t\t\t\tarray[j] = temp\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif array[i] < array[j]\
    \ then\n\t\t\t\t\ttemp = array[i]\n\t\t\t\t\tarray[i] = array[j]\n\t\t\t\t\tarray[j]\
    \ = temp\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgk35kw2.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpvgk35kw2.lua:16: in local 'candidate'\n\t/tmp/tmpvgk35kw2.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if not next(array) then\n     \
    \   return array\n    end\n    -- write your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0po4p8w.lua:26:\
    \ expected: {5}\nactual: nil\nstack traceback:\n\t/tmp/tmpb0po4p8w.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Write your code here\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqdvgap9.lua:25:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpyqdvgap9.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3kpki22.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmph3kpki22.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- write your code here\n  local\
    \ newArray = array\n  local head = array[1]\n  local tail = array[#array]\n  if\
    \ (head + tail) % 2 == 0 then\n    table.sort(newArray, function(a, b) return\
    \ a > b end)\n  else\n    table.sort(newArray, function(a, b) return a < b end)\n\
    \  end\n  return newArray\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_za82yd.lua:20:\
    \ attempt to perform arithmetic on a nil value (local 'head')\nstack traceback:\n\
    \t/tmp/tmpi_za82yd.lua:20: in local 'candidate'\n\t/tmp/tmpi_za82yd.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local odd_checker = function (n)\n\
    \        if n % 2 == 0 then\n            return true\n        else\n         \
    \   return false\n        end\n    end\n    local sort_func = function (a, b)\n\
    \        if odd_checker(a + b) then\n            return a < b\n        else\n\
    \            return a > b\n        end\n    end\n    table.sort(array, sort_func)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s3ub89o.lua:39:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {1, 3, 5, 0, 2, 4}\nstack traceback:\n\
    \t/tmp/tmp5s3ub89o.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3kpki22.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmph3kpki22.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    if #array == 1 then\n        return array\n    end\n   \
    \ if (#array + array[1] + array[#array]) % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfeuzygy1.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpfeuzygy1.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local len = #array\n    local ret\
    \ = {}\n    local t = {}\n    for i = 1, len do\n        table.insert(t, {i, array[i]})\n\
    \    end\n    if len == 0 or len == 1 then\n        return array\n    end\n  \
    \  local odd = true\n    if (array[1] + array[len]) % 2 == 0 then\n        odd\
    \ = false\n    end\n    if odd then\n        table.sort(t, function(a, b)\n  \
    \          return a[2] < b[2]\n        end)\n    else\n        table.sort(t, function(a,\
    \ b)\n            return a[2] > b[2]\n        end)\n    end\n    for i = 1, len\
    \ do\n        table.insert(ret, t[i][2])\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    array = array or {}\n    if #array\
    \ == 0 or #array == 1 then\n        return array\n    end\n    local is_asc =\
    \ array[1] + array[#array] % 2 == 0\n    if is_asc then\n        table.sort(array)\n\
    \    else\n        table.sort(array, function(a, b) return a > b end)\n    end\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvygs52l.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpuvygs52l.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function cmp(a, b)\n    \
    \    if a[1] + a[#a] % 2 == 0 then\n            return a[1] < b[1]\n        else\n\
    \            return a[1] > b[1]\n        end\n    end\n    table.sort(array, cmp)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7pog209.lua:17:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpa7pog209.lua:17:\
    \ in function </tmp/tmpa7pog209.lua:16>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpa7pog209.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpa7pog209.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Implement your code here.\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopkbpr4z.lua:24:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmpopkbpr4z.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Write your code here\n    local\
    \ odd = false\n    local sum = 0\n    local temp = {}\n    local result = {}\n\
    \    if array[1] == nil then\n        return {}\n    end\n    if array[2] == nil\
    \ then\n        return array\n    end\n    for i=1, #array do\n        sum = sum\
    \ + array[i]\n    end\n    if sum % 2 == 0 then\n        odd = true\n    end\n\
    \    for i=1, #array do\n        temp[i] = array[i]\n    end\n    for i=1, #array\
    \ do\n        local min = 99999\n        local max = -1\n        local index =\
    \ 0\n        for j=1, #temp do\n            if temp[j] < min then\n          \
    \      min = temp[j]\n                index = j\n            end\n           \
    \ if temp[j] > max then\n                max = temp[j]\n                index\
    \ = j\n            end\n        end\n        if odd then\n            result[i]\
    \ = min\n            temp[index] = 99999\n        else\n            result[i]\
    \ = max\n            temp[index] = -1\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpot4g3a.lua:66:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 4, 4, 4, 4}\nstack traceback:\n\
    \t/tmp/tmpbpot4g3a.lua:66: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif #array == 0 then\n\t\treturn array\n\
    \tend\n\tif array[1] % 2 ~= array[#array] % 2 then\n\t\ttable.sort(array)\n\t\
    else\n\t\ttable.sort(array, function(a, b) return a > b end)\n\tend\n\treturn\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    for i, v in\
    \ ipairs(array) do\n        sum = sum + i + v\n    end\n    if sum % 2 == 0 then\n\
    \        table.sort(array, function(a, b) return a > b end)\n    else\n      \
    \  table.sort(array)\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wgrtip2.lua:33:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmp0wgrtip2.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array < 2 then\n        return\
    \ array\n    end\n    local reverse = true\n    if (array[1] + array[#array])\
    \ % 2 == 1 then\n        reverse = false\n    end\n    table.sort(array, function(x,\
    \ y)\n        if reverse then\n            return x > y\n        else\n      \
    \      return x < y\n        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Write your code here\n    --\n\
    \    --               array { 1, 2, 4, 5, 6 }\n    --                  |     \
    \     |\n    --   sum is odd(2 + 6)         |\n    --                  |     \
    \  sum is even(1 + 5)\n    --   ascending order(index 1 + index 5)\n    --   array\
    \ { 1, 2, 5, 4, 6 }\n    --\n    --   find index of value 1,  array[index] = 1\n\
    \    --       right_index = 5\n    --       left_index = 1\n    --       sum_index\
    \ = left_index + right_index\n    --   sum of index is even(1 + 5)\n    --   \
    \    sort in descending order\n    --       array[right_index] < array[left_index]\n\
    \    --\n    --\n    --   find index of value 5,  array[index] = 5\n    --   \
    \    right_index = 4\n    --       left_index = 2\n    --       sum_index = left_index\
    \ + right_index\n    --   sum of index is odd(2 + 4)\n    --       sort in ascending\
    \ order\n    --       array[right_index] > array[left_index]\n    --\n    -- \
    \  find index of value 4,  array[index] = 4\n    --       right_index = 2\n  \
    \  --       left_index = 3\n    --       sum_index = left_index + right_index\n\
    \    --   sum of index is even(3 + 2)\n    --       sort in descending order\n\
    \    --       array[right_index] < array[left_index]\n    --\n    --   find index\
    \ of value 2,  array[index] = 2\n    --       right_index = 6\n    --       left_index\
    \ = 0\n    --       sum_index = left_index + right_index\n    --   sum of index\
    \ is even(0 + 6)\n    --       sort in descending order\n    --       array[right_index]\
    \ < array[left_index]\n    --\n    --   find index of value 6,  array[index] =\
    \ 6\n    --       right_index = 1\n    --       left_index = 4\n    --       sum_index\
    \ = left_index + right\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv0gbc6ug.lua:75: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoremj8k.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpyoremj8k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3kpki22.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmph3kpki22.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    for k, v in\
    \ pairs(array) do\n        sum = sum + k + v\n    end\n    local method = (sum\
    \ % 2 == 0) and function(a, b) return a > b end or function(a, b) return a < b\
    \ end\n    table.sort(array, method)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgldh8icc.lua:30:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpgldh8icc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- return {}\n    -- return array\n\
    \    -- return {0, 1, 2, 3, 4, 5}\n    -- return {6, 5, 4, 3, 2, 1, 0}\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3crdlgua.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp3crdlgua.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local length = #array\n    if length\
    \ < 2 then\n        return array\n    end\n    local sum = array[1] + array[length]\n\
    \    local logic = sum % 2 == 0 and true or false\n    table.sort(array, function(a,\
    \ b)\n        if logic then\n            return a > b\n        else\n        \
    \    return a < b\n        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local b = {}\n    local i = 1\n\
    \    while i <= #array do\n        table.insert(b, i, array[i])\n        i = i\
    \ + 1\n    end\n    if (#array > 0 and #array % 2 == 0) or (#array > 0 and array[1]\
    \ % 2 == 0) then\n        table.sort(b, function(a, b) return a > b end)\n   \
    \ else\n        table.sort(b, function(a, b) return a < b end)\n    end\n    return\
    \ b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnlv_xbh.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmppnlv_xbh.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Check the given table.\n   \
    \ assert(type(array) == \"table\", \"param #1 must be a table\")\n    local n\
    \ = #array\n    if n == 0 then\n        return array\n    end\n    -- Create a\
    \ temp table to save the original table.\n    local temp = {}\n    for i = 1,\
    \ n do\n        temp[i] = array[i]\n    end\n    -- Sort the temp table.\n   \
    \ if (temp[1] + temp[n]) % 2 == 0 then\n        -- Even.\n        table.sort(temp,\
    \ function(a, b) return a > b end)\n    else\n        -- Odd.\n        table.sort(temp,\
    \ function(a, b) return a < b end)\n    end\n    -- Return the temp table.\n \
    \   return temp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for k, v in pairs(array)\
    \ do\n    sum = sum + v\n  end\n  local arr = {}\n  for k, v in pairs(array) do\n\
    \    table.insert(arr, v)\n  end\n  if (sum % 2 == 0) then\n    table.sort(arr,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(arr, function(a, b)\
    \ return a < b end)\n  end\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zt5s0v2.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp0zt5s0v2.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    local ans =\
    \ {}\n    for i, v in ipairs(array) do\n        ans[i] = v\n        sum = sum\
    \ + v\n    end\n    if sum % 2 == 0 then\n        table.sort(ans, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(ans)\n    end\n    return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcinp5jl.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmppcinp5jl.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array < 2 then\n    return array\n\
    \  end\n  local f,l = array[1], array[#array]\n  if (f+l)%2 == 0 then\n    return\
    \ nil\n  end\n  table.sort(array)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr58i2ycf.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: nil\nstack traceback:\n\t/tmp/tmpr58i2ycf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- Please write your code here\n\
    \    local new_array = {}\n    for i, v in ipairs(array) do\n        new_array[i]\
    \ = v\n    end\n    if #new_array == 0 then\n        return new_array\n    end\n\
    \    if new_array[1] + new_array[#new_array] % 2 == 0 then\n        for i = 1,\
    \ #new_array - 1 do\n            for j = i + 1, #new_array do\n              \
    \  if new_array[i] < new_array[j] then\n                    new_array[i], new_array[j]\
    \ = new_array[j], new_array[i]\n                end\n            end\n       \
    \ end\n    else\n        for i = 1, #new_array - 1 do\n            for j = i +\
    \ 1, #new_array do\n                if new_array[i] > new_array[j] then\n    \
    \                new_array[i], new_array[j] = new_array[j], new_array[i]\n   \
    \             end\n            end\n        end\n    end\n    return new_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfoqf0ses.lua:50:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpfoqf0ses.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return array\n\
    \  end\n  local total = 0\n  for index, value in ipairs(array) do\n    total =\
    \ total + value\n  end\n  if total % 2 == 0 then\n    table.sort(array, function(a,\
    \ b) return a > b end)\n  else\n    table.sort(array, function(a, b) return a\
    \ < b end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkvktj_m.lua:37:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmprkvktj_m.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- Write your code here\n  local\
    \ sum = array[1] + array[#array]\n  if sum % 2 == 0 then\n    for i = 1, #array\
    \ - 1 do\n      for j = i + 1, #array do\n        if array[i] < array[j] then\n\
    \          array[i], array[j] = array[j], array[i]\n        end\n      end\n \
    \   end\n  else\n    for i = 1, #array - 1 do\n      for j = i + 1, #array do\n\
    \        if array[i] > array[j] then\n          array[i], array[j] = array[j],\
    \ array[i]\n        end\n      end\n    end\n  end\n  return array\nend\nreturn\
    \ sort_array\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4xu3bn_3.lua:38: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array > 1 then\n    local i,\
    \ j, a, b = 2, #array, array[1], array[#array]\n    if (a + b) % 2 == 0 then\n\
    \      table.sort(array, function(x, y) return x > y end)\n    else\n      table.sort(array)\n\
    \    end\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- your code here\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9u65_dv.lua:25:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpa9u65_dv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = array[1] + array[#array]\n\
    \  local asc = sum % 2 == 1\n  if #array < 2 then\n    return array\n  end\n \
    \ local new = {}\n  for i = 1, #array do\n    new[i] = array[i]\n  end\n  for\
    \ i = 1, #new do\n    for j = i + 1, #new do\n      if asc then\n        if new[i]\
    \ > new[j] then\n          new[i], new[j] = new[j], new[i]\n        end\n    \
    \  else\n        if new[i] < new[j] then\n          new[i], new[j] = new[j], new[i]\n\
    \        end\n      end\n    end\n  end\n  return new\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp058eyb8k.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp058eyb8k.lua:16: in local 'candidate'\n\t/tmp/tmp058eyb8k.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ array\n    end\n    local function is_odd(number)\n        return number % 2\
    \ == 1\n    end\n    local sum = array[1] + array[#array]\n    if is_odd(sum)\
    \ then\n        table.sort(array)\n    else\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- your code here\n    local c=0\n\
    \    local arr={}\n    local arr1={}\n    local arr2={}\n    local a={}\n    local\
    \ b={}\n    local k=0\n    local k1=0\n    local k2=0\n    local kk=0\n    local\
    \ k1=0\n    for i,v in ipairs(array) do\n        c=c+1\n    end\n    if c==0 then\
    \ return {}\n    elseif c==1 then return array\n    else\n        for i,v in ipairs(array)\
    \ do\n            if i==1 then\n                k=k+1\n                arr[k]=v\n\
    \            elseif i==c then\n                k1=k1+1\n                arr1[k1]=v\n\
    \            else\n                k2=k2+1\n                arr2[k2]=v\n     \
    \       end\n        end\n        local sum=arr[1]+arr1[1]\n        if sum%2==0\
    \ then\n            for i,v in ipairs(arr2) do\n                for j,k in ipairs(arr2)\
    \ do\n                    if v>k then\n                        local temp=v\n\
    \                        arr2[i]=k\n                        arr2[j]=temp\n   \
    \                 end\n                end\n            end\n            for i,v\
    \ in ipairs(arr2) do\n                a[i]=v\n            end\n            for\
    \ i,v in ipairs(arr) do\n                kk=kk+1\n                a[kk]=v\n  \
    \          end\n            for i,v in ipairs(arr1) do\n                k1=k1+1\n\
    \                a[k1]=v\n            end\n            return a\n        else\n\
    \            for i,v in ipairs(arr2) do\n                for j,k in ipairs(arr2)\
    \ do\n                    if v<k then\n                        local temp=v\n\
    \                        arr2[i]=k\n                        arr2[j]=temp\n   \
    \                 end\n                end\n            end\n            for i,v\
    \ in ipairs(arr2) do\n                b[i]=v\n            end\n            for\
    \ i,v in ipairs(arr) do\n                kk=kk+1\n                b[kk]=\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5_iyxr13.lua:85: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- your code here\n  local temp =\
    \ 0\n  local is_even = false\n  local len = #array\n  for i = 1, len do\n    for\
    \ j = 1, len do\n      if (i+j)%2 == 0 then\n        is_even = true\n      else\n\
    \        is_even = false\n      end\n      if array[i] > array[j] and is_even\
    \ == true then\n        temp = array[i]\n        array[i] = array[j]\n       \
    \ array[j] = temp\n      elseif array[i] < array[j] and is_even == false then\n\
    \        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n\
    \      end\n    end\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka92t9_o.lua:46:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {1, 3, 2, 4, 0, 5}\nstack traceback:\n\
    \t/tmp/tmpka92t9_o.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
