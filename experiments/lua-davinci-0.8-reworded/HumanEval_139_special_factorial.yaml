name: HumanEval_139_special_factorial
language: lua
prompt: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) = n!\
  \ * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
  -- 288\n-- The function will receive an integer as input and should return the special\n\
  -- factorial of this integer.\nlocal function special_factorial(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
  \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
  \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
  \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- your code here\n    if n < 0 then\n        return 0\n    end\n\
    \    return math.factorial(n) * math.factorial(n-1)\nend", "    local function\
    \ factorial(n)\n        if n == 0 then\n            return 1\n        else\n \
    \           return n * factorial(n - 1)\n        end\n    end", "  local val =\
    \ 1\n  for i = n, 1, -1 do\n    val = val * factorial(i)\n  end\n  return val\n\
    end", "\tlocal a=1\n\tlocal k=n-1\n\tif n==0 then \n\t\ta=1\n\telse\n\t\tfor i=1,n\
    \ do\n\t\t\ta=a*i\n\t\tend\n\t\twhile k~=0 do\n\t\t\tfor j=1,k do\n\t\t\t\ta=a*j\n\
    \t\t\tend\n\t\t\tk=k-1\n\t\tend\n\tend\n\treturn a\nend", "    -- Your code here\n\
    end", "    assert(n > 0, \"n should be a positive integer.\")\n    local r = 1\n\
    \    for i = n, 1, -1 do\n        r = r * i\n    end\n    return r\nend", "  local\
    \ factorial = 1\n  for i = n, 1, -1 do\n    factorial = factorial * factorial_recursive(i)\n\
    \  end\n  return factorial\nend", "  local function factorial(m)\n    if m < 2\
    \ then\n      return 1\n    else\n      return m * factorial(m - 1)\n    end\n\
    \  end", "    if n == 0 then\n        return 1\n    else\n        return n * special_factorial(n\
    \ - 1)\n    end\nend", "    local result = 1\n    for i = 1, n do\n        result\
    \ = result * i\n    end\n    return result\nend", "  return 42\nend", "\tlocal\
    \ aux = 1\n\twhile n > 0 do\n\t\taux = aux * n * (n-1)\n\t\tn = n - 2\n\tend\n\
    \treturn aux\nend", "  if n <= 0 then return \"Input error\" end\n  local result\
    \ = 1\n  for i = n, 1, -1 do\n    result = result * factorial(i)\n  end\n  return\
    \ result\nend", "    -- TODO: Implement me\nend", "  -- your solution here\nend",
  "  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend", "    return 0\nend", "    local acc = 1\n    for i\
    \ = n, 2, -1 do\n        acc = acc * i\n    end\n    return acc\nend", "  -- YOUR\
    \ CODE HERE\n  local result = 1\n  for i = n, 1, -1 do\n    result = result *\
    \ factorial(i)\n  end\n  return result\nend", "  if n == 0 then\n    return 1\n\
    \  else\n    return n * special_factorial(n - 1)\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  return factorial(n) * special_factorial(n - 1)\nend",
  "  local factorial = 1\n  for i = n, 1, -1 do\n    factorial = factorial * factorial_for(i)\n\
    \  end\n  return factorial\nend", "  local result = 1\n  if n == 0 then\n    return\
    \ 1\n  end\n  for i = 1, n do\n    result = result * i\n  end\n  return result\n\
    end", "    if n < 1 then\n        return nil\n    end\n    local sf = 1\n    for\
    \ i = n, 1, -1 do\n        sf = sf * i\n    end\n    return sf\nend", "    if\
    \ n == 0 then\n        return 1\n    else\n        return n * special_factorial(n\
    \ - 1)\n    end\nend", "  local acc = 1\n  for i = n, 1, -1 do\n    acc = acc\
    \ * factorial(i)\n  end\n  return acc\nend", "    local factorial = 1\n    for\
    \ i = n, 1, -1 do\n        factorial = factorial * i\n    end\n    return factorial\n\
    end", "\tif n <= 0 then\n\t\treturn 1\n\tend\n\tlocal a = n\n\twhile n > 1 do\n\
    \t\ta = a * (n - 1)\n\t\tn = n - 1\n\tend\n\treturn a\nend", "  if n < 1 then\
    \ return 0 end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend", "\t-- body\n\tlocal ret = 1\n\tlocal fact\
    \ = 1\n\tfor i = n,1,-1 do\n\t\tfact = fact * i\n\t\tret = ret * fact\n\tend\n\
    \treturn ret\nend", "  -- Insert your code here\nend", "    return n > 0 and n\
    \ * special_factorial(n - 1) or 1\nend", "    local result = 1\n    for i = n,\
    \ 1, -1 do\n        result = result * i\n    end\n    return result\nend", " \
    \   if n == 0 then\n        return 1\n    else\n        return n * special_factorial(n\
    \ - 1)\n    end\nend", "  local ret = 1\n  for i = 1, n do\n    ret = ret * factorial(i)\n\
    \  end\n  return ret\nend", "  local total = 1\n  for i = 1, n do\n    total =\
    \ total * i\n  end\n  return total\nend", "  local fact = 1\n  for i = 1, n do\n\
    \    fact = fact * i\n  end\n  return fact\nend", "  -- YOUR CODE HERE\n  local\
    \ result = 1\n  for i = 1, n do\n    result = result * factorial(i)\n  end\n \
    \ return result\nend", "    local f = n\n    while n > 1 do\n        f = f * (n\
    \ - 1)\n        n = n - 1\n    end\n    return f\nend", "    local res = 1\n \
    \   for i = n, 2, -1 do\n        res = res * n * (n - 1)\n        n = n - 2\n\
    \    end\n    return res\nend", "    local r = 1\n    for i = n, 1, -1 do\n  \
    \      r = r * factorial(i)\n    end\n    return r\nend", "    local factorial\
    \ = 1\n    for i = 1, n do\n        factorial = factorial * i\n    end\n    return\
    \ factorial\nend", "    -- TODO: write your code here\nend", "  if n == 0 then\n\
    \    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend", "  local result = 1\n  for\
    \ i = n, 1, -1 do\n    result = result * factorial(i)\n  end\n  return result\n\
    end", "    local factorial = 1\n    for i = 1, n do\n        factorial = factorial\
    \ * i\n    end\n    return factorial\nend", "  local function factorial(n)\n \
    \   if n == 0 then\n      return 1\n    else\n      return n * factorial(n - 1)\n\
    \    end\n  end", "    return n < 2 and 1 or n * special_factorial(n - 1)\nend",
  "    if n < 0 then\n        return 0\n    end\n    local factorial = 1\n    for\
    \ i = n, 1, -1 do\n        factorial = factorial * i\n    end\n    return factorial\n\
    end", "    -- YOUR CODE HERE\nend", "  local result = 1\n  for i = n, 1, -1 do\n\
    \    result = result * factorial(i)\n  end\n  return result\nend", "  if n < 0\
    \ then return nil end\n  if n == 0 then return 1 end\n  local nFactorial = 1\n\
    \  for i = n, 1, -1 do\n    nFactorial = nFactorial * i\n  end\n  return nFactorial\n\
    end", "    local n_factorial = 1\n    local special_factorial = 1\n    for i =\
    \ n, 1, -1 do\n        n_factorial = n_factorial * i\n        special_factorial\
    \ = special_factorial * n_factorial\n    end\n    return special_factorial\nend",
  "  local factorial = 1\n  while n > 0 do\n    factorial = factorial * n\n    n =\
    \ n - 1\n  end\n  return factorial\nend", "    if n == 0 then\n        return\
    \ 1\n    else\n        return n * special_factorial(n - 1)\n    end\nend", " \
    \   if n <= 0 then\n        return 0\n    end\n    local result = 1\n    for i\
    \ = n, 1, -1 do\n        result = result * i\n    end\n    return result\nend",
  "  local result = 1\n  if n == 0 then\n    return 1\n  end\n  while n >= 0 do\n\
    \    result = result * (n+1)\n    n = n - 1\n  end\n  return result\nend", " \
    \   if n > 0 then\n        -- implement the function here\n    end\nend", "  if\
    \ n == 0 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend", "  if n <= 0 then\n    return nil\n  end\n  return n * special_factorial(n\
    \ - 1)\nend", "    if n <= 0 then\n        return nil\n    end\n    local fac\
    \ = 1\n    for i = n, 1, -1 do\n        fac = fac * factorial(i)\n    end\n  \
    \  return fac\nend", "  -- your code here\n  -- use brazilian_factorial(m)\n \
    \ --local n = 4\n  local i = n-1\n  local fac = n\n  while i >= 1 do\n    fac\
    \ = fac * i\n    i = i - 1\n  end\n  return fac\nend", end, '  local result =
    1', "    if n <= 0 then\n        return 1\n    end\n    local result = 1\n   \
    \ for i = n, 1, -1 do\n        result = result * factorial(i)\n    end\n    return\
    \ result\nend", "    -- your code here\n    local f = 1\n    for i = 1, n do\n\
    \        f = f * i\n    end\n    return f\nend", "    if n < 1 then\n        return\
    \ nil\n    end\n    local result = 1\n    for i = n, 1, -1 do\n        result\
    \ = result * i\n    end\n    return result\nend", "\tlocal factorial = 1\n\tfor\
    \ i = n, 1, -1 do\n\t\tfactorial = factorial * i\n\tend\n\treturn factorial\n\
    end", "    -- your code here\nend", "    if n == 0 then\n        return 1\n  \
    \  else\n        local value = n\n        while n > 1 do\n            value =\
    \ value * (n - 1)\n            n = n - 1\n        end\n        return value\n\
    \    end\nend", "  local fact = 1\n  for i = 1, n do\n    fact = fact * i\n  end\n\
    \  return fact\nend", "    if n == 0 then\n        return 1\n    else\n      \
    \  return n * special_factorial(n - 1)\n    end\nend", "  -- TODO: write this\n\
    end", "  local res = 1\n  for i = 1, n do\n    res = res * i\n  end\n  return\
    \ res\nend", "  local result = 1\n  for i = 1, n do\n    result = result * factorial(i)\n\
    \  end\n  return result\nend", "  if n <= 0 then\n    return 1\n  end\n  return\
    \ n * special_factorial(n - 1)\nend", "\tlocal product = 1\n\tfor i = n, 1, -1\
    \ do\n\t\tproduct = product * factorial(i)\n\tend\n\treturn product\nend", " \
    \ -- TODO\nend", "    if n <= 0 then\n        return 0\n    end\n    local retval\
    \ = 1\n    for i = n, 1, -1 do\n        retval = retval * i\n    end\n    return\
    \ retval\nend", "  local factorial = n\n  for i = n - 1, 1, -1 do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend", "    -- Insert your code here\n\
    \    local f, i = 1, 1\n    while i <= n do\n        f = f * i\n        i = i\
    \ + 1\n    end\n    return f\nend", "    if n <= 0 then\n        return nil\n\
    \    end\n    local factorial = 1\n    for i = n, 1, -1 do\n        factorial\
    \ = factorial * factorial_iter(i)\n    end\n    return factorial\nend", "  return\
    \ n * special_factorial(n - 1)\nend", "    if n == 0 then\n        return 1\n\
    \    else\n        return n * special_factorial(n - 1)\n    end\nend", "    local\
    \ factorial = 1\n    local divisor = 1\n    while n > 0 do\n        factorial\
    \ = factorial * n\n        divisor = divisor * factorial\n        n = n - 1\n\
    \    end\n    return divisor\nend", "  local res = 1\n  for i = n, 1, -1 do\n\
    \    res = res * factorial(i)\n  end\n  return res\nend", "    local result =\
    \ 1\n    if n > 0 then\n        for i = 1, n do\n            result = result *\
    \ factorial(i)\n        end\n    end\n    return result\nend", "    return nil\n\
    end", "\t-- TODO: Write your code here\nend", "    if n < 0 then return nil end\n\
    \    local result = 1\n    for i = n, 1, -1 do\n        result = result * factorial(i)\n\
    \    end\n    return result\nend", end, "  local x = 1\n  while n > 0 do\n   \
    \ x = x * n\n    n = n - 1\n  end\n  return x\nend", "    if n < 0 then\n    \
    \    return nil\n    end\n    local result = 1\n    for i = n, 1, -1 do\n    \
    \    result = result * factorial(i)\n    end\n    return result\nend", "  return\
    \ 0\nend", "  local fac = 1\n  for i = 1, n do\n    fac = fac * i\n  end\n  return\
    \ fac\nend", "  if n <= 0 then\n    return nil\n  end\n  local result = 1\n  while\
    \ n > 0 do\n    result = result * n\n    n = n - 1\n  end\n  return result\nend",
  "  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend", "  return nil\nend", "  if n < 0 then\n    return nil\n  end\n \
    \ if n == 0 then\n    return 1\n  end\n  local acc = 1\n  for i = 1, n do\n  \
    \  acc = acc * factorial(i)\n  end\n  return acc\nend", "    if n < 0 then\n \
    \       return nil\n    end\n    local fac = 1\n    for i = n, 1, -1 do\n    \
    \    fac = fac * i\n    end\n    return fac\nend", "    -- Write your code here\n\
    \    local prod = 1\n    for i = 1, n do\n        prod = prod * i\n    end\n \
    \   return prod\nend", "  if n == 0 then\n    return 1\n  else\n    return n *\
    \ special_factorial(n - 1)\n  end\nend", "  local result = 1\n  for i = n, 1,\
    \ -1 do\n    result = result * i\n  end\n  return result\nend", "  local result\
    \ = 1\n  for i = 1, n do\n    result = result * factorial(i)\n  end\n  return\
    \ result\nend", '  local sum = 1', "  local f = 1\n  while n > 0 do\n    f = f\
    \ * n * (n - 1)\n    n = n - 2\n  end\n  return f\nend", "  if n == 0 then\n \
    \   return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend", " \
    \ local acc = 1\n  while n > 0 do\n    acc = acc * n * (n - 1)\n    n = n - 2\n\
    \  end\n  return acc\nend", "  if n > 0 then\n    local s = 1\n    for i = n,\
    \ 1, -1 do\n      s = s * i\n    end\n    return s\n  else\n    return 1\n  end\n\
    end", "  -- Your code here\nend", "    -- TODO: Fill in the function\nend", " \
    \ n = n or 0\n  local r = 1\n  while n > 0 do\n    r = r * factorial(n)\n    n\
    \ = n - 1\n  end\n  return r\nend", "  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend", "\t--\n\t-- YOUR\
    \ CODE HERE\n\t--\nend", "\tif n == 0 then\n\t\treturn 1\n\telse\n\t\treturn n\
    \ * special_factorial(n-1)\n\tend\nend", "  local factorial = 1\n  for i = n,\
    \ 1, -1 do\n    factorial = factorial * i\n  end\n  return factorial\nend", " \
    \ return n\nend", "    if n == 0 then\n        return 1\n    else\n        return\
    \ n * special_factorial(n - 1)\n    end\nend", "    if n == 0 then\n        return\
    \ 1\n    else\n        return n * special_factorial(n - 1)\n    end\nend", " \
    \ -- Your code here\nend", "  if n <= 0 then\n    return nil\n  end\n  local result\
    \ = 1\n  while n >= 1 do\n    result = result * n\n    n = n - 1\n  end\n  return\
    \ result\nend", "  -- your code here\n  if n <= 0 then return 0 end\n  local res\
    \ = 1\n  for i = n, 1, -1 do\n    res = res * i\n  end\n  return res\nend", " \
    \ -- TODO: Implement this function\nend", "  local function factorial(n)\n   \
    \ if n == 0 then\n      return 1\n    else\n      return n * factorial(n - 1)\n\
    \    end\n  end", "  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend", "  -- To-do: complete this function\n  local fact=1\n  local\
    \ result=1\n  for i=n,1,-1 do\n    fact=fact*i\n    result=result*fact\n  end\n\
    \  return result\nend", "  local temp = n\n  local answer = 1\n  for i = 1, n\
    \ do\n    answer = answer * temp\n    temp = temp - 1\n  end\n  return answer\n\
    end", "  return n\nend", "    if n == 0 then\n        return 1\n    else\n   \
    \     return n * special_factorial(n - 1)\n    end\nend", "  -- Write your code\
    \ here\nend", "  local prod = 1\n  for i = 1, n do\n    prod = prod * factorial(i)\n\
    \  end\n  return prod\nend", "  if n < 1 then return nil end\n  local prod = 1\n\
    \  for i = n, 1, -1 do\n    prod = prod * factorial(i)\n  end\n  return prod\n\
    end", "  if n <= 0 then return 1 end\n  return n * special_factorial(n - 1)\n\
    end", "\tlocal fac = 1\n\tfor i = n, 1, -1 do\n\t\tfac = fac * factorial(i)\n\t\
    end\n\treturn fac\nend", "  if n == 0 then\n    return 1\n  else\n    return n\
    \ * special_factorial(n - 1)\n  end\nend", "    if n == 0 then\n        return\
    \ 1\n    else\n        return n * special_factorial(n - 1)\n    end\nend", " \
    \   if n < 0 then return nil end\n    local result = 1\n    for i = n, 1, -1 do\n\
    \        result = result * factorial(i)\n    end\n    return result\nend", " \
    \ -- TODO: Implement me!\nend", "  return math.sqrt(brazilian_factorial(n) / factorial(n))\n\
    end", "    if n == 0 then\n        return 1\n    else\n        return n * special_factorial(n\
    \ - 1)\n    end\nend", "    local result = 1\n    for i = n, 1, -1 do\n      \
    \  result = result * i\n    end\n    return result\nend", "    return (function\
    \ (x)\n        local res = 1\n        for i = x, 1, -1 do\n            res = res\
    \ * i\n        end\n        return res\n    end)(n)\nend", "  -- BEGIN SOLUTION\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\n  -- END SOLUTION\nend", "  if n < 1 then\n    return nil\n  end\n  local\
    \ result = 1\n  for i = 1, n do\n    result = result * i\n  end\n  for i = 1,\
    \ n - 1 do\n    result = result * i\n  end\n  return result\nend", "  local sf\
    \ = 1\n  for i = 1, n do\n    sf = sf * factorial(i)\n  end\n  return sf\nend",
  "    if (n > 0) then\n        return n * special_factorial(n - 1)\n    else\n  \
    \      return 1\n    end\nend", "  local result = 1\n  for i = 1, n do\n    result\
    \ = result * (factorial(i))\n  end\n  return result\nend", "  -- your solution\
    \ here\nend", "  -- TODO: Write this function!\nend", "  local count = n\n  local\
    \ i = 1\n  local f = 1\n  while i < count do\n    f = f * n\n    n = n - 1\n \
    \   i = i + 1\n  end\n  return f\nend", "    return 0\nend", "\tif n > 0 then\n\
    \t\tlocal fact = 1\n\t\tfor i = 1, n do\n\t\t\tfact = fact * (i - 1) * i\n\t\t\
    end\n\t\treturn fact\n\tend\nend", "  return 0 -- todo: write solution here\n\
    end", "  local ret = 1\n  for i = 1, n do\n    ret = ret * i\n  end\n  return\
    \ ret\nend", '  local total = 1', "  return n==0 and 1 or n*special_factorial(n-1)\n\
    end", "    if n == 0 then\n        return 1\n    else\n        return n * special_factorial(n\
    \ - 1)\n    end\nend", "  local f = 1\n  while n > 0 do\n    f = f * n * (n -\
    \ 1)\n    n = n - 2\n  end\n  return f\nend", "  if n <= 0 then\n    return 0\n\
    \  end\n  local ret = 1\n  while n > 0 do\n    ret = ret * n\n    n = n - 1\n\
    \  end\n  return ret\nend", "    --     local n = n or 0\n    --     return n\
    \ == 0 and 1 or n * special_factorial(n - 1)\n    local a = 1\n    for i = 1,\
    \ n do\n        a = a * i\n    end\n    return a\nend", "    local fact = 1\n\
    \    for i = 1, n do\n        fact = fact * i\n    end\n    return fact\nend",
  "    assert(type(n) == \"number\" and n > 0 and n == math.floor(n),\n        \"\
    n should be a positive integer.\")\n    local sf = 1\n    for i = n, 1, -1 do\n\
    \        sf = sf * i\n    end\n    for i = n - 1, 1, -1 do\n        sf = sf *\
    \ i\n    end\n    return sf\nend", "  -- TODO: write your code here\n  -- Note:\
    \ Do not use any loops or the built-in \"factorial\" function\n  local r=1\n \
    \ for i=n,1,-1 do\n    r=r*i\n  end\n  return r\nend", "  return 0\nend", "  local\
    \ result = 1\n  for i = n, 1, -1 do\n    result = result * i\n  end\n  return\
    \ result\nend", "  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend", "    return f(n)\nend", "  local result = 1\n  if n == 0\
    \ then\n    return 1\n  end\n  for i = n, 1, -1 do\n    result = result * i\n\
    \  end\n  return result\nend", "  local result = 1\n  for i = n, 1, -1 do\n  \
    \  result = result * n\n    n = n - 1\n  end\n  return result\nend", "  if n <=\
    \ 0 then\n    return nil\n  end\n  return math.factorial(n) * math.factorial(n-1)\n\
    end", "\tlocal function factorial(n)\n\t\tlocal result = 1\n\t\twhile n > 0 do\n\
    \t\t\tresult = result * n\n\t\t\tn = n - 1\n\t\tend\n\t\treturn result\n\tend\n\
    \tlocal result = 1\n\twhile n > 0 do\n\t\tresult = result * factorial(n)\n\t\t\
    n = n - 1\n\tend\n\treturn result\nend", "\t\n\tlocal fact = 1\n\tlocal i = n\n\
    \twhile i > 0 do\n\t\tfact = fact * i\n\t\ti = i - 1\n\tend\n\t\n\treturn fact\n\
    end", "    if n == 0 then\n        return 1\n    else\n        return n * special_factorial(n\
    \ - 1)\n    end\nend", "    local result = 1\n    for i = n, 2, -1 do\n      \
    \  result = result * i\n    end\n    return result\nend", "  if n == 0 then\n\
    \    return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend", " \
    \   error(\"Not implemented\")\nend", "    -- YOUR CODE GOES HERE\nend", "  n\
    \ = tonumber(n)\n  local result = 1\n  for i = n, 1, -1 do\n    result = result\
    \ * i\n  end\n  return result\nend", "\tlocal product = 1\n\tfor i = n, 1, -1\
    \ do\n\t\tproduct = product * factorial(i)\n\tend\n\treturn product\nend", " \
    \ local factorial = 1\n  for i = n, 1, -1 do\n    factorial = factorial * i\n\
    \  end\n  return factorial\nend", "    if n <= 0 then\n        return nil\n  \
    \  end\n    local fac = 1\n    for i = 1, n do\n        fac = fac * i\n    end\n\
    \    return fac\nend", "  local num = 1\n  local temp = n\n  while temp > 0 do\n\
    \    num = num * temp\n    temp = temp - 1\n  end\n  return num\nend", "  -- Your\
    \ code here\nend", "    local sum = 1\n    for i = 1, n do\n        sum = sum\
    \ * factorial(i)\n    end\n    return sum\nend", "  if n == 0 then\n    return\
    \ 1\n  else\n    return factorial(n) * special_factorial(n - 1)\n  end\nend",
  "    -- TODO: write your code here\nend", "    -- YOUR CODE HERE\nend", "  if n\
    \ == 0 then\n    return 1\n  else\n    local result = n * special_factorial(n\
    \ - 1)\n    return result\n  end\nend", "    local f = 1\n    for i = 1, n do\n\
    \        f = f * i\n    end\n    return f\nend", "\t-- TODO: Implement this function.\n\
    \tlocal sum = 0\n\twhile n > 0 do\n\t\tsum = sum + math.factorial(n)\n\t\tn =\
    \ n - 1\n\tend\n\treturn sum\nend", "  local result = 1\n  for i = n, 1, -1 do\n\
    \    result = result * i\n  end\n  return result\nend", "    --your code here\n\
    \    local s_fact = 1\n    for i = 1, n do\n        s_fact = s_fact * i\n    end\n\
    \    return s_fact\nend", "  -- TODO: Implement the function.\nend", "    -- TODO:\
    \ Implement here\n    local r = 1\n    while n > 0 do\n        r = r * n\n   \
    \     n = n - 1\n    end\n    return r\nend", "    -- Your implementation goes\
    \ here\n    -- Return the special factorial of n\n    local prod = 1\n    for\
    \ i = 1, n do\n        prod = prod * i\n    end\n    return prod\nend", "  --\
    \ Your code here\nend", "    if n == 0 then\n        return 1\n    else\n    \
    \    return n * special_factorial(n - 1)\n    end\nend", "    local acc = 1\n\
    \    for i = n, 1, -1 do\n        acc = acc * i\n    end\n    return acc\nend",
  "    if n == 0 then\n        return 1\n    else\n        return n * special_factorial(n\
    \ - 1)\n    end\nend", "  if n == 0 then\n    return 0\n  end\n  local result\
    \ = 1\n  for i = 1, n do\n    result = result * i\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
