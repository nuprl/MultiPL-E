name: HumanEval_139_special_factorial
language: lua
prompt: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) = n!\
  \ * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
  -- 288\n-- The function will receive an integer as input and should return the special\n\
  -- factorial of this integer.\nlocal function special_factorial(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
  \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
  \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
  \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- your code here\n    if n < 0 then\n        return 0\n    end\n\
    \    return math.factorial(n) * math.factorial(n-1)\nend", "    local function\
    \ factorial(n)\n        if n == 0 then\n            return 1\n        else\n \
    \           return n * factorial(n - 1)\n        end\n    end", "  local val =\
    \ 1\n  for i = n, 1, -1 do\n    val = val * factorial(i)\n  end\n  return val\n\
    end", "\tlocal a=1\n\tlocal k=n-1\n\tif n==0 then \n\t\ta=1\n\telse\n\t\tfor i=1,n\
    \ do\n\t\t\ta=a*i\n\t\tend\n\t\twhile k~=0 do\n\t\t\tfor j=1,k do\n\t\t\t\ta=a*j\n\
    \t\t\tend\n\t\t\tk=k-1\n\t\tend\n\tend\n\treturn a\nend", "    -- Your code here\n\
    end", "    assert(n > 0, \"n should be a positive integer.\")\n    local r = 1\n\
    \    for i = n, 1, -1 do\n        r = r * i\n    end\n    return r\nend", "  local\
    \ factorial = 1\n  for i = n, 1, -1 do\n    factorial = factorial * factorial_recursive(i)\n\
    \  end\n  return factorial\nend", "  local function factorial(m)\n    if m < 2\
    \ then\n      return 1\n    else\n      return m * factorial(m - 1)\n    end\n\
    \  end", "    if n == 0 then\n        return 1\n    else\n        return n * special_factorial(n\
    \ - 1)\n    end\nend", "    local result = 1\n    for i = 1, n do\n        result\
    \ = result * i\n    end\n    return result\nend", "  return 42\nend", "\tlocal\
    \ aux = 1\n\twhile n > 0 do\n\t\taux = aux * n * (n-1)\n\t\tn = n - 2\n\tend\n\
    \treturn aux\nend", "  if n <= 0 then return \"Input error\" end\n  local result\
    \ = 1\n  for i = n, 1, -1 do\n    result = result * factorial(i)\n  end\n  return\
    \ result\nend", "    -- TODO: Implement me\nend", "  -- your solution here\nend",
  "  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend", "    return 0\nend", "    local acc = 1\n    for i\
    \ = n, 2, -1 do\n        acc = acc * i\n    end\n    return acc\nend", "  -- YOUR\
    \ CODE HERE\n  local result = 1\n  for i = n, 1, -1 do\n    result = result *\
    \ factorial(i)\n  end\n  return result\nend", "  if n == 0 then\n    return 1\n\
    \  else\n    return n * special_factorial(n - 1)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
