language: lua
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal result_1, result_2, result_3 = \"No\", \"No\", \"No\"\n\tlocal count_of_digits\
    \ = 0\n\tlocal count_of_dots = 0\n\tlocal count_of_letters = 0\n\tlocal count_of_letters_after_dot\
    \ = 0\n\tfor i = 1, string.len(file_name) do\n\t\tif string.sub(file_name, i,\
    \ i) == \".\" then\n\t\t\tcount_of_dots = count_of_dots + 1\n\t\telseif string.match(string.sub(file_name,\
    \ i, i), \"[0-9]\") then\n\t\t\tcount_of_digits = count_of_digits + 1\n\t\telseif\
    \ string.match(string.sub(file_name, i, i), \"[a-zA-Z]\") then\n\t\t\tcount_of_letters\
    \ = count_of_letters + 1\n\t\tend\n\tend\n\tif count_of_digits <= 3 and count_of_dots\
    \ == 1 and count_of_letters > 0 then\n\t\tresult_1 = \"Yes\"\n\tend\n\tfor i =\
    \ string.find(file_name, \"%.\") + 1, string.len(file_name) do\n\t\tif string.match(string.sub(file_name,\
    \ i, i), \"[a-zA-Z]\") then\n\t\t\tcount_of_letters_after_dot = count_of_letters_after_dot\
    \ + 1\n\t\tend\n\tend\n\tif count_of_letters_after_dot == 3 then\n\t\tresult_2\
    \ = \"Yes\"\n\tend\n\tif string.sub(file_name, string.find(file_name, \"%.\")\
    \ + 1, string.find(file_name, \"%.\") + 3) == \"txt\" or\n\tstring.sub(file_name,\
    \ string.find(file_name, \"%.\") + 1, string.find(file_name, \"%.\") + 3) == \"\
    exe\" or\n\tstring.sub(file_name, string.find(file_name, \"%.\") + 1, string.find(file_name,\
    \ \"%.\") + 3) == \"dll\" then\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4off8aex.lua:77: ''end'' expected (to close ''if'' at line
    41) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local s,e = file_name:find(\"%.\")\n    if not s then return \"No\" end\n\
    \    local first = file_name:sub(1,s-1)\n    local ext = file_name:sub(e+1)\n\
    \    if first:find(\"%d\") or #first==0 or #first:gsub(\"%d\",\"\")>2 then return\
    \ \"No\" end\n    return ext == \"txt\" or ext == \"exe\" or ext == \"dll\" and\
    \ \"Yes\" or \"No\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehsadqto.lua:27:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpehsadqto.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qamvehp.lua:21:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp2qamvehp.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t-- TODO: your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5jsvki0.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpn5jsvki0.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhzw7h9p.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpvhzw7h9p.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digit_check = string.match(file_name, '%d%d%d')\n    local dot_check\
    \ = string.match(file_name, '%.')\n    local alpha_check = string.match(file_name,\
    \ '^[a-zA-Z]')\n    local suffix_check = string.match(file_name, '[.][a-zA-Z]+$')\n\
    \    if digit_check == nil and dot_check ~= nil and alpha_check ~= nil and \n\
    \        (suffix_check == '.txt' or suffix_check == '.exe' or suffix_check ==\
    \ '.dll') then\n        return 'Yes'\n    else\n        return 'No'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpwctzdx.lua:36:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpjpwctzdx.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local name, file_type = file_name:match('(.+)%.(.+)')\n    if not (name and\
    \ file_type) then\n        return 'No'\n    end\n    if not (name:match('%a')\
    \ and name:match('%d') and name:match('%d%d%d')) then\n        return 'No'\n \
    \   end\n    if file_type ~= 'txt' and file_type ~= 'exe' and file_type ~= 'dll'\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8sj4c9z.lua:32:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpq8sj4c9z.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal counter = 0\n\tlocal count_digits = 0\n\tlocal dot_check = 0\n\tlocal\
    \ file_name_type = \"\"\n\tlocal file_name_type_check = 0\n\tlocal file_name_error\
    \ = \"No\"\n\tlocal file_name_patt = [[([a-zA-Z]+)([0-9]+)([a-zA-Z]*)([0-9]*)([a-zA-Z]*)([0-9]*)(\\\
    ..+)]]\n\tlocal name_patt = \"[a-zA-Z]+\"\n\tlocal file_name_type_patt = [[(txt)|(exe)|(dll)]]\n\
    \t\n\tfile_name_type = file_name:match(file_name_patt)\n\t\n\tfor i in file_name:gmatch(\"\
    %d\") do\n\t\tcounter = counter + 1\n\tend\n\t\n\tfor i in file_name:gmatch(\"\
    %.\") do\n\t\tdot_check = dot_check + 1\n\tend\n\t\n\tif file_name:match(name_patt)\
    \ and counter <= 3 and dot_check == 1 then\n\t\tfile_name_error = \"Yes\"\n\t\
    end\n\t\n\treturn file_name_error\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3umjjznv.lua:47:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp3umjjznv.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu18z8nru.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu18z8nru.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local i, j = string.find(file_name, \"%.%w+$\")\n    local file_type = string.sub(file_name,\
    \ i+1)\n    if file_type == \"txt\" or file_type == \"exe\" or file_type == \"\
    dll\" then\n        local substr_before_dot = string.sub(file_name, 1, i-1)\n\
    \        local substr_after_dot = string.sub(file_name, i+1)\n        local k\
    \ = string.match(substr_before_dot, \"[%a]+\")\n        if substr_before_dot ~=\
    \ k or string.len(k) == 0 then\n            return \"No\"\n        end\n     \
    \   local pattern = \"[%d]{4,}\"\n        local substr_before_dot_has_four_or_more_digits\
    \ = string.match(substr_before_dot, pattern)\n        if substr_before_dot_has_four_or_more_digits\
    \ then\n            return \"No\"\n        end\n        return \"Yes\"\n    end\n\
    \    return \"No\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfdc21et.lua:42:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmphfdc21et.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- https://www.tutorialspoint.com/lua/lua_strings.htm\n    local dot_index\
    \ = file_name:find('.')\n    local file_type = file_name:sub(dot_index + 1)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1dp2src2.lua:51: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local function check_type(s)\n        local str = s\n        local i = 0\n\
    \        while string.sub(str, 1, 1) ~= '.' do\n            local ch = string.sub(str,\
    \ 1, 1)\n            if string.byte(ch) >= string.byte('0') and string.byte(ch)\
    \ <= string.byte('9') then\n                i = i + 1\n            end\n     \
    \       str = string.sub(str, 2)\n        end\n        if i > 3 then\n       \
    \     return false\n        end\n        return true\n    end\n    local f_name\
    \ = file_name\n    local dot_count = 0\n    while string.len(f_name) ~= 0 do\n\
    \        local first_char = string.sub(f_name, 1, 1)\n        if first_char ==\
    \ '.' then\n            dot_count = dot_count + 1\n        end\n        f_name\
    \ = string.sub(f_name, 2)\n    end\n    if dot_count ~= 1 then\n        return\
    \ 'No'\n    end\n    local first_dot = string.find(file_name, '.')\n    local\
    \ type_name = string.sub(file_name, first_dot + 1)\n    if type_name ~= 'txt'\
    \ and type_name ~= 'exe' and type_name ~= 'dll' then\n        return 'No'\n  \
    \  end\n    if string.len(file_name) <= 5 then\n        return 'No'\n    end\n\
    \    if string.sub(file_name, 1, 1) == '.' then\n        return 'No'\n    end\n\
    \    local ch = string.sub(file_name, 1, 1)\n    if (string.byte(ch) < string.byte('a')\
    \ or string.byte(ch) > string.byte('z')) and\n       (string.byte(ch) < string.byte('A')\
    \ or string.byte(ch) > string.byte('Z')) then\n        return 'No'\n    end\n\
    \    if not check_type(file_name) then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1ze9ao3.lua:68:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpr1ze9ao3.lua:68:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = file_name:find('.')\n    local name = file_name:sub(1, dot_pos\
    \ - 1)\n    local ext = file_name:sub(dot_pos + 1)\n    local num_of_digits =\
    \ name:gsub('%D', ''):len()\n    if num_of_digits > 3 then\n        return 'No'\n\
    \    end\n    if not name:find('%a') then\n        return 'No'\n    end\n    if\
    \ ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n \
    \   end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wof1aac.lua:35:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp2wof1aac.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_count = 0\n    local digit_count = 0\n    for i = 1, #file_name\
    \ do\n        if (file_name:sub(i, i) == '.') then\n            dot_count = dot_count\
    \ + 1\n        elseif (file_name:sub(i, i):match('%d')) then\n            digit_count\
    \ = digit_count + 1\n        end\n    end\n    local prefix, suffix = file_name:match('^([%a]+).([%a]+)$')\n\
    \    return ((dot_count == 1) and (digit_count <= 3) and (suffix == 'txt' or suffix\
    \ == 'exe' or suffix == 'dll')) and 'Yes' or 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxon3r64.lua:36:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmplxon3r64.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- edit here!\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax36vwn1.lua:24:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpax36vwn1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsojbqhu1.lua:21:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsojbqhu1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal number_count = 0\n\tlocal suffix = ''\n\tlocal prefix = ''\n\tlocal dot_pos\
    \ = -1\n\tfor i = 1, #file_name do\n\t\tlocal ch = file_name:sub(i, i)\n\t\tif\
    \ ch >= '0' and ch <= '9' then\n\t\t\tnumber_count = number_count + 1\n\t\telseif\
    \ ch == '.' then\n\t\t\tdot_pos = i\n\t\tend\n\tend\n\tif number_count > 3 then\n\
    \t\treturn 'No'\n\tend\n\tif dot_pos == -1 then\n\t\treturn 'No'\n\tend\n\tif\
    \ dot_pos == 1 then\n\t\treturn 'No'\n\tend\n\tprefix = file_name:sub(1, dot_pos\
    \ - 1)\n\tsuffix = file_name:sub(dot_pos + 1)\n\tif (prefix:match('^[a-zA-Z]+$')\
    \ ~= prefix) then\n\t\treturn 'No'\n\tend\n\tif suffix ~= 'txt' and suffix ~=\
    \ 'exe' and suffix ~= 'dll' then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8xpi7w1.lua:55:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpl8xpi7w1.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if file_name:match('^[a-zA-Z][^%d.]+%.[a-z]+$') then return 'Yes'\n    else\
    \ return 'No' end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc2yj6f8.lua:26:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpxc2yj6f8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local before_dot, after_dot = file_name:match('^([%a]%w*)%.([%a]%w*)$')\n \
    \ if before_dot == nil or after_dot == nil then\n    return 'No'\n  end\n  if\
    \ before_dot:match('%d%d%d') or after_dot:match('%w+') == nil then\n    return\
    \ 'No'\n  end\n  if after_dot == 'txt' or after_dot == 'exe' or after_dot == 'dll'\
    \ then\n    return 'Yes'\n  end\n  return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8duwi29y.lua:37:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp8duwi29y.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal digit = 0\n\tlocal idx = 1\n\tlocal last_idx = string.len(file_name)\n\
    \tlocal dot_idx = nil\n\twhile idx <= last_idx do\n\t\tlocal byte = string.byte(file_name,\
    \ idx)\n\t\tif byte >= 0x30 and byte <= 0x39 then\n\t\t\tdigit = digit + 1\n\t\
    \telseif byte == 0x2E then\n\t\t\tdot_idx = idx\n\t\tend\n\t\tidx = idx + 1\n\t\
    end\n\tif digit > 3 then\n\t\treturn 'No'\n\tend\n\tif dot_idx == nil then\n\t\
    \treturn 'No'\n\tend\n\tlocal prefix = string.sub(file_name, 1, dot_idx - 1)\n\
    \tlocal suffix = string.sub(file_name, dot_idx + 1)\n\tif string.len(prefix) ==\
    \ 0 then\n\t\treturn 'No'\n\tend\n\tif string.byte(prefix, 1) < 0x41 then\n\t\t\
    return 'No'\n\tend\n\tif suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll'\
    \ then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4ho5jeq.lua:58:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpz4ho5jeq.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- \u041F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u0430\u044F \u0445\u0440\
    \u0430\u043D\u0438\u0442 \u043D\u0430\u0447\u0430\u043B\u043E \u0438\u043C\u0435\
    \u043D\u0438 \u0444\u0430\u0439\u043B\u0430\n    local start = file_name:match('^%w+')\n\
    \    -- \u041F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u0430\u044F \u0445\u0440\
    \u0430\u043D\u0438\u0442 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\
    \u0435 \u0444\u0430\u0439\u043B\u0430\n    local ext = file_name:match('%w+$')\n\
    \    if file_name:match('%d+') and #file_name:match('%d+') > 3 or not file_name:match('%.')\
    \ or #file_name:match('%.%w+$') ~= 4 or start == nil or (ext ~= 'txt' and ext\
    \ ~= 'exe' and ext ~= 'dll') then\n        return 'No'\n    else\n        return\
    \ 'Yes'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bwgx1co.lua:31:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp1bwgx1co.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal pattern = \"^[a-zA-Z]%d{1,3}%.(txt|exe|dll)$\"\n\tif string.match(file_name,\
    \ pattern) then\n\t\treturn 'Yes'\n\telse\n\t\treturn 'No'\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjv83qpm.lua:27:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpdjv83qpm.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsojbqhu1.lua:21:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsojbqhu1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rsq6hx3.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp0rsq6hx3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 0
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits_counter = 0\n    local dot_counter = 0\n    local extention\
    \ = nil\n    local file_name_len = string.len(file_name)\n    local dot_index\
    \ = string.find(file_name, \"%.\")\n    local first_char = string.sub(file_name,\
    \ 1, 1)\n    if not (first_char >= 'a' and first_char <= 'z' or first_char >=\
    \ 'A' and first_char <= 'Z') then\n        return 'No'\n    end\n    if dot_index\
    \ == nil then\n        return 'No'\n    end\n    for i = 1, file_name_len do\n\
    \        local char = string.sub(file_name, i, i)\n        if char >= '0' and\
    \ char <= '9' then\n            digits_counter = digits_counter + 1\n        elseif\
    \ char == '.' then\n            dot_counter = dot_counter + 1\n        end\n \
    \   end\n    if not (dot_counter == 1 and digits_counter <= 3) then\n        return\
    \ 'No'\n    end\n    extention = string.sub(file_name, dot_index+1, file_name_len)\n\
    \    if extention == 'txt' or extention == 'exe' or extention == 'dll' then\n\
    \        return 'Yes'\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local num_digits = 0\n    local num_dots = 0\n    local sub_before_dot =\
    \ {}\n    local sub_after_dot = {}\n    for c in file_name:gmatch('%w') do\n \
    \       if c:match('%d') then\n            num_digits = num_digits + 1\n     \
    \   elseif c == '.' then\n            num_dots = num_dots + 1\n        elseif\
    \ num_dots == 0 then\n            table.insert(sub_before_dot, c)\n        elseif\
    \ num_dots == 1 then\n            table.insert(sub_after_dot, c)\n        end\n\
    \    end\n    local sub_before_dot_str = table.concat(sub_before_dot)\n    local\
    \ sub_after_dot_str = table.concat(sub_after_dot)\n    if num_digits > 3 or\n\
    \        num_dots ~= 1 or\n        not sub_before_dot_str:match('^%a') or\n  \
    \      not (sub_after_dot_str == 'txt' or\n            sub_after_dot_str == 'exe'\
    \ or\n            sub_after_dot_str == 'dll') then\n        return 'No'\n    else\n\
    \        return 'Yes'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8db38oyi.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8db38oyi.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t-- Your code here\n\tdigits = 0\n\tdot = 0\n\tfor i = 1, string.len(file_name)\
    \ do\n\t\tif string.find(\"0123456789\", string.sub(file_name, i, i)) then\n\t\
    \t\tdigits = digits + 1\n\t\tend\n\t\tif string.sub(file_name, i, i) == \".\"\
    \ then\n\t\t\tdot = i\n\t\tend\n\tend\n\tif digits > 3 then\n\t\treturn \"No\"\
    \n\tend\n\tif dot == 0 then\n\t\treturn \"No\"\n\tend\n\tif string.len(file_name)\
    \ == dot then\n\t\treturn \"No\"\n\tend\n\textension = string.sub(file_name, dot\
    \ + 1, string.len(file_name))\n\tif extension ~= \"txt\" and extension ~= \"exe\"\
    \ and extension ~= \"dll\" then\n\t\treturn \"No\"\n\tend\n\tif string.len(file_name)\
    \ - dot > 4 then\n\t\treturn \"No\"\n\tend\n\tfirst_letter = string.sub(file_name,\
    \ 1, 1)\n\tif string.find(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    , first_letter) == nil then\n\t\treturn \"No\"\n\tend\n\treturn \"Yes\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jeegqei.lua:57:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp5jeegqei.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: Write your implementation of this function here.\n  if(file_name==nil)\
    \ then\n\treturn 'No'\n  end\n  local s,e = string.find(file_name, \"%d\")\n \
    \ if(s==nil) then\n\t  if(string.find(file_name, \"%.txt\") or string.find(file_name,\
    \ \"%.exe\") or string.find(file_name, \"%.dll\")) then\n\t\treturn 'Yes'\n\t\
    \  else\n\t\treturn 'No'\n\t  end\n  else\n\t  if(s==1) then\n\t\treturn 'No'\n\
    \t  else\n\t\tlocal s1,e1 = string.find(file_name, \"%D\")\n\t\tif(s1~=nil) then\n\
    \t\t\tlocal e2 = string.find(file_name, \"%.%a%a%a\")\n\t\t\tif(e2~=nil) then\n\
    \t\t\t\tif(e2==e) then\n\t\t\t\t\treturn 'Yes'\n\t\t\t\telse\n\t\t\t\t\treturn\
    \ 'No'\n\t\t\t\tend\n\t\t\telse\n\t\t\t\treturn 'No'\n\t\t\tend\n\t\telse\n\t\t\
    \treturn 'No'\n\t\tend\n\t  end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lystc7t.lua:57:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp9lystc7t.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: fix this function\n    return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvw63dvl.lua:23:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkvw63dvl.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: implement 'file_name_check' function.\n  return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddbvi8ou.lua:23:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpddbvi8ou.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if file_name:match('%d%d%d') then return 'No' end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjrhsw27e.lua:49: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local function check_substring(substring)\n        -- Check if substring\
    \ contains three digits or more\n        local num = 0\n        for i = 1, #substring\
    \ do\n            if substring:sub(i, i) >= '0' and substring:sub(i, i) <= '9'\
    \ then\n                num = num + 1\n            end\n        end\n        if\
    \ num > 3 then\n            return false\n        end\n        -- Check if substring\
    \ starts with a letter\n        if substring:sub(1, 1) < 'a' or substring:sub(1,\
    \ 1) > 'z' and\n           substring:sub(1, 1) < 'A' or substring:sub(1, 1) >\
    \ 'Z' then\n            return false\n        end\n        return true\n    end\n\
    \    local dot_num = 0\n    local dot_index = 0\n    for i = 1, #file_name do\n\
    \        if file_name:sub(i, i) == '.' then\n            dot_num = dot_num + 1\n\
    \            dot_index = i\n        end\n    end\n    if dot_num ~= 1 then\n \
    \       return 'No'\n    end\n    if not check_substring(file_name:sub(1, dot_index\
    \ - 1)) then\n        return 'No'\n    end\n    local extension = file_name:sub(dot_index\
    \ + 1, #file_name)\n    if extension ~= 'txt' and extension ~= 'exe' and extension\
    \ ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6w1wtbnl.lua:58:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp6w1wtbnl.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t-- How to do it:\n\t--\n\t-- 1) check that 'file_name' is a string.\n\t-- 2)\
    \ check the 'file_name' for there is more than 3 digits in it.\n\t-- 3) check\
    \ that there is exactly one dot in the 'file_name'.\n\t-- 4) check that the substring\
    \ before the dot is not empty and starts with a letter.\n\t-- 5) check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n\t--\n\t-- Note:\
    \ if any of the above conditions is not met, return 'No'.\n\t-- Otherwise, return\
    \ 'Yes'.\n\t\n\t-- Your code here.\n\t\n\t-- Test to see if file_name is a string\n\
    \tif type(file_name) ~= \"string\" then\n\t\treturn \"No\"\n\tend\n\t\n\t-- Test\
    \ to see if file_name has more than 3 digits\n\t-- (i.e. strings that consists\
    \ of only numbers)\n\tlocal digits = 0\n\tfor i=1, #file_name do\n\t\tif string.match(file_name,\
    \ \"^%d$\") then\n\t\t\tdigits = digits + 1\n\t\tend\n\tend\n\tif digits > 3 then\n\
    \t\treturn \"No\"\n\tend\n\t\n\t-- Test to see if file_name has only one dot\n\
    \tlocal dots = 0\n\tfor i=1, #file_name do\n\t\tif string.match(file_name, \"\
    ^%.$\") then\n\t\t\tdots = dots + 1\n\t\tend\n\tend\n\tif dots ~= 1 then\n\t\t\
    return \"No\"\n\tend\n\t\n\t-- Test to see if file_name starts with a letter\n\
    \t-- and that the file_name substring before dot is not empty\n\tlocal dot_index\
    \ = string.find(file_name, \"^%.\")\n\tif not string.match(file_name, \"^%a\"\
    ) or dot_index == 1 then\n\t\treturn \"No\"\n\tend\n\t\n\t-- Test to see if file_name\
    \ suffix is one of:\n\t-- txt, exe, dll\n\t-- Remove everything before the dot\n\
    \tlocal post\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnetfhwch.lua:100: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- Your code here\n  local _, count = string.gsub(file_name, \"%d\", \"\")\n\
    \  if(count > 3) then\n    return 'No'\n  end\n  local sub = string.sub(file_name,\
    \ 1, string.find(file_name, '.')-1)\n  if(not string.match(sub, '[a-zA-Z]')) then\n\
    \    return 'No'\n  end\n  sub = string.sub(file_name, string.find(file_name,\
    \ '.')+1)\n  if(sub ~= 'txt' and sub ~= 'exe' and sub ~= 'dll') then\n    return\
    \ 'No'\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1jw_b66.lua:35:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpb1jw_b66.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- Please write the function body!\n  -- You can write auxiliary functions\
    \ if needed.\n  -- You can also use external modules.\n  -- (In this case, you\
    \ should write a require directive above.)\n  -- Our grading system will use your\
    \ implementation to handle files with unknown extensions.\n  -- However, it is\
    \ not allowed to use the functionality of the os module to get the file's extension.\n\
    \  -- It is allowed to use the functionality of the string module.\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpun3r8lez.lua:28:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpun3r8lez.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local before_dot = file_name:match('^[a-zA-Z]+')\n    local ext = file_name:match('%.([a-zA-Z]+)$')\n\
    \    local digits = file_name:match('[0-9]%d*')\n    if not before_dot then\n\
    \        return 'No'\n    end\n    if not ext then\n        return 'No'\n    end\n\
    \    if not digits then\n        return 'Yes'\n    end\n    if #digits > 3 then\n\
    \        return 'No'\n    end\n    if ext == 'txt' or ext == 'exe' or ext == 'dll'\
    \ then\n        return 'Yes'\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpau7m1fd2.lua:45:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpau7m1fd2.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- create tokens from file_name\n    local tokens = {}\n    for i in string.gmatch(file_name,\
    \ \"[^%.]+\") do\n        table.insert(tokens, i)\n    end\n    -- check conditions\n\
    \    local condition1 = #tokens == 2\n    local condition2 = not string.match(tokens[1],\
    \ \"%d+\")\n    local condition3 = tokens[2] == 'txt' or tokens[2] == 'exe' or\
    \ tokens[2] == 'dll'\n    if condition1 and condition2 and condition3 then\n \
    \       return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69afn_eg.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp69afn_eg.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if string.match(file_name, '^[a-zA-Z]+%d*%.txt$') then\n        return 'Yes'\n\
    \    elseif string.match(file_name, '^[a-zA-Z]+%d*%.exe$') then\n        return\
    \ 'Yes'\n    elseif string.match(file_name, '^[a-zA-Z]+%d*%.dll$') then\n    \
    \    return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2hszso7.lua:34:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpz2hszso7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local counter = 0\n    local after = file_name:sub(file_name:find('.') +\
    \ 1)\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.' then\n\
    \            counter = counter + 1\n        end\n    end\n    if after == 'txt'\
    \ or after == 'exe' or after == 'dll' and \n       counter == 1 and #file_name:sub(1,\
    \ file_name:find('.') - 1) > 0 and \n       file_name:sub(1, 1):match('[a-zA-Z]')\
    \ and file_name:sub(1, 1):match('[0-9]') == nil and \n       file_name:sub(file_name:find('.')\
    \ - 1, file_name:find('.') - 1):match('[0-9]') == nil and \n       file_name:sub(file_name:find('.')\
    \ - 2, file_name:find('.') - 2):match('[0-9]') == nil and \n       file_name:sub(file_name:find('.')\
    \ - 3, file_name:find('.') - 3):match('[0-9]') == nil then\n        return 'Yes'\n\
    \    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4l2iqus.lua:38:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpy4l2iqus.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t-- check if the file name contains 3 or more digits\n\tif file_name:match('%d%d%d')\
    \ then\n\t\treturn 'No'\n\tend\n\t-- check if the file contains exacly one dot\n\
    \tif file_name:match('%.') ~= file_name:match('%..') then\n\t\treturn 'No'\n\t\
    end\n\t-- check if the substring before the dot is valid\n\tlocal prefix = file_name:match('[^%.]+')\n\
    \tif prefix:match('%d') or prefix:match('^[%p%s]') then\n\t\treturn 'No'\n\tend\n\
    \t-- check if the substring after the dot is valid\n\tlocal suffix = file_name:match('%.[^%.]+')\n\
    \tif suffix ~= '.txt' and suffix ~= '.exe' and suffix ~= '.dll' then\n\t\treturn\
    \ 'No'\n\tend\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8qjzije.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpi8qjzije.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- Use the regular expression pattern in comments.\n    -- Pattern: -- ([a-zA-Z]+[0-9]{0,3}).(txt|exe|dll)\n\
    \    -- Match: -- |       | |---| |---|\n    --         -- |       | |---| |---|\
    \ \n    --         -- |       | |---| |---|\n    --         -- |       | |---|\
    \ |---|\n    --         -- |       | |---| |---|\n    --         -- |       |\
    \ |---| |---|\n    --         -- |       | |---| |---|\n    --         -- |  \
    \     | |---| |---|\n    --         -- |       | |---| |---|\n    --         --\
    \ |       | |---| |---|\n    --         -- |       | |---| |---|\n    --     \
    \    -- |       | |---| |---|\n    --         -- |       | |---| |---|\n    --\
    \         -- |       | |---| |---|\n    --         -- |       | |---| |---|\n\
    \    --         -- |       | |---| |---|\n    --         -- |       | |---| |---|\n\
    \    --         -- |       | |---| |---|\n    --         -- |       | |---| |---|\n\
    \    --         -- |       | |---| |---|\n    --         -- |       | |---| |---|\n\
    \    --         -- |       | |---| |---|\n    --         -- |       | |---| |---|\n\
    \    --         -- |       | |---| |---|\n    --         -- |       | |---| |---|\n\
    \    --         -- |       | |---| |---|\n    --         -- |       | |---| |---|\n\
    \    --         -- |       | |---| |---|\n    --         -- |       | |---| |---|\n\
    \    --         -- |       | |---| |---|\n    --         -- |       | |---| |---|\n\
    \    --         -- |       | |---| |---|\n    --         -- |       | |---| |---|\n\
    \    --         --\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbzqwzo6i.lua:84: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local status\n    -- your code here\n    return status\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj1tw19h.lua:24:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpgj1tw19h.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 0
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local _, count_of_digits = file_name:gsub('%d', '')\n  local _, count_of_dots\
    \ = file_name:gsub('%.', '')\n  local _, count_of_letters = file_name:gsub('[a-zA-Z]',\
    \ '')\n  local _, count_of_chars = file_name:gsub('[^%d%a%p]', '')\n  local extension\
    \ = file_name:match('%.(%a*)$')\n  local match = file_name:match('^[a-zA-Z]')\n\
    \  if count_of_digits > 3 or count_of_dots ~= 1 or count_of_letters == #file_name\
    \ or\n     count_of_chars > 0 or not match or extension ~= 'txt' and extension\
    \ ~= 'exe' and\n     extension ~= 'dll' then\n    return 'No'\n  end\n  return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- CODE HERE\n  local counter = 0\n  local exe = false\n  local has_ext = false\n\
    \  local good_ext = false\n  for i=1,#file_name do\n    if(file_name:sub(i,i)\
    \ == '.') then\n      has_ext = true\n    end\n    if(i>1 and file_name:sub(i,i)\
    \ == '.' and file_name:sub(i-1,i-1) == '.') then\n      return 'No'\n    end\n\
    \    if(file_name:sub(i,i) == '.' and file_name:sub(i+1,i+3) == 'exe') then\n\
    \      exe = true\n    end\n    if(file_name:sub(i,i) == '.' and file_name:sub(i+1,i+3)\
    \ == 'txt') then\n      good_ext = true\n    end\n    if(file_name:sub(i,i) ==\
    \ '.' and file_name:sub(i+1,i+3) == 'dll') then\n      good_ext = true\n    end\n\
    \    if(file_name:sub(i,i) == '.' and file_name:sub(i+1,i+3) == 'bin') then\n\
    \      good_ext = true\n    end\n    if(file_name:sub(i,i) == '.' and file_name:sub(i+1,i+3)\
    \ == 'zip') then\n      good_ext = true\n    end\n    if(not (file_name:sub(i,i)\
    \ == '.') and not (file_name:sub(i,i) == '_') and not(file_name:sub(i,i) == '-')\
    \ and not(file_name:sub(i,i) == '$') and not(file_name:sub(i,i) == '+') and not(file_name:sub(i,i)\
    \ == '#') and not(file_name:sub(i,i) == '%') and not(file_name:sub(i,i) == '*')\
    \ and not(file_name:sub(i,i) ==\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp3jzjoav.lua:44: '')'' expected (to close ''('' at line 43)
    near ''=''

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  if string.find(file_name, \"%d%d%d\") then\n    return 'No'\n  end\n  local\
    \ first, last = string.find(file_name, \"%.\")\n  if not first or not last then\n\
    \    return 'No'\n  end\n  local prefix = string.sub(file_name, 1, first - 1)\n\
    \  if prefix == '' or not string.find(prefix, \"^[a-zA-Z]\") then\n    return\
    \ 'No'\n  end\n  local suffix = string.sub(file_name, last + 1)\n  if suffix ~=\
    \ 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n    return 'No'\n  end\n\
    \  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ejz562_.lua:42:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp6ejz562_.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  if #file_name > 12 then\n    return 'No'\n  end\n  local name, extension =\
    \ file_name:match('^([^.]+).([^.]+)$')\n  if not name or not extension then\n\
    \    return 'No'\n  end\n  local first_letter = name:sub(1, 1)\n  if not first_letter:match('[a-zA-Z]')\
    \ then\n    return 'No'\n  end\n  if #name - #first_letter > 9 then\n    return\
    \ 'No'\n  end\n  if not extension:match('^txt$|^exe$|^dll$') then\n    return\
    \ 'No'\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple6duon2.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmple6duon2.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  return (file_name:match(\"[a-zA-Z]%w*%.(txt|exe|dll)\") and #file_name:match(\"\
    %d+\") < 4) and \"Yes\" or \"No\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxviwln4.lua:22:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkxviwln4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    return ((file_name:match('%d%d%d')==nil)\n            and ((file_name:match('%.dll')~=nil)\n\
    \            or (file_name:match('%.txt')~=nil)\n            or (file_name:match('%.exe')~=nil))\n\
    \            and (file_name:match('^%a')~=nil)\n            and (file_name:match('%.%a*')~=nil))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctxt44a1.lua:27:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpctxt44a1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsojbqhu1.lua:21:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsojbqhu1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu18z8nru.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu18z8nru.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks445imr.lua:23:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpks445imr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tif (file_name:match('%d%d%d')) then\n\t\treturn 'No'\n\tend\n\tif (file_name:match('^%d'))\
    \ then\n\t\treturn 'No'\n\tend\n\tif (file_name:match('[^%.]+%.(txt|exe|dll)$')\
    \ ~= file_name) then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo6lp3i3.lua:31:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmppo6lp3i3.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1hb1n7x.lua:23:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpi1hb1n7x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal numbers = string.match(file_name, '[0-9]+')\n\tif numbers == nil then\n\
    \t\treturn 'Yes'\n\tend\n\tlocal n = #numbers\n\tif n > 3 then\n\t\treturn 'No'\n\
    \tend\n\t\n\tlocal dot_index = string.find(file_name, '.')\n\tif dot_index ==\
    \ nil then\n\t\treturn 'No'\n\tend\n\tlocal prefix = string.sub(file_name, 1,\
    \ dot_index - 1)\n\tif prefix == '' then\n\t\treturn 'No'\n\tend\n\tlocal suffix\
    \ = string.sub(file_name, dot_index + 1)\n\tif suffix ~= 'txt' and suffix ~= 'exe'\
    \ and suffix ~= 'dll' then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7c64902n.lua:47:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp7c64902n.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local pattern = '^[a-zA-Z]+[0-9]{0,3}%.[a-zA-Z]+$'\n    local match = string.match(file_name,\
    \ pattern)\n    local sub_pattern = '^[a-zA-Z]+[0-9]{0,3}%.'\n    local sub_string\
    \ = string.match(file_name, sub_pattern)\n    local sub_string_2 = string.sub(file_name,\
    \ sub_string:len() + 1)\n    local ext_file = 'txt' or 'exe' or 'dll'\n    if\
    \ not match then\n        return 'No'\n    elseif not sub_string_2 == ext_file\
    \ then\n        return 'No'\n    else\n        return 'Yes'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmper9pi9m6.lua:20:\
    \ attempt to index a nil value (local 'sub_string')\nstack traceback:\n\t/tmp/tmper9pi9m6.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmper9pi9m6.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local one_dot = false\n    local before_dot = \"\"\n    local after_dot =\
    \ \"\"\n    local number_count = 0\n    for i = 1, #file_name do\n        if file_name:sub(i,\
    \ i) == \".\" then\n            if one_dot then\n                return \"No\"\
    \n            end\n            one_dot = true\n        elseif not one_dot then\n\
    \            if file_name:sub(i, i):match(\"%d\") then\n                number_count\
    \ = number_count + 1\n            end\n            before_dot = before_dot ..\
    \ file_name:sub(i, i)\n        else\n            after_dot = after_dot .. file_name:sub(i,\
    \ i)\n        end\n    end\n    if number_count > 3 then\n        return \"No\"\
    \n    end\n    if not one_dot then\n        return \"No\"\n    end\n    if before_dot\
    \ == \"\" then\n        return \"No\"\n    end\n    if before_dot:sub(1, 1):match(\"\
    %D\") then\n        return \"No\"\n    end\n    if not (after_dot == \"txt\" or\
    \ after_dot == \"exe\" or after_dot == \"dll\") then\n        return \"No\"\n\
    \    end\n    return \"Yes\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zr0qsmq.lua:56:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp_zr0qsmq.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal digits = 0\n\tlocal count_dot = 0\n\tlocal last_char = string.sub(file_name,\
    \ #file_name, #file_name)\n\tlocal before_dot = nil\n\tlocal after_dot = nil\n\
    \tlocal valid_extension = {'txt', 'exe', 'dll'}\n\t\n\t-- Get the substring before\
    \ and after the dot, the count of digits and the count of dot.\n\tfor i = 1, #file_name\
    \ do\n\t\tlocal char = string.sub(file_name, i, i)\n\t\tif char == '.' then\n\t\
    \t\tcount_dot = count_dot + 1\n\t\t\tbefore_dot = string.sub(file_name, 1, i -\
    \ 1)\n\t\t\tafter_dot = string.sub(file_name, i + 1, #file_name)\n\t\tend\n\t\t\
    if tonumber(char) then\n\t\t\tdigits = digits + 1\n\t\tend\n\tend\n\t\n\t-- Checking\
    \ if the last character is a dot.\n\tif last_char == '.' then\n\t\treturn 'No'\n\
    \tend\n\t\n\t-- Checking if there are more than three digits.\n\tif digits > 3\
    \ then\n\t\treturn 'No'\n\tend\n\t\n\t-- Checking if there are more than one dot.\n\
    \tif count_dot > 1 then\n\t\treturn 'No'\n\tend\n\t\n\t-- Checking if the substring\
    \ before the dot is empty.\n\tif #before_dot == 0 then\n\t\treturn 'No'\n\tend\n\
    \t\n\t-- Checking if the substring before the dot starts with a letter from the\
    \ latin alphapet.\n\tlocal first_char = string.sub(before_dot, 1, 1)\n\tif not\
    \ first_char:match('[a-zA-Z]') then\n\t\treturn 'No'\n\tend\n\t\n\t-- Checking\
    \ if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\tfor\
    \ i = 1, #valid_extension do\n\t\tif after_dot == valid_extension[i] then\n\t\t\
    \treturn 'Yes'\n\t\tend\n\tend\n\t\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaf_5g1_8.lua:102: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  if file_name:match('^%a%a+%a%.%a%a%a$') then\n    return 'Yes'\n  else\n  \
    \  return 'No'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpek47vmsf.lua:29:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpek47vmsf.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \treturn file_name:match('^[a-zA-Z][%a%d]*%.(txt|exe|dll)$') and 'Yes' or 'No'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mmg4f_4.lua:22:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8mmg4f_4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local digits_count = 0\n  local found_dot = false\n  local substring_before_dot\
    \ = ''\n  local substring_after_dot = ''\n  for i = 1, #file_name do\n    if file_name:sub(i,\
    \ i) == '.' then\n      found_dot = true\n    elseif found_dot then\n      substring_after_dot\
    \ = substring_after_dot .. file_name:sub(i, i)\n    else\n      substring_before_dot\
    \ = substring_before_dot .. file_name:sub(i, i)\n    end\n    if tonumber(file_name:sub(i,\
    \ i)) then\n      digits_count = digits_count + 1\n    end\n  end\n  if (digits_count\
    \ > 3) or (not found_dot) or (substring_before_dot == '') or \n    ((string.byte(substring_before_dot,\
    \ 1) < 65) or (string.byte(substring_before_dot, 1) > 122)) or\n    (((string.byte(substring_before_dot,\
    \ 1) > 90) and (string.byte(substring_before_dot, 1) < 97))) or\n    (substring_after_dot\
    \ ~= 'txt') and (substring_after_dot ~= 'exe') and (substring_after_dot ~= 'dll')\
    \ then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix4f17mh.lua:66:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpix4f17mh.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local dot_index = file_name:find('.')\n  if not dot_index then return 'No'\
    \ end\n  local pre_dot = file_name:sub(1, dot_index - 1)\n  local post_dot = file_name:sub(dot_index\
    \ + 1)\n  if #pre_dot == 0 or not pre_dot:match('^[a-zA-Z]') then return 'No'\
    \ end\n  if #pre_dot:gsub('%d', '') > 3 then return 'No' end\n  if not post_dot:match('^(txt|exe|dll)$')\
    \ then return 'No' end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6cmsg26.lua:29:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmph6cmsg26.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal l,r = file_name:find('[a-zA-Z]+[.][txt,exe,dll]')\n\tif (l == 1) and (r\
    \ == file_name:len()) then\n\t\treturn 'Yes'\n\telse\n\t\treturn 'No'\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfbved6j.lua:27:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmptfbved6j.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local _, counter = file_name:gsub('%d','')\n  if counter > 3 then\n    return\
    \ 'No'\n  end\n  local i,j = file_name:find('.')\n  if not (i and j) then\n  \
    \  return 'No'\n  end\n  local sub_str = file_name:sub(1, i-1)\n  local _, count\
    \ = sub_str:gsub('%a','')\n  if count ~= #sub_str then\n    return 'No'\n  end\n\
    \  sub_str = file_name:sub(j+1)\n  if not (sub_str == 'txt' or sub_str == 'exe'\
    \ or sub_str == 'dll') then\n    return 'No'\n  end\n  return 'Yes'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps03568q3.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmps03568q3.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    return file_name:match('^[a-zA-Z][^%.]+%.(%a+)$')\n           and #file_name:match('%d+')\
    \ <= 3\n           and {txt = true, exe = true, dll = true}[file_name:match('^[^%.]+%.(%a+)$')]\n\
    end\nprint(file_name_check('example.txt'))\nprint(file_name_check('1example.dll'))\n\
    print(file_name_check('example.dll'))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdwhiaj1c.lua:18: ''end'' expected (to close ''function'' at
    line 15) near ''[''

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 0
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal digits_count = 0\n\tlocal index_of_dot = -1\n\tlocal len = string.len(file_name)\n\
    \tlocal i = 1\n\twhile i <= len do\n\t\tlocal c = string.sub(file_name, i, i)\n\
    \t\tif c >= '0' and c <= '9' then\n\t\t\tdigits_count = digits_count + 1\n\t\t\
    \tif digits_count > 3 then\n\t\t\t\treturn 'No'\n\t\t\tend\n\t\telseif c == '.'\
    \ then\n\t\t\tif index_of_dot ~= -1 then\n\t\t\t\treturn 'No'\n\t\t\tend\n\t\t\
    \tindex_of_dot = i\n\t\tend\n\t\ti = i + 1\n\tend\n\tif index_of_dot == -1 then\n\
    \t\treturn 'No'\n\tend\n\tlocal ext = string.sub(file_name, index_of_dot + 1)\n\
    \tif ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n\t\treturn 'No'\n\t\
    end\n\tlocal name = string.sub(file_name, 1, index_of_dot - 1)\n\tif string.len(name)\
    \ == 0 then\n\t\treturn 'No'\n\tend\n\tlocal first_char = string.sub(name, 1,\
    \ 1)\n\tif not (first_char >= 'a' and first_char <= 'z' or\n\t\tfirst_char >=\
    \ 'A' and first_char <= 'Z') then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: Replace 'local' with the implementation of the function.\n  -- Please\
    \ note that the function should be written in pure Lua.\n  return 'No'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oh1u64i.lua:24:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8oh1u64i.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal i, j, k = 1, 0, 0\n\tlocal left, right = '', ''\n\tlocal counter = 0\n\
    \twhile i <= string.len(file_name) do\n\t\tif i == string.len(file_name) then\n\
    \t\t\tleft = file_name:sub(1, j)\n\t\t\tright = file_name:sub(j + 2, i)\n\t\t\t\
    break\n\t\tend\n\t\tif file_name:sub(i, i) == '.' then\n\t\t\tj = i\n\t\t\tk =\
    \ k + 1\n\t\telseif file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9'\
    \ then\n\t\t\tcounter = counter + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\tif k ~=\
    \ 1 or counter > 3 then\n\t\treturn 'No'\n\tend\n\tif left == '' or (left:sub(1,\
    \ 1) < 'a' or left:sub(1, 1) > 'z') and (left:sub(1, 1) < 'A' or left:sub(1, 1)\
    \ > 'Z') then\n\t\treturn 'No'\n\tend\n\tif right ~= 'txt' and right ~= 'exe'\
    \ and right ~= 'dll' then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2hf2xt0.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmph2hf2xt0.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu690f715.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu690f715.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal match = string.match(file_name, '^([%l]%w*).(%w+)$')\n\tif match and #match\
    \ == 2 then\n\t\tlocal f_name, ext = match[1], match[2]\n\t\treturn #f_name:gsub('%d',\
    \ '') <= 3 and table.contains({'txt', 'exe', 'dll'}, ext) and 'Yes' or 'No'\n\t\
    end\n\treturn 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15z7ez7j.lua:27:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp15z7ez7j.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- Your code goes here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcgrben8.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmppcgrben8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymzxrxf4.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpymzxrxf4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if not is_string(file_name) then\n        return 'No'\n    end\n    local\
    \ num_digits = 0\n    local has_dot = false\n    local index_dot = -1\n    local\
    \ index_last_digit = -1\n    for i = 1, #file_name do\n        local ch = file_name:sub(i,\
    \ i)\n        if ch == '.' then\n            if has_dot then\n               \
    \ return 'No'\n            end\n            has_dot = true\n            index_dot\
    \ = i\n        elseif '0' <= ch and ch <= '9' then\n            index_last_digit\
    \ = i\n            num_digits = num_digits + 1\n        end\n    end\n    if not\
    \ has_dot or num_digits > 3 or index_dot == 1 or \n        (index_dot == #file_name\
    \ and index_last_digit == index_dot - 1) then\n        return 'No'\n    end\n\
    \    local ext = file_name:sub(index_dot + 1, #file_name)\n    if ext ~= 'txt'\
    \ and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n    end\n    local\
    \ name = file_name:sub(1, index_dot - 1)\n    local first_ch = name:sub(1, 1)\n\
    \    if (not ('a' <= first_ch and first_ch <= 'z') and not ('A' <= first_ch and\
    \ first_ch <= 'Z')) then\n        return 'No'\n    end\n    return 'Yes'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp_oowf3o.lua:16:\
    \ attempt to call a nil value (global 'is_string')\nstack traceback:\n\t/tmp/tmpp_oowf3o.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpp_oowf3o.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if file_name:match(\"%.[a-zA-Z][a-zA-Z0-9]?txt$\") or file_name:match(\"\
    %.[a-zA-Z][a-zA-Z0-9]?exe$\") or file_name:match(\"%.[a-zA-Z][a-zA-Z0-9]?dll$\"\
    ) then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwm55bfu5.lua:26:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpwm55bfu5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu18z8nru.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu18z8nru.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  if file_name:match('^%l%w*%.[a-zA-Z]{2,3}$') then return 'Yes' end\n  return\
    \ 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vswne6k.lua:23:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8vswne6k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpore9hbuk.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpore9hbuk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t--first we check if the file's name contains more than three digits or not\n\
    \tlocal count = 0\n\tfor c in file_name:gmatch('%d') do\n\t\tcount = count + 1\n\
    \tend\n\tif count > 3 then\n\t\treturn 'No'\n\tend\n\t--now we check if there\
    \ is exactly one dot in the file's name\n\tif string.count(file_name, '.') ~=\
    \ 1 then\n\t\treturn 'No'\n\tend\n\t--now we check if the substring before the\
    \ dot is empty or not\n\tlocal dot_pos = string.find(file_name, '.')\n\tlocal\
    \ before_dot = string.sub(file_name, 1, dot_pos - 1)\n\tif before_dot == '' then\n\
    \t\treturn 'No'\n\tend\n\t--now we check if the substring after the dot is one\
    \ of ['txt', 'exe', 'dll']\n\tlocal after_dot = string.sub(file_name, dot_pos\
    \ + 1)\n\tif after_dot ~= 'txt' and after_dot ~= 'exe' and after_dot ~= 'dll'\
    \ then\n\t\treturn 'No'\n\tend\n\t--now we check if the first character before\
    \ the dot is a letter\n\tif not (string.match(before_dot, '^%a') ~= nil) then\n\
    \t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgwajxkrj.lua:25:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpgwajxkrj.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpgwajxkrj.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnldh442.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmphnldh442.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local i = 0\n    local dot = file_name:find('.')\n    local i = 0\n    for\
    \ word in file_name:sub(1, dot - 1):gmatch('%d') do\n        i = i + 1\n    end\n\
    \    if i >= 3 then\n        return 'No'\n    end\n    if file_name:sub(dot +\
    \ 1) ~= 'txt' and file_name:sub(dot + 1) ~= 'exe' and file_name:sub(dot + 1) ~=\
    \ 'dll' then\n        return 'No'\n    end\n    if file_name:find('^%a') == nil\
    \ then\n        return 'No'\n    end\n    if file_name:sub(1, dot - 1) == '' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ugppjxq.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8ugppjxq.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local match, _ = string.gsub(file_name, '%.', '')\n    local match2, _ =\
    \ string.gsub(file_name, '%d', '')\n    local match3, _ = string.gsub(file_name,\
    \ '%a', '')\n    local dot = file_name:find('%.')\n    local post = file_name:sub(dot+1)\n\
    \    if match == 1 and match2 ~= #file_name and match3 ~= #file_name and \n  \
    \     (post == 'txt' or post == 'exe' or post == 'dll') then\n        return 'Yes'\n\
    \    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy70s77a.lua:32:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpmy70s77a.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsojbqhu1.lua:21:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsojbqhu1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local s1, s2 = file_name:match('(.+)%.(.+)')\n    return s1 and s2 and #s1:match('%d')\
    \ <= 3 and s1:match('^%a+') and (s2 == 'txt' or s2 == 'exe' or s2 == 'dll') and\
    \ 'Yes' or 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp744ugt6w.lua:17:\
    \ attempt to get length of a nil value\nstack traceback:\n\t/tmp/tmp744ugt6w.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp744ugt6w.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if file_name:match(\"^[a-zA-Z][a-zA-Z0-9]*%.(txt|exe|dll)$\") then\n    \
    \    return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3c4ys4j.lua:26:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpo3c4ys4j.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- returns 'Yes' if and only if all the following conditions are met:\n  --\
    \ - There should not be more than three digits ('0'-'9') in the file's name.\n\
    \  -- - The file's name contains exactly one dot '.'\n  -- - The substring before\
    \ the dot should not be empty, and it starts with a letter from \n  -- the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n  -- - The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n  local function check_file_name(file_name)\n\
    \    local function no_more_than_three_digits(file_name)\n      local function\
    \ get_number_of_digits(file_name)\n        local temp_num = 0\n        for i =\
    \ 1, file_name:len() do\n          if tonumber(file_name:sub(i, i)) ~= nil then\
    \ temp_num = temp_num + 1 end\n        end\n        return temp_num\n      end\n\
    \      return get_number_of_digits(file_name) <= 3\n    end\n    local function\
    \ exactly_one_dot(file_name)\n      local temp_num = 0\n      for i = 1, file_name:len()\
    \ do\n        if file_name:sub(i, i) == '.' then temp_num = temp_num + 1 end\n\
    \      end\n      return temp_num == 1\n    end\n    local function check_substring_before_dot(file_name)\n\
    \      local temp_file_name = string.gsub(file_name, '%.', ' ')\n      local temp_substring\
    \ = split(temp_file_name, ' ')[1]\n      return temp_substring:len() > 0 and temp_substring:match('%a')\n\
    \    end\n    local function check_substring_after_dot(file_name)\n      local\
    \ temp_file_name = string.gsub(file_name, '%.', ' ')\n      local temp_substring\
    \ = split(temp_file_name, ' ')[2]\n      return temp_substring == 'txt' or temp_substring\
    \ == 'exe' or\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ynb30xc.lua:49: ''end'' expected (to close ''function'' at
    line 45) near ''=''

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \treturn file_name:match'^[a-zA-Z]%w*%.[txt, exe, dll]$'\nend\nassert(file_name_check('example.txt')\
    \ == 'Yes')\nassert(file_name_check('1example.dll') == 'No')\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpdce6kgan.lua:18: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpdce6kgan.lua:18: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local dot_index = file_name:find(\"%.\")\n  if not dot_index then\n    return\
    \ \"No\"\n  end\n  local prefix = file_name:sub(1, dot_index - 1)\n  local suffix\
    \ = file_name:sub(dot_index + 1)\n  if not valid_suffix[suffix] then\n    return\
    \ \"No\"\n  end\n  if prefix:find(\"%d\") and prefix:find(\"%d\") > 3 then\n \
    \   return \"No\"\n  end\n  if not prefix:find(\"%a\") then\n    return \"No\"\
    \n  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe85xp51f.lua:22:\
    \ attempt to index a nil value (global 'valid_suffix')\nstack traceback:\n\t/tmp/tmpe85xp51f.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpe85xp51f.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawx66pat.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpawx66pat.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    return (file_name:match '^%a.*%.(txt|exe|dll)$' and 'Yes' or 'No')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7be0gaj.lua:22:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpy7be0gaj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- Your code here\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcb76wqeo.lua:23:\
    \ expected: \"Yes\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpcb76wqeo.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal file_name_ptn = [[^([a-zA-Z]+)[^a-zA-Z0-9]*([0-9]*)[.]([^.]+)$]]\n\tlocal\
    \ base_name, counter, extension = file_name:match(file_name_ptn)\n\tif counter\
    \ and tonumber(counter) > 3 then\n\t\treturn 'No'\n\tend\n\tlocal valid_extensions\
    \ = { 'txt', 'exe', 'dll' }\n\tfor _, v in ipairs(valid_extensions) do\n\t\tif\
    \ v == extension then\n\t\t\treturn 'Yes'\n\t\tend\n\tend\n\treturn 'No'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpam4vda5t.lua:18:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpam4vda5t.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpam4vda5t.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local cnt_digit = 0\n  local dot_pos = nil\n  local ext_pos = nil\n  local\
    \ ok = false\n  for i = 1, #file_name do\n    local c = file_name:sub(i, i)\n\
    \    if (c >= '0') and (c <= '9') then\n      cnt_digit = cnt_digit + 1\n    elseif\
    \ c == '.' then\n      dot_pos = i\n    end\n  end\n  if (dot_pos ~= nil) and\
    \ (dot_pos > 1) and (cnt_digit <= 3) then\n    local extension = file_name:sub(dot_pos\
    \ + 1, #file_name)\n    if extension == 'txt' or extension == 'exe' or extension\
    \ == 'dll' then\n      ok = true\n    end\n  end\n  if ok then\n    return 'Yes'\n\
    \  else\n    return 'No'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkknkowp2.lua:45:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpkknkowp2.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- Your implementation goes here\n  return \"No\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiaqysm1z.lua:23:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpiaqysm1z.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    return file_name:match('^[%a]+%d?[%d?]?[%d?]?%.(%a+)$') and\n           \
    \ (file_name:match('^[%a]+%d?[%d?]?[%d?]?%.(%a+)$') == 'txt' or\n            \
    \ file_name:match('^[%a]+%d?[%d?]?[%d?]?%.(%a+)$') == 'exe' or\n             file_name:match('^[%a]+%d?[%d?]?[%d?]?%.(%a+)$')\
    \ == 'dll') and\n            not file_name:match('%d') or\n            not file_name:match('%.')\
    \ or\n            not file_name:match('%a') and\n            'No' or 'Yes'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7innj368.lua:29:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp7innj368.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if #file_name > 256 then\n        return 'No'\n    end\n    local is_file_name_valid\
    \ = true\n    local is_digits_count_valid = true\n    local is_before_dot_valid\
    \ = true\n    local is_after_dot_valid = true\n    local digits_count = 0\n  \
    \  local is_dot_exists = false\n    local dot_index = -1\n    for i=1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c == '.' then\n      \
    \      if is_dot_exists then\n                is_file_name_valid = false\n   \
    \             break\n            end\n            is_dot_exists = true\n     \
    \       dot_index = i\n        elseif c:match('%d') then\n            digits_count\
    \ = digits_count + 1\n            if digits_count > 3 then\n                is_digits_count_valid\
    \ = false\n                break\n            end\n        end\n    end\n    if\
    \ is_file_name_valid and is_digits_count_valid then\n        local before_dot\
    \ = file_name:sub(1, dot_index - 1)\n        local after_dot = file_name:sub(dot_index\
    \ + 1)\n        if before_dot == '' or not before_dot:match('%a') then\n     \
    \       is_before_dot_valid = false\n        end\n        if not after_dot:match('txt$')\
    \ and not after_dot:match('exe$') and not after_dot:match('dll$') then\n     \
    \       is_after_dot_valid = false\n        end\n    end\n    if is_file_name_valid\
    \ and is_digits_count_valid and is_before_dot_valid and is_after_dot_valid then\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73le6mop.lua:64:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp73le6mop.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  if string.match(file_name, \"^%l+%d*%.%l+$\") then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65sn70g9.lua:29:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp65sn70g9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- Check if there are more than three digits, and return 'No' if it's true.\n\
    \  if tonumber(file_name:match('%d%d%d')) then\n    return 'No'\n  end\n  -- Check\
    \ if there is no dot, and return 'No' if it's true.\n  if not file_name:match('%.')\
    \ then\n    return 'No'\n  end\n  -- Check if the substring before the dot doesn't\
    \ start with a latin letter, and \n  -- return 'No' if it's true.\n  if not file_name:match('^[a-zA-Z]')\
    \ then\n    return 'No'\n  end\n  -- Check if the substring after the dot isn't\
    \ one of the valid values, and return \n  -- 'No' if it's true.\n  if not file_name:match('%.[txt|exe|dll]$')\
    \ then\n    return 'No'\n  end\n  -- Return 'Yes' if the file's name is valid.\n\
    \  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xu7sn2h.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp6xu7sn2h.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \treturn 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4l1xwm9.lua:23:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmps4l1xwm9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal count = 0\n\tlocal dot\n\tlocal before_dot = ''\n\tlocal after_dot = ''\n\
    \tfor i = 1, #file_name do\n\t\tif file_name:sub(i, i) == '.' then\n\t\t\tdot\
    \ = i\n\t\telseif file_name:sub(i, i):match('%d') then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\tif count > 3 then\n\t\treturn 'No'\n\tend\n\tif dot ~=\
    \ nil then\n\t\tbefore_dot = file_name:sub(1, dot - 1)\n\t\tafter_dot = file_name:sub(dot\
    \ + 1, #file_name)\n\tend\n\tif #before_dot == 0 or before_dot:match('%A') or\
    \ \n\tnot (after_dot == 'txt' or after_dot == 'exe' or after_dot == 'dll') then\n\
    \t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3absgyny.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp3absgyny.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsojbqhu1.lua:21:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsojbqhu1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local pattern = [[^[a-zA-Z]\\w*\\.txt$|^[a-zA-Z]\\w*\\.exe$|^[a-zA-Z]\\w*\\\
    .dll$]]\n    local found = file_name:match(pattern)\n    if found then return\
    \ 'Yes' else return 'No' end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9f7wpmh.lua:24:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpp9f7wpmh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09lr_s3g.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp09lr_s3g.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- -- WRITE YOUR CODE HERE\n    -- if file_name == nil then return 'No' end\n\
    \    -- file_name = file_name:lower()\n    -- local dot_index = string.find(file_name,\
    \ '.')\n    -- if dot_index == nil then return 'No' end\n    -- local after_dot\
    \ = string.sub(file_name, dot_index+1)\n    -- if after_dot ~= 'txt' and after_dot\
    \ ~= 'exe' and after_dot ~= 'dll' then return 'No' end\n    -- local before_dot\
    \ = string.sub(file_name, 1, dot_index-1)\n    -- local digit_number = 0\n   \
    \ -- for i = 1, #before_dot do\n    --     local ch = string.sub(before_dot, i,\
    \ i)\n    --     if ch >= '0' and ch <= '9' then\n    --         digit_number\
    \ = digit_number + 1\n    --     end\n    -- end\n    -- if digit_number > 3 then\
    \ return 'No' end\n    -- local ch = string.sub(before_dot, 1, 1)\n    -- if ch\
    \ < 'a' or ch > 'z' then return 'No' end\n    -- return 'Yes'\n    -- If file_name\
    \ is nil return 'No'\n    if file_name == nil then return 'No' end\n    -- Convert\
    \ the file_name to lowercase\n    file_name = file_name:lower()\n    -- Find the\
    \ index of the dot\n    local dot_index = string.find(file_name, '.')\n    --\
    \ If the dot index is nil, return 'No'\n    if dot_index == nil then return 'No'\
    \ end\n    -- Get the substring after the dot\n    local after_dot = string.sub(file_name,\
    \ dot_index+1)\n    -- If the substring after the dot is not one of these strings:\
    \ 'txt', 'exe', 'dll' return 'No'\n    if after_dot ~= 'txt' and after_dot ~=\
    \ 'exe' and after_dot ~= 'dll' then return 'No' end\n    -- Get the substring\
    \ before the dot\n    local before_dot = string\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgbv9v_fj.lua:81: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local n = string.match(file_name, '%d+')\n  if n and #n > 3 then\n    return\
    \ 'No'\n  end\n  local filename, ext = string.match(file_name, '(%a+)(%.?%a+)')\n\
    \  if not filename or filename == '' then\n    return 'No'\n  end\n  if ext ~=\
    \ '.txt' and ext ~= '.exe' and ext ~= '.dll' then\n    return 'No'\n  end\n  return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp76r4t7d.lua:34:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpp76r4t7d.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpore9hbuk.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpore9hbuk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_count = 0\n    local digit_count = 0\n    local valid_ext = {'txt',\
    \ 'exe', 'dll'}\n    local file_name_parts = {}\n    local dot_index = -1\n  \
    \  local is_alpha = true\n    local ext = ''\n    local name = ''\n    local valid\
    \ = false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6g4a2dsy.lua:57: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tif type(file_name) ~= 'string' then\n\t\terror('Invalid argument: ' .. tostring(file_name))\n\
    \tend\n\t\n\tlocal dot_pos = file_name:find('.')\n\tif not dot_pos then\n\t\t\
    return 'No'\n\tend\n\t\n\tlocal before_dot = file_name:sub(1, dot_pos - 1)\n\t\
    local after_dot = file_name:sub(dot_pos + 1)\n\t\n\tlocal digit_count = before_dot:gsub('%d',\
    \ '')\n\tif digit_count > 3 then\n\t\treturn 'No'\n\tend\n\t\n\tlocal first_letter\
    \ = before_dot:sub(1, 1)\n\tif not first_letter:match('[a-zA-Z]') then\n\t\treturn\
    \ 'No'\n\tend\n\t\n\tlocal valid_types = {['txt'] = true, ['exe'] = true, ['dll']\
    \ = true}\n\tif not valid_types[after_dot] then\n\t\treturn 'No'\n\tend\n\t\n\t\
    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpigljf8db.lua:29:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpigljf8db.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpigljf8db.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu690f715.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu690f715.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits_count = 0\n    local substring_before_dot = ''\n    local substring_after_dot\
    \ = ''\n    local dot_found = false\n    for ch in file_name:gmatch('.') do\n\
    \        if not dot_found then\n            if ch == '.' then\n              \
    \  dot_found = true\n            elseif ch:match('%d') then\n                digits_count\
    \ = digits_count + 1\n            elseif not ch:match('%a') then\n           \
    \     return 'No'\n            end\n            substring_before_dot = substring_before_dot\
    \ .. ch\n        else\n            substring_after_dot = substring_after_dot ..\
    \ ch\n        end\n    end\n    if not dot_found or digits_count > 3 or substring_before_dot\
    \ == '' or not\n        (substring_after_dot == 'txt' or substring_after_dot ==\
    \ 'exe' or\n        substring_after_dot == 'dll') then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2wjoaj7.lua:46:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpw2wjoaj7.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t-- Check the number of digits\n\tlocal num_digits = 0\n\tfor char in file_name:gmatch('%d')\
    \ do\n\t\tnum_digits = num_digits + 1\n\tend\n\tif num_digits > 3 then\n\t\treturn\
    \ 'No'\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkceeytrk.lua:56: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local ext = {'txt', 'exe', 'dll'}\n    local cnt = 0\n    local first_dot\
    \ = 0\n    local last_dot = 0\n    local first_char = 0\n    local first_letter\
    \ = 0\n    local last_char = 0\n    for i = 1, #file_name do\n        if file_name:sub(i,\
    \ i) == '.' then\n            if first_dot == 0 then first_dot = i end\n     \
    \       last_dot = i\n        end\n        if file_name:sub(i, i) == '0' then\
    \ cnt = cnt + 1 end\n        if file_name:sub(i, i) == '1' then cnt = cnt + 1\
    \ end\n        if file_name:sub(i, i) == '2' then cnt = cnt + 1 end\n        if\
    \ file_name:sub(i, i) == '3' then cnt = cnt + 1 end\n        if file_name:sub(i,\
    \ i) == '4' then cnt = cnt + 1 end\n        if file_name:sub(i, i) == '5' then\
    \ cnt = cnt + 1 end\n        if file_name:sub(i, i) == '6' then cnt = cnt + 1\
    \ end\n        if file_name:sub(i, i) == '7' then cnt = cnt + 1 end\n        if\
    \ file_name:sub(i, i) == '8' then cnt = cnt + 1 end\n        if file_name:sub(i,\
    \ i) == '9' then cnt = cnt + 1 end\n        if cnt > 3 then return 'No' end\n\
    \        if first_dot ~= 0 and i < first_dot then\n            if file_name:sub(i,\
    \ i) == 'a' then first_letter = 1 end\n            if file_name:sub(i, i) == 'b'\
    \ then first_letter = 1 end\n            if file_name:sub(i, i) == 'c' then first_letter\
    \ = 1 end\n            if file_name:sub(i, i) == 'd' then first_letter = 1 end\n\
    \            if file_name:sub(i\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgsrgm73x.lua:45: '')'' expected (to close ''('' at line 44)
    near ''lu''

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t-- count the number of letters in the file name substring before the dot\n\t\
    local before_dot = file_name:match('[a-zA-Z]+')\n\tif not before_dot then\n\t\t\
    return 'No'\n\tend\n\t-- count the number of digits in the file name\n\tlocal\
    \ num_digits = file_name:match('%d+')\n\tif num_digits and #num_digits > 3 then\n\
    \t\treturn 'No'\n\tend\n\t-- match the file name substring after the dot\n\tlocal\
    \ after_dot = file_name:match('%.[a-zA-Z]+')\n\tif not after_dot or not valid_extensions[after_dot]\
    \ then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplg1tiyg0.lua:28:\
    \ attempt to index a nil value (global 'valid_extensions')\nstack traceback:\n\
    \t/tmp/tmplg1tiyg0.lua:28: in local 'candidate'\n\t/tmp/tmplg1tiyg0.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  if file_name:match(\"%d\") == nil then\n    return 'No'\n  end\n  if file_name:match(\"\
    %d%d\") == nil then\n    return 'No'\n  end\n  if file_name:match(\"%d%d%d\")\
    \ == nil then\n    return 'No'\n  end\n  if file_name:match(\"%.\") == nil then\n\
    \    return 'No'\n  end\n  if file_name:match(\"%.\") then\n    if file_name:match(\"\
    %.\") == file_name:match(\"%.\") then\n      return 'No'\n    end\n  end\n  if\
    \ file_name:match(\"%.\") == nil then\n    return 'No'\n  end\n  if file_name:match(\"\
    %.\") then\n    if file_name:match(\"%.\") == file_name:match(\"%.\") then\n \
    \     return 'No'\n    end\n  end\n  if file_name:match(\"%.\") == nil then\n\
    \    return 'No'\n  end\n  if file_name:match(\"%.\") then\n    if file_name:match(\"\
    %.\") == file_name:match(\"%.\") then\n      return 'No'\n    end\n  end\n  if\
    \ file_name:match(\"%.\") == nil then\n    return 'No'\n  end\n  if file_name:match(\"\
    %.\") then\n    if file_name:match(\"%.\") == file_name:match(\"%.\") then\n \
    \     return 'No'\n    end\n  end\n  if file_name:match(\"%.\") == nil then\n\
    \    return 'No'\n  end\n  if file_name:match(\"%.\") then\n    if file_name:match(\"\
    %.\") == file_name:match(\"%.\") then\n      return 'No'\n    end\n  end\n  if\
    \ file_name:match(\"%.\") == nil then\n    return 'No'\n  end\n  if file_name:match(\"\
    %.\") then\n    if file_name:match(\"%.\") == file_name:match(\"%.\") then\n \
    \     return 'No'\n    end\n  end\n  if file_name:match(\"%.\") == nil then\n\
    \    return 'No'\n  end\n  if\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcqdjyg0r.lua:77: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptln4j6z3.lua:22:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmptln4j6z3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t-- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy910f9mo.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpy910f9mo.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndpx4qwq.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpndpx4qwq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: Implement your code here\n  return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb53uy61l.lua:24:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpb53uy61l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local _, digits = file_name:gsub('%d', '')\n  if digits > 3 then\n    return\
    \ 'No'\n  end\n  local s, _ = file_name:gsub('%.', '')\n  if s ~= 1 then\n   \
    \ return 'No'\n  end\n  if not file_name:match('[a-zA-Z]+%.[a-zA-Z]+') then\n\
    \    return 'No'\n  end\n  if not file_name:match('[a-zA-Z]+%.[a-zA-Z]+') then\n\
    \    return 'No'\n  end\n  local extension = file_name:sub(file_name:find('%.')\
    \ + 1)\n  if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll'\
    \ then\n    return 'No'\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymdhy6gj.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpymdhy6gj.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local is_valid = false\n    local last_dot_index = string.find(file_name,\
    \ '%.')\n    local first_substring = string.sub(file_name, 1, last_dot_index -\
    \ 1)\n    local second_substring = string.sub(file_name, last_dot_index + 1)\n\
    \    if string.match(first_substring, '[a-zA-Z][a-zA-Z0-9]*') and\n       string.match(second_substring,\
    \ '[a-zA-Z]*') and\n       string.match(file_name, '%.') and\n       not string.match(file_name,\
    \ '%d%d%d') then\n        is_valid = true\n    end\n    if is_valid then\n   \
    \     return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0nsd4x2.lua:37:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpk0nsd4x2.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- your code here\n  local first, last, middle = string.match(file_name, \"\
    ^(%a+)%.(%a+)$\")\n  if first == nil or last == nil or middle ~= nil then\n  \
    \  return \"No\"\n  end\n  if last ~= \"txt\" and last ~= \"exe\" and last ~=\
    \ \"dll\" then\n    return \"No\"\n  end\n  local count = 0\n  for i in string.gmatch(first,\
    \ \"%d\") do\n    count = count + 1\n  end\n  if count > 3 then\n    return \"\
    No\"\n  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimd59ccz.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpimd59ccz.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1hb1n7x.lua:23:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpi1hb1n7x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: Implement me!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lhugvsw.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1lhugvsw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal ext_patterns = {txt = true, exe = true, dll = true}\n\tlocal num_count\
    \ = 0\n\tlocal ext = ''\n\tfor i = 1, #file_name do\n\t\tlocal c = file_name:sub(i,\
    \ i)\n\t\tif c == '.' then\n\t\t\tfor j = i + 1, #file_name do\n\t\t\t\text =\
    \ ext .. file_name:sub(j, j)\n\t\t\tend\n\t\t\tbreak\n\t\telseif c:match('%d')\
    \ then\n\t\t\tnum_count = num_count + 1\n\t\tend\n\tend\n\tif ext_patterns[ext]\
    \ and num_count <= 3 then\n\t\treturn 'Yes'\n\telse\n\t\treturn 'No'\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yrpxcik.lua:41:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp4yrpxcik.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lcf5x6i.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp8lcf5x6i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal filename, extension = file_name:match(\"(.*)%.(%a+)\")\n\tif extension\
    \ == \"txt\" or extension == \"exe\" or extension == \"dll\" then\n\t\treturn\
    \ 'Yes'\n\telse\n\t\treturn 'No'\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxps5_7u.lua:28:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmphxps5_7u.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local has_dot = false\n    local number_of_digits = 0\n    local first_character\
    \ = string.byte(file_name, 1)\n    if (first_character >= string.byte('a') and\
    \ first_character <= string.byte('z')) or \n        (first_character >= string.byte('A')\
    \ and first_character <= string.byte('Z')) then\n        for i = 1, #file_name\
    \ do\n            local character = string.byte(file_name, i)\n            if\
    \ character >= string.byte('0') and character <= string.byte('9') then\n     \
    \           number_of_digits = number_of_digits + 1\n            elseif character\
    \ == string.byte('.') then\n                has_dot = true\n            end\n\
    \        end\n        local file_type = string.sub(file_name, -3)\n        if\
    \ has_dot and number_of_digits <= 3 and (file_type == 'txt' or file_type == 'exe'\
    \ or file_type == 'dll') then\n            return 'Yes'\n        end\n    end\n\
    \    return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps33ps368.lua:51:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmps33ps368.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local b = match(file_name, '^[a-zA-Z]%w*%.%w+$')\n  if b then\n    local c\
    \ = match(file_name, '%d')\n    if c then\n      local d = match(file_name, '%d%d%d')\n\
    \      if d then\n        return 'No'\n      else\n        return 'Yes'\n    \
    \  end\n    else\n      return 'Yes'\n    end\n  else\n    return 'No'\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxhg_8gs1.lua:16:\
    \ attempt to call a nil value (global 'match')\nstack traceback:\n\t/tmp/tmpxhg_8gs1.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpxhg_8gs1.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu18z8nru.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu18z8nru.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tif not file_name:match('^[a-zA-Z]%a*%.%a*$') then\n\t\treturn 'No'\n\tend\n\t\
    \n\tlocal extension = file_name:match('%a*$')\n\t\n\tif not extension:match('^txt$')\
    \ and not extension:match('^exe$') and not extension:match('^dll$') then\n\t\t\
    return 'No'\n\tend\n\t\n\tlocal digits = file_name:match('%d+')\n\t\n\tif digits\
    \ and #digits > 3 then\n\t\treturn 'No'\n\tend\n\t\n\treturn 'Yes'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi2idre4.lua:42:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpzi2idre4.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local no_digits, dot_found, dot_pos, file_ext, i\n  no_digits = 0\n  dot_found\
    \ = false\n  i = 1\n  while file_name:sub(i, i) ~= \"\" do\n    if file_name:sub(i,\
    \ i) == '.' then\n      if dot_found then\n        return 'No'\n      end\n  \
    \    dot_found = true\n      dot_pos = i\n    elseif file_name:sub(i, i):match('%d')\
    \ then\n      no_digits = no_digits + 1\n    end\n    i = i + 1\n  end\n  if not\
    \ dot_found or no_digits > 3 then\n    return 'No'\n  end\n  file_ext = file_name:sub(dot_pos\
    \ + 1)\n  if file_ext ~= 'txt' and file_ext ~= 'exe' and file_ext ~= 'dll' then\n\
    \    return 'No'\n  end\n  if file_name:sub(1, dot_pos - 1):match('%a') == nil\
    \ then\n    return 'No'\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp84dnyxm.lua:49:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpp84dnyxm.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_idx = string.find(file_name, '.')\n    if not dot_idx then\n  \
    \      return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_idx\
    \ - 1)\n    local suffix = string.sub(file_name, dot_idx + 1)\n    local is_digit\
    \ = string.match(prefix, '[0-9]')\n    if #prefix == 0 or is_digit or \n     \
    \   (is_digit and #string.match(prefix, '[0-9]') > 3) or\n        not string.match(prefix,\
    \ '[a-zA-Z]') or\n        (suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll')\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsonp777x.lua:35:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpsonp777x.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t-- TODO: Please implement this function.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgm5d4bw.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmgm5d4bw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  return file_name\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_c4jtaz.lua:22:\
    \ expected: \"Yes\"\nactual: \"example.txt\"\nstack traceback:\n\t/tmp/tmpc_c4jtaz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local check = false\n    local n=0\n    local dot=0\n    local digit=0\n\
    \    for i=1, #file_name do\n        if file_name:sub(i,i)=='.' then\n       \
    \     dot=dot+1\n        end\n        if file_name:sub(i,i):match('%d') then\n\
    \            digit=digit+1\n        end\n    end\n    local file_extension = file_name:sub(#file_name-2,#file_name)\n\
    \    if #file_name>=5 and dot==1 and digit<=3 and file_name:sub(1,1):match('%a')\
    \ and (file_extension=='txt' or file_extension=='exe' or file_extension=='dll')\
    \ then\n        check=true\n    end\n    if check==true then\n        return 'Yes'\n\
    \    else \n        return 'No'\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hpxykyc.lua:53:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp0hpxykyc.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tif not file_name:match(\"%w+%.%w+\") then\n\t\treturn \"No\"\n\tend\n\tlocal\
    \ str1, str2 = file_name:match(\"(.+)%.(.+)\")\n\tif str1:match(\"%d\") then\n\
    \t\treturn \"No\"\n\tend\n\tif str2 ~= \"txt\" and str2 ~= \"exe\" and str2 ~=\
    \ \"dll\" then\n\t\treturn \"No\"\n\tend\n\tif str1:match(\"%d%d%d\") then\n\t\
    \treturn \"No\"\n\tend\n\treturn \"Yes\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pf2ue61.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp7pf2ue61.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local curr = 1\n  local after_dot = false\n  local digits = 0\n  local letters\
    \ = 0\n  local dots = 0\n  while curr <= #file_name do\n    local c = file_name:sub(curr,\
    \ curr)\n    if c == '.' then\n      dots = dots + 1\n      after_dot = true\n\
    \    elseif c:match('%d') then\n      digits = digits + 1\n    elseif after_dot\
    \ then\n      letters = letters + 1\n    end\n    curr = curr + 1\n  end\n  local\
    \ name = file_name:match('%l.*')\n  local ext = file_name:match('%.(%l%l%l)')\n\
    \  if digits > 3 or dots ~= 1 or name == nil or (ext ~= 'txt' and ext ~= 'exe'\
    \ and ext ~= 'dll') then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm5zbi4r.lua:46:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpmm5zbi4r.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local ret_val = 'No'\n  if string.match(file_name, '^[a-zA-Z][a-zA-Z0-9]*%.(txt|exe|dll)$')\
    \ then\n    ret_val = 'Yes'\n  end\n  return ret_val\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdi9nfu_6.lua:26:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpdi9nfu_6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \treturn 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4l1xwm9.lua:23:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmps4l1xwm9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatg9ptfg.lua:22:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpatg9ptfg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal num_digits = 0\n\tlocal num_dots = 0\n\tlocal dot_index = -1\n\tlocal\
    \ has_alpha = false\n\tlocal has_txt = false\n\tlocal has_exe = false\n\tlocal\
    \ has_dll = false\n\tlocal cur_char = ''\n\t\n\tfor i = 1, string.len(file_name)\
    \ do\n\t\tcur_char = string.sub(file_name, i, i)\n\t\tif string.find(cur_char,\
    \ '%d') then\n\t\t\tnum_digits = num_digits + 1\n\t\telseif cur_char == '.' then\n\
    \t\t\tnum_dots = num_dots + 1\n\t\t\tdot_index = i\n\t\telseif string.find(cur_char,\
    \ '%l') then\n\t\t\thas_alpha = true\n\t\tend\n\tend\n\t\n\tif num_digits > 3\
    \ or num_dots ~= 1 or not has_alpha then\n\t\treturn 'No'\n\tend\n\t\n\tif string.sub(file_name,\
    \ dot_index + 1, dot_index + 3) == 'txt' then\n\t\thas_txt = true\n\telseif string.sub(file_name,\
    \ dot_index + 1, dot_index + 3) == 'exe' then\n\t\thas_exe = true\n\telseif string.sub(file_name,\
    \ dot_index + 1, dot_index + 3) == 'dll' then\n\t\thas_dll = true\n\tend\n\t\n\
    \tif has_txt or has_exe or has_dll then\n\t\treturn 'Yes'\n\telse\n\t\treturn\
    \ 'No'\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpharksgfr.lua:60:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpharksgfr.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local t = file_name:match('^([a-zA-Z][a-zA-Z0-9_]*)%.([a-zA-Z0-9]+)$')\n  return\
    \ ((t and #t:match('%d+') < 4 and t:match('^txt$') or t:match('^exe$') or t:match('^dll$'))\
    \ and 'Yes') or 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx8zb8vzq.lua:17:\
    \ attempt to get length of a nil value\nstack traceback:\n\t/tmp/tmpx8zb8vzq.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpx8zb8vzq.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local is_digit = function(s) return s:find('%d') end\n  local not_digit = function(s)\
    \ return not is_digit(s) end\n  local file_parts = take_while(not_digit, split(file_name,\
    \ '.'))\n  if #file_parts == 2 then\n    if count_if(is_digit, file_parts[1])\
    \ <= 3 then\n      local extensions = {'txt', 'exe', 'dll'}\n      if is_sublist(extensions,\
    \ file_parts[2]) then\n        if not is_empty(file_parts[1]) then\n         \
    \ if char_at(file_parts[1], 1):find('[a-zA-Z]') then\n            return 'Yes'\n\
    \          end\n        end\n      end\n    end\n  end\n  return 'No'\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiu9y2swt.lua:18:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpiu9y2swt.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpiu9y2swt.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local sub1 = ''\n    local sub2 = ''\n    local flag\
    \ = false\n    for i = 1, string.len(file_name) do\n        if (string.sub(file_name,\
    \ i, i) == '.') then\n            flag = true\n        end\n        if (string.sub(file_name,\
    \ i, i) >= '0' and string.sub(file_name, i, i) <= '9') then\n            count\
    \ = count + 1\n        end\n        if (flag) then\n            sub2 = sub2 ..\
    \ string.sub(file_name, i, i)\n        else\n            sub1 = sub1 .. string.sub(file_name,\
    \ i, i)\n        end\n    end\n    local patterns = {'^[a-zA-Z]', 'txt$', 'exe$',\
    \ 'dll$'}\n    local a = (string.find(sub1, patterns[1]) and string.find(sub2,\
    \ patterns[2]) or string.find(sub2, patterns[3]) or string.find(sub2, patterns[4]))\n\
    \    if (count > 3) then\n        return 'No'\n    elseif (string.find(file_name,\
    \ '%.') ~= string.find(file_name, '%.%.')) then\n        return 'No'\n    elseif\
    \ (not a) then\n        return 'No'\n    else\n        return 'Yes'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryqn8et1.lua:49:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpryqn8et1.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if string.match(file_name, '[%d]%d%d.') then return 'No' end\n    if not\
    \ string.match(file_name, '%a[%w]*[.](txt|exe|dll)') then return 'No' end\n  \
    \  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jv2n84g.lua:24:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp2jv2n84g.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsojbqhu1.lua:21:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsojbqhu1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal index_of_dot = file_name:find('%.')\n\tlocal index_of_dot_begin = file_name:sub(1,\
    \ index_of_dot - 1)\n\tlocal index_of_dot_end = file_name:sub(index_of_dot + 1)\n\
    \tlocal index_of_dot_begin_num = index_of_dot_begin:find('%d')\n\tlocal index_of_dot_begin_upper\
    \ = index_of_dot_begin:find('[A-Z]')\n\tlocal index_of_dot_begin_lower = index_of_dot_begin:find('[a-z]')\n\
    \tif (index_of_dot_begin_num ~= nil and index_of_dot_begin_num > 3) or (index_of_dot_begin_upper\
    \ == nil and index_of_dot_begin_lower == nil) or (index_of_dot_end ~= 'txt' and\
    \ index_of_dot_end ~= 'exe' and index_of_dot_end ~= 'dll') then\n\t\treturn 'No'\n\
    \telse\n\t\treturn 'Yes'\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9p5tzda.lua:33:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpi9p5tzda.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implementation\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tjzun_q.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6tjzun_q.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- EXERCISE 1 CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z_xmens.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9z_xmens.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local n1, n2, n3 = string.find(file_name, \"[^%d]\")\n    if n3 ~= nil then\n\
    \        return 'No'\n    end\n    local n1, n2, s1 = string.find(file_name, \"\
    ^[%a]+%.\")\n    if s1 == nil then\n        return 'No'\n    end\n    if not (s1\
    \ == \"txt\" or s1 == \"exe\" or s1 == \"dll\") then\n        return 'No'\n  \
    \  end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xolqj2_.lua:33:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp2xolqj2_.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal res, count_digits, count_dot = 'Yes', 0, 0\n\tfor char in file_name:gmatch('%w')\
    \ do\n\t\tif tonumber(char) then\n\t\t\tcount_digits = count_digits + 1\n\t\t\
    elseif char == '.' then\n\t\t\tcount_dot = count_dot + 1\n\t\tend\n\tend\n\tlocal\
    \ file_type = {'txt', 'exe', 'dll'}\n\tlocal dot_index = file_name:find('%.')\n\
    \tlocal ext = string.sub(file_name, dot_index + 1)\n\tif count_digits > 3 or count_dot\
    \ ~= 1 or dot_index == 1 or not file_type[ext] then\n\t\tres = 'No'\n\tend\n\t\
    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfre185bj.lua:36:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpfre185bj.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3djmmhe.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpi3djmmhe.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal first, second = file_name:match('(.+)%.(.+)')\n\tlocal strt, count = 0,\
    \ 0\n\tif first and second then\n\t\tfor i = 1, first:len() do\n\t\t\tif first:sub(i,\
    \ i):match('%d') then\n\t\t\t\tcount = count + 1\n\t\t\telseif first:sub(i, i):match('%a')\
    \ then\n\t\t\t\tstrt = strt + 1\n\t\t\tend\n\t\tend\n\t\tif strt == 0 or count\
    \ > 3 or second ~= 'txt' and second ~= 'exe' and second ~= 'dll' then\n\t\t\t\
    return 'No'\n\t\telse\n\t\t\treturn 'Yes'\n\t\tend\n\telse\n\t\treturn 'No'\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1_oi6ar.lua:40:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpy1_oi6ar.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- your code here\n    local n = string.match(file_name, \"%.txt\")\n   \
    \ local n2 = string.match(file_name, \"%.exe\")\n    local n3 = string.match(file_name,\
    \ \"%.dll\")\n    local count = 0\n    for i in string.gmatch(file_name, \"%d\"\
    ) do\n        count = count + 1\n    end\n    local first = string.match(file_name,\
    \ \"[a-zA-Z]\")\n    local letter = string.match(file_name, \"[a-zA-Z].*\")\n\
    \    if not (n or n2 or n3) then\n        return \"No\"\n    elseif not first\
    \ then\n        return \"No\"\n    elseif count > 3 then\n        return \"No\"\
    \n    elseif not letter then\n        return \"No\"\n    else\n        return\
    \ \"Yes\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ah5l303.lua:43:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp4ah5l303.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu18z8nru.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu18z8nru.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local function is_valid_filename_component(component)\n        return component:match('^[a-zA-Z][%a%d]*$')\
    \ ~= nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6_idimob.lua:51: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if string.find(file_name, '%d') == nil or \n        string.find(file_name,\
    \ '%d%d') == nil or \n        string.find(file_name, '%d%d%d') == nil then\n \
    \       return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgspfy6lr.lua:29:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpgspfy6lr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local a, b, c = 0, 0, 0\n    local flag = false\n    local l = file_name:len()\n\
    \    for i = 1, l do\n        local ch = file_name:sub(i, i)\n        if ch >=\
    \ '0' and ch <= '9' then\n            a = a + 1\n        elseif ch == '.' then\n\
    \            b = b + 1\n            flag = true\n        elseif ch < 'A' or (ch\
    \ > 'Z' and ch < 'a') or ch > 'z' then\n            c = c + 1\n        end\n \
    \   end\n    local after = file_name:sub(file_name:reverse():find('.') + 1)\n\
    \    if a > 3 or b ~= 1 or c ~= 0 or not flag or not file_name:sub(1, 1):match('[A-Za-z]')\
    \ or after ~= 'txt' and after ~= 'exe' and after ~= 'dll' then\n        return\
    \ 'No'\n    else\n        return 'Yes'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx507c91i.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpx507c91i.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- Body of the function goes here\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4ga31t_t.lua:49: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if file_name == nil then\n        return 'No'\n    end\n    local prefix,\
    \ suffix = file_name:match('([^.]*)%.(%w+)')\n    if prefix == nil or suffix ==\
    \ nil then\n        return 'No'\n    end\n    local digit_count = prefix:gsub('%D',\
    \ ''):len()\n    if digit_count > 3 then\n        return 'No'\n    end\n    if\
    \ suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n        return\
    \ 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tzhq1vg.lua:37:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp_tzhq1vg.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tif string.find(file_name, \"^[A-Za-z]%d*%.txt$\") then\n\t\treturn \"Yes\"\n\
    \telseif string.find(file_name, \"^[A-Za-z]%d*%.exe$\") then\n\t\treturn \"Yes\"\
    \n\telseif string.find(file_name, \"^[A-Za-z]%d*%.dll$\") then\n\t\treturn \"\
    Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_ob930c.lua:30:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp6_ob930c.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \t-- Your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3c5x2nev.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp3c5x2nev.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: Implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jfexibd.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp8jfexibd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local cnt = 0\n    local dot = false\n    local dot_pos = nil\n    local\
    \ ext = false\n    for i = 1, #file_name do\n        local ch = file_name:sub(i,\
    \ i)\n        if ch == '.' then\n            dot = true\n            dot_pos =\
    \ i\n        elseif ch:match('%d') then\n            cnt = cnt + 1\n        end\n\
    \    end\n    if cnt > 3 then\n        return 'No'\n    end\n    if not dot then\n\
    \        return 'No'\n    end\n    local name = file_name:sub(1, dot_pos - 1)\n\
    \    if name == '' then\n        return 'No'\n    end\n    local _, num = name:gsub('%a',\
    \ '')\n    if num == 0 then\n        return 'No'\n    end\n    local ext_name\
    \ = file_name:sub(dot_pos + 1)\n    if ext_name == 'txt' or ext_name == 'exe'\
    \ or ext_name == 'dll' then\n        return 'Yes'\n    end\n    return 'No'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26pux4ug.lua:54:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp26pux4ug.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \treturn 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4l1xwm9.lua:23:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmps4l1xwm9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if #file_name:match(\"%d+\") <= 3 then\n        local str = file_name:match(\"\
    [^%.]+\")\n        if str and str:match(\"^[a-zA-Z]\") then\n            local\
    \ end_name = file_name:match(\"%.(%w+)$\")\n            return (end_name == 'txt'\
    \ or end_name == 'exe' or end_name == 'dll') and 'Yes' or 'No'\n        end\n\
    \    end\n    return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvni37ix2.lua:16:\
    \ attempt to get length of a nil value\nstack traceback:\n\t/tmp/tmpvni37ix2.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpvni37ix2.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    return file_name:match('^[a-zA-Z]+[0-9]*%.[a-z]+$') ~= nil and \n       \
    \ file_name:match('%.[a-z]+$') == '.txt' or file_name:match('%.[a-z]+$') == '.exe'\
    \ or file_name:match('%.[a-z]+$') == '.dll'\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2za95ft1.lua:23:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp2za95ft1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement me\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tr4a0uv.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9tr4a0uv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu18z8nru.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu18z8nru.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  if #file_name > 255 then\n    return 'No'\n  end\n  local dot_pos, dot_count\
    \ = file_name:find('.', 0, true), 0\n  if not dot_pos then\n    return 'No'\n\
    \  end\n  local digit_count = 0\n  for i = 1, dot_pos - 1 do\n    local char =\
    \ file_name:sub(i, i)\n    if char:match('%d') then\n      digit_count = digit_count\
    \ + 1\n    end\n  end\n  if digit_count > 3 then\n    return 'No'\n  end\n  local\
    \ suffix = file_name:sub(dot_pos + 1, -1)\n  if not {['txt'] = true, ['exe'] =\
    \ true, ['dll'] = true}[suffix] then\n    return 'No'\n  end\n  return 'Yes'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2do2b0dx.lua:34: ''then'' expected near ''[''

    '
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    return (file_name:match('^[%a]%a*%.(%a%a%a)$') and \n        (file_name:match('%d')\
    \ and file_name:match('%d%d%d') and 'No' or 'Yes') or 'No')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuf037vos.lua:27:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpuf037vos.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 0
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal digits = 0\n\tlocal dot = 0\n\tlocal extension = ' '\n\tlocal dot_index\
    \ = 0\n\tlocal file_name_part = ' '\n\tlocal file_name_char = ' '\n\tfor i = 1,\
    \ #file_name do\n\t\tfile_name_char = string.sub(file_name, i, i)\n\t\tif file_name_char\
    \ == '.' then\n\t\t\tdot = dot + 1\n\t\t\tdot_index = i\n\t\telseif file_name_char\
    \ == '0' or file_name_char == '1' or file_name_char == '2' or\n\t\t\tfile_name_char\
    \ == '3' or file_name_char == '4' or file_name_char == '5' or\n\t\t\tfile_name_char\
    \ == '6' or file_name_char == '7' or file_name_char == '8' or\n\t\t\tfile_name_char\
    \ == '9' then\n\t\t\tdigits = digits + 1\n\t\tend\n\tend\n\tif dot ~= 1 or digits\
    \ > 3 then\n\t\treturn 'No'\n\tend\n\tfile_name_part = string.sub(file_name, 1,\
    \ dot_index - 1)\n\textension = string.sub(file_name, dot_index + 1, #file_name)\n\
    \tif string.len(file_name_part) == 0 or\n\t\tstring.find(file_name_part, '[a-zA-Z]')\
    \ ~= 1 or\n\t\t(extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll')\
    \ then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits_cnt = 0\n    local dot_found = false\n    local first_half =\
    \ ''\n    local second_half = ''\n    for i = 1, #file_name do\n        if file_name:sub(i,\
    \ i) >= '0' and file_name:sub(i, i) <= '9' then\n            digits_cnt = digits_cnt\
    \ + 1\n        elseif file_name:sub(i, i) == '.' then\n            dot_found =\
    \ true\n        elseif digits_cnt > 3 then\n            return 'No'\n        elseif\
    \ not dot_found then\n            first_half = first_half .. file_name:sub(i,\
    \ i)\n        else\n            second_half = second_half .. file_name:sub(i,\
    \ i)\n        end\n    end\n    if digits_cnt > 3 or not dot_found or first_half\
    \ == '' or first_half:sub(1, 1) < 'a' or first_half:sub(1, 1) > 'z' then\n   \
    \     return 'No'\n    end\n    local possible_extensions = {'txt', 'exe', 'dll'}\n\
    \    for i = 1, #possible_extensions do\n        if second_half == possible_extensions[i]\
    \ then\n            return 'Yes'\n        end\n    end\n    return 'No'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdifzf55.lua:49:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmppdifzf55.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsojbqhu1.lua:21:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsojbqhu1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if type(file_name) ~= 'string' then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3d75hhqv.lua:26:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp3d75hhqv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal file_name_parts = string.split(file_name, '.')\n\tlocal file_extension\
    \ = file_name_parts[2]\n\tlocal file_name_before_dot = file_name_parts[1]\n\t\
    local digit_count = string.count(file_name_before_dot, '[0-9]')\n\tif digit_count\
    \ <= 3 and string.len(file_name_before_dot) > 0 and string.match(file_name_before_dot,\
    \ '^[a-zA-Z]') and (file_extension == 'txt' or file_extension == 'exe' or file_extension\
    \ == 'dll') then\n\t\treturn 'Yes'\n\telse\n\t\treturn 'No'\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplp08dcbs.lua:16:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmplp08dcbs.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmplp08dcbs.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = file_name:find('.')\n    if dot_pos == nil then return 'No'\
    \ end\n    local ext = file_name:sub(dot_pos + 1)\n    if ext ~= 'txt' and ext\
    \ ~= 'exe' and ext ~= 'dll' then return 'No' end\n    local basename = file_name:sub(1,\
    \ dot_pos - 1)\n    if basename:len() < 1 then return 'No' end\n    if basename:sub(1,\
    \ 1):match('[a-zA-Z]') == nil then return 'No' end\n    if basename:match('%d')\
    \ == nil then return 'No' end\n    local count = 0\n    for _ in basename:gmatch('%d')\
    \ do count = count + 1 end\n    if count > 3 then return 'No' end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_b4f6gw.lua:33:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpf_b4f6gw.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tif (string.match(file_name, \"%d%d%d\") ~= nil) then return 'No' end\n\tlocal\
    \ dot = string.find(file_name, '.')\n\tif (dot == nil) then return 'No' end\n\t\
    local before = string.sub(file_name, 1, dot - 1)\n\tif (string.match(before, \"\
    ^[a-zA-Z]+$\") == nil) then return 'No' end\n\tlocal after = string.sub(file_name,\
    \ dot + 1)\n\tif (after ~= 'txt' and after ~= 'exe' and after ~= 'dll') then return\
    \ 'No' end\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpui6as8_e.lua:29:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpui6as8_e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1hb1n7x.lua:23:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpi1hb1n7x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal count = file_name:gsub('%d','')\n\tcount = #file_name - #count\n\tif count\
    \ > 3 then return 'No' end\n\tif file_name:find('%.') ~= file_name:reverse():find('%.')\
    \ then return 'No' end\n\tlocal a, b = file_name:match('^([%a%_]+)%.([%a%_]+)$')\n\
    \tif not a or not b then return 'No' end\n\tif b ~= 'txt' and b ~= 'exe' and b\
    \ ~= 'dll' then return 'No' end\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5zb1sy8.lua:29:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpp5zb1sy8.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local counter = 0\n    local _, file_extension_start = file_name:find('%.[%a]+$')\n\
    \    if (not file_extension_start) then\n        return 'No'\n    end\n    local\
    \ file_name_without_extension = file_name:sub(1, file_extension_start - 1)\n \
    \   local file_extension = file_name:sub(file_extension_start + 1)\n    if (file_extension\
    \ == 'exe' or file_extension == 'dll' or file_extension == 'txt') then\n     \
    \   for i = 1, #file_name_without_extension do\n            if (file_name_without_extension:sub(i,\
    \ i):match('%d')) then\n                counter = counter + 1\n            end\n\
    \        end\n        if (counter > 3) then\n            return 'No'\n       \
    \ end\n        if (not file_name_without_extension:match('^[%a]+')) then\n   \
    \         return 'No'\n        end\n        return 'Yes'\n    end\n    return\
    \ 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4tpgdlg.lua:43:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpx4tpgdlg.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local file_pattern = [[%a%a*%.%w%w%w]]\n    if file_name:match(file_pattern)\
    \ then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0zd6axo.lua:28:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpw0zd6axo.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\t\
    for i = 1, #file_name do\n\t\tif file_name:sub(i, i) == '.' then\n\t\t\ta = i\n\
    \t\tend\n\t\tif a ~= 0 then\n\t\t\tif string.find('0123456789', file_name:sub(i,\
    \ i)) ~= nil then\n\t\t\t\tb = 1\n\t\t\tend\n\t\t\tif string.find('txt', file_name:sub(i,\
    \ i)) ~= nil then\n\t\t\t\tc = 1\n\t\t\tend\n\t\t\tif string.find('exe', file_name:sub(i,\
    \ i)) ~= nil then\n\t\t\t\td = 1\n\t\t\tend\n\t\t\tif string.find('dll', file_name:sub(i,\
    \ i)) ~= nil then\n\t\t\t\te = 1\n\t\t\tend\n\t\tend\n\tend\n\tif a == 0 or b\
    \ ~= 0 or c ~= 1 and d ~= 1 and e ~= 1 then\n\t\treturn 'No'\n\telse\n\t\treturn\
    \ 'Yes'\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34n0m_r4.lua:50:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp34n0m_r4.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: replace the following line with the actual implementation\n  return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5hrk3tj.lua:24:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpr5hrk3tj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tprint('file_name: ' .. file_name)\n\tif file_name:match('%d') then\n\t\tif file_name:match('%d%d%d')\
    \ then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\tif file_name:match('%.') then\n\t\
    \tif file_name:match('%..') then\n\t\t\treturn 'No'\n\t\tend\n\t\tif not file_name:match('%a%.')\
    \ then\n\t\t\treturn 'No'\n\t\tend\n\t\tlocal _, name = file_name:match('(%a+)%.(%a+)')\n\
    \t\tif name ~= 'txt' and name ~= 'exe' and name ~= 'dll' then\n\t\t\treturn 'No'\n\
    \t\tend\n\telse\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "file_name: example.txt\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpdakbdn1w.lua:42: expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\
    \t/tmp/tmpdakbdn1w.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009533
- exit_code: 0
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local cnt = 0\n    local dot = 0\n    local ext = {}\n    for i = 1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c >= '0' and c <= '9'\
    \ then\n            cnt = cnt + 1\n        elseif c == '.' then\n            dot\
    \ = dot + 1\n        end\n    end\n    if dot ~= 1 or cnt > 3 then\n        return\
    \ 'No'\n    end\n    for i in string.gmatch(file_name, '([^.]+)') do\n       \
    \ table.insert(ext, i)\n    end\n    local exts = {txt = true, exe = true, dll\
    \ = true}\n    if not exts[ext[2]] or #ext[1] == 0 or not ext[1]:match('^[a-zA-Z]')\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local flag = false\n    local\
    \ suffix = {'txt', 'exe', 'dll'}\n    for i = 1, #file_name do\n        if tonumber(file_name:sub(i,\
    \ i)) ~= nil then\n            count = count + 1\n        end\n        if file_name:sub(i,\
    \ i) == '.' then\n            dot_count = dot_count + 1\n        end\n    end\n\
    \    if count > 3 or dot_count ~= 1 then\n        return 'No'\n    end\n    local\
    \ prefix = file_name:sub(1, file_name:find('.') - 1)\n    local suffix = file_name:sub(file_name:find('.')\
    \ + 1, #file_name)\n    for i = 1, #suffix do\n        if tonumber(suffix:sub(i,\
    \ i)) ~= nil then\n            return 'No'\n        end\n    end\n    if #prefix\
    \ > 0 and (prefix:byte(1) >= 65 and prefix:byte(1) <= 90 or \n    prefix:byte(1)\
    \ >= 97 and prefix:byte(1) <= 122) then\n        for i = 1, #suffix do\n     \
    \       if suffix == suffix[i] then\n                flag = true\n           \
    \ end\n        end\n        if flag then\n            return 'Yes'\n        else\n\
    \            return 'No'\n        end\n    else\n        return 'No'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkf8tsceo.lua:58:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkf8tsceo.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  if not file_name:match(\"%d\") then\n    if file_name:match(\"^[a-zA-Z]+[a-zA-Z0-9-]+%.[a-zA-Z]+$\"\
    ) then\n      if file_name:match(\"%.txt$\") or file_name:match(\"%.exe$\") or\
    \ file_name:match(\"%.dll$\") then\n        return \"Yes\"\n      end\n    end\n\
    \  end\n  return \"No\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f_429ct.lua:32:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp3f_429ct.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \treturn file_name:match(\"^[a-zA-Z][a-zA-Z0-9]*%.[tx]xt$\") and 'Yes' or 'No'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgexzg6gq.lua:25:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpgexzg6gq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local is_valid = 'Yes'\n    local number_digits = 0\n    local dot_found\
    \ = false\n    local ext_found = false\n    local first_part = ''\n    local second_part\
    \ = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.' then\n\
    \            dot_found = true\n        elseif dot_found == false then\n      \
    \      first_part = first_part .. file_name:sub(i, i)\n        else\n        \
    \    second_part = second_part .. file_name:sub(i, i)\n        end\n        if\
    \ file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then\n           \
    \ number_digits = number_digits + 1\n        end\n    end\n    if number_digits\
    \ > 3 then\n        is_valid = 'No'\n    end\n    if dot_found == false then\n\
    \        is_valid = 'No'\n    end\n    if first_part == '' then\n        is_valid\
    \ = 'No'\n    end\n    if second_part ~= 'txt' and second_part ~= 'exe' and second_part\
    \ ~= 'dll' then\n        is_valid = 'No'\n    end\n    return is_valid\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoih9bxc2.lua:53:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpoih9bxc2.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digit_counter = 0\n    local dot_counter = 0\n    local first_part_is_valid\
    \ = false\n    local second_part_is_valid = false\n    for c in file_name:gmatch('.')\
    \ do\n        if string.match(c, '[0-9]') then\n            digit_counter = digit_counter\
    \ + 1\n        elseif c == '.' then\n            dot_counter = dot_counter + 1\n\
    \        end\n    end\n    if string.match(file_name, '^[a-zA-Z][a-zA-Z0-9_]*%.')\
    \ and string.match(file_name, '%.[a-zA-Z][a-zA-Z0-9_]*$') then\n        first_part_is_valid\
    \ = true\n    end\n    if string.match(file_name, '%.[tT][xX][tT]$') or string.match(file_name,\
    \ '%.[eE][xX][eE]$') or string.match(file_name, '%.[dD][lL][lL]$') then\n    \
    \    second_part_is_valid = true\n    end\n    if digit_counter > 3 or dot_counter\
    \ ~= 1 or not first_part_is_valid or not second_part_is_valid then\n        return\
    \ 'No'\n    else\n        return 'Yes'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj25oohv7.lua:61:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpj25oohv7.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  return file_name:match('^[a-zA-Z]%w*%.(txt|exe|dll)$') and 'Yes' or 'No'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqvd516b.lua:22:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpnqvd516b.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsojbqhu1.lua:21:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsojbqhu1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: add your code here\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4adl5aay.lua:23:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp4adl5aay.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot = false\n    local after_dot = false\n   \
    \ local ext = {'txt', 'exe', 'dll'}\n    for k, v in pairs(file_name) do\n   \
    \     if v == '.' then\n            dot = true\n        end\n        if string.match(v,\
    \ '%d') then\n            count = count + 1\n        end\n        if dot then\n\
    \            after_dot = true\n        end\n    end\n    if after_dot and count\
    \ < 4 then\n        if not string.match(file_name, '^%a') then\n            return\
    \ 'No'\n        end\n        if not string.match(file_name, '%.txt$') or string.match(file_name,\
    \ '%.exe$') or string.match(file_name, '%.dll$') then\n            return 'No'\n\
    \        end\n        return 'Yes'\n    end\n    return 'No'\nend\nfile_name_check('example.txt')\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpe14rjezl.lua:20: bad argument #1 to 'for iterator' (table\
    \ expected, got string)\nstack traceback:\n\t[C]: in function 'next'\n\t/tmp/tmpe14rjezl.lua:20:\
    \ in local 'file_name_check'\n\t/tmp/tmpe14rjezl.lua:42: in main chunk\n\t[C]:\
    \ in ?\n"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \treturn 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9edcir7.lua:22:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpj9edcir7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsojbqhu1.lua:21:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsojbqhu1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local prefix = string.match(file_name, '^[a-zA-Z][a-zA-Z0-9_]*')\n  local ext\
    \ = string.match(file_name, '[a-zA-Z][a-zA-Z0-9_]*$')\n  if prefix == nil or ext\
    \ == nil then\n    return 'No'\n  end\n  local count = 0\n  for c in string.gmatch(prefix,\
    \ '[0-9]') do\n    count = count + 1\n  end\n  if count > 3 then\n    return 'No'\n\
    \  end\n  if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n    return 'No'\n\
    \  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplk2xd6v_.lua:51:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmplk2xd6v_.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local counter = 0\n    local position = -1\n    local suffix = {'txt', 'exe',\
    \ 'dll'}\n    for i = 1, #file_name do\n        if file_name:byte(i) >= 48 and\
    \ file_name:byte(i) <= 57 then\n            counter = counter + 1\n        end\n\
    \        if file_name:byte(i) == 46 then\n            position = i\n        end\n\
    \    end\n    if counter > 3 then\n        return 'No'\n    end\n    if position\
    \ == -1 then\n        return 'No'\n    end\n    if position == 1 then\n      \
    \  return 'No'\n    end\n    if (file_name:byte(1) < 65 or file_name:byte(1) >\
    \ 90) and (file_name:byte(1) < 97 or file_name:byte(1) > 122) then\n        return\
    \ 'No'\n    end\n    local suffix_flag = 0\n    for i = 1, #suffix do\n      \
    \  if file_name:sub(position + 1) == suffix[i] then\n            suffix_flag =\
    \ 1\n        end\n    end\n    if suffix_flag == 0 then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gyl03z8.lua:69:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp8gyl03z8.lua:69:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- YOUR CODE GOES HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvobp5w5.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpkvobp5w5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- write your function here\n    local _, count = string.gsub(file_name,\
    \ \"[0-9]\", \"\")\n    if count > 3 then\n        return \"No\"\n    end\n  \
    \  local _, count = string.gsub(file_name, \".\", \"\")\n    if count ~= 2 then\n\
    \        return \"No\"\n    end\n    local str_before, str_after = string.match(file_name,\
    \ \"(%a+)%.(%a+)\")\n    if str_before == nil or str_after == nil then\n     \
    \   return \"No\"\n    end\n    local str_list = {\"txt\", \"exe\", \"dll\"}\n\
    \    for k, v in pairs(str_list) do\n        if v == str_after then\n        \
    \    return \"Yes\"\n        end\n    end\n    return \"No\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsz9560z.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpmsz9560z.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
- exit_code: 1
  program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdk1zdpgs.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpdk1zdpgs.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009533
