name: HumanEval_37_sort_even
language: lua
results:
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n\tlocal i = 1\n\twhile l[i] ~= nil do\n\t\tif i % 2 ==\
    \ 0 then\n\t\t\ttable.sort(l, function(x, y) return x < y end, i, i)\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_even\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1yosxaj.lua:23:\
    \ expected: {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}\nactual: {-10, -5, -3, 0,\
    \ 1, 2, 3, 3, 5, 9, 123}\nList difference analysis:\n* lists A (actual) and B\
    \ (expected) have the same size\n* lists A and B start differing at index 2\n\
    * lists A and B are equal again from index 11\n* Common parts:\n  = A[1], B[1]:\
    \ -10\n* Differing parts:\n  - A[2]: -5\n  + B[2]: 3\n  - A[3]: -3\n  + B[3]:\
    \ -5\n  - A[4]: 0\n  + B[4]: 2\n  - A[5]: 1\n  + B[5]: -3\n  - A[6]: 2\n  + B[6]:\
    \ 3\n  - A[7]: 3\n  + B[7]: 5\n  - A[8]: 3\n  + B[8]: 0\n  - A[9]: 5\n  + B[9]:\
    \ 9\n  - A[10]: 9\n  + B[10]: 1\n* Common parts at the end of the lists\n  = A[11],\
    \ B[11]: 123\nstack traceback:\n\t/tmp/tmpn1yosxaj.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n  local result = {}\n  local evens = {}\n  for i, v in\
    \ ipairs(l) do\n    if i % 2 == 0 then\n      evens[#evens + 1] = v\n    else\n\
    \      result[i] = v\n    end\n  end\n  table.sort(evens)\n  for i, v in ipairs(evens)\
    \ do\n    result[i * 2] = v\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwuzak5_.lua:29:\
    \ expected: {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}\nactual: {5, 0, -5, 1, -3,\
    \ 2, 9, 3, 123, 3, -10}\nList difference analysis:\n* lists A (actual) and B (expected)\
    \ have the same size\n* lists A and B start differing at index 1\n* Differing\
    \ parts:\n  - A[1]: 5\n  + B[1]: -10\n  - A[2]: 0\n  + B[2]: 3\n  = A[3], B[3]:\
    \ -5\n  - A[4]: 1\n  + B[4]: 2\n  = A[5], B[5]: -3\n  - A[6]: 2\n  + B[6]: 3\n\
    \  - A[7]: 9\n  + B[7]: 5\n  - A[8]: 3\n  + B[8]: 0\n  - A[9]: 123\n  + B[9]:\
    \ 9\n  - A[10]: 3\n  + B[10]: 1\n  - A[11]: -10\n  + B[11]: 123\nstack traceback:\n\
    \t/tmp/tmpzwuzak5_.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n    local l1 = {}\n    local l2 = {}\n    for i, v in\
    \ ipairs(l) do\n        if (i % 2 == 0) then\n            l1[#l1 + 1] = v\n  \
    \      else\n            l2[#l2 + 1] = v\n        end\n    end\n    table.sort(l1)\n\
    \    for i, v in ipairs(l2) do\n        l1[2 * i - 1] = v\n    end\n    return\
    \ l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_even\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n\
    \    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_91apoc.lua:28:\
    \ expected: {1, 2, 3}\nactual: {1, 3=3}\nstack traceback:\n\t/tmp/tmpv_91apoc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n    local even = {}\n    local odd = {}\n    for i, v\
    \ in ipairs(l) do\n        if i % 2 == 0 then\n            even[#even + 1] = v\n\
    \        else\n            odd[#odd + 1] = v\n        end\n    end\n    table.sort(even)\n\
    \    local res = {}\n    for i, v in ipairs(odd) do\n        res[#res + 1] = v\n\
    \        res[#res + 1] = even[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakm5_7l5.lua:31:\
    \ expected: {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}\nactual: {5, 0, -5, 1, -3,\
    \ 2, 9, 3, 123, 3, -10}\nList difference analysis:\n* lists A (actual) and B (expected)\
    \ have the same size\n* lists A and B start differing at index 1\n* Differing\
    \ parts:\n  - A[1]: 5\n  + B[1]: -10\n  - A[2]: 0\n  + B[2]: 3\n  = A[3], B[3]:\
    \ -5\n  - A[4]: 1\n  + B[4]: 2\n  = A[5], B[5]: -3\n  - A[6]: 2\n  + B[6]: 3\n\
    \  - A[7]: 9\n  + B[7]: 5\n  - A[8]: 3\n  + B[8]: 0\n  - A[9]: 123\n  + B[9]:\
    \ 9\n  - A[10]: 3\n  + B[10]: 1\n  - A[11]: -10\n  + B[11]: 123\nstack traceback:\n\
    \t/tmp/tmpakm5_7l5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n  local sorted = {}\n  for k, v in pairs(l) do\n    if\
    \ k % 2 == 0 then\n      table.insert(sorted, v)\n    end\n  end\n  table.sort(sorted)\n\
    \  local i = 1\n  for k, v in pairs(l) do\n    if k % 2 == 0 then\n      l[k]\
    \ = sorted[i]\n      i = i + 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtepyz4i.lua:30:\
    \ expected: {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}\nactual: {5, 0, -5, 1, -3,\
    \ 2, 9, 3, 123, 3, -10}\nList difference analysis:\n* lists A (actual) and B (expected)\
    \ have the same size\n* lists A and B start differing at index 1\n* Differing\
    \ parts:\n  - A[1]: 5\n  + B[1]: -10\n  - A[2]: 0\n  + B[2]: 3\n  = A[3], B[3]:\
    \ -5\n  - A[4]: 1\n  + B[4]: 2\n  = A[5], B[5]: -3\n  - A[6]: 2\n  + B[6]: 3\n\
    \  - A[7]: 9\n  + B[7]: 5\n  - A[8]: 3\n  + B[8]: 0\n  - A[9]: 123\n  + B[9]:\
    \ 9\n  - A[10]: 3\n  + B[10]: 1\n  - A[11]: -10\n  + B[11]: 123\nstack traceback:\n\
    \t/tmp/tmpgtepyz4i.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n    local l_ = {}\n    for i = 1, #l do\n        if i\
    \ % 2 == 1 then\n            l_[i] = l[i]\n        else\n            local n =\
    \ {}\n            for j = 1, #l[i] do\n                n[j] = l[i][j]\n      \
    \      end\n            table.sort(n)\n            l_[i] = n\n        end\n  \
    \  end\n    return l_\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_even\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvt90dw3y.lua:15:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpvt90dw3y.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpvt90dw3y.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n\tlocal result = {}\n\tlocal even = {}\n\tfor i, val\
    \ in ipairs(l) do\n\t\tif i % 2 == 0 then\n\t\t\teven[#even + 1] = val\n\t\t\t\
    result[i] = val\n\t\telse\n\t\t\tresult[i] = val\n\t\tend\n\tend\n\ttable.sort(even)\n\
    \tfor i, val in ipairs(even) do\n\t\tresult[i * 2] = val\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_even\n\
    \    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n\
    \    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpia10qn59.lua:30:\
    \ expected: {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}\nactual: {5, 0, -5, 1, -3,\
    \ 2, 9, 3, 123, 3, -10}\nList difference analysis:\n* lists A (actual) and B (expected)\
    \ have the same size\n* lists A and B start differing at index 1\n* Differing\
    \ parts:\n  - A[1]: 5\n  + B[1]: -10\n  - A[2]: 0\n  + B[2]: 3\n  = A[3], B[3]:\
    \ -5\n  - A[4]: 1\n  + B[4]: 2\n  = A[5], B[5]: -3\n  - A[6]: 2\n  + B[6]: 3\n\
    \  - A[7]: 9\n  + B[7]: 5\n  - A[8]: 3\n  + B[8]: 0\n  - A[9]: 123\n  + B[9]:\
    \ 9\n  - A[10]: 3\n  + B[10]: 1\n  - A[11]: -10\n  + B[11]: 123\nstack traceback:\n\
    \t/tmp/tmpia10qn59.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n\tlocal ret = {}\n\tfor i = 1, #l do\n\t\tif i % 2 ==\
    \ 1 then\n\t\t\tret[i] = l[i]\n\t\telse\n\t\t\tlocal t = {}\n\t\t\tfor j = i,\
    \ #l, 2 do\n\t\t\t\ttable.insert(t, l[j])\n\t\t\tend\n\t\t\ttable.sort(t)\n\t\t\
    \tfor j = i, #l, 2 do\n\t\t\t\tret[j] = t[(j + 1) / 2 - i / 2]\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_even\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu097xo9l.lua:30:\
    \ expected: {1, 2, 3}\nactual: {1, 3=3}\nstack traceback:\n\t/tmp/tmpu097xo9l.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n\tlocal newl = {}\n\tfor i = 1, #l do\n\t\tif i % 2 ==\
    \ 1 then\n\t\t\tnewl[i] = l[i]\n\t\telse\n\t\t\ttable.insert(newl, sort_even_helper(l[i]))\n\
    \t\tend\n\tend\n\treturn newl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_even\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptntuefvh.lua:14:\
    \ attempt to call a nil value (global 'sort_even_helper')\nstack traceback:\n\t\
    /tmp/tmptntuefvh.lua:14: in local 'candidate'\n\t/tmp/tmptntuefvh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n    local l2 = {}\n    for i,v in ipairs(l) do\n    \
    \    if i % 2 == 0 then\n            l2[i] = v\n        else\n            l2[i]\
    \ = v\n        end\n    end\n    return l2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_eut962w.lua:24:\
    \ expected: {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}\nactual: {5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10}\nList difference analysis:\n* lists A (actual) and B (expected)\
    \ have the same size\n* lists A and B start differing at index 1\n* Differing\
    \ parts:\n  - A[1]: 5\n  + B[1]: -10\n  = A[2], B[2]: 3\n  = A[3], B[3]: -5\n\
    \  = A[4], B[4]: 2\n  = A[5], B[5]: -3\n  = A[6], B[6]: 3\n  - A[7]: 9\n  + B[7]:\
    \ 5\n  = A[8], B[8]: 0\n  - A[9]: 123\n  + B[9]: 9\n  = A[10], B[10]: 1\n  - A[11]:\
    \ -10\n  + B[11]: 123\nstack traceback:\n\t/tmp/tmp_eut962w.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n    local sorted_l = {}\n    for k, v in pairs(l) do\n\
    \        if k % 2 == 0 then\n            sorted_l[k] = v\n        else\n     \
    \       table.insert(sorted_l, v)\n        end\n    end\n    for k, v in pairs(sorted_l)\
    \ do\n        if k % 2 == 0 then\n            table.sort(sorted_l[k])\n      \
    \  end\n    end\n    return sorted_l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp49ui347s.lua:19:\
    \ bad argument #1 to 'sort' (table expected, got number)\nstack traceback:\n\t\
    /tmp/tmp49ui347s.lua:19: in local 'candidate'\n\t/tmp/tmp49ui347s.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n  local sorted = {}\n  for i = 1, #l do\n    sorted[i]\
    \ = l[i]\n  end\n  for i = 2, #l, 2 do\n    table.sort(sorted, function(a, b)\
    \ return a[i] < b[i] end)\n  end\n  return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4yvzu84.lua:14:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmph4yvzu84.lua:14:\
    \ in function </tmp/tmph4yvzu84.lua:14>\n\t[C]: in function 'table.sort'\n\t/tmp/tmph4yvzu84.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmph4yvzu84.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n  local ret = {}\n  for i = 1, #l do\n    if i % 2 ==\
    \ 1 then\n      ret[i] = l[i]\n    else\n      local sub_table = {}\n      for\
    \ j = 1, #l[i] do\n        sub_table[j] = l[i][j]\n      end\n      table.sort(sub_table)\n\
    \      ret[i] = sub_table\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2zuv17hk.lua:15:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp2zuv17hk.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp2zuv17hk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n\tlocal output = {}\n\tlocal even = {}\n\tlocal odd =\
    \ {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 2 == 0 then\n\t\t\teven[#even + 1]\
    \ = v\n\t\telse\n\t\t\todd[#odd + 1] = v\n\t\tend\n\tend\n\ttable.sort(even)\n\
    \tfor i, v in ipairs(odd) do\n\t\toutput[#output + 1] = v\n\t\toutput[#output\
    \ + 1] = even[i]\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuu7ojb0.lua:31:\
    \ expected: {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}\nactual: {5, 0, -5, 1, -3,\
    \ 2, 9, 3, 123, 3, -10}\nList difference analysis:\n* lists A (actual) and B (expected)\
    \ have the same size\n* lists A and B start differing at index 1\n* Differing\
    \ parts:\n  - A[1]: 5\n  + B[1]: -10\n  - A[2]: 0\n  + B[2]: 3\n  = A[3], B[3]:\
    \ -5\n  - A[4]: 1\n  + B[4]: 2\n  = A[5], B[5]: -3\n  - A[6]: 2\n  + B[6]: 3\n\
    \  - A[7]: 9\n  + B[7]: 5\n  - A[8]: 3\n  + B[8]: 0\n  - A[9]: 123\n  + B[9]:\
    \ 9\n  - A[10]: 3\n  + B[10]: 1\n  - A[11]: -10\n  + B[11]: 123\nstack traceback:\n\
    \t/tmp/tmpcuu7ojb0.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n    local t = {}\n    for i, v in ipairs(l) do\n    \
    \    if i % 2 == 0 then\n            t[i] = v\n        else\n            t[i]\
    \ = v\n        end\n    end\n    local sorted = {}\n    local ordered = table.sort(t)\n\
    \    for i, v in ipairs(ordered) do\n        if i % 2 == 0 then\n            sorted[i]\
    \ = v\n        else\n            sorted[i] = l[i]\n        end\n    end\n    return\
    \ sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_even\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n\
    \    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a nil value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n    local l_new = {}\n    for i, v in ipairs(l) do\n\
    \        if i % 2 == 0 then\n            local l_sort = l_new[i - 1]\n       \
    \     table.sort(l_sort)\n            l_new[i] = v\n        else\n           \
    \ l_new[i] = v\n        end\n    end\n    return l_new\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpigbe6pcx.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got number)\nstack traceback:\n\t\
    /tmp/tmpigbe6pcx.lua:13: in local 'candidate'\n\t/tmp/tmpigbe6pcx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n  local result = {}\n  for i, v in ipairs(l) do\n   \
    \ if i % 2 == 0 then\n      table.insert(result, table.unpack(sort(v)))\n    else\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_c9pv0b.lua:12:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpy_c9pv0b.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpy_c9pv0b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n    local ret = {}\n    for i, v in ipairs(l) do\n  \
    \      if i % 2 == 0 then\n            ret[i] = table.sort(v)\n        else\n\
    \            ret[i] = v\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_even\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n    lu.assertEquals(candidate({5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmm9d3o_2.lua:12:\
    \ bad argument #1 to 'sort' (table expected, got number)\nstack traceback:\n\t\
    /tmp/tmpmm9d3o_2.lua:12: in local 'candidate'\n\t/tmp/tmpmm9d3o_2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n  local even = {}\n  local odd = {}\n  for i, v in ipairs(l)\
    \ do\n    if i % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd,\
    \ v)\n    end\n  end\n  table.sort(even)\n  local res = {}\n  for i, v in ipairs(odd)\
    \ do\n    table.insert(res, v)\n    table.insert(res, even[i])\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_even\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n\
    \    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlpz5_3t.lua:31:\
    \ expected: {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}\nactual: {5, 0, -5, 1, -3,\
    \ 2, 9, 3, 123, 3, -10}\nList difference analysis:\n* lists A (actual) and B (expected)\
    \ have the same size\n* lists A and B start differing at index 1\n* Differing\
    \ parts:\n  - A[1]: 5\n  + B[1]: -10\n  - A[2]: 0\n  + B[2]: 3\n  = A[3], B[3]:\
    \ -5\n  - A[4]: 1\n  + B[4]: 2\n  = A[5], B[5]: -3\n  - A[6]: 2\n  + B[6]: 3\n\
    \  - A[7]: 9\n  + B[7]: 5\n  - A[8]: 3\n  + B[8]: 0\n  - A[9]: 123\n  + B[9]:\
    \ 9\n  - A[10]: 3\n  + B[10]: 1\n  - A[11]: -10\n  + B[11]: 123\nstack traceback:\n\
    \t/tmp/tmprlpz5_3t.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes a table l and returns a table l' such that\n--\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
    \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal\
    \ function sort_even(l)\n  local out = {}\n  for i, v in ipairs(l) do\n    if\
    \ i % 2 == 0 then\n      table.insert(out, v)\n    else\n      table.insert(out,\
    \ v)\n    end\n  end\n  table.sort(out, function(a, b) return b > a end)\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_even\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n\
    \    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6xlks80.lua:25:\
    \ expected: {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}\nactual: {-10, -5, -3, 0,\
    \ 1, 2, 3, 3, 5, 9, 123}\nList difference analysis:\n* lists A (actual) and B\
    \ (expected) have the same size\n* lists A and B start differing at index 2\n\
    * lists A and B are equal again from index 11\n* Common parts:\n  = A[1], B[1]:\
    \ -10\n* Differing parts:\n  - A[2]: -5\n  + B[2]: 3\n  - A[3]: -3\n  + B[3]:\
    \ -5\n  - A[4]: 0\n  + B[4]: 2\n  - A[5]: 1\n  + B[5]: -3\n  - A[6]: 2\n  + B[6]:\
    \ 3\n  - A[7]: 3\n  + B[7]: 5\n  - A[8]: 3\n  + B[8]: 0\n  - A[9]: 5\n  + B[9]:\
    \ 9\n  - A[10]: 9\n  + B[10]: 1\n* Common parts at the end of the lists\n  = A[11],\
    \ B[11]: 123\nstack traceback:\n\t/tmp/tmpj6xlks80.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
