name: HumanEval_110_exchange
language: lua
prompt: "-- In this problem, you will implement a function that takes two tables of\
  \ numbers,\n-- and determines whether it is possible to perform an exchange of elements\n\
  -- between them to make lst1 a table of only even numbers.\n-- There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n-- If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n-- all the elements of\
  \ lst1 to be even, return \"YES\".\n-- Otherwise, return \"NO\".\n-- For example:\n\
  -- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n-- >>> exchange({1, 2, 3,\
  \ 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the input tables will be non-empty.\n\
  local function exchange(lst1, lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2,\
  \ 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n\
  \    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
  \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
  \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if type(lst1) ~= 'table' or type(lst2) ~= 'table' then\n      \
    \  return 'Error: please provide two table arguments.'\n    end\n    local found_odd\
    \ = false\n    for i, v in ipairs(lst1) do\n        if v % 2 ~= 0 then\n     \
    \       for k, w in ipairs(lst2) do\n                if w % 2 == 0 then\n    \
    \                lst1[i] = w\n                    lst2[k] = v\n              \
    \      found_odd = true\n                    break\n                end\n    \
    \        end\n        end\n        if not found_odd then\n            return 'NO'\n\
    \        end\n    end\n    return 'YES'\nend", end, "\tlocal evens = 0\n\tlocal\
    \ odds = 0\n\tfor _, v in ipairs(lst1) do\n\t\tif v % 2 == 0 then\n\t\t\tevens\
    \ = evens + 1\n\t\telse\n\t\t\todds = odds + 1\n\t\tend\n\tend\n\tif evens ==\
    \ #lst1 then\n\t\treturn 'YES'\n\tend\n\tfor _, v in ipairs(lst2) do\n\t\tif v\
    \ % 2 == 0 then\n\t\t\tevens = evens + 1\n\t\telse\n\t\t\todds = odds + 1\n\t\t\
    end\n\tend\n\tif evens == #lst1 then\n\t\treturn 'YES'\n\tend\n\treturn 'NO'\n\
    end", "\tfor _, val in ipairs(lst1) do\n\t\tif val % 2 == 1 then\n\t\t\tfor k,\
    \ v in ipairs(lst2) do\n\t\t\t\tif v % 2 == 0 then\n\t\t\t\t\tlst1[k], lst2[k]\
    \ = lst2[k], lst1[k]\n\t\t\t\t\treturn 'YES'\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn\
    \ 'NO'\n\t\tend\n\tend\n\treturn 'YES'\nend", "  for i = 1, #lst1 do\n    if lst1[i]\
    \ % 2 == 1 then\n      for j = 1, #lst2 do\n        if lst2[j] % 2 == 1 then\n\
    \          lst1[i], lst2[j] = lst2[j], lst1[i]\n          break\n        end\n\
    \      end\n    end\n  end\n  for i = 1, #lst1 do\n    if lst1[i] % 2 == 1 then\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function contains_odd(lst)\n    return\
    \ linq.from(lst):any(function(n) return not is_even(n) end)\n  end\n  if contains_odd(lst1)\
    \ and contains_odd(lst2) then\n    return 'NO'\n  end\n  return 'YES'\nend", " \
    \   local res = false\n    local odd  = {}\n    local even = {}\n    for i = 1,\
    \ #lst1 do\n        if (lst1[i] % 2 == 0) then\n            even[#even + 1] =\
    \ lst1[i]\n        else\n            odd[#odd + 1] = lst1[i]\n        end\n  \
    \  end\n    for i = 1, #lst2 do\n        if (lst2[i] % 2 == 0) then\n        \
    \    even[#even + 1] = lst2[i]\n        else\n            odd[#odd + 1] = lst2[i]\n\
    \        end\n    end\n    if (#even == #lst1) then\n        res = true\n    end\n\
    \    return res and \"YES\" or \"NO\"\nend", "    -- If all of the elements of\
    \ lst1 are even, we don't need to do any\n    -- exchanges. We return \"YES\"\
    \ right away.\n    if all_even(lst1) then\n        return \"YES\"\n    end", " \
    \ -- YOUR CODE HERE\n  if not lst1 or not lst2 then\n    return nil\n  end\n \
    \ local odd_values = {}\n  local even_values = {}\n  for _, val in ipairs(lst1)\
    \ do\n    if val % 2 == 0 then\n      table.insert(even_values, val)\n    else\n\
    \      table.insert(odd_values, val)\n    end\n  end\n  for _, val in ipairs(lst2)\
    \ do\n    if val % 2 == 0 then\n      table.insert(even_values, val)\n    else\n\
    \      table.insert(odd_values, val)\n    end\n  end\n  if #odd_values == 0 then\n\
    \    return 'YES'\n  elseif #even_values == 0 then\n    return 'NO'\n  else\n\
    \    return 'YES'\n  end\nend", "    for i = 1, #lst1 do\n        if (lst1[i]\
    \ % 2 == 1) then\n            for j = 1, #lst2 do\n                if (lst2[j]\
    \ % 2 == 0) then\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n  \
    \                  return exchange(lst1, lst2)\n                end\n        \
    \    end\n            return \"NO\"\n        end\n    end\n    return \"YES\"\n\
    end", "    for i = 1, #lst1 do\n        if lst1[i] % 2 == 1 then\n           \
    \ local _, pos = isPresent(lst2, 'even')\n            if pos ~= -1 then\n    \
    \            lst1[i], lst2[pos] = lst2[pos], lst1[i]\n            else\n     \
    \           return 'NO'\n            end\n        end\n    end\n    return 'YES'\n\
    end", "  for _, v in ipairs(lst1) do\n    if v % 2 == 1 then\n      for _, w in\
    \ ipairs(lst2) do\n        if w % 2 == 0 then\n          return 'YES'\n      \
    \  end\n      end\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", " \
    \   return false\nend", "    -- TODO: implement me!\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function swap(a, i, j)\n    a[i], a[j]\
    \ = a[j], a[i]\n  end\n  local function bubble_sort(a)\n    local swap_counter\
    \ = 0\n    for i = 1, #a do\n      for j = 1, #a - i do\n        if a[j] > a[j\
    \ + 1] then\n          swap(a, j, j + 1)\n          swap_counter = swap_counter\
    \ + 1\n        end\n      end\n    end\n    return swap_counter\n  end\n  local\
    \ lst1_even_count = 0\n  local lst2_even_count = 0\n  for i = 1, #lst1 do\n  \
    \  if is_even(lst1[i]) then\n      lst1_even_count = lst1_even_count + 1\n   \
    \ end\n  end\n  for i = 1, #lst2 do\n    if is_even(lst2[i]) then\n      lst2_even_count\
    \ = lst2_even_count + 1\n    end\n  end\n  if lst1_even_count == #lst1 or lst2_even_count\
    \ == #lst2 then\n    return 'YES'\n  end\n  if lst1_even_count < lst2_even_count\
    \ then\n    bubble_sort(lst1)\n    bubble_sort(lst2)\n    if lst1[1] > lst2[1]\
    \ then\n      swap(lst1, 1, 2)\n    end\n    return 'YES'\n  else\n    if lst1_even_count\
    \ > lst2_even_count then\n      bubble_sort(lst1)\n      bubble_sort(lst2)\n \
    \     if lst1[1] > lst2[1] then\n        swap(lst1, 1, 2)\n      end\n      return\
    \ 'YES'\n    else\n      return 'NO'\n    end\n  end\nend", "  local total_len\
    \ = #lst1 + #lst2\n  for i = 1, total_len do\n    if lst1[i] and lst1[i] % 2 ==\
    \ 1 then\n      local j = 1\n      while j <= total_len do\n        if lst2[j]\
    \ and lst2[j] % 2 == 0 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n \
    \         break\n        end\n        j = j + 1\n      end\n      if lst1[i] %\
    \ 2 == 1 then\n        return 'NO'\n      end\n    end\n  end\n  return 'YES'\n\
    end", "  local even_nums = {}\n  local odd_nums = {}\n  for _,v in ipairs(lst1)\
    \ do\n    if v % 2 == 0 then\n      table.insert(even_nums, v)\n    else\n   \
    \   table.insert(odd_nums, v)\n    end\n  end\n  for _,v in ipairs(lst2) do\n\
    \    if v % 2 == 0 then\n      table.insert(even_nums, v)\n    else\n      table.insert(odd_nums,\
    \ v)\n    end\n  end\n  return (#even_nums >= #lst1) and \"YES\" or \"NO\"\nend",
  "    local res = \"NO\"\n    for k, v in ipairs(lst1) do\n        if v % 2 == 1\
    \ then\n            for k1, v1 in ipairs(lst2) do\n                if v1 % 2 ==\
    \ 0 then\n                    lst1[k] = v1\n                    lst2[k1] = v\n\
    \                    res = \"YES\"\n                    break\n              \
    \  end\n            end\n        end\n    end\n    return res\nend", "    -- Implement\
    \ this function.\nend", "  local ok = true\n  for i = 1, #lst1 do\n    if lst1[i]\
    \ % 2 == 1 then\n      ok = false\n      for j = 1, #lst2 do\n        if lst2[j]\
    \ % 2 == 1 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          ok =\
    \ true\n          break\n        end\n      end\n    end\n    if not ok then break\
    \ end\n  end\n  return ok and \"YES\" or \"NO\"\nend", "    for i = 1, #lst1 do\n\
    \        if lst1[i] % 2 == 1 then\n            for j = 1, #lst2 do\n         \
    \       if lst2[j] % 2 == 1 then\n                    lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n                    return exchange(lst1, lst2)\n                end\n\
    \            end\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "    for _,i in ipairs(lst1) do\n        if i % 2 == 1 then\n          \
    \  for _,j in ipairs(lst2) do\n                if j % 2 == 0 then\n          \
    \          return \"YES\"\n                end\n            end\n            return\
    \ \"NO\"\n        end\n    end\n    return \"YES\"\nend", "  -- TODO: your code\
    \ here\nend", "  local swap_cnt, n = 0, 0\n  for _, v in ipairs(lst1) do\n   \
    \ if v % 2 == 1 then\n      swap_cnt = swap_cnt + 1\n    end\n  end\n  for _,\
    \ v in ipairs(lst2) do\n    if v % 2 == 0 then\n      n = n + 1\n    end\n  end\n\
    \  return swap_cnt <= n and \"YES\" or \"NO\"\nend", "  -- Insert your code here.\n\
    end", "    for _, v in ipairs(lst1) do\n        if v % 2 == 1 then\n         \
    \   for _, w in ipairs(lst2) do\n                if w % 2 == 0 then\n        \
    \            return 'YES'\n                end\n            end\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "  return (lst1[1] % 2 ==\
    \ 0) and \"YES\" or \"NO\"\nend", "    -- REPLACE THE COMMENT BELOW WITH YOUR\
    \ CODE\n    return \"NO\"\nend", "\tfor i, v in ipairs(lst1) do\n\t\tif v % 2\
    \ == 1 then\n\t\t\tfor j, w in ipairs(lst2) do\n\t\t\t\tif w % 2 == 0 then\n\t\
    \t\t\t\tlst1[i], lst2[j] = lst2[j], lst1[i]\n\t\t\t\t\treturn exchange(lst1, lst2)\n\
    \t\t\t\tend\n\t\t\tend\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\treturn 'YES'\nend",
  "    -- YOUR CODE HERE\n    local lst = {}\n    for _, i in ipairs(lst1) do\n  \
    \      table.insert(lst, i)\n    end\n    for _, i in ipairs(lst2) do\n      \
    \  table.insert(lst, i)\n    end\n    for _, v in ipairs(lst) do\n        if v\
    \ % 2 == 1 then\n            return \"NO\"\n        end\n    end\n    return \"\
    YES\"\nend", end, "    local zipped = {}\n    for i = 1, #lst1 do\n        zipped[i]\
    \ = {lst1[i], lst2[i]}\n    end\n    for _, pair in ipairs(zipped) do\n      \
    \  if not is_even(pair[1]) and is_even(pair[2]) then\n            pair[1], pair[2]\
    \ = pair[2], pair[1]\n        end\n    end\n    for _, pair in ipairs(zipped)\
    \ do\n        if not is_even(pair[1]) then\n            return 'NO'\n        end\n\
    \    end\n    return 'YES'\nend", "  local odds = 0\n  for i = 1, #lst1 do\n \
    \   if lst1[i] % 2 == 1 then\n      odds = odds + 1\n    end\n  end\n  for i =\
    \ 1, #lst2 do\n    if lst2[i] % 2 == 1 then\n      odds = odds - 1\n    end\n\
    \  end\n  return odds == 0 and \"YES\" or \"NO\"\nend", "    local result = 'NO'\n\
    \    local len = #lst1\n    local lst = {}\n    for i = 1, len do\n        if\
    \ lst1[i] % 2 == 1 then\n            lst[i] = 0\n        else\n            lst[i]\
    \ = 1\n        end\n    end\n    for i = 1, len do\n        if lst2[i] % 2 ==\
    \ 1 then\n            lst[i] = lst[i] + 1\n        end\n    end\n    for i = 1,\
    \ len do\n        if lst[i] == 2 then\n            result = 'YES'\n          \
    \  break\n        end\n    end\n    return result\nend", "    for _, x in ipairs(lst1)\
    \ do\n        if x % 2 == 1 then\n            for _, y in ipairs(lst2) do\n  \
    \              if y % 2 == 0 then\n                    return 'YES'\n        \
    \        end\n            end\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "\tlocal countOdd1 = 0\n\tlocal countOdd2 = 0\n\tfor\
    \ i = 1, #lst1 do\n\t\tif lst1[i] % 2 == 1 then\n\t\t\tcountOdd1 = countOdd1 +\
    \ 1\n\t\tend\n\tend\n\tfor i = 1, #lst2 do\n\t\tif lst2[i] % 2 == 1 then\n\t\t\
    \tcountOdd2 = countOdd2 + 1\n\t\tend\n\tend\n\tif countOdd1 % 2 == countOdd2 %\
    \ 2 then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "  -- TODO:\
    \ Your code here\nend", "  if lst1[1] % 2 == 0 then\n    return 'YES'\n  end\n\
    \  for i = 1, #lst2 do\n    if lst2[i] % 2 == 0 then\n      for j = 1, #lst1 do\n\
    \        if lst1[j] % 2 ~= 0 then\n          lst1[j], lst2[i] = lst2[i], lst1[j]\n\
    \          return exchange(lst1, lst2)\n        end\n      end\n    end\n  end\n\
    \  return 'NO'\nend", "    local result = 'NO'\n    local i = 1\n    while i <=\
    \ #lst1 do\n        if lst1[i] % 2 == 1 then\n            local j = 1\n      \
    \      while j <= #lst2 do\n                if lst2[j] % 2 == 0 then\n       \
    \             lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n\
    \                end\n                j = j + 1\n            end\n           \
    \ if j > #lst2 then\n                break\n            end\n        end\n   \
    \     i = i + 1\n    end\n    for _, v in ipairs(lst1) do\n        if v % 2 ==\
    \ 1 then\n            return result\n        end\n    end\n    return 'YES'\n\
    end", "  if lst1 == {} or lst2 == {} then\n    return 'NO'\n  end\n  if even(lst1[1])\
    \ then\n    return exchange(tail(lst1), lst2)\n  elseif even(lst2[1]) then\n \
    \   lst1[1] = lst2[1]\n    return exchange(tail(lst1), tail(lst2))\n  else\n \
    \   return exchange(tail(lst1), lst2) or exchange(lst1, tail(lst2))\n  end\nend",
  "    -- YOUR CODE HERE\n    return 'NO'\nend", "  -- TODO: Your code here\nend",
  "  -- your code here\nend", "  if allEven(lst1) then\n    return 'YES'\n  end\n\
    \  for i, n in ipairs(lst1) do\n    if n % 2 == 1 then\n      local allEvens =\
    \ {}\n      for j, m in ipairs(lst2) do\n        if m % 2 == 0 then\n        \
    \  allEvens[#allEvens + 1] = m\n        end\n      end\n      for j, m in ipairs(allEvens)\
    \ do\n        lst1[i] = m\n        lst2[j] = n\n        if exchange(lst1, lst2)\
    \ == 'YES' then\n          return 'YES'\n        end\n        lst1[i] = n\n  \
    \      lst2[j] = m\n      end\n      return 'NO'\n    end\n  end\nend", "  local\
    \ evens = {}\n  local odds = {}\n  for i, v in ipairs(lst1) do\n    if v % 2 ==\
    \ 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n\
    \    end\n  end\n  for i, v in ipairs(lst2) do\n    if v % 2 == 0 then\n     \
    \ table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n  end\n\
    \  local evens_len = #evens\n  local odds_len = #odds\n  if evens_len >= odds_len\
    \ then\n    return 'YES'\n  else\n    return 'NO'\n  end\nend", "    -- write\
    \ your code here\nend", "    for k, v in ipairs(lst1) do\n        if v % 2 ==\
    \ 1 then\n            for k2, v2 in ipairs(lst2) do\n                if v2 % 2\
    \ == 0 then\n                    lst1[k], lst2[k2] = lst2[k2], lst1[k]\n     \
    \               goto continue\n                end\n            end\n        \
    \    return \"NO\"\n            ::continue::\n        end\n    end\n    return\
    \ \"YES\"\nend", "\t-- TODO: implementation\nend", "    local lst = {2, 3, 7,\
    \ 8, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31, 34, 35, 38, 39, 42, 43, 46,\
    \ 47, 50, 51, 54, 55, 58, 59, 62, 63, 66, 67, 70, 71, 74, 75, 78, 79, 82, 83,\
    \ 86, 87, 90, 91, 94, 95, 98, 99, 102, 103, 106, 107, 110, 111, 114, 115, 118,\
    \ 119, 122, 123, 126, 127, 130, 131, 134, 135, 138, 139, 142, 143, 146, 147, 150,\
    \ 151, 154, 155, 158, 159, 162, 163, 166, 167, 170, 171, 174, 175, 178, 179, 182,\
    \ 183, 186, 187, 190, 191, 194, 195, 198, 199, 202, 203, 206, 207, 210, 211, 214,\
    \ 215, 218, 219, 222, 223, 226, 227, 230, 231, 234, 235, 238, 239, 242, 243, 246,\
    \ 247, 250, 251, 254, 255}\n    local notEven = {}\n    for i, num in ipairs(lst1)\
    \ do\n        if not table.contains(lst, num) then\n            table.insert(notEven,\
    \ i)\n        end\n    end\n    for i, num in ipairs(lst2) do\n        if table.contains(lst,\
    \ num) then\n            for _, item in ipairs(notEven) do\n                if\
    \ not table.contains(lst1, num) then\n                    lst1[item] = num\n \
    \                   return \"YES\"\n                end\n            end\n   \
    \     end\n    end\n    return \"NO\"\nend", "  for _, x in ipairs(lst1) do\n\
    \    if x % 2 == 1 then\n      for _, y in ipairs(lst2) do\n        if y % 2 ==\
    \ 0 then\n          return 'YES'\n        end\n      end\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "    if lst1 == {} or lst2 == {} then\n\
    \        return \"YES\"\n    end\n    local lst3 = lst1\n    for k, v in ipairs(lst3)\
    \ do\n        if v % 2 ~= 0 then\n            for k1, v1 in ipairs(lst2) do\n\
    \                if v1 % 2 == 0 then\n                    lst3[k] = v1\n     \
    \               lst2[k1] = v\n                    return exchange(lst3, lst2)\n\
    \                end\n            end\n            return \"NO\"\n        end\n\
    \    end\n    return \"YES\"\nend", "  if not lst1 or not lst2 then\n    return\
    \ 'NO'\n  end\n  local n = 0\n  for i, v in ipairs(lst1) do\n    if v % 2 == 1\
    \ then\n      n = n + 1\n    end\n  end\n  for i, v in ipairs(lst2) do\n    if\
    \ v % 2 == 0 then\n      n = n - 1\n    end\n  end\n  if n > 0 then\n    return\
    \ 'NO'\n  else\n    return 'YES'\n  end\nend", "  for i = 1, #lst1 do\n    local\
    \ v = lst1[i]\n    if v % 2 == 1 then\n      local found = false\n      for j\
    \ = 1, #lst2 do\n        if lst2[j] % 2 == 1 then\n          lst1[i], lst2[j]\
    \ = lst2[j], v\n          found = true\n          break\n        end\n      end\n\
    \      if not found then\n        return 'NO'\n      end\n    end\n  end\n  return\
    \ 'YES'\nend", "    --your code here\n    if #lst1 ~= #lst2 then\n        return\
    \ 'NO'\n    end\n    local function allEven(lst)\n        for i = 1, #lst do\n\
    \            if lst[i] % 2 ~= 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    if allEven(lst1) then\n\
    \        return 'YES'\n    end\n    local exchangeTable = {}\n    for i = 1, #lst1\
    \ do\n        exchangeTable[i] = lst1[i] % 2\n    end\n    local function exchangeTwoOdd(lst)\n\
    \        local i = 1\n        while i <= #lst do\n            if lst[i] == 1 then\n\
    \                local j = i + 1\n                while j <= #lst do\n       \
    \             if lst[j] == 1 then\n                        lst[i] = 0\n      \
    \                  lst[j] = 0\n                        return true\n         \
    \           end\n                    j = j + 1\n                end\n        \
    \    end\n            i = i + 1\n        end\n        return false\n    end\n\
    \    while exchangeTwoOdd(exchangeTable) do\n        if allEven(lst1) then\n \
    \           return 'YES'\n        end\n    end\n    return 'NO'\nend", "  return\
    \ 'NO'\nend", "    if (not lst1) or (not lst2) then\n        return \"NO\"\n \
    \   end\n    for _, v in ipairs(lst1) do\n        if v % 2 == 1 then\n       \
    \     for i, v2 in ipairs(lst2) do\n                if v2 % 2 == 0 then\n    \
    \                lst1[i], lst2[i] = lst2[i], lst1[i]\n                    break\n\
    \                end\n            end\n        end\n    end\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 1 then\n            return \"NO\"\n        end\n   \
    \ end\n    return \"YES\"\nend", "  -- Write your code here\nend", "    local\
    \ even_in_lst1 = 0\n    local odd_in_lst1 = 0\n    local even_in_lst2 = 0\n  \
    \  local odd_in_lst2 = 0\n    for _,n in ipairs(lst1) do\n        if n % 2 ==\
    \ 0 then\n            even_in_lst1 = even_in_lst1 + 1\n        else\n        \
    \    odd_in_lst1 = odd_in_lst1 + 1\n        end\n    end\n    for _,n in ipairs(lst2)\
    \ do\n        if n % 2 == 0 then\n            even_in_lst2 = even_in_lst2 + 1\n\
    \        else\n            odd_in_lst2 = odd_in_lst2 + 1\n        end\n    end\n\
    \    if even_in_lst1 == #lst1 then\n        return \"YES\"\n    elseif even_in_lst1\
    \ < #lst1 and odd_in_lst1 > 0 then\n        return odd_in_lst2 >= #lst1 - even_in_lst1\
    \ and \"YES\" or \"NO\"\n    else\n        return \"NO\"\n    end\nend", "  for\
    \ i = 1, #lst1 do\n    if math.fmod(lst1[i], 2) == 1 then\n      for j = 1, #lst2\
    \ do\n        if math.fmod(lst2[j], 2) == 0 then\n          lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n          break\n        end\n      end\n    end\n  end\n\
    \  for i = 1, #lst1 do\n    if math.fmod(lst1[i], 2) == 1 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "    if (#lst1 ~= #lst2) then\n       \
    \ return 'NO'\n    end\n    for i, v in ipairs(lst1) do\n        if v % 2 ~= 0\
    \ then\n            for j, v2 in ipairs(lst2) do\n                if v2 % 2 ==\
    \ 0 then\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n          \
    \          break\n                end\n            end\n        end\n    end\n\
    \    for i, v in ipairs(lst1) do\n        if v % 2 ~= 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "    for k, v in ipairs(lst1)\
    \ do\n        if isOdd(v) then\n            for k2, v2 in ipairs(lst2) do\n  \
    \              if isEven(v2) then\n                    lst1[k] = v2\n        \
    \            lst2[k2] = v\n                    return \"YES\"\n              \
    \  end\n            end\n            return \"NO\"\n        end\n    end\n   \
    \ return \"YES\"\nend", "    for k, v in ipairs(lst1) do\n        if v % 2 ==\
    \ 1 then\n            for k2, v2 in ipairs(lst2) do\n                if v2 % 2\
    \ == 0 then\n                    lst1[k], lst2[k2] = lst2[k2], lst1[k]\n     \
    \               return \"YES\"\n                end\n            end\n       \
    \     return \"NO\"\n        end\n    end\n    return \"YES\"\nend", "    if #lst1\
    \ <= 1 then\n        return \"YES\"\n    end\n    local oddlst1 = {}\n    local\
    \ oddlst2 = {}\n    for i, v in ipairs(lst1) do\n        if v % 2 == 1 then\n\
    \            table.insert(oddlst1, v)\n        end\n    end\n    for i, v in ipairs(lst2)\
    \ do\n        if v % 2 == 1 then\n            table.insert(oddlst2, v)\n     \
    \   end\n    end\n    local oddcount = #oddlst1\n    if oddcount == 0 then\n \
    \       return \"YES\"\n    end\n    if oddcount == #oddlst2 then\n        return\
    \ \"NO\"\n    end\n    local count = 0\n    for i, v in ipairs(oddlst2) do\n \
    \       for j, w in ipairs(oddlst1) do\n            if v == w then\n         \
    \       oddlst1[j] = nil\n                count = count + 1\n                break\n\
    \            end\n        end\n    end\n    if count == oddcount then\n      \
    \  return \"YES\"\n    end\n    return \"NO\"\nend", "    for i, v in ipairs(lst1)\
    \ do\n        if v % 2 == 1 then\n            for j, w in ipairs(lst2) do\n  \
    \              if w % 2 == 0 then\n                    return 'YES'\n        \
    \        end\n            end\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "    for _, x in ipairs(lst1) do\n        if x % 2 ==\
    \ 1 then\n            for _, y in ipairs(lst2) do\n                if y % 2 ==\
    \ 0 then\n                    return 'YES'\n                end\n            end\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "  --\
    \ Write your code here\nend", "    local has_even = false\n    for _, e in ipairs(lst1)\
    \ do\n        if e % 2 == 0 then\n            has_even = true\n            break\n\
    \        end\n    end\n    if not has_even then\n        return 'NO'\n    end\n\
    \    for _, e in ipairs(lst2) do\n        if e % 2 == 0 then\n            return\
    \ 'YES'\n        end\n    end\n    return 'NO'\nend", "    local elem = lst1[1]\n\
    \    if elem % 2 == 0 then\n        return 'YES'\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            lst1[1] = v\n            lst2[1]\
    \ = elem\n            return 'YES'\n        end\n    end\n    return 'NO'\nend",
  "    local sum = 0\n    for i = 1, #lst1 do\n        if (lst1[i] % 2 == 1) then\n\
    \            sum = sum + 1\n        end\n    end\n    for i = 1, #lst2 do\n  \
    \      if (lst2[i] % 2 == 1) then\n            sum = sum - 1\n        end\n  \
    \  end\n    if (sum == 0) then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "\t-- Assume the first list is sorted.\n\t-- Let's check\
    \ whether we need to replace the first number in the first list.\n\tlocal first1\
    \ = lst1[1]\n\tif first1 % 2 == 1 then\n\t\t-- We need to replace it with something\
    \ even.\n\t\tlocal c = table.concat\n\t\tfor _, e in ipairs(lst2) do\n\t\t\tif\
    \ e % 2 == 0 then\n\t\t\t\tlst1[1] = e\n\t\t\t\tlst2[table.find(lst2, e)] = first1\n\
    \t\t\t\treturn exchange(lst1, lst2)\n\t\t\tend\n\t\tend\n\t\treturn 'NO'\n\tend\n\
    \tif #lst1 == 1 then\n\t\treturn 'YES'\n\tend\n\tlst1 = table.slice(lst1, 2)\n\
    \treturn exchange(lst1, lst2)\nend", "  -- TODO: implement the function\nend",
  "  local odd1 = 0\n  local odd2 = 0\n  for _, v in ipairs(lst1) do\n    if v % 2\
    \ == 1 then\n      odd1 = odd1 + 1\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 1 then\n      odd2 = odd2 + 1\n    end\n  end\n  return\
    \ odd1 % 2 == odd2 % 2 and 'YES' or 'NO'\nend", "    local isEven = function(a)\
    \ return a % 2 == 0 end\n    local isOdd = function(a) return a % 2 ~= 0 end\n\
    \    return table.reduce(lst1, function(acc, a)\n        if isEven(a) then\n \
    \           return acc + 1\n        else\n            return acc\n        end\n\
    \    end, 0) < table.reduce(lst2, function(acc, a)\n        if isOdd(a) then\n\
    \            return acc + 1\n        else\n            return acc\n        end\n\
    \    end, 0) and \"YES\" or \"NO\"\nend", "    local evens = 0\n    local odds\
    \ = 0\n    for _, n in ipairs(lst1) do\n        if n % 2 == 0 then\n         \
    \   evens = evens + 1\n        else\n            odds = odds + 1\n        end\n\
    \    end\n    for _, n in ipairs(lst2) do\n        if n % 2 == 0 then\n      \
    \      evens = evens + 1\n        else\n            odds = odds + 1\n        end\n\
    \    end\n    return evens > odds and 'YES' or 'NO'\nend\nreturn exchange", " \
    \ -- TODO: Implement me!\nend", "  -- Implement here.\nend", "  -- [1, 2, 3, 4]\
    \ [1, 5, 3, 4]\n  -- [2, 3, 4] [5, 3, 4]\n  -- [2, 4] [5, 3]\n  -- [2] [5]\n \
    \ -- [5] [2]\n  -- [2, 3, 4] [5, 3, 4]\n  -- [2, 4] [5, 3]\n  -- [2] [5]\n  --\
    \ [5] [2]\n  -- [2, 3, 4] [5, 3, 4]\n  -- [2, 4] [5, 3]\n  -- [2] [5]\n  -- [5]\
    \ [2]\n  -- [2, 3, 4] [5, 3, 4]\n  -- [2, 4] [5, 3]\n  -- [2] [5]\n  -- [5] [2]\n\
    \  -- [2, 3, 4] [5, 3, 4]\n  -- [2, 4] [5, 3]\n  -- [2] [5]\n  -- [5] [2]\n  --\
    \ [2, 3, 4] [5, 3, 4]\n  -- [2, 4] [5, 3]\n  -- [2] [5]\n  -- [5] [2]\n  -- [2,\
    \ 3, 4] [5, 3, 4]\n  -- [2, 4] [5, 3]\n  -- [2] [5]\n  -- [5] [2]\n  -- [2, 3,\
    \ 4] [5, 3, 4]\n  -- [2, 4] [5, 3]\n  -- [2] [5]\n  -- [5] [2]\n  -- [2, 3, 4]\
    \ [5, 3, 4]\n  -- [2, 4] [5, 3]\n  -- [2] [5]\n  -- [5] [2]\n  -- [2, 3, 4] [5,\
    \ 3, 4]\n  -- [2, 4] [5, 3]\n  -- [2] [5]\n  -- [5] [2]\n  -- [2, 3, 4] [", " \
    \ local function list_from_set(set)\n    return table.concat(set, ',')\n  end",
  "  local function is_even(n)\n    return n % 2 == 0\n  end\n  local function exchange_aux(lst1,\
    \ lst2, even_cnt, odd_cnt)\n    if #lst1 == 0 then\n      return even_cnt == #lst1\n\
    \    elseif is_even(lst1[1]) then\n      return exchange_aux(drop(lst1), lst2,\
    \ even_cnt + 1, odd_cnt)\n    elseif #lst2 == 0 then\n      return false\n   \
    \ elseif is_even(lst2[1]) then\n      return exchange_aux(lst1, drop(lst2), even_cnt\
    \ + 1, odd_cnt)\n    else\n      return exchange_aux(drop(lst1), drop(lst2), even_cnt,\
    \ odd_cnt + 1)\n    end\n  end\n  return (exchange_aux(lst1, lst2, 0, 0) and \"\
    YES\") or \"NO\"\nend", "  local evens = {}\n  local odds = {}\n  local count\
    \ = 1\n  for i = 1, #lst1 do\n    if lst1[i] % 2 == 0 then\n      evens[count]\
    \ = lst1[i]\n      count = count + 1\n    else\n      odds[#odds + 1] = lst1[i]\n\
    \    end\n  end\n  if count - 1 == #evens then\n    return 'YES'\n  end\n  for\
    \ i = 1, #lst2 do\n    if lst2[i] % 2 == 0 then\n      evens[count] = lst2[i]\n\
    \      count = count + 1\n    else\n      odds[#odds + 1] = lst2[i]\n    end\n\
    \  end\n  if count - 1 == #evens then\n    return 'YES'\n  end\n  for i = 1, #evens\
    \ do\n    for j = 1, #odds do\n      if evens[i] % 2 == 1 and odds[j] % 2 == 0\
    \ then\n        evens[i], odds[j] = odds[j], evens[i]\n        count = count -\
    \ 1\n      end\n    end\n  end\n  if count - 1 == #evens then\n    return 'YES'\n\
    \  end\n  return 'NO'\nend", "  -- TODO: implement this function\nend", "    for\
    \ _, v in ipairs(lst1) do\n        if v % 2 == 1 then\n            return 'NO'\n\
    \        end\n    end\n    return 'YES'\nend", "\t\nend", "  local cnt1, cnt2\
    \ = #lst1, #lst2\n  local function countEvenNumbers(lst)\n    local cnt = 0\n\
    \    for i = 1, #lst do\n      if lst[i] % 2 == 0 then\n        cnt = cnt + 1\n\
    \      end\n    end\n    return cnt\n  end\n  local cnt = countEvenNumbers(lst1)\n\
    \  if (cnt == 0 and cnt2 % 2 == 0) or (cnt == cnt1) then\n    return 'YES'\n \
    \ end\n  return 'NO'\nend", end, "  for i = 1, #lst1 do\n    if lst1[i] % 2 ==\
    \ 1 then\n      for j = 1, #lst2 do\n        if lst2[j] % 2 == 1 then\n      \
    \    lst1[i], lst2[j] = lst2[j], lst1[i]\n          return 'YES'\n        end\n\
    \      end\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "\tlocal\
    \ count = 0\n\tfor i, v in ipairs(lst1) do\n\t\tif v % 2 == 1 then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\tfor i, v in ipairs(lst2) do\n\t\tif v % 2 ==\
    \ 0 then\n\t\t\tcount = count - 1\n\t\tend\n\tend\n\tif count == 0 then\n\t\t\
    return \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\nend", "  if lst1[1] % 2 == 0\
    \ then\n    return 'YES'\n  end\n  for i, v in ipairs(lst2) do\n    if v % 2 ==\
    \ 0 then\n      lst2[i] = lst1[1]\n      lst1[1] = v\n      return 'YES'\n   \
    \ end\n  end\n  return 'NO'\nend", "  -- TODO: write your code here\n  -- return\
    \ \"YES\" or \"NO\"\nend", end, "  for _, v in ipairs(lst1) do\n    if v % 2 ==\
    \ 1 then\n      for _, w in ipairs(lst2) do\n        if w % 2 == 0 then\n    \
    \      return 'YES'\n        end\n      end\n      return 'NO'\n    end\n  end\n\
    \  return 'YES'\nend", "  -- TODO: your code here\nend", "    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 1 then\n            for _, w in ipairs(lst2) do\n  \
    \              if w % 2 == 0 then\n                    return 'YES'\n        \
    \        end\n            end\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "  for _, val in ipairs(lst1) do\n    if not isEven(val)\
    \ then\n      for index, val2 in ipairs(lst2) do\n        if isEven(val2) then\n\
    \          lst1[index] = val2\n          lst2[index] = val\n          break\n\
    \        end\n      end\n    end\n  end\n  for _, val in ipairs(lst1) do\n   \
    \ if not isEven(val) then\n      return 'NO'\n    end\n  end\n  return 'YES'\n\
    end", "  -- TODO: implement the function.\nend", "  for _, v in ipairs(lst1) do\n\
    \    if v % 2 == 1 then\n      for _, n in ipairs(lst2) do\n        if n % 2 ==\
    \ 0 then\n          return 'YES'\n        end\n      end\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "    local count = {}\n    local sum =\
    \ 0\n    for _, v in ipairs(lst1) do\n        sum = sum + v\n        count[v]\
    \ = (count[v] or 0) + 1\n    end\n    if sum % 2 == 1 then\n        return 'NO'\n\
    \    end\n    sum = 0\n    for _, v in ipairs(lst2) do\n        sum = sum + v\n\
    \        count[v] = (count[v] or 0) + 1\n    end\n    if sum % 2 == 1 then\n \
    \       return 'NO'\n    end\n    for k, v in pairs(count) do\n        if v %\
    \ 2 == 1 then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "    -- TODO: your code here\nend", "  if not lst1 or not lst2 then\n  \
    \  return 'NO'\n  end\n  for k, v in ipairs(lst1) do\n    if v % 2 ~= 0 then\n\
    \      for kk, vv in ipairs(lst2) do\n        if vv % 2 == 0 then\n          lst1[k],\
    \ lst2[kk] = lst2[kk], lst1[k]\n          break\n        end\n      end\n    end\n\
    \  end\n  for k, v in ipairs(lst1) do\n    if v % 2 ~= 0 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "  -- Your solution goes here.\nend", " \
    \   local exchangeTable = {}\n    local allOdd = true\n    local oddCount = 0\n\
    \    for _, val in ipairs(lst1) do\n        if val % 2 == 0 then\n           \
    \ allOdd = false\n        else\n            oddCount = oddCount + 1\n        end\n\
    \    end\n    if allOdd then\n        for _, val in ipairs(lst2) do\n        \
    \    if val % 2 == 0 then\n                return 'YES'\n            end\n   \
    \     end\n        return 'NO'\n    end\n    for _, val in ipairs(lst2) do\n \
    \       if val % 2 == 0 then\n            exchangeTable[#exchangeTable + 1] =\
    \ val\n        end\n    end\n    if #exchangeTable >= oddCount then\n        return\
    \ 'YES'\n    end\n    return 'NO'\nend", "    local odd1 = {}\n    local odd2\
    \ = {}\n    for i, n in ipairs(lst1) do\n        if n % 2 == 1 then\n        \
    \    table.insert(odd1, n)\n        end\n    end\n    for i, n in ipairs(lst2)\
    \ do\n        if n % 2 == 1 then\n            table.insert(odd2, n)\n        end\n\
    \    end\n    if #odd1 == #odd2 then\n        return 'YES'\n    else\n       \
    \ return 'NO'\n    end\nend", "    local lst1Count = 0\n    local lst2Count =\
    \ 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n           \
    \ lst1Count = lst1Count + 1\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            lst2Count = lst2Count + 1\n    \
    \    end\n    end\n    return lst1Count + lst2Count >= (#lst1 + #lst2) and \"\
    YES\" or \"NO\"\nend", "    local has_odd = false\n    for i = 1, #lst1 do\n \
    \       if lst1[i] % 2 == 1 then\n            has_odd = true\n            break\n\
    \        end\n    end\n    if not has_odd then\n        return 'YES'\n    end\n\
    \    for i = 1, #lst2 do\n        if lst2[i] % 2 == 1 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "    local function exchange_helper(lst1,\
    \ lst2, index, change)\n        -- If the index is bigger than the table's length,\n\
    \        -- we already went through the whole table\n        if index > #lst1\
    \ then\n            -- If the user did not exchange any elements from lst1, the\
    \ answer is \"NO\"\n            return change and \"YES\" or \"NO\"\n        end\n\
    \        -- If the element at index is even, call exchange_helper for the next\
    \ index\n        if lst1[index] % 2 == 0 then\n            return exchange_helper(lst1,\
    \ lst2, index + 1, change)\n        end\n        -- If the element at index is\
    \ odd, try to swap it with every element in lst2\n        -- If the swap succeeds,\
    \ call exchange_helper with the swapped table, the next index, and true\n    \
    \    -- If the swap fails, call exchange_helper with the same table, the next\
    \ index, and false\n        for i = 1, #lst2 do\n            if lst2[i] % 2 ==\
    \ 0 then\n                local new_lst1 = table.copy(lst1)\n                local\
    \ new_lst2 = table.copy(lst2)\n                new_lst1[index], new_lst2[i] =\
    \ new_lst2[i], new_lst1[index]\n                local res = exchange_helper(new_lst1,\
    \ new_lst2, index + 1, true)\n                if res == \"YES\" then\n       \
    \             return res\n                end\n            end\n        end\n\
    \        return exchange_helper(lst1, lst2, index + 1, false)\n    end\n    return\
    \ exchange_helper(lst1, lst2, 1, false)\nend", "    if lst1[1] % 2 == 0 then\n\
    \        return \"YES\"\n    end\n    for i = 1, #lst2 do\n        if lst2[i]\
    \ % 2 == 0 then\n            lst2[i], lst1[1] = lst1[1], lst2[i]\n           \
    \ return \"YES\"\n        end\n    end\n    return \"NO\"\nend", "    local even\
    \ = 0\n    local odd = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    if even % 2 == 0 then\n        return 'YES'\n    else\n\
    \        return 'NO'\n    end\nend", "    -- your code here\nend", "    -- FIXME:\
    \ Implementation missing...\nend", "  -- YOUR CODE HERE\n  -- isThereOdd\n  --\
    \ evenCount\n  -- removeFromList\n  -- addToList\n  -- exchangify\n  -- exchange_help\n\
    \  -- return\n  local function isThereOdd(lst1)\n    for _, v in ipairs(lst1)\
    \ do\n      if v % 2 == 1 then\n        return true\n      end\n    end\n    return\
    \ false\n  end", "  -- your code here\nend", "    -- (1)\n    -- lst1 and lst2\
    \ are two tables of numbers.\n    -- They are presumed to have the same length.\n\
    \    -- Return \"YES\" if it is possible to perform an exchange of elements\n\
    \    -- between lst1 and lst2 to make all the elements of lst1 to be even.\n \
    \   -- Otherwise, return \"NO\".\n    -- For example:\n    -- >>> exchange({1,\
    \ 2, 3, 4}, {1, 2, 3, 4})\n    -- 'YES'\n    -- >>> exchange({1, 2, 3, 4}, {1,\
    \ 5, 3, 4})\n    -- 'NO'\n    local function fn(i, lst1, lst2)\n        -- (2)\n\
    \        -- i is the index of lst1\n        -- Return a boolean:\n        -- \
    \ true if the numbers in lst1 and lst2 can be exchanged to make\n        --  all\
    \ the elements of lst1 to be even at or after index i.\n        --  false otherwise.\n\
    \        -- For example:\n        -- >>> fn(1, {1, 2, 3, 4}, {1, 2, 3, 4})\n \
    \       -- false\n        -- >>> fn(2, {1, 2, 3, 4}, {1, 2, 3, 4})\n        --\
    \ true\n        -- >>> fn(1, {1, 2, 3, 4}, {1, 5, 3, 4})\n        -- false\n \
    \       -- >>> fn(2, {1, 2, 3, 4}, {1, 5, 3, 4})\n        -- true\n        --\
    \ >>> fn(3, {1, 2, 3, 4}, {1, 5, 3, 4})\n        -- false\n        -- >>> fn(4,\
    \ {1, 2, 3, 4}, {1, 5, 3, 4})\n        -- false\n        -- >>> fn(1, {1, 2, 3,\
    \ 4}, {1, 3, 3, 4})\n        -- false\n        -- >>> fn(2, {1, 2, 3, 4}, {1,\
    \ 3, 3, 4})\n        -- true\n        -- >>> fn(3, {1, 2, 3, 4}, {1, 3, 3, 4})\n\
    \        -- false", "    local count = 0\n    for _, v in ipairs(lst1) do\n  \
    \      if v % 2 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 1 then\n            count\
    \ = count - 1\n        end\n    end\n    if count > 0 then\n        return 'NO'\n\
    \    else\n        return 'YES'\n    end\nend", "  -- your code here\nend", " \
    \ local evens = {}\n  local odds = {}\n  local oddsLength = 0\n  local evensLength\
    \ = 0\n  for i, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      evensLength\
    \ = evensLength + 1\n      evens[evensLength] = v\n    else\n      oddsLength\
    \ = oddsLength + 1\n      odds[oddsLength] = v\n    end\n  end\n  for i, v in\
    \ ipairs(lst2) do\n    if v % 2 == 0 then\n      evensLength = evensLength + 1\n\
    \      evens[evensLength] = v\n    else\n      oddsLength = oddsLength + 1\n \
    \     odds[oddsLength] = v\n    end\n  end\n  if evensLength == 0 then\n    return\
    \ 'NO'\n  end\n  if oddsLength == 0 then\n    return 'YES'\n  end\n  if evensLength\
    \ < oddsLength then\n    return 'NO'\n  end\n  return 'YES'\nend", "  -- Your\
    \ code here\nend", "  -- TODO: Write your code here\n  return ''\nend", "    local\
    \ lst = {}\n    for i = 1, #lst1 do\n        if (lst1[i] % 2) == 1 then\n    \
    \        table.insert(lst, lst1[i])\n        end\n    end\n    for i = 1, #lst2\
    \ do\n        if (lst2[i] % 2) == 1 then\n            table.insert(lst, lst2[i])\n\
    \        end\n    end\n    for i = 1, #lst do\n        for j = 1, #lst do\n  \
    \          if (lst[i] + lst[j]) % 2 == 0 then\n                return 'YES'\n\
    \            end\n        end\n    end\n    return 'NO'\nend", "    -- TODO: Implement.\n\
    end", "  local even = function(n) return n % 2 == 0 end\n  local odd = function(n)\
    \ return n % 2 ~= 0 end\n  local is_even = all(even, lst1)\n  local is_odd = all(odd,\
    \ lst1)\n  if is_even then return 'YES' end\n  if is_odd then\n    local has_even\
    \ = any(even, lst2)\n    if has_even then return 'YES' end\n  end\n  return 'NO'\n\
    end", "    local count1, count2 = 0, 0\n    for _, v in ipairs(lst1) do\n    \
    \    if v % 2 == 1 then\n            count1 = count1 + 1\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 1 then\n            count2\
    \ = count2 + 1\n        end\n    end\n    if count1 == count2 then\n        return\
    \ 'YES'\n    else\n        return 'NO'\n    end\nend", "  if not is_odd(lst1[1])\
    \ then\n    return 'YES'\n  end\n  if not is_odd(lst2[1]) then\n    return 'YES'\n\
    \  end\n  if not is_odd(lst1[2]) then\n    return 'YES'\n  end\n  if not is_odd(lst2[2])\
    \ then\n    return 'YES'\n  end\n  if not is_odd(lst1[3]) then\n    return 'YES'\n\
    \  end\n  if not is_odd(lst2[3]) then\n    return 'YES'\n  end\n  if not is_odd(lst1[4])\
    \ then\n    return 'YES'\n  end\n  if not is_odd(lst2[4]) then\n    return 'YES'\n\
    \  end\n  return 'NO'\nend", "    local even1 = not (lst1[1] % 2)\n    local even2\
    \ = not (lst2[1] % 2)\n    local even = even1 and even2\n    local odd = not even1\
    \ and not even2\n    local i = 1\n    while lst1[i] do\n        if not even and\
    \ not odd then\n            break\n        end\n        if even and lst1[i] %\
    \ 2 then\n            even = false\n        end\n        if odd and not (lst1[i]\
    \ % 2) then\n            odd = false\n        end\n        i = i + 1\n    end\n\
    \    if even then\n        return 'YES'\n    end\n    i = 1\n    while lst2[i]\
    \ do\n        if even1 and not (lst2[i] % 2) then\n            return 'YES'\n\
    \        end\n        if even2 and lst2[i] % 2 then\n            return 'YES'\n\
    \        end\n        i = i + 1\n    end\n    return 'NO'\nend", "    if lst1[1]\
    \ % 2 == 0 then\n        return \"YES\"\n    end\n    for i = 1, #lst2 do\n  \
    \      if lst2[i] % 2 == 0 then\n            lst2[i], lst1[1] = lst1[1], lst2[i]\n\
    \            return \"YES\"\n        end\n    end\n    return \"NO\"\nend", " \
    \ local lst1_odds = {}\n  local lst2_evens = {}\n  for i, v in ipairs(lst1) do\n\
    \    if v % 2 == 1 then\n      table.insert(lst1_odds, v)\n    end\n  end\n  for\
    \ i, v in ipairs(lst2) do\n    if v % 2 == 0 then\n      table.insert(lst2_evens,\
    \ v)\n    end\n  end\n  if #lst1_odds == #lst2_evens then\n    return 'YES'\n\
    \  else\n    return 'NO'\n  end\nend", "    for _, v in ipairs(lst1) do\n    \
    \    if (v % 2) ~= 0 then\n            for _, w in ipairs(lst2) do\n         \
    \       if (w % 2) == 0 then\n                    return 'YES'\n             \
    \   end\n            end\n            return 'NO'\n        end\n    end\n    return\
    \ 'YES'\nend", "  local lst2odd, lst1odd = 0, 0\n  for _, v in ipairs(lst1) do\n\
    \    if v % 2 == 1 then\n      lst1odd = lst1odd + 1\n    end\n  end\n  for _,\
    \ v in ipairs(lst2) do\n    if v % 2 == 1 then\n      lst2odd = lst2odd + 1\n\
    \    end\n  end\n  if lst1odd == #lst1 then\n    return 'NO'\n  elseif lst1odd\
    \ > #lst2 or lst2odd == #lst2 then\n    return 'NO'\n  else\n    return 'YES'\n\
    \  end\nend", "    return true\nend", end, "    local flag = 'NO'\n    for _,\
    \ elem in ipairs(lst1) do\n        if elem % 2 == 1 then\n            for i, val\
    \ in ipairs(lst2) do\n                if val % 2 == 0 then\n                 \
    \   lst1[i], lst2[i] = lst2[i], lst1[i]\n                    flag = 'YES'\n  \
    \                  break\n                end\n            end\n        end\n\
    \    end\n    return flag\nend", "    local function sum(t)\n        local s =\
    \ 0\n        for i = 1, #t do\n            s = s + t[i]\n        end\n       \
    \ return s\n    end\n    if sum(lst1) % 2 == 0 then\n        return 'YES'\n  \
    \  else\n        for i = 1, #lst1 do\n            for j = 1, #lst2 do\n      \
    \          if (lst1[i] + lst2[j]) % 2 == 0 then\n                    return 'YES'\n\
    \                end\n            end\n        end\n        return 'NO'\n    end\n\
    end", "    local count = 0\n    for i, v in ipairs(lst1) do\n        if v % 2\
    \ == 1 then\n            count = count + 1\n        end\n    end\n    for i, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            count = count -\
    \ 1\n        end\n    end\n    if count <= 0 then\n        return 'YES'\n    else\n\
    \        return 'NO'\n    end\nend", end, "    -- TODO: your code here\nend",
  "  if lst1 == {} then\n    return \"YES\"\n  elseif lst1[1] % 2 == 0 then\n    return\
    \ exchange(lst1, lst2)\n  else\n    for i = 1, #lst2 do\n      if lst2[i] % 2\
    \ == 0 then\n        lst1[1], lst2[i] = lst2[i], lst1[1]\n        return exchange(lst1,\
    \ lst2)\n      end\n    end\n    return \"NO\"\n  end\nend", "  return \"NO\"\n\
    end", "\t\nend", "    local contains_even, contains_odd\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            contains_even = true\n        else\n\
    \            contains_odd = true\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            contains_even = true\n        else\n\
    \            contains_odd = true\n        end\n    end\n    if contains_even and\
    \ contains_odd then\n        return 'YES'\n    else\n        return 'NO'\n   \
    \ end\nend", "\t-- Your code here\nend", "  -- TODO: Insert your code here.\n\
    end", "  for _,n in ipairs(lst1) do\n    if n % 2 == 1 then\n      for _,m in\
    \ ipairs(lst2) do\n        if m % 2 == 0 then\n          return 'YES'\n      \
    \  end\n      end\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", " \
    \ local index = 1\n  while lst1[index] and lst1[index] % 2 == 0 do\n    index\
    \ = index + 1\n  end\n  for i = 1, #lst2 do\n    if lst2[i] % 2 == 0 then\n  \
    \    lst1[index], lst2[i] = lst2[i], lst1[index]\n      index = index + 1\n  \
    \  end\n  end\n  return index > #lst1 and 'YES' or 'NO'\nend", "\tlocal toReplace\
    \ = {}\n\tlocal toInsert = {}\n\t-- Find all the indices of odd numbers\n\tfor\
    \ i, val in ipairs(lst1) do\n\t\tif val % 2 == 1 then\n\t\t\ttable.insert(toReplace,\
    \ i)\n\t\tend\n\tend\n\t-- Check if there are enough even numbers to replace odd\
    \ numbers\n\tfor i, val in ipairs(lst2) do\n\t\tif val % 2 == 0 then\n\t\t\ttable.insert(toInsert,\
    \ i)\n\t\tend\n\tend\n\tif #toReplace <= #toInsert then\n\t\treturn 'YES'\n\t\
    else\n\t\treturn 'NO'\n\tend\nend", "    local even = false\n    local odd = false\n\
    \    for _, x in ipairs(lst1) do\n        if x % 2 == 0 then\n            even\
    \ = true\n        else\n            odd = true\n        end\n    end\n    for\
    \ _, x in ipairs(lst2) do\n        if x % 2 == 0 then\n            even = true\n\
    \        else\n            odd = true\n        end\n    end\n    if even and odd\
    \ then\n        return 'YES'\n    else\n        return 'NO'\n    end\nend", end,
  "  local function only_odd(lst)\n    local odd = {}\n    for _, n in ipairs(lst)\
    \ do\n      if n % 2 == 1 then\n        table.insert(odd, n)\n      end\n    end\n\
    \    return odd\n  end", "    local res = {true, true}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 ~= 0 then\n            res[1] = false\n        end\n  \
    \  end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n        \
    \    res[2] = false\n        end\n    end\n    if res[1] or res[2] then\n    \
    \    return 'YES'\n    else\n        return 'NO'\n    end\nend", "  -- implementation\n\
    end", "    local evenCount = 0\n    for _, v in ipairs(lst1) do\n        if v\
    \ % 2 == 0 then\n            evenCount = evenCount + 1\n        end\n    end\n\
    \    if evenCount == #lst1 then\n        return 'YES'\n    end\n    for _, v in\
    \ ipairs(lst2) do\n        if v % 2 == 0 then\n            return 'YES'\n    \
    \    end\n    end\n    return 'NO'\nend", "  local ret = 'NO'\n  for k, v in ipairs(lst1)\
    \ do\n    if v % 2 == 1 then\n      for i, j in ipairs(lst2) do\n        if j\
    \ % 2 == 0 then\n          lst1[k] = j\n          lst2[i] = v\n          ret =\
    \ 'YES'\n          break\n        end\n      end\n    end\n  end\n  return ret\n\
    end", "  for _, v in ipairs(lst1) do\n    if not isEven(v) then\n      for _,\
    \ w in ipairs(lst2) do\n        if isEven(w) then\n          return 'YES'\n  \
    \      end\n      end\n      return 'NO'\n    end\n  end\n  return 'YES'\nend",
  "  -- YOUR CODE HERE\n  if ((lst1[1] % 2 == 0) or (lst2[1] % 2 == 0)) then\n   \
    \ return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    if #lst1 == 1 then\n\
    \        return 'YES'\n    end\n    local evens = 0\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            evens = evens + 1\n        end\n\
    \    end\n    if evens == #lst1 then\n        return 'YES'\n    end\n    for _,\
    \ v in ipairs(lst2) do\n        if v % 2 == 0 then\n            for i, e in ipairs(lst1)\
    \ do\n                if e % 2 == 1 then\n                    lst1[i] = v\n  \
    \                  lst2[i] = e\n                    return exchange(lst1, lst2)\n\
    \                end\n            end\n        end\n    end\n    return 'NO'\n\
    end", "  for _, v in ipairs(lst1) do\n    if v % 2 == 1 then\n      for _, w in\
    \ ipairs(lst2) do\n        if w % 2 == 0 then\n          return 'YES'\n      \
    \  end\n      end\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", " \
    \   local lst2_evens = {}\n    local lst1_odds = {}\n    local can_change = false\n\
    \    for i, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(lst2_evens,\
    \ v)\n        end\n    end\n    for i, v in ipairs(lst1) do\n        if v % 2\
    \ ~= 0 then\n            table.insert(lst1_odds, v)\n        end\n    end\n  \
    \  if #lst2_evens >= #lst1_odds then\n        can_change = true\n    end\n   \
    \ if can_change then\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend", "  local even = 0\n  local odd = 0\n  for _, val in ipairs(lst1)\
    \ do\n    if math.fmod(val, 2) == 0 then\n      even = even + 1\n    else\n  \
    \    odd = odd + 1\n    end\n  end\n  for _, val in ipairs(lst2) do\n    if math.fmod(val,\
    \ 2) == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  if even % 2 == 0 then\n    return 'YES'\n  else\n    return 'NO'\n \
    \ end\nend", "\tlocal evens = {}\n\tlocal odds = {}\n\tfor i = 1, #lst1 do\n\t\
    \tif lst1[i] % 2 == 0 then\n\t\t\tevens[#evens + 1] = lst1[i]\n\t\telse\n\t\t\t\
    odds[#odds + 1] = lst1[i]\n\t\tend\n\tend\n\tfor i = 1, #lst2 do\n\t\tif lst2[i]\
    \ % 2 == 0 then\n\t\t\tevens[#evens + 1] = lst2[i]\n\t\telse\n\t\t\todds[#odds\
    \ + 1] = lst2[i]\n\t\tend\n\tend\n\tif #evens >= #lst1 then\n\t\treturn 'YES'\n\
    \telse\n\t\treturn 'NO'\n\tend\nend", "  local evens, odds = {}, {}\n  for i =\
    \ 1, #lst1 do\n    if lst1[i] % 2 == 0 then\n      evens[#evens + 1] = lst1[i]\n\
    \    else\n      odds[#odds + 1] = lst1[i]\n    end\n  end\n  if #evens == #lst1\
    \ then\n    return 'YES'\n  end\n  for i = 1, #lst2 do\n    if lst2[i] % 2 ==\
    \ 0 then\n      evens[#evens + 1] = lst2[i]\n    else\n      odds[#odds + 1] =\
    \ lst2[i]\n    end\n  end\n  return #evens == #lst1 and 'YES' or 'NO'\nend", " \
    \   -- TODO: write your code here\n    return \"NO\"\nend", "    local even_indices,\
    \ odd_indices = {}, {}\n    for i, v in ipairs(lst1) do\n        if v % 2 == 0\
    \ then table.insert(even_indices, i) end\n    end\n    for i, v in ipairs(lst2)\
    \ do\n        if v % 2 == 1 then table.insert(odd_indices, i) end\n    end\n \
    \   if #even_indices >= #odd_indices then return 'YES' end\n    return 'NO'\n\
    end", "  -- Insert code here.\nend", "  --\nend", "    local lst1_odd = {}\n \
    \   local lst2_even = {}\n    for i = 1, #lst1 do\n        if lst1[i] % 2 == 1\
    \ then\n            lst1_odd[#lst1_odd + 1] = lst1[i]\n        end\n    end\n\
    \    for i = 1, #lst2 do\n        if lst2[i] % 2 == 0 then\n            lst2_even[#lst2_even\
    \ + 1] = lst2[i]\n        end\n    end\n    if #lst1_odd == #lst2_even then\n\
    \        return 'YES'\n    else\n        return 'NO'\n    end\nend", "    return\
    \ \"NO\"\nend", "  local table1 = {}\n  local table2 = {}\n  local lst = {}\n\
    \  local lst3 = {}\n  local lst4 = {}\n  local lst5 = {}\n  local lst6 = {}\n\
    \  local lst7 = {}\n  local lst8 = {}\n  local lst9 = {}\n  local lst10 = {}\n\
    \  local lst11 = {}\n  local lst12 = {}\n  local lst13 = {}\n  local lst14 = {}\n\
    \  local lst15 = {}\n  local lst16 = {}\n  local lst17 = {}\n  local lst18 = {}\n\
    \  local lst19 = {}\n  local lst20 = {}\n  local lst21 = {}\n  local lst22 = {}\n\
    \  local lst23 = {}\n  local lst24 = {}\n  local lst25 = {}\n  local lst26 = {}\n\
    \  local lst27 = {}\n  local lst28 = {}\n  local lst29 = {}\n  local lst30 = {}\n\
    \  local lst31 = {}\n  local lst32 = {}\n  local lst33 = {}\n  local lst34 = {}\n\
    \  local lst35 = {}\n  local lst36 = {}\n  local lst37 = {}\n  local lst38 = {}\n\
    \  local lst39 = {}\n  local lst40 = {}\n  local lst41 = {}\n  local lst42 = {}\n\
    \  local lst43 = {}\n  local lst44 = {}\n  local lst45 = {}\n  local lst46 = {}\n\
    \  local lst47 = {}\n  local lst48 = {}\n  local lst49 = {}\n  local lst50 = {}\n\
    \  local lst51 = {}\n  local lst52 = {}\n  local lst53 = {}\n  local lst54 = {}\n\
    \  local lst55 = {}\n  local lst56 = {}\n  local lst57 = {}\n  local lst58 = {}\n\
    \  local lst59 = {}\n  local lst60 = {}\n  local lst61 = {}\n  local lst62 = {}\n\
    \  local lst63 = {}\n  local", "  for k, v in ipairs(lst1) do\n    if v % 2 ==\
    \ 1 then\n      for l, w in ipairs(lst2) do\n        if w % 2 == 0 then\n    \
    \      lst1[k], lst2[l] = lst2[l], lst1[k]\n          return 'YES'\n        end\n\
    \      end\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "    for\
    \ k,v in pairs(lst1) do\n        if v % 2 == 1 then\n            for i,j in pairs(lst2)\
    \ do\n                if j % 2 == 0 then\n                    lst1[k] = j\n  \
    \                  lst2[i] = v\n                    return \"YES\"\n         \
    \       end\n            end\n        end\n    end\n    return \"NO\"\nend", " \
    \   local c = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 1 then\n\
    \            c = c + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n\
    \        if v % 2 == 1 then\n            c = c - 1\n        end\n    end\n   \
    \ return c == 0 and \"YES\" or \"NO\"\nend", "    -- your code here\nend", " \
    \   -- Write your code here\n    local all_pairs = {}\n    for _, v1 in ipairs(lst1)\
    \ do\n        for _, v2 in ipairs(lst2) do\n            if v1 % 2 == 1 and v2\
    \ % 2 == 0 then\n                all_pairs[#all_pairs + 1] = {v1, v2}\n      \
    \      end\n        end\n    end\n    if #all_pairs > 0 then\n        return 'YES'\n\
    \    else\n        return 'NO'\n    end\nend", "\tlocal t = {}\n\tlocal o = 0\n\
    \tfor _, v in ipairs(lst1) do\n\t\tt[v] = (t[v] or 0) + 1\n\t\tif v % 2 == 1 then\n\
    \t\t\to = o + 1\n\t\tend\n\tend\n\tfor _, v in ipairs(lst2) do\n\t\tt[v] = (t[v]\
    \ or 0) + 1\n\t\tif v % 2 == 1 then\n\t\t\to = o - 1\n\t\tend\n\tend\n\tif o ==\
    \ 0 then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "  -- Write\
    \ your code here ...\nend", "  local function all_even(lst)\n    for _, v in ipairs(lst)\
    \ do\n      if v % 2 == 1 then\n        return false\n      end\n    end\n   \
    \ return true\n  end", "  -- Your code here\nend", "  -- Implement your solution\
    \ here.\nend", "  --[[\n  if #lst1==0 then return \"NO\" end\n  local hasOdd =\
    \ false\n  for i, v in ipairs(lst1) do\n    if v%2~=0 then hasOdd = true break\
    \ end\n  end\n  if not hasOdd then return \"YES\" end\n  local f = 0\n  local\
    \ t = 1\n  while true do\n    while lst1[f+1]%2==0 do f = f+1 end\n    while lst2[t]%2~=0\
    \ do t = t+1 end\n    if t>#lst2 then return \"NO\" end\n    lst1[f+1], lst2[t]\
    \ = lst2[t], lst1[f+1]\n    f = f+1\n    t = t+1\n  end\n  --]]\n  local f = 1\n\
    \  local t = 1\n  while true do\n    while f<=#lst1 and lst1[f]%2==0 do f = f+1\
    \ end\n    while t<=#lst2 and lst2[t]%2~=0 do t = t+1 end\n    if f>#lst1 then\
    \ return \"YES\" end\n    if t>#lst2 then return \"NO\" end\n    lst1[f], lst2[t]\
    \ = lst2[t], lst1[f]\n    f = f+1\n    t = t+1\n  end\nend", "    return \"NO\"\
    \nend", "  -- number of odd numbers in lst1\n  local odd_count = 0\n  for _, v\
    \ in ipairs(lst1) do\n    if v % 2 == 1 then\n      odd_count = odd_count + 1\n\
    \    end\n  end\n  -- number of even numbers in lst2\n  local even_count = 0\n\
    \  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    end\n  end\n  if odd_count == even_count then\n    return 'YES'\n \
    \ else\n    return 'NO'\n  end\nend", "  return \"YES\"\nend", "  for i, v in\
    \ ipairs(lst1) do\n    if v % 2 == 1 then\n      for j, k in ipairs(lst2) do\n\
    \        if k % 2 == 0 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n \
    \         return 'YES'\n        end\n      end\n      return 'NO'\n    end\n \
    \ end\n  return 'YES'\nend", "    -- YOUR CODE HERE\n    even_count = 0\n    odd_count\
    \ = 0\n    for i = 1, #lst1 do\n        if lst1[i] % 2 == 0 then\n           \
    \ even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    for i = 1, #lst2 do\n        if lst2[i] % 2 ==\
    \ 0 then\n            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n    end\n    if even_count % 2 == 0 then\n   \
    \     return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "    local\
    \ result = true\n    for _, number in ipairs(lst1) do\n        if number % 2 ~=\
    \ 0 then\n            result = false\n            break\n        end\n    end\n\
    \    if result then\n        return 'YES'\n    end\n    for i, _ in ipairs(lst1)\
    \ do\n        for j, _ in ipairs(lst2) do\n            if lst1[i] % 2 ~= 0 and\
    \ lst2[j] % 2 == 0 then\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \                return exchange(lst1, lst2)\n            end\n        end\n \
    \   end\n    return 'NO'\nend", "    local function is_even(n)\n        return\
    \ n % 2 == 0\n    end\n    local function exchange_elements(lst1, lst2)\n    \
    \    for i, n in ipairs(lst1) do\n            if not is_even(n) then\n       \
    \         for j, m in ipairs(lst2) do\n                    if is_even(m) then\n\
    \                        lst1[i], lst2[j] = lst2[j], lst1[i]\n               \
    \         return true\n                    end\n                end\n        \
    \    end\n        end\n        return false\n    end\n    while exchange_elements(lst1,\
    \ lst2) do end\n    return all(is_even, lst1) and 'YES' or 'NO'\nend", "    local\
    \ sum = 0\n    for _, n in ipairs(lst1) do\n        if n % 2 == 1 then\n     \
    \       sum = sum + 1\n        end\n    end\n    for _, n in ipairs(lst2) do\n\
    \        if n % 2 == 1 then\n            sum = sum - 1\n        end\n    end\n\
    \    return sum == 0 and \"YES\" or \"NO\"\nend", "  -- Your code here\nend",
  "    return \"\"\nend", "  -- write your code here\nend", "    local evens = {}\n\
    \    local not_evens = {}\n    for _, n in ipairs(lst1) do\n        if n % 2 ==\
    \ 0 then\n            table.insert(evens, n)\n        else\n            table.insert(not_evens,\
    \ n)\n        end\n    end\n    for _, n in ipairs(lst2) do\n        if n % 2\
    \ == 0 then\n            table.insert(evens, n)\n        else\n            table.insert(not_evens,\
    \ n)\n        end\n    end\n    if #evens >= #not_evens then\n        return 'YES'\n\
    \    else\n        return 'NO'\n    end\nend", "  -- fill here\nend", "  -- table.insert(lst1,\
    \ lst2[1])\n  -- table.remove(lst2, 1)\n  -- print(unpack(lst1))\n  -- print(unpack(lst2))\n\
    \  local count = 0\n  for i = 1, #lst1 do\n    if lst1[i] % 2 == 1 then\n    \
    \  count = count + 1\n    end\n  end\n  for i = 1, #lst2 do\n    if lst2[i] %\
    \ 2 == 1 then\n      count = count + 1\n    end\n  end\n  if count % 2 == 0 then\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  local count_odds_in_lst1\
    \ = 0\n  local count_odds_in_lst2 = 0\n  local count_evens_in_lst1 = 0\n  local\
    \ count_evens_in_lst2 = 0\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n\
    \      count_evens_in_lst1 = count_evens_in_lst1 + 1\n    else\n      count_odds_in_lst1\
    \ = count_odds_in_lst1 + 1\n    end\n  end\n  for _, v in ipairs(lst2) do\n  \
    \  if v % 2 == 0 then\n      count_evens_in_lst2 = count_evens_in_lst2 + 1\n \
    \   else\n      count_odds_in_lst2 = count_odds_in_lst2 + 1\n    end\n  end\n\
    \  return count_evens_in_lst1 + count_odds_in_lst2 >= count_odds_in_lst1 and \"\
    YES\" or \"NO\"\nend", "    local is_even = function(n) return n % 2 == 0 end\n\
    \    local has_odd_elm = function(lst) return #lst:filter(is_even) < #lst end\n\
    \    if has_odd_elm(lst1) then\n        if #lst2 > 0 then\n            return\
    \ exchange(lst1:take(#lst1 - 1), lst2:drop(1))\n        else\n            return\
    \ \"NO\"\n        end\n    else\n        return \"YES\"\n    end\nend", "\tlocal\
    \ flag = \"NO\"\n\tlocal len = #lst1\n\tif len == 0 then\n\t\treturn flag\n\t\
    end\n\tfor i = 1, len do\n\t\tif lst1[i] % 2 == 1 then\n\t\t\tfor j = 1, len do\n\
    \t\t\t\tif lst2[j] % 2 == 1 then\n\t\t\t\t\tflag = \"YES\"\n\t\t\t\t\treturn flag\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn flag\nend", "    for i = 1, #lst1\
    \ do\n        if lst1[i] % 2 == 1 then\n            for j = 1, #lst2 do\n    \
    \            if lst2[j] % 2 == 1 then\n                    lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                    break\n                end\n         \
    \   end\n        end\n    end\n    for i = 1, #lst1 do\n        if lst1[i] % 2\
    \ == 1 then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "    local even = is_even(lst1)\n    local odd = is_odd(lst1)\n    return\
    \ (even > 0 and odd > 0) and \"YES\" or \"NO\"\nend", "    return 'NO'\nend",
  "  for _, x in ipairs(lst1) do\n    if x % 2 == 1 then\n      for _, y in ipairs(lst2)\
    \ do\n        if y % 2 == 0 then\n          return 'YES'\n        end\n      end\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  -- \"TODO\"\nend",
  "\t-- Code here\nend", "    local is_odd = function(num)\n        return num % 2\
    \ == 1\n    end\n    for _, v in ipairs(lst1) do\n        if is_odd(v) then\n\
    \            for _, v in ipairs(lst2) do\n                if not is_odd(v) then\n\
    \                    return 'YES'\n                end\n            end\n    \
    \        return 'NO'\n        end\n    end\n    return 'YES'\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
