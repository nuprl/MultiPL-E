name: HumanEval_7_filter_by_substring
language: lua
prompt: "-- Filter an input table of strings only for ones that contain given substring\n\
  -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc', 'bacd',\
  \ 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
  \ substring)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'},\
  \ 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
  \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    for k, v in pairs(strings) do\n        if\
    \ string.find(v, substring) then\n            table.insert(result, v)\n      \
    \  end\n    end\n    return result\nend", "    local filtered = {}\n    for _,\
    \ s in ipairs(strings) do\n        if s:find(substring) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "  local result = {}\n\
    \  for _, v in ipairs(strings) do\n    if v:find(substring) then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  local results = {}\n  for key,\
    \ str in pairs(strings) do\n    if string.find(str, substring) then\n      table.insert(results,\
    \ str)\n    end\n  end\n  return results\nend", "  local ret = {}\n  for i, s\
    \ in ipairs(strings) do\n    if s:find(substring) then\n      table.insert(ret,\
    \ s)\n    end\n  end\n  return ret\nend", "  local res = {}\n  for i, v in ipairs(strings)\
    \ do\n    if v:find(substring) then\n      table.insert(res, v)\n    end\n  end\n\
    \  return res\nend", "  local result = {}\n  for _, str in ipairs(strings) do\n\
    \    if vim.endswith(str, substring) then\n      table.insert(result, str)\n \
    \   end\n  end\n  return result\nend", "    local result = {}\n    for i, item\
    \ in ipairs(strings) do\n        if item:find(substring) then\n            table.insert(result,\
    \ item)\n        end\n    end\n    return result\nend", "    local filtered =\
    \ {}\n    for i, string in ipairs(strings) do\n        if string:find(substring)\
    \ then\n            table.insert(filtered, string)\n        end\n    end\n   \
    \ return filtered\nend", "    local filtered = {}\n    for i,s in ipairs(strings)\
    \ do\n        if s:find(substring) then\n            table.insert(filtered, s)\n\
    \        end\n    end\n    return filtered\nend", "\tlocal result = {}\n\tfor\
    \ _, str in ipairs(strings) do\n\t\tif str:find(substring) then\n\t\t\ttable.insert(result,\
    \ str)\n\t\tend\n\tend\n\treturn result\nend", "    local filtered = {}\n    for\
    \ i = 1, #strings do\n        if string.find(strings[i], substring) then\n   \
    \         table.insert(filtered, strings[i])\n        end\n    end\n    return\
    \ filtered\nend", "    local res = {}\n    for _, v in ipairs(strings) do\n  \
    \      if type(v) == 'string' and string.find(v, substring) then\n           \
    \ table.insert(res, v)\n        end\n    end\n    return res\nend", "    local\
    \ filtered = {}\n    for i, str in ipairs(strings) do\n        if str:find(substring)\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "    local new_strings = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(new_strings,\
    \ s)\n        end\n    end\n    return new_strings\nend", "  local result = {}\n\
    \  for _, str in ipairs(strings) do\n    if str:find(substring) then\n      table.insert(result,\
    \ str)\n    end\n  end\n  return result\nend", "  return lib.list_filter(strings,\
    \ substring, string.find)\nend", "    local new_strings = {}\n    for _, s in\
    \ ipairs(strings) do\n        if string.find(s, substring) then\n            table.insert(new_strings,\
    \ s)\n        end\n    end\n    return new_strings\nend", "    local result =\
    \ {}\n    for i, str in ipairs(strings) do\n        if str:find(substring) then\n\
    \            table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "    local filtered = {}\n    for i, v in ipairs(strings) do\n        if\
    \ string.find(v, substring) then\n            table.insert(filtered, v)\n    \
    \    end\n    end\n    return filtered\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
