name: HumanEval_7_filter_by_substring
language: lua
prompt: "-- Filter an input table of strings only for ones that contain given substring\n\
  -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc', 'bacd',\
  \ 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
  \ substring)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'},\
  \ 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
  \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    for k, v in pairs(strings) do\n        if\
    \ string.find(v, substring) then\n            table.insert(result, v)\n      \
    \  end\n    end\n    return result\nend", "    local filtered = {}\n    for _,\
    \ s in ipairs(strings) do\n        if s:find(substring) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "  local result = {}\n\
    \  for _, v in ipairs(strings) do\n    if v:find(substring) then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  local results = {}\n  for key,\
    \ str in pairs(strings) do\n    if string.find(str, substring) then\n      table.insert(results,\
    \ str)\n    end\n  end\n  return results\nend", "  local ret = {}\n  for i, s\
    \ in ipairs(strings) do\n    if s:find(substring) then\n      table.insert(ret,\
    \ s)\n    end\n  end\n  return ret\nend", "  local res = {}\n  for i, v in ipairs(strings)\
    \ do\n    if v:find(substring) then\n      table.insert(res, v)\n    end\n  end\n\
    \  return res\nend", "  local result = {}\n  for _, str in ipairs(strings) do\n\
    \    if vim.endswith(str, substring) then\n      table.insert(result, str)\n \
    \   end\n  end\n  return result\nend", "    local result = {}\n    for i, item\
    \ in ipairs(strings) do\n        if item:find(substring) then\n            table.insert(result,\
    \ item)\n        end\n    end\n    return result\nend", "    local filtered =\
    \ {}\n    for i, string in ipairs(strings) do\n        if string:find(substring)\
    \ then\n            table.insert(filtered, string)\n        end\n    end\n   \
    \ return filtered\nend", "    local filtered = {}\n    for i,s in ipairs(strings)\
    \ do\n        if s:find(substring) then\n            table.insert(filtered, s)\n\
    \        end\n    end\n    return filtered\nend", "\tlocal result = {}\n\tfor\
    \ _, str in ipairs(strings) do\n\t\tif str:find(substring) then\n\t\t\ttable.insert(result,\
    \ str)\n\t\tend\n\tend\n\treturn result\nend", "    local filtered = {}\n    for\
    \ i = 1, #strings do\n        if string.find(strings[i], substring) then\n   \
    \         table.insert(filtered, strings[i])\n        end\n    end\n    return\
    \ filtered\nend", "    local res = {}\n    for _, v in ipairs(strings) do\n  \
    \      if type(v) == 'string' and string.find(v, substring) then\n           \
    \ table.insert(res, v)\n        end\n    end\n    return res\nend", "    local\
    \ filtered = {}\n    for i, str in ipairs(strings) do\n        if str:find(substring)\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "    local new_strings = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(new_strings,\
    \ s)\n        end\n    end\n    return new_strings\nend", "  local result = {}\n\
    \  for _, str in ipairs(strings) do\n    if str:find(substring) then\n      table.insert(result,\
    \ str)\n    end\n  end\n  return result\nend", "  return lib.list_filter(strings,\
    \ substring, string.find)\nend", "    local new_strings = {}\n    for _, s in\
    \ ipairs(strings) do\n        if string.find(s, substring) then\n            table.insert(new_strings,\
    \ s)\n        end\n    end\n    return new_strings\nend", "    local result =\
    \ {}\n    for i, str in ipairs(strings) do\n        if str:find(substring) then\n\
    \            table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "    local filtered = {}\n    for i, v in ipairs(strings) do\n        if\
    \ string.find(v, substring) then\n            table.insert(filtered, v)\n    \
    \    end\n    end\n    return filtered\nend", "    return utils.filter(strings,\
    \ function(str)\n        return string.find(str, substring) ~= nil\n    end)\n\
    end", "  local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(string,\
    \ substring) then\n      table.insert(result, string)\n    end\n  end\n  return\
    \ result\nend", "    local result = {}\n    for _,s in ipairs(strings) do\n  \
    \      if s:find(substring) then\n            table.insert(result, s)\n      \
    \  end\n    end\n    return result\nend", "  return array.filter(strings, function(v)\
    \ return v:find(substring) end)\nend", "  local res = {}\n  for _, str in ipairs(strings)\
    \ do\n    if string.find(str, substring) then\n      table.insert(res, str)\n\
    \    end\n  end\n  return res\nend", "    local res = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(res,\
    \ s)\n        end\n    end\n    return res\nend", "  local result = {}\n  for\
    \ _, string in ipairs(strings) do\n    if string:find(substring) then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "\tif type(strings) ~= 'table'\
    \ then\n\t\treturn {}\n\tend\n\tlocal filtered = {}\n\tfor k, v in pairs(strings)\
    \ do\n\t\tif v:find(substring) then\n\t\t\ttable.insert(filtered, v)\n\t\tend\n\
    \tend\n\treturn filtered\nend", "  local res = {}\n  for _, v in ipairs(strings)\
    \ do\n    if v:find(substring) then\n      table.insert(res, v)\n    end\n  end\n\
    \  return res\nend", "  local filtered = {}\n  for _, str in ipairs(strings) do\n\
    \    if string.find(str, substring) then\n      table.insert(filtered, str)\n\
    \    end\n  end\n  return filtered\nend", "    local result = {}\n    for _, v\
    \ in ipairs(strings) do\n        if string.find(v, substring) then\n         \
    \   table.insert(result, v)\n        end\n    end\n    return result\nend", "\t\
    return lib.filter(strings, function(elem)\n\t\treturn elem:find(substring) ~=\
    \ nil\n\tend)\nend", "    local out = {}\n    for _, s in ipairs(strings) do\n\
    \        if s:find(substring) then\n            table.insert(out, s)\n       \
    \ end\n    end\n    return out\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:find(substring) then\n      table.insert(result, s)\n    end\n\
    \  end\n  return result\nend", "\tlocal res = {}\n\tfor i, name in ipairs(strings)\
    \ do\n\t\tif name:find(substring) then\n\t\t\ttable.insert(res, name)\n\t\tend\n\
    \tend\n\treturn res\nend", "    local array = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:match(substring) then\n            table.insert(array, str)\n\
    \        end\n    end\n    return array\nend", "  local match = {}\n  if type(strings)\
    \ == 'table' then\n    for k,v in pairs(strings) do\n      if string.find(v, substring)\
    \ then\n        table.insert(match, v)\n      end\n    end\n  end\n  return match\n\
    end", "  local result = {}\n  for k, v in pairs(strings) do\n    if string.find(v,\
    \ substring) then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end", "    local filtered = {}\n    for _,str in ipairs(strings) do\n        if\
    \ str:find(substring) then\n            table.insert(filtered, str)\n        end\n\
    \    end\n    return filtered\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  assert(type(strings) ==\
    \ 'table')\n  assert(type(substring) == 'string')\n  local result = {}\n  for\
    \ _, str in ipairs(strings) do\n    if str:find(substring) then\n      table.insert(result,\
    \ str)\n    end\n  end\n  return result\nend", "    local filtered = {}\n    for\
    \ _, string in ipairs(strings) do\n        if string:find(substring) then\n  \
    \          table.insert(filtered, string)\n        end\n    end\n    return filtered\n\
    end", "\tlocal filtered = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:find(substring)\
    \ then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\treturn filtered\nend",
  "\tlocal results = {}\n\tfor _,s in ipairs(strings) do\n\t\tif string.find(s, substring)\
    \ then\n\t\t\ttable.insert(results, s)\n\t\tend\n\tend\n\treturn results\nend",
  "  local res = {}\n  for _, str in ipairs(strings) do\n    if str:match(substring)\
    \ then\n      table.insert(res, str)\n    end\n  end\n  return res\nend", "  local\
    \ output = {}\n  for _, s in ipairs(strings) do\n    if string.find(s, substring)\
    \ then\n      table.insert(output, s)\n    end\n  end\n  return output\nend",
  "  local res = {}\n  for _,s in ipairs(strings) do\n    if string.find(s, substring)\
    \ then\n      table.insert(res, s)\n    end\n  end\n  return res\nend", "  local\
    \ res = {}\n  for _,s in ipairs(strings) do\n    if string.find(s, substring)\
    \ then\n      table.insert(res, s)\n    end\n  end\n  return res\nend", "    local\
    \ res = {}\n    for i, v in ipairs(strings) do\n        if v:find(substring) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend",
  "    local result = {}\n    for k, v in pairs(strings) do\n        if string.find(v,\
    \ substring) then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend", "    local out = {}\n    for i,v in ipairs(strings)\
    \ do\n        if v:find(substring) then\n            table.insert(out, v)\n  \
    \      end\n    end\n    return out\nend", "    local filtered = {}\n    for _,\
    \ str in ipairs(strings) do\n        if string.find(str, substring) then\n   \
    \         table.insert(filtered, str)\n        end\n    end\n    return filtered\n\
    end", "    local filtered = {}\n    for _, string in ipairs(strings) do\n    \
    \    if string:find(substring) then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend", "  local result = {}\n  for\
    \ _, str in ipairs(strings) do\n    if str:find(substring) then\n      table.insert(result,\
    \ str)\n    end\n  end\n  return result\nend", "    local ret = {}\n    for _,\
    \ s in ipairs(strings) do\n        if s:find(substring) then\n            table.insert(ret,\
    \ s)\n        end\n    end\n    return ret\nend", "    local result = {}\n   \
    \ for _, s in ipairs(strings) do\n        if string.find(s, substring) then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _, str in ipairs(strings) do\n    if str:match(substring)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring)\
    \ then\n            table.insert(result, string)\n        end\n    end\n    return\
    \ result\nend", "    local filtered = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string:find(substring) then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    local result\
    \ = {}\n    for _, value in ipairs(strings) do\n        if (value:find(substring))\
    \ then\n            table.insert(result, value)\n        end\n    end\n    return\
    \ result\nend", "    if not strings or #strings == 0 then\n        return strings\n\
    \    end\n    local result = {}\n    for _, str in ipairs(strings) do\n      \
    \  if str:find(substring) then\n            table.insert(result, str)\n      \
    \  end\n    end\n    return result\nend", "  local filtered = {}\n  for _,str\
    \ in ipairs(strings) do\n    if string.find(str, substring) then\n      table.insert(filtered,\
    \ str)\n    end\n  end\n  return filtered\nend", "  local result = {}\n  for i,\
    \ string in ipairs(strings) do\n    if string:find(substring) then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "  local result = {}\n  for\
    \ _, str in ipairs(strings) do\n    if vim.endswith(str, substring) then\n   \
    \   table.insert(result, str)\n    end\n  end\n  return result\nend", "    local\
    \ filtered = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(filtered, s)\n        end\n    end\n    return\
    \ filtered\nend", "    local filtered = {}\n    for i, e in ipairs(strings) do\n\
    \        if string.find(e, substring) then\n            table.insert(filtered,\
    \ e)\n        end\n    end\n    return filtered\nend", "\tlocal result = {}\n\t\
    for _, str in ipairs(strings) do\n\t\tif string.find(str, substring) then\n\t\t\
    \ttable.insert(result, str)\n\t\tend\n\tend\n\treturn result\nend", "\tlocal result\
    \ = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:find(substring) then\n\t\
    \t\ttable.insert(result, str)\n\t\tend\n\tend\n\treturn result\nend", "  local\
    \ result = {}\n  for i, str in ipairs(strings) do\n    if string.find(str, substring)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "    local result = {}\n    for _, value in ipairs(strings) do\n        if string.find(value,\
    \ substring) then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:find(substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "    assert(strings)\n    assert(substring)\n\
    \    local result = {}\n    for _, string in ipairs(strings) do\n        if string.find(string,\
    \ substring) then\n            table.insert(result, string)\n        end\n   \
    \ end\n    return result\nend", "  local res = {}\n  for _, x in ipairs(strings)\
    \ do\n    if string.find(x, substring) then\n      table.insert(res, x)\n    end\n\
    \  end\n  return res\nend", "    local filtered = {}\n    for i, s in ipairs(strings)\
    \ do\n        if (string.find(s, substring)) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "    local result = {}\n\
    \    for _, string in ipairs(strings) do\n        if string:find(substring) then\n\
    \            table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _, string in ipairs(strings) do\n    if string:find(substring)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring) then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring) then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end", "    local results = {}\n    for _, string in ipairs(strings) do\n     \
    \   if string:find(substring) then\n            table.insert(results, string)\n\
    \        end\n    end\n    return results\nend", "    local result = {}\n    for\
    \ _, v in ipairs(strings) do\n        if v:find(substring) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, string in ipairs(strings) do\n    if string.find(string, substring) then\n\
    \      table.insert(result, string)\n    end\n  end\n  return result\nend", " \
    \ local result = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "  local filtered = {}\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring) then\n      table.insert(filtered, str)\n    end\n  end\n  return\
    \ filtered\nend", "    local strings_filtered = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string:find(substring) then\n            table.insert(strings_filtered,\
    \ string)\n        end\n    end\n    return strings_filtered\nend", "  local result\
    \ = {}\n  for _, string in ipairs(strings) do\n    if string:find(substring) then\n\
    \      table.insert(result, string)\n    end\n  end\n  return result\nend", " \
    \   local out = {}\n    for _,s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(out, s)\n        end\n    end\n    return out\n\
    end", "  local filtered = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(filtered, str)\n    end\n  end\n  return filtered\n\
    end", "    local filtered = {}\n    for _, word in ipairs(strings) do\n      \
    \  if string.find(word, substring) then\n            table.insert(filtered, word)\n\
    \        end\n    end\n    return filtered\nend", "\treturn util.filter(strings,\
    \ function(value)\n\t\treturn string.find(value, substring) ~= nil\n\tend)\nend",
  "    local new_table = {}\n    for i = 1, #strings do\n        if strings[i]:find(substring)\
    \ then\n            table.insert(new_table, strings[i])\n        end\n    end\n\
    \    return new_table\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if strfind(s, substring) then\n      table.insert(result, s)\n    end\n\
    \  end\n  return result\nend", "  return map(function(s) return string.find(s,\
    \ substring) and s or nil end, strings)\nend", "    local result = {}\n    for\
    \ _, v in ipairs(strings) do\n        if v:find(substring) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "\tlocal result = {}\n\t\
    for _, s in ipairs(strings) do\n\t\tif s:match(substring) then\n\t\t\ttable.insert(result,\
    \ s)\n\t\tend\n\tend\n\treturn result\nend", "    local new_strings = {}\n   \
    \ for _, s in ipairs(strings) do\n        if string.find(s, substring) then\n\
    \            table.insert(new_strings, s)\n        end\n    end\n    return new_strings\n\
    end", "  local ret = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(ret, str)\n    end\n  end\n  return ret\nend", "  \
    \  local filtered = {}\n    for k,v in pairs(strings) do\n        if v:find(substring)\
    \ then\n            table.insert(filtered, v)\n        end\n    end\n    return\
    \ filtered\nend", "  return fun.totable(fun.filter(function(s) return s:find(substring)\
    \ end, fun.iter(strings)))\nend", "\tlocal result = {}\n\tfor _, v in ipairs(strings)\
    \ do\n\t\tif v:match(substring) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\
    \tend\n\treturn result\nend", "  return maplist(function(x) return string.find(x,\
    \ substring) and x or nil end, strings)\nend", "    if strings == nil or substring\
    \ == nil then\n        return {}\n    end\n    local filtered = {}\n    for _,v\
    \ in pairs(strings) do\n        if string.find(v, substring) ~= nil then\n   \
    \         table.insert(filtered, v)\n        end\n    end\n    return filtered\n\
    end", "    local result = {}\n    for k, string in pairs(strings) do\n       \
    \ if string.find(string, substring) then\n            table.insert(result, string)\n\
    \        end\n    end\n    return result\nend", "    return mp.filter_map(strings,\
    \ function(string)\n        if string:find(substring) then\n            return\
    \ string\n        end\n    end)\nend", "\tlocal result = {}\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif string.find(str, substring) then\n\t\t\ttable.insert(result, str)\n\
    \t\tend\n\tend\n\treturn result\nend", "  local result = {}\n  for _,s in ipairs(strings)\
    \ do\n    if s:find(substring) then\n      table.insert(result, s)\n    end\n\
    \  end\n  return result\nend", "    local result = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.find(string, substring) then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend", "  local result = {}\n\
    \  for _, v in ipairs(strings) do\n    if v:find(substring) then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "    local result = {}\n    for _,\
    \ string in ipairs(strings) do\n        if string:find(substring) then\n     \
    \       table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "    local filtered = {}\n    for _, v in ipairs(strings) do\n        if\
    \ v:find(substring) then\n            table.insert(filtered, v)\n        end\n\
    \    end\n    return filtered\nend", "  local result = {}\n  for _, string in\
    \ ipairs(strings) do\n    if string.find(string, substring) then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "    local result = {}\n   \
    \ for _,v in ipairs(strings) do\n        if string.find(v, substring) then\n \
    \           table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "  local result = {}\n  for _, str in ipairs(strings) do\n   \
    \ if str:find(substring) then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend", "    if type(strings) ~= 'table' then\n        return\
    \ strings\n    end\n    local output = {}\n    for _,v in ipairs(strings) do\n\
    \        if v:find(substring) then\n            table.insert(output, v)\n    \
    \    end\n    end\n    return output\nend", "    local result = {}\n    for i,\
    \ string in ipairs(strings) do\n        if string.find(string, substring) then\n\
    \            table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "  local filtered = {}\n  for _,string in ipairs(strings) do\n    if string.find(string,\
    \ substring) then\n      table.insert(filtered, string)\n    end\n  end\n  return\
    \ filtered\nend", "    local result = {}\n    for _, v in ipairs(strings) do\n\
    \        if v:find(substring) then\n            table.insert(result, v)\n    \
    \    end\n    end\n    return result\nend", "    local new_strings = {}\n    for\
    \ _,v in ipairs(strings) do\n        if v:find(substring) then\n            table.insert(new_strings,\
    \ v)\n        end\n    end\n    return new_strings\nend", "  if type(strings)\
    \ ~= 'table' then\n    return {}\n  end\n  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if string.find(s, substring) then\n      table.insert(result, s)\n \
    \   end\n  end\n  return result\nend", "    local r = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(r, s)\n\
    \        end\n    end\n    return r\nend", "  local out = {}\n  for i, s in ipairs(strings)\
    \ do\n    if s:find(substring) then\n      table.insert(out, s)\n    end\n  end\n\
    \  return out\nend", "\tlocal filtered = {}\n\tfor _, value in pairs(strings)\
    \ do\n\t\tif string.find(value, substring) then\n\t\t\ttable.insert(filtered,\
    \ value)\n\t\tend\n\tend\n\treturn filtered\nend", "    local res = {}\n    for\
    \ _, str in ipairs(strings) do\n        if str:find(substring) then\n        \
    \    table.insert(res, str)\n        end\n    end\n    return res\nend", "   \
    \ assert(type(strings) == 'table')\n    assert(type(substring) == 'string')\n\
    \    local result = {}\n    for _, str in ipairs(strings) do\n        if str:find(substring)\
    \ then\n            table.insert(result, str)\n        end\n    end\n    return\
    \ result\nend", "    local filtered = {}\n    local current = 0\n    for _, string\
    \ in ipairs(strings) do\n        if string.find(string, substring) then\n    \
    \        current = current + 1\n            filtered[current] = string\n     \
    \   end\n    end\n    return filtered\nend", "    local res = {}\n    for _, s\
    \ in ipairs(strings) do\n        if string.find(s, substring) then\n         \
    \   table.insert(res, s)\n        end\n    end\n    return res\nend", "    local\
    \ result = {}\n    for _,s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "  local filtered = {}\n  for _,str in ipairs(strings) do\n  \
    \  if str:match(substring) then\n      table.insert(filtered, str)\n    end\n\
    \  end\n  return filtered\nend", "  local result = {}\n  for _, v in ipairs(strings)\
    \ do\n    if v:find(substring) then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "  local rv = {}\n  for _, s in ipairs(strings)\
    \ do\n    if string.find(s, substring) then\n      table.insert(rv, s)\n    end\n\
    \  end\n  return rv\nend", "  local res = {}\n  for i, value in ipairs(strings)\
    \ do\n    if value:find(substring) then\n      table.insert(res, value)\n    end\n\
    \  end\n  return res\nend", "    local res = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.find(string, substring) then\n            table.insert(res,\
    \ string)\n        end\n    end\n    return res\nend", "  local n = #strings\n\
    \  local result = {}\n  for i = 1, n do\n    if strings[i]:find(substring) then\n\
    \      result[#result + 1] = strings[i]\n    end\n  end\n  return result\nend",
  "\tlocal result = {}\n\tfor _, value in ipairs(strings) do\n\t\tif value:find(substring)\
    \ then\n\t\t\ttable.insert(result, value)\n\t\tend\n\tend\n\treturn result\nend",
  "  if not is_table(strings) then\n    error('expected strings to be a table')\n\
    \  end\n  if not is_string(substring) then\n    error('expected substring to be\
    \ a string')\n  end\n  local filtered = {}\n  for i, val in ipairs(strings) do\n\
    \    if is_string(val) and (val:find(substring) ~= nil) then\n      table.insert(filtered,\
    \ val)\n    end\n  end\n  return filtered\nend", "    local filtered = {}\n  \
    \  for _, str in ipairs(strings) do\n        if str:find(substring) then\n   \
    \         table.insert(filtered, str)\n        end\n    end\n    return filtered\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "  local result = {}\n  for _, s in ipairs(strings) do\n    if\
    \ s:find(substring) then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n \
    \       if string.find(s, substring) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend", "  return tablex.filter(strings,\
    \ function(s) return s:find(substring) end)\nend", "  local new_strings = {}\n\
    \  for _, str in ipairs(strings) do\n    if string.find(str, substring) then\n\
    \      table.insert(new_strings, str)\n    end\n  end\n  return new_strings\n\
    end", "    local t = {}\n    for i, v in ipairs(strings) do\n        if v:find(substring)\
    \ then\n            table.insert(t, v)\n        end\n    end\n    return t\nend",
  "  local results = {}\n  for _, val in pairs(strings) do\n    if val:match(substring)\
    \ then\n      table.insert(results, val)\n    end\n  end\n  return results\nend",
  "    local result = {}\n    for _, v in ipairs(strings) do\n        if string.find(v,\
    \ substring) then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if vim.startswith(s, substring) then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for _, str in\
    \ ipairs(strings) do\n    if string.find(str, substring) then\n      table.insert(result,\
    \ str)\n    end\n  end\n  return result\nend", "    local out = {}\n    for k,v\
    \ in pairs(strings) do\n        if string.find(v, substring) then\n          \
    \  table.insert(out, v)\n        end\n    end\n    return out\nend", "  return\
    \ utils.map(\n    function(s)\n      if string.find(s, substring) then\n     \
    \   return s\n      end\n    end,\n    strings\n  )\nend", "  local result = {}\n\
    \  for _, v in ipairs(strings) do\n    if string.find(v, substring) then\n   \
    \   table.insert(result, v)\n    end\n  end\n  return result\nend", "  local result\
    \ = {}\n  for _, s in ipairs(strings) do\n    if string.find(s, substring) then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for _, str in ipairs(strings) do\n        if string.find(str,\
    \ substring) then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:find(substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "  local result = {}\n  for _,string\
    \ in ipairs(strings) do\n    if string:find(substring) then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "\tlocal ret = {}\n\tfor _,s\
    \ in ipairs(strings) do\n\t\tif string.find(s, substring) then\n\t\t\ttable.insert(ret,\
    \ s)\n\t\tend\n\tend\n\treturn ret\nend", "    local result = {}\n    for _, str\
    \ in ipairs(strings) do\n        if string.find(str, substring) then\n       \
    \     table.insert(result, str)\n        end\n    end\n    return result\nend",
  "    local filtered = {}\n    for _, s in ipairs(strings) do\n        if string.find(s,\
    \ substring) then\n            table.insert(filtered, s)\n        end\n    end\n\
    \    return filtered\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if string.find(str, substring) then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "  local result = {}\n\
    \  for _, s in ipairs(strings) do\n    if string.find(s, substring) then\n   \
    \   table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ filtered = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring)\
    \ then\n            table.insert(filtered, string)\n        end\n    end\n   \
    \ return filtered\nend", "    local ret = {}\n    for key, value in pairs(strings)\
    \ do\n        if utils.string_contains(value, substring) then\n            table.insert(ret,\
    \ value)\n        end\n    end\n    return ret\nend", "    local result = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:find(substring) then\n \
    \           table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend",
  "    local result = {}\n    for _, v in ipairs(strings) do\n        if v:find(substring)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    local new_strings = {}\n    for _, val in pairs(strings)\
    \ do\n        if string.find(val, substring) then\n            table.insert(new_strings,\
    \ val)\n        end\n    end\n    return new_strings\nend", "    local ret = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:match(substring) then\n    \
    \        table.insert(ret, s)\n        end\n    end\n    return ret\nend", " \
    \ local result = {}\n  for _,s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend",
  "    local array = {}\n    for _,string in pairs(strings) do\n        if string.find(string,\
    \ substring) then\n            table.insert(array, string)\n        end\n    end\n\
    \    return array\nend", "  local found = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:match(substring) then\n      table.insert(found, str)\n    end\n\
    \  end\n  return found\nend", "    local ret = {}\n    for _, k in ipairs(strings)\
    \ do\n        if string.find(k, substring) then\n            table.insert(ret,\
    \ k)\n        end\n    end\n    return ret\nend", "    local strings_filtered\
    \ = {}\n    for k,v in pairs(strings) do\n        if v:find(substring) then\n\
    \            table.insert(strings_filtered, v)\n        end\n    end\n    return\
    \ strings_filtered\nend", "    local out = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:find(substring) then\n            table.insert(out, s)\n  \
    \      end\n    end\n    return out\nend", "    if not istable(strings) then\n\
    \        return {}\n    end", "  local result = {}\n  for i = 1, #strings do\n\
    \    if (string.find(strings[i], substring) ~= nil) then\n      table.insert(result,\
    \ strings[i])\n    end\n  end\n  return result\nend", "  local strings_filtered\
    \ = {}\n  for i, value in ipairs(strings) do\n    if string.find(value, substring)\
    \ then\n      table.insert(strings_filtered, value)\n    end\n  end\n  return\
    \ strings_filtered\nend", "    if not strings or not substring then\n        return\
    \ {}\n    end\n    local res = {}\n    for _, string in ipairs(strings) do\n \
    \       if string:match(substring) then\n            table.insert(res, string)\n\
    \        end\n    end\n    return res\nend", "    local result = {}\n    for _,\
    \ s in ipairs(strings) do\n        if s:match(substring) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "\tlocal result = {}\n\t\
    for _, str in ipairs(strings) do\n\t\tif str:match(substring) then\n\t\t\ttable.insert(result,\
    \ str)\n\t\tend\n\tend\n\treturn result\nend", "  local result = {}\n  for _,\
    \ string in ipairs(strings) do\n    if string:find(substring) then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "    local ret = {}\n    for\
    \ i,str in ipairs(strings) do\n        if str:find(substring) then\n         \
    \   table.insert(ret, str)\n        end\n    end\n    return ret\nend", "\tlocal\
    \ result = {}\n\tfor _, string in ipairs(strings) do\n\t\tif string:find(substring)\
    \ then\n\t\t\ttable.insert(result, string)\n\t\tend\n\tend\n\treturn result\n\
    end", "    local result = {}\n    for _, v in ipairs(strings) do\n        if v:find(substring)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    if type(strings) ~= 'table' then\n        error('Invalid\
    \ input! Expected a table of strings!')\n    end\n    if type(substring) ~= 'string'\
    \ then\n        error('Invalid input! Expected a string!')\n    end\n    local\
    \ filtered = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(filtered, s)\n        end\n    end\n    return\
    \ filtered\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n\
    \        if string.find(s, substring) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend", "\treturn table.filter(strings,\
    \ function(element)\n\t\treturn string.find(element, substring) ~= nil\n\tend)\n\
    end", "\tlocal filtered = {}\n\tfor _, string in ipairs(strings) do\n\t\tif string.find(string,\
    \ substring) then\n\t\t\ttable.insert(filtered, string)\n\t\tend\n\tend\n\treturn\
    \ filtered\nend", "  local matches = {}\n  for _, v in ipairs(strings) do\n  \
    \  if string.find(v, substring) then\n      table.insert(matches, v)\n    end\n\
    \  end\n  return matches\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:find(substring) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend", "    local filtered = {}\n   \
    \ for _, string in ipairs(strings) do\n        if string:find(substring) then\n\
    \            table.insert(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend", "    local res = {}\n    for i, str in ipairs(strings) do\n\
    \        if string.find(str, substring) then\n            table.insert(res, str)\n\
    \        end\n    end\n    return res\nend", "    local result = {}\n    for _,\
    \ string in ipairs(strings) do\n        if string.find(string, substring) then\n\
    \            table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "    local res = {}\n    for _, v in ipairs(strings) do\n        if v:find(substring)\
    \ then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ string.find(str, substring) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend", "  local set = {}\n  for _, s in\
    \ ipairs(strings) do\n    if (s:find(substring)) then\n      table.insert(set,\
    \ s)\n    end\n  end\n  return set\nend", "    local result = {}\n    for _, v\
    \ in ipairs(strings) do\n        if string.find(v, substring) then\n         \
    \   table.insert(result, v)\n        end\n    end\n    return result\nend", " \
    \ local matches = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(matches, s)\n    end\n  end\n  return matches\n\
    end", "\tlocal rv = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:find(substring)\
    \ then\n\t\t\ttable.insert(rv, s)\n\t\tend\n\tend\n\treturn rv\nend", "\tlocal\
    \ filtered = {}\n\tfor _, s in ipairs(strings) do\n\t\tif (s:find(substring))\
    \ then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\treturn filtered\nend",
  "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "\tlocal result = {}\n\tfor i, v in ipairs(strings) do\n\t\tif\
    \ v:find(substring) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    local output = {}\n    for i, s in ipairs(strings) do\n \
    \       if string.find(s, substring) then\n            table.insert(output, s)\n\
    \        end\n    end\n    return output\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
