name: HumanEval_6_parse_nested_parens
language: lua
results:
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%s*%(([^%)]*)%)%s*')\
    \ do\n        -- Count matching pairs of parentheses, i.e. level of nesting\n\
    \        local depth = paren_group:gsub('[^()]', ''):gsub('%(%(%(+)()', '%1'):gsub('()(%))%))',\
    \ '%1'):len()\n        table.insert(paren_groups, depth)\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_5w7kvr.lua:19:\
    \ expected: {2, 3, 1, 3}\nactual: {1, 0, 2, 0, 2, 0, 0}\nstack traceback:\n\t\
    /tmp/tmpg_5w7kvr.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    local base_levels = {}\n    for paren_group in stringx.split(paren_string,\
    \ ' ') do\n        local levels = {}\n        local level = 0\n        for char\
    \ in stringx.split(paren_group, '') do\n            if char == '(' then\n    \
    \            level = level + 1\n            elseif char == ')' then\n        \
    \        level = level - 1\n            end\n            table.insert(levels,\
    \ level)\n        end\n        table.insert(base_levels, math.max(unpack(levels)))\n\
    \    end\n    return base_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpknz4fm9h.lua:8:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmpknz4fm9h.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpknz4fm9h.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_table = {}\n    local lparen_count = 0\n    local depth = 0\n\
    \    for ch in paren_string:gmatch('.') do\n        if ch == '(' then\n      \
    \      lparen_count = lparen_count + 1\n            depth = depth + 1\n      \
    \  elseif ch == ')' then\n            depth = depth - 1\n            lparen_count\
    \ = lparen_count - 1\n            if lparen_count == 0 then\n                table.insert(paren_table,\
    \ depth)\n                depth = 0\n            end\n        end\n    end\n \
    \   return paren_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tcvyl78.lua:29:\
    \ expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmp5tcvyl78.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    local depth_for_paren_group = {}\n    local depth = 0\n    local start =\
    \ 1\n    local max_depth = 0\n    local function process_group()\n        depth_for_paren_group[start]\
    \ = max_depth\n        start = i + 1\n        max_depth = 0\n    end\n    for\
    \ i = 1, #paren_string do\n        local ch = paren_string:sub(i, i)\n       \
    \ if ch == '(' then\n            depth = depth + 1\n            if depth > max_depth\
    \ then\n                max_depth = depth\n            end\n        elseif ch\
    \ == ')' then\n            depth = depth - 1\n        elseif ch == ' ' then\n\
    \            process_group()\n        end\n    end\n    process_group()\n    return\
    \ depth_for_paren_group\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv93xl5es.lua:13:\
    \ attempt to perform arithmetic on a nil value (global 'i')\nstack traceback:\n\
    \t/tmp/tmpv93xl5es.lua:13: in local 'process_group'\n\t/tmp/tmpv93xl5es.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpv93xl5es.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    local depth = {}\n    local max = 0\n    local parens = re.findall('\\\\\
    ((+\\\\))', paren_string)\n    for i = 1, #parens do\n        local grp = parens[i]\n\
    \        depth[i] = #grp - 1\n        if depth[i] > max then\n            max\
    \ = depth[i]\n        end\n    end\n    -- Convert to 1-indexed.\n    for i =\
    \ 1, #depth do\n        depth[i] = depth[i] + 1\n    end\n    return depth\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdl04u0yc.lua:9:\
    \ attempt to index a nil value (global 're')\nstack traceback:\n\t/tmp/tmpdl04u0yc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdl04u0yc.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nested_levels = {}\n    for group in paren_string:gmatch('%b()')\
    \ do\n        local i = 0\n        for _ in group:gmatch('%b()') do\n        \
    \    i = i + 1\n        end\n        table.insert(max_nested_levels, i)\n    end\n\
    \    return max_nested_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2ypaktj.lua:21:\
    \ expected: {2, 3, 1, 3}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpj2ypaktj.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local nested_parens = {}\n  for paren_substring in paren_string:gmatch(\"%S+\"\
    ) do\n    local depth = 0\n    local max_depth = 0\n    for c in paren_substring:gmatch(\"\
    .\") do\n      if c == '(' then\n        depth = depth + 1\n        if depth >\
    \ max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ ')' then\n        depth = depth - 1\n      end\n    end\n    table.insert(nested_parens,\
    \ max_depth)\n  end\n  return nested_parens\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    -- parse the paren string to a list\n    local paren_list = {}\n    for paren\
    \ in paren_string:gmatch('%S+') do\n        paren_list[#paren_list + 1] = paren\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbnut68d3.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    --### if '()' is a single token and we have 5 such tokens then we have '()'\
    \ => 1, '()()' => 2 etc.\n    --### but if '(())' is a single token then we have\
    \ '()' => 1, '(())' => 2 etc.\n    local w = {}\n    local level = 0\n    local\
    \ max_level = 0\n    for t in stringx.split(paren_string) do\n        local l\
    \ = t:len()\n        level = level + l\n        if l > 1 then\n            level\
    \ = level - 1\n        end\n        max_level = math.max(max_level, level)\n \
    \       table.insert(w, tostring(max_level))\n        if l > 1 then\n        \
    \    level = level + 1\n        end\n    end\n    return w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph8z_uiof.lua:12:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmph8z_uiof.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmph8z_uiof.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \tlocal levels = {}\n\tlocal level = 0\n\tlocal max_level = 0\n\tlocal groups\
    \ = {}\n\tfor i = 1, #paren_string do\n\t\tlocal c = paren_string:sub(i, i)\n\t\
    \tif c == '(' then\n\t\t\tlevel = level + 1\n\t\t\tif level > max_level then\n\
    \t\t\t\tmax_level = level\n\t\t\tend\n\t\telseif c == ')' then\n\t\t\tlevel =\
    \ level - 1\n\t\telseif c == ' ' then\n\t\t\tgroups[#groups + 1] = level\n\t\t\
    \tlevel = 0\n\t\t\tmax_level = 0\n\t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrahb0nk.lua:32:\
    \ expected: {2, 3, 1, 3}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpwrahb0nk.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = {}\n  -- Strip whitespace.\n  paren_string = paren_string:gsub('%s',\
    \ '')\n  -- We keep an index into the paren string (which increments after every\
    \ group)\n  -- and a stack for counting the depth of nesting.\n  local i = 1\n\
    \  local stack = {}\n  while i <= #paren_string do\n    -- If the current character\
    \ is a '(' push onto the stack.\n    if paren_string:sub(i, i) == '(' then\n \
    \     table.insert(stack, 1)\n    -- If the current character is a ')' pop from\
    \ the stack.\n    elseif paren_string:sub(i, i) == ')' then\n      table.remove(stack)\n\
    \    end\n    -- Increment i.\n    i = i + 1\n    -- If i points to a space or\
    \ the end of the string, that means we're done with a group.\n    if paren_string:sub(i,\
    \ i) == ' ' or i > #paren_string then\n      -- Insert the maximum nesting of\
    \ the group into the result.\n      table.insert(max_nesting, #stack)\n      --\
    \ Reset the stack.\n      stack = {}\n    end\n  end\n  return max_nesting\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7a2exsh.lua:38:\
    \ expected: {2, 3, 1, 3}\nactual: {0}\nstack traceback:\n\t/tmp/tmpa7a2exsh.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  -- Note that the maximum number of nested parens is more than 1000. Hence,\
    \ we use a list to store the nestings.\n  local nestings = {}\n  local max_level\
    \ = 0\n  local current_level = 0\n  local current_index = 1\n  local i = 1\n \
    \ while i <= #paren_string do\n    local char = paren_string:sub(i, i)\n    if\
    \ char == '(' then\n      current_level = current_level + 1\n      max_level =\
    \ math.max(max_level, current_level)\n    elseif char == ')' then\n      nestings[current_index]\
    \ = current_level\n      current_index = current_index + 1\n      current_level\
    \ = current_level - 1\n    end\n    i = i + 1\n  end\n  return nestings\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yl1kavu.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: {2, 2, 1, 3, 2, 1, 1, 3, 2, 2, 2, 1}\nstack\
    \ traceback:\n\t/tmp/tmp5yl1kavu.lua:31: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_group_list = split(paren_string, ' ')\n  local result = {}\n  for\
    \ _, paren_group in ipairs(paren_group_list) do\n    local depth = 0\n    local\
    \ max_depth = 0\n    for _, paren in utf8.codes(paren_group) do\n      if paren\
    \ == 40 then\n        depth = depth + 1\n        if depth > max_depth then\n \
    \         max_depth = depth\n        end\n      elseif paren == 41 then\n    \
    \    depth = depth - 1\n      end\n    end\n    table.insert(result, max_depth)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprfp3ehkv.lua:7:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmprfp3ehkv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprfp3ehkv.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \tlocal paren_level = 0\n\tlocal max_levels = {}\n\tfor ch in paren_string:gmatch('.')\
    \ do\n\t\tif ch == '(' then\n\t\t\tparen_level = paren_level + 1\n\t\telseif ch\
    \ == ')' then\n\t\t\tmax_levels[#max_levels + 1] = paren_level\n\t\t\tparen_level\
    \ = paren_level - 1\n\t\tend\n\tend\n\treturn max_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp855zda0m.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: {2, 2, 1, 3, 2, 1, 1, 3, 2, 2, 2, 1}\nstack\
    \ traceback:\n\t/tmp/tmp855zda0m.lua:23: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  local paren_level = 0\n  local max_level = 0\n \
    \ local current_level = 0\n  local start_i = 1\n  local end_i = 1\n  local max_i\
    \ = string.len(paren_string)\n  while true do\n    while true do\n      end_i\
    \ = start_i\n      while true do\n        end_i = end_i + 1\n        if end_i\
    \ > max_i then break end\n        if string.sub(paren_string, end_i, end_i) ==\
    \ '(' then\n          current_level = current_level + 1\n        elseif string.sub(paren_string,\
    \ end_i, end_i) == ')' then\n          current_level = current_level - 1\n   \
    \     end\n        if current_level == 0 then break end\n      end\n      if current_level\
    \ == 0 then break end\n      start_i = start_i + 1\n    end\n    if max_level\
    \ < current_level then max_level = current_level end\n    current_level = 0\n\
    \    start_i = end_i + 1\n    if start_i > max_i then break end\n  end\n  return\
    \ max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7lqt57jg.lua:41:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmp7lqt57jg.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    local levels = {}\n    for group in paren_string:gmatch(\"%b()\") do\n  \
    \      table.insert(levels, _.reduce(group, function(acc, v)\n            if v\
    \ == '(' then\n                return acc + 1\n            elseif v == ')' then\n\
    \                return acc - 1\n            end\n        end, 0))\n    end\n\
    \    return levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplqaiyqbr.lua:9:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmplqaiyqbr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplqaiyqbr.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local stack = {}\n  local max_level = {}\n  local cur_level = 0\n  local cur_group\
    \ = 1\n  local char_seen = false\n  for i = 1, #paren_string do\n    local char\
    \ = paren_string:sub(i, i)\n    if char == ' ' then\n      if char_seen then\n\
    \        max_level[cur_group] = cur_level\n        cur_group = cur_group + 1\n\
    \        cur_level = 0\n        char_seen = false\n      end\n    else\n     \
    \ char_seen = true\n      if char == '(' then\n        table.insert(stack, char)\n\
    \        cur_level = cur_level + 1\n      elseif char == ')' then\n        table.remove(stack)\n\
    \        cur_level = cur_level - 1\n      end\n    end\n  end\n  if char_seen\
    \ then\n    max_level[cur_group] = cur_level\n  end\n  return max_level\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd97dngs2.lua:41:\
    \ expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmpd97dngs2.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = {}\n  local level = 0\n  for i = 1, #paren_string do\n  \
    \  local s = paren_string:sub(i, i)\n    if s == '(' then\n      level = level\
    \ + 1\n    elseif s == ')' then\n      level = level - 1\n    elseif s == ' '\
    \ then\n      max_level[#max_level + 1] = level\n      level = 0\n    end\n  end\n\
    \  max_level[#max_level + 1] = level\n  return max_level\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9io_akr.lua:27:\
    \ expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmpv9io_akr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    local no_parens = paren_string:gsub('%s', '')\n    local len = no_parens:len()\n\
    \    local no_parens_table = {}\n    for i = 1, len do\n        no_parens_table[i]\
    \ = no_parens:sub(i, i)\n    end\n    local level = 0\n    local max_level = 0\n\
    \    local max_level_table = {}\n    for i = 1, len do\n        local char = no_parens_table[i]\n\
    \        if char == '(' then\n            level = level + 1\n        elseif char\
    \ == ')' then\n            level = level - 1\n        end\n        if level >\
    \ max_level then\n            max_level = level\n        end\n        if char\
    \ == ')' then\n            table.insert(max_level_table, max_level)\n        \
    \    max_level = 0\n        end\n    end\n    return max_level_table\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ndp_t5.lua:37:\
    \ expected: {2, 3, 1, 3}\nactual: {2, 2, 0, 3, 1, 0, 1, 3, 1, 2, 2, 0}\nstack\
    \ traceback:\n\t/tmp/tmpt5ndp_t5.lua:37: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \    local result = {}\n    for paren_group in paren_string:gmatch('[^%s]+') do\n\
    \        local level = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \      elseif c == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        table.insert(result,\
    \ max_level)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
