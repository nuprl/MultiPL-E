name: HumanEval_91_is_bored
language: lua
prompt: "-- You'll be given a string of words, and your task is to count the number\n\
  -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
  \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
  -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
  -- 1\nlocal function is_bored(S)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
  \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
  \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
  \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive. will\
  \ kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a walk'),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local boredoms = 0\n  for w in string.gmatch(S, '[^%.%?!]+') do\n\
    \    if string.match(w, '^[Ii] ') then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend", "    local is_bored = 0\n    local string = S:gsub('[.?!]',\
    \ ' ')\n    local words = {}\n    for word in string.gmatch(string, \"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    for i = 1, #words do\n      \
    \  if words[i] == 'I' then\n            is_bored = is_bored + 1\n        end\n\
    \    end\n    return is_bored\nend", "    return S:count('I')\nend", "  local\
    \ boredoms = 0\n  local phrase = string.gmatch(S, '[^%.%?%!]+')\n  for w in phrase\
    \ do\n    if w:sub(1, 1) == 'I' then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend", "    S = string.gsub(S, '[.?!]', '!')\n    local\
    \ count = 0\n    for _, v in pairs(string.split(S, '!')) do\n        local i =\
    \ string.find(v, 'I')\n        if i ~= nil and i == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  return select(2,\
    \ string.gsub(S, '[?.!]%s*I ', ''))\nend", "  -- Your code here:\nend", "    return\
    \ #S:gmatch(\"I \")\nend", "  local count = 0\n  for _, word in ipairs(stringx.split(S,\
    \ \"%.|\\?|\\!\")) do\n    if word:startswith(\"I\") then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    return S:match('^%s*I%s') and\
    \ 1 or 0\nend", "    local boredoms = 0\n    for sentence in string.gmatch(S,\
    \ \"[^.!?]+\") do\n        boredoms = boredoms + (string.match(sentence, \"^I\"\
    ) and 1 or 0)\n    end\n    return boredoms\nend", "    local boredom = 0\n  \
    \  for w in S:gmatch('%S+') do\n        if w:match('^I') then\n            boredom\
    \ = boredom + 1\n        end\n    end\n    return boredom\nend", "    return 0\n\
    end", "  -- TODO: implement this function.\n  local bored = 0\n  local S_split\
    \ = re.split(S, \"[.!?]\")\n  for i = 1, #S_split do\n    local each_split = S_split[i]\n\
    \    local each_word = re.split(each_split, \"[ ]\")\n    if each_word[1] == \"\
    I\" then\n      bored = bored + 1\n    end\n  end\n  return bored\nend", "   \
    \ -- your code goes here\n    local count = 0\n    if S:find('I') == 1 then\n\
    \        count = count + 1\n    end\n    return count\nend", "    local count\
    \ = 0\n    for bored in S:gmatch(\"I.-[.?!]\") do\n        count = count + 1\n\
    \    end\n    return count\nend", "  local count = 0\n  for _, s in ipairs(string.split(S,\
    \ \".!?\")) do\n    count = count + (s:match('^I') and 1 or 0)\n  end\n  return\
    \ count\nend", "  return #string.match(S, 'I.-[.?!]')\nend", "  local S = \" \"\
    \ .. S .. \" \"\n  return select(2, S:gsub(\" I \", \"  \"))\nend", "  local boredoms\
    \ = 0\n  for s in S:gmatch('[^%.!?]+') do\n    if s:match('^%s*I%s') then\n  \
    \    boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
