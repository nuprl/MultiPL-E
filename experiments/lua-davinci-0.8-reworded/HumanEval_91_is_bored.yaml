name: HumanEval_91_is_bored
language: lua
prompt: "-- You'll be given a string of words, and your task is to count the number\n\
  -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
  \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
  -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
  -- 1\nlocal function is_bored(S)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
  \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
  \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
  \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive. will\
  \ kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a walk'),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local boredoms = 0\n  for w in string.gmatch(S, '[^%.%?!]+') do\n\
    \    if string.match(w, '^[Ii] ') then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend", "    local is_bored = 0\n    local string = S:gsub('[.?!]',\
    \ ' ')\n    local words = {}\n    for word in string.gmatch(string, \"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    for i = 1, #words do\n      \
    \  if words[i] == 'I' then\n            is_bored = is_bored + 1\n        end\n\
    \    end\n    return is_bored\nend", "    return S:count('I')\nend", "  local\
    \ boredoms = 0\n  local phrase = string.gmatch(S, '[^%.%?%!]+')\n  for w in phrase\
    \ do\n    if w:sub(1, 1) == 'I' then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend", "    S = string.gsub(S, '[.?!]', '!')\n    local\
    \ count = 0\n    for _, v in pairs(string.split(S, '!')) do\n        local i =\
    \ string.find(v, 'I')\n        if i ~= nil and i == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  return select(2,\
    \ string.gsub(S, '[?.!]%s*I ', ''))\nend", "  -- Your code here:\nend", "    return\
    \ #S:gmatch(\"I \")\nend", "  local count = 0\n  for _, word in ipairs(stringx.split(S,\
    \ \"%.|\\?|\\!\")) do\n    if word:startswith(\"I\") then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    return S:match('^%s*I%s') and\
    \ 1 or 0\nend", "    local boredoms = 0\n    for sentence in string.gmatch(S,\
    \ \"[^.!?]+\") do\n        boredoms = boredoms + (string.match(sentence, \"^I\"\
    ) and 1 or 0)\n    end\n    return boredoms\nend", "    local boredom = 0\n  \
    \  for w in S:gmatch('%S+') do\n        if w:match('^I') then\n            boredom\
    \ = boredom + 1\n        end\n    end\n    return boredom\nend", "    return 0\n\
    end", "  -- TODO: implement this function.\n  local bored = 0\n  local S_split\
    \ = re.split(S, \"[.!?]\")\n  for i = 1, #S_split do\n    local each_split = S_split[i]\n\
    \    local each_word = re.split(each_split, \"[ ]\")\n    if each_word[1] == \"\
    I\" then\n      bored = bored + 1\n    end\n  end\n  return bored\nend", "   \
    \ -- your code goes here\n    local count = 0\n    if S:find('I') == 1 then\n\
    \        count = count + 1\n    end\n    return count\nend", "    local count\
    \ = 0\n    for bored in S:gmatch(\"I.-[.?!]\") do\n        count = count + 1\n\
    \    end\n    return count\nend", "  local count = 0\n  for _, s in ipairs(string.split(S,\
    \ \".!?\")) do\n    count = count + (s:match('^I') and 1 or 0)\n  end\n  return\
    \ count\nend", "  return #string.match(S, 'I.-[.?!]')\nend", "  local S = \" \"\
    \ .. S .. \" \"\n  return select(2, S:gsub(\" I \", \"  \"))\nend", "  local boredoms\
    \ = 0\n  for s in S:gmatch('[^%.!?]+') do\n    if s:match('^%s*I%s') then\n  \
    \    boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend", "  --\n\
    \  -- COMPLETE THIS CODE\n  --\nend", "    local i = 0\n    for _ in S:gmatch(\"\
    I\") do\n        i = i + 1\n    end\n    return i\nend", "    local found, _,\
    \ count = S:gsub('I', '')\n    return count\nend", "    local n = 0\n    local\
    \ new_sentence = true\n    for word in string.gmatch(S, \"%w+\") do\n        if\
    \ new_sentence and word == \"I\" then\n            n = n + 1\n        end\n  \
    \      new_sentence = string.find(word, \"[?!.]\") ~= nil\n    end\n    return\
    \ n\nend", "  -- your code here\n  local count = 0\n  for i in string.gmatch(S,\
    \ \"[^.!?]+\") do\n    if string.sub(i,1,1) == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local boredoms = 0\n  for sentence\
    \ in S:gmatch(\"[^.?!]+\") do\n    if sentence:sub(1,1) == \"I\" then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend", "  local boredoms =\
    \ 0\n  for _, word in ipairs(S:split('[.?!]')) do\n    if word:find('I') then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend", "   \
    \ local count = 0\n    local words = split(S)\n    for i, word in ipairs(words)\
    \ do\n        if word == 'I' then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    -- write your code here\n    return 0\n\
    end", "  return select(2, string.gsub(S, \"^[Ii]%s\", \"\"))\nend", "  local count\
    \ = 0\n  for word in string.gmatch(S, \"%a+\") do\n    if word == \"I\" then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "\tlocal count\
    \ = 0\n\tfor t in string.gmatch(S, '[^.?!]+') do\n\t\tif string.find(t, '^%s*I%s')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local\
    \ boredoms = 0\n    local i = 1\n    while i <= #S do\n        local j = i\n \
    \       while j <= #S and S:sub(j, j) ~= '.' and S:sub(j, j) ~= '?' and S:sub(j,\
    \ j) ~= '!' do\n            j = j + 1\n        end\n        local sub_str = S:sub(i,\
    \ j - 1)\n        if sub_str:match('^%s*I') then\n            boredoms = boredoms\
    \ + 1\n        end\n        i = j + 1\n    end\n    return boredoms\nend", " \
    \   local count = 0\n    local last_c = 0\n    for c in S:gmatch('.') do\n   \
    \     if c == '.' or c == '?' or c == '!' then\n            count = count + 1\n\
    \            last_c = c\n        end\n    end\n    if count == 0 then return 0\
    \ end\n    if last_c == '!' or last_c == '?' then\n        count = count - 1\n\
    \    end\n    return count\nend", "\t-- TODO: write your code here\n\tlocal count=0\n\
    \tlocal i=1\n\twhile i<=string.len(S) do\n\t\tif S:sub(i,i)==\"I\" then\n\t\t\t\
    count=count+1\n\t\t\twhile S:sub(i,i)~=\".\" and S:sub(i,i)~=\"?\" and S:sub(i,i)~=\"\
    !\" do\n\t\t\t\ti=i+1\n\t\t\tend\n\t\tend\n\t\ti=i+1\n\tend\n\treturn count\n\
    end", "    local pattern = \"^I\"\n    local num = 0\n    for sentence in S:gmatch(\"\
    [^.!?]+\") do\n        if sentence:match(pattern) then\n            num = num\
    \ + 1\n        end\n    end\n    return num\nend", "    return S:gsub(\"I%s[^!.?%s]*[!.?%s]\"\
    , \"\"):len()\nend", "  -- A sentence is bored if it starts with \"I\" followed\
    \ by any number of\n  -- spaces.\n  local i = S:find('I[%s]+')\n  if i then\n\
    \    return 1\n  else\n    return 0\n  end\nend", "    local boredoms = 0\n  \
    \  local i = 1\n    while i <= #S do\n        local word, advance = next_word(S,\
    \ i)\n        if word == 'I' then\n            boredoms = boredoms + 1\n     \
    \   end\n        i = i + advance\n    end\n    return boredoms\nend", "  local\
    \ boredoms = 0\n  local i = 1\n  while i <= #S do\n    -- Check for the start\
    \ of a new sentence\n    if is_separator(S, i) then\n      i = i + 1\n      if\
    \ is_I(S, i) then\n        -- We have a boredom\n        boredoms = boredoms +\
    \ 1\n      end\n    end\n    i = i + 1\n  end\n  return boredoms\nend", "    local\
    \ boredoms = 0\n    for sentence in string.gmatch(S, '[^%.!?]+') do\n        if\
    \ string.sub(sentence, 1, 2) == 'I ' then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend", "   -- Your code here\n   local\
    \ res = 0\n   for i in string.gmatch(S,'%S+') do\n      if i == 'I' then\n   \
    \      res = res + 1\n      end\n   end\n   return res\nend", "  -- TODO: Your\
    \ code here\nend", "  -- Your code goes here\nend", "  if S:find('I') then\n \
    \   return S:gsub('[^I]+', ''):len()\n  else\n    return 0\n  end\nend", "  local\
    \ count = 0\n  for w in string.gmatch(S, '[^%p]+') do\n    if w == 'I' then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    return 0\n\
    end", "  -- TODO: Implement this function\n  local bored = 0\n  S = string.gsub(S,\
    \ \"I\", \"\")\n  if string.find(S, \"I\") then\n    bored = 1\n  end\n  return\
    \ bored\nend", "  return string.gsub(S, 'I', '')\nend", "    local boredoms =\
    \ 0\n    for i in string.gmatch(S, 'I[^%.%?%!]+') do\n        boredoms = boredoms\
    \ + 1\n    end\n    return boredoms\nend", "\tlocal count = 0\n\tfor w in string.gmatch(S,\
    \ '([^.?!]+)') do\n\t\tif w:sub(1,1) == 'I' then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "    local words = split(S, '%s')\n    local\
    \ count = 0\n    for _, word in ipairs(words) do\n        if word == 'I' then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  count = 0\n  S = S .. \".\" -- add a full stop to the end of S to catch final\
    \ sentence\n  local _, num_sentences = string.gsub(S, \"%.\", \".\")\n  local\
    \ _, num_questions = string.gsub(S, \"%?\", \"?\")\n  local _, num_exclamations\
    \ = string.gsub(S, \"%!\", \"!\")\n  local _, num_boreds = string.gsub(S, \"I%s\"\
    , \"I \")\n  return num_boreds\nend", "  -- YOUR CODE HERE\n  -- Count the number\
    \ of boredoms in the given sentence.\n  -- You may need to use gmatch and match.\n\
    \  local boredoms = 0\n  for word in string.gmatch(S, \"%a+\") do\n    if string.match(word,\
    \ \"^I\") then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\n\
    end", "  local count = 0\n  for w in S:gmatch(\"[^.?!]+\") do\n    if w:match(\"\
    ^I \") then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ local words = utils.split(S, '[.?!]')\n  local boredoms = 0\n  for _, word in\
    \ ipairs(words) do\n    if word:match('^I') then\n      boredoms = boredoms +\
    \ 1\n    end\n  end\n  return boredoms\nend", "    return 0\nend", "\t-- split\
    \ sentences by .?!.\n\tlocal sentences = stringx.split(S, '[%.?!]')\n\t-- filter\
    \ out sentences that start with 'I'\n\tlocal boredoms = List.filter(function(s)\
    \ return stringx.startswith(s, 'I') end, sentences)\n\t-- return the number of\
    \ boredoms.\n\treturn List.length(boredoms)\nend", "    local boredoms = 0\n \
    \   for sentence in S:gmatch(\"[^!.?]+\") do\n        if sentence:match(\"^%s*I%s+\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend", "    local n = 0\n    for i, word in S:gmatch('[^%s!?.]+') do\n\
    \        if i == 1 and word:lower() == 'i' then\n            n = n + 1\n     \
    \   end\n    end\n    return n\nend", "    local count = 0\n    local i = 1\n\
    \    while (i < #S) do\n        if (string.sub(S, i, i) == 'I') then\n       \
    \     count = count + 1\n        end\n        i = i + 1\n    end\n    return count\n\
    end", "    return #S:gmatch(\"I\")\nend", "  return S:gsub('I[^!%?%.]*[!%?%.]?',\
    \ ''):len()\nend", "\treturn count_words(S, \"I\")\nend", "\tlocal nbored = 0\n\
    \tlocal bored = false\n\tfor w in S:gmatch(\"[^?.!]+\") do\n\t\tif bored then\n\
    \t\t\tbored = false\n\t\telseif w:match(\"^%s*I%s*\") then\n\t\t\tnbored = nbored\
    \ + 1\n\t\t\tbored = true\n\t\tend\n\tend\n\treturn nbored\nend", "    local nboredoms\
    \ = 0\n    -- count the number of boredoms.\n    -- Write your code here!\n  \
    \  local stpos, enpos = 1, 1\n    while stpos <= #S do\n        enpos = string.find(S,\
    \ '[!.?]', stpos)\n        if enpos == nil then\n            enpos = #S\n    \
    \    end\n        local word = string.match(S, '[a-zA-Z]+', stpos)\n        if\
    \ word == \"I\" then\n            nboredoms = nboredoms + 1\n        end\n   \
    \     stpos = enpos + 1\n    end\n    return nboredoms\nend", "  local cnt = 0\n\
    \  S = S:gsub('[^%a%s]', '')\n  for w in S:gmatch('%w+') do\n    if w == 'I' then\n\
    \      cnt = cnt + 1\n    end\n  end\n  return cnt\nend", "    local boredoms\
    \ = 0\n    local start_index = 1\n    local end_index = 1\n    while start_index\
    \ <= #S do\n        end_index = start_index\n        while end_index <= #S and\
    \ S:sub(end_index, end_index) ~= '.' and S:sub(end_index, end_index) ~= '?' and\
    \ S:sub(end_index, end_index) ~= '!' do\n            end_index = end_index + 1\n\
    \        end\n        if start_index < end_index and S:sub(start_index, start_index\
    \ + 1) == 'I ' then\n            boredoms = boredoms + 1\n        end\n      \
    \  start_index = end_index + 1\n    end\n    return boredoms\nend", "  return\
    \ select(2, S:gsub('I', ''))\nend", "  return #string.gsub(S, \"I\", \"\")\nend",
  "    local boredoms = 0\n    for token in string.gmatch(S, \"[^%s%.?!]+\") do\n\
    \        if token == \"I\" then\n            boredoms = boredoms + 1\n       \
    \ end\n    end\n    return boredoms\nend", "  local boredoms = 0\n  local first_word\n\
    \  for word in string.gmatch(S, \"%w+\") do\n    if first_word == nil then\n \
    \     first_word = word\n    else\n      if first_word == \"I\" then\n       \
    \ boredoms = boredoms + 1\n      end\n      first_word = word\n    end\n  end\n\
    \  return boredoms\nend", "  local count = 0\n  local array = split(S, '[.!?]')\n\
    \  for i, v in ipairs(array) do\n    local temp = split(v, ' ')\n    if temp[1]\
    \ == 'I' then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    return S:gsub('^I%s.*[%.!?]', ''):gsub('^I%s.*$', ''):gsub('[%?%.!]', ''):len()\n\
    end", "    return S:gsub('^I', 'BORED')\nend", "  local boredoms = 0\n  for _,\
    \ word in ipairs(utils.split(S, \"%.?!\", true)) do\n    if word:sub(1, 1) ==\
    \ \"I\" then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\n\
    end", "  -- TODO: implement the function\n  local is_bored = 0\n  for word in\
    \ string.gmatch(S, '%S+') do\n    if word == 'I' then\n      is_bored = is_bored\
    \ + 1\n    end\n  end\n  return is_bored\nend", "   -- FILL HERE\n   local s =\
    \ 0\n   for _, x in ipairs(S:split(\".?!\")) do\n      if x:sub(1, 1) == \"I\"\
    \ then\n         s = s + 1\n      end\n   end\n   return s\nend", "  local count\
    \ = 0\n  for i in string.gmatch(S, 'I%f[%s,.]') do\n    count = count + 1\n  end\n\
    \  return count\nend", "    local count = 0\n    for _, w in pairs(S:split('%p+'))\
    \ do\n        if w:lower() == 'i' then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend", "   local boredoms = 0\n   local after_i\
    \ = false\n   for word in S:gmatch('[^%s]+') do\n      if after_i and word:sub(1,1)\
    \ ~= '.' then\n         boredoms = boredoms + 1\n         after_i = false\n  \
    \    end\n      if word == 'I' then\n         after_i = true\n      end\n   end\n\
    \   return boredoms\nend", "  local count = 0\n  for sentence in string.gmatch(S,\
    \ \"[^%.!?]+\") do\n    local word = string.match(sentence, '^%s*([^%s]+)')\n\
    \    if word == 'I' then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "   -- Your code here\n   local n = 0\n   local s = string.find(S, 'I')\n\
    \   while s do\n      if s ~= 1 then\n         if S:sub(s-1, s-1) == '.' or S:sub(s-1,\
    \ s-1) == '?' or S:sub(s-1, s-1) == '!' then\n            n = n + 1\n        \
    \ end\n      else\n         n = n + 1\n      end\n      s = string.find(S, 'I',\
    \ s+1)\n   end\n   return n\nend", "    local count = 0\n    for _, w in ipairs(S:lower():split())\
    \ do\n        if w == 'i' then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend", "    local boredoms = 0\n    for sentence in\
    \ S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^I%s\") then\n      \
    \      boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend",
  "    -- your code here\n    return 0\nend", '    local str = string.match(S, "(%w+)%p*")',
  "    local count = 0\n    for word in S:gmatch('%a+') do\n        if word == 'I'\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local function count_words(w)\n    if w == 'I' then\n      return 1\n\
    \    else\n      return 0\n    end\n  end\n  local n = 0\n  for w in S:gmatch('(%a+)')\
    \ do\n    n = n + count_words(w)\n  end\n  return n\nend", "    local count =\
    \ 0\n    for word in string.gmatch(S, '%w+') do\n        if word == 'I' then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local n = 0\n    for _, s in ipairs(string.split(S, '.!?')) do\n        if\
    \ s:match('^ I') then\n            n = n + 1\n        end\n    end\n    return\
    \ n\nend", "    -- remove . , ? and !\n    S = S:gsub('[.?!]', '')\n    local\
    \ _, count = S:gsub('I', '')\n    return count\nend", "  local sentence = S:split(\"\
    [!?.]\")\n  local c = 0\n  for i=1,#sentence do\n    local word = sentence[i]:split(\"\
    \ \")\n    if word[1] == \"I\" then\n      c = c + 1\n    end\n  end\n  return\
    \ c\nend", "\tlocal n = 0\n\tfor line in S:gmatch'[^.!?]+' do\n\t\tif line:match'^I%s'\
    \ then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend", "\t-- TODO: Implement\
    \ it\nend", "    local count = 0\n    for i in S:gmatch(\"[^%?%.!]+\") do\n  \
    \      if i:sub(1,1) == \"I\" then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  return select(2, S:gsub('^I%s', ''))\nend",
  "    local sum = 0\n    local i = 1\n    while i <= #S do\n        if S:sub(i, i)\
    \ == 'I' then\n            sum = sum + 1\n            while i <= #S and S:sub(i,\
    \ i) ~= '.' and S:sub(i, i) ~= '?' and S:sub(i, i) ~= '!' do\n               \
    \ i = i + 1\n            end\n        end\n        i = i + 1\n    end\n    return\
    \ sum\nend", "    local cnt = 0\n    local first_letter = string.sub(S, 1, 1)\n\
    \    if string.lower(first_letter) == 'i' then\n        cnt = cnt + 1\n    end\n\
    \    return cnt\nend", "    local count = 0\n    local sentences = string.gmatch(S,\
    \ '[^%.!?]+')\n    for sentence in sentences do\n        if string.sub(sentence,\
    \ 1, 1) == 'I' then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "    count = 0\n    for s in string.gmatch(S, '[^%.!?]+')\
    \ do\n        if string.sub(s, 1, 2) == 'I ' then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "  return #S:gmatch('I')\n\
    end", "    local boredoms = 0\n    for _, w in ipairs(S:split(\"%s\")) do\n  \
    \      if w == \"I\" then\n            boredoms = boredoms + 1\n        end\n\
    \    end\n    return boredoms\nend", "  -- Your code here\n  --[[\n    local words\
    \ = stringx.split(S)\n    local boredoms = 0\n    for k, v in pairs(words) do\n\
    \      if v == \"I\" then\n        boredoms = boredoms + 1\n      end\n    end\n\
    \    return boredoms\n  ]]\n  --[[\n    local sentences = stringx.split(S, '[.?!]')\n\
    \    local boredoms = 0\n    for k, v in pairs(sentences) do\n      if stringx.strip(v)\
    \ == \"I\" then\n        boredoms = boredoms + 1\n      end\n    end\n    return\
    \ boredoms\n  ]]\n  --[[\n    local sentences = stringx.split(S, '[.?!]')\n  \
    \  local boredoms = 0\n    for k, v in pairs(sentences) do\n      local words\
    \ = stringx.split(v)\n      if words[1] == \"I\" then\n        boredoms = boredoms\
    \ + 1\n      end\n    end\n    return boredoms\n  ]]\n  --[[\n    local sentences\
    \ = stringx.split(S, '[.?!]')\n    local boredoms = 0\n    for k, v in pairs(sentences)\
    \ do\n      local words = stringx.split(v)\n      if words[1] == \"I\" then\n\
    \        boredoms = boredoms + 1\n      end\n    end\n    return boredoms\n  ]]\n\
    \  --[[\n    local sentences = stringx.split(S, '[.?!]')\n    local boredoms =\
    \ 0\n    for k, v in pairs(sentences) do\n      local words = stringx.split(v)\n\
    \      if words[1] == \"I\" then\n        boredoms = boredoms + 1\n      end\n\
    \    end\n    return boredoms\n  ]]\n  --[[\n    local sentences = stringx.split(S,\
    \ '[.?!]')\n    local boredoms = 0\n    for k, v in pairs(sentences) do\n    \
    \  local words = stringx.split(v)\n      if words[1] == \"I\" then\n        boredoms\
    \ = boredoms + 1\n      end\n    end\n    return boredoms\n  ]]\n ", "    local\
    \ boredoms = 0\n    local i = 1\n    while i <= #S do\n        local c = S:sub(i,\
    \ i)\n        if c == 'I' then\n            while i <= #S do\n               \
    \ i = i + 1\n                c = S:sub(i, i)\n                if c == '.' or c\
    \ == '?' or c == '!' then\n                    break\n                end\n  \
    \          end\n            boredoms = boredoms + 1\n        end\n        i =\
    \ i + 1\n    end\n    return boredoms\nend", "  local sentence = 0\n  for word\
    \ in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      sentence = sentence\
    \ + 1\n    end\n  end\n  return sentence\nend", "    S = S:lower()\n    local\
    \ num = 0\n    for w in S:gmatch(\"%S+\") do\n        if w == \"i\" then\n   \
    \         num = num + 1\n        end\n    end\n    return num\nend", "  local\
    \ sentences = split(S, '!')\n  for i, s in ipairs(sentences) do\n    sentences[i]\
    \ = split(s, '.')\n  end\n  sentences = flatten(sentences)\n  for i, s in ipairs(sentences)\
    \ do\n    sentences[i] = split(s, '?')\n  end\n  sentences = flatten(sentences)\n\
    \  local num_boredoms = 0\n  for _, sentence in ipairs(sentences) do\n    local\
    \ first_word = split(sentence, ' ')[1]\n    if first_word == 'I' then\n      num_boredoms\
    \ = num_boredoms + 1\n    end\n  end\n  return num_boredoms\nend", "  local sentences\
    \ = split(S, '[.?!]')\n  local boredoms = 0\n  for _, sentence in ipairs(sentences)\
    \ do\n    if string.sub(sentence, 1, 2) == 'I ' then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend", "    local _, count = string.gsub(S,\
    \ \"^I[%s]+\", \"\")\n    return count\nend", "\tlocal boredoms = 0\n\tlocal tokens\
    \ = stringx.split(S, \"%.|%?|!\")\n\tfor _,s in pairs(tokens) do\n\t\tif (stringx.startswith(s,\
    \ \"I\")) then\n\t\t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\treturn boredoms\n\
    end", "  local boredoms = 0\n  for sentence in string.gmatch(S, '[^.?!]+') do\n\
    \    if string.sub(sentence, 1, 1) == 'I' then\n      boredoms = boredoms + 1\n\
    \    end\n  end\n  return boredoms\nend", "  if not S then return 0 end\n  local\
    \ num_boredoms = 0\n  -- Give me the '.', '!' or '?' in S. If there's no such\
    \ character,\n  -- then return\n  local start, finish = S:find('[%.?!]')\n  if\
    \ not start then return 0 end\n  -- Give me the substring that starts at the first\
    \ character and ends\n  -- at the first '.', '?' or '!'\n  local sub = S:sub(1,\
    \ finish)\n  -- If the substring starts with 'I', add one boredom\n  if sub:find('^I')\
    \ then num_boredoms = num_boredoms + 1 end\n  -- Give me the rest of the string\
    \ from the first '.', '?' or '!' onward\n  local rest = S:sub(finish + 1)\n  --\
    \ Now count the boredoms in the rest of the string.\n  return num_boredoms + is_bored(rest)\n\
    end", "   local total,i,w = 0\n   local function words()\n      return function(S,i)\n\
    \         return S:match('(%w+)',i)\n      end\n   end\n   for w in words(S,i)\
    \ do\n      if w:find'^I' then\n         total = total + 1\n      end\n   end\n\
    \   return total\nend", "  -- Should return the number of boredoms in S.\n  if\
    \ not S:find(\"I\") then\n    return 0\n  end\n  local boredoms = 0\n  local pos\
    \ = 1\n  while true do\n    local first, last = S:find(\"I\", pos)\n    if not\
    \ first then\n      break\n    end\n    pos = last + 1\n    while true do\n  \
    \    local c = S:sub(pos, pos)\n      if c == \".\" or c == \"?\" or c == \"!\"\
    \ then\n        break\n      end\n      pos = pos + 1\n    end\n    boredoms =\
    \ boredoms + 1\n  end\n  return boredoms\nend", "  local i = 0\n  for w in S:gmatch(\"\
    [^%s]+\") do\n    if w == \"I\" then\n      i = i + 1\n    end\n  end\n  return\
    \ i\nend", "    local boredoms = 0\n    local word = nil\n    for word in S:gmatch(\"\
    %w+\") do\n        if word == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend", "  local count = 0\n  for word\
    \ in string.gmatch(S, \"%S+\") do\n    if string.find(word, \"^I\") ~= nil then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for _,sentence in ipairs(S:split('[.?!]')) do\n    if sentence:match('^%s*I%s')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ is_bored = false\n  local boredoms = 0\n  local len = string.len(S)\n  for i\
    \ = 1, len do\n    if is_bored then\n      if S:sub(i, i) == '.' or S:sub(i, i)\
    \ == '?' or S:sub(i, i) == '!' then\n        is_bored = false\n      end\n   \
    \ else\n      if S:sub(i, i) == ' ' then\n        if i + 1 <= len and S:sub(i\
    \ + 1, i + 1) == 'I' then\n          is_bored = true\n          boredoms = boredoms\
    \ + 1\n        end\n      end\n    end\n  end\n  return boredoms\nend", "  local\
    \ total = 0\n  local sentences = string.gmatch(S, \"[^%.?!]+\")\n  for sentence\
    \ in sentences do\n    if (string.match(sentence, \"^I\")) then\n      total =\
    \ total + 1\n    end\n  end\n  return total\nend", "    return select(2, string.gsub(S,\
    \ \"%aI%a\", \"\"))\nend", "\tS = string.lower(S)\n\tS = string.gsub(S, \"^%s*(.-)%s*$\"\
    , \"%1\")\n\tlocal boredoms = 0\n\tfor _, v in pairs(split(S, '%.')) do\n\t\t\
    if v:find('^%s*i%s+') then\n\t\t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\t\
    return boredoms\nend", "  local len = #S\n  local i = 1\n  local count = 0\n \
    \ local delim = { '!', '.', '?' }\n  local delim_map = {}\n  for k, v in pairs(delim)\
    \ do\n    delim_map[v] = true\n  end\n  while i <= len do\n    local j = i\n \
    \   while j <= len and not delim_map[S:sub(j, j)] do\n      j = j + 1\n    end\n\
    \    if S:sub(i, i + 1) == 'I ' then\n      count = count + 1\n    end\n    i\
    \ = j + 1\n  end\n  return count\nend", "\tlocal boredoms = 0\n\tfor sentence\
    \ in string.gmatch(S, '%S+') do\n\t\tif string.lower(sentence) == 'i' then\n\t\
    \t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\treturn boredoms\nend", "    local\
    \ count = 0\n    for match in string.gmatch(S, \"%a[%a ]*%.\") do\n        if\
    \ match:sub(1,2) == \"I \" then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local n = 0\n    for word in S:gmatch('[^.!?]+')\
    \ do\n        n = n + (word:match('^I') and 1 or 0)\n    end\n    return n\nend",
  "  local i = 0\n  local n = 0\n  while i do\n    i = string.find(S, '%.', i)\n \
    \   if i then\n      if string.find(S, '^I%s+', i - 1) then\n        n = n + 1\n\
    \      end\n      i = i + 1\n    end\n  end\n  return n\nend", "    local boredoms\
    \ = 0\n    local _, end_index = string.find(S, '.')\n    for sentence in string.gmatch(S,\
    \ '[^.!?]+') do\n        local word, __ = string.match(sentence, '%s*(%w+)')\n\
    \        if word == 'I' then\n            boredoms = boredoms + 1\n        end\n\
    \    end\n    return boredoms\nend", "  local boredoms = 0\n  for word in string.gmatch(S,\
    \ \"[^%w]+\") do\n    if word == \"I\" then\n      boredoms = boredoms + 1\n \
    \   end\n  end\n  return boredoms\nend", "    local b = 0\n    for _, v in ipairs(string.split(S,\
    \ '.')) do\n        v = string.trim(v)\n        if v:startswith('I') then\n  \
    \          b = b + 1\n        end\n    end\n    return b\nend", "  local words\
    \ = {}\n  local i = 1\n  for word in string.gmatch(S, '%w+') do\n    words[i]\
    \ = word\n    i = i + 1\n  end\n  local sentence_count = 0\n  for k, word in pairs(words)\
    \ do\n    if word == 'I' then\n      sentence_count = sentence_count + 1\n   \
    \ end\n  end\n  return sentence_count\nend", "  return S:gsub(\"%.?[^I]+\", \"\
    \"):len()\nend", "    local delimiter = '(\\.|\\?|\\!)'\n    local sentences =\
    \ split(S, delimiter)\n    local count = 0\n    for i, v in ipairs(sentences)\
    \ do\n        if starts_with(v, ' I') then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "    local s = string.gsub(S, '[!?.]',\
    \ '\\1')\n    local count = 0\n    for word in string.gmatch(s, '[^\\1]+') do\n\
    \        if (string.find(word, '^I[%s]*')) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local count = 0\n  for sentence\
    \ in string.gmatch(S, \"([^%.!?]+)\") do\n    if string.find(sentence, \"^I\"\
    ) then\n      count = count + 1\n    end\n  end\n  return count\nend", "    return\
    \ select(2, S:gsub('^[Ii]', ''))\nend", "  return string.gsub(S,'^I%s+','')\n\
    end", "   local out = 0\n   local words = split(S, ' ')\n   for i = 1, #words\
    \ do\n      if words[i] == 'I' then\n         out = out + 1\n      end\n   end\n\
    \   return out\nend", "    local boredoms = 0\n    for w in S:gmatch(\"%S+\")\
    \ do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n      \
    \  end\n    end\n    return boredoms\nend\nassert(is_bored('The sky is blue. The\
    \ sun is shining. I love this weather') == 1)\nassert(is_bored('Hello world')\
    \ == 0)", "  local count = 0\n  local I = string.byte('I')\n  for i=1,#S do\n\
    \    if string.byte(S,i) == I then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local sentence = string.match(S, \"[^%?%!%.]+\")\n\
    \    local i = 1\n    local bored = 0\n    for word in string.gmatch(sentence,\
    \ \"%S+\") do\n        if word == \"I\" and i == 1 then\n            bored = bored\
    \ + 1\n        end\n        i = i + 1\n    end\n    return bored\nend", "\tlocal\
    \ temp = S:gsub(\"[!?.]\", function(w) return w .. \" \" end)\n\tlocal words =\
    \ {}\n\tfor w in temp:gmatch(\"%S+\") do\n\t\ttable.insert(words, w)\n\tend\n\t\
    local boredoms = 0\n\tfor i, w in ipairs(words) do\n\t\tif w == \"I\" then\n\t\
    \t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\treturn boredoms\nend", "    return\
    \ string.gsub(S, 'I', '')\nend", "    local sum = 0\n    for _, s in ipairs(string.split(S,\
    \ '.')) do\n        if s:match('^ I ') then\n            sum = sum + 1\n     \
    \   end\n    end\n    return sum\nend", "    -- your code here\n    return 0\n\
    end", "  local boredoms = 0\n  for word in string.gmatch(S, \"%w+\") do\n    if\
    \ word == \"I\" then\n      boredoms = boredoms + 1\n    end\n  end\n  return\
    \ boredoms\nend", "  -- iterate through the sentences.\n  local boredoms = 0\n\
    \  for sentence in S:gmatch('[^%.!%?]+') do\n    -- start with the count as 0.\n\
    \    local boredoms_in_sentence = 0\n    -- iterate through the words of a sentence.\n\
    \    for word in sentence:gmatch('%w+') do\n      -- increment the count if the\
    \ word is 'I'.\n      if word == 'I' then\n        boredoms_in_sentence = boredoms_in_sentence\
    \ + 1\n      end\n    end\n    -- if we count at least one 'I' in a sentence,\
    \ we've found a boredom.\n    if boredoms_in_sentence > 0 then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend", "  local result = 0\n\
    \  for word in S:gmatch(\"%a+\") do\n    if word == \"I\" then\n      result =\
    \ result + 1\n    end\n  end\n  return result\nend", "    local num_boredoms =\
    \ 0\n    -- Split on the delimiters.\n    local sentences = string.gmatch(S, '[^.!?]+')\n\
    \    for sentence in sentences do\n        -- Split on spaces.\n        local\
    \ words = string.gmatch(sentence, '%S+')\n        for word in words do\n     \
    \       if word == 'I' then\n                num_boredoms = num_boredoms + 1\n\
    \                break\n            end\n        end\n    end\n    return num_boredoms\n\
    end", "\t-- Don't forget to check for the empty string.\n\tif S == '' then\n\t\
    \treturn 0\n\tend\n\tlocal i = 0\n\tfor word in S:gmatch(\"%w+\") do\n\t\tif word\
    \ == 'I' then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn i\nend", "   local boredoms\
    \ = 0\n   local i = 1\n   local N = #S\n   while i <= N do\n      while i <= N\
    \ and S:sub(i,i) ~= 'I' do\n         i = i + 1\n      end\n      while i <= N\
    \ and S:sub(i,i) ~= '!' and S:sub(i,i) ~= '.' and S:sub(i,i) ~= '?' do\n     \
    \    i = i + 1\n      end\n      i = i + 1\n      boredoms = boredoms + 1\n  \
    \ end\n   return boredoms\nend", "    local count = 0\n    local pos = 1\n   \
    \ while pos <= #S do\n        local ch = S:sub(pos, pos)\n        if ch == 'I'\
    \ then\n            local sentence = S:sub(pos, S:find('%.[%?!]', pos))\n    \
    \        local words = sentence:split(' ')\n            if #words > 0 and words[1]\
    \ == 'I' then\n                count = count + 1\n            end\n          \
    \  pos = pos + #sentence\n        end\n        pos = pos + 1\n    end\n    return\
    \ count\nend", "    local pattern = 'I'\n    local count = 0\n    for word in\
    \ string.gmatch(S, pattern) do\n        count = count + 1\n    end\n    return\
    \ count\nend", "    if not S then return 0 end\n    local count = 0\n    local\
    \ i = 1\n    while i <= #S do\n        if S:sub(i, i+1) == 'I ' then\n       \
    \     count = count + 1\n        end\n        if S:sub(i, i) == '.' or S:sub(i,\
    \ i) == '?' or S:sub(i, i) == '!' then\n            i = i + 1\n        end\n \
    \       i = i + 1\n    end\n    return count\nend", "    local boredoms = 0\n\
    \    local new_str = ''\n    -- The while loop is used to check each sentence\
    \ one by one\n    while S:len() > 0 do\n        new_str = S:match('[^.!?]+') --\
    \ remove punctuation\n        -- if first word starts with I, then it's a boredom\n\
    \        if new_str:match('^[Ii] ') then\n            boredoms = boredoms + 1\n\
    \        end\n        S = S:sub(new_str:len() + 2) -- remove from original string\n\
    \    end\n    return boredoms\nend", "\treturn string.gsub(S, \"(%a)%s*I%s*(%a)\"\
    , \"%1 %2\")\nend", "  return S:lower():gsub('%?', '.'):gsub('!', '.'):gsub('^I\
    \ ', ''):gsub('\\n', ' '):gsub('%.', '\\n.'):gsub('^I ', ''):gsub('%.', '\\n.'):gsub('\\\
    n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I\
    \ ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I\
    \ ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.',\
    \ '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\\
    n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I\
    \ ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I\
    \ ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.',\
    \ '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\\
    n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I\
    \ ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I",
  "    local count = 0\n    for _, word in ipairs(S:split(' ')) do\n        if word:lower()\
    \ == 'i' then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  local count = 0\n  for line in S:gmatch(\"[^.!?]+\") do\n  \
    \  if line:match(\"^%s*I%s*\") then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  count = 0\n  for s in S:gmatch(\"[^%.!?]+\") do\n  \
    \  for word in s:gmatch(\"%S+\") do\n      if word == \"I\" then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend", "    -- TODO\n\
    \    num = 0\n    for word in string.gmatch(S, \"[^%.!?]+\") do\n        for i,\
    \ w in ipairs(word:split(\" \")) do\n            if w == \"I\" then\n        \
    \        num = num + 1\n            end\n        end\n    end\n    return num\n\
    end", "  local n = 0\n  local p = 0\n  while p < #S do\n    p = S:find('I', p)\n\
    \    if p == nil then break end\n    if p == 1 or S:sub(p-1, p-1) == '.' or S:sub(p-1,\
    \ p-1) == '?' or S:sub(p-1, p-1) == '!' then\n      n = n + 1\n    end\n    p\
    \ = p + 1\n  end\n  return n\nend", "\tlocal function first_word(s)\n\t\treturn\
    \ s:match(\"^(.-)%s\")\n\tend\n\tlocal sentences = string.split(S, \".\")\n\t\
    local boredoms = 0\n\tfor i = 1, #sentences do\n\t\tif first_word(sentences[i])\
    \ == \"I\" then\n\t\t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\treturn boredoms\n\
    end", "  -- Your code here\n  --%w is a shorthand pattern class that matches all\
    \ the letters\n  -- %W is the inverse of %w\n  -- so only 'I' will be matched,\
    \ then return the length of the table\n  return #S:gmatch(\"I\")\nend", "  S =\
    \ S:gsub('I[^!?.]+', function(s) return s:sub(2) end)\n  return S:gsub('I', ''):gsub('!%S+',\
    \ ''):gsub('%?%S+', ''):gsub('%.%S+', ''):gsub('.', ''):len()\nend", "  return\
    \ is_bored_as(S, 0)\nend", "  local boredoms = 0\n  local first_char_i = 0\n \
    \ local second_char_i = 0\n  while first_char_i <= #S do\n    second_char_i =\
    \ S:find(\"!\", first_char_i, true)\n    if not second_char_i then\n      second_char_i\
    \ = S:find(\".\", first_char_i, true)\n    end\n    if not second_char_i then\n\
    \      second_char_i = S:find(\"?\", first_char_i, true)\n    end\n    if not\
    \ second_char_i then\n      second_char_i = #S + 1\n    end\n    if S:sub(first_char_i,\
    \ first_char_i):upper() == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \    first_char_i = second_char_i + 1\n  end\n  return boredoms\nend", "  local\
    \ boredoms = 0\n  local words = split(S, '%s+')\n  local found_end = false\n \
    \ for i = 1, #words do\n    if not found_end then\n      if words[i] == 'I' then\n\
    \        boredoms = boredoms + 1\n      end\n      for j = 1, #words[i] do\n \
    \       if words[i]:sub(j, j) == '.' or words[i]:sub(j, j) == '?' or words[i]:sub(j,\
    \ j) == '!' then\n          found_end = true\n        end\n      end\n    else\n\
    \      if words[i] == 'I' then\n        boredoms = boredoms + 1\n        found_end\
    \ = false\n      end\n    end\n  end\n  return boredoms\nend", "  local boredoms\
    \ = 0\n  for sentence in S:gmatch('[^%.!?]+') do\n    local tokens = mylib.tokenize(sentence)\n\
    \    if #tokens > 0 and tokens[1]:lower() == 'i' then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend", "   local count = 0\n   for str\
    \ in string.gmatch(S, \"([^.!?]+)\") do\n      local s = string.match(str, \"\
    I%s\")\n      if s then\n         count = count + 1\n      end\n   end\n   return\
    \ count\nend", "    local boredoms = 0\n    local token = {}\n    for word in\
    \ string.gmatch(S, '%w+') do\n        table.insert(token, word)\n    end\n   \
    \ for i, v in ipairs(token) do\n        if v == 'I' then\n            boredoms\
    \ = boredoms + 1\n        end\n    end\n    return boredoms\nend", "   local count\
    \ = 0\n   local s = S .. '.'\n   local s_start = 1\n   local s_stop = nil\n  \
    \ repeat\n      s_stop = string.find(s, '[.?!]', s_start)\n      if s_stop ~=\
    \ nil then\n         local sentence = string.sub(s, s_start, s_stop-1)\n     \
    \    if string.find(sentence, '^I') ~= nil then\n            count = count + 1\n\
    \         end\n         s_start = s_stop + 1\n      end\n   until s_stop == nil\n\
    \   return count\nend", "  -- TODO: Implement the function\n  -- Hint: string.gmatch(),\
    \ string.find(), string.match()\n  local count = 0\n  local sentences = string.gmatch(S,\
    \ '[^%!%.%?]+')\n  for line in sentences do\n    if string.find(line, '^I') then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    -- CODE HERE\n\
    \    return nil\nend", "   local boredoms = 0\n   for sentence in string.gmatch(S,\
    \ '%S[^!.?]+[!.?]') do\n      -- A sentence is a boredom iff it starts with \"\
    I\"\n      if string.find(sentence, '^I') then\n         boredoms = boredoms +\
    \ 1\n      end\n   end\n   return boredoms\nend", "    if S == \"\" then\n   \
    \     return 0\n    end\n    local s, e = string.find(S, \"I\")\n    if s == nil\
    \ then\n        return 0\n    end\n    local delimiters = \"[%!%?%.]\"\n    local\
    \ ds, de = string.find(S, delimiters)\n    if ds == nil then\n        return 1\n\
    \    end\n    if ds > s then\n        return 1 + is_bored(string.sub(S, de + 1))\n\
    \    else\n        return is_bored(string.sub(S, e + 1))\n    end\nend", "\tlocal\
    \ sum = 0\n\tfor word in string.gmatch(S, '%w+') do\n\t\tif word == 'I' then\n\
    \t\t\tsum = sum + 1\n\t\tend\n\tend\n\treturn sum\nend", "  local n = 0\n  for\
    \ s in S:gmatch('[^!.?]+') do\n    local word = s:match('%S+')\n    if word ==\
    \ 'I' then\n      n = n + 1\n    end\n  end\n  return n\nend", "  local _, count\
    \ = string.gsub(S, 'I', 'I')\n  return count\nend", "  -- Start with 0 boredoms\n\
    \  local n = 0\n  -- Make the string lowercase\n  S = S:lower()\n  -- Remove leading\
    \ and trailing whitespace\n  S = S:gsub('^%s*', ''):gsub('%s*$', '')\n  -- Replace\
    \ any run of whitespace with a single space\n  S = S:gsub('%s+', ' ')\n  -- Split\
    \ the string into sentences\n  for s in S:gmatch('[^!.?]+') do\n    -- If the\
    \ sentence starts with 'i ' then we have a boredom\n    if s:sub(1, 2) == 'i '\
    \ then\n      n = n + 1\n    end\n  end\n  return n\nend", "    local count =\
    \ 0\n    for w in string.gmatch(S, '[^%s]+') do\n        if w == 'I' then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend", " \
    \   local sentences = split(S, '.')\n    local boredoms = 0\n    for _, sentence\
    \ in ipairs(sentences) do\n        local words = split(sentence, ' ')\n      \
    \  if words[1] == 'I' then\n            boredoms = boredoms + 1\n        end\n\
    \    end\n    return boredoms\nend", "    local i = 0\n    local b = 0\n    while\
    \ i < #S do\n        while i < #S and S:sub(i, i) ~= '.' and S:sub(i, i) ~= '?'\
    \ and S:sub(i, i) ~= '!' do\n            i = i + 1\n        end\n        i = i\
    \ + 1\n        local w, p = S:match('(%w+)(%W*)', i)\n        if w and p and w:lower()\
    \ == 'i' then\n            b = b + 1\n        end\n        i = i + #w + #p\n \
    \   end\n    return b\nend", "    local tokens = split(S, '[.?!]')\n    local\
    \ boredoms = 0\n    for _, token in ipairs(tokens) do\n        local words = split(token,\
    \ '%s+')\n        if words[1] == 'I' then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend", "    return S:gsub('I.-[!?.]',\
    \ ''):len()\nend", "  -- Split the string into sentences, then count the I's\n\
    \  local _, count = string.gsub(S, 'I', '')\n  return count\nend", "    local\
    \ count = 0\n    for sentence in string.gmatch(S, '[^.?!]+') do\n        if string.sub(sentence,1,1)\
    \ == 'I' then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nprint(is_bored('Hello world'))\nprint(is_bored('The sky is blue.\
    \ The sun is shining. I love this weather'))", "  -- Remove all delimiters\n \
    \ local str = string.gsub(S, '[.?!]', '')\n  -- Split the string into words and\
    \ remove the first one\n  local words = string.split(str, ' ')\n  local count\
    \ = 0\n  for _, v in ipairs(words) do\n    if v == 'I' then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    --\n    -- YOUR CODE GOES HERE\n\
    \    --\n    local pos = 1\n    local cnt = 0\n    local len = S:len()\n    for\
    \ i = 1, len do\n        if (S:sub(i, i) == '.' or S:sub(i, i) == '?' or S:sub(i,\
    \ i) == '!') then\n            if (S:sub(pos, pos + 1) == 'I ') then\n       \
    \         cnt = cnt + 1\n            end\n            pos = i + 1\n        end\n\
    \    end\n    return cnt\nend", "\treturn S:gsub('^I', ''):gsub('%.', ''):gsub('%?',\
    \ ''):gsub('!', ''):len()\nend", "    local words = split(S, \" \", true)\n  \
    \  local count = 0\n    for i, w in ipairs(words) do\n        if w == \"I\" and\
    \ i == 1 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "\tlocal boredoms = 0\n\tlocal i = 0\n\twhile true do\n\t\ti =\
    \ string.find(S, \"I\", i + 1)\n\t\tif i == nil then break end\n\t\tlocal start\
    \ = i\n\t\tlocal stop = i\n\t\twhile string.find(S, \"[.?!]\", stop + 1) == stop\
    \ + 1 do\n\t\t\tstop = stop + 1\n\t\tend\n\t\tlocal sent = string.sub(S, start,\
    \ stop)\n\t\tlocal len = string.len(sent)\n\t\tif len > 1 then\n\t\t\tif string.find(sent,\
    \ \"I%s+\") ~= nil or string.find(sent, \"I$\") ~= nil then\n\t\t\t\tboredoms\
    \ = boredoms + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn boredoms\nend", "    local\
    \ m = 0\n    for word in S:gmatch('%w+') do\n        if word == 'I' then\n   \
    \         m = m + 1\n        end\n    end\n    return m\nend", "  -- your code\
    \ goes here!\n  local count = 0\n  local index = 1\n  while index <= #S do\n \
    \   local index1 = string.find(S, \".\", index)\n    local index2 = string.find(S,\
    \ \"?\", index)\n    local index3 = string.find(S, \"!\", index)\n    local index4\
    \ = math.min(index1 or math.maxinteger, index2 or math.maxinteger, index3 or math.maxinteger)\n\
    \    local sub = string.sub(S, index, index4-1)\n    if string.find(sub, \"I\"\
    ) == 1 then\n      count = count + 1\n    end\n    index = index4 + 1\n  end\n\
    \  return count\nend", "  -- your code here\n  local boredoms = 0\n  local isword\
    \ = false\n  for i = 1, #S do\n    local c = S:sub(i, i)\n    if c == 'I' then\n\
    \      isword = true\n    elseif isword and c == ' ' then\n      isword = false\n\
    \    elseif not isword and c == 'I' then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend", "    local count = 0\n    -- write your code\
    \ here\n    return count\nend", "    if not S then return 0 end\n    local cnt\
    \ = 0\n    local t = string.split(S, {'.', '?', '!'})\n    for _, v in ipairs(t)\
    \ do\n        local t = string.split(v, ' ')\n        if t[1] == 'I' then\n  \
    \          cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "   local\
    \ count = 0\n   local i = 0\n   while i < #S do\n      i = i + 1\n      while\
    \ (i <= #S) and (S:sub(i, i) ~= '!') and (S:sub(i, i) ~= '.') and (S:sub(i, i)\
    \ ~= '?') do\n         i = i + 1\n      end\n      if i > #S then\n         break\n\
    \      end\n      local j = i - 1\n      while (j > 0) and (S:sub(j, j) ~= ' ')\
    \ do\n         j = j - 1\n      end\n      if (j > 0) and (S:sub(j, j) == ' ')\
    \ then\n         j = j + 1\n      end\n      if (j >= 1) and (S:sub(j, j + 1)\
    \ == 'I ') then\n         count = count + 1\n      end\n   end\n   return count\n\
    end", '  -- your code goes here']
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
