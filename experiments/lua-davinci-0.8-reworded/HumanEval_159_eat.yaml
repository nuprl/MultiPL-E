name: HumanEval_159_eat
language: lua
prompt: "-- You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
  -- you should return a table of [ total number of eaten carrots after your meals,\n\
  -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
  -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
  \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
  \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
  -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
  \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
  \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
  local function eat(number, need, remaining)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
  \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
  \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
  \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
  \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return\nend", "    -- write your code here\nend\nreturn eat", " \
    \ -- your code here\n  local total = number + need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  return {remaining >= need and number + need or number + remaining,\n\
    \          remaining >= need and remaining - need or 0}\nend", "  -- your code\
    \ here, return a table `{total, remaining}`\n  local total = 0\n  if number+need\
    \ > remaining then\n    total = remaining\n  else\n    total = number+need\n \
    \ end\n  return {total, remaining-total}\nend", "  -- Your code here\nend", " \
    \   -- write your code here\nend\nreturn eat", "  if number+need <= remaining\
    \ then\n    return { number+need, remaining-number-need }\n  else\n    return\
    \ { number+remaining, 0 }\n  end\nend", "    local meal = number + need\n    local\
    \ left = remaining - meal\n    if left >= 0 then\n        return {meal, left}\n\
    \    else\n        return {remaining, 0}\n    end\nend\nreturn eat", "  -- code\
    \ here\nend", "  return { (remaining >= need) and (number + need) or (number +\
    \ remaining), (remaining >= need) and (remaining - need) or 0 }\nend", "  -- your\
    \ code here\n  local n = number\n  if n + need > remaining then \n    n = remaining\n\
    \  else\n    n = n + need\n  end\n  return {n, remaining - n}\nend", "  local\
    \ full = number + need\n  if remaining < need then\n    return {full - need +\
    \ remaining, 0}\n  else\n    return {full, remaining - need}\n  end\nend", " \
    \ -- code here.\n  return {number + math.min(need, remaining), math.max(remaining\
    \ - need, 0)}\nend", "  if number > remaining then\n    return {remaining, 0}\n\
    \  elseif number + need > remaining then\n    return {number + remaining, 0}\n\
    \  else\n    return {number + need, remaining - (number + need)}\n  end\nend",
  "  return {number + math.min(need, remaining), math.max(remaining - need, 0)}\n\
    end\nreturn eat", "  if number + need <= remaining then\n    return { number +\
    \ need, remaining - number - need }\n  else\n    return { number + remaining,\
    \ 0 }\n  end\nend", "    return (number+need)<=remaining and {number+need,remaining-(number+need)}\
    \ or {remaining+number,0}\nend", "\tlocal eat = number\n\tif need < remaining\
    \ then\n\t\teat = eat + need\n\t\tremaining = remaining - need\n\telse\n\t\teat\
    \ = eat + remaining\n\t\tremaining = 0\n\tend\n\treturn {eat, remaining}\nend\n\
    return eat", "    -- your code here :)\n    if remaining >= need then\n      \
    \  return {need + number, remaining - need}\n    else\n        return {remaining\
    \ + number, 0}\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
