name: HumanEval_159_eat
language: lua
prompt: "-- You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
  -- you should return a table of [ total number of eaten carrots after your meals,\n\
  -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
  -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
  \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
  \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
  -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
  \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
  \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
  local function eat(number, need, remaining)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
  \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
  \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
  \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
  \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return\nend", "    -- write your code here\nend\nreturn eat", " \
    \ -- your code here\n  local total = number + need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  return {remaining >= need and number + need or number + remaining,\n\
    \          remaining >= need and remaining - need or 0}\nend", "  -- your code\
    \ here, return a table `{total, remaining}`\n  local total = 0\n  if number+need\
    \ > remaining then\n    total = remaining\n  else\n    total = number+need\n \
    \ end\n  return {total, remaining-total}\nend", "  -- Your code here\nend", " \
    \   -- write your code here\nend\nreturn eat", "  if number+need <= remaining\
    \ then\n    return { number+need, remaining-number-need }\n  else\n    return\
    \ { number+remaining, 0 }\n  end\nend", "    local meal = number + need\n    local\
    \ left = remaining - meal\n    if left >= 0 then\n        return {meal, left}\n\
    \    else\n        return {remaining, 0}\n    end\nend\nreturn eat", "  -- code\
    \ here\nend", "  return { (remaining >= need) and (number + need) or (number +\
    \ remaining), (remaining >= need) and (remaining - need) or 0 }\nend", "  -- your\
    \ code here\n  local n = number\n  if n + need > remaining then \n    n = remaining\n\
    \  else\n    n = n + need\n  end\n  return {n, remaining - n}\nend", "  local\
    \ full = number + need\n  if remaining < need then\n    return {full - need +\
    \ remaining, 0}\n  else\n    return {full, remaining - need}\n  end\nend", " \
    \ -- code here.\n  return {number + math.min(need, remaining), math.max(remaining\
    \ - need, 0)}\nend", "  if number > remaining then\n    return {remaining, 0}\n\
    \  elseif number + need > remaining then\n    return {number + remaining, 0}\n\
    \  else\n    return {number + need, remaining - (number + need)}\n  end\nend",
  "  return {number + math.min(need, remaining), math.max(remaining - need, 0)}\n\
    end\nreturn eat", "  if number + need <= remaining then\n    return { number +\
    \ need, remaining - number - need }\n  else\n    return { number + remaining,\
    \ 0 }\n  end\nend", "    return (number+need)<=remaining and {number+need,remaining-(number+need)}\
    \ or {remaining+number,0}\nend", "\tlocal eat = number\n\tif need < remaining\
    \ then\n\t\teat = eat + need\n\t\tremaining = remaining - need\n\telse\n\t\teat\
    \ = eat + remaining\n\t\tremaining = 0\n\tend\n\treturn {eat, remaining}\nend\n\
    return eat", "    -- your code here :)\n    if remaining >= need then\n      \
    \  return {need + number, remaining - need}\n    else\n        return {remaining\
    \ + number, 0}\n    end\nend", "  -- write code here...\nend", "  local carrots\
    \ = number + need\n  local carrots_left = remaining - need\n  if carrots_left\
    \ < 0 then carrots_left = 0 end\n  return {carrots, carrots_left}\nend", "   \
    \ local total = number + need\n    if total < remaining then\n        return {total,\
    \ remaining - total}\n    else\n        return {total, 0}\n    end\nend", "  \
    \  local food = number + need\n    local carrot = remaining - need\n    if food\
    \ > remaining then\n        return {remaining, 0}\n    else\n        return {food,\
    \ carrot}\n    end\nend", "    -- put your code here\n    return {number+need,remaining-need}\n\
    end", "  -- Write your code here\n  local eatenCarrots = 0\n  if (number < 0 or\
    \ number > 1000) then\n    print(\"number is not in the range\")\n  elseif (need\
    \ < 0 or need > 1000) then\n    print(\"need is not in the range\")\n  elseif\
    \ (remaining < 0 or remaining > 1000) then\n    print(\"remaining is not in the\
    \ range\")\n  else\n    if (remaining >= need) then\n      eatenCarrots = number\
    \ + need\n      remaining = remaining - need\n    else\n      eatenCarrots = number\
    \ + remaining\n      remaining = 0\n    end\n  end\n  return {eatenCarrots, remaining}\n\
    end", "  return {(remaining < need) and (remaining + number) or (need + number),\n\
    \          remaining - need > 0 and remaining - need or 0}\nend", "  -- your code\
    \ here\n  local eaten, left = 0, 0\n  eaten = number + need\n  left = remaining\
    \ - need\n  if left > 0 then\n    return {eaten, left}\n  else\n    return {eaten,\
    \ 0}\n  end\nend", "  \nend", "\nend", "  \n  return nil\nend", "  -- your code\
    \ goes here\n  return {number + need, remaining - need}\nend", "  -- Your code\
    \ here\nend", "  -- TODO: return the number of carrots you will eat after your\
    \ meals\n  -- and the number of carrots left after your meals\nend", "\nend",
  "  -- Good luck :)\nend", "    if remaining <= 0 then\n        return {number, 0}\n\
    \    end\n    if need <= 0 then\n        return {number, remaining}\n    end\n\
    \    if number + need > 1000 then\n        return {1000, remaining - (1000 - number)}\n\
    \    end\n    if number + need <= 1000 and remaining - need >= 0 then\n      \
    \  return {number + need, remaining - need}\n    end\n    if number + need <=\
    \ 1000 and remaining - need < 0 then\n        return {number + remaining, 0}\n\
    \    end\nend", "  local eaten = number + need\n  local left = remaining - need\n\
    \  if left < 0 then\n    left = 0\n  end\n  return {eaten, left}\nend", "  --\
    \ Your code here:\nend\nreturn eat", "  return {math.min(number + need, remaining)\
    \ + number, math.max(remaining - need, 0)}\nend", "  return {math.min(number +\
    \ need, remaining), math.max(remaining - need, 0)}\nend", "    -- Your code here\n\
    end", "    if (remaining < number) then\n        return { number, 0 }\n    end\n\
    \    if (remaining < need) then\n        return { remaining + number, 0 }\n  \
    \  end\n    return { number + need, remaining - need }\nend", "  if remaining\
    \ >= need then\n    return {number + need, remaining - need}\n  else\n    return\
    \ {number + remaining, 0}\n  end\nend", "  if remaining >= need then\n    return\
    \ {number + need, remaining - need}\n  else\n    return {number + remaining, 0}\n\
    \  end\nend", "  return { math.min(number + need, remaining), math.max(remaining\
    \ - need, 0) }\nend", "  -- the implementation\nend", "  local ans = need - number\n\
    \  if ans > remaining then\n    return {number + remaining, 0}\n  else\n    return\
    \ {number + ans, remaining - ans}\n  end\nend", "  local eaten = number + need\n\
    \  local left = remaining - need\n  return { eaten, left >= 0 and left or 0 }\n\
    end", "  local function is_hungry(eaten, need, remaining)\n    return eaten <\
    \ need and remaining > 0\n  end", "  local eaten = number + need;\n  local remaining\
    \ = remaining - need;\n  if remaining < 0 then\n    remaining = 0;\n  end\n  return\
    \ {eaten, remaining};\nend", "    local total = number + need\n    if total >\
    \ remaining then\n        total = remaining\n    end\n    return { total, remaining\
    \ - total }\nend", end, "    if number > 1000 or need > 1000 or remaining > 1000\
    \ then\n        error(\"0 <= number and need and remaining <= 1000\")\n    end\n\
    \    if number < 0 or need < 0 or remaining < 0 then\n        error(\"0 <= number\
    \ and need and remaining <= 1000\")\n    end\n    local lst = {}\n    if need\
    \ - number > remaining then\n        lst[1] = number + remaining\n        lst[2]\
    \ = 0\n    else\n        lst[1] = number + need\n        lst[2] = remaining -\
    \ need\n    end\n    return lst\nend\nprint(eat(5, 6, 10))\nprint(eat(4, 8, 9))\n\
    print(eat(1, 10, 10))\nprint(eat(2, 11, 5))", "  if need < remaining then\n  \
    \  return {number + need, remaining - need}\n  else\n    return {number + remaining,\
    \ 0}\n  end\nend", "    return {math.min(number + need, remaining + number), math.max(remaining\
    \ - (number + need), 0)}\nend", "    -- Write your code here ...\nend", "  --\
    \ your code here\nend", "    -- your code here\nend", "  local eaten = number\
    \ + need\n  local left = 0\n  if remaining < need then\n    eaten = number + remaining\n\
    \    left = 0\n  else\n    left = remaining - need\n  end\n  return {eaten, left}\n\
    end", "    local total = number + need\n    if total <= remaining then\n     \
    \   return {total, remaining - total}\n    else\n        return {remaining + number,\
    \ 0}\n    end\nend", "  local total, left = number + need, remaining - need\n\
    \  if left >= 0 then\n    return {total, left}\n  else\n    return {total - left,\
    \ 0}\n  end\nend", "  local i = number\n  local a = 0\n  while i < (number + need)\
    \ do\n    if remaining > 0 then\n      i = i + 1\n      remaining = remaining\
    \ - 1\n      a = i\n    else\n      i = number + need\n      a = i\n    end\n\
    \  end\n  return {a, remaining}\nend", "  if number >= need then\n    return {number,\
    \ remaining}\n  elseif number + remaining < need then\n    return {number + remaining,\
    \ 0}\n  else\n    return {number + need, remaining - need}\n  end\nend", "   \
    \ if remaining < need then\n        return {number+remaining, 0}\n    else\n \
    \       return {number+need, remaining-need}\n    end\nend", "  -- your code is\
    \ here\nend", "  -- Write your code here :)\n  local total_carrots = number +\
    \ need\n  local remaining_carrots = remaining - need\n  if remaining_carrots <=\
    \ 0 then\n    return {total_carrots, 0}\n  else\n    return {total_carrots, remaining_carrots}\n\
    \  end\nend", "  local total = number + need\n  local left = remaining - need\n\
    \  return left < 0 and {total, 0} or {total, left}\nend", "  local toEat = remaining\n\
    \  if need > remaining then\n    toEat = remaining\n  else\n    toEat = need\n\
    \  end\n  return { number + toEat, remaining - toEat }\nend", "    local total\
    \ = number + need\n    local left = remaining - need\n    if (total > remaining)\
    \ then\n        return {total - need, 0}\n    else\n        return {total, left}\n\
    \    end\nend", "    -- Your code here\nend", "  -- your code here\n  if remaining\
    \ < need then\n    return {number + remaining, 0}\n  else\n    return {number\
    \ + need, remaining - need}\n  end\nend", "  local rest = remaining - (number\
    \ + need)\n  if rest < 0 then\n    need = need + rest\n  end\n  return { number\
    \ + need, math.max(rest, 0) }\nend", "  -- your code\n  local total = number +\
    \ need\n  if total <= remaining then\n    return {total, remaining - total}\n\
    \  else\n    return {remaining + number, 0}\n  end\nend", "  local rest = need\
    \ - number\n  if remaining >= rest then\n    return {number + rest, remaining\
    \ - rest}\n  else\n    return {number + remaining, 0}\n  end\nend", "\tlocal answer\
    \ = {}\n\tif number + need > remaining then\n\t\ttable.insert(answer,remaining)\n\
    \t\ttable.insert(answer,0)\n\telse\n\t\ttable.insert(answer,number + need)\n\t\
    \ttable.insert(answer,remaining - (number + need))\n\tend\n\treturn answer\nend",
  "\tlocal total = number + need\n\tlocal left = remaining - need\n\tif left < 0 then\n\
    \t\ttotal = number + remaining\n\t\tleft = 0\n\tend\n\treturn {total, left}\n\
    end", "    local eaten = number + need\n    local left = remaining - need\n  \
    \  if remaining < need then\n        eaten = eaten - need + remaining\n      \
    \  left = 0\n    end\n    return {eaten, left}\nend", "  return nil\nend", " \
    \ -- your code here\nend", "\tif(number + need > remaining) then\n\t\treturn {remaining,\
    \ 0}\n\telse\n\t\treturn {number + need, remaining - number - need}\n\tend\nend",
  "  -- Your code here.\nend", "  -- your code here\nend", "\nend", "    if number\
    \ + need <= remaining then\n        return { number + need, remaining - number\
    \ - need }\n    else\n        return { number + remaining, 0 }\n    end\nend",
  "  return { 0, 0 }\nend", "  if remaining < need then\n    return {number+remaining,\
    \ 0}\n  else\n    return {number+need, remaining-need}\n  end\nend\nreturn eat",
  "  -- your code is here\nend", "  if (number + need) < remaining then\n    return\
    \ {number + need, remaining - (number + need)}\n  else\n    return {remaining\
    \ + number, 0}\n  end\nend", "  if (number + need) <= remaining then\n    return\
    \ {number + need, remaining - need}\n  else\n    return {number + remaining, 0}\n\
    \  end\nend", "  -- TODO\nend", "  -- your code here\nend", "  if need > remaining\
    \ then\n    return { number + remaining, 0 }\n  else\n    return { number + need,\
    \ remaining - need }\n  end\nend", "\tlocal carrots = number + need\n\tlocal carrots_remaining\
    \ = remaining - need\n\tif carrots_remaining < 0 then\n\t\tcarrots_remaining =\
    \ 0\n\tend\n\treturn {carrots, carrots_remaining}\nend", "  return { number +\
    \ math.min(need, remaining), math.max(remaining - need, 0) }\nend", "  local output\
    \ = {}\n  local eaten = math.min(number + need, remaining)\n  output[1] = eaten\n\
    \  output[2] = remaining - eaten\n  return output\nend", "  \nend", "  if remaining\
    \ >= need - number then\n    return {number + need, remaining - (need - number)}\n\
    \  else\n    return {number + remaining, 0}\n  end\nend", "  local total = number\
    \ + need\n  local surplus = total - remaining\n  if surplus > 0 then\n    return\
    \ {number + remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  local eaten = number + need\n  local _remaining = remaining - need\n\
    \  if _remaining < 0 then _remaining = 0 end\n  return {eaten, _remaining}\nend",
  "  -- TODO: finish this function\nend", "\t-- your code here\nend", "  -- your code\
    \ here\nend", "    local eated = math.min(number + need, remaining)\n    return\
    \ {eated, remaining - eated}\nend", end, "  -- your code is here\nend", "    --\
    \ Write your code here\n    return 0\nend", "    if (remaining > 0) then\n   \
    \     if (remaining >= need) then\n            number = number + need\n      \
    \      remaining = remaining - need\n        else\n            number = number\
    \ + remaining\n            remaining = 0\n        end\n    end\n    return {number,\
    \ remaining}\nend", "  local total, total_remaining = number + need, remaining\
    \ - need\n  return total_remaining > 0 and {total, total_remaining} or {total,\
    \ 0}\nend", "\nend", "  -- your code here\nend", "\t-- body\nend", "    if need\
    \ - remaining >= number then\n        return {need + number, 0}\n    else\n  \
    \      return {remaining + number, need - remaining}\n    end\nend", "  local\
    \ total = number + need\n  if total > remaining then\n    need = remaining - number\n\
    \  end\n  return {number + need, remaining - (number + need)}\nend", "\t-- your\
    \ code\nend", "    -- fill here\n    --pass\nend", "\nend", "  -- your code here\n\
    end", "end\nreturn eat", "  local left = remaining - (number + need)\n  if left\
    \ >= 0 then\n    return { number + need, left }\n  else\n    return { number +\
    \ remaining, 0 }\n  end\nend", '    -- TODO: write your code here', "\nend", " \
    \ -- write your code here\n  local result = {number + need, remaining - need}\n\
    \  if result[2] <= 0 then result[2] = 0 end\n  return result\nend", "    -- your\
    \ code here\nend", "    -- your code here\nend", end, "  return {\n    number\
    \ + math.min(need, remaining),\n    math.max(remaining - need, 0)\n  }\nend",
  "  return {math.min(number + need, remaining), math.max(remaining - need, 0)}\n\
    end", "    local eaten = 0\n    if number + need <= remaining then\n        eaten\
    \ = number + need\n    else\n        eaten = remaining\n    end\n    local left\
    \ = remaining - eaten\n    return {eaten, left}\nend", "    local total = number\
    \ + need\n    if remaining < need then\n        return {total, 0}\n    else\n\
    \        return {total, remaining - need}\n    end\nend", "  local result = {}\n\
    \  local existe = remaining - number\n  local eaten = number + need\n  local restant\
    \ = existe - need\n  \n  if existe >= need then\n    result = {eaten,restant}\n\
    \  else\n    result = {eaten, 0}\n  end\n  \n  return result\nend", "    -- your\
    \ code here\nend", end, "  local num1 = number + need\n  local num2 = 0\n  if\
    \ num1 > remaining then\n    num2 = num1 - remaining\n    num1 = remaining\n \
    \ end\n  return {num1, num2}\nend", "  if remaining > need then\n    return {number\
    \ + need, remaining - need}\n  else\n    return {number + remaining, 0}\n  end\n\
    end", "  -- your code here\nend", "    -- your code here\n    local total = number\
    \ + need\n    if total > remaining then\n        return {remaining, 0}\n    else\n\
    \        return {total, remaining - total}\n    end\nend", "  -- your code here\n\
    end", "  \nend", "    -- write your code here\n    local count = number + need\n\
    \    if count < remaining then\n        return { count, remaining - count }\n\
    \    else\n        return { count, 0 }\n    end\nend", "\tlocal sum = number +\
    \ need\n\tif remaining < sum then\n\t\tsum = remaining\n\tend\n\treturn {sum,\
    \ remaining - sum}\nend", "  if number + need > remaining then\n    return { number\
    \ + remaining, 0 }\n  else\n    return { number + need, remaining - need }\n \
    \ end\nend", "  \nend", "  return {number + need, remaining - need}\nend", " \
    \ local total = number + need\n  local result = {}\n  if remaining < need then\n\
    \    need = remaining\n    remaining = 0\n  else\n    remaining = remaining -\
    \ need\n  end\n  table.insert(result, total)\n  table.insert(result, remaining)\n\
    \  return result\nend", "  local left = remaining - (number + need)\n  if left\
    \ < 0 then left = 0 end\n  return { number + need, left }\nend", "  if number\
    \ < 0 or number > 1000 or need < 0 or need > 1000 or remaining < 0 or remaining\
    \ > 1000 then\n    return nil\n  end\n  return remaining >= need and {number +\
    \ need, remaining - need} or {number + remaining, 0}\nend", "  -- your code is\
    \ here ... enjoy!\nend\n```", "    local all = number + remaining\n    local now\
    \ = all - need\n    if now < 0 then\n        return { all, 0 }\n    else\n   \
    \     return { all, now }\n    end\nend", "  -- Your code here\nend", "    local\
    \ eaten, left\n    if number + need > remaining then\n        eaten = remaining\n\
    \        left = 0\n    else\n        eaten = number + need\n        left = remaining\
    \ - (number + need)\n    end\n    return {eaten, left}\nend", "  -- input validation\n\
    \  if type(number) ~= \"number\" or number % 1 ~= 0 or number < 0 or number >\
    \ 1000 then\n    return nil\n  end\n  if type(need) ~= \"number\" or need % 1\
    \ ~= 0 or need < 0 or need > 1000 then\n    return nil\n  end\n  if type(remaining)\
    \ ~= \"number\" or remaining % 1 ~= 0 or remaining < 0 or remaining > 1000 then\n\
    \    return nil\n  end\n  -- main code\n  local r1 = number + need\n  local r2\
    \ = 0\n  if r1 > remaining then\n    r1 = remaining\n    r2 = 0\n  else\n    r2\
    \ = remaining - r1\n  end\n  return {r1, r2}\nend", "    if need < remaining then\n\
    \        return { number + need, remaining - need }\n    else\n        return\
    \ { number + remaining, 0 }\n    end\nend", "end\nreturn eat", "  if (number +\
    \ need) <= remaining then\n    return {number + need, remaining - (number + need)}\n\
    \  else\n    return {number + remaining, 0}\n  end\nend", "\t-- your code here\n\
    end", "  local a = remaining - (need - number)\n  local b = (need - number) +\
    \ number\n  if a >= 0 then\n    return {b, a}\n  else\n    return {remaining +\
    \ number, 0}\n  end\nend", "    return {number+remaining, 0}\nend", "  \nend",
  "  \n  local x = remaining - need\n  if x < 0 then\n    return {number + remaining,\
    \ 0}\n  else\n    return {number + need, x}\n  end\nend", "  -- write your code\
    \ here\n  -- make sure the returning value is a table.\n  return -- returning\
    \ value\nend", "    if need > remaining then\n        return {number + remaining,\
    \ 0}\n    else\n        return {number + need, remaining - need}\n    end\nend",
  "  -- your code\nend", "    -- your code here\nend", "    local answer = {}\n  \
    \  if number + need > remaining then\n        return {remaining, 0}\n    else\n\
    \        return {number + need, remaining - (number + need)}\n    end\nend", " \
    \ return (number + need >= remaining) and {number + remaining, 0} or {number +\
    \ need, remaining - need}\nend", "  -- Code here\n  return {number + math.min(need,\
    \ remaining), math.max(remaining - need, 0)}\nend", "  return {remaining >= need\
    \ and number + need or number + remaining,\n   remaining >= need and remaining\
    \ - need or 0}\nend", "    if remaining < number + need then\n        return {\
    \ remaining, 0 }\n    else\n        return { number + need, remaining - number\
    \ - need }\n    end\nend", "    return {need + number, remaining - need}\nend",
  "  if number > 1000 or need > 1000 or remaining > 1000 then\n    return 0\n  end\n\
    \  if number < 0 or need < 0 or remaining < 0 then\n    return 0\n  end\n  local\
    \ function eat(number, need, remaining)\n    if need > remaining then\n      return\
    \ {number + remaining, 0}\n    else\n      return {number + need, remaining -\
    \ need}\n    end\n  end\n  return eat(number, need, remaining)\nend", "    --\
    \ variables\n    local carrots_eaten = 0\n    local carrots_remaining = 0\n  \
    \  local table = {}\n    -- code\n    carrots_eaten = number + need\n    carrots_remaining\
    \ = remaining - need\n    if carrots_remaining <= 0 then\n        carrots_remaining\
    \ = 0\n    end\n    table = {carrots_eaten, carrots_remaining}\n    return table\n\
    end\nreturn eat", "  \nend", "  local left = remaining - (number + need)\n  if\
    \ left >= 0 then\n    return {number + need, left}\n  else\n    return {number\
    \ + remaining, 0}\n  end\nend", "    -- write your code here\n    local result\
    \ = { number + need, remaining - need }\n    if result[2] < 0 then\n        result[1]\
    \ = result[1] + result[2]\n        result[2] = 0\n    end\n    return result\n\
    end", "    if remaining >= number + need then\n        return {number + need,\
    \ remaining - (number + need)}\n    else\n        return {remaining + number,\
    \ 0}\n    end\nend", "  -- write your code here\n  return {number + need, remaining\
    \ - need}\nend", "  if (remaining < need) then\n    return {number + remaining,\
    \ 0}\n  else\n    return {number + need, remaining - need}\n  end\nend", "   \
    \ local remaining = remaining - need\n    if remaining < 0 then\n        remaining\
    \ = 0\n    end\n    return { number + need, remaining }\nend", "  local meal =\
    \ number + need\n  local carrot = remaining - meal\n  local arr = {}\n  if carrot\
    \ >= 0 then\n    arr[1] = meal\n    arr[2] = carrot\n  else\n    arr[1] = remaining\n\
    \    arr[2] = 0\n  end\n  return arr\nend", "\tif number + need <= remaining then\n\
    \t\treturn {number + need, remaining - number - need}\n\telse\n\t\treturn {number\
    \ + remaining, 0}\n\tend\nend", "  -- Your code here!\n  return { 0, 0 }\nend",
  end, "  -- your code here\n  local total = number + need", "  local total = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \  end\n  return {total, left}\nend", "\nend", "\nend", "  -- your code goes here\n\
    \  local left = remaining - need + number;\n  if left < 0 then return {number\
    \ + remaining, 0} end\n  return {number + need, left}\nend", "    return {math.min(number\
    \ + need, remaining), math.max(remaining - need, 0)}\nend", "  --TODO: implement\n\
    end", "  local n = number + need\n  local r = n > remaining and 0 or remaining\
    \ - n\n  return {n, r}\nend", "  -- your code here\n  local n = remaining - need\n\
    \  if n >= 0 then\n    return {number + need, n}\n  else\n    return {number +\
    \ remaining, 0}\n  end\nend", "    local _,_,result_eat,result_remaining = string.find(tostring(math.min(need,remaining)+number),\
    \ \"(%d+)(%d*)\")\n    return {tonumber(result_eat),tonumber(result_remaining)}\n\
    end\nreturn eat", "    -- your code here\n    if need <= remaining then\n    \
    \    return {number + need, remaining - need}\n    else\n        return {number\
    \ + remaining, 0}\n    end\nend", "  return {need + number, remaining - need}\n\
    end", "\tif number+need < remaining then\n\t\treturn {number+need, remaining-number-need}\n\
    \telseif number+need == remaining then\n\t\treturn {number+need, 0}\n\telse\n\t\
    \treturn {number+remaining, 0}\n\tend\nend\nreturn eat", "  local eat = (number\
    \ + need) - remaining\n  if eat < 0 then\n    eat = 0\n  end\n  return {number\
    \ + need, eat}\nend", "  return nil\nend", "  -- Write your code here.\nend",
  "  if remaining < (number + need) then\n    return number + remaining, 0\n  else\n\
    \    return number + need, remaining - (number + need)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
