language: lua
name: HumanEval_98_count_upper
results:
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i=1, string.len(s) do\n        if s:sub(i,i):find('[AEIOU]')\
    \ and i % 2 == 0 then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoumkp7xv.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpoumkp7xv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n   local\
    \ i = 0\n   for c in s:gmatch('.') do\n      if c:match('[AEIOU]') and i % 2 ==\
    \ 0 then\n         i = i + 1\n      end\n   end\n   return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplybf2zeb.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplybf2zeb.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i=1, #s do\n        local char = s:sub(i, i)\n        if\
    \ (i % 2 == 0) and (char == char:upper()) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqha72zu9.lua:25:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpqha72zu9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ n = 0\n    for i = 1, #s, 2 do\n        if s:sub(i, i):match '%u' then\n   \
    \         n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthsk_pmk.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpthsk_pmk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ i = 0\n    local count = 0\n    for c in s:gmatch\".\" do\n        if i % 2\
    \ == 0 and c:find(\"[AEIOU]\") then\n            count = count + 1\n        end\n\
    \        i = i + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ result = 0\n    for i=1,string.len(s) do\n        if s:sub(i,i)==string.upper(s:sub(i,i))\
    \ and (i%2)==0 then\n            result = result + 1\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfn59vjn.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpcfn59vjn.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ uppers = 0\n    for i, v in ipairs(s) do\n        if is_upper(v) and i % 2 ==\
    \ 0 then\n            uppers = uppers + 1\n        end\n    end\n    return uppers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpezaubkww.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpezaubkww.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ n = 0\n    for i = 1, #s, 2 do\n        if s:find('[AEIOU]', i, true) then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hi2lf28.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5hi2lf28.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb7_klll.lua:16:\
    \ expected: 1, actual: -1\nstack traceback:\n\t/tmp/tmpvb7_klll.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ char_count = 0\n  for i = 1, #s do\n    if s:sub(i, i):match('[AEIOU]') and\
    \ (i % 2 == 0) then\n      char_count = char_count + 1\n    end\n  end\n  return\
    \ char_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvycw4fi.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdvycw4fi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n   return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpife2kvxh.lua:16:\
    \ expected: 1, actual: -1\nstack traceback:\n\t/tmp/tmpife2kvxh.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan22m2lf.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpan22m2lf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):upper() ==\
    \ s:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnlr0p35.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpjnlr0p35.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ function is_upper(s)\n        return s == s:upper()\n    end\n    local function\
    \ is_vowel(s)\n        return string.find('aeiou', s)\n    end\n    local cnt\
    \ = 0\n    for i = 1, #s do\n        if (i % 2) == 0 and is_upper(s:sub(i, i))\
    \ and is_vowel(s:sub(i, i)) then\n            cnt = cnt + 1\n        end\n   \
    \ end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpce3kr_14.lua:28:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpce3kr_14.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqlau_6s.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzqlau_6s.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ function not_upper(s)\n        return not s:find('%u')\n    end\n    return\
    \ not_upper:pred() ^ s:gmatch('%u')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6c7rgsa.lua:13:\
    \ attempt to index a function value (local 'not_upper')\nstack traceback:\n\t\
    /tmp/tmpo6c7rgsa.lua:13: in local 'candidate'\n\t/tmp/tmpo6c7rgsa.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ n = 0\n    for i = 1, #s, 2 do\n        if s:sub(i, i):match('^[AEIOU]$') then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23y2xl4j.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp23y2xl4j.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and is_upper(s, i)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgsbac6u.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmprgsbac6u.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprgsbac6u.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ cnt = 0\n  for k,v in ipairs(s:gmatch('%a')) do\n    if v:find('[AEIOU]') and\
    \ k % 2 == 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ i, n = 0, 0\n    for c in s:gmatch'%a' do\n        if math.fmod(i, 2) == 0 and\
    \ c:upper() == c then\n            n = n + 1\n        end\n        i = i + 1\n\
    \    end\n    return n\nend\nassert(count_upper('aBCdEf') == 1)\nassert(count_upper('abcdefg')\
    \ == 0)\nassert(count_upper('dBBE') == 0)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpjfj6u2mk.lua:19: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpjfj6u2mk.lua:19: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i=1,#s do\n        if (s:sub(i,i):match(\"[AEIOU]\") and\
    \ i%2 == 0) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kz1yzf0.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6kz1yzf0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s, i) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3b27mss.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpz3b27mss.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpz3b27mss.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:match(\"^%u\") then\n   \
    \   n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyu9xyj3.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqyu9xyj3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  -- TODO:\
    \ implement the method\n  -- Please rename the variable s\n  local uppers = 0\n\
    \  for i = 2, #s, 2 do\n    if string.match(s:sub(i, i), \"[AEIOU]\") then\n \
    \     uppers = uppers + 1\n    end\n  end\n  return uppers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprg7nfbou.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprg7nfbou.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ c = 0\n    for i=1,#s,2 do\n        local letter = s:sub(i,i)\n        if is_upper(letter)\
    \ and is_vowel(letter) then\n            c = c + 1\n        end\n    end\n   \
    \ return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9bq4a6w2.lua:13:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp9bq4a6w2.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp9bq4a6w2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, s:len() do\n        local c = s:sub(i, i)\n      \
    \  if i % 2 == 0 and c:match('[AEIOU]') then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma3m1g76.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpma3m1g76.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if is_vowel(s:sub(i, i)) and i % 2\
    \ == 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdziekhxz.lua:12:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpdziekhxz.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdziekhxz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ n = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if is_upper(c) and\
    \ is_even(i) then\n      n = n + 1\n    end\n  end\n  return n\nend\nassert(count_upper('aBCdEf')\
    \ == 1)\nassert(count_upper('abcdefg') == 0)\nassert(count_upper('dBBE') == 0)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmphwkd73tf.lua:13: attempt to call a nil value (global 'is_upper')\n\
    stack traceback:\n\t/tmp/tmphwkd73tf.lua:13: in local 'count_upper'\n\t/tmp/tmphwkd73tf.lua:19:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ #s:gsub(\"[aeiou]\", \"\"):gsub(\"[AEIOU]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu78u4fm0.lua:16:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpu78u4fm0.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ #s:gsub('([AEIOU])([^AEIOU])', '%2'):gsub('(.[AEIOU])', '%1')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8njlc6m.lua:16:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmph8njlc6m.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  if not\
    \ is_string(s) then\n    return nil, 'incorrect argument type'\n  end\n  local\
    \ count = 0\n  for i = 1, #s, 2 do\n    if s:sub(i, i):find('%u') then\n     \
    \ count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcds71nsq.lua:10:\
    \ attempt to call a nil value (global 'is_string')\nstack traceback:\n\t/tmp/tmpcds71nsq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpcds71nsq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i=1,#s do\n        if (i % 2 == 0) and s:sub(i,i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputuk3pqb.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmputuk3pqb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ count = 0\n\tfor i = 1,#s do\n\t\tif i % 2 == 0 and s:sub(i,i):match('[AEIOU]')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr10zrl88.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpr10zrl88.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ n = 0\n  local i = 1\n  while i <= #s do\n    local c = s:sub(i, i)\n    if\
    \ is_vowel(c) and c == c:upper() then\n      n = n + 1\n    end\n    i = i + 2\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjomewuv9.lua:14:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpjomewuv9.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpjomewuv9.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ vowels = \"AEIOU\"\n    local even_vowels = 0\n    for i = 1, s:len() do\n \
    \       local c = s:sub(i, i)\n        if i % 2 == 0 and vowels:find(c) then\n\
    \            even_vowels = even_vowels + 1\n        end\n    end\n    return even_vowels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ahhu_dn.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3ahhu_dn.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ c = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      c = c + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85lxrasm.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp85lxrasm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ vowels = {a = true, e = true, i = true, o = true, u = true}\n    local count\
    \ = 0\n    for i = 1, #s, 2 do\n        if vowels[s:sub(i, i):lower()] then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bbncwha.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4bbncwha.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, s:len() do\n        local c = s:sub(i, i)\n      \
    \  if is_upper(c) and is_even(i) then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjlr1id1i.lua:13:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpjlr1id1i.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjlr1id1i.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i=1,#s do\n        if string.find(\"AEIOU\", string.sub(s,\
    \ i, i), 1, true) ~= nil and i % 2 == 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4urm96pf.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4urm96pf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ uppers = 'AEIOU'\n  local num_uppers = 0\n  for i=1, #s do\n    if uppers:find(s:sub(i,i))\
    \ then\n      if math.fmod(i, 2) == 0 then\n        num_uppers = num_uppers +\
    \ 1\n      end\n    end\n  end\n  return num_uppers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcocd7pqb.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpcocd7pqb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptvlvv82.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpptvlvv82.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  s = s:lower()\n\
    \  local c = 0\n  for i = 2, #s, 2 do\n    if s:sub(i, i) == 'a' or s:sub(i, i)\
    \ == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n\
    \      c = c + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzb2_too.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzzb2_too.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    local vowel_set = {['A'] = true, ['E'] = true, ['I'] = true,\
    \ ['O'] = true, ['U'] = true}\n    for i = 1, #s do\n        if i % 2 == 0 and\
    \ vowel_set[s:sub(i, i)] then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a5rf_nu.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0a5rf_nu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ num_upper = 0\n  for i=1, #s do\n    if i % 2 == 0 and (s:sub(i,i) == 'A' or\
    \ s:sub(i,i) == 'E' or s:sub(i,i) == 'I' or s:sub(i,i) == 'O' or s:sub(i,i) ==\
    \ 'U') then\n      num_upper = num_upper + 1\n    end\n  end\n  return num_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6x67vi5y.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6x67vi5y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    --\
    \ body\n    local vowel = \"AEIOU\"\n    local count = 0\n    for i=1,#s do\n\
    \        if i%2 == 0 and vowel:find(s:sub(i,i)) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu5yps4o.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphu5yps4o.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ num = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            num = num + 1\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgnws9v5.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxgnws9v5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ even = string.gmatch(s, \"%a\")\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local count = 0\n    for l in even do\n        if l == string.upper(l) then\n\
    \            for i, v in ipairs(vowels) do\n                if l == v then\n \
    \                   count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthxonkj2.lua:28:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpthxonkj2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ n = 0\n    for i = 1, #s, 2 do\n        if 'AEIOU'[s:sub(i, i)] then\n     \
    \       n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxlilt7az.lua:12: ''then'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23y2xl4j.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp23y2xl4j.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n   local\
    \ n = 0\n   for i = 1, #s do\n      if i % 2 == 0 and is_upper(s, i) then\n  \
    \       n = n + 1\n      end\n   end\n   return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppdxoy22z.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmppdxoy22z.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmppdxoy22z.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ s:gsub('[AEIOU]', ''):len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlbd5ztu.lua:16:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmphlbd5ztu.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ cnt = 0\n  s:gsub(\".\", function(c)\n    if c:match(\"[AEIOU]\") and #c % 2\
    \ == 0 then\n      cnt = cnt + 1\n    end\n  end)\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_gjjjm1.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpw_gjjjm1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ cnt = 0\n\tlocal v = { a = true, e = true, i = true, o = true, u = true }\n\t\
    for i = 1, string.len(s), 2 do\n\t\tlocal c = string.sub(s, i, i)\n\t\tif v[c]\
    \ and string.upper(c) == c then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn\
    \ cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e7hie00.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1e7hie00.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  -- YOUR\
    \ CODE HERE\n  local num = 0\n  for i = 1, #s do\n    if s:sub(i,i) == 'A' or\
    \ s:sub(i,i) == 'E' or s:sub(i,i) == 'I' or s:sub(i,i) == 'O' or s:sub(i,i) ==\
    \ 'U' and i % 2 == 0 then\n      num = num + 1\n    end\n  end\n  return num\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5b1wzsf6.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5b1wzsf6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ upper = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_vowel(s:sub(i,\
    \ i)) and s:sub(i, i):isupper() then\n            upper = upper + 1\n        end\n\
    \    end\n    return upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkme3tdye.lua:12:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpkme3tdye.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpkme3tdye.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, string.len(s) do\n        if i % 2 == 0 and string.match(s,\
    \ \"[AEIOU]\", i) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxah8v78.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphxah8v78.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ #(s:gsub('[^A-Ea-e]', ''))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wjbpyr0.lua:16:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmp9wjbpyr0.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n   local\
    \ count = 0\n   for i = 1, #s do\n      if ((i % 2 == 0) and (s:sub(i, i):match(\"\
    [AEIOU]\"))) then\n         count = count + 1\n      end\n   end\n   return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpj1r_53.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwpj1r_53.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptvlvv82.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpptvlvv82.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and (s:sub(i, i):match('[AEIOU]'))\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscynuca7.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpscynuca7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ a = 0\n    for i=1,#s do\n        if s:sub(i,i):upper() == s:sub(i,i) and i%2==0\
    \ then\n            a = a + 1\n        end\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpex82hh5n.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpex82hh5n.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ counter = 0\n  for i = 1, #s do\n    if (i % 2) == 0 and (s:sub(i, i) == 'A'\
    \ or s:sub(i, i) == 'E' or s:sub(i, i) == 'I' or s:sub(i, i) == 'O' or s:sub(i,\
    \ i) == 'U') then\n      counter = counter + 1\n    end\n  end\n  return counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghnm39vs.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpghnm39vs.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  local len = #s\n  for i = 1, len, 2 do\n    if string.match(s:sub(i,\
    \ i), '[AEIOU]') then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ result = 0\n    local i = 0\n    while i < #s do\n        if is_vowel(s:sub(i,\
    \ i)) and is_upper(s:sub(i, i)) then\n            result = result + 1\n      \
    \  end\n        i = i + 2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb1op4fvb.lua:13:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpb1op4fvb.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpb1op4fvb.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ function is_vowel(c)\n        return c == 'A' or c == 'E' or c == 'I' or c ==\
    \ 'O' or c == 'U'\n    end\n    local vowels = 0\n    for i = 1, #s, 2 do\n  \
    \      if is_vowel(s:sub(i, i)) then\n            vowels = vowels + 1\n      \
    \  end\n    end\n    return vowels\nend\nassert(count_upper('aBCdEf') == 1)\n\
    assert(count_upper('abcdefg') == 0)\nassert(count_upper('dBBE') == 0)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n   return\
    \ string.gsub(s, \"[AEIOU]\", \"\"):gsub(\"%a\", \"\"):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fcqozxx.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9fcqozxx.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n   local\
    \ count = 0\n   for i = 1, #s do\n      if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjxk_y4b.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkjxk_y4b.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ #s:gsub('[AEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q9xrc9t.lua:16:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmp8q9xrc9t.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, string.len(s) do\n    local char = string.sub(s, i,\
    \ i)\n    if string.find(upper_vowels, char) and (i % 2 == 0) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_m4u5yre.lua:13:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp_m4u5yre.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_m4u5yre.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s:sub(i, i):find('[AEIOU]') and\
    \ (i % 2 == 0) then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fw6dlh9.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_fw6dlh9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ vowels = 'AEIOU'\n  local counter = 0\n  for i = 1, #s do\n    if i % 2 == 0\
    \ and vowels:find(s:sub(i, i), 1, true) then\n      counter = counter + 1\n  \
    \  end\n  end\n  return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7guw5xn.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpg7guw5xn.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ count_if(s, is_upper_vowel)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk97aueez.lua:10:\
    \ attempt to call a nil value (global 'count_if')\nstack traceback:\n\t/tmp/tmpk97aueez.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpk97aueez.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    local s = s:upper()\n    for i = 1, #s do\n        if i % 2 ==\
    \ 0 and s:sub(i, i) == 'A' then\n            count = count + 1\n        elseif\
    \ i % 2 == 0 and s:sub(i, i) == 'E' then\n            count = count + 1\n    \
    \    elseif i % 2 == 0 and s:sub(i, i) == 'I' then\n            count = count\
    \ + 1\n        elseif i % 2 == 0 and s:sub(i, i) == 'O' then\n            count\
    \ = count + 1\n        elseif i % 2 == 0 and s:sub(i, i) == 'U' then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpse21xb27.lua:31:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpse21xb27.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ string.gsub(s, '[AEIOUaeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_767l06.lua:16:\
    \ expected: 1, actual: \"BCdf\"\nstack traceback:\n\t/tmp/tmp5_767l06.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  -- TODO:\
    \ Write your code here\n  -- hints:\n  -- 1. use s:lower() to convert s to lowercase\n\
    \  -- 2. use string.byte('A') to get the byte value of 'A'\n  -- 3. use string.byte(c)\
    \ to get the byte value of character c\n  -- 4. use string.char(b) to get the\
    \ character of byte value b\n  -- 5. use string.len(s) to get the length of a\
    \ string\n  -- 6. use string.sub(s, i, j) to get a substring of s\n  --    * Note\
    \ that for this case, you should use string.sub(s, i, i) \n  --      to get the\
    \ character at index i.\n  -- 7. use string.find(s, c) to find the first position\
    \ of the character c\n  --    * Note that for this case, you should use string.find(s,\
    \ c, 1, true)\n  --      to get the case-insensitive searching result\n  local\
    \ t = s:lower()\n  local count = 0\n  for i = 1, string.len(s) do\n    if i %\
    \ 2 == 0 then\n      if string.byte(string.sub(s, i, i)) >= string.byte('A') and\n\
    \         string.byte(string.sub(s, i, i)) <= string.byte('Z') then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcapztl3.lua:41:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmppcapztl3.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):upper() == s:sub(i,\
    \ i) then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16u8r5g3.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp16u8r5g3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ num_upper = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and (s:sub(i, i):find('[AEIOU]')\
    \ ~= nil) then\n      num_upper = num_upper + 1\n    end\n  end\n  return num_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v_n7wyu.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2v_n7wyu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkhvsf5n.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppkhvsf5n.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwthtl03.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprwthtl03.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ vowel_upper_indices = {}\n\tfor i = 1, #s do\n\t\tif math.fmod(i, 2) == 0 and\
    \ is_vowel(s:sub(i, i)) then\n\t\t\ttable.insert(vowel_upper_indices, s:sub(i,\
    \ i))\n\t\tend\n\tend\n\treturn #vowel_upper_indices\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncmbimkz.lua:12:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpncmbimkz.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpncmbimkz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7e28ymu.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa7e28ymu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ count = 0\n\tfor i=1, #s do\n\t\tif(is_even(i) and is_vowel(s:sub(i,i)) and\
    \ is_upper(s:sub(i,i))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphhjjxbr7.lua:12:\
    \ attempt to call a nil value (global 'is_even')\nstack traceback:\n\t/tmp/tmphhjjxbr7.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphhjjxbr7.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and is_upper(s, i)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgsbac6u.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmprgsbac6u.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprgsbac6u.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i=1,#s do\n    if is_upper(s, i) and is_even(i) then\n    \
    \  count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2xyfxbdd.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp2xyfxbdd.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2xyfxbdd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ reduce(\n        function(acc, c)\n            if (acc % 2 == 0) and c:match('^[AEIOU]$')\
    \ then\n                return acc + 1\n            else\n                return\
    \ acc\n            end\n        end,\n        0,\n        s:gmatch('.')\n    )\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk_61rych.lua:10:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmpk_61rych.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpk_61rych.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i=1,#s do\n    if i % 2 == 0 and s:sub(i,i):upper() == s:sub(i,i)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9frier3c.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp9frier3c.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and s:match('[AEIOU]', i)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5t2s8qv.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5t2s8qv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6mn1snha.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp6mn1snha.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6mn1snha.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ vowels = {['A'] = true, ['E'] = true, ['I'] = true, ['O'] = true, ['U'] = true}\n\
    \tlocal count = 0\n\tfor i = 1, #s, 2 do\n\t\tif vowels[s:sub(i, i)] then\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzad4o6f.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpzzad4o6f.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, string.len(s) do\n    if i % 2 == 0 and string.find(s:sub(i,\
    \ i), '[AEIOU]') then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafx9ezg5.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpafx9ezg5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ string.gsub(s, \"[aeiou]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwjiydan.lua:16:\
    \ expected: 1, actual: \"BCdEf\"\nstack traceback:\n\t/tmp/tmpwwjiydan.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tif s:match(\"\
    [AEIOU]\") == nil then return 0 end\n\treturn s:gsub(\"[AEIOU]\", \"\"):len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7ycfuj7.lua:17:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmpi7ycfuj7.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ a, i = s:gmatch('[AEIOU]')\n  local c = 0\n  while true do\n    local v = a(i)\n\
    \    if not v then\n      break\n    end\n    if #v % 2 == 0 then\n      c = c\
    \ + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ycv7zjb.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4ycv7zjb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if not i % 2 == 0 and s:sub(i, i):match('[aeiouAEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2s6olf.lua:12:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpdf2s6olf.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdf2s6olf.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if is_vowel(s:sub(i, i)) and is_upper(s:sub(i,\
    \ i)) and i % 2 == 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqct8rd_j.lua:12:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpqct8rd_j.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpqct8rd_j.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptvlvv82.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpptvlvv82.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ vowels = {a = true, e = true, i = true, o = true, u = true}\n  local n = 0\n\
    \  for i = 1, #s, 2 do\n    local c = s:sub(i, i)\n    if vowels[c:lower()] and\
    \ c == c:upper() then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ counter = 0\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n\
    \  for i=1, string.len(s) do\n    if i % 2 == 0 and vowels[string.lower(s:sub(i,\
    \ i))] then\n      counter = counter + 1\n    end\n  end\n  return counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bw5s_yb.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5bw5s_yb.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ len(gsub(s, \"[AEIOU]\", ''))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3aqcemu2.lua:10:\
    \ attempt to call a nil value (global 'gsub')\nstack traceback:\n\t/tmp/tmp3aqcemu2.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3aqcemu2.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ count(s, function(c) return is_upper(c) and is_even(c) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzz_htcfg.lua:10:\
    \ attempt to call a nil value (global 'count')\nstack traceback:\n\t/tmp/tmpzz_htcfg.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpzz_htcfg.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and (s:byte(i) >= 65) and\
    \ (s:byte(i) <= 90) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil7a14mt.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpil7a14mt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ vowels = {['A'] = 1, ['E'] = 1, ['I'] = 1, ['O'] = 1, ['U'] = 1}\n    local\
    \ count = 0\n    for i, char in ipairs(s) do\n        if (i % 2 == 0) and vowels[char]\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6rn3myv.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpd6rn3myv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, string.len(s) do\n    if (i % 2 == 0) and (s:sub(i,\
    \ i) == string.upper(s:sub(i, i))) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcili11ds.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpcili11ds.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ n = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if is_upper(c) and\
    \ is_even(i) then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ncl4law.lua:13:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp2ncl4law.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2ncl4law.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ n = #s\n    if n < 2 then\n        return 0\n    end\n    local num = 0\n  \
    \  local c\n    for i = 2, n, 2 do\n        c = string.byte(s, i)\n        if\
    \ c >= 65 and c <= 90 then\n            num = num + 1\n        end\n    end\n\
    \    return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0cezmbk.lua:30:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpn0cezmbk.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_vowel(s:sub(i,\
    \ i)) and is_upper(s:sub(i, i)) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ifmb_xi.lua:12:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmp2ifmb_xi.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2ifmb_xi.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ n = #s\n    local count = 0\n    for i = 1, n, 2 do\n        if is_upper(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuhfuc39z.lua:13:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpuhfuc39z.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpuhfuc39z.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  if type(s)\
    \ ~= 'string' then return nil end\n  if s == '' then return 0 end\n  return string.gsub(s,\
    \ '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes4j1fy5.lua:18:\
    \ expected: 1, actual: \"BCdf\"\nstack traceback:\n\t/tmp/tmpes4j1fy5.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ay6t0b6.lua:11: ''end'' expected (to close ''function'' at
    line 9) near ''=''

    '
  stdout: ''
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  -- YOUR\
    \ CODE HERE\n  -- This should just be a few lines. If you need more, revisit your\
    \ solution\n  -- to problem 1.\n  local count = 0\n  local vowel = {[\"A\"] =\
    \ 1, [\"E\"] = 1, [\"I\"] = 1, [\"O\"] = 1, [\"U\"] = 1}\n  for i = 1, #s do\n\
    \    if (vowel[s:sub(i, i)]) then\n      if (i % 2 == 0) then\n        count =\
    \ count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwu2atys.lua:28:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppwu2atys.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  -- your\
    \ solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld_0i07n.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpld_0i07n.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if ((i % 2) == 0) and s:match('[A-Z]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ftqj3ic.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4ftqj3ic.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):upper() == s:sub(i,\
    \ i) then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16u8r5g3.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp16u8r5g3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\t-- YOUR\
    \ CODE HERE\n\tcount = 0\n\tif s == \"\" then\n\t\treturn 0\n\telse\n\t\tif string.sub(s,\
    \ 1, 1) == string.upper(string.sub(s, 1, 1)) and\n\t\t   string.sub(s, 1, 1) ==\
    \ \"A\" or\n\t\t   string.sub(s, 1, 1) == \"E\" or\n\t\t   string.sub(s, 1, 1)\
    \ == \"I\" or\n\t\t   string.sub(s, 1, 1) == \"O\" or\n\t\t   string.sub(s, 1,\
    \ 1) == \"U\" then\n\t\t\tcount = count + 1\n\t\tend\n\t\treturn count + count_upper(string.sub(s,\
    \ 2))\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrv1emf9.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqrv1emf9.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ n = 0\n    for i = 1, #s, 2 do\n        if s:sub(i, i):match('[AEIOU]') then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu97jn4ca.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu97jn4ca.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and upper_vowels[s:sub(i, i)] then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_n_b5y6.lua:12:\
    \ attempt to index a nil value (global 'upper_vowels')\nstack traceback:\n\t/tmp/tmpz_n_b5y6.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpz_n_b5y6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  local c, i = string.sub(s, 1, 1), 1\n  while c do\n    if i % 2\
    \ == 0 and vowel(c) and c == string.upper(c) then\n      count = count + 1\n \
    \   end\n    i = i + 1\n    c = string.sub(s, i, i)\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_j35x_du.lua:13:\
    \ attempt to call a nil value (global 'vowel')\nstack traceback:\n\t/tmp/tmp_j35x_du.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_j35x_du.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ len(filter(lambda x: x.isupper(), s[1::2]))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl9xlredw.lua:10: '')'' expected near ''x''

    '
  stdout: ''
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if not (i % 2 == 0) and string.match(s:sub(i,\
    \ i), '[AEIOU]') then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ i = 1\n    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i):upper()\
    \ == 'A' or s:sub(i, i):upper() == 'E' or s:sub(i, i):upper() == 'I' or s:sub(i,\
    \ i):upper() == 'O' or s:sub(i, i):upper() == 'U' then\n            if i % 2 ==\
    \ 0 then\n                count = count + 1\n            end\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnruax0zm.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnruax0zm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu97jn4ca.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu97jn4ca.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  -- your\
    \ code here\n  local i = 0\n  local count = 0\n  while i < #s do\n    if string.find(s:sub(i,i),\"\
    [AEIOU]\") and i % 2 == 0 then\n      count = count + 1\n    end\n    i = i +\
    \ 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmdaob90.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnmdaob90.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ count = 0\n\tfor i = 1, #s do\n\t\tif (i % 2 == 0) and s:match('[AEIOU]', i)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_6rxe6i.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9_6rxe6i.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i=1, #s do\n    if (i % 2) == 0 and s:sub(i,i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2hkgdza.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu2hkgdza.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ i, n = 0, 0\n  s:gsub('.', function(x)\n    if i % 2 == 0 and x:find('[AEIOU]')\
    \ then\n      n = n + 1\n    end\n    i = i + 1\n  end)\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    if\
    \ type(s) ~= 'string' then\n        error('arg \"s\" must be string')\n    end\n\
    \    local count = 0\n    local vowels = {'A', 'E', 'I', 'O', 'U'}\n    for i\
    \ = 1, #s do\n        if i % 2 == 0 then\n            for j = 1, #vowels do\n\
    \                if s:sub(i, i) == vowels[j] then\n                    count =\
    \ count + 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bc6dcw5.lua:30:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1bc6dcw5.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i=1,#s do\n        if i % 2 == 0 and s:sub(i,i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpia2_lkfy.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpia2_lkfy.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ function test_upper(s)\n        return (s == string.upper(s))\n    end\n   \
    \ local sum = 0\n    s:gsub('.', function(c)\n        if (test_upper(c) and (s:find(c)\
    \ % 2 == 0)) then\n            sum = sum + 1\n        end\n    end)\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8vg8fa8.lua:27:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmp_8vg8fa8.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ n = 0\n\tfor i = 1, #s, 2 do\n\t\tlocal c = string.sub(s, i, i)\n\t\tif is_upper(c)\
    \ then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0m254jq_.lua:13:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp0m254jq_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp0m254jq_.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n   -- TODO\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfjruvow.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpsfjruvow.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    --\
    \     num = 0\n    --     for i = 2, #s, 2 do\n    --         if (string.match(s[i],\
    \ \"[AEIOU]\")) then\n    --             num = num + 1\n    --         end\n \
    \   --     end\n    --     return num\n    -- end\n    --\n    -- Shorter version:\n\
    \    return select(2, s:gsub(\"[AEIOU]([^AEIOU]*)\", \"%1\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppna38fl_.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmppna38fl_.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    s:gsub('[AEIOU]', function(c)\n        if #c % 2 == 0 then\n\
    \            count = count + 1\n        end\n    end)\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tiv8dok.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4tiv8dok.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  -- [[\
    \ YOUR CODE HERE ]]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgs7vpzgn.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpgs7vpzgn.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ sum = 0\n    for k, v in pairs(s:sub(2, #s):gmatch(\"%a\")) do\n        if upper_vowels[v]\
    \ then\n            sum = sum + 1\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2szjcdw9.lua:11:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp2szjcdw9.lua:11: in local 'candidate'\n\t/tmp/tmp2szjcdw9.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i=1, #s do\n    local c = s:sub(i,i)\n    if is_upper(c) and\
    \ is_even(i) then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppt7ysbx2.lua:13:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmppt7ysbx2.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmppt7ysbx2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23y2xl4j.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp23y2xl4j.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ upper_count = 0\n  local prev_upper = false\n  for i = 1, #s do\n    local char\
    \ = s:sub(i, i)\n    if char:match('%A') then\n      local prev_upper = char:match('%u')\n\
    \      if prev_upper then\n        upper_count = upper_count + 1\n      end\n\
    \    end\n  end\n  return upper_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxs09nzp.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplxs09nzp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i=1,#s do\n        if i % 2 == 0 and s:sub(i,i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3n_z084.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpp3n_z084.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ s:gsub('([AEIOUY])', ''):len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ogel2dr.lua:16:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmp7ogel2dr.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n   local\
    \ cnt = 0\n   local even = true\n   for i = 1, #s do\n      if even and is_upper_vowel(s:sub(i,\
    \ i)) then\n         cnt = cnt + 1\n      end\n      even = not even\n   end\n\
    \   return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxy1jgi40.lua:13:\
    \ attempt to call a nil value (global 'is_upper_vowel')\nstack traceback:\n\t\
    /tmp/tmpxy1jgi40.lua:13: in local 'candidate'\n\t/tmp/tmpxy1jgi40.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ num = 0\n    for i = 1, string.len(s) do\n        if i % 2 == 0 and s:sub(i,\
    \ i) == s:sub(i, i):upper() then\n            num = num + 1\n        end\n   \
    \ end\n    return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__39_iam.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp__39_iam.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ count = 0\n\tfor i=1, #s do\n\t\tif s:sub(i,i):find('[AEIOU]') then\n\t\t\t\
    if i % 2 == 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbiuldqvg.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbiuldqvg.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ s:gsub(\"[aAiIuUeEoO]\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi6mfc9j.lua:16:\
    \ expected: 1, actual: \"BCdf\"\nstack traceback:\n\t/tmp/tmpzi6mfc9j.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    if\
    \ #s < 2 then\n        return 0\n    end\n    local count = 0\n    for i = 2,\
    \ #s, 2 do\n        if string.find(s:sub(i, i), '[AEIOU]') then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dqlbxhm.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1dqlbxhm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ vowel_pattern = \"[aeiouAEIOU]\"\n  local count = 0\n  for i=1,#s do\n    local\
    \ c = s:sub(i,i)\n    if c:match(vowel_pattern) and i % 2 == 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wspz4_1.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3wspz4_1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ #s:gsub('[AEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8y367bn.lua:16:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmpc8y367bn.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ c = 0\n\tfor i=1,#s,2 do\n\t\tlocal c = s:sub(i,i)\n\t\tif c == c:upper() and\
    \ is_vowel(c) then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvifgal3b.lua:13:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpvifgal3b.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvifgal3b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  -- TODO:\
    \ implement count_upper.\n  local count = 0\n  for i = 1, #s do\n    local cur\
    \ = s:sub(i, i)\n    if cur == 'A' or cur == 'E' or cur == 'I' or cur == 'O' or\
    \ cur == 'U' then\n      if i % 2 == 0 then\n        count = count + 1\n     \
    \ end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpras9s760.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpras9s760.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitpmoiz_.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpitpmoiz_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.match(s, string.char(string.byte(s,\
    \ i))) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s6vg1bo.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8s6vg1bo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and (string.upper(s[i])\
    \ == s[i]) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ete5y1e.lua:12:\
    \ bad argument #1 to 'upper' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp2ete5y1e.lua:12: in local 'candidate'\n\t/tmp/tmp2ete5y1e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitpmoiz_.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpitpmoiz_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu97jn4ca.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu97jn4ca.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if s:sub(i, i):match('[AEIOU]') and i % 2\
    \ == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli8w66t7.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpli8w66t7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]') and\
    \ i % 2 == 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40j8barg.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp40j8barg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ vowels = 'aeiouAEIOU'\n    local count = 0\n    for i = 1, string.len(s) do\n\
    \        if vowels:find(s:sub(i, i)) and i % 2 == 0 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzonn2m5.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxzonn2m5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ i = 0\n  local r = 0\n  for c in s:gmatch('.') do\n    if c:match('[AEIOU]')\
    \ and i % 2 == 0 then\n      r = r + 1\n    end\n    i = i + 1\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwthtl03.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprwthtl03.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):upper() ==\
    \ s:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnlr0p35.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpjnlr0p35.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and is_upper(s, i) then\n \
    \     count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppunb3o5d.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmppunb3o5d.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmppunb3o5d.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ vowels = 'aeiouAEIOU'\n    local count = 0\n    local chars = {s:byte(1, -1)}\n\
    \    for i = 1, #chars, 2 do\n        if vowels:find(chars[i], 1, true) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi464khqm.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpi464khqm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i=1, #s do\n    if i % 2 == 0 and string.match(s, '[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcukcqrhn.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcukcqrhn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    if\
    \ #s > 0 then\n        if s:sub(1, 1):match('%A') then\n            return 0 +\
    \ count_upper(s:sub(2))\n        else\n            return (s:sub(2, 2):match('%A')\
    \ and 1 or 0) + count_upper(s:sub(3))\n        end\n    else\n        return 0\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo71zg_36.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpo71zg_36.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu97jn4ca.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu97jn4ca.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and is_upper(s, i) then\n     \
    \ n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvi3f11bp.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpvi3f11bp.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpvi3f11bp.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ vowels = 'aeiouAEIOU'\n    local ct = 0\n    for i=1,string.len(s),2 do\n  \
    \      if string.find(vowels, string.sub(s, i, i)) then\n            ct = ct +\
    \ 1\n        end\n    end\n    return ct\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfc87p1eq.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfc87p1eq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ count = 0\n\tfor i=1,string.len(s),2 do\n\t\tif string.find(\"AEIOU\", string.sub(s,\
    \ i, i)) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ n = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and s:sub(i, i):match('[AEIOU]')\
    \ then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfov0uzw.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzfov0uzw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    local index = 0\n    local vowels = {'A', 'E', 'I', 'O', 'U'}\n\
    \    for i in s:gmatch(\".\") do\n        if index % 2 == 0 then\n           \
    \ if i == vowels[1] or i == vowels[2] or i == vowels[3] or i == vowels[4] or i\
    \ == vowels[5] then\n                count = count + 1\n            end\n    \
    \    end\n        index = index + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ n = 0\n    for i = 1, string.len(s), 2 do\n        if s:sub(i, i) == string.upper(s:sub(i,\
    \ i)) then\n            n = n + 1\n        end\n    end\n    return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp2vbxtv.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphp2vbxtv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n   local\
    \ num = 0\n   for i = 1, #s do\n      if (i % 2 == 0) and s:sub(i, i):match('[AEIOU]')\
    \ then\n         num = num + 1\n      end\n   end\n   return num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplbd9cij.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpplbd9cij.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqmmnho1.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpaqmmnho1.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n   local\
    \ count = 0\n   for i = 1, #s do\n      if i % 2 == 0 and is_upper(s:sub(i, i))\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9mh2yqbe.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp9mh2yqbe.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp9mh2yqbe.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]') then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2urpx6ll.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2urpx6ll.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and is_vowel(s:sub(i, i):upper())\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7pv6g4p3.lua:12:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmp7pv6g4p3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7pv6g4p3.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  local vowels = {['A'] = true, ['E'] = true, ['I'] = true, ['O']\
    \ = true, ['U'] = true}\n  for i = 1, string.len(s) do\n    if i % 2 == 0 and\
    \ vowels[string.sub(s, i, i)] then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpby9hp90g.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpby9hp90g.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ _, count = string.gsub(s, '[AEIOU][AEIOU]', '')\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4t7pp6cm.lua:17:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4t7pp6cm.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ i = 1\n    local count = 0\n    for c in s:gmatch(\".\") do\n        if i %\
    \ 2 == 0 and c:match(\"[AEIOU]\") then\n            count = count + 1\n      \
    \  end\n        i = i + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg7azti4.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmg7azti4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    s:gsub('([AEIOU])', function (c)\n        if c == c:upper() then\n\
    \            count = count + 1\n        end\n    end)\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa112eeqs.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa112eeqs.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]') and\
    \ i % 2 == 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40j8barg.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp40j8barg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and (string.sub(s, i,\
    \ i) == 'A' or string.sub(s, i, i) == 'E' or string.sub(s, i, i) == 'I' or string.sub(s,\
    \ i, i) == 'O' or string.sub(s, i, i) == 'U') then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeuz8h9cu.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpeuz8h9cu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ num = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_vowel(s:sub(i, i))\
    \ and s:sub(i, i):upper() == s:sub(i, i) then\n            num = num + 1\n   \
    \     end\n    end\n    return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2zm9y_cg.lua:12:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmp2zm9y_cg.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2zm9y_cg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, s:len() do\n    if i % 2 == 0 and is_upper(s, i) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi9im0yi9.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpi9im0yi9.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpi9im0yi9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    local n = #s\n    for i = 1, n, 2 do\n        if s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and (s:sub(i, i):match('[AEIOU]'))\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xmmk9m9.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9xmmk9m9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 0
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ n = 0\n\tfor i = 1, #s, 2 do\n\t\tlocal c = s:sub(i, i)\n\t\tif c:match('[AEIOU]')\
    \ then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptvlvv82.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpptvlvv82.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ #s:gsub('[AEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8y367bn.lua:16:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmpc8y367bn.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]') and\
    \ i % 2 == 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40j8barg.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp40j8barg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ sum = 0\n  local len = string.len(s)\n  for i = 1, len do\n    if i % 2 == 0\
    \ then\n      if s:sub(i, i) == 'A' or s:sub(i, i) == 'E' or s:sub(i, i) == 'I'\
    \ or s:sub(i, i) == 'O' or s:sub(i, i) == 'U' then\n        sum = sum + 1\n  \
    \    end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqloyxe0u.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqloyxe0u.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, string.len(s) do\n        if i % 2 == 0 and string.match(s:sub(i,\
    \ i), \"[AEIOU]\") then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifmzkxdc.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpifmzkxdc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match('^[AEIOU]$')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_sfvor3.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpw_sfvor3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  local\
    \ n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):upper() == s:sub(i,\
    \ i) then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16u8r5g3.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp16u8r5g3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n  return\
    \ count_where(s, function(c)\n    return is_upper(c) and not (c_index(s, c) %\
    \ 2 == 0)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq_v4g_32.lua:10:\
    \ attempt to call a nil value (global 'count_where')\nstack traceback:\n\t/tmp/tmpq_v4g_32.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpq_v4g_32.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6mn1snha.lua:12:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp6mn1snha.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6mn1snha.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n\tlocal\
    \ n = 0\n\tfor i = 1, #s, 2 do\n\t\tif uppercase_vowels[s:sub(i, i)] then\n\t\t\
    \tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp71mrg8a3.lua:12:\
    \ attempt to index a nil value (global 'uppercase_vowels')\nstack traceback:\n\
    \t/tmp/tmp71mrg8a3.lua:12: in local 'candidate'\n\t/tmp/tmp71mrg8a3.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978079
- exit_code: 1
  program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
    -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n    s =\
    \ s:lower()\n    local len = #s\n    local count = 0\n    for i = 1, len do\n\
    \        if i % 2 == 0 and s:sub(i, i) == 'a' then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkd6evmxw.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkd6evmxw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978079
