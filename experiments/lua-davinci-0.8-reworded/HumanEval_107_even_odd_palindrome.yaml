name: HumanEval_107_even_odd_palindrome
language: lua
prompt: "-- Given a positive integer n, return a table that has the number of even\
  \ and odd\n-- integer palindromes that fall within the range(1, n), inclusive.\n\
  -- Example 1:\n-- >>> even_odd_palindrome(3)\n-- {1, 2}\n-- Explanation:\n-- Integer\
  \ palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n-- Example\
  \ 2:\n-- >>> even_odd_palindrome(12)\n-- {4, 6}\n-- Explanation:\n-- Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  -- Note:\n-- 1. 1 <= n <= 10^3\n-- 2. returned table has the number of even and\
  \ odd integer palindromes respectively.\nlocal function even_odd_palindrome(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_palindrome\n\
  \    lu.assertEquals(candidate(123), {8, 13})\n    lu.assertEquals(candidate(12),\
  \ {4, 6})\n    lu.assertEquals(candidate(3), {1, 2})\n    lu.assertEquals(candidate(63),\
  \ {6, 8})\n    lu.assertEquals(candidate(25), {5, 6})\n    lu.assertEquals(candidate(19),\
  \ {4, 6})\n    lu.assertEquals(candidate(9), {4, 5})\n    lu.assertEquals(candidate(1),\
  \ {0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local even = 0\n    local odd = 0\n    local n2 = n // 2\n    local\
    \ a1 = n % 2\n    local a2 = n // 2\n    if a1 == 0 then\n        a1 = 1\n   \
    \     a2 = n2\n    end\n    for i = a1, a2 do\n        if tostring(i) == tostring(i):reverse()\
    \ then\n            if i > n2 then\n                odd = odd + 1\n          \
    \  else\n                even = even + 1\n            end\n        end\n    end\n\
    \    return {even, odd}\nend", "    local result = {0, 0}\n    for i = 1, n do\n\
    \        if is_palindrome(i) then\n            result[i % 2 + 1] = result[i %\
    \ 2 + 1] + 1\n        end\n    end\n    return result\nend", "    local function\
    \ is_palindrome(n)\n        local s = tostring(n)\n        for i = 1, #s/2 do\n\
    \            if s:sub(i, i) ~= s:sub(#s-i+1, #s-i+1) then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local res = {0,\
    \ 0}\n    for i = 1, n do\n        if is_palindrome(i) then\n            if is_even(i)\
    \ then\n                res[1] = res[1] + 1\n            else\n              \
    \  res[2] = res[2] + 1\n            end\n        end\n    end\n    return res\n\
    end", "    local odd, even = 0, 0\n    if n < 0 then\n        return nil\n   \
    \ end\n    for i = 1, n do\n        if i < 10 then\n            odd = odd + 1\n\
    \        elseif i % 10 == 0 then\n            even = even + 1\n        else\n\
    \            local a, b = i, i\n            local t = 0\n            while b >\
    \ 0 do\n                t = t * 10 + b % 10\n                b = math.floor(b\
    \ / 10)\n            end\n            if t == a then\n                if a % 2\
    \ == 0 then\n                    even = even + 1\n                else\n     \
    \               odd = odd + 1\n                end\n            end\n        end\n\
    \    end\n    return {even, odd}\nend", "    local isPalindrome = function(n)\n\
    \        local d = 1\n        while n // d >= 10 do\n            d = d * 10\n\
    \        end\n        while n > 0 do\n            local q = n // d\n         \
    \   local r = n % 10\n            if q ~= r then\n                return false\n\
    \            end\n            n = (n % d) // 10\n            d = d // 100\n  \
    \      end\n        return true\n    end\n    local count_even, count_odd = 0,\
    \ 0\n    for i = 1, n do\n        if isPalindrome(i) then\n            if i %\
    \ 2 == 0 then\n                count_even = count_even + 1\n            else\n\
    \                count_odd = count_odd + 1\n            end\n        end\n   \
    \ end\n    return {count_even, count_odd}\nend", "    if n < 1 or n > 1000 then\n\
    \        error(\"n must be in range (1, 1000) inclusive\")\n    end\n    local\
    \ even = 0\n    local odd = 0\n    for i = 1, n do\n        if tostring(i) ==\
    \ string.reverse(tostring(i)) then\n            if i % 2 == 0 then\n         \
    \       even = even + 1\n            else\n                odd = odd + 1\n   \
    \         end\n        end\n    end\n    return {even, odd}\nend", "    -- return\
    \ {1, 2}\n    -- return {4, 6}\nend", "  local count = {0, 0}\n  for i = 1, n\
    \ do\n    if is_palindrome(i) then\n      count[i % 2 + 1] = count[i % 2 + 1]\
    \ + 1\n    end\n  end\n  return count\nend", "    local even_cnt, odd_cnt = 0,\
    \ 0\n    for i = 1, n do\n        if checkPalindrome(i) then\n            if i\
    \ % 2 == 0 then\n                even_cnt = even_cnt + 1\n            else\n \
    \               odd_cnt = odd_cnt + 1\n            end\n        end\n    end\n\
    \    return {even_cnt, odd_cnt}\nend", "  -- insert your code here\n  local function\
    \ is_palindrome(num)\n    if num <= 0 then\n      return false\n    end\n    local\
    \ ds = {}\n    local m = num\n    while m > 0 do\n      table.insert(ds, m % 10)\n\
    \      m = math.floor(m / 10)\n    end\n    for i = 1, #ds / 2 do\n      if ds[i]\
    \ ~= ds[#ds - i + 1] then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local even_palindrome = 0\n  local odd_palindrome = 0\n  for\
    \ i = 1, n do\n    if is_palindrome(i) then\n      if i % 2 == 0 then\n      \
    \  even_palindrome = even_palindrome + 1\n      else\n        odd_palindrome =\
    \ odd_palindrome + 1\n      end\n    end\n  end\n  return {even_palindrome, odd_palindrome}\n\
    end", "    -- write your code here\n    local count_odd, count_even = 0, 0\n \
    \   for i = 1, n do\n        if check_palindrome(i) then\n            if i % 2\
    \ == 0 then\n                count_even = count_even + 1\n            else\n \
    \               count_odd = count_odd + 1\n            end\n        end\n    end\n\
    \    return {count_even, count_odd}\nend", "  -- fill the table with the number\
    \ of odd and even integer palindromes.\n  local even_odd = {0, 0}\n  for i = 1,\
    \ n do\n    if is_palindrome(i) then\n      if i % 2 == 0 then\n        even_odd[1]\
    \ = even_odd[1] + 1\n      else\n        even_odd[2] = even_odd[2] + 1\n     \
    \ end\n    end\n  end\n  return even_odd\nend", "  local even, odd = 0, 0\n  for\
    \ i = 1, n do\n    if is_palindrome(i) then\n      if is_even(i) then\n      \
    \  even = even + 1\n      else\n        odd = odd + 1\n      end\n    end\n  end\n\
    \  return {even, odd}\nend", "    local cnt_even, cnt_odd = 0, 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if is_even(i) then\n\
    \                cnt_even = cnt_even + 1\n            else\n                cnt_odd\
    \ = cnt_odd + 1\n            end\n        end\n    end\n    return {cnt_even,\
    \ cnt_odd}\nend", "    local function is_palindrome(i)\n        local j = i\n\
    \        local k = 0\n        while j > 0 do\n            k = k * 10 + j % 10\n\
    \            j = math.floor(j / 10)\n        end\n        return k == i\n    end\n\
    \    local function even_odd_palindrome_1(n)\n        local even = 0\n       \
    \ local odd = 0\n        for i = 1, n do\n            if is_palindrome(i) then\n\
    \                if i % 2 == 0 then\n                    even = even + 1\n   \
    \             else\n                    odd = odd + 1\n                end\n \
    \           end\n        end\n        return {even, odd}\n    end\n    local function\
    \ even_odd_palindrome_2(n)\n        local function palindrome_count(n)\n     \
    \       if n < 10 then\n                return 9\n            end\n          \
    \  local count = 0\n            local l = 0\n            local m = n\n       \
    \     while m > 0 do\n                m = math.floor(m / 10)\n               \
    \ l = l + 1\n            end\n            m = 10 ^ (l - 1)\n            local\
    \ i = 1\n            while i <= l do\n                if i == 1 then\n       \
    \             count = count + 9\n                elseif i == l then\n        \
    \            count = count + (n - m + 1)\n                else\n             \
    \       count = count + 9 * m\n                end\n                i = i + 1\n\
    \            end\n            return count\n        end\n        return {palindrome_count(n)\
    \ / 2, palindrome_count(n) / 2}\n    end\n    return even_odd_palindrome_2(n)\n\
    end", "    local is_palindrome = function(n)\n        local s = tostring(n)\n\
    \        for i = 1, math.floor(#s / 2) do\n            if s:sub(i, i) ~= s:sub(#s\
    \ - i + 1, #s - i + 1) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    local even, odd = 0, 0\n    for\
    \ i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return {even, odd}\nend", " \
    \   local even, odd = 0, 0\n    for i = 1, n do\n        if i % 10 == 0 then goto\
    \ continue end\n        local r, s = 0, i\n        while s > 0 do\n          \
    \  r = r * 10 + s % 10\n            s = math.floor(s / 10)\n        end\n    \
    \    if r == i then\n            if i % 2 == 0 then\n                even = even\
    \ + 1\n            else\n                odd = odd + 1\n            end\n    \
    \    end\n        ::continue::\n    end\n    return {even, odd}\nend", "  -- TODO:\
    \ IMPLEMENT ME\nend", "\tlocal even, odd = 0, 0\n\tfor i = 1, n do\n\t\tlocal\
    \ s = tostring(i)\n\t\tlocal len = #s\n\t\tlocal palindrome = true\n\t\tfor j\
    \ = 1, math.floor(len / 2) do\n\t\t\tif s:sub(j, j) ~= s:sub(len - j + 1, len\
    \ - j + 1) then\n\t\t\t\tpalindrome = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tif palindrome then\n\t\t\tif i % 2 == 0 then\n\t\t\t\teven = even + 1\n\t\t\
    \telse\n\t\t\t\todd = odd + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn {even, odd}\n\
    end", "  local even, odd = 0, 0\n  for i = 1, n do\n    if is_palindrome(i) then\n\
    \      if i % 2 == 0 then\n        even = even + 1\n      else\n        odd =\
    \ odd + 1\n      end\n    end\n  end\n  return {even, odd}\nend", "    -- Write\
    \ your code here\n    local countOdd = 0\n    local countEven = 0\n    for i =\
    \ 1, n do\n        if (i < 10) then\n            countOdd = countOdd + 1\n   \
    \     elseif (i % 11 == 0) then\n            countOdd = countOdd + 1\n       \
    \ elseif (string.reverse(i) == i) then\n            local cur = tostring(i)\n\
    \            local n = #cur\n            local mid = math.floor(n / 2)\n     \
    \       local left = mid - 1\n            local right = n % 2 == 0 and mid or\
    \ mid + 1\n            while (left >= 0 and right < n) do\n                if\
    \ (cur:sub(left + 1, left + 1) == cur:sub(right + 1, right + 1)) then\n      \
    \              left = left - 1\n                    right = right + 1\n      \
    \          else\n                    break\n                end\n            end\n\
    \            if (left < 0 and right == n) then\n                countEven = countEven\
    \ + 1\n            else\n                countOdd = countOdd + 1\n           \
    \ end\n        end\n    end\n    return {countEven, countOdd}\nend\nreturn even_odd_palindrome",
  "  local t = {[0] = 0, [1] = 0}\n  for i = 1, n do\n    if is_palindrome(i) then\n\
    \      t[i % 2] = t[i % 2] + 1\n    end\n  end\n  return t\nend", "  local cnt\
    \ = {0, 0}\n  for i = 1, n do\n    local s = i .. ''\n    if s == s:reverse()\
    \ then\n      if i % 2 == 0 then\n        cnt[1] = cnt[1] + 1\n      else\n  \
    \      cnt[2] = cnt[2] + 1\n      end\n    end\n  end\n  return cnt\nend", " \
    \   local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n\
    \            if i % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return {even, odd}\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if tostring(i) == string.reverse(tostring(i)) then\n            if tonumber(string.sub(tostring(i),\
    \ #tostring(i) / 2 + 1, #tostring(i) / 2 + 1)) % 2 == 0 then\n               \
    \ even = even + 1\n            else\n                odd = odd + 1\n         \
    \   end\n        end\n    end\n    return {even, odd}\nend", "  local countEven\
    \ = 0\n  local countOdd = 0\n  for i = 1, n do\n    if string.reverse(tostring(i))\
    \ == tostring(i) then\n      if i % 2 == 0 then\n        countEven = countEven\
    \ + 1\n      else\n        countOdd = countOdd + 1\n      end\n    end\n  end\n\
    \  return {countEven, countOdd}\nend", "    if n < 1 or n > 10^3 then return nil\
    \ end\n    local even = 0\n    local odd = 0\n    for i = 1, n do\n        if\
    \ checkPalindrome(i) then\n            if i % 2 == 0 then\n                even\
    \ = even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return {even, odd}\nend", "    local even, odd = 0,\
    \ 0\n    for i = 1, n do\n        if string.reverse(tostring(i)) == tostring(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend", "    -- Write your code here\n    local\
    \ odd, even = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n        \
    \    even = even + 1\n        else\n            odd = odd + 1\n        end\n \
    \   end\n    return {even, odd}\nend", "    local even_cnt, odd_cnt = 0, 0\n \
    \   local i, is_odd\n    for i = 1, n do\n        is_odd = is_palindrome(i)\n\
    \        if is_odd then\n            odd_cnt = odd_cnt + 1\n        else\n   \
    \         even_cnt = even_cnt + 1\n        end\n    end\n    return {even_cnt,\
    \ odd_cnt}\nend", "    local even = 0\n    local odd = 0\n    if n == 1 then return\
    \ {1, 0} end\n    for i = 1, n do\n        if is_palindrome(i) then\n        \
    \    if is_even(i) then\n                even = even + 1\n            else\n \
    \               odd = odd + 1\n            end\n        end\n    end\n    return\
    \ {even, odd}\nend", "  local even = 0\n  local odd = 0\n  for i = 1, n do\n \
    \   if string.reverse(tostring(i)) == tostring(i) then\n      if i % 2 == 0 then\n\
    \        even = even + 1\n      else\n        odd = odd + 1\n      end\n    end\n\
    \  end\n  return {even, odd}\nend", "  -- Write your code here\n  local res =\
    \ {0, 0}\n  for i = 1, n do\n    if is_palindrome(i) then\n      if i % 2 == 0\
    \ then\n        res[1] = res[1] + 1\n      else\n        res[2] = res[2] + 1\n\
    \      end\n    end\n  end\n  return res\nend", "  -- your code here\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, n do\n    if i == string.reverse(i)\
    \ then\n      if i % 2 == 0 then\n        even = even + 1\n      else\n      \
    \  odd = odd + 1\n      end\n    end\n  end\n  return {even, odd}\nend", "   \
    \ local count = {0, 0}\n    local s = 1\n    local e = n\n    while s <= e do\n\
    \        local n = n + 1\n        local forward = n\n        local backward =\
    \ 0\n        while n > 0 do\n            backward = backward * 10 + n % 10\n \
    \           n = n // 10\n        end\n        if backward == forward then\n  \
    \          count[(forward % 2) + 1] = count[(forward % 2) + 1] + 1\n        end\n\
    \    end\n    return count\nend", "    -- insert your code here\n    local even_count\
    \ = 0\n    local odd_count = 0\n    for i = 1, n do\n        if palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even_count = even_count\
    \ + 1\n            else\n                odd_count = odd_count + 1\n         \
    \   end\n        end\n    end\n    return {even_count, odd_count}\nend", "   \
    \ -- Write your code here\n    -- some example function that returns a table with\
    \ two fields\n    -- output = {even, odd}\n    -- return output\nend", "    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if i % 10 == 0 then\n       \
    \     even = even + 1\n        elseif i % 10 == 2 then\n            odd = odd\
    \ + 1\n        elseif i % 10 == 4 then\n            odd = odd + 1\n        elseif\
    \ i % 10 == 6 then\n            odd = odd + 1\n        elseif i % 10 == 8 then\n\
    \            odd = odd + 1\n        end\n    end\n    return {even, odd}\nend",
  "    local even_odd = {0, 0}\n    local x = 1\n    for x = 1, n do\n        if x\
    \ % 10 == 0 then\n            x = x + 1\n        end\n        if x <= 9 then\n\
    \            even_odd[2] = even_odd[2] + 1\n        else\n            local str_num\
    \ = tostring(x)\n            local len = #str_num\n            local prefix =\
    \ string.sub(str_num, 1, math.floor(len / 2))\n            local str_num_prefix\
    \ = prefix\n            local str_num_suffix = prefix\n            if len % 2\
    \ == 1 then\n                str_num_prefix = string.sub(str_num, 1, math.floor(len\
    \ / 2))\n                str_num_suffix = string.sub(str_num, math.floor(len /\
    \ 2) + 2, len)\n            else\n                str_num_prefix = string.sub(str_num,\
    \ 1, math.floor(len / 2))\n                str_num_suffix = string.sub(str_num,\
    \ math.floor(len / 2) + 1, len)\n            end\n            local str_num_prefix_reversed\
    \ = string.reverse(str_num_prefix)\n            if str_num_prefix_reversed ==\
    \ str_num_suffix then\n                if x % 2 == 0 then\n                  \
    \  even_odd[1] = even_odd[1] + 1\n                else\n                    even_odd[2]\
    \ = even_odd[2] + 1\n                end\n            end\n        end\n    end\n\
    \    return even_odd\nend", "    local even_num = 0\n    local odd_num = 0\n \
    \   for i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                even_num = even_num + 1\n            else\n        \
    \        odd_num = odd_num + 1\n            end\n        end\n    end\n    return\
    \ {even_num, odd_num}\nend", "\tlocal odd = 0\n\tlocal even = 0\n\tlocal base\
    \ = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n\tfor i = 1, n do\n\t\tlocal num = tostring(i)\n\
    \t\tlocal tmp = {}\n\t\tfor d in num:gmatch(\".\") do\n\t\t\ttable.insert(tmp,\
    \ d)\n\t\tend\n\t\tlocal k = #tmp\n\t\tlocal cnt = 0\n\t\tfor i = 1, k do\n\t\t\
    \tif tmp[i] == tmp[k + 1 - i] then\n\t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\tend\n\
    \t\tif cnt == k then\n\t\t\tif base[i] == 1 then\n\t\t\t\todd = odd + 1\n\t\t\t\
    else\n\t\t\t\teven = even + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn {even, odd}\n\
    end", "    local even = 0\n    local odd = 0\n    for i = 1, n do\n        if\
    \ (tostring(i) == string.reverse(tostring(i))) then\n            if (i % 2 ==\
    \ 0) then\n                even = even + 1\n            else\n               \
    \ odd = odd + 1\n            end\n        end\n    end\n    return {even, odd}\n\
    end", "    local cnt = {0, 0}\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            cnt[1 + (i % 2)] = cnt[1 + (i % 2)] + 1\n        end\n   \
    \ end\n    return cnt\nend", "    local res = {0, 0}\n    if n < 1 or n > 10^3\
    \ then\n        return nil\n    end\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                res[1] = res[1] + 1\n\
    \            else\n                res[2] = res[2] + 1\n            end\n    \
    \    end\n    end\n    return res\nend", "    local even = 0\n    local odd =\
    \ 0\n    if n < 1 or n > 1000 then\n        return {even, odd}\n    end\n    for\
    \ i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return {even, odd}\nend", " \
    \   -- your code here\n    local result = {0, 0}\n    for i = 1, n do\n      \
    \  if is_palindrome(i) then\n            if i % 2 == 0 then\n                result[1]\
    \ = result[1] + 1\n            else\n                result[2] = result[2] + 1\n\
    \            end\n        end\n    end\n    return result\nend", "    local count_even,\
    \ count_odd = 0, 0\n    local num_table = {}\n    for i = 1, n do\n        local\
    \ i_str = tostring(i)\n        local i_rev = string.reverse(i_str)\n        if\
    \ i_str == i_rev then\n            if i % 2 == 0 then\n                count_even\
    \ = count_even + 1\n            else\n                count_odd = count_odd +\
    \ 1\n            end\n        end\n    end\n    num_table[1] = count_even\n  \
    \  num_table[2] = count_odd\n    return num_table\nend", "  local r = {0, 0}\n\
    \  for x = 1, n do\n    local rx = tostring(x)\n    local rrx = reverse(rx)\n\
    \    if rx == rrx then\n      r[x % 2 + 1] = r[x % 2 + 1] + 1\n    end\n  end\n\
    \  return r\nend", "    local res = {0, 0}\n    if n <= 0 then\n        return\
    \ res\n    end\n    for i = 1, n do\n        if is_palindrome(i) then\n      \
    \      res[i % 2 + 1] = res[i % 2 + 1] + 1\n        end\n    end\n    return res\n\
    end", "    -- Write your code here\n    local count = { 0, 0 }\n    for i = 1,\
    \ n do\n        if i % 2 == 0 then\n            count[1] = count[1] + 1\n    \
    \    else\n            count[2] = count[2] + 1\n        end\n    end\n    return\
    \ count\nend", "    local ev = 0\n    local od = 0\n    local val = 1\n    while\
    \ val <= n do\n        local str = tostring(val)\n        local ok = true\n  \
    \      for i = 1, #str / 2 do\n            if str:sub(i, i) ~= str:sub(#str -\
    \ i + 1, #str - i + 1) then\n                ok = false\n                break\n\
    \            end\n        end\n        if ok then\n            if val % 2 == 0\
    \ then\n                ev = ev + 1\n            else\n                od = od\
    \ + 1\n            end\n        end\n        val = val + 1\n    end\n    return\
    \ {ev, od}\nend", "    local even_num = 0\n    local odd_num = 0\n    local tmp\
    \ = 0\n    for i = 1, n do\n        tmp = i\n        local res = 0\n        local\
    \ cnt = 0\n        while tmp ~= 0 do\n            local mod = tmp % 10\n     \
    \       res = res * 10 + mod\n            tmp = (tmp - mod) / 10\n           \
    \ cnt = cnt + 1\n        end\n        if res == i then\n            if cnt % 2\
    \ == 0 then\n                even_num = even_num + 1\n            else\n     \
    \           odd_num = odd_num + 1\n            end\n        end\n    end\n   \
    \ return {even_num, odd_num}\nend", "    -- TODO: implement your code here\n \
    \   -- local range = {}\n    -- for i = 1, n do\n    --     table.insert(range,\
    \ i)\n    -- end\n    -- local odd_cnt = 0\n    -- local even_cnt = 0\n    --\
    \ for i = 1, #range do\n    --     local int_to_string = tostring(range[i])\n\
    \    --     local str_len = #int_to_string\n    --     local is_palindrome = true\n\
    \    --     for j = 1, str_len / 2 do\n    --         if int_to_string:sub(j,\
    \ j) ~= int_to_string:sub(str_len - j + 1, str_len - j + 1) then\n    --     \
    \        is_palindrome = false\n    --             break\n    --         end\n\
    \    --     end\n    --     if is_palindrome then\n    --         if #int_to_string\
    \ % 2 == 0 then\n    --             even_cnt = even_cnt + 1\n    --         else\n\
    \    --             odd_cnt = odd_cnt + 1\n    --         end\n    --     end\n\
    \    -- end\n    -- return {even_cnt, odd_cnt}\n    local even_cnt = 0\n    local\
    \ odd_cnt = 0\n    for i = 1, n do\n        local int_to_string = tostring(i)\n\
    \        local str_len = #int_to_string\n        local is_palindrome = true\n\
    \        for j = 1, str_len / 2 do\n            if int_to_string:sub(j, j) ~=\
    \ int_to_string:sub(str_len - j + 1, str_len - j + 1) then\n                is_palindrome\
    \ = false\n                break\n            end\n        end\n        if is_palindrome\
    \ then\n            if #int_to_string % 2 == 0 then\n                even_cnt\
    \ = even_cnt + 1\n            else\n                odd_cnt = odd_cnt + 1\n  \
    \          end\n        end\n    end\n    return {even_cnt, odd_cnt}\nend", " \
    \   -- Write your code here\n    local odd = 0\n    local even = 0\n    for i\
    \ = 1, n do\n        if is_palindrome(i) then\n            if (i % 2 == 0) then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return {even, odd}\nend", " \
    \   -- your code here\n    local even = 0\n    local odd = 0\n    for i = 1, n\
    \ do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n     \
    \           even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return {even, odd}\nend", "  local\
    \ even, odd = 0, 0\n  for i = 1, n do\n    local s = tostring(i)\n    if (string.reverse(s)\
    \ == s) then\n      if (i % 2 == 0) then\n        even = even + 1\n      else\n\
    \        odd = odd + 1\n      end\n    end\n  end\n  return {even, odd}\nend",
  "    local even, odd = 0, 0\n    local function is_palindrome(s)\n        local\
    \ _s = tostring(s)\n        local i, j = 1, #_s\n        while i < j do\n    \
    \        if _s:sub(i, i) ~= _s:sub(j, j) then\n                return false\n\
    \            end\n            i = i + 1\n            j = j - 1\n        end\n\
    \        return true\n    end\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend", "\tlocal e, o = 0, 0\n\tfor i = 1, n do\n\
    \t\tif i < 10 then\n\t\t\to = o + 1\n\t\telseif i < 100 then\n\t\t\tif i % 11\
    \ == 0 then\n\t\t\t\te = e + 1\n\t\t\telse\n\t\t\t\to = o + 1\n\t\t\tend\n\t\t\
    elseif i < 1000 then\n\t\t\tif i % 10 == i / 100 then\n\t\t\t\te = e + 1\n\t\t\
    \telse\n\t\t\t\to = o + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn {e, o}\nend", " \
    \ local even, odd = 0, 0\n  for i = 1, n do\n    if not is_palindrome(i) then\n\
    \      if i % 2 == 0 then\n        even = even + 1\n      else\n        odd =\
    \ odd + 1\n      end\n    end\n  end\n  return {even, odd}\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if i == reverse(i) then\n         \
    \   if i % 2 == 0 then\n                even = even + 1\n            else\n  \
    \              odd = odd + 1\n            end\n        end\n    end\n    return\
    \ {even, odd}\nend", "  -- your code here\n  local count_even = 0\n  local count_odd\
    \ = 0\n  for i = 1, n do\n    if tostring(i) == string.reverse(tostring(i)) then\n\
    \      if string.len(tostring(i)) % 2 == 0 then\n        count_even = count_even\
    \ + 1\n      else\n        count_odd = count_odd + 1\n      end\n    end\n  end\n\
    \  return {count_even, count_odd}\nend", "    -- Write your code here\n    return\
    \ {0, 0}\nend", "    -- YOUR CODE HERE\n    if n<1 or n>1000 then\n        return\
    \ {0,0}\n    end\n    local even = 0\n    local odd = 0\n    for i=1,n do\n  \
    \      local s = tostring(i)\n        local len = string.len(s)\n        local\
    \ isPalindrome = true\n        for j=1,len/2 do\n            if s:sub(j,j) ~=\
    \ s:sub(len-j+1,len-j+1) then\n                isPalindrome = false\n        \
    \        break\n            end\n        end\n        if isPalindrome then\n \
    \           if len%2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ {even,odd}\nend", "  local count = {0, 0}\n  local s = tostring(n)\n  local\
    \ l = #s\n  if l < 2 then\n    if n % 2 == 0 then\n      count[1] = 1\n    else\n\
    \      count[2] = 1\n    end\n  else\n    local n1 = tonumber(s:sub(1, l-1))\n\
    \    local n2 = tonumber(s:sub(2, l))\n    local x1 = n1 % 2 == 0 and 1 or 0\n\
    \    local x2 = n2 % 2 == 0 and 1 or 0\n    local t1 = even_odd_palindrome(n1)\n\
    \    local t2 = even_odd_palindrome(n2)\n    count[1] = t1[1] + t2[1] + x1 + x2\n\
    \    count[2] = t1[2] + t2[2] + x1 + x2\n  end\n  return count\nend", "    local\
    \ even = 0\n    local odd = 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend", "    local even, odd = 0, 0\n    for i\
    \ = 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return {even, odd}\nend", " \
    \   local even_count = 0\n    local odd_count = 0\n    for i = 1, n do\n     \
    \   if check_palindrome(i) then\n            if i % 2 == 0 then\n            \
    \    even_count = even_count + 1\n            else\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend", "    --your code here\nend", "  -- Write your code here\n\
    \  local even, odd = 0, 0\n  for i = 1, n do\n    if is_palindrome(i) then\n \
    \     if i % 2 == 0 then\n        even = even + 1\n      else\n        odd = odd\
    \ + 1\n      end\n    end\n  end\n  return {even, odd}\nend", "    local even\
    \ = 0\n    local odd = 0\n    for i = 1, n do\n        if is_palindrome(i) then\n\
    \            if is_even(i) then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return {even, odd}\nend", "  local even_num = 0\n  local odd_num = 0\n  for\
    \ i = 1, n do\n    if i < 10 then\n      odd_num = odd_num + 1\n    elseif i <\
    \ 100 then\n      if i % 11 == 0 then\n        odd_num = odd_num + 1\n      else\n\
    \        even_num = even_num + 1\n      end\n    elseif i < 1000 then\n      if\
    \ i % 10 == i // 100 then\n        odd_num = odd_num + 1\n      else\n       \
    \ even_num = even_num + 1\n      end\n    end\n  end\n  return {even_num, odd_num}\n\
    end", "\tlocal even, odd = 0, 0\n\tfor i = 1, n do\n\t\tif i < 10 then\n\t\t\t\
    even = even + 1\n\t\telseif check_palindrome(i) then\n\t\t\tlocal num = #tostring(i)\n\
    \t\t\tif num % 2 == 0 then\n\t\t\t\teven = even + 1\n\t\t\telse\n\t\t\t\todd =\
    \ odd + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn {even, odd}\nend", "  local t =\
    \ {0, 0}\n  local i = 1\n  while i <= n do\n    if i < 10 then\n      t[1] = t[1]\
    \ + 1\n    elseif i % 10 == 0 then\n      t[2] = t[2] + 1\n    else\n      if\
    \ math.floor(math.log10(i)) == math.floor(math.log10(i/10)) then\n        t[1]\
    \ = t[1] + 1\n      else\n        t[2] = t[2] + 1\n      end\n    end\n    i =\
    \ i + 1\n  end\n  return t\nend", "    local count = {0, 0}\n    for i = 1, n\
    \ do\n        if i == tonumber(string.reverse(tostring(i))) then\n           \
    \ if i % 2 == 0 then\n                count[1] = count[1] + 1\n            else\n\
    \                count[2] = count[2] + 1\n            end\n        end\n    end\n\
    \    return count\nend", "  local even, odd = 0, 0\n  for i = 1, n do\n    if\
    \ is_palindrome(i) then\n      if i % 2 == 0 then\n        even = even + 1\n \
    \     else\n        odd = odd + 1\n      end\n    end\n  end\n  return {even,\
    \ odd}\nend", "  local even_cnt, odd_cnt = 0, 0\n  for i = 1, n do\n    if is_palindrome(i)\
    \ then\n      if is_even(i) then\n        even_cnt = even_cnt + 1\n      else\n\
    \        odd_cnt = odd_cnt + 1\n      end\n    end\n  end\n  return {even_cnt,\
    \ odd_cnt}\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ i % 10 == 0 then\n            even = even + 1\n        elseif i % 11 == 0 then\n\
    \            odd = odd + 1\n        end\n    end\n    return {even, odd}\nend",
  "    -- Write your code here\n    local function IsPalindrome(s)\n        if s ==\
    \ string.reverse(s) then\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    local result = {0, 0}\n    for i = 1, n do\n\
    \        if IsPalindrome(tostring(i)) then\n            if i % 2 == 0 then\n \
    \               result[1] = result[1] + 1\n            else\n                result[2]\
    \ = result[2] + 1\n            end\n        end\n    end\n    return result\n\
    end", "  -- TODO: Add your code here\nend", "    local even, odd = 0, 0\n    for\
    \ i = 1, n do\n        if (('%d'):format(i) == ('%d'):format(i):reverse()) then\n\
    \            if i % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return {even, odd}\nend", "    return {\n        even = 12,\n        odd\
    \ = 21\n    }\nend\nreturn even_odd_palindrome", "    local even = 0\n    local\
    \ odd = 0\n    local str = \"\"\n    local mirror = \"\"\n    local tmp = \"\"\
    \n    for i = 1, n do\n        tmp = string.format(\"%d\", i)\n        str = string.reverse(tmp)\n\
    \        mirror = tmp .. str\n        if tonumber(mirror) <= n then\n        \
    \    if string.len(mirror) % 2 == 0 then\n                even = even + 1\n  \
    \          else\n                odd = odd + 1\n            end\n        end\n\
    \    end\n    return {even, odd}\nend", "    local function is_palindrome(num)\n\
    \        local str = tostring(num)\n        local rev = str:reverse()\n      \
    \  return str == rev\n    end\n    local even_count = 0\n    local odd_count =\
    \ 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if i %\
    \ 2 == 0 then\n                even_count = even_count + 1\n            else\n\
    \                odd_count = odd_count + 1\n            end\n        end\n   \
    \ end\n    return {even_count, odd_count}\nend", "    local even, odd = 0, 0\n\
    \    for i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return {even, odd}\nend",
  "  local even = 0\n  local odd = 0\n  for i = 1, n do\n    if is_palindrome(i) then\n\
    \      if i % 2 == 0 then\n        even = even + 1\n      else\n        odd =\
    \ odd + 1\n      end\n    end\n  end\n  return {even, odd}\nend", "  -- TODO:\
    \ Implement this function.\nend", "  local even, odd = 0, 0\n  for i = 1, n do\n\
    \    if i == tonumber(i .. i:reverse()) then\n      (i % 2 == 0 and even or odd)\
    \ = (i % 2 == 0 and even or odd) + 1\n    end\n  end\n  return {even, odd}\nend",
  "    local function is_palindrome(x)\n        local s = tostring(x)\n        local\
    \ n = #s\n        for i = 1, math.floor(n / 2) do\n            if s:sub(i, i)\
    \ ~= s:sub(n - i + 1, n - i + 1) then\n                return false\n        \
    \    end\n        end\n        return true\n    end\n    local even, odd = 0,\
    \ 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if i %\
    \ 2 == 0 then\n                even = even + 1\n            else\n           \
    \     odd = odd + 1\n            end\n        end\n    end\n    return {even,\
    \ odd}\nend", "  local res = {0, 0}\n  for i = 1, n do\n    if i < 10 then\n \
    \     res[1] = res[1] + 1\n    elseif i % 10 == 0 then\n      res[2] = res[2]\
    \ + 1\n    else\n      if i == tonumber(string.reverse(tostring(i))) then\n  \
    \      res[i % 2 + 1] = res[i % 2 + 1] + 1\n      end\n    end\n  end\n  return\
    \ res\nend", "    local n_int = math.floor(n)\n    local even_count = 0\n    local\
    \ odd_count = 0\n    for i = 1, n_int do\n        local str = tostring(i)\n  \
    \      local len = #str\n        local flag = true\n        for j = 1, len //\
    \ 2 do\n            if str:sub(j, j) ~= str:sub(len - j + 1, len - j + 1) then\n\
    \                flag = false\n                break\n            end\n      \
    \  end\n        if flag then\n            if len % 2 == 0 then\n             \
    \   even_count = even_count + 1\n            else\n                odd_count =\
    \ odd_count + 1\n            end\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend", "  local even, odd = 0, 0\n  for i = 1, n do\n    if is_palindrome(i)\
    \ then\n      if (i % 2 == 0) then\n        even = even + 1\n      else\n    \
    \    odd = odd + 1\n      end\n    end\n  end\n  return {even, odd}\nend", " \
    \   -- implement this function with your algorithm.\n    local even, odd = 0,\
    \ 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if i %\
    \ 2 == 0 then\n                even = even + 1\n            else\n           \
    \     odd = odd + 1\n            end\n        end\n    end\n    return {even,\
    \ odd}\nend", "  local evens, odds = 0, 0\n  for i = 1, n do\n    local s = tostring(i)\n\
    \    local l = #s\n    local is_palindrome = true\n    for j = 1, math.floor(l\
    \ / 2) do\n      if s:sub(j, j) ~= s:sub(l - j + 1, l - j + 1) then\n        is_palindrome\
    \ = false\n        break\n      end\n    end\n    if is_palindrome then\n    \
    \  if l % 2 == 0 then\n        evens = evens + 1\n      else\n        odds = odds\
    \ + 1\n      end\n    end\n  end\n  return {evens, odds}\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if tostring(i) == string.reverse(tostring(i))\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend", "    return {0, 0}\nend", "  local result\
    \ = {0, 0}\n  for i = 1, n do\n    if i == string.reverse(i) then\n      if i\
    \ % 2 == 0 then\n        result[1] = result[1] + 1\n      else\n        result[2]\
    \ = result[2] + 1\n      end\n    end\n  end\n  return result\nend", "    -- Write\
    \ your code here\n    local even = 0\n    local odd = 0\n    for i = 1, n do\n\
    \        if (i == reverse(i)) then\n            if (i % 2 == 0) then\n       \
    \         even = even + 1\n            else\n                odd = odd + 1\n \
    \           end\n        end\n    end\n    return {even, odd}\nend", "  local\
    \ palindromes = {}\n  local e = 0\n  local o = 0\n  for i = 1, n do\n    local\
    \ s = tostring(i)\n    local l = s:len()\n    local is = true\n    for j = 1,\
    \ l/2 do\n      if s:sub(j, j) ~= s:sub(l-j+1, l-j+1) then\n        is = false\n\
    \        break\n      end\n    end\n    if is then\n      palindromes[#palindromes+1]\
    \ = i\n      if i % 2 == 0 then\n        e = e + 1\n      else\n        o = o\
    \ + 1\n      end\n    end\n  end\n  return {e, o}\nend", "    -- Write your code\
    \ here\n    local even_count = 0\n    local odd_count = 0\n    for i = 1, n do\n\
    \        if(is_palindrome(i)) then\n            if(i % 2 == 0) then\n        \
    \        even_count = even_count + 1\n            else\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend", "\t-- TODO: Implementation required\nend", "    local c1,\
    \ c2 = 0, 0\n    for i = 1, n do\n        if i % 10 == 0 then\n            c1\
    \ = c1 + 1\n        elseif i == reverse(i) then\n            c2 = c2 + 1\n   \
    \     end\n    end\n    return {c1, c2}\nend", "    local even = 0\n    local\
    \ odd = 0\n    if n == 1 then\n        return {1, 0}\n    end\n    for i = 1,\
    \ n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n   \
    \             even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return {even, odd}\nend", "  -- TODO:\n\
    end", "\tlocal even, odd = 0, 0\n\tfor i = 1, n do\n\t\tif tonumber(tostring(i):reverse())\
    \ == i then\n\t\t\tif i % 2 == 0 then\n\t\t\t\teven = even + 1\n\t\t\telse\n\t\
    \t\t\todd = odd + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn {even, odd}\nend", "\t\
    -- write your code here\n\tlocal even_cnt = 0\n\tlocal odd_cnt = 0\n\tfor i =\
    \ 1, n do\n\t\tif is_palindrome(i) then\n\t\t\tif is_even(i) then\n\t\t\t\teven_cnt\
    \ = even_cnt + 1\n\t\t\telse\n\t\t\t\todd_cnt = odd_cnt + 1\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn {even_cnt, odd_cnt}\nend", "    -- TODO: write code here\nend",
  "  -- TODO: write your code here\n  local count = {0, 0}\n  local function is_palindrome(x)\n\
    \    local res = 0\n    local origin = x\n    while x > 0 do\n      res = res\
    \ * 10 + x % 10\n      x = math.floor(x / 10)\n    end\n    return res == origin\n\
    \  end\n  for i = 1, n do\n    if is_palindrome(i) then\n      if i % 2 == 0 then\n\
    \        count[1] = count[1] + 1\n      else\n        count[2] = count[2] + 1\n\
    \      end\n    end\n  end\n  return count\nend", "    local res = {0, 0}\n  \
    \  for i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                res[1] = res[1] + 1\n            else\n            \
    \    res[2] = res[2] + 1\n            end\n        end\n    end\n    return res\n\
    end", "    -- TODO\nend", "    if n < 1 or n > 10^3 then\n        return nil\n\
    \    end\n    local even, odd = 0, 0\n    local function palindrome(i)\n     \
    \   local s = tostring(i)\n        return s == string.reverse(s)\n    end\n  \
    \  for i = 1, n do\n        if palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return {even, odd}\nend", " \
    \ local even = 0\n  local odd = 0\n  for i = 1, n do\n    if string.reverse(tostring(i))\
    \ == tostring(i) then\n      if i % 2 == 0 then\n        even = even + 1\n   \
    \   else\n        odd = odd + 1\n      end\n    end\n  end\n  return {even, odd}\n\
    end", "    -- write your code here\n    local o, e = 0, 0\n    for i = 1, n do\n\
    \        if type(i) == 'string' then\n            if i == string.reverse(i) then\n\
    \                if i:sub(#i / 2, #i / 2) == \"0\" then\n                    e\
    \ = e + 1\n                else\n                    o = o + 1\n             \
    \   end\n            end\n        else\n            if string.sub(i, 1, #tostring(i)\
    \ / 2) == string.reverse(string.sub(i, 1, #tostring(i) / 2)) then\n          \
    \      if tostring(i):sub(#tostring(i) / 2, #tostring(i) / 2) == \"0\" then\n\
    \                    e = e + 1\n                else\n                    o =\
    \ o + 1\n                end\n            end\n        end\n    end\n    return\
    \ {e, o}\nend\nreturn even_odd_palindrome", "    -- Write your code here\n   \
    \ local evenCount = 0\n    local oddCount = 0\n    local i = 1\n    while i <=\
    \ n do\n        if isPalindrome(i) then\n            if isEven(i) then\n     \
    \           evenCount = evenCount + 1\n            else\n                oddCount\
    \ = oddCount + 1\n            end\n        end\n        i = i + 1\n    end\n \
    \   return {evenCount, oddCount}\nend", "  -- your code here\n  local even = 0\n\
    \  local odd = 0\n  for i = 1, n do\n    if is_palindrome(i) then\n      if i\
    \ % 2 == 0 then\n        even = even + 1\n      else\n        odd = odd + 1\n\
    \      end\n    end\n  end\n  return {even, odd}\nend", "\tlocal count_even, count_odd\
    \ = 0, 0\n\tfor i = 1, n do\n\t\tif tostring(i) == string.reverse(tostring(i))\
    \ then\n\t\t\ti % 2 == 0 and count_even = count_even + 1 or count_odd = count_odd\
    \ + 1\n\t\tend\n\tend\n\treturn {count_even, count_odd}\nend", "    local even\
    \ = 0\n    local odd = 0\n    for i = 1, n do\n        if is_palindrome(i) then\n\
    \            if is_even(i) then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return {even, odd}\nend", "\tlocal count_even, count_odd = 0, 0\n\tlocal\
    \ function check_even(n)\n\t\tn = tostring(n)\n\t\tfor i = 1, #n//2 do\n\t\t\t\
    if n:sub(i, i) ~= n:sub(#n+1-i, #n+1-i) then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\t\treturn true\n\tend\n\tlocal function check_odd(n)\n\t\tn = tostring(n)\n\
    \t\tfor i = 1, #n//2 do\n\t\t\tif n:sub(i, i) ~= n:sub(#n+1-i, #n+1-i) then\n\t\
    \t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tfor i = 1, n\
    \ do\n\t\tif check_even(i) then\n\t\t\tcount_even = count_even + 1\n\t\tend\n\t\
    \tif check_odd(i) then\n\t\t\tcount_odd = count_odd + 1\n\t\tend\n\tend\n\treturn\
    \ {count_even, count_odd}\nend", "  local function is_palindrome(n)\n    local\
    \ m = n\n    local r = 0\n    while m > 0 do\n      r = r * 10 + m % 10\n    \
    \  m = math.floor(m / 10)\n    end\n    return r == n\n  end\n  local r = { 0,\
    \ 0 }\n  for i = 1, n do\n    if is_palindrome(i) then\n      r[i % 2 + 1] = r[i\
    \ % 2 + 1] + 1\n    end\n  end\n  return r\nend", "    local even = 0\n    local\
    \ odd = 0\n    for i = 1, n do\n        if is_palindrome(i) then\n           \
    \ if i % 2 == 0 then\n                even = even + 1\n            else\n    \
    \            odd = odd + 1\n            end\n        end\n    end\n    return\
    \ {even, odd}\nend", "  local even, odd = 0, 0\n  local i = 0\n  while i <= n\
    \ do\n    local num = i\n    local rev = 0\n    while num > 0 do\n      rev =\
    \ rev * 10 + num % 10\n      num = math.floor(num / 10)\n    end\n    if rev ==\
    \ i then\n      if rev % 2 == 0 then\n        even = even + 1\n      else\n  \
    \      odd = odd + 1\n      end\n    end\n    i = i + 1\n  end\n  return {even,\
    \ odd}\nend", "    -- n = 100\n    -- k = 0\n    -- local odd = 1\n    -- for\
    \ i = 1, n do\n    --     if #tostring(i) % 2 == 0 then\n    --         k = k\
    \ + 1\n    --     else\n    --         odd = odd + 1\n    --     end\n    -- end\n\
    \    -- return {k, odd}\n    local function is_palindrome(k)\n        -- \u56DE\
    \u6587\n        local s = tostring(k)\n        local b, e = 1, #s\n        while\
    \ b < e do\n            if s:sub(b, b) ~= s:sub(e, e) then\n                return\
    \ false\n            end\n            b = b + 1\n            e = e - 1\n     \
    \   end\n        return true\n    end\n    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if #tostring(i) % 2 ==\
    \ 0 then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return {even, odd}\nend",
  "\tlocal even, odd = 0, 0\n\tfor i = 1, n do\n\t\tif #to_string(i) == 1 then\n\t\
    \t\todd = odd + 1\n\t\telseif to_string(i):sub(1, 1) == to_string(i):sub(-1, -1)\
    \ then\n\t\t\tif i % 2 == 0 then\n\t\t\t\teven = even + 1\n\t\t\telse\n\t\t\t\t\
    odd = odd + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn {even, odd}\nend", "    local\
    \ res = {0, 0}\n    if n == 1 then\n        res[1] = 0\n        res[2] = 1\n \
    \       return res\n    end\n    if n == 2 then\n        res[1] = 1\n        res[2]\
    \ = 1\n        return res\n    end\n    res[1] = 2\n    res[2] = 2\n    local\
    \ count = 3\n    local sqrt = math.sqrt(n)\n    while count <= sqrt do\n     \
    \   if math.floor(sqrt) * math.floor(sqrt) == n then\n            res[1] = res[1]\
    \ + 1\n        end\n        count = count + 1\n    end\n    if math.floor(sqrt)\
    \ * math.floor(sqrt) == n then\n        res[2] = res[2] + math.floor(sqrt) - 1\n\
    \    else\n        res[2] = res[2] + math.floor(sqrt)\n    end\n    return res\n\
    end", "    if not (is_integer(n) and n > 0 and n <= 10^3) then\n        error(\"\
    invalid input: \" .. tostring(n))\n    end\n    local even, odd = 0, 0\n    for\
    \ i = 1, n do\n        if is_palindrome(i) then\n            if math.fmod(i, 2)\
    \ == 0 then\n                even = even + 1\n            else\n             \
    \   odd = odd + 1\n            end\n        end\n    end\n    return {even, odd}\n\
    end", "  local even, odd = 0, 0\n  for i = 1, n do\n    local str = tostring(i)\n\
    \    local rev = string.reverse(str)\n    if str == rev then\n      if i % 2 ==\
    \ 0 then\n        even = even + 1\n      else\n        odd = odd + 1\n      end\n\
    \    end\n  end\n  return {even, odd}\nend", "    -- Write your code here\n  \
    \  local res = {0, 0}\n    for i = 1, n do\n        if is_palindrome(i) then\n\
    \            if i % 2 == 0 then\n                res[1] = res[1] + 1\n       \
    \     else\n                res[2] = res[2] + 1\n            end\n        end\n\
    \    end\n    return res\nend", "  if n < 1 or n > 1000 then\n    return nil\n\
    \  end\n  local even_count = 0\n  local odd_count = 0\n  for i = 1, n do\n   \
    \ if string.format(\"%d\", i) == string.reverse(string.format(\"%d\", i)) then\n\
    \      if i % 2 == 0 then\n        even_count = even_count + 1\n      else\n \
    \       odd_count = odd_count + 1\n      end\n    end\n  end\n  return {even_count,\
    \ odd_count}\nend", "  local ev_cnt, od_cnt = 0, 0\n  for i = 1, n do\n    local\
    \ str = tostring(i)\n    local rev = string.reverse(str)\n    if str == rev then\n\
    \      local len = #str\n      if len == 1 then\n        od_cnt = od_cnt + 1\n\
    \      elseif len == 2 then\n        if str:byte(1) == str:byte(2) then\n    \
    \      od_cnt = od_cnt + 1\n        else\n          ev_cnt = ev_cnt + 1\n    \
    \    end\n      else\n        if len % 2 == 0 then\n          ev_cnt = ev_cnt\
    \ + 1\n        else\n          od_cnt = od_cnt + 1\n        end\n      end\n \
    \   end\n  end\n  return {ev_cnt, od_cnt}\nend", "    local function is_palindrome(x)\n\
    \        local s = tostring(x)\n        local i, j = 1, #s\n        while i <\
    \ j do\n            if s:sub(i, i) ~= s:sub(j, j) then\n                return\
    \ false\n            end\n            i = i + 1\n            j = j - 1\n     \
    \   end\n        return true\n    end\n    local function is_even(x)\n       \
    \ return tostring(x):len() % 2 == 0\n    end\n    local result = {0, 0}\n    for\
    \ i = 1, n do\n        if is_palindrome(i) then\n            if is_even(i) then\n\
    \                result[1] = result[1] + 1\n            else\n               \
    \ result[2] = result[2] + 1\n            end\n        end\n    end\n    return\
    \ result\nend\nreturn even_odd_palindrome", "    local function is_palindrome(number)\n\
    \        local temp = number\n        local reverse = 0\n        while temp >\
    \ 0 do\n            reverse = reverse * 10 + temp % 10\n            temp = math.floor(temp\
    \ / 10)\n        end\n        return number == reverse\n    end\n    local even_number,\
    \ odd_number = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n \
    \           if i % 2 == 0 then\n                even_number = even_number + 1\n\
    \            else\n                odd_number = odd_number + 1\n            end\n\
    \        end\n    end\n    return {even_number, odd_number}\nend", "    local\
    \ is_palindrome = function(i)\n        local i_str = tostring(i)\n        local\
    \ i_len = i_str:len()\n        for ii = 1, i_len / 2 do\n            if i_str:sub(ii,\
    \ ii) ~= i_str:sub(i_len - ii + 1, i_len - ii + 1) then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ even_cnt = 0\n    local odd_cnt = 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even_cnt = even_cnt +\
    \ 1\n            else\n                odd_cnt = odd_cnt + 1\n            end\n\
    \        end\n    end\n    return {even_cnt, odd_cnt}\nend", "\tlocal even, odd\
    \ = 0, 0\n\tfor i = 1, n do\n\t\tlocal str = tostring(i)\n\t\tif is_palindrome(str)\
    \ then\n\t\t\tif #str % 2 == 0 then\n\t\t\t\teven = even + 1\n\t\t\telse\n\t\t\
    \t\todd = odd + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn {even, odd}\nend", "  local\
    \ res = {0, 0}\n  for i = 1, n do\n    local str = tostring(i)\n    local rev\
    \ = string.reverse(str)\n    if rev == str then\n      if #str % 2 == 0 then\n\
    \        res[1] = res[1] + 1\n      else\n        res[2] = res[2] + 1\n      end\n\
    \    end\n  end\n  return res\nend", "    local even_count = 0\n    local odd_count\
    \ = 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if i\
    \ % 2 == 0 then\n                even_count = even_count + 1\n            else\n\
    \                odd_count = odd_count + 1\n            end\n        end\n   \
    \ end\n    return {even_count, odd_count}\nend", "    local even, odd = 0, 0\n\
    \    for i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return {even, odd}\nend",
  "    local even, odd = 0, 0\n    for i = 1, n do\n        if tostring(i) == string.reverse(tostring(i))\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend", "    if n < 1 or n > 1000 then\n      \
    \  return {0, 0}\n    end\n    local even = 0\n    local odd = 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return {even, odd}\nend", " \
    \   local even = 0\n    local odd = 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend", "  local even, odd = 0, 0\n  for i = 1,\
    \ n do\n    if is_palindrome(i) then\n      if i % 2 == 0 then\n        even =\
    \ even + 1\n      else\n        odd = odd + 1\n      end\n    end\n  end\n  return\
    \ {even, odd}\nend", "  if n <= 0 then\n    return nil\n  end\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, n do\n    if is_palindrome(i) then\n      if\
    \ (i % 2) == 0 then\n        even = even + 1\n      else\n        odd = odd +\
    \ 1\n      end\n    end\n  end\n  return {even, odd}\nend", "  local even, odd\
    \ = 0, 0\n  for i = 1, n do\n    if is_palindrome(i) then\n      if math.fmod(i,\
    \ 2) == 0 then\n        even = even + 1\n      else\n        odd = odd + 1\n \
    \     end\n    end\n  end\n  return {even, odd}\nend", "\tlocal even, odd = 0,\
    \ 0\n\tlocal single, double = 1, 10\n\twhile single <= n do\n\t\teven = even +\
    \ math.floor(n / single)\n\t\todd = odd + math.floor(n / double)\n\t\tsingle =\
    \ single * 10\n\t\tdouble = double * 10\n\tend\n\treturn {even, odd}\nend", " \
    \   if n <= 0 then\n        return {0, 0}\n    end\n    local even = 0\n    local\
    \ odd = 0\n    local left = 1\n    local right = n\n    while left <= right do\n\
    \        if left % 2 == 0 then\n            even = even + 1\n        else\n  \
    \          odd = odd + 1\n        end\n        if left ~= right then\n       \
    \     if right % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n        left = left\
    \ + 1\n        right = right - 1\n    end\n    return {even, odd}\nend", "  --\
    \ TODO: Implement this method!\n  local even = 0\n  local odd = 0\n  for i = 1,\
    \ n do\n    local str = tostring(i)\n    local revStr = string.reverse(str)\n\
    \    if str == revStr then\n      if #str % 2 == 0 then\n        even = even +\
    \ 1\n      else\n        odd = odd + 1\n      end\n    end\n  end\n  return {even,\
    \ odd}\nend", "    local function is_palindrome(i)\n        local r = 0\n    \
    \    local x = i\n        while x > 0 do\n            r = r * 10 + x % 10\n  \
    \          x = x // 10\n        end\n        return r == i\n    end\n    local\
    \ even = 0\n    local odd = 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend", "  -- TODO: write code here\nend", "  \
    \  -- Write your code here\n    local res = {0, 0}\n    for i = 1, n do\n    \
    \    if i <= 9 then\n            res[2] = res[2] + 1\n        elseif i >= 10 and\
    \ i <= 99 then\n            if i % 11 == 0 then\n                res[1] = res[1]\
    \ + 1\n            else\n                res[2] = res[2] + 1\n            end\n\
    \        elseif i >= 100 and i <= 999 then\n            if i / 100 == math.floor(i\
    \ / 100) % 10 then\n                res[1] = res[1] + 1\n            else\n  \
    \              res[2] = res[2] + 1\n            end\n        end\n    end\n  \
    \  return res\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n      \
    \  if check_palindrome(i) then\n            if i % 2 == 0 then\n             \
    \   even = even + 1\n            else\n                odd = odd + 1\n       \
    \     end\n        end\n    end\n    return {even, odd}\nend", "  -- your code\
    \ here\n  local result = {0, 0}\n  for i = 1, n do\n    local s = tostring(i)\n\
    \    local rev = s:reverse()\n    if s == rev then\n      if #s % 2 == 0 then\n\
    \        result[1] = result[1] + 1\n      else\n        result[2] = result[2]\
    \ + 1\n      end\n    end\n  end\n  return result\nend", "    -- Write your code\
    \ here\n    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if is_even(i) then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend", "    local even_cnt, odd_cnt = 0, 0\n \
    \   for num = 1, n do\n        local rev = reverse(num)\n        if num == rev\
    \ then\n            if num % 2 == 0 then\n                even_cnt = even_cnt\
    \ + 1\n            else\n                odd_cnt = odd_cnt + 1\n            end\n\
    \        end\n    end\n    return {even_cnt, odd_cnt}\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n        \
    \    if i % 2 == 0 then\n                even = even + 1\n            else\n \
    \               odd = odd + 1\n            end\n        end\n    end\n    return\
    \ {even, odd}\nend", "    if n < 1 or n > 10^3 then return nil end\n    local\
    \ t = {n=0, d=0}\n    for i=1,n do\n        if is_palindrome(i) then\n       \
    \     if i % 2 == 0 then\n                t.n = t.n + 1\n            else\n  \
    \              t.d = t.d + 1\n            end\n        end\n    end\n    return\
    \ t\nend", "  local even, odd = 0, 0\n  for i = 1, n do\n    if (tostring(i) ==\
    \ string.reverse(tostring(i))) then\n      if (i % 2 == 0) then\n        even\
    \ = even + 1\n      else\n        odd = odd + 1\n      end\n    end\n  end\n \
    \ return {even, odd}\nend", "  local evens, odds = 0, 0\n  for i = 1, n do\n \
    \   if is_palindrome(i) then\n      if i % 2 == 0 then\n        evens = evens\
    \ + 1\n      else\n        odds = odds + 1\n      end\n    end\n  end\n  return\
    \ {evens, odds}\nend", "    -- Write your code here\n    local even, odd = 0,\
    \ 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if i %\
    \ 2 == 0 then\n                even = even + 1\n            else\n           \
    \     odd = odd + 1\n            end\n        end\n    end\n    return {even,\
    \ odd}\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend", "\tlocal even, odd = 0, 0\n\tfor i = 1,\
    \ n do\n\t\tlocal str = tostring(i)\n\t\tif string.reverse(str) == str then\n\t\
    \t\tif string.len(str) % 2 == 0 then\n\t\t\t\teven = even + 1\n\t\t\telse\n\t\t\
    \t\todd = odd + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn {even, odd}\nend", "  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, n do\n    if is_palindrome(i)\
    \ then\n      if i % 2 == 0 then\n        even_count = even_count + 1\n      else\n\
    \        odd_count = odd_count + 1\n      end\n    end\n  end\n  return {even_count,\
    \ odd_count}\nend", "    local count = 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                count = count + 1\n  \
    \          end\n        end\n    end\n    return {n - count, count}\nend", " \
    \   local t = {0, 0}\n    for i = 1, n do\n        if is_palindrome(i) then\n\
    \            if is_even(i) then\n                t[1] = t[1] + 1\n           \
    \ else\n                t[2] = t[2] + 1\n            end\n        end\n    end\n\
    \    return t\nend\n_exports.even_odd_palindrome = even_odd_palindrome", "   \
    \ -- Write your code here\n    local isPalindrome = function(n)\n        local\
    \ m = n\n        local reverse = 0\n        while m > 0 do\n            reverse\
    \ = reverse * 10 + m % 10\n            m = math.floor(m / 10)\n        end\n \
    \       return reverse == n\n    end\n    local countEven = 0\n    local countOdd\
    \ = 0\n    for i = 1, n do\n        if isPalindrome(i) then\n            if i\
    \ % 2 == 0 then\n                countEven = countEven + 1\n            else\n\
    \                countOdd = countOdd + 1\n            end\n        end\n    end\n\
    \    return {countEven, countOdd}\nend", "  local i, o = 0, 0\n  for d = 0, n,\
    \ 1 do\n    if d == 0 or d == 1 then\n      o = o + 1\n    elseif (d > 9 and d\
    \ < 100) or (d > 999 and d < 10000) then\n      i = i + 1\n    elseif (d > 99\
    \ and d < 1000) or (d > 9999 and d < 100000) then\n      o = o + 1\n    end\n\
    \  end\n  return {i, o}\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if is_palindrome(i) then\n            if is_even(i) then\n          \
    \      even = even + 1\n            else\n                odd = odd + 1\n    \
    \        end\n        end\n    end\n    return {even, odd}\nend", "    local function\
    \ is_palindrome(k)\n        local s = tostring(k)\n        local n = string.len(s)\n\
    \        local half = math.floor(n / 2)\n        for i = 1, half do\n        \
    \    if s:sub(i, i) ~= s:sub(n - i + 1, n - i + 1) then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ even = 0\n    local odd = 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend\n_EXPORTED_FUNCTIONS.even_odd_palindrome\
    \ = even_odd_palindrome", "    local is_palindrome = function(n)\n        local\
    \ m = n\n        local rev = 0\n        while m > 0 do\n            rev = rev\
    \ * 10 + m % 10\n            m = math.floor(m / 10)\n        end\n        return\
    \ rev == n\n    end\n    local total_even = 0\n    local total_odd = 0\n    for\
    \ i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                total_even = total_even + 1\n            else\n             \
    \   total_odd = total_odd + 1\n            end\n        end\n    end\n    return\
    \ {total_even, total_odd}\nend", "    local count = {0, 0}\n    local step = 1\n\
    \    local e = n\n    while e > 0 do\n        local q = math.floor(e / 10)\n \
    \       local r = e % 10\n        e = q\n        if r ~= 0 then\n            count[1]\
    \ = count[1] + step\n        end\n        step = step * 10\n    end\n    if n\
    \ > 0 then\n        count[2] = n - count[1]\n    end\n    return count\nend",
  "    local even_count = 0\n    local odd_count = 0\n    for i = 1, n do\n      \
    \  if is_palindrome(i) then\n            if i % 2 == 0 then\n                even_count\
    \ = even_count + 1\n            else\n                odd_count = odd_count +\
    \ 1\n            end\n        end\n    end\n    return {even_count, odd_count}\n\
    end", "    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return {even, odd}\nend", "    local even, odd = 0, 0\n    if n <\
    \ 1 or n > 1000 then\n        error(\"input n is out of range\")\n    end\n  \
    \  for i = 1, n do\n        if i == string.reverse(i) then\n            if i %\
    \ 2 == 0 then\n                even = even + 1\n            else\n           \
    \     odd = odd + 1\n            end\n        end\n    end\n    return {even,\
    \ odd}\nend", "    -- Write your code here\n    local even = 0\n    local odd\
    \ = 0\n    for i = 1, n do\n        if i % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ {even, odd}\nend", "  local function is_palindrome(i)\n    local k = i\n   \
    \ local j = 0\n    while k > 0 do\n      j = j * 10 + k % 10\n      k = math.floor(k\
    \ / 10)\n    end\n    return i == j\n  end\n  local even_cnt, odd_cnt = 0, 0\n\
    \  for i = 1, n do\n    if is_palindrome(i) then\n      if i % 2 == 0 then\n \
    \       even_cnt = even_cnt + 1\n      else\n        odd_cnt = odd_cnt + 1\n \
    \     end\n    end\n  end\n  return {even_cnt, odd_cnt}\nend", "  local even,\
    \ odd = 0, 0\n  for i = 1, n do\n    if is_palindrome(i) then\n      if i % 2\
    \ == 0 then\n        even = even + 1\n      else\n        odd = odd + 1\n    \
    \  end\n    end\n  end\n  return {even, odd}\nend", "  local t = {0, 0}\n  for\
    \ i = 1, n do\n    if is_palindrome(i) then\n      t[i % 2 + 1] = t[i % 2 + 1]\
    \ + 1\n    end\n  end\n  return t\nend", "  local odd = 0\n  local even = 0\n\
    \  for i = 1, n do\n    if (i < 10) then\n      odd = odd + 1\n    elseif (i %\
    \ 11 == 0) then\n      odd = odd + 1\n    elseif (i < 100) then\n      even =\
    \ even + 1\n    elseif (string.sub(i, 1, 1) == string.sub(i, #tostring(i), #tostring(i)))\
    \ then\n      if (i < 1000) then\n        odd = odd + 1\n      elseif (string.sub(i,\
    \ 2, 2) == string.sub(i, #tostring(i) - 1, #tostring(i) - 1)) then\n        if\
    \ (i < 10000) then\n          even = even + 1\n        elseif (string.sub(i, 3,\
    \ 3) == string.sub(i, #tostring(i) - 2, #tostring(i) - 2)) then\n          if\
    \ (i < 100000) then\n            odd = odd + 1\n          elseif (string.sub(i,\
    \ 4, 4) == string.sub(i, #tostring(i) - 3, #tostring(i) - 3)) then\n         \
    \   if (i < 1000000) then\n              even = even + 1\n            elseif (string.sub(i,\
    \ 5, 5) == string.sub(i, #tostring(i) - 4, #tostring(i) - 4)) then\n         \
    \     if (i < 10000000) then\n                odd = odd + 1\n              elseif\
    \ (string.sub(i, 6, 6) == string.sub(i, #tostring(i) - 5, #tostring(i) - 5)) then\n\
    \                if (i < 100000000) then\n                  even = even + 1\n\
    \                elseif (string.sub(i, 7, 7) == string.sub(i, #tostring(i) - 6,\
    \ #tostring(i) - 6)) then\n                  if (i < 1000000000) then\n      \
    \              odd = odd + 1\n                  elseif (string.sub(i, 8, 8) ==\
    \ string.sub(i, #tostring(", "  local count = {0, 0}\n  local s = tostring(n)\n\
    \  local len = #s\n  for i = 1, len, 1 do\n    for j = i, len, 1 do\n      local\
    \ r = tonumber(s:sub(i, j))\n      if r > n then\n        break\n      end\n \
    \     if r % 2 == 0 then\n        count[1] = count[1] + 1\n      else\n      \
    \  count[2] = count[2] + 1\n      end\n    end\n  end\n  return count\nend", " \
    \   -- Insert your code here\n    return {}\nend", "    local e, o = 0, 0\n  \
    \  for i = 1, n do\n        if is_palindrome(i) then\n            if (i % 2 ==\
    \ 0) then\n                e = e + 1\n            else\n                o = o\
    \ + 1\n            end\n        end\n    end\n    return {e, o}\nend", "  local\
    \ even = 0\n  local odd = 0\n  local i = 1\n  while i <= n do\n    if is_palindrome(i)\
    \ then\n      if (i % 2) == 0 then\n        even = even + 1\n      else\n    \
    \    odd = odd + 1\n      end\n    end\n    i = i + 1\n  end\n  return {even,\
    \ odd}\nend", "    local even_count = 0\n    local odd_count = 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even_count = even_count + 1\n            else\n             \
    \   odd_count = odd_count + 1\n            end\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend", "  -- Insert your code here\n  local i = 1\n\
    \  local e_table = {}\n  local o_table = {}\n  while i <= n do\n    if (string.reverse(tostring(i))\
    \ == tostring(i)) then\n      if (i % 2 == 0) then\n        table.insert(e_table,\
    \ i)\n      else\n        table.insert(o_table, i)\n      end\n    end\n    i\
    \ = i + 1\n  end\n  return {e_table, o_table}\nend", "    local numEven, numOdd\
    \ = 0, 0\n    for i = 1, n do\n        local str = tostring(i)\n        if str\
    \ == string.reverse(str) then\n            if #str % 2 == 0 then\n           \
    \     numEven = numEven + 1\n            else\n                numOdd = numOdd\
    \ + 1\n            end\n        end\n    end\n    return {numEven, numOdd}\nend",
  "  local t = {0, 0}\n  local p = function(n)\n    local s = tostring(n)\n    local\
    \ i, j = 1, #s\n    while i < j do\n      if s:sub(i, i) ~= s:sub(j, j) then\n\
    \        return false\n      end\n      i = i + 1\n      j = j - 1\n    end\n\
    \    return true\n  end\n  for i = 1, n do\n    if p(i) then\n      if i % 2 ==\
    \ 0 then\n        t[1] = t[1] + 1\n      else\n        t[2] = t[2] + 1\n     \
    \ end\n    end\n  end\n  return t\nend", "  -- Insert your code here\n  return\
    \ {0, 0}\nend", "\tlocal even = 0\n\tlocal odd = 0\n\tfor i = 1, n do\n\t\tif\
    \ (is_palindrome(i)) then\n\t\t\tif (i % 2 == 0) then\n\t\t\t\teven = even + 1\n\
    \t\t\telse\n\t\t\t\todd = odd + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn {even,\
    \ odd}\nend", "    local a, b = 0, 0\n    if n % 2 == 0 then a = 1 end\n    for\
    \ i = 1, n / 2 do\n        if i % 2 == 0 then a = a + 1\n        else b = b +\
    \ 1 end\n    end\n    return {a, b}\nend", "  local result = {0, 0}\n  for i =\
    \ 1, n do\n    if is_palindrome(i) then\n      result[i % 2 + 1] = result[i %\
    \ 2 + 1] + 1\n    end\n  end\n  return result\nend", "    -- Write your code here\n\
    \    local even = 0\n    local odd = 0\n    for i = 1, n do\n        if i < 10\
    \ then\n            odd = odd + 1\n        elseif i < 100 then\n            local\
    \ a = math.floor(i / 10)\n            local b = i % 10\n            if a == b\
    \ then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        elseif i < 1000 then\n            local\
    \ a = math.floor(i / 100)\n            local b = math.floor(i / 10) % 10\n   \
    \         local c = i % 10\n            if a == c then\n                even =\
    \ even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return {even, odd}\nend", "    local t = {0, 0}\n \
    \   for i = 1, n do\n        if is_palindrome(i) then\n            t[i % 2 ==\
    \ 0 and 1 or 2] = t[i % 2 == 0 and 1 or 2] + 1\n        end\n    end\n    return\
    \ t\nend", "    local count = {0, 0}\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            count[(i % 2) + 1] = count[(i % 2) + 1] + 1\n        end\n\
    \    end\n    return count\nend", "  local even_count = 0\n  local odd_count =\
    \ 0\n  for i = 1, n do\n    if is_palindrome(i) then\n      if i % 2 == 0 then\n\
    \        even_count = even_count + 1\n      else\n        odd_count = odd_count\
    \ + 1\n      end\n    end\n  end\n  return {even_count, odd_count}\nend", "  \
    \  local even_count = 0\n    local odd_count = 0\n    local str_n = tostring(n)\n\
    \    local str_n_len = string.len(str_n)\n    local half_str_n_len = math.floor(str_n_len\
    \ / 2)\n    local left_str, right_str\n    for i = 1, half_str_n_len do\n    \
    \    left_str = string.sub(str_n, 1, i)\n        right_str = string.sub(str_n,\
    \ -i, -1)\n        if left_str == right_str then\n            -- get palindrome\n\
    \            local palindrome = tonumber(left_str .. string.sub(str_n, i + 1,\
    \ -i - 1) .. right_str)\n            if palindrome <= n then\n               \
    \ if palindrome % 2 == 0 then\n                    even_count = even_count + 1\n\
    \                else\n                    odd_count = odd_count + 1\n       \
    \         end\n            end\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend", "  local evens, odds = 0, 0\n  for i = 1, n do\n    local\
    \ palindrome = string.reverse(i)\n    if palindrome == i then\n      if i % 2\
    \ == 0 then\n        evens = evens + 1\n      else\n        odds = odds + 1\n\
    \      end\n    end\n  end\n  return {evens, odds}\nend", "    local even, odd\
    \ = 0, 0\n    for i = 1, n do\n        if (i < 10 and i % 2 == 0) or (i >= 10\
    \ and string.match(tostring(i), \"^(%d)(%d+)%1$\") and i % 2 == 0) then\n    \
    \        even = even + 1\n        elseif (i < 10 and i % 2 == 1) or (i >= 10 and\
    \ string.match(tostring(i), \"^(%d)(%d+)%1$\") and i % 2 == 1) then\n        \
    \    odd = odd + 1\n        end\n    end\n    return {even, odd}\nend", "  local\
    \ t = {0, 0}\n  for i = 1, n do\n    if is_palindrome(i) then\n      if i % 2\
    \ == 0 then\n        t[1] = t[1] + 1\n      else\n        t[2] = t[2] + 1\n  \
    \    end\n    end\n  end\n  return t\nend", "    if type(n) ~= \"number\" or n\
    \ < 1 or n > 1000 then\n        return nil\n    end\n    local ret = {0, 0}\n\
    \    local t = {}\n    for i = 1, n do\n        t[i] = string.reverse(tostring(i))\n\
    \    end\n    for i = 1, n do\n        if t[i] == tostring(i) then\n         \
    \   if i % 2 == 0 then\n                ret[1] = ret[1] + 1\n            else\n\
    \                ret[2] = ret[2] + 1\n            end\n        end\n    end\n\
    \    return ret\nend", "    local function is_palindrome(v)\n        v = tostring(v)\n\
    \        return v == string.reverse(v)\n    end\n    local even, odd = 0, 0\n\
    \    for i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return {even, odd}\nend",
  "  -- TODO: Implement\nend", "  local even = 0\n  local odd = 0\n  local digits\
    \ = string.len(n)", "    local n_odd_count = n >> 1\n    local n_even_count =\
    \ n - n_odd_count\n    if n % 2 == 1 then\n        n_odd_count = n_odd_count +\
    \ 1\n    end\n    return {n_even_count, n_odd_count}\nend\n_exports.even_odd_palindrome\
    \ = even_odd_palindrome"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
