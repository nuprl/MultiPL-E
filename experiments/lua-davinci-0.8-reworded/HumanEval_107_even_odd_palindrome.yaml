name: HumanEval_107_even_odd_palindrome
language: lua
prompt: "-- Given a positive integer n, return a table that has the number of even\
  \ and odd\n-- integer palindromes that fall within the range(1, n), inclusive.\n\
  -- Example 1:\n-- >>> even_odd_palindrome(3)\n-- {1, 2}\n-- Explanation:\n-- Integer\
  \ palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n-- Example\
  \ 2:\n-- >>> even_odd_palindrome(12)\n-- {4, 6}\n-- Explanation:\n-- Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  -- Note:\n-- 1. 1 <= n <= 10^3\n-- 2. returned table has the number of even and\
  \ odd integer palindromes respectively.\nlocal function even_odd_palindrome(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_palindrome\n\
  \    lu.assertEquals(candidate(123), {8, 13})\n    lu.assertEquals(candidate(12),\
  \ {4, 6})\n    lu.assertEquals(candidate(3), {1, 2})\n    lu.assertEquals(candidate(63),\
  \ {6, 8})\n    lu.assertEquals(candidate(25), {5, 6})\n    lu.assertEquals(candidate(19),\
  \ {4, 6})\n    lu.assertEquals(candidate(9), {4, 5})\n    lu.assertEquals(candidate(1),\
  \ {0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local even = 0\n    local odd = 0\n    local n2 = n // 2\n    local\
    \ a1 = n % 2\n    local a2 = n // 2\n    if a1 == 0 then\n        a1 = 1\n   \
    \     a2 = n2\n    end\n    for i = a1, a2 do\n        if tostring(i) == tostring(i):reverse()\
    \ then\n            if i > n2 then\n                odd = odd + 1\n          \
    \  else\n                even = even + 1\n            end\n        end\n    end\n\
    \    return {even, odd}\nend", "    local result = {0, 0}\n    for i = 1, n do\n\
    \        if is_palindrome(i) then\n            result[i % 2 + 1] = result[i %\
    \ 2 + 1] + 1\n        end\n    end\n    return result\nend", "    local function\
    \ is_palindrome(n)\n        local s = tostring(n)\n        for i = 1, #s/2 do\n\
    \            if s:sub(i, i) ~= s:sub(#s-i+1, #s-i+1) then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local res = {0,\
    \ 0}\n    for i = 1, n do\n        if is_palindrome(i) then\n            if is_even(i)\
    \ then\n                res[1] = res[1] + 1\n            else\n              \
    \  res[2] = res[2] + 1\n            end\n        end\n    end\n    return res\n\
    end", "    local odd, even = 0, 0\n    if n < 0 then\n        return nil\n   \
    \ end\n    for i = 1, n do\n        if i < 10 then\n            odd = odd + 1\n\
    \        elseif i % 10 == 0 then\n            even = even + 1\n        else\n\
    \            local a, b = i, i\n            local t = 0\n            while b >\
    \ 0 do\n                t = t * 10 + b % 10\n                b = math.floor(b\
    \ / 10)\n            end\n            if t == a then\n                if a % 2\
    \ == 0 then\n                    even = even + 1\n                else\n     \
    \               odd = odd + 1\n                end\n            end\n        end\n\
    \    end\n    return {even, odd}\nend", "    local isPalindrome = function(n)\n\
    \        local d = 1\n        while n // d >= 10 do\n            d = d * 10\n\
    \        end\n        while n > 0 do\n            local q = n // d\n         \
    \   local r = n % 10\n            if q ~= r then\n                return false\n\
    \            end\n            n = (n % d) // 10\n            d = d // 100\n  \
    \      end\n        return true\n    end\n    local count_even, count_odd = 0,\
    \ 0\n    for i = 1, n do\n        if isPalindrome(i) then\n            if i %\
    \ 2 == 0 then\n                count_even = count_even + 1\n            else\n\
    \                count_odd = count_odd + 1\n            end\n        end\n   \
    \ end\n    return {count_even, count_odd}\nend", "    if n < 1 or n > 1000 then\n\
    \        error(\"n must be in range (1, 1000) inclusive\")\n    end\n    local\
    \ even = 0\n    local odd = 0\n    for i = 1, n do\n        if tostring(i) ==\
    \ string.reverse(tostring(i)) then\n            if i % 2 == 0 then\n         \
    \       even = even + 1\n            else\n                odd = odd + 1\n   \
    \         end\n        end\n    end\n    return {even, odd}\nend", "    -- return\
    \ {1, 2}\n    -- return {4, 6}\nend", "  local count = {0, 0}\n  for i = 1, n\
    \ do\n    if is_palindrome(i) then\n      count[i % 2 + 1] = count[i % 2 + 1]\
    \ + 1\n    end\n  end\n  return count\nend", "    local even_cnt, odd_cnt = 0,\
    \ 0\n    for i = 1, n do\n        if checkPalindrome(i) then\n            if i\
    \ % 2 == 0 then\n                even_cnt = even_cnt + 1\n            else\n \
    \               odd_cnt = odd_cnt + 1\n            end\n        end\n    end\n\
    \    return {even_cnt, odd_cnt}\nend", "  -- insert your code here\n  local function\
    \ is_palindrome(num)\n    if num <= 0 then\n      return false\n    end\n    local\
    \ ds = {}\n    local m = num\n    while m > 0 do\n      table.insert(ds, m % 10)\n\
    \      m = math.floor(m / 10)\n    end\n    for i = 1, #ds / 2 do\n      if ds[i]\
    \ ~= ds[#ds - i + 1] then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local even_palindrome = 0\n  local odd_palindrome = 0\n  for\
    \ i = 1, n do\n    if is_palindrome(i) then\n      if i % 2 == 0 then\n      \
    \  even_palindrome = even_palindrome + 1\n      else\n        odd_palindrome =\
    \ odd_palindrome + 1\n      end\n    end\n  end\n  return {even_palindrome, odd_palindrome}\n\
    end", "    -- write your code here\n    local count_odd, count_even = 0, 0\n \
    \   for i = 1, n do\n        if check_palindrome(i) then\n            if i % 2\
    \ == 0 then\n                count_even = count_even + 1\n            else\n \
    \               count_odd = count_odd + 1\n            end\n        end\n    end\n\
    \    return {count_even, count_odd}\nend", "  -- fill the table with the number\
    \ of odd and even integer palindromes.\n  local even_odd = {0, 0}\n  for i = 1,\
    \ n do\n    if is_palindrome(i) then\n      if i % 2 == 0 then\n        even_odd[1]\
    \ = even_odd[1] + 1\n      else\n        even_odd[2] = even_odd[2] + 1\n     \
    \ end\n    end\n  end\n  return even_odd\nend", "  local even, odd = 0, 0\n  for\
    \ i = 1, n do\n    if is_palindrome(i) then\n      if is_even(i) then\n      \
    \  even = even + 1\n      else\n        odd = odd + 1\n      end\n    end\n  end\n\
    \  return {even, odd}\nend", "    local cnt_even, cnt_odd = 0, 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if is_even(i) then\n\
    \                cnt_even = cnt_even + 1\n            else\n                cnt_odd\
    \ = cnt_odd + 1\n            end\n        end\n    end\n    return {cnt_even,\
    \ cnt_odd}\nend", "    local function is_palindrome(i)\n        local j = i\n\
    \        local k = 0\n        while j > 0 do\n            k = k * 10 + j % 10\n\
    \            j = math.floor(j / 10)\n        end\n        return k == i\n    end\n\
    \    local function even_odd_palindrome_1(n)\n        local even = 0\n       \
    \ local odd = 0\n        for i = 1, n do\n            if is_palindrome(i) then\n\
    \                if i % 2 == 0 then\n                    even = even + 1\n   \
    \             else\n                    odd = odd + 1\n                end\n \
    \           end\n        end\n        return {even, odd}\n    end\n    local function\
    \ even_odd_palindrome_2(n)\n        local function palindrome_count(n)\n     \
    \       if n < 10 then\n                return 9\n            end\n          \
    \  local count = 0\n            local l = 0\n            local m = n\n       \
    \     while m > 0 do\n                m = math.floor(m / 10)\n               \
    \ l = l + 1\n            end\n            m = 10 ^ (l - 1)\n            local\
    \ i = 1\n            while i <= l do\n                if i == 1 then\n       \
    \             count = count + 9\n                elseif i == l then\n        \
    \            count = count + (n - m + 1)\n                else\n             \
    \       count = count + 9 * m\n                end\n                i = i + 1\n\
    \            end\n            return count\n        end\n        return {palindrome_count(n)\
    \ / 2, palindrome_count(n) / 2}\n    end\n    return even_odd_palindrome_2(n)\n\
    end", "    local is_palindrome = function(n)\n        local s = tostring(n)\n\
    \        for i = 1, math.floor(#s / 2) do\n            if s:sub(i, i) ~= s:sub(#s\
    \ - i + 1, #s - i + 1) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    local even, odd = 0, 0\n    for\
    \ i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return {even, odd}\nend", " \
    \   local even, odd = 0, 0\n    for i = 1, n do\n        if i % 10 == 0 then goto\
    \ continue end\n        local r, s = 0, i\n        while s > 0 do\n          \
    \  r = r * 10 + s % 10\n            s = math.floor(s / 10)\n        end\n    \
    \    if r == i then\n            if i % 2 == 0 then\n                even = even\
    \ + 1\n            else\n                odd = odd + 1\n            end\n    \
    \    end\n        ::continue::\n    end\n    return {even, odd}\nend", "  -- TODO:\
    \ IMPLEMENT ME\nend", "\tlocal even, odd = 0, 0\n\tfor i = 1, n do\n\t\tlocal\
    \ s = tostring(i)\n\t\tlocal len = #s\n\t\tlocal palindrome = true\n\t\tfor j\
    \ = 1, math.floor(len / 2) do\n\t\t\tif s:sub(j, j) ~= s:sub(len - j + 1, len\
    \ - j + 1) then\n\t\t\t\tpalindrome = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tif palindrome then\n\t\t\tif i % 2 == 0 then\n\t\t\t\teven = even + 1\n\t\t\
    \telse\n\t\t\t\todd = odd + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn {even, odd}\n\
    end", "  local even, odd = 0, 0\n  for i = 1, n do\n    if is_palindrome(i) then\n\
    \      if i % 2 == 0 then\n        even = even + 1\n      else\n        odd =\
    \ odd + 1\n      end\n    end\n  end\n  return {even, odd}\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
