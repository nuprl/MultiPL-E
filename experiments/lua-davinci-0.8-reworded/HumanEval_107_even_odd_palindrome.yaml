name: HumanEval_107_even_odd_palindrome
language: lua
prompt: "-- Given a positive integer n, return a table that has the number of even\
  \ and odd\n-- integer palindromes that fall within the range(1, n), inclusive.\n\
  -- Example 1:\n-- >>> even_odd_palindrome(3)\n-- {1, 2}\n-- Explanation:\n-- Integer\
  \ palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n-- Example\
  \ 2:\n-- >>> even_odd_palindrome(12)\n-- {4, 6}\n-- Explanation:\n-- Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  -- Note:\n-- 1. 1 <= n <= 10^3\n-- 2. returned table has the number of even and\
  \ odd integer palindromes respectively.\nlocal function even_odd_palindrome(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_palindrome\n\
  \    lu.assertEquals(candidate(123), {8, 13})\n    lu.assertEquals(candidate(12),\
  \ {4, 6})\n    lu.assertEquals(candidate(3), {1, 2})\n    lu.assertEquals(candidate(63),\
  \ {6, 8})\n    lu.assertEquals(candidate(25), {5, 6})\n    lu.assertEquals(candidate(19),\
  \ {4, 6})\n    lu.assertEquals(candidate(9), {4, 5})\n    lu.assertEquals(candidate(1),\
  \ {0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: []
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
