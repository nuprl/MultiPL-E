name: HumanEval_75_is_multiply_prime
language: lua
prompt: "-- Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
  \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
  local function is_multiply_prime(a)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
  \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30), true)\n\
  \    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10), false)\n\
  \    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
  \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
  \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
  \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for key, value\
    \ in pairs(prime_numbers) do\n        if a % value == 0 then\n            if a\
    \ / value == 1 then\n                return true\n            else\n         \
    \       a = a / value\n            end\n        end\n    end\n    return false\n\
    end", "    local is_prime = function(n)\n        for i = 2, n - 1 do\n       \
    \     if n % i == 0 then\n                return false\n            end\n    \
    \    end\n        return true\n    end", "    local is_mul_prime = false\n   \
    \ local count = 0\n    local prime_temp = {}\n    for i = 2, a do\n        local\
    \ is_prime = true\n        for j = 2, i do\n            if i % j == 0 and i ~=\
    \ j then\n                is_prime = false\n                break\n          \
    \  end\n        end\n        if is_prime then\n            prime_temp[count] =\
    \ i\n            count = count + 1\n        end\n    end\n    for i = 1, #prime_temp\
    \ do\n        for j = 1, #prime_temp do\n            for k = 1, #prime_temp do\n\
    \                if a == prime_temp[i] * prime_temp[j] * prime_temp[k] then\n\
    \                    is_mul_prime = true\n                    break\n        \
    \        end\n            end\n        end\n    end\n    return is_mul_prime\n\
    end", end, "    if is_prime(a) then\n        return false\n    end\n    local\
    \ b = a / 2\n    local c = a / 3\n    if is_prime(b) and is_prime(c) then\n  \
    \      return true\n    end\n    return false\nend", "    local factors = prime_factors(a)\n\
    \    if #factors == 3 then\n        return true\n    else\n        return false\n\
    \    end\nend", "\t-- body\nend", "\tlocal function is_prime(a)\n\t\tlocal function\
    \ is_divisible(a, b)\n\t\t\tif a % b == 0 then\n\t\t\t\treturn true\n\t\t\telse\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\t\n\t\tif a < 2 then\n\t\t\treturn\
    \ false\n\t\telseif a < 4 then\n\t\t\treturn true\n\t\telseif is_divisible(a,\
    \ 2) then\n\t\t\treturn false\n\t\telse\n\t\t\tfor i = 3, math.sqrt(a), 2 do\n\
    \t\t\t\tif is_divisible(a, i) then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\
    end\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\tlocal function is_divisible(a, b)\n\
    \t\tif a % b == 0 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\t\
    end\n\tend\n\t\n\tlocal function is_square(a)\n\t\tlocal b = math.sqrt(a)\n\t\t\
    if b == math.floor(b) then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\
    \tend\n\tend\n\t\n\tfor i = 1, math.sqrt(a) do\n\t\tif is_prime(i) and is_divisible(a,\
    \ i) then\n\t\t\tlocal j = a / i\n\t\t\tif is_square(j) then\n\t\t\t\treturn false\n\
    \t\t\telseif is_prime(j) then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn false\nend", "\tif a > 100 then\n\t\tprint('The given number is greater\
    \ then 100!')\n\t\treturn false\n\tend\n\t\n\tlocal prime_numbers = {2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n\tlocal check = false\n\t\n\tfor _, p in ipairs(prime_numbers) do\n\
    \t\tif (a % p == 0) then\n\t\t\tcheck = true\n\t\tend\n\tend\n\treturn check\n\
    end", "    -- check if a is multiple of prime numbers\n    if a == 1 then\n  \
    \      return false\n    end\n    local factor_num = 0\n    local i = 2\n    while\
    \ a ~= 1 do\n        if a % i == 0 then\n            a = a / i\n            factor_num\
    \ = factor_num + 1\n        else\n            i = i + 1\n        end\n    end\n\
    \    if factor_num == 3 then\n        return true\n    else\n        return false\n\
    \    end\nend", "\tlocal res=false\n\tif a>=2 then\n\t\tres=true\n\t\tfor i=2,\
    \ a/2 do\n\t\t\tif a%i==0 then\n\t\t\t\tif is_prime(i) then\n\t\t\t\t\tif is_prime(a/i)\
    \ then\n\t\t\t\t\t\tres=true\n\t\t\t\t\telse\n\t\t\t\t\t\tres=false\n\t\t\t\t\t\
    end\n\t\t\t\telse\n\t\t\t\t\tres=false\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn res\nend", "    local result, count = false, 0\n    for i = 2, a do\n\
    \        if is_prime(i) and a % i == 0 then\n            count = count + 1\n \
    \       end\n    end\n    if count == 3 then\n        result = true\n    end\n\
    \    return result\nend", "\tfor i = 2, math.sqrt(a) do\n\t\tif a % i == 0 then\n\
    \t\t\tfor j = 2, math.sqrt(a / i) do\n\t\t\t\tif (a / i) % j == 0 then\n\t\t\t\
    \t\tfor k = 2, math.sqrt(a / i / j) do\n\t\t\t\t\t\tif (a / i / j) % k == 0 then\n\
    \t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn false\nend", "  local limit = a\n  local is_prime\
    \ = true\n  local table_primes = {}\n  local product = 1\n  for i = 2, limit do\n\
    \    is_prime = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n    \
    \    is_prime = false\n        break\n      end\n    end\n    if is_prime then\n\
    \      table.insert(table_primes, i)\n    end\n  end\n  for i = 1, #table_primes\
    \ do\n    for j = 1, #table_primes do\n      for k = 1, #table_primes do\n   \
    \     product = table_primes[i] * table_primes[j] * table_primes[k]\n        if\
    \ product == a then\n          return true\n        end\n      end\n    end\n\
    \  end\n  return false\nend", "    for i = 1, a do\n        for j = 1, a do\n\
    \            for k = 1, a do\n                if i * j * k == a then\n       \
    \             if is_prime(i) and is_prime(j) and is_prime(k) then\n          \
    \              return true\n                    end\n                end\n   \
    \         end\n        end\n    end\n    return false\nend", "  local is_prime\
    \ = false\n  local divisor\n  local primes = {}\n  local count = 0\n  local index\
    \ = 1\n  local i\n  local j\n  if a == 1 then\n    return true\n  end\n  while\
    \ a > 1 do\n    is_prime = true\n    for i = 2, math.floor(math.sqrt(a)) do\n\
    \      if a % i == 0 then\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime then\n      primes[index] = a\n      index = index +\
    \ 1\n      count = count + 1\n      if count == 3 then\n        return true\n\
    \      end\n      a = a / a\n    else\n      divisor = 2\n      while divisor\
    \ <= math.floor(math.sqrt(a)) do\n        if a % divisor == 0 then\n         \
    \ primes[index] = divisor\n          index = index + 1\n          count = count\
    \ + 1\n          if count == 3 then\n            return true\n          end\n\
    \          a = a / divisor\n          break\n        end\n        divisor = divisor\
    \ + 1\n      end\n    end\n  end\n  return false\nend", "  if a == 1 then\n  \
    \  return false\n  end\n  local counter = 0\n  for i = 2, a do\n    if is_prime(i)\
    \ and a % i == 0 then\n      counter = counter + 1\n    end\n  end\n  return counter\
    \ == 3\nend", "  local t = {}\n  local b = 3\n  local i = a\n  while i > 1 do\n\
    \    if is_prime(b) and (i % b == 0) then\n      t[#t + 1] = b\n      i = i /\
    \ b\n    else\n      b = b + 2\n    end\n  end\n  local result = #t == 3\n  for\
    \ i = 1, #t do\n    result = result and (t[i] * t[i+1] == t[i+2])\n  end\n  return\
    \ result\nend", "    -- check if a is multiple of 2 and 3\n    if a % 2 == 0 and\
    \ a % 3 == 0 then\n        return true\n    else\n        return false\n    end\n\
    end", "  if not is_prime(a) then\n    for i = 2, a / 2 do\n      if is_prime(i)\
    \ and is_prime(a / i) then\n        return true\n      end\n    end\n  end\n \
    \ return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
