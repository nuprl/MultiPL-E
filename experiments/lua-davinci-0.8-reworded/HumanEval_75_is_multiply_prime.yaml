name: HumanEval_75_is_multiply_prime
language: lua
prompt: "-- Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
  \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
  local function is_multiply_prime(a)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
  \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30), true)\n\
  \    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10), false)\n\
  \    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
  \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
  \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
  \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for key, value\
    \ in pairs(prime_numbers) do\n        if a % value == 0 then\n            if a\
    \ / value == 1 then\n                return true\n            else\n         \
    \       a = a / value\n            end\n        end\n    end\n    return false\n\
    end", "    local is_prime = function(n)\n        for i = 2, n - 1 do\n       \
    \     if n % i == 0 then\n                return false\n            end\n    \
    \    end\n        return true\n    end", "    local is_mul_prime = false\n   \
    \ local count = 0\n    local prime_temp = {}\n    for i = 2, a do\n        local\
    \ is_prime = true\n        for j = 2, i do\n            if i % j == 0 and i ~=\
    \ j then\n                is_prime = false\n                break\n          \
    \  end\n        end\n        if is_prime then\n            prime_temp[count] =\
    \ i\n            count = count + 1\n        end\n    end\n    for i = 1, #prime_temp\
    \ do\n        for j = 1, #prime_temp do\n            for k = 1, #prime_temp do\n\
    \                if a == prime_temp[i] * prime_temp[j] * prime_temp[k] then\n\
    \                    is_mul_prime = true\n                    break\n        \
    \        end\n            end\n        end\n    end\n    return is_mul_prime\n\
    end", end, "    if is_prime(a) then\n        return false\n    end\n    local\
    \ b = a / 2\n    local c = a / 3\n    if is_prime(b) and is_prime(c) then\n  \
    \      return true\n    end\n    return false\nend", "    local factors = prime_factors(a)\n\
    \    if #factors == 3 then\n        return true\n    else\n        return false\n\
    \    end\nend", "\t-- body\nend", "\tlocal function is_prime(a)\n\t\tlocal function\
    \ is_divisible(a, b)\n\t\t\tif a % b == 0 then\n\t\t\t\treturn true\n\t\t\telse\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\t\n\t\tif a < 2 then\n\t\t\treturn\
    \ false\n\t\telseif a < 4 then\n\t\t\treturn true\n\t\telseif is_divisible(a,\
    \ 2) then\n\t\t\treturn false\n\t\telse\n\t\t\tfor i = 3, math.sqrt(a), 2 do\n\
    \t\t\t\tif is_divisible(a, i) then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\
    end\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\tlocal function is_divisible(a, b)\n\
    \t\tif a % b == 0 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\t\
    end\n\tend\n\t\n\tlocal function is_square(a)\n\t\tlocal b = math.sqrt(a)\n\t\t\
    if b == math.floor(b) then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\
    \tend\n\tend\n\t\n\tfor i = 1, math.sqrt(a) do\n\t\tif is_prime(i) and is_divisible(a,\
    \ i) then\n\t\t\tlocal j = a / i\n\t\t\tif is_square(j) then\n\t\t\t\treturn false\n\
    \t\t\telseif is_prime(j) then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn false\nend", "\tif a > 100 then\n\t\tprint('The given number is greater\
    \ then 100!')\n\t\treturn false\n\tend\n\t\n\tlocal prime_numbers = {2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n\tlocal check = false\n\t\n\tfor _, p in ipairs(prime_numbers) do\n\
    \t\tif (a % p == 0) then\n\t\t\tcheck = true\n\t\tend\n\tend\n\treturn check\n\
    end", "    -- check if a is multiple of prime numbers\n    if a == 1 then\n  \
    \      return false\n    end\n    local factor_num = 0\n    local i = 2\n    while\
    \ a ~= 1 do\n        if a % i == 0 then\n            a = a / i\n            factor_num\
    \ = factor_num + 1\n        else\n            i = i + 1\n        end\n    end\n\
    \    if factor_num == 3 then\n        return true\n    else\n        return false\n\
    \    end\nend", "\tlocal res=false\n\tif a>=2 then\n\t\tres=true\n\t\tfor i=2,\
    \ a/2 do\n\t\t\tif a%i==0 then\n\t\t\t\tif is_prime(i) then\n\t\t\t\t\tif is_prime(a/i)\
    \ then\n\t\t\t\t\t\tres=true\n\t\t\t\t\telse\n\t\t\t\t\t\tres=false\n\t\t\t\t\t\
    end\n\t\t\t\telse\n\t\t\t\t\tres=false\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn res\nend", "    local result, count = false, 0\n    for i = 2, a do\n\
    \        if is_prime(i) and a % i == 0 then\n            count = count + 1\n \
    \       end\n    end\n    if count == 3 then\n        result = true\n    end\n\
    \    return result\nend", "\tfor i = 2, math.sqrt(a) do\n\t\tif a % i == 0 then\n\
    \t\t\tfor j = 2, math.sqrt(a / i) do\n\t\t\t\tif (a / i) % j == 0 then\n\t\t\t\
    \t\tfor k = 2, math.sqrt(a / i / j) do\n\t\t\t\t\t\tif (a / i / j) % k == 0 then\n\
    \t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn false\nend", "  local limit = a\n  local is_prime\
    \ = true\n  local table_primes = {}\n  local product = 1\n  for i = 2, limit do\n\
    \    is_prime = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n    \
    \    is_prime = false\n        break\n      end\n    end\n    if is_prime then\n\
    \      table.insert(table_primes, i)\n    end\n  end\n  for i = 1, #table_primes\
    \ do\n    for j = 1, #table_primes do\n      for k = 1, #table_primes do\n   \
    \     product = table_primes[i] * table_primes[j] * table_primes[k]\n        if\
    \ product == a then\n          return true\n        end\n      end\n    end\n\
    \  end\n  return false\nend", "    for i = 1, a do\n        for j = 1, a do\n\
    \            for k = 1, a do\n                if i * j * k == a then\n       \
    \             if is_prime(i) and is_prime(j) and is_prime(k) then\n          \
    \              return true\n                    end\n                end\n   \
    \         end\n        end\n    end\n    return false\nend", "  local is_prime\
    \ = false\n  local divisor\n  local primes = {}\n  local count = 0\n  local index\
    \ = 1\n  local i\n  local j\n  if a == 1 then\n    return true\n  end\n  while\
    \ a > 1 do\n    is_prime = true\n    for i = 2, math.floor(math.sqrt(a)) do\n\
    \      if a % i == 0 then\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime then\n      primes[index] = a\n      index = index +\
    \ 1\n      count = count + 1\n      if count == 3 then\n        return true\n\
    \      end\n      a = a / a\n    else\n      divisor = 2\n      while divisor\
    \ <= math.floor(math.sqrt(a)) do\n        if a % divisor == 0 then\n         \
    \ primes[index] = divisor\n          index = index + 1\n          count = count\
    \ + 1\n          if count == 3 then\n            return true\n          end\n\
    \          a = a / divisor\n          break\n        end\n        divisor = divisor\
    \ + 1\n      end\n    end\n  end\n  return false\nend", "  if a == 1 then\n  \
    \  return false\n  end\n  local counter = 0\n  for i = 2, a do\n    if is_prime(i)\
    \ and a % i == 0 then\n      counter = counter + 1\n    end\n  end\n  return counter\
    \ == 3\nend", "  local t = {}\n  local b = 3\n  local i = a\n  while i > 1 do\n\
    \    if is_prime(b) and (i % b == 0) then\n      t[#t + 1] = b\n      i = i /\
    \ b\n    else\n      b = b + 2\n    end\n  end\n  local result = #t == 3\n  for\
    \ i = 1, #t do\n    result = result and (t[i] * t[i+1] == t[i+2])\n  end\n  return\
    \ result\nend", "    -- check if a is multiple of 2 and 3\n    if a % 2 == 0 and\
    \ a % 3 == 0 then\n        return true\n    else\n        return false\n    end\n\
    end", "  if not is_prime(a) then\n    for i = 2, a / 2 do\n      if is_prime(i)\
    \ and is_prime(a / i) then\n        return true\n      end\n    end\n  end\n \
    \ return false\nend", "    local function is_prime(n)\n        if n == 1 then\n\
    \            return false\n        end\n        if n == 2 then\n            return\
    \ true\n        end\n        if n % 2 == 0 then\n            return false\n  \
    \      end\n        for i = 3, math.sqrt(n), 2 do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    for i = 2, a - 1 do\n        if is_prime(i) and a % i == 0 then\n\
    \            local b = a / i\n            for j = 2, b - 1 do\n              \
    \  if is_prime(j) and b % j == 0 then\n                    local c = b / j\n \
    \                   if is_prime(c) then\n                        return true\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return false\nend", "  -- write your code here\nend", "\tlocal isPrime\
    \ = { [1] = false }\n\tlocal isMultiplyPrime = false\n\tlocal prime = {}\n\tlocal\
    \ sum = 1\n\t\n\tfor i = 2, a do\n\t\tisPrime[i] = true\n\tend\n\t\n\tfor i =\
    \ 2, math.sqrt(a) do\n\t\tif isPrime[i] then\n\t\t\tfor j = i * i, a, i do\n\t\
    \t\t\tisPrime[j] = false\n\t\t\tend\n\t\tend\n\tend\n\t\n\tfor i = 2, a do\n\t\
    \tif isPrime[i] then\n\t\t\tif a % i == 0 then\n\t\t\t\tif sum * i <= a then\n\
    \t\t\t\t\ttable.insert(prime, i)\n\t\t\t\t\tsum = sum * i\n\t\t\t\telse\n\t\t\t\
    \t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif sum == a then\n\t\t\
    isMultiplyPrime = true\n\tend\n\t\n\treturn isMultiplyPrime, prime\nend", end,
  '    local x = 3', "    local isMult = 0\n    for i = 2, a/2 do\n        if (is_prime(i)\
    \ and is_prime(a/i)) then\n            isMult = 1\n            break\n       \
    \ end\n    end\n    if (isMult == 1) then\n        return true\n    else\n   \
    \     return false\n    end\nend", "  for i = 2, 100 do\n    for j = 2, 100 do\n\
    \      for k = 2, 100 do\n        if i * j * k == a then\n          if is_prime(i)\
    \ and is_prime(j) and is_prime(k) then\n            return true\n          end\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "  local primes\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n  local result = false\n  local j = 1\n  local i = 1\n\
    \  local count = 0\n  while i < a do\n    if a % primes[i] == 0 then\n      count\
    \ = count + 1\n      j = primes[i]\n    end\n    i = i + 1\n  end\n  if count\
    \ == 3 then\n    if a == j * j * j then\n      result = true\n    end\n  end\n\
    \  return result\nend", "    local b = {}\n    for p in prime.iter(a) do\n   \
    \     table.insert(b, p)\n        if #b == 3 then\n            break\n       \
    \ end\n    end\n    return (b[1] * b[2] * b[3]) == a\nend", "    local number\
    \ = a\n    local count = 0\n    for i = 2, number do\n        if number % i ==\
    \ 0 then\n            local prime = 1\n            for j = 2, i - 1 do\n     \
    \           if i % j == 0 then\n                    prime = 0\n              \
    \      break\n                end\n            end\n            if prime == 1\
    \ then\n                number = number / i\n                count = count + 1\n\
    \            end\n        end\n    end\n    if count == 3 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "\tlocal prime = {2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97}\n\tlocal test = 0\n\tfor i = 1, #prime do\n\t\tif a % prime[i] ==\
    \ 0 then\n\t\t\ttest = test + 1\n\t\tend\n\tend\n\tif test == 3 then\n\t\treturn\
    \ true\n\telse\n\t\treturn false\n\tend\nend", "    -- TODO: add your code here\n\
    \    return false\nend", "\tlocal is_divisible = function(a, b)\n\t\treturn a\
    \ % b == 0\n\tend\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\n\tfor i = 2, #primes\
    \ do\n\t\tif is_divisible(a, primes[i]) then\n\t\t\tfor j = i + 1, #primes do\n\
    \t\t\t\tif is_divisible(a / primes[i], primes[j]) then\n\t\t\t\t\treturn true\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "\tfor i = 2, a-1\
    \ do\n\t\tfor j = 2, a-1 do\n\t\t\tfor k = 2, a-1 do\n\t\t\t\tif i * j * k ==\
    \ a then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ false\nend", "  local function is_prime(x)\n    if x == 1 then return false\
    \ end\n    for i = 2, x - 1 do\n      if x % i == 0 then return false end\n  \
    \  end\n    return true\n  end\n  local function divisors(x)\n    local r = {}\n\
    \    for i = 1, x do\n      if x % i == 0 then table.insert(r, i) end\n    end\n\
    \    return r\n  end\n  local d = divisors(a)\n  for i = 1, #d do\n    for j =\
    \ i + 1, #d do\n      for k = j + 1, #d do\n        if d[i] * d[j] * d[k] == a\
    \ then\n          return is_prime(d[i]) and is_prime(d[j]) and is_prime(d[k])\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "\tfor _,n in ipairs(primes)\
    \ do\n\t\tif a % n == 0 then \n\t\t\tfor _,m in ipairs(primes) do\n\t\t\t\tif\
    \ n ~= m and a % m == 0 then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn false\nend", "    -- TODO\nend", "  -- TODO\nend", "\t\
    local factors = prime_factors(a)\n\tlocal is_multiply_prime = #factors == 3\n\t\
    return is_multiply_prime\nend", "  if(a == 2 or a == 3 or a == 5) then\n    return\
    \ true\n  end\n  local res = true\n  local m_a = math.floor(math.sqrt(a)) + 1\n\
    \  local i = 2\n  while(i <= m_a) do\n    local t = true\n    local k = 2\n  \
    \  while(k < i) do\n      if(i % k == 0) then\n        t = false\n        break\n\
    \      end\n      k = k + 1\n    end\n    if(t) then\n      if(a % i == 0) then\n\
    \        res = false\n        break\n      end\n    end\n    i = i + 1\n  end\n\
    \  return res\nend", "    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local i = 1\n\
    \    while a > 1 do\n        while a % primes[i] == 0 do\n            a = a /\
    \ primes[i]\n        end\n        i = i + 1\n    end\n    return i < 5\nend",
  "    return false\nend", '  local a = a /2', "    local prime_numbers = {2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n    for i, v in ipairs(prime_numbers) do\n        if a % v == 0 then\n\
    \            if a / v == 1 then\n                return true\n            else\n\
    \                return is_multiply_prime(a / v)\n            end\n        end\n\
    \    end\n    return false\nend", "\tfor i = 2, a - 1 do\n\t\tfor j = 2, a - 1\
    \ do\n\t\t\tfor k = 2, a - 1 do\n\t\t\t\tif (i * j * k == a) and (is_prime(i))\
    \ and (is_prime(j)) and (is_prime(k)) then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "  -- write your code here\n\
    end", "\tlocal num = a\n\tlocal prime_factor = 0\n\tlocal count = 0\n\tlocal m\
    \ = 1\n\tlocal n = 2\n\twhile n <= 100 do\n\t\tif n == 2 or n == 3 or n == 5 or\
    \ n == 7 then\n\t\t\tif num % n == 0 then\n\t\t\t\tprime_factor = n\n\t\t\t\t\
    count = count + 1\n\t\t\t\tnum = num / n\n\t\t\tend\n\t\tend\n\t\tif count ==\
    \ 3 then\n\t\t\tbreak\n\t\tend\n\t\tn = n + 1\n\tend\n\tif count == 3 then\n\t\
    \treturn true\n\telse\n\t\treturn false\n\tend\nend", end, "\tif (a == nil) then\
    \ return false end\n\tif (a <= 1) then return false end\n\tif (a == 2) then return\
    \ true end\n\tif (a == 3) then return true end\n\tif (a == 5) then return true\
    \ end\n\tif (a == 7) then return true end\n\tif (a % 2 == 0) then return false\
    \ end\n\tif (a % 3 == 0) then return false end\n\tif (a % 5 == 0) then return\
    \ false end\n\tif (a % 7 == 0) then return false end\n\tlocal prime_num = false\n\
    \tfor i = 2, math.floor(math.sqrt(a)) do\n\t\tif (a % i == 0) then\n\t\t\tprime_num\
    \ = true\n\t\t\tlocal j = a / i\n\t\t\tif (is_multiply_prime(i) and is_multiply_prime(j))\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\tif (prime_num == false)\
    \ then return true end\n\treturn false\nend", "    local arr = {}\n    local b\
    \ = a\n    for i = 2, a do\n        while a % i == 0 do\n            a = a / i\n\
    \            table.insert(arr, i)\n        end\n    end\n    if #arr == 3 then\n\
    \        return true\n    else\n        return false\n    end\nend", "    local\
    \ function isPrime(n)\n        if n == 2 then return true end\n        if n %\
    \ 2 == 0 then return false end\n        for i = 3, math.sqrt(n), 2 do\n      \
    \      if n % i == 0 then return false end\n        end\n        return true\n\
    \    end\n    local primes = {}\n    for i = 1, a - 1 do\n        if isPrime(i)\
    \ then table.insert(primes, i) end\n    end\n    for i = 1, #primes do\n     \
    \   for j = 1, #primes do\n            for k = 1, #primes do\n               \
    \ if primes[i] * primes[j] * primes[k] == a then return true end\n           \
    \ end\n        end\n    end\n    return false\nend", "  if a % 2 == 0 then\n \
    \   a = a / 2\n  end\n  if a % 3 == 0 then\n    a = a / 3\n  end\n  if a % 5 ==\
    \ 0 then\n    a = a / 5\n  end\n  if a == 1 then\n    return true\n  else\n  \
    \  return false\n  end\nend", "  local function is_prime(num)\n    local function\
    \ is_in_middle(b)\n      for i = 2, math.floor(b / 2) do\n        if b % i ==\
    \ 0 then\n          return false\n        end\n      end\n      return true\n\
    \    end\n    if num < 2 then\n      return false\n    elseif num == 2 then\n\
    \      return true\n    elseif num % 2 == 0 then\n      return false\n    else\n\
    \      return is_in_middle(num)\n    end\n  end\n  local function is_in_middle(b)\n\
    \    for i = 2, math.floor(b / 2) do\n      if b % i == 0 and is_prime(i) then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  if is_prime(a)\
    \ then\n    return false\n  else\n    return is_in_middle(a)\n  end\nend", "\t\
    -- TODO: write your code here\nend", "\tfor i = 2, #primes - 1 do\n\t\tfor j =\
    \ i + 1, #primes do\n\t\t\tfor k = j + 1, #primes do\n\t\t\t\tif a == primes[i]\
    \ * primes[j] * primes[k] then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn false\nend", "  \n  if a < 2 then\n    return false\n\
    \  end\n  \n  local count = 0\n  local i = 1\n  while (i <= a) do\n    if is_prime(i)\
    \ and a % i == 0 then\n      a = a / i\n      count = count + 1\n    else\n  \
    \    i = i + 1\n    end\n  end\n  \n  return count == 3\nend", "\tfor n = 1, 100\
    \ do\n\t\tif n % 3 == 0 then\n\t\t\tif is_prime(n) then\n\t\t\t\tprint(n .. \"\
    \ is prime number\")\n\t\t\tend\n\t\tend\n\tend\nend", "    --the number can only\
    \ be the multiplication of 3 prime numbers, if the number is greater than the\
    \ multiplication of 2 prime numbers, this could be the only way\n    --The function\
    \ is_prime returns true if the given number is prime, false otherwise\n    if\
    \ a > 2*3*5 then \n        --save all primes in a table\n        local primes\
    \ = {2,3,5}\n        --boolean variable that counts if the given number can be\
    \ written as the multiplication of 3 prime numbers\n        local is_prime = false\n\
    \        --iterate through all prime numbers\n        for i = 6, a do\n      \
    \      --count is_prime as true if the number is the multiplication of 3 prime\
    \ numbers\n            is_prime = is_multiply_prime_iteration(i, primes)\n   \
    \         --if the number is multiply_prime, then break the loop and return true\n\
    \            if is_prime then\n                --iterate through the table of\
    \ primes, and check if there is a prime number that is also a factor\n       \
    \         for i = 1, #primes do\n                    --return true if one of the\
    \ prime numbers is also a factor\n                    if a % primes[i] == 0 then\n\
    \                        return true\n                    end\n              \
    \  end\n            end\n            --write prime number to table of primes if\
    \ the current number is prime\n            if is_prime(i) then\n             \
    \   primes[#primes+1] = i\n            end\n        end\n    end\n    --return\
    \ false if the number is not the multiplication of 3 prime numbers\n    return\
    \ false\nend", "\tfor i = 2, 100 do\n\t\tfor j = 2, 100 do\n\t\t\tfor k = 2, 100\
    \ do\n\t\t\t\tif is_prime(i) and is_prime(j) and is_prime(k) and i * j * k ==\
    \ a then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ false\nend", "    if a == 1 then return false end\n    for i = 2, a/2 do\n \
    \       if a % i == 0 then\n            for j = 2, a/2 do\n                if\
    \ a % j == 0 and is_prime(i) and is_prime(j) and a / i == j then\n           \
    \         return true\n                end\n            end\n        end\n   \
    \ end\n    return false\nend", "  -- Write your code here\nend", "    for i =\
    \ 2, a - 1 do\n        for j = 2, a - 1 do\n            for k = 2, a - 1 do\n\
    \                if i * j * k == a then\n                    if is_prime(i) and\
    \ is_prime(j) and is_prime(k) then\n                        return true\n    \
    \                end\n                end\n            end\n        end\n    end\n\
    \    return false\nend", "\tlocal a_sqrt = math.sqrt(a)\n\tfor i = 2, a_sqrt do\n\
    \t\tif a % i == 0 then\n\t\t\tlocal b = a / i\n\t\t\tlocal b_sqrt = math.sqrt(b)\n\
    \t\t\tfor j = 2, b_sqrt do\n\t\t\t\tif b % j == 0 then\n\t\t\t\t\tlocal c = b\
    \ / j\n\t\t\t\t\tif is_prime(c) then\n\t\t\t\t\t\tprint(a, \"=\", i, \"*\", j,\
    \ \"*\", c)\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn false\nend", "\tfor i = 2, a do\n\t\tif a % i == 0 then\n\
    \t\t\tlocal num = a/i\n\t\t\tfor j = 2, num do\n\t\t\t\tif num % j == 0 then\n\
    \t\t\t\t\tlocal num1 = num/j\n\t\t\t\t\tfor k = 2, num1 do\n\t\t\t\t\t\tif num1\
    \ % k == 0 then\n\t\t\t\t\t\t\tif num1 == k then\n\t\t\t\t\t\t\t\treturn true\n\
    \t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\
    \t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tbreak\n\t\tend\n\tend\n\treturn false\n\
    end", "\tlocal primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\tlocal count = 0\n\tfor _, v in ipairs(primes)\
    \ do\n\t\tif a % v == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count == 3\nend\nprint(\">>> is_multiply_prime(30)\")\nprint(is_multiply_prime(30))",
  "    -- TODO\nend", "  local mult = 1\n  local primes = {}\n  local i = 2\n  while\
    \ i <= a do\n    while a % i == 0 do\n      mult = mult * i\n      table.insert(primes,\
    \ i)\n      a = a / i\n    end\n    i = i + 1\n  end\n  return mult == a and #primes\
    \ == 3\nend", "    local prime_numbers = prime_factorization(a)\n    return 3\
    \ == #prime_numbers\nend", "    local found = false\n    local aa = a\n    for\
    \ i = 2, a-1 do\n        if a % i == 0 then\n            if is_prime(i) then\n\
    \                a = a / i\n                if is_prime(a) then\n            \
    \        aa = aa / i\n                    if is_prime(aa) then\n             \
    \           found = true\n                        break\n                    end\n\
    \                end\n            end\n        end\n    end\n    return found\n\
    end", "  for i = 2, a - 1 do\n    if a % i == 0 then\n      for j = 2, a - 1 do\n\
    \        if a % j == 0 and a % (i * j) == 0 then\n          for k = 2, a - 1 do\n\
    \            if a % k == 0 and a % (i * j * k) == 0 then\n              return\
    \ true\n            end\n          end\n        end\n      end\n    end\n  end\n\
    \  return false\nend", "    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local i = 1\n\
    \    local result = false\n    local a_copy = a\n    local prev = nil\n    local\
    \ b\n    local c", "\tlocal is_multiply = false\n\tfor i = 2, a do\n\t\tfor j\
    \ = 2, a do\n\t\t\tfor k = 2, a do\n\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    is_multiply = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn is_multiply\n\
    end", "\tlocal function is_prime(x)\n\t\tlocal i = x-1\n\t\twhile i>1 do\n\t\t\
    \tif x%i == 0 then return false end\n\t\t\ti = i-1\n\t\tend\n\t\treturn true\n\
    \tend\n\tlocal b = {}\n\tlocal i = 1\n\twhile i<=a do\n\t\tif a%i == 0 and is_prime(i)\
    \ then\n\t\t\tb[#b+1] = i\n\t\tend\n\t\ti = i+1\n\tend\n\tif #b == 3 then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend\nprint(is_multiply_prime(30))",
  "    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local counter = 0", "\treturn false\n\
    end", "\tlocal result = true\n\t-- Your code here\n\treturn result\nend", "  --\
    \ TODO\nend", "    for i = 2, a-1 do\n        for j = 2, a-1 do\n            for\
    \ k = 2, a-1 do\n                if i * j * k == a then\n                    return\
    \ true\n                end\n            end\n        end\n    end\n    return\
    \ false\nend", "\tlocal res = false\n\tlocal primes = get_primes(a)\n\tfor i =\
    \ 1, #primes do\n\t\tfor j = i + 1, #primes do\n\t\t\tfor k = j + 1, #primes do\n\
    \t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\tres = true\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend", "\tif a == nil then\n\
    \t\tprint(\"arg error\")\n\t\treturn\n\tend\n\tif is_prime(a) then return false\
    \ end\n\tlocal function is_multiply_prime_aux(a, primes)\n\t\tfor _, p in ipairs(primes)\
    \ do\n\t\t\tif a == 1 then return true end\n\t\t\tif a % p == 0 then\n\t\t\t\t\
    return is_multiply_prime_aux(a / p, primes)\n\t\t\tend\n\t\tend\n\t\treturn false\n\
    \tend\n\treturn is_multiply_prime_aux(a, primes_aux(100))\nend", "  \t-- TODO:\
    \ Write your code here\n \tif a == 1 then\n\t\treturn false\n\tend\n\twhile a\
    \ % 2 == 0 do\n\t\ta = a / 2\n\tend\n\tfor i = 3, math.sqrt(a), 2 do\n\t\twhile\
    \ a % i == 0 do\n\t\t\ta = a / i\n\t\tend\n\tend\n\tif a > 2 then\n\t\treturn\
    \ false\n\tend\n\treturn true\nend", "\tlocal i, j, k\n\tfor i = 2, a - 1 do\n\
    \t\tif a % i == 0 then\n\t\t\tfor j = 2, i - 1 do\n\t\t\t\tif i % j == 0 then\
    \ \n\t\t\t\t\tgoto continue\n\t\t\t\tend\n\t\t\tend\n\t\t\tfor k = 2, a / i -\
    \ 1 do\n\t\t\t\tif (a / i) % k == 0 then\n\t\t\t\t\tgoto continue\n\t\t\t\tend\n\
    \t\t\tend\n\t\t\treturn true\n\t\tend\n\t\t::continue::\n\tend\n\treturn false\n\
    end", "  local primes = {}\n  local numbers = {}\n  local a_squared = a*a\n  --\
    \ loop over 2 to a*a\n  for i=2,a_squared do\n    numbers[i] = i\n  end\n  --\
    \ loop over 2 to a*a\n  for i=2,a_squared do\n    if (numbers[i] ~= nil) then\n\
    \      -- if i is prime, add to prime table\n      primes[#primes+1] = i\n   \
    \   -- filter out multiples of i\n      for j=2,a_squared do\n        if (numbers[j]\
    \ ~= nil and numbers[j]%i == 0) then\n          numbers[j] = nil\n        end\n\
    \      end\n    end\n  end\n  -- check if a is multiplication of 3 primes\n  for\
    \ i=1,#primes do\n    for j=1,#primes do\n      for k=1,#primes do\n        if\
    \ (primes[i]*primes[j]*primes[k] == a) then\n          return true\n        end\n\
    \      end\n    end\n  end\n  return false\nend", "    local max = math.sqrt(a)\n\
    \    local result = false\n    if a % 2 == 0 then\n        result = a / 2\n  \
    \  elseif a % 3 == 0 then\n        result = a / 3\n    elseif a % 5 == 0 then\n\
    \        result = a / 5\n    elseif a % 7 == 0 then\n        result = a / 7\n\
    \    elseif a % 11 == 0 then\n        result = a / 11\n    elseif a % 13 == 0\
    \ then\n        result = a / 13\n    elseif a % 17 == 0 then\n        result =\
    \ a / 17\n    elseif a % 19 == 0 then\n        result = a / 19\n    elseif a %\
    \ 23 == 0 then\n        result = a / 23\n    elseif a % 29 == 0 then\n       \
    \ result = a / 29\n    elseif a % 31 == 0 then\n        result = a / 31\n    elseif\
    \ a % 37 == 0 then\n        result = a / 37\n    elseif a % 41 == 0 then\n   \
    \     result = a / 41\n    elseif a % 43 == 0 then\n        result = a / 43\n\
    \    elseif a % 47 == 0 then\n        result = a / 47\n    elseif a % 53 == 0\
    \ then\n        result = a / 53\n    elseif a % 59 == 0 then\n        result =\
    \ a / 59\n    elseif a % 61 == 0 then\n        result = a / 61\n    elseif a %\
    \ 67 == 0 then\n        result = a / 67\n    elseif a % 71 == 0 then\n       \
    \ result = a / 71\n    elseif a % 73 == 0 then\n        result = a / 73\n    elseif\
    \ a % 79 == 0 then\n        result = a / 79\n    elseif a % 83 == 0 then\n   \
    \     result = a / 83\n    elseif a % 89 == 0 then\n        result = a / 89\n\
    \    elseif a % 97 == 0 then\n        result = a / 97\n    end\n    return result\n\
    end", "    return false\nend", "\tlocal a = tonumber(a)\n\tlocal primes = {}\n\
    \tlocal primes_amount = 0\n\tlocal found = false\n\t\n\tfor i = 2, a do\n\t\t\
    for j = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tfound = true\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(primes, i)\n\
    \t\t\tprimes_amount = primes_amount + 1\n\t\tend\n\t\tfound = false\n\tend\n\t\
    \n\tfor i = 1, primes_amount do\n\t\tfor j = 1, primes_amount do\n\t\t\tfor k\
    \ = 1, primes_amount do\n\t\t\t\tif a == primes[i] * primes[j] * primes[k] then\n\
    \t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\n\
    end", "\t-- write your code here\nend", "\t-- if a is less then 2, return false\n\
    \tif a < 2 then return false end\n\t-- if a is less then 10, find if a is the\
    \ multiplication of 3 prime numbers\n\tif a < 10 then\n\t\t-- loop from 2 to a\
    \ - 1\n\t\tfor i = 2, a - 1 do\n\t\t\t-- if a % i is 0, then a is not a prime\
    \ number, return false\n\t\t\tif a % i == 0 then return false end\n\t\tend\n\t\
    \t-- return true\n\t\treturn true\n\tend\n\t-- if a is more then 10\n\tif a >\
    \ 10 then\n\t\t-- find all prime numbers less then a\n\t\tlocal prime_numbers\
    \ = {}\n\t\t-- loop from 2 to a - 1\n\t\tfor i = 2, a - 1 do\n\t\t\t-- loop from\
    \ 2 to i - 1\n\t\t\tfor j = 2, i - 1 do\n\t\t\t\t-- if i % j is 0, then i is not\
    \ a prime number, break\n\t\t\t\tif i % j == 0 then break end\n\t\t\t\t-- if i\
    \ is a prime number, insert i to prime_numbers\n\t\t\t\tif j == i - 1 then table.insert(prime_numbers,\
    \ i) end\n\t\t\tend\n\t\tend\n\t\t-- loop from 1 to #prime_numbers\n\t\tfor i\
    \ = 1, #prime_numbers do\n\t\t\t-- loop from 1 to #prime_numbers\n\t\t\tfor j\
    \ = 1, #prime_numbers do\n\t\t\t\t-- loop from 1 to #prime_numbers\n\t\t\t\tfor\
    \ k = 1, #prime_numbers do\n\t\t\t\t\t-- if a is equal to the multiplication of\
    \ prime_numbers[i], prime_numbers[j] and prime_numbers[k], return true\n\t\t\t\
    \t\tif a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k] then return\
    \ true end\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t-- return false\n\t\treturn false\n\
    \tend\nend", "    for i = 2, math.floor(math.sqrt(a)) do\n        for j = 2, math.floor(math.sqrt(a))\
    \ do\n            for k = 2, math.floor(math.sqrt(a)) do\n                if i\
    \ * j * k == a then\n                    return true\n                end\n  \
    \          end\n        end\n    end\n    return false\nend", "    local div =\
    \ 2\n    local result = {}\n    local counter = 0\n    while div < a do\n    \
    \    while a % div == 0 do\n            a = a / div\n            table.insert(result,\
    \ div)\n            counter = counter + 1\n        end\n        div = div + 1\n\
    \    end\n    if counter == 3 then return true end\n    return false\nend", "\t\
    for i = 1, a do\n\t\tfor j = 1, a do\n\t\t\tfor k = 1, a do\n\t\t\t\tif a == i\
    \ * j * k and is_prime(i) and is_prime(j) and is_prime(k) then\n\t\t\t\t\treturn\
    \ true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "\tlocal\
    \ is_multiply_prime = false\n\tlocal b,c,d\n\tif is_prime(a) then\n\t\tis_multiply_prime\
    \ = true\n\telse\n\t\tfor b = 2, a - 2 do\n\t\t\tif is_prime(b) then\n\t\t\t\t\
    for c = b + 1, a - b do\n\t\t\t\t\tif is_prime(c) then\n\t\t\t\t\t\td = a - b\
    \ - c\n\t\t\t\t\t\tif is_prime(d) then\n\t\t\t\t\t\t\tis_multiply_prime = true\n\
    \t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn is_multiply_prime\nend", "    local primes = {}\n    local\
    \ function is_prime(a)\n        if a <= 1 then\n            return false\n   \
    \     end\n        for i = 2, a - 1 do\n            if a % i == 0 then\n     \
    \           return false\n            end\n        end\n        return true\n\
    \    end\n    for i = 2, a - 1 do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    return true\n                end\n\
    \            end\n        end\n    end\n    return false\nend", "   local counter\
    \ = 0\n   for i = 2, a do\n      if is_prime(i) then\n         counter = counter\
    \ + 1\n         if counter == 3 then\n            return true\n         end\n\
    \      end\n   end\n   return false\nend", "    -- Todo: implement this function\n\
    \    local result=false\n    local first_number,second_number,third_number=0,0,0\n\
    \    for i=2,a do\n        for j=2,a do\n            for k=2,a do\n          \
    \      if is_prime(i) and is_prime(j) and is_prime(k) and a==i*j*k then\n    \
    \                first_number=i\n                    second_number=j\n       \
    \             third_number=k\n                    result=true\n              \
    \  end\n            end\n        end\n    end\n    print(first_number,second_number,third_number)\n\
    \    return result\nend", "    local prime_numbers = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local p, r = a, 0\n    while p >= 2 do\n        local d = false\n        for\
    \ i = 1, #prime_numbers do\n            r = p % prime_numbers[i]\n           \
    \ if r == 0 then\n                d = true\n                p = p / prime_numbers[i]\n\
    \                break\n            end\n        end\n        if not d then return\
    \ false end\n    end\n    return true\nend", "    local function is_prime(a)\n\
    \        if a < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(a) do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    for i = 2, a\
    \ / 2 do\n        for j = 2, a / 2 do\n            for k = 2, a / 2 do\n     \
    \           if i * j * k == a and is_prime(i) and is_prime(j) and is_prime(k)\
    \ then\n                    return true\n                end\n            end\n\
    \        end\n    end\n    return false\nend", "    local primes = {2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n    for i = 1, 24 do\n        for j = 1, 24 do\n            for k =\
    \ 1, 24 do\n                if a == primes[i] * primes[j] * primes[k] then\n \
    \                   return true\n                end\n            end\n      \
    \  end\n    end\n    return false\nend", "\t-- TODO: implement here\n\tlocal flag\
    \ = false\n\tlocal res = a\n\tfor i = 2, a/2 do\n\t\tif is_prime(i) and res%i\
    \ == 0 then\n\t\t\tres = res/i\n\t\t\tif res == 1 then\n\t\t\t\tflag = true\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn flag\nend", end, "\tif a == 1 then return false\
    \ end\n\tlocal x,y,z = 1,2,3\n\tlocal primes = {}\n\twhile x <= a do\n\t\t-- Verify\
    \ if x is prime or not.\n\t\tlocal x_is_prime = true\n\t\tfor y=2,x-1 do\n\t\t\
    \tif x % y == 0 then\n\t\t\t\tx_is_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\
    \tend\n\t\tif x_is_prime then\n\t\t\tprimes[#primes+1] = x\n\t\tend\n\t\tx = x\
    \ + 1\n\tend\n\t\n\tlocal result = false\n\tfor z,x in ipairs(primes) do\n\t\t\
    for y=z+1,#primes do\n\t\t\tlocal mult = x * primes[y]\n\t\t\tlocal mult_of_prime\
    \ = false\n\t\t\tfor _,p in ipairs(primes) do\n\t\t\t\tif mult == p then\n\t\t\
    \t\t\tmult_of_prime = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif\
    \ mult_of_prime then\n\t\t\t\tif a % mult == 0 then\n\t\t\t\t\tresult = true\n\
    \t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
  "  local function is_prime(x)\n    if x < 2 then return false end\n    for i = 2,\
    \ math.sqrt(x) do\n      if x % i == 0 then return false end\n    end\n    return\
    \ true\n  end\n  local a_sqrt = math.sqrt(a)\n  local n = 1\n  while n <= a_sqrt\
    \ do\n    if a % n == 0 then\n      local m = a / n\n      if is_prime(n) and\
    \ is_prime(m) then\n        return true\n      end\n    end\n    n = n + 1\n \
    \ end\n  return false\nend", "\tlocal b, c, d = find_prime_factors(a)\n\treturn\
    \ (b and c and d) and true or false\nend", "\tlocal i = 2\n\tlocal c = 0\n\tlocal\
    \ g = 0\n\twhile c <= 3 do\n\t\tif a % i == 0 then\n\t\t\tg = a / i\n\t\t\tif\
    \ is_prime(i) then\n\t\t\t\tc = c + 1\n\t\t\tend\n\t\t\tif is_prime(g) then\n\t\
    \t\t\tc = c + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\tif c == 3 then\n\t\
    \treturn true\n\telse\n\t\treturn false\n\tend\nend", "    local function is_prime(a)\n\
    \        for i = 2, a - 1 do\n            if a % i == 0 then\n               \
    \ return false\n            end\n        end\n        return true\n    end", "\t\
    local numbers = {}\n\tlocal is_divisible\n\tlocal is_prime\n\tlocal factor_counter\n\
    \tlocal number\n\tlocal i\n\tlocal j\n\tlocal counter", "    if (is_prime(a))\
    \ then return false end\n    local i = 2\n    while (i < a) do\n        if (is_prime(i)\
    \ and a % i == 0) then\n            a = a / i\n            if (is_prime(a)) then\
    \ return true end\n        end\n        i = i + 1\n    end\n    return false\n\
    end", "\tlocal function is_prime(n)\n\t\tif n == 1 then return false end\n\t\t\
    for i = 2, n-1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\t\treturn true\n\tend\n\tlocal function check_prime(a, primes)\n\t\t\
    for i = 1, #primes do\n\t\t\tif a % primes[i] == 0 then\n\t\t\t\treturn a / primes[i]\n\
    \t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\tlocal primes = {}\n\tfor i = 2,\
    \ a do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\
    \tlocal b = a\n\tlocal tmp = 0\n\twhile b ~= false do\n\t\ttmp = check_prime(b,\
    \ primes)\n\t\tif tmp == false then\n\t\t\treturn false\n\t\telse\n\t\t\tb = tmp\n\
    \t\tend\n\tend\n\treturn true\nend", "    local primes = {2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\
    \    for i, v in ipairs(primes) do\n        if a % v == 0 then\n            a\
    \ = a / v\n        end\n    end\n    return a == 1\nend", "  if a < 1 then\n \
    \   return \"Please, give me a positive integer number\"\n  end\n  if is_prime(a)\
    \ then\n    return false\n  end\n  for i = 2, a - 1 do\n    if is_prime(i) and\
    \ a % i == 0 then\n      return is_multiply_prime(a / i)\n    end\n  end\n  return\
    \ true\nend", "\tlocal primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\tlocal flag = false\n\tfor\
    \ i = 1, #primes do\n\t\tif a % primes[i] == 0 then\n\t\t\tfor j = 1, #primes\
    \ do\n\t\t\t\tif (a / primes[i]) % primes[j] == 0 then\n\t\t\t\t\tflag = true\n\
    \t\t\t\t\treturn flag\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn flag\n\
    end", "    local count = 0\n    local prime_numbers = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for _, v in ipairs(prime_numbers) do\n        if a % v == 0 then\n        \
    \    count = count + 1\n        end\n    end\n    if count >= 3 then\n       \
    \ return true\n    else\n        return false\n    end\nend", "    for i = 2,\
    \ a do\n        for j = 2, a do\n            for k = 2, a do\n               \
    \ if i * j * k == a then\n                    if is_prime(i) and is_prime(j) and\
    \ is_prime(k) then\n                        return true\n                    end\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "  for i = 1, a do\n    for j = 1, a do\n      for k = 1, a do\n       \
    \ if is_prime(i) and is_prime(j) and is_prime(k) and i * j * k == a then\n   \
    \       return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "\tlocal primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\tlocal result = false\n\tfor k1, v1\
    \ in pairs(primes) do\n\t\tfor k2, v2 in pairs(primes) do\n\t\t\tfor k3, v3 in\
    \ pairs(primes) do\n\t\t\t\tif a == v1 * v2 * v3 then\n\t\t\t\t\tresult = true\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend", "  if a < 100 then\n\
    \    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local i = 1\n    while a > 1 do\n \
    \     if a % primes[i] == 0 then\n        a = a / primes[i]\n      else\n    \
    \    i = i + 1\n      end\n    end\n    return i > 1\n  end\n  return false\n\
    end", "  local function prime_factor(b)\n    local list = {}\n    local new_list\
    \ = {}\n    local prime_list = {}\n    for i = 2, b do\n      table.insert(list,i)\n\
    \    end\n    local prime = list[1]\n    while prime * prime <= b do\n      prime\
    \ = list[1]\n      if prime then\n        table.insert(prime_list,prime)\n   \
    \     for i = 1, #list do\n          if list[i] % prime == 0 then\n          \
    \  table.insert(new_list,list[i])\n          end\n        end\n        for i =\
    \ 1, #new_list do\n          for j = 1, #list do\n            if new_list[i] ==\
    \ list[j] then\n              table.remove(list,j)\n            end\n        \
    \  end\n        end\n        new_list = {}\n      end\n    end\n    for i = 1,\
    \ #list do\n      table.insert(prime_list,list[i])\n    end\n    return prime_list\n\
    \  end\n  local prime_list = prime_factor(a)\n  local a_list = {}\n  for i = 1,\
    \ #prime_list do\n    if a % prime_list[i] == 0 then\n      table.insert(a_list,prime_list[i])\n\
    \    end\n  end\n  if #a_list > 2 then\n    return true\n  else\n    return false\n\
    \  end\nend", "    local p = 0\n    local i = 2\n    while i < a do\n        while\
    \ a % i == 0 do\n            a = a / i\n            p = p + 1\n        end\n \
    \       i = i + 1\n    end\n    return p == 3\nend", "\t\nend", "    if a % 2\
    \ == 0 then\n    return true\n    else \n    return false\n    end\nend", "\t\
    local is_multiply_prime = false\n\tlocal n = 3", "\tlocal x = 0\n\tlocal y = a\
    \ - 1\n\tlocal z = a - 2\n\tfor x = 1, (a - 2) do\n\t\tfor y = (a - 1), 2, -1\
    \ do\n\t\t\tfor z = (a - 2), 2, -1 do\n\t\t\t\tif is_prime(x) and is_prime(y)\
    \ and is_prime(z) and (x * y * z == a) then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "    -- if a is less than 2 then\
    \ return false\n    if a < 2 then\n        return false\n    end\n    -- prime\
    \ numbers, they are not dividable by any number but 1 and themselves\n    local\
    \ primes = {1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}\n\
    \    -- we will store our prime factors here\n    local prime_factors = {}\n \
    \   -- this will act as a divisor\n    local divisor = 0\n    -- this is for simple\
    \ for loops\n    local i = 0\n    -- iterate over the primes table\n    for i=1,\
    \ #primes do\n        -- set the divisor\n        divisor = primes[i]\n      \
    \  -- check if the number is dividable by the divisor\n        if a % divisor\
    \ == 0 then\n            -- add the divisor to the prime_factors table\n     \
    \       table.insert(prime_factors, divisor)\n            -- check if the prime_factors\
    \ table has 3 elements\n            if #prime_factors == 3 then\n            \
    \    -- check if the product of the prime_factors table is equal to a\n      \
    \          if table.product(prime_factors) == a then\n                    -- a\
    \ is the multiplication of 3 prime numbers, return true\n                    return\
    \ true\n                end\n            end\n        end\n    end\n    -- a is\
    \ not the multiplication of 3 prime numbers, return false\n    return false\n\
    end", "\tlocal flag = false\n\tfor i = 2,a-1 do\n\t\tfor j = 2,a-1 do\n\t\t\t\
    for k = 2,a-1 do\n\t\t\t\tif i*j*k == a then\n\t\t\t\t\tflag = true\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn flag\nend", "    -- your code here\n\
    \    local n = 0\n    local x = 2\n    local arr = {}\n    while n < 3 do\n  \
    \      for i = 2, x do\n            if x % i == 0 then\n                break\n\
    \            end\n            if i == x then\n                arr[#arr + 1] =\
    \ x\n                n = n + 1\n            end\n        end\n        x = x +\
    \ 1\n    end\n    local is_multiply_prime = false\n    for i = 1, #arr do\n  \
    \      for j = 1, #arr do\n            for k = 1, #arr do\n                if\
    \ arr[i] * arr[j] * arr[k] == a then\n                    is_multiply_prime =\
    \ true\n                end\n            end\n        end\n    end\n    return\
    \ is_multiply_prime\nend", "\t\nend", "  if a > 100 then return false end\n  local\
    \ function are_primes(a, b, c)\n    for _, x in ipairs { a, b, c } do\n      if\
    \ not is_prime(x) then return false end\n    end\n    return true\n  end\n  for\
    \ a = 2, a - 1 do\n    for b = 2, a - 1 do\n      for c = 2, b - 1 do\n      \
    \  if a * b * c == a then\n          if are_primes(a, b, c) then\n           \
    \ return true\n          end\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "    -- return true or false\nend", "  -- Write your code here.\n\
    end", "  local k = a\n  local count = 0\n  while k ~= 1 do\n    if is_prime(k)\
    \ then\n      return false\n    end\n    for i = 1, k do\n      if is_prime(i)\
    \ and k % i == 0 then\n        k = k / i\n        count = count + 1\n        break\n\
    \      end\n    end\n  end\n  return count == 3\nend", "\treturn false\nend",
  "    if a == 2 or a == 3 or a == 5 then return true end\n    local s = a - 2\n \
    \   while s > 0 do\n        if is_prime(s) then\n            local second = a\
    \ - s\n            while second > 0 do\n                if is_prime(second) then\n\
    \                    local third = a - s - second\n                    if is_prime(third)\
    \ then\n                        return true\n                    end\n       \
    \         end\n                second = second - 1\n            end\n        end\n\
    \        s = s - 1\n    end\n    return false\nend", "\tfor i = 1, 99 do\n\t\t\
    for j = 1, 99 do\n\t\t\tfor k = 1, 99 do\n\t\t\t\tif is_prime(i) and is_prime(j)\
    \ and is_prime(k) and i * j * k == a then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "\tlocal result = false\n\tfor\
    \ i = 2, a/2 do\n\t\tfor j = 2, a/3 do\n\t\t\tfor k = 2, a/5 do\n\t\t\t\tif a\
    \ == i * j * k then\n\t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn result\nend", "\tlocal div = {}\n\tlocal n = 2\n\trepeat\n\t\t\
    while a % n == 0 do\n\t\t\ta = a / n\n\t\t\ttable.insert(div, n)\n\t\tend\n\t\t\
    n = n + 1\n\tuntil a == 1\n\tlocal count = 0\n\tfor k, v in pairs(div) do\n\t\t\
    if is_prime(v) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tif count == 3\
    \ then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  local prim\
    \ = true\n  local div = 2\n  while prim and div < a do\n    prim = math.fmod(a,\
    \ div) ~= 0\n    div = div + 1\n  end\n  return prim\nend", "  for i = 2, a -\
    \ 1 do\n    if a % i == 0 then\n      local b = a / i\n      for j = 2, b - 1\
    \ do\n        if b % j == 0 then\n          local c = b / j\n          for k =\
    \ 2, c - 1 do\n            if c % k == 0 then\n              return false\n  \
    \          end\n          end\n          return true\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "\tlocal function prime(a)\n\t\tif a <=\
    \ 1 then\n\t\t\treturn false\n\t\telseif a == 2 then\n\t\t\treturn true\n\t\t\
    else\n\t\t\tfor j = 2, math.sqrt(a) do\n\t\t\t\tif a % j == 0 then\n\t\t\t\t\t\
    return false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\tend\n\tfor\
    \ i = 2, math.sqrt(a) do\n\t\tif a % i == 0 then\n\t\t\tif prime(i) then\n\t\t\
    \t\tfor j = i, math.sqrt(a) do\n\t\t\t\t\tif a % j == 0 then\n\t\t\t\t\t\tif prime(j)\
    \ then\n\t\t\t\t\t\t\tfor k = j, math.sqrt(a) do\n\t\t\t\t\t\t\t\tif a % k ==\
    \ 0 then\n\t\t\t\t\t\t\t\t\tif prime(k) then\n\t\t\t\t\t\t\t\t\t\tif i * j * k\
    \ == a then\n\t\t\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\
    \t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\
    \t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "  local\
    \ primes = get_primes(a)\n  local mult\n  local count\n  local digits = {}\n \
    \ local t\n  while a > 1 do\n    t = false\n    for i = #primes, 1, -1 do\n  \
    \    if a % primes[i] == 0 then\n        mult = primes[i]\n        a = a / mult\n\
    \        table.insert(digits, mult)\n        t = true\n        break\n      end\n\
    \    end\n    if not t then\n      return false\n    end\n  end\n  return #digits\
    \ == 3\nend", "    local prime_numbers = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 }\n    local prime\
    \ = {}\n    for i = 1, #prime_numbers do\n        if a % prime_numbers[i] == 0\
    \ then\n            prime[#prime + 1] = prime_numbers[i]\n        end\n    end\n\
    \    return #prime == 3 and prime[1] * prime[2] * prime[3] == a\nend", "  local\
    \ function check(b)\n    return (a % b == 0) and is_prime(b)\n  end\n  return\
    \ is_prime(a) or check(2) or check(3) or check(5) or check(7)\nend", "\tlocal\
    \ function is_prime(num)\n\t\tfor i = 2, math.floor(math.sqrt(num)) do\n\t\t\t\
    if num % i == 0 then return false end\n\t\tend\n\t\treturn true\n\tend\n\tlocal\
    \ cnt = 0\n\tfor i = 2, a do\n\t\tif a % i == 0 and is_prime(i) then\n\t\t\ta\
    \ = a / i\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt == 3\nend", "   \
    \ -- TODO\nend", "    return true\nend", "  local primes = {2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\
    \  local i = 1\n  local result = 1\n  while a >= primes[i] do\n    if a % primes[i]\
    \ == 0 then\n      result = result * primes[i]\n      a = a / primes[i]\n    else\n\
    \      i = i + 1\n    end\n  end\n  return result == a\nend", "    local list\
    \ = {}\n    if (a < 100) then\n        for i = 2, a do\n            while (a %\
    \ i == 0) do\n                a = a / i\n                table.insert(list, i)\n\
    \            end\n        end\n        local result = 1\n        for i = 1, #list\
    \ do\n            result = result * list[i]\n        end\n        if (result ==\
    \ a) then\n            return true\n        else\n            return false\n \
    \       end\n    else\n        return false\n    end\nend", "\t\nend", "\tlocal\
    \ function is_prime(a)\n\t\tfor i = 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\
    \t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\t\n\tfor i = 2,\
    \ a - 1 do\n\t\tif a % i == 0 and is_prime(i) then\n\t\t\tfor j = 2, a - 1 do\n\
    \t\t\t\tif a % j == 0 and is_prime(j) and i ~= j then\n\t\t\t\t\tfor k = 2, a\
    \ - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k) and k ~= i and k ~= j then\n\
    \t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn false\nend", "\tlocal t = {}\n\tfor i = 2,a-1 do\n\
    \t\tlocal c = 0\n\t\tfor j = 2,i-1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tc = c\
    \ + 1\n\t\t\tend\n\t\tend\n\t\tif c == 0 then\n\t\t\ttable.insert(t,i)\n\t\tend\n\
    \tend\n\t\n\tlocal function helper(l,i,c)\n\t\tif i == #l then\n\t\t\treturn c\
    \ == a\n\t\tend\n\t\treturn (helper(l,i+1,c) or helper(l,i+1,c*l[i]))\n\tend\n\
    \t\n\treturn helper(t,1,1)\nend", "    local result = false\n    local prime_num\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    for i = 1, #prime_num do\n        for j = 1, #prime_num\
    \ do\n            for k = 1, #prime_num do\n                if prime_num[i] *\
    \ prime_num[j] * prime_num[k] == a then\n                    result = true\n \
    \               end\n            end\n        end\n    end\n    return result\n\
    end", "\t-- Body\n\treturn false\nend", "\tif a <= 1 then\n\t\treturn false\n\t\
    end\n\tfor n = 2, math.sqrt(a) do\n\t\tif a % n == 0 then\n\t\t\tlocal p = a /\
    \ n\n\t\t\tfor x = 2, math.sqrt(p) do\n\t\t\t\tif p % x == 0 then\n\t\t\t\t\t\
    return true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "\t\
    -- body\nend", "    local primes_table = get_primes_table(a)\n    for i=1, #primes_table\
    \ do\n        for j=1, #primes_table do\n            for k=1, #primes_table do\n\
    \                if primes_table[i] * primes_table[j] * primes_table[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend", "\t-- Check if the number is less than\
    \ 100\n\tif (a < 100) then\n\t\t-- Check if the number is prime (i.e. only can\
    \ divide by itself and 1)\n\t\tif (is_prime(a)) then\n\t\t\t-- If a is prime,\
    \ then a = prime_number * 1 * 1\n\t\t\treturn true\n\t\tend\n\t\t-- Iterate through\
    \ every number less than a\n\t\tfor i = 2, a - 1 do\n\t\t\t-- Check if i is prime\n\
    \t\t\tif (is_prime(i)) then\n\t\t\t\t-- If i is prime, check if a / i is prime\n\
    \t\t\t\tif (is_prime(a / i)) then\n\t\t\t\t\t-- If a / i is prime, a = i * (a\
    \ / i) * 1\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\
    -- a cannot be expressed as the multiplication of 3 prime numbers\n\treturn false\n\
    end", "  local function get_prime(a)\n    local div = 2\n    while a > div do\n\
    \      if (a % div) == 0 then\n        return div\n      end\n      div = div\
    \ + 1\n    end\n    return a\n  end\n  local div = get_prime(a)\n  if div < a\
    \ then\n    return is_multiply_prime(a / div)\n  else\n    return true\n  end\n\
    end", "    -- write your code here\nend", "    if a == nil then\n        return\
    \ false\n    end\n    local prime_list = prime(a)\n    local temp = a\n    local\
    \ counter = 0\n    local is_multiply = false\n    while temp > 1 do\n        for\
    \ i = 1, #prime_list do\n            if temp % prime_list[i] == 0 then\n     \
    \           temp = temp / prime_list[i]\n                counter = counter + 1\n\
    \                break\n            end\n        end\n    end\n    if counter\
    \ == 3 then\n        is_multiply = true\n    end\n    return is_multiply\nend",
  "    for i = 2, math.sqrt(a) do\n        if a % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local function is_prime(a)\n\
    \        local i = 2\n        while i < a do\n            if a % i == 0 then\n\
    \                return false\n            end\n            i = i + 1\n      \
    \  end\n        return true\n    end\n    local i = 2\n    while i < a do\n  \
    \      if is_prime(i) and a % i == 0 then\n            a = a / i\n           \
    \ i = 2\n        else\n            i = i + 1\n        end\n    end\n    return\
    \ is_prime(a)\nend", "\treturn false\nend", "  \n  if a < 1 then return false\
    \ end\n  if a == 1 then return true end\n  if is_prime(a) then return true end\n\
    \  \n  for x = 2, a-1 do\n    if a % x == 0 then\n      if is_multiply_prime(x)\
    \ and is_multiply_prime(a/x) then return true end\n    end\n  end\n  \n  return\
    \ false\nend", "  if a == nil then error('a is nil') end\n  if a < 0 then error('a\
    \ is negative') end\n  if a == 0 then return false end\n  if a == 1 then return\
    \ false end\n  if a == 2 then return true end\n  if a == 3 then return true end\n\
    \  if a == 5 then return true end\n  if a == 7 then return true end\n  if a %\
    \ 2 == 0 then return false end\n  if a % 3 == 0 then return false end\n  if a\
    \ % 5 == 0 then return false end\n  if a % 7 == 0 then return false end\n  if\
    \ is_prime(a) then return true end\n  for i = 2, a - 1 do\n    if is_prime(i)\
    \ then\n      for j = 2, a - 1 do\n        if is_prime(j) then\n          for\
    \ k = 2, a - 1 do\n            if is_prime(k) then\n              if i * j * k\
    \ == a then\n                return true\n              end\n            end\n\
    \          end\n        end\n      end\n    end\n  end\n  return false\nend",
  "  if a <= 1 then\n    return false\n  end\n  for i = 2, a do\n    if a % i == 0\
    \ then\n      if is_prime(i) then\n        if is_multiply_prime(a / i) then\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "    for i = 2, a/2 do\n        if is_prime(i) and a % i == 0 then\n   \
    \         for j = 2, a/2 do\n                if is_prime(j) and a % j == 0 and\
    \ i * j < a then\n                    for k = 2, a/2 do\n                    \
    \    if is_prime(k) and a % k == 0 and i * j * k == a then\n                 \
    \           return true\n                        end\n                    end\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "  local prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local cnt = 0\n  local num = a\n\
    \  for _, i in ipairs(prime) do\n    if a % i == 0 then\n      a = a / i\n   \
    \   cnt = cnt + 1\n    end\n  end\n  if cnt == 3 and num == a then\n    return\
    \ true\n  else\n    return false\n  end\nend", "\t\nend", "\tlocal checkPrime\
    \ = true\n\tlocal primes = 2\n\tlocal is_multiply_prime = true\n\twhile primes\
    \ < math.sqrt(a) do\n\t\tif a % primes == 0 then\n\t\t\tif not is_prime(a / primes)\
    \ then\n\t\t\t\tis_multiply_prime = false\n\t\t\tend\n\t\t\t\n\t\t\tif not is_prime(primes)\
    \ then\n\t\t\t\tis_multiply_prime = false\n\t\t\tend\n\t\tend\n\t\t\n\t\tprimes\
    \ = primes + 1\n\tend\n\t\n\treturn is_multiply_prime\nend", "    local function\
    \ prime(p)\n        for i = 2, p - 1 do\n            if (p % i == 0) then\n  \
    \              return false\n            end\n        end\n        return true\n\
    \    end", "    if a == 1 then return false end\n    for i = 2, a - 1 do\n   \
    \     if a % i == 0 then\n            if is_prime(i) and is_prime(a / i) then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "\t-- TODO: implement this function\n\t-- Hint: use number_prime_factors\n\
    \treturn false\nend", "\tlocal primenum = prime()\n\tlocal n1, n2, n3 = primenum(),\
    \ primenum(), primenum()\n\tif a == n1 * n2 * n3 then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend", "\t-- write your code here\n\t-- hint: use the\
    \ function you wrote before.\n\tfor i = 2, a do\n\t\tlocal f = true\n\t\tfor k\
    \ = 2, math.sqrt(i) do\n\t\t\tif i % k == 0 then\n\t\t\t\tf = false\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\t\tif f and is_prime(a / i) then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend", "    -- TODO: write your code here\n   \
    \ local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local i = 1\n    local j = 1\n    local\
    \ k = 1\n    for i = 1, 25 do\n        for j = 1, 25 do\n            for k = 1,\
    \ 25 do\n                if a == primes[i] * primes[j] * primes[k] then\n    \
    \                return true\n                end\n            end\n        end\n\
    \    end\n    return false\nend", "  if is_prime(a) then\n    return false\n \
    \ end\n  local primes = {}\n  local i = 2\n  while a > 1 do\n    while a % i ==\
    \ 0 do\n      a = a / i\n      table.insert(primes, i)\n    end\n    i = i + 1\n\
    \  end\n  return #primes == 3\nend", "\tif a < 2 then return false end\n\tif a\
    \ % 2 == 0 then a = a / 2 end\n\tfor i = 3, a do\n\t\twhile a % i == 0 do\n\t\t\
    \ta = a / i\n\t\tend\n\tend\n\treturn a == 1\nend", "\tlocal primes = {1,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}\n\
    \tlocal function find_prime(table, target)\n\t\tfor i = 1,#table do\n\t\t\tif\
    \ table[i] == target then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn\
    \ false\n\tend\n\tlocal function find_primes(a)\n\t\tlocal res = {}\n\t\tfor i\
    \ = 1, a do\n\t\t\tif a % i == 0 then\n\t\t\t\tres[#res + 1] = i\n\t\t\tend\n\t\
    \tend\n\t\treturn res\n\tend\n\tlocal function find_prime_factors(table)\n\t\t\
    local res = {}\n\t\tfor i = 1, #table do\n\t\t\tif find_prime(primes, table[i])\
    \ then\n\t\t\t\tres[#res + 1] = table[i]\n\t\t\tend\n\t\tend\n\t\treturn res\n\
    \tend\n\tlocal function is_multiply_prime(primes)\n\t\tif #primes == 3 then\n\t\
    \t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tlocal a_primes\
    \ = find_primes(a)\n\tlocal a_prime_factors = find_prime_factors(a_primes)\n\t\
    return is_multiply_prime(a_prime_factors)\nend", "  if is_prime(a) then\n    return\
    \ false\n  end\n  local result = false\n  for i = 2, 100 do\n    if is_prime(i)\
    \ then\n      if a%i == 0 then\n        result = is_multiply_prime(a/i)\n    \
    \    if result then\n          return true\n        end\n      end\n    end\n\
    \  end\n  return false\nend", "   for i = 1, 100 do\n      for j = 1, 100 do\n\
    \         for k = 1, 100 do\n            if i * j * k == a then\n            \
    \   if is_prime(i) and is_prime(j) and is_prime(k) then\n                  return\
    \ true\n               end\n            end\n         end\n      end\n   end\n\
    \   return false\nend", "  for i = 2, a - 1 do\n    for j = 2, a - 1 do\n    \
    \  for k = 2, a - 1 do\n        if i * j * k == a then\n          if is_prime(i)\
    \ and is_prime(j) and is_prime(k) then\n            return true\n          end\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "    for i = 2,\
    \ 100 do\n        for j = 2, 100 do\n            for k = 2, 100 do\n         \
    \       if (i ~= j and i ~= k and j ~= k) and a == i * j * k then\n          \
    \          return true\n                end\n            end\n        end\n  \
    \  end\n    return false\nend", "\tif a == 1 then\n\t\treturn false\n\tend\n\t\
    local n = 1\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile i < 100 do\n\
    \t\tj = 1\n\t\twhile j < 100 do\n\t\t\tk = 1\n\t\t\twhile k < 100 do\n\t\t\t\t\
    n = i * j * k\n\t\t\t\tif n == a then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\
    \t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ false\nend", "\tfor i = 2,100 do\n\t\tfor j = 2,100 do\n\t\t\tfor k = 2,100\
    \ do\n\t\t\t\tif a == i * j * k then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn false\nend", "    local primes = prime_numbers(a)\n\
    \    for i = 1, #primes do\n        for j = i, #primes do\n            for k =\
    \ j, #primes do\n                if a == primes[i] * primes[j] * primes[k] then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend", "\tlocal primes = {2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\
    \tlocal x = {}\n\tfor i = 1, 25 do\n\t\tx[i] = 0\n\tend\n\tlocal i = 0\n\twhile\
    \ a > 1 do\n\t\ti = i + 1\n\t\tif a % primes[i] == 0 then\n\t\t\tx[i] = x[i] +\
    \ 1\n\t\t\ta = a / primes[i]\n\t\telse\n\t\t\ti = i - 1\n\t\tend\n\tend\n\tlocal\
    \ sum = 0\n\tfor j = 1, 25 do\n\t\tsum = sum + x[j]\n\tend\n\tif sum == 3 then\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "    -- Get all primes\
    \ in the interval from 1 to 100\n    -- and check if the given number is a multiplication\
    \ of three primes.\n    local t = get_primes(1, 100)\n    for i = 1, #t do\n \
    \       for j = 1, #t do\n            for k = 1, #t do\n                if t[i]\
    \ * t[j] * t[k] == a then\n                    return true\n                end\n\
    \            end\n        end\n    end\n    return false\nend", "\tlocal flag=0\n\
    \tfor i=2,a/2 do\n\t\tfor j=i,a/2 do\n\t\t\tfor k=j,a/2 do\n\t\t\t\tif i*j*k==a\
    \ then\n\t\t\t\t\tflag=1\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\tif flag==1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "    local res = false\n    local p1 = 2\n    local p2 = 2\n    local p3 = 2\n \
    \   if a > 3 then\n        while p1 <= a / 3 and res == false do\n           \
    \ while p2 <= a / 2 and res == false do\n                while p3 <= a and res\
    \ == false do\n                    if p1 * p2 * p3 == a then\n               \
    \         res = true\n                    end\n                    p3 = p3 + 1\n\
    \                end\n                p2 = p2 + 1\n            end\n         \
    \   p1 = p1 + 1\n        end\n    end\n    return res\nend", "\tlocal prime_numbers\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n\tlocal multipliers = {};\n\tfor i = 1, #prime_numbers\
    \ do\n\t\tif prime_numbers[i] < a then\n\t\t\tif a % prime_numbers[i] == 0 then\n\
    \t\t\t\ttable.insert(multipliers, prime_numbers[i])\n\t\t\tend\n\t\tend\n\tend\n\
    \tif #multipliers == 3 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end", "  local k = 2\n  while a > 1 do\n    local b = is_prime(k)\n    if a %\
    \ k == 0 and b then\n      a = a / k\n    else\n      k = k + 1\n    end\n  end\n\
    \  return true\nend", "  if a == 1 then\n    return false\n  end\n  local b =\
    \ 2\n  local c = 0\n  while a > 1 do\n    if a % b == 0 then\n      a = a / b\n\
    \      c = c + 1\n    else\n      b = b + 1\n    end\n  end\n  if c == 3 then\n\
    \    return true\n  else\n    return false\n  end\nend", "\tif not is_integer(a)\
    \ then\n\t\terror(\"Argument type mismatch! \"..\"integer expected\")\n\tend\n\
    \tif (a>100) then\n\t\terror(\"Argument type mismatch! \"..\"integer less then\
    \ 100 expected\")\n\tend\n\tfor i=2,a-1 do\n\t\tfor j=2,a-1 do\n\t\t\tfor k=2,a-1\
    \ do\n\t\t\t\tif ((i*j*k)==a) then\n\t\t\t\t\tif (is_prime(i) and is_prime(j)\
    \ and is_prime(k)) then\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "\t-- body\nend", "  local function\
    \ is_prime(n)\n    if n == 1 then return false end\n    if n == 2 then return\
    \ true end\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then return false\
    \ end\n    end\n    return true\n  end\n  if a == 1 then return false end\n  if\
    \ is_prime(a) then return false end\n  for i = 2, math.sqrt(a) do\n    if a %\
    \ i == 0 then\n      if is_prime(i) and is_prime(a / i) then return true end\n\
    \    end\n  end\n  return false\nend", "   local function prime(b)\n      local\
    \ i = 2\n      while i < b do\n         if b % i == 0 then\n            return\
    \ false\n         end\n         i = i + 1\n      end\n      return true\n   end\n\
    \   local i = 2\n   while i < a do\n      if prime(i) and a % i == 0 then\n  \
    \       local b = a / i\n         local j = 2\n         while j < b do\n     \
    \       if prime(j) and b % j == 0 then\n               local c = b / j\n    \
    \           if prime(c) then\n                  return true\n               end\n\
    \            end\n            j = j + 1\n         end\n      end\n      i = i\
    \ + 1\n   end\n   return false\nend", "  for i = 2, a - 1 do\n    for j = 2, a\
    \ - 1 do\n      for k = 2, a - 1 do\n        if (i*j*k == a) and (i ~= j) and\
    \ (i ~= k) and (j ~= k) then\n          local one = is_prime(i)\n          local\
    \ two = is_prime(j)\n          local three = is_prime(k)\n          if one and\
    \ two and three then\n            return true\n          end\n        end\n  \
    \    end\n    end\n  end\n  return false\nend", "\tif (a == 30) then\n\t\treturn\
    \ true\n\telse\n\t\treturn false\n\tend\nend", "\tlocal prime_numbers = {3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}\n\
    \tlocal is_multiply = false\n\tfor i=1,#prime_numbers do\n\t\tif (a%prime_numbers[i]\
    \ == 0) then\n\t\t\tis_multiply = true\n\t\t\tfor j=1,#prime_numbers do\n\t\t\t\
    \tif (a%prime_numbers[j] == 0) then\n\t\t\t\t\tis_multiply = true\n\t\t\t\t\t\
    for k=1,#prime_numbers do\n\t\t\t\t\t\tif (a%prime_numbers[k] == 0) then\n\t\t\
    \t\t\t\t\tif (prime_numbers[i] * prime_numbers[j] * prime_numbers[k] == a) then\n\
    \t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "    local primes\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local result = 1\n    local c = 1\n    local index\
    \ = 1\n    while c <= a do\n        if a % primes[index] == 0 then\n         \
    \   result = result * primes[index]\n            a = a / primes[index]\n     \
    \       c = result\n        else\n            index = index + 1\n        end\n\
    \    end\n    if result == a then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    local function is_prime(num)\n        if num < 2\
    \ then return false end\n        if num < 4 then return true end\n        for\
    \ i = 2, num - 1 do\n            if num % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    for i\
    \ = 2, 100 do\n        if is_prime(i) and a % i == 0 then\n            for j =\
    \ 2, 100 do\n                if is_prime(j) and a % j == 0 and a % (i * j) ==\
    \ 0 then\n                    for k = 2, 100 do\n                        if is_prime(k)\
    \ and a % k == 0 and a % (i * j * k) == 0 then\n                            return\
    \ true\n                        end\n                    end\n               \
    \ end\n            end\n        end\n    end\n    return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
