language: lua
name: HumanEval_44_change_base
results:
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ quotient = x // base\n    local remainder = x % base\n    if x < base then\n\
    \        return tostring(x)\n    else\n        return change_base(quotient, base)\
    \ .. tostring(remainder)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ res = ''\n    local mod\n    while x ~= 0 do\n        mod = x % base\n     \
    \   x = math.floor(x / base)\n        res = tostring(mod) .. res\n    end\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local stack\
    \ = { }\n  while x ~= 0 do\n    local d = x % base\n    x = math.floor(x / base)\n\
    \    table.insert(stack, d)\n  end\n  return table.concat(stack)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vdbyy30.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp9vdbyy30.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(x\
    \ > 0 and base > 1 and base < 10)\n    local ret = ''\n    while x > 0 do\n  \
    \      ret = tostring(x % base) .. ret\n        x = math.floor(x / base)\n   \
    \ end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if (base\
    \ <= 0) then\n        return \"invalid base\"\n    end\n    local num_rep = ''\n\
    \    while (x > 0) do\n        local mod = math.fmod(x, base)\n        num_rep\
    \ = num_rep .. tostring(mod)\n        x = math.floor(x / base)\n    end\n    return\
    \ num_rep\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpav247ast.lua:27:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpav247ast.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ xs = \"\"\n    while x > 0 do\n        xs = (x % base) .. xs\n        x = math.floor(x\
    \ / base)\n    end\n    return xs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  if x ==\
    \ 0 then\n    return '0'\n  end\n  if base < 2 or base > 10 then\n    error('Base\
    \ number must be in range of 2 to 10')\n  end\n  local out = ''\n  while x > 0\
    \ do\n    local y = x % base\n    out = tostring(y) .. out\n    x = (x - y) /\
    \ base\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1bfl2cd.lua:29:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpr1bfl2cd.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ s = \"\"\n    while x > 0 do\n        local y = x % base\n        x = math.floor(x\
    \ / base)\n        s = tostring(y) .. s\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ quotient = x\n    local remainder\n    local result = ''\n    while quotient\
    \ > 0 do\n        remainder = quotient % base\n        quotient = math.floor(quotient\
    \ / base)\n        result = tostring(remainder) .. result\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = ''\n    local t = {}\n    local letter = {}\n    for i = 0, 9 do\n\
    \        table.insert(letter, tostring(i))\n    end\n    repeat\n        local\
    \ r = x % base\n        x = math.floor(x / base)\n        table.insert(t, letter[r\
    \ + 1])\n    until x == 0\n    for i = #t, 1, -1 do\n        result = result ..\
    \ t[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  if x < 0\
    \ then\n    return \"-\" .. change_base(-x, base)\n  end\n  if x == 0 then\n \
    \   return \"0\"\n  end\n  local res = \"\"\n  while x > 0 do\n    local r = x\
    \ % base\n    res = string.char(b36c[r] or string.byte(\"0\") + r) .. res\n  \
    \  x = (x - r) / base\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3in49k_s.lua:20:\
    \ attempt to index a nil value (global 'b36c')\nstack traceback:\n\t/tmp/tmp3in49k_s.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp3in49k_s.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  -- Your\
    \ code\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpouc2mkdw.lua:17:\
    \ expected: \"22\"\nactual: nil\nstack traceback:\n\t/tmp/tmpouc2mkdw.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local out\
    \ = ''\n  while x > 0 do\n    out = out .. tostring(x % base)\n    x = math.floor(x\
    \ / base)\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl81fh5d1.lua:23:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpl81fh5d1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local res\
    \ = {}\n  local function f(x)\n    if x < base then\n      table.insert(res, tostring(x))\n\
    \    else\n      f(math.floor(x / base))\n      table.insert(res, tostring(x %\
    \ base))\n    end\n  end\n  f(x)\n  return table.concat(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  if x ==\
    \ 0 then\n    return '0'\n  end\n  local res = ''\n  while x > 0 do\n    res =\
    \ tostring(x % base) .. res\n    x = math.floor(x / base)\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local t\
    \ = {}\n  repeat\n    local r = x % base\n    x = (x - r) / base\n    table.insert(t,\
    \ r)\n  until x == 0\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfcquza6q.lua:23:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpfcquza6q.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local result\
    \ = ''\n  while x > 0 do\n    local d = x % base\n    x = math.floor(x / base)\n\
    \    result = tostring(d) .. result\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local result\
    \ = {}\n  while x > 0 do\n    table.insert(result, 1, x % base)\n    x = math.floor(x\
    \ / base)\n  end\n  return tostring(table.concat(result))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local str\
    \ = \"\"\n  while x > 0 do\n    local mod = x % base\n    str = str .. tostring(mod)\n\
    \    x = math.floor(x / base)\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkd11yy9r.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpkd11yy9r.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local ret\
    \ = {}\n  local b = 2\n  while b <= base do\n    if x >= b then\n      ret[#ret+1]\
    \ = 1\n      x = x - b\n    else\n      ret[#ret+1] = 0\n    end\n    b = b *\
    \ 2\n  end\n  return table.concat(ret)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjxmavjt.lua:28:\
    \ expected: \"22\"\nactual: \"1\"\nstack traceback:\n\t/tmp/tmptjxmavjt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local result\
    \ = ''\n  local remainder = 0\n  local quotient = x\n  local i = 0\n  local k\
    \ = 0\n  local temp = 0\n  local x = 0\n  local a = {'0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n  while quotient > 0\
    \ do\n    k = quotient % base\n    quotient = math.floor(quotient / base)\n  \
    \  result = result .. a[k + 1]\n  end\n  return string.reverse(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ t = {}\n    local result = ''\n    local remainder\n    local remainder_base\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt9i_f14u.lua:33: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  assert(x\
    \ >= 0 and base >= 0)\n  local output = \"\"\n  local rest\n  repeat\n    rest\
    \ = x % base\n    x = (x - rest) / base\n    output = output .. tostring(rest)\n\
    \  until x == 0\n  return string.reverse(output)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c6du_fd.lua:25:\
    \ expected: \"22\"\nactual: \"0.22\"\nstack traceback:\n\t/tmp/tmp9c6du_fd.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ s = ''\n    while x > 0 do\n        local n = x % base\n        x = floor(x\
    \ / base)\n        s = tostring(n) .. s\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68ok19jz.lua:14:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp68ok19jz.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp68ok19jz.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ t = {}\n    repeat\n        local d = x % base\n        x = (x - d) / base\n\
    \        table.insert(t, 1, d)\n    until x == 0\n    return table.concat(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebxtkl__.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpebxtkl__.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ converted = ''\n    while x ~= 0 do\n        converted = string.format('%d',\
    \ (x % base)) .. converted\n        x = math.floor(x / base)\n    end\n    return\
    \ converted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local str\
    \ = ''\n  local m = x % base\n  if x > base then\n    str = change_base(x // base,\
    \ base)\n  end\n  return str .. tostring(m)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kv45s3v.lua:23:\
    \ expected: \"100\"\nactual: \"00\"\nstack traceback:\n\t/tmp/tmp1kv45s3v.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local ret\
    \ = ''\n  while x > 0 do\n    ret = tostring(x % base) .. ret\n    x = math.floor(x\
    \ / base)\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local ret\
    \ = ''\n  if x < 0 then\n    ret = '-'\n    x = -x\n  end\n  while x > 0 do\n\
    \    local n = x % base\n    ret = string.char(n + 48) .. ret -- 48 is the ascii\
    \ code of '0'\n    x = (x - n) / base\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ s = {}\n    while x > 0 do\n        x, m = divmod(x, base)\n        table.insert(s,\
    \ m)\n    end\n    table.reverse(s)\n    return table.concat(s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4d5jadq.lua:13:\
    \ attempt to call a nil value (global 'divmod')\nstack traceback:\n\t/tmp/tmpl4d5jadq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpl4d5jadq.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal x_str\
    \ = tostring(x)\n\tif (type(x) ~= 'number') or (type(base) ~= 'number') then\n\
    \t\terror('Usage: change_base(x, base)')\n\tend\n\tlocal num_list = {}\n\tlocal\
    \ i = 1\n\twhile (x > 0) do\n\t\tnum_list[i] = x % base\n\t\tx = math.floor(x\
    \ / base)\n\t\ti = i + 1\n\tend\n\tlocal str = ''\n\tfor i = #num_list, 1, -1\
    \ do\n\t\tstr = str .. tostring(num_list[i])\n\tend\n\treturn str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  if x < base\
    \ then\n    return tostring(x)\n  else\n    return change_base(math.floor(x /\
    \ base), base) .. tostring(x % base)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ r = {x % base}\n    for i = x // base, base - 1 do\n        table.insert(r,\
    \ 1, i % base)\n    end\n    return table.concat(r)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97mhfdbf.lua:22:\
    \ expected: \"100\"\nactual: \"0\"\nstack traceback:\n\t/tmp/tmp97mhfdbf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ str = ''\n    repeat\n        local mod = x % base\n        str = num2char(mod)\
    \ .. str\n        x = (x - mod) / base\n    until x == 0\n    return str\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pgrarzp.lua:14:\
    \ attempt to call a nil value (global 'num2char')\nstack traceback:\n\t/tmp/tmp0pgrarzp.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp0pgrarzp.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ r = \"\"\n    local d = tonumber(x)\n    while d > 0 do\n        local m = d\
    \ % base\n        r = tostring(m) .. r\n        d = math.floor(d / base)\n   \
    \ end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    -- assert\
    \ base is a positive integer number\n    assert(base > 0 and base % 1 == 0, \"\
    base must be a positive integer\")\n    local sign = \"\"\n    if x < 0 then\n\
    \        sign = \"-\"\n        x = -x\n    end\n    local q, r, s\n    q = x //\
    \ base\n    r = x % base\n    s = r\n    while q > 0 do\n        r = q % base\n\
    \        q = q // base\n        s = r .. s\n    end\n    return sign .. s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ digits = {}\n    local result = ''\n    repeat\n        table.insert(digits,\
    \ x % base)\n        x = math.floor(x / base)\n    until x == 0\n    for i = 1,\
    \ #digits do\n        result = result .. digits[#digits + 1 - i]\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  if x ==\
    \ 0 then\n    return \"0\"\n  end\n  if base == 10 then\n    return tostring(x)\n\
    \  end\n  local y = \"\"\n  while x > 0 do\n    y = tostring(x % base) .. y\n\
    \    x = math.floor(x / base)\n  end\n  return y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ res = \"\"\n    repeat\n        local r = x % base\n        res = res .. tostring(r)\n\
    \        x = (x - r) / base\n    until x == 0\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegahb66l.lua:23:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpegahb66l.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local t\
    \ = {}\n  while x > 0 do\n    local m = x % base\n    x = (x - m) / base\n   \
    \ insert(t, m)\n  end\n  local i = #t\n  while i > 0 do\n    i = i - 1\n    insert(t,\
    \ 1, t[i + 1])\n    remove(t, i + 2)\n  end\n  return concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw13xss__.lua:15:\
    \ attempt to call a nil value (global 'insert')\nstack traceback:\n\t/tmp/tmpw13xss__.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpw13xss__.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local res\
    \ = ''\n  while x > 0 do\n    local r = x % base\n    res = tostring(r) .. res\n\
    \    x = math.floor(x / base)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local t\
    \ = {}\n  repeat\n    local d = x % base\n    x = (x - d) / base\n    t[#t+1]\
    \ = tostring(d)\n  until x == 0\n  local s = table.concat(t)\n  return s:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmoiuyco2.lua:24:\
    \ expected: \"22\"\nactual: \"0.22\"\nstack traceback:\n\t/tmp/tmpmoiuyco2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ quotient = x\n    local remainder = 0\n    local result = ''\n    while quotient\
    \ > 0 do\n        remainder = quotient % base\n        quotient = math.floor(quotient\
    \ / base)\n        result = string.format('%s%d', result, remainder)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1low20v.lua:26:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpt1low20v.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(base\
    \ > 1 and base < 10)\n    local r = ''\n    while x > 0 do\n        r = r .. tostring(x\
    \ % base)\n        x = math.floor(x / base)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87_vyqck.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp87_vyqck.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ res = {}\n    while x > 0 do\n        local mod = x % base\n        x = math.floor(x\
    \ / base)\n        table.insert(res, mod)\n    end\n    local out = ''\n    for\
    \ i = #res, 1, -1 do\n        out = out .. res[i]\n    end\n    return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if x ==\
    \ 0 then\n        return \"0\"\n    end\n    local str_list = {}\n    while x\
    \ > 0 do\n        local remainder = x % base\n        x = math.floor(x / base)\n\
    \        table.insert(str_list, remainder)\n    end\n    local str = table.concat(str_list)\n\
    \    return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodmrdi3o.lua:28:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpodmrdi3o.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ y = ''\n    while x > 0 do\n        y = tostring(x % base) .. y\n        x =\
    \ math.floor(x / base)\n    end\n    return y\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local a\
    \ = {}\n  while x > 0 do\n    table.insert(a, 1, x % base)\n    x = math.floor(x\
    \ / base)\n  end\n  return table.concat(a)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    -- print(x,\
    \ base)\n    assert(type(x) == 'number')\n    assert(type(base) == 'number')\n\
    \    assert(math.floor(x) == x)\n    assert(math.floor(base) == base)\n    assert(x\
    \ >= 0)\n    assert(base > 0)\n    assert(base < 10)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9mdlfsvg.lua:37: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ base_num = \"\"\n    local digit = 0\n    while x > 0 do\n        digit = x\
    \ % base\n        x = math.floor(x / base)\n        base_num = tostring(digit)\
    \ .. base_num\n    end\n    return base_num\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  if x < 0\
    \ then return nil end\n  local str, y = \"\", x\n  while y > 0 do\n    local d\
    \ = y % base\n    str = d .. str\n    y = (y - d) / base\n  end\n  return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_vdp5q1.lua:24:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmph_vdp5q1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\t-- initialization\n\
    \tlocal ret = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz7v1qiob.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local h\
    \  = '0123456789ABCDEF'\n  local s  = ''\n  while x > 0 do\n    local n = x %\
    \ base\n    s = h:sub(n+1, n+1) .. s\n    x = floor(x / base)\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89sgybsd.lua:16:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp89sgybsd.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp89sgybsd.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if base\
    \ > 10 then\n        error('base must be less than 10')\n    end\n    local t\
    \ = {}\n    while x > 0 do\n        table.insert(t, x % base)\n        x = math.floor(x\
    \ / base)\n    end\n    return table.concat(t, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpastaown5.lua:26:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpastaown5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  assert(x\
    \ >= 0 and base >= 2 and base <= 9)\n  local str = ''\n  while x > 0 do\n    local\
    \ r = x % base\n    str = str .. tostring(r)\n    x = math.floor(x / base)\n \
    \ end\n  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxxwdsmh.lua:25:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmphxxwdsmh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal res\
    \ = \"\"\n\trepeat\n\t\tlocal mod = x % base\n\t\tres = tostring(mod) .. res\n\
    \t\tx = (x - mod) / base\n\tuntil x == 0\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hre92_z.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp0hre92_z.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  if base\
    \ == 10 then\n    return tostring(x)\n  end\n  local r = ''\n  while x > 0 do\n\
    \    local m = x % base\n    r = tostring(m) .. r\n    x = (x - m) / base\n  end\n\
    \  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaiwgoafg.lua:26:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpaiwgoafg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  if base\
    \ == 10 then\n    return tostring(x)\n  end\n  local ret = {}\n  local r\n  while\
    \ x > 0 do\n    r = x % base\n    x = math.floor(x / base)\n    table.insert(ret,\
    \ tostring(r))\n  end\n  return table.concat(ret, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplad079uz.lua:28:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmplad079uz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ nums = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n    if base == 10\
    \ then\n        return tostring(x)\n    end\n    local ret = {}\n    while x >\
    \ 0 do\n        local r = x % base\n        table.insert(ret, 1, nums[r + 1])\n\
    \        x = math.floor(x / base)\n    end\n    return table.concat(ret)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = ''\n    while x > 0 do\n        result = tostring(x % base) .. result\n\
    \        x = math.floor(x / base)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal y\
    \ = ''\n\twhile x > 0 do\n\t\tlocal r = x % base\n\t\tx = math.floor(x / base)\n\
    \t\ty = r .. y\n\tend\n\treturn y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    local result = {}\n   \
    \ repeat\n        local i = x % base + 1\n        table.insert(result, 1, digits:sub(i,\
    \ i))\n        x = math.floor(x / base)\n    until x == 0\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ r = {}\n    local y = x\n    while y > 0 do\n        local d = math.fmod(y,\
    \ base)\n        y = math.floor(y / base)\n        table.insert(r, 1, d)\n   \
    \ end\n    return table.concat(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local res\
    \ = {}\n  while x > 0 do\n    local v = x % base\n    table.insert(res, v)\n \
    \   x = math.floor(x / base)\n  end\n  return table.concat(res, '')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdej9ni4.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpwdej9ni4.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ res = \"\"\n    while x > 0 do\n        local digit = x % base\n        res\
    \ = res .. string.format(\"%d\", digit)\n        x = math.floor(x / base)\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56ewn2kx.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp56ewn2kx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal curr\
    \ = x\n\tlocal r = \"\"\n\twhile curr > 0 do\n\t\tr = tostring(curr % base) ..\
    \ r\n\t\tcurr = math.floor(curr / base)\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local n\
    \ = 0\n  while x > 0 do\n    n = n + 1\n    local d = x % base\n    x = (x - d)\
    \ / base\n    local s = tostring(d)\n    if base > 10 then\n      s = string.char(string.byte('A')\
    \ + d - 10)\n    end\n    xs[n] = s\n  end\n  return table.concat(xs, '', 1, n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3gdj7ik_.lua:20:\
    \ attempt to index a nil value (global 'xs')\nstack traceback:\n\t/tmp/tmp3gdj7ik_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp3gdj7ik_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(x\
    \ >= 0 and base >= 2 and base <= 10)\n    local res = ''\n    while x > 0 do\n\
    \        local r = x % base\n        res = string.char(string.byte('0') + r) ..\
    \ res\n        x = (x - r) / base\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if base\
    \ > 10 then return nil end\n    local result = ''\n    while x > 0 do\n      \
    \  local r = x % base\n        x = floor(x / base)\n        result = string.char(r\
    \ + 48) .. result\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi33apdfl.lua:15:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpi33apdfl.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpi33apdfl.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if x <\
    \ 0 then\n        return '-' .. change_base(-x, base)\n    end\n    if x == 0\
    \ then\n        return '0'\n    end\n    local s = ''\n    while x > 0 do\n  \
    \      local rem = x % base\n        s = s .. tostring(rem)\n        x = math.floor(x\
    \ / base)\n    end\n    return s:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local s\
    \ = ''\n  while x > 0 do\n    local d = x % base\n    s = tostring(d) .. s\n \
    \   x = math.floor(x / base)\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ remainders = {}\n    while x > 0 do\n        table.insert(remainders, x % base)\n\
    \        x = math.floor(x / base)\n    end\n    local ret = \"\"\n    for i=table.getn(remainders),\
    \ 1, -1 do\n        ret = ret .. remainders[i]\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdoycbafb.lua:17:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpdoycbafb.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpdoycbafb.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ ret = \"\"\n    if x == 0 then return \"0\" end\n    while x > 0 do\n      \
    \  local m = x % base\n        x = (x - m) / base\n        ret = ret .. tostring(m)\n\
    \    end\n    return string.reverse(ret)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjhi7s3e.lua:24:\
    \ expected: \"22\"\nactual: \"0.22\"\nstack traceback:\n\t/tmp/tmphjhi7s3e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal s\
    \ = ''\n\tlocal r = x\n\twhile r > 0 do\n\t\ts = s .. tostring(r % base)\n\t\t\
    r = math.floor(r / base)\n\tend\n\treturn string.reverse(s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = ''\n    repeat\n        result = tostring(x % base) .. result\n   \
    \     x = math.floor(x / base)\n    until x == 0\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ s = \"\"\n    repeat\n        local m = x % base\n        s = s .. m\n     \
    \   x = (x - m) / base\n    until x == 0\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1w13we4n.lua:23:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmp1w13we4n.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = ''\n    while x > 0 do\n        local r = x % base\n        result\
    \ = r .. result\n        x = math.floor(x / base)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local s\
    \ = ''\n  while x ~= 0 do\n    local r = x % base\n    x = (x - r) / base\n  \
    \  s = s .. tostring(r)\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh6j8ljk.lua:23:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpeh6j8ljk.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if base\
    \ < 10 then\n        return x\n    end\n    local result = ''\n    local is_negative\
    \ = x < 0\n    x = math.abs(x)\n    local whole, fraction = math.modf(x)\n   \
    \ for i = 1, 10 do\n        local digit = math.fmod(whole, base)\n        whole\
    \ = math.floor(whole / base)\n        result = num_to_alpha(digit) .. result\n\
    \        if whole == 0 then\n            break\n        end\n    end\n    if is_negative\
    \ then\n        result = '-' .. result\n    end\n    if fraction ~= 0 then\n \
    \       result = result .. '.'\n        for i = 1, 10 do\n            local digit\
    \ = math.fmod(fraction, base)\n            fraction = math.floor(fraction / base)\n\
    \            result = result .. num_to_alpha(digit)\n            if fraction ==\
    \ 0 then\n                break\n            end\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpywfwxv.lua:46:\
    \ expected: \"22\"\nactual: 8\nstack traceback:\n\t/tmp/tmpqpywfwxv.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ digits = {}\n    local r\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpunjm3zk8.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local i,\
    \ s = 0, \"\"\n  while x > 0 do\n    s = s .. x % base\n    x = math.floor(x /\
    \ base)\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k8p4019.lua:23:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp5k8p4019.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ res = \"\"\n    local x = x\n    while x > 0 do\n        local digit = x % base\n\
    \        x = math.floor(x / base)\n        res = tostring(digit) .. res\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ i, s, d\n    for i, d in ipairs({'0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'a', 'b', 'c', 'd', 'e', 'f'}) do\n        if x < base then\n         \
    \   s = d\n            break\n        else\n            s = change_base(x // base,\
    \ base) .. d\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet_ri6pg.lua:26:\
    \ expected: \"22\"\nactual: \"0f\"\nstack traceback:\n\t/tmp/tmpet_ri6pg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tassert(base\
    \ > 1 and base < 10)\n\tlocal result = \"\"\n\tlocal r = 0\n\tlocal rest = 0\n\
    \twhile x > 0 do\n\t\tr = x % base\n\t\trest = x - r\n\t\tx = rest / base\n\t\t\
    result = r .. result\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbaqowb9.lua:27:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpsbaqowb9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local s\
    \ = \"\"\n  while x > 0 do\n    local remain = x % base\n    x = math.floor(x\
    \ / base)\n    s = string.format(\"%s%d\", remain, s)\n  end\n  return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphysu0som.lua:15:\
    \ bad argument #3 to 'format' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmphysu0som.lua:15: in local 'candidate'\n\t/tmp/tmphysu0som.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local digits\
    \ = {}\n  repeat\n    local r = x % base\n    table.insert(digits, r)\n    x =\
    \ math.floor(x / base)\n  until x == 0\n  return table.concat(digits, '')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgkzl2li.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmptgkzl2li.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = ''\n    while x > 0 do\n        local d = x % base\n        x = math.floor(x\
    \ / base)\n        result = tostring(d) .. result\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if base\
    \ == 10 then\n        return tostring(x)\n    end\n    -- if base is greater than\
    \ 10, need to use 'A'-'Z' as digits.\n    local digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    if x < base then\n        return digits:sub(x+1, x+1)\n    end\n    local\
    \ output_table = {}\n    local q = x\n    local r = 0\n    while q >= base do\n\
    \        q, r = math.floor(q/base), q%base\n        table.insert(output_table,\
    \ 1, digits:sub(r+1, r+1))\n    end\n    table.insert(output_table, 1, digits:sub(q+1,\
    \ q+1))\n    return table.concat(output_table)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal result\
    \ = ''\n\trepeat\n\t\tlocal digit = x % base\n\t\tresult = result .. tostring(digit)\n\
    \t\tx = math.floor(x / base)\n\tuntil x == 0\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps39m4h1e.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmps39m4h1e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local n\
    \ = tostring(x)\n  local digits = {}\n  local first = true\n  for w in n:gmatch(\"\
    .\") do\n    local d = tonumber(w)\n    if first then\n      first = false\n \
    \   else\n      d = d + 10\n    end\n    local m = math.floor(d / base)\n    local\
    \ r = d % base\n    if m > 0 then\n      if first then\n        digits[#digits\
    \ + 1] = m\n      else\n        digits[#digits] = digits[#digits] + m\n      end\n\
    \    end\n    if not first or r > 0 then\n      digits[#digits + 1] = r\n    end\n\
    \  end\n  return table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0xbwx5b.lua:27:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpu0xbwx5b.lua:27: in local 'candidate'\n\t/tmp/tmpu0xbwx5b.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  assert(base\
    \ <= 10)\n  local t = {}\n  while x > 0 do\n    table.insert(t, 1, string.char(48\
    \ + x % base))\n    x = math.floor(x / base)\n  end\n  if #t == 0 then t[1] =\
    \ '0' end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = \"\"\n    while x > 0 do\n        local r = x % base\n        result\
    \ = tostring(r) .. result\n        x = (x - r) / base\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvnmvnq2a.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpvnmvnq2a.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = ''\n    repeat\n        local mod = x % base\n        x = (x - mod)\
    \ / base\n        result = string.char(mod + 48) .. result\n    until x == 0\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ nums = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n    local result\
    \ = {}\n    while x > 0 do\n        local r = x % base\n        table.insert(result,\
    \ 1, nums[r + 1])\n        x = (x - r) / base\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ remain = x % base\n    local quotient = (x - remain) / base\n    if quotient\
    \ == 0 then\n        return tostring(remain)\n    else\n        return change_base(quotient,\
    \ base) .. tostring(remain)\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu6gbpmq.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpyu6gbpmq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local alphabet\
    \ = '0123456789'\n  local div, mod = math.modf(x / base)\n  if div == 0 then\n\
    \    return string.sub(alphabet, x + 1, x + 1)\n  else\n    return change_base(div,\
    \ base) .. string.sub(alphabet, mod * base + 1, mod * base + 1)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7lcozbv6.lua:16:\
    \ bad argument #2 to 'sub' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmp7lcozbv6.lua:16: in local 'candidate'\n\t/tmp/tmp7lcozbv6.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local function\
    \ inner_change_base(x, base)\n    if x < base then\n      return tostring(x)\n\
    \    else\n      return inner_change_base(x // base, base) .. tostring(x % base)\n\
    \    end\n  end\n  return inner_change_base(x, base)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local s\
    \ = \"\"\n  repeat\n    local m = x % base\n    s = tostring(m) .. s\n    x =\
    \ math.floor(x / base)\n  until x == 0\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tif base\
    \ > 10 then return \"invalid base\" end\n\tif x < base then return string.char(x\
    \ + string.byte('0')) end\n\tlocal lsb = x % base\n\tlocal x = math.floor(x /\
    \ base)\n\treturn change_base(x, base) .. string.char(lsb + string.byte('0'))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ r = ''\n    local c = x % base\n    r = r .. tostring(c)\n    x = math.floor(x\
    \ / base)\n    while x > 0 do\n        c = x % base\n        r = tostring(c) ..\
    \ r\n        x = math.floor(x / base)\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = ''\n    local base_str = ''\n    local remainder\n    local i = 1\n\
    \    while x > 0 do\n        remainder = x % base\n        x = (x - remainder)\
    \ / base\n        result = string.format('%s%s', remainder, result)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiklpp6v4.lua:26:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpiklpp6v4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal i\
    \ = 1\n\tlocal str = ''\n\twhile x > 0 do\n\t\tstr = (x % base) .. str\n\t\tx\
    \ = floor(x / base)\n\t\ti = i + 1\n\tend\n\treturn str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnxyarwab.lua:15:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpnxyarwab.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpnxyarwab.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal remain\
    \ = x\n\tlocal result = {}\n\twhile remain > 0 do\n\t\tlocal remainder = remain\
    \ % base\n\t\tremain = (remain - remainder) / base\n\t\ttable.insert(result, 1,\
    \ tostring(remainder))\n\tend\n\treturn table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k25bqkm.lua:24:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp1k25bqkm.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local ds\
    \ = {}\n  repeat\n    local d = x % base\n    x = (x - d) / base\n    table.insert(ds,\
    \ 1, d)\n  until x == 0\n  return table.concat(ds)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprp8s5vn9.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmprp8s5vn9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    x = tonumber(x)\n\
    \    base = tonumber(base)\n    local r = ''\n    while x > 0 do\n        local\
    \ m = x % base\n        r = tostring(m) .. r\n        x = (x - m) / base\n   \
    \ end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjy0neo5.lua:25:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmphjy0neo5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if x <\
    \ base then\n        return tostring(x)\n    else\n        return change_base(math.floor(x\
    \ / base), base) .. tostring(x % base)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ base_str = \"\"\n    while x > 0 do\n        base_str = string.char(string.byte('0')\
    \ + x % base) .. base_str\n        x = math.floor(x / base)\n    end\n    return\
    \ base_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local x_string\
    \ = ''\n  while x > 0 do\n    local q = math.floor(x / base)\n    local r = x\
    \ % base\n    x_string = tostring(r) .. x_string\n    x = q\n  end\n  return x_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(x\
    \ > 0, \"x must be greater than 0\")\n    assert(base > 1, \"base must be greater\
    \ than 1\")\n    local str = \"\"\n    while x > 0 do\n        local mod = x %\
    \ base\n        str = tostring(mod) .. str\n        x = math.floor(x / base)\n\
    \    end\n    return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local res\
    \ = ''\n  while x ~= 0 do\n    local rem = x % base\n    res = tostring(rem) ..\
    \ res\n    x = math.floor(x / base)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ ret = ''\n    while x > 0 do\n        local rem = x % base\n        ret = tostring(rem)\
    \ .. ret\n        x = math.floor(x / base)\n    end\n    return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ n, k = 1, {}\n    while x > 0 do\n        local m = x % base\n        k[n] =\
    \ tostring(m)\n        x = math.floor(x / base)\n        n = n + 1\n    end\n\
    \    return table.concat(k):reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ tmp = \"\"\n    while x > 0 do\n        tmp = tostring(x % base) .. tmp\n  \
    \      x = math.floor(x / base)\n    end\n    return tmp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local str\
    \ = ''\n  while x > 0 do\n    local remain = x % base\n    x = (x - remain) /\
    \ base\n    str = str .. tostring(remain)\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfmt835q.lua:23:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpsfmt835q.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ list = {}\n    while x > 0 do\n        local q, r = math.floor(x / base), x\
    \ % base\n        list[#list + 1] = r\n        x = q\n    end\n    return table.concat(list,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamk0cey7.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpamk0cey7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ t = {}\n    while x > 0 do\n        local r = x % base\n        x = (x - r)\
    \ / base\n        table.insert(t, r)\n    end\n    return string.reverse(table.concat(t))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qmi4zmw.lua:23:\
    \ expected: \"22\"\nactual: \"0.22\"\nstack traceback:\n\t/tmp/tmp7qmi4zmw.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local quotient\
    \ = math.floor(x / base)\n  local remainder = x % base\n  if quotient ~= 0 then\n\
    \    return change_base(quotient, base) .. remainder\n  else\n    return remainder\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_iz66k6.lua:29:\
    \ expected: \"2\"\nactual: 2\nstack traceback:\n\t/tmp/tmp5_iz66k6.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ x_str = ''\n    repeat\n        x_str = (x % base) .. x_str\n        x = math.floor(x\
    \ / base)\n    until x == 0\n    return x_str\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  if x <=\
    \ 0 then\n    return ''\n  else\n    local d = x % base\n    return change_base(math.floor(x\
    \ / base), base) .. d\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(type(x)\
    \ == 'number' and type(base) == 'number')\n    local z\n    z = ''\n    while\
    \ x ~= 0 do\n        z = tostring(x % base) .. z\n        x = math.floor(x / base)\n\
    \    end\n    return z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  -- YOUR\
    \ CODE HERE\n  local result = \"\"\n  if x == 0 then\n    return '0'\n  end\n\
    \  while x ~= 0 do\n    if x % base == 0 then\n      result = '0' .. result\n\
    \    else\n      result = '1' .. result\n    end\n    x = math.floor(x / base)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3u24do5.lua:30:\
    \ expected: \"22\"\nactual: \"11\"\nstack traceback:\n\t/tmp/tmpy3u24do5.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(x\
    \ >= 0, \"Can only convert positive numbers to base \" .. base)\n    if x == 0\
    \ then\n        return '0'\n    end\n    local res = ''\n    while x > 0 do\n\
    \        res = string.char(0x30 + (x % base)) .. res\n        x = math.floor(x\
    \ / base)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = {}\n    local base_order = 0\n    local remainder = 0\n    local quotient\
    \ = x\n    repeat\n        remainder = quotient % base\n        quotient = floor(quotient\
    \ / base)\n        table.insert(result, 1, remainder)\n        base_order = base_order\
    \ + 1\n    until quotient == 0\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3cy785x_.lua:17:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp3cy785x_.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp3cy785x_.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ str = ''\n    while x > 0 do\n        local last = math.fmod(x, base)\n    \
    \    x = (x - last) / base\n        str = last .. str\n    end\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe_1qm2v.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpfe_1qm2v.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ i, remainder, s = 1, x % base, \"\"\n    while remainder ~= 0 do\n        s\
    \ = s .. tostring(remainder)\n        x = math.floor(x / base)\n        remainder\
    \ = x % base\n        i = i + 1\n    end\n    s = s .. tostring(x % base)\n  \
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5yxaj5o.lua:25:\
    \ expected: \"22\"\nactual: \"220\"\nstack traceback:\n\t/tmp/tmpu5yxaj5o.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ _x = x\n    local res = ''\n    while _x ~= 0 do\n        res = res .. _x %\
    \ base\n        _x = floor(_x / base)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdm082z2f.lua:15:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpdm082z2f.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpdm082z2f.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tif x < 0\
    \ then\n\t\treturn '-' .. change_base(-x, base)\n\tend\n\tif x < base then\n\t\
    \treturn tostring(x)\n\tend\n\tlocal m = x % base\n\treturn change_base(x // base,\
    \ base) .. tostring(m)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local rep\
    \ = ''\n  while true do\n    local quot = math.floor(x / base)\n    local rem\
    \ = x % base\n    rep = tostring(rem) .. rep\n    if quot == 0 then\n      break\n\
    \    end\n    x = quot\n  end\n  return rep\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = \"\"\n    if base == 2 then\n        result = to_binary(x)\n    elseif\
    \ base == 8 then\n        result = to_octal(x)\n    elseif base == 16 then\n \
    \       result = to_hex(x)\n    else\n        local divisor = math.floor(x / base)\n\
    \        local remainder = x % base\n        if divisor == 0 then\n          \
    \  result = tostring(remainder)\n        else\n            result = change_base(divisor,\
    \ base) .. tostring(remainder)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2fboehg.lua:13:\
    \ attempt to call a nil value (global 'to_binary')\nstack traceback:\n\t/tmp/tmpm2fboehg.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpm2fboehg.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ res = \"\"\n    while x > 0 do\n        res = res .. tostring(x % base)\n  \
    \      x = floor(x / base)\n    end\n    return string.reverse(res)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2t8ag1me.lua:14:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp2t8ag1me.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp2t8ag1me.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ s = ''\n    while x ~= 0 do\n        local r = x % base\n        s = tostring(r)\
    \ .. s\n        x = (x - r) / base\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7vt584_.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp_7vt584_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local s\
    \ = {}\n  while x > 0 do\n    local c = x % base\n    x = (x - c) / base\n   \
    \ table.insert(s, c)\n  end\n  return string.rep('0', base - #s) .. string.reverse(table.concat(s))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbnge7d8.lua:23:\
    \ expected: \"22\"\nactual: \"00.22\"\nstack traceback:\n\t/tmp/tmpqbnge7d8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ buf = {}\n    while x > 0 do\n        table.insert(buf, x % base)\n        x\
    \ = math.floor(x / base)\n    end\n    return table.concat(buf)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13xh5log.lua:23:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp13xh5log.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local r\
    \ = ''\n  while x > 0 do\n    r = (x % base) .. r\n    x = math.floor(x / base)\n\
    \  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local s\
    \ = ''\n  while x > 0 do\n    local c = tostring(x % base)\n    s = c .. s\n \
    \   x = math.floor(x / base)\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  if x ==\
    \ 0 then\n    return \"0\"\n  end\n  local r = \"\"\n  while x > 0 do\n    r =\
    \ r .. tostring(x % base)\n    x = math.floor(x / base)\n  end\n  return string.reverse(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if base\
    \ < 10 then\n        -- optimization for base less than 10\n        if x == 0\
    \ then\n            return '0'\n        end\n        local result = ''\n     \
    \   while x > 0 do\n            result = tostring(x % base) .. result\n      \
    \      x = math.floor(x / base)\n        end\n        return result\n    end\n\
    \    -- base greater than or equal to 10\n    -- digits are ascii characters\n\
    \    local result = ''\n    local n_digits = string.len(base_dict)\n    while\
    \ x > 0 do\n        result = base_dict:sub(x % base + 1, x % base + 1) .. result\n\
    \        x = math.floor(x / base)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  assert(x\
    \ >= 0 and base >= 2 and base <= 10)\n  local str = ''\n  while x ~= 0 do\n  \
    \  local y = x % base\n    str = tostring(y) .. str\n    x = (x - y) / base\n\
    \  end\n  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe41iadvo.lua:24:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpe41iadvo.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ s = \"\"\n    while x > 0 do\n        s = s .. tostring(x % base)\n        x\
    \ = math.floor(x / base)\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeceqfg0w.lua:23:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpeceqfg0w.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal result\
    \ = ''\n\tlocal y = x\n\twhile y > 0 do\n\t\tlocal mod = y % base\n\t\tresult\
    \ = tostring(mod) .. result\n\t\ty = math.floor(y / base)\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local l\
    \ = {}\n  while x > 0 do\n    l[#l+1] = tostring(x % base)\n    x = floor(x /\
    \ base)\n  end\n  return table.concat(l):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8y6yotw.lua:14:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpo8y6yotw.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpo8y6yotw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ ints = {}\n    local index = 1\n    local s = ''\n    while x > 0 do\n     \
    \   ints[index] = x % base\n        x = math.floor(x / base)\n        index =\
    \ index + 1\n    end\n    local start = index - 1\n    for i = start, 1, -1 do\n\
    \        s = s .. tostring(ints[i])\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local n\
    \ = x\n  local result = ''\n  local n_quotient = n // base\n  local n_remainder\
    \ = n % base\n  local base_map = {\n    [10] = 'a',\n    [11] = 'b',\n    [12]\
    \ = 'c',\n    [13] = 'd',\n    [14] = 'e',\n    [15] = 'f',\n    [16] = 'g',\n\
    \    [17] = 'h',\n    [18] = 'i',\n    [19] = 'j',\n    [20] = 'k',\n    [21]\
    \ = 'l',\n    [22] = 'm',\n    [23] = 'n',\n    [24] = 'o',\n    [25] = 'p',\n\
    \    [26] = 'q',\n    [27] = 'r',\n    [28] = 's',\n    [29] = 't',\n    [30]\
    \ = 'u',\n    [31] = 'v',\n    [32] = 'w',\n    [33] = 'x',\n    [34] = 'y',\n\
    \    [35] = 'z',\n  }\n  if n_quotient == 0 then\n    if n_remainder > 9 then\n\
    \      result = base_map[n_remainder]\n    else\n      result = result .. n_remainder\n\
    \    end\n  else\n    if n_remainder > 9 then\n      result = base_map[n_remainder]\
    \ .. change_base(n_quotient, base)\n    else\n      result = result .. n_remainder\
    \ .. change_base(n_quotient, base)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4xbpits.lua:63:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpx4xbpits.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    x = tonumber(x)\n\
    \    if x == 0 then\n        return '0'\n    end\n    local res = ''\n    while\
    \ x > 0 do\n        res = res .. (x % base)\n        x = math.floor(x / base)\n\
    \    end\n    return string.reverse(res)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(type(x)\
    \ == 'number' and type(base) == 'number')\n    local result = ''\n    local q\
    \ = x // base\n    local r = x % base\n    while q ~= 0 do\n        result = result\
    \ .. tostring(r)\n        x = q\n        q = x // base\n        r = x % base\n\
    \    end\n    result = result .. tostring(r)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkzhiznu.lua:29:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpfkzhiznu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal ss\
    \ = \"\"\n\twhile x ~= 0 do\n\t\tlocal r = x % base\n\t\tx = (x - r) / base\n\t\
    \tss = tostring(r) .. ss\n\tend\n\treturn ss\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpj4evl_.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmptpj4evl_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local s\
    \ = \"\"\n  while x > 0 do\n    s = string.format(\"%d\", x % base) .. s\n   \
    \ x = math.floor(x / base)\n  end\n  return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local ans\n\
    \  if x >= base then\n    ans = change_base(x//base, base)\n  else\n    ans =\
    \ \"\"\n  end\n  return ans .. string.format(\"%d\", x%base)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ r = x % base\n    if x == 0 then\n        return \"\"\n    else\n        return\
    \ change_base((x - r) / base, base) .. tostring(r)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4w3cti4.lua:22:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpm4w3cti4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local list\
    \ = {}\n  local x_ = x\n  repeat\n    local left = x_ % base\n    x_ = math.floor(x_\
    \ / base)\n    list[#list + 1] = left\n  until x_ == 0\n  local result = ''\n\
    \  for i = #list, 1, -1 do\n    result = result .. tostring(list[i])\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ rems = {}\n    local n = 1\n    while x > 0 do\n        rems[n] = x % base\n\
    \        x = math.floor(x / base)\n        n = n + 1\n    end\n    return table.concat(rems,\
    \ \"\", 1, n - 1):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ digits = {}\n    while true do\n        local r = x % base\n        x = math.floor(x\
    \ / base)\n        table.insert(digits, r)\n        if x == 0 then\n         \
    \   break\n        end\n    end\n    return table.concat(digits, '')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1l0aygd.lua:27:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpe1l0aygd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ dig, result = 0, ''\n    while x > 0 do\n        dig = x % base\n        x =\
    \ math.floor(x / base)\n        result = tostring(dig) .. result\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ conversion = \"\"\n    repeat\n        local remainder = x % base\n        conversion\
    \ = string.char(string.byte('0') + remainder) .. conversion\n        x = (x -\
    \ remainder) / base\n    until x == 0\n    return conversion\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local res\
    \ = {}\n  local k = 0\n  while x ~= 0 do\n    local digit = x % base\n    res[k]\
    \ = digit\n    x = (x - digit) / base\n    k = k + 1\n  end\n  local s = ''\n\
    \  for i = k - 1, 0, -1 do\n    s = s .. res[i]\n  end\n  return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tetnhrh.lua:29:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp7tetnhrh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = ''\n    repeat\n        local d = x % base\n        x = math.floor(x\
    \ / base)\n        result = string.format('%d%s', d, result)\n    until x == 0\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ s = ''\n    repeat\n        local r = x % base\n        x = (x - r) / base\n\
    \        s = s .. tostring(r)\n    until x == 0\n    return string.reverse(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswh96a5i.lua:23:\
    \ expected: \"22\"\nactual: \"0.22\"\nstack traceback:\n\t/tmp/tmpswh96a5i.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if x ==\
    \ 0 then\n        return '0'\n    end\n    local t = {}\n    while x > 0 do\n\
    \        local r = x % base\n        x = math.floor(x / base)\n        t[#t +\
    \ 1] = r\n    end\n    return table.concat(t)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhez45xt.lua:27:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpqhez45xt.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  assert(type(x)\
    \ == 'number', 'x must be number')\n  assert(type(base) == 'number', 'base must\
    \ be number')\n  local result = ''\n  while x > 0 do\n    result = result .. tostring(x\
    \ % base)\n    x = math.floor(x / base)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkwbl7ai.lua:25:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpnkwbl7ai.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ out = ''\n    local n = math.floor(x / base)\n    local r = x % base\n    local\
    \ s = math.floor(x / 10)\n    if n ~= 0 then\n        out = out .. change_base(n,\
    \ base)\n    end\n    return out .. (r + s)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdudv2ubo.lua:26:\
    \ expected: \"11101010\"\nactual: \"1111351223\"\nstack traceback:\n\t/tmp/tmpdudv2ubo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  assert(base\
    \ > 1 and base < 10)\n  local result = ''\n  while x > 0 do\n    local remainder\
    \ = x % base\n    result = tostring(remainder) .. result\n    x = math.floor(x\
    \ / base)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = \"\"\n    repeat\n        local d = x % base\n        x = (x - d) /\
    \ base\n        result = tostring(d) .. result\n    until x == 0\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3d5mpxl.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpg3d5mpxl.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local res\
    \ = \"\"\n  local t = {}\n  while x > 0 do\n    res = res .. tostring(x % base)\n\
    \    x = math.floor(x / base)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw5ga76a.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpmw5ga76a.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tif x < base\
    \ then\n\t\treturn tostring(x)\n\telse\n\t\treturn change_base(math.floor(x /\
    \ base), base) .. tostring(x % base)\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    x = tostring(x)\n\
    \    local digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    local s = ''\n\
    \    while x ~= 0 do\n        local mod = math.fmod(x, base)\n        s = digits:sub(mod\
    \ + 1, mod + 1) .. s\n        x = math.floor(x / base)\n    end\n    return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D',\
    \ 'E', 'F'}\n    local result = ''\n    while x > 0 do\n        result = digits[x\
    \ % base + 1] .. result\n        x = math.floor(x / base)\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ s = ''\n    while x > 0 do\n        s = string.format('%s%s', tostring(x % base),\
    \ s)\n        x = math.floor(x / base)\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ s = ''\n    while x ~= 0 do\n        local r = x % base\n        s = tostring(r)\
    \ .. s\n        x = (x - r) / base\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7vt584_.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp_7vt584_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ res = ''\n    while x ~= 0 do\n        res = res .. tostring(x % base)\n   \
    \     x = math.floor(x / base)\n    end\n    return string.reverse(res)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if x ==\
    \ 0 then\n        return '0'\n    end\n    local ret = ''\n    while x > 0 do\n\
    \        local r = x % base\n        ret = tostring(r) .. ret\n        x = (x\
    \ - r) / base\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbhpla21.lua:26:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmppbhpla21.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tif x ==\
    \ 0 then\n\t\treturn '0'\n\tend\n\tlocal acc = ''\n\twhile x > 0 do\n\t\tlocal\
    \ last = x % base\n\t\tacc = tostring(last) .. acc\n\t\tx = (x - last) / base\n\
    \tend\n\treturn acc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmisn5rcy.lua:26:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpmisn5rcy.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if x <\
    \ base then\n        return tostring(x)\n    else\n        return change_base(math.floor(x\
    \ / base), base) .. tostring(x % base)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if x ==\
    \ 0 then\n        return '0'\n    end\n    local r = ''\n    while x > 0 do\n\
    \        local d = x % base\n        r = ('%d%s'):format(d, r)\n        x = math.floor(x\
    \ / base)\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local str\
    \ = \"\"\n  while x ~= 0 do\n    local r = x % base\n    str = tostring(r) ..\
    \ str\n    x = math.floor(x / base)\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local t\
    \ = {}\n  repeat\n    local remainder = x % base\n    x = (x - remainder) / base\n\
    \    t[#t + 1] = tostring(remainder)\n  until x == 0\n  return table.concat(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm17i_jt5.lua:23:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpm17i_jt5.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal result\
    \ = ''\n\twhile x > 0 do\n\t\tresult = tostring(x % base) .. result\n\t\tx = math.floor(x\
    \ / base)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    if x ==\
    \ 0 then\n        return '0'\n    end\n    if base == 1 then\n        return string.rep('1',\
    \ x)\n    end\n    local s = ''\n    while x > 0 do\n        local mod = x % base\n\
    \        x = (x - mod) / base\n        s = tostring(mod) .. s\n    end\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvweccx9.lua:29:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpuvweccx9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = {}\n    if base == 1 then\n        return string.rep(\"1\", x)\n  \
    \  end\n    while x > 0 do\n        local rest = x % base\n        x = (x - rest)\
    \ / base\n        table.insert(result, 1, tostring(rest))\n    end\n    return\
    \ table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubmfcs59.lua:26:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpubmfcs59.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ result = ''\n    while x > 0 do\n        result = (x % base) .. result\n   \
    \     x = math.floor(x / base)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local t,\
    \ r\n  t = {}\n  while x > 0 do\n    r = x % base\n    table.insert(t, r)\n  \
    \  x = math.floor(x / base)\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5z7n4vav.lua:25:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp5z7n4vav.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ ans = ''\n    repeat\n        local r = x % base\n        x = (x - r) / base\n\
    \        ans = tostring(r) .. ans\n    until x == 0\n    return ans\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpquuvfku8.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpquuvfku8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ str_repr = ''\n    while x > 0 do\n        local cur_digit = x % base\n    \
    \    str_repr = str_repr .. tostring(cur_digit)\n        x = math.floor(x / base)\n\
    \    end\n    str_repr = string.reverse(str_repr)\n    return str_repr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(x,\
    \ \"missing argument\")\n    assert(base, \"missing argument\")\n    assert(type(x)\
    \ == \"number\", \"argument error\")\n    assert(type(base) == \"number\", \"\
    argument error\")\n    assert(x > 0, \"number must be more than zero\")\n    assert(base\
    \ > 0, \"base must be more than zero\")\n    assert(base < 10, \"base must be\
    \ less than 10\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd4jqigfb.lua:36: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ str = \"\"\n    while x > 0 do\n        local digit = x % base\n        str\
    \ = str .. tostring(digit)\n        x = math.floor(x / base)\n    end\n    return\
    \ str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpah_6nykf.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpah_6nykf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(type(x)\
    \ == 'number' and type(base) == 'number')\n    assert(x >= 0 and base >= 2 and\
    \ base <= 10)\n    local z = {}\n    while x > 0 do\n        table.insert(z, 1,\
    \ x % base)\n        x = math.floor(x / base)\n    end\n    return table.concat(z)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local num\
    \ = x\n  local ret = ''\n  while num > 0 do\n    local mod = num % base\n    ret\
    \ = mod .. ret\n    num = (num - mod) / base\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeq39av2e.lua:24:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpeq39av2e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ num = x\n    local new_num = \"\"\n    local mod = 0\n    while num > 0 do\n\
    \        mod = num % base\n        num = math.floor(num / base)\n        new_num\
    \ = tostring(mod) .. new_num\n    end\n    return new_num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local result\
    \ = ''\n  repeat\n    local digit = x % base\n    result = string.char(48 + digit)\
    \ .. result\n    x = math.floor(x / base)\n  until x == 0\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local stack\
    \ = {}\n  local base_numbers = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n\
    \  repeat\n    table.insert(stack, base_numbers[x % base + 1])\n    x = math.floor(x\
    \ / base)\n  until x == 0\n  local result = ''\n  for i = #stack, 1, -1 do\n \
    \   result = result .. stack[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ r = \"\"\n    while x > 0 do\n        local m = x % base\n        r = tostring(m)\
    \ .. r\n        x = floor(x / base)\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_kk7pbac.lua:15:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp_kk7pbac.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp_kk7pbac.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal digits\
    \ = {}\n\tlocal n = 0\n\twhile x > 0 do\n\t\tn = n + 1\n\t\tdigits[n] = x % base\n\
    \t\tx = math.floor(x / base)\n\tend\n\tlocal s = ''\n\twhile n > 0 do\n\t\ts =\
    \ s .. tostring(digits[n])\n\t\tn = n - 1\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local s\
    \ = ''\n  while x > 0 do\n    local r = x % base\n    x = math.floor(x / base)\n\
    \    s = s .. string.char(r+48)\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaykmceqv.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpaykmceqv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(type(x)\
    \ == 'number', 'x is not a number.')\n    assert(x >= 0, 'x is negative.')\n \
    \   assert(type(base) == 'number', 'base is not a number.')\n    assert(base >=\
    \ 2, 'base is less than 2.')\n    assert(base < 10, 'base is greater than 10.')\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj_ien9tm.lua:34: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ str = \"\"\n    while x ~= 0 do\n        str = str .. x % base\n        x =\
    \ math.floor(x / base)\n    end\n    str = string.reverse(str)\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local s\
    \ = ''\n  while x > 0 do\n    local d = x % base\n    x = (x - d) / base\n   \
    \ s = d .. s\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ngxyofx.lua:23:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp_ngxyofx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ n = ''\n    while x ~= 0 do\n        n = n .. tostring(x % base)\n        x\
    \ = math.floor(x / base)\n    end\n    return string.reverse(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n  local n\
    \ = math.ceil(math.log(x)/math.log(base))\n  local acc = {}\n  for i = n, 1, -1\
    \ do\n    local p = math.pow(base, i - 1)\n    local d = math.floor(x / p)\n \
    \   x = x - d * p\n    acc[i] = tostring(d)\n  end\n  return table.concat(acc)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2s_t3287.lua:26:\
    \ expected: \"100\"\nactual: \"03\"\nstack traceback:\n\t/tmp/tmp2s_t3287.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    assert(type(x)\
    \ == 'number' and type(base) == 'number', 'change_base: input should be numbers.')\n\
    \    local s = ''\n    while x > 0 do\n        local d = x % base\n        s =\
    \ string.format('%s%d', d, s)\n        x = math.floor(x / base)\n    end\n   \
    \ return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8iuqjqc0.lua:15:\
    \ bad argument #3 to 'format' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp8iuqjqc0.lua:15: in local 'candidate'\n\t/tmp/tmp8iuqjqc0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n\tlocal s\
    \ = \"\"\n\twhile x ~= 0 do\n\t\tlocal d = x % base\n\t\ts = string.char(string.byte('0')\
    \ + d) .. s\n\t\tx = math.floor(x / base)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\n--\
    \ >>> change_base(8, 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>>\
    \ change_base(7, 2)\n-- '111'\nlocal function change_base(x, base)\n    local\
    \ a = {}\n    local s = {}\n    repeat\n        s[#s+1] = x % base\n        x\
    \ = math.floor(x / base)\n    until x <= 0\n    for i = #s, 1, -1 do\n       \
    \ a[#a+1] = s[i]\n    end\n    return table.concat(a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
