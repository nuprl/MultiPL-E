name: HumanEval_28_concatenate
language: lua
prompt: "-- Concatenate table of strings into a single string\n-- >>> concatenate({})\n\
  -- ''\n-- >>> concatenate({'a', 'b', 'c'})\n-- 'abc'\nlocal function concatenate(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = concatenate\n\
  \    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}), 'xyzwk')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local string = \"\"\n  for i = 1, #strings do\n    string = string\
    \ .. strings[i]\n  end\n  return string\nend", "    local result = ''\n    for\
    \ _, s in ipairs(strings) do\n        result = result .. s\n    end\n    return\
    \ result\nend", "    local result = ''\n    for i, v in ipairs(strings) do\n \
    \       result = result .. v\n    end\n    return result\nend", "  return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "    local str = ''\n    for i =\
    \ 1, #strings do\n        str = str .. strings[i]\n    end\n    return str\nend",
  "  local res = ''\n  for _, s in ipairs(strings) do\n    res = res .. s\n  end\n\
    \  return res\nend", "  local ret = ''\n  for _,s in ipairs(strings) do\n    ret\
    \ = ret .. s\n  end\n  return ret\nend", "  local s = {}\n  for i, value in ipairs(strings)\
    \ do\n    s[i] = tostring(value)\n  end\n  return table.concat(s)\nend", "  return\
    \ table.concat(strings)\nend", "    local result = ''\n    for _, s in ipairs(strings)\
    \ do\n        result = result .. s\n    end\n    return result\nend", "    return\
    \ table.concat(strings)\nend", "  return table.concat(strings)\nend", "  return\
    \ table.concat(strings)\nend", "  local result = ''\n  for _, string in ipairs(strings)\
    \ do\n    result = result .. string\n  end\n  return result\nend", "    local\
    \ result = ''\n    for i, string in ipairs(strings) do\n        result = result\
    \ .. string\n    end\n    return result\nend", "  return table.concat(strings)\n\
    end", "  local ret = ''\n  for _, s in ipairs(strings) do\n    ret = ret .. s\n\
    \  end\n  return ret\nend", "  local result = ''\n  for _, s in ipairs(strings)\
    \ do\n    result = result .. s\n  end\n  return result\nend", "  local result\
    \ = ''\n  for _, v in ipairs(strings) do\n    result = result .. v\n  end\n  return\
    \ result\nend", "  local result = ''\n  for _, string in ipairs(strings) do\n\
    \    result = result .. string\n  end\n  return result\nend", "    local builder\
    \ = Builder()\n    for i = 1, #strings do\n        builder:append(strings[i])\n\
    \    end\n    return builder:build()\nend", "    local result = \"\"\n    for\
    \ _, v in ipairs(strings) do\n        result = result .. v\n    end\n    return\
    \ result\nend", "    return table.concat(strings)\nend", "  local result = ''\n\
    \  for _, string in ipairs(strings) do\n    result = result .. string\n  end\n\
    \  return result\nend", "    local s = ''\n    for _,v in ipairs(strings) do\n\
    \        s = s .. v\n    end\n    return s\nend", "    return (table.concat(strings))\n\
    end", "    local result = \"\"\n    for _,str in ipairs(strings) do\n        result\
    \ = result .. str\n    end\n    return result\nend", "  return table.concat(strings)\n\
    end", "    local buffer = {}\n    for _, string in ipairs(strings) do\n      \
    \  table.insert(buffer, string)\n    end\n    return table.concat(buffer)\nend",
  "    local t = {}\n    for i, str in ipairs(strings) do\n        t[i] = str\n  \
    \  end\n    return table.concat(t)\nend", "    local result = ''\n    for _, value\
    \ in ipairs(strings) do\n        result = result .. value\n    end\n    return\
    \ result\nend", "    local result = ''\n    for _, s in ipairs(strings) do\n \
    \       result = result .. s\n    end\n    return result\nend", "    local result\
    \ = \"\"\n    for _, str in ipairs(strings) do\n        result = result .. str\n\
    \    end\n    return result\nend", "    local buffer = {}\n    for _, str in ipairs(strings)\
    \ do\n        table.insert(buffer, str)\n    end\n    return table.concat(buffer)\n\
    end", "    local result = \"\"\n    for i = 1, #strings do\n        result = result\
    \ .. strings[i]\n    end\n    return result\nend", "    local ret = ''\n    for\
    \ i = 1, #strings do\n        ret = ret .. strings[i]\n    end\n    return ret\n\
    end", "    return table.concat(strings)\nend", "  local result = ''\n  for i,\
    \ s in ipairs(strings) do\n    result = result .. s\n  end\n  return result\n\
    end", "    local result = ''\n    for _, s in ipairs(strings) do\n        result\
    \ = result .. s\n    end\n    return result\nend", "  local buffer = {}\n  for\
    \ _, s in ipairs(strings) do\n    table.insert(buffer, s)\n  end\n  return table.concat(buffer)\n\
    end", "    local str = ''\n    for i, s in ipairs(strings) do\n        str = str\
    \ .. s\n    end\n    return str\nend", "    local buffer = {}\n    for i = 1,\
    \ #strings do\n        buffer[i] = strings[i]\n    end\n    return table.concat(buffer)\n\
    end", "    local buffer = \"\"\n    for i = 1, #strings do\n        buffer = buffer\
    \ .. strings[i]\n    end\n    return buffer\nend", "    if not (strings and #strings\
    \ > 0) then\n        return ''\n    end\n    local result = {}\n    for i, s in\
    \ ipairs(strings) do\n        result[i] = s\n    end\n    return table.concat(result)\n\
    end", "  local i = 1\n  local last_index = #strings\n  while true do\n    if strings[i]\
    \ == nil then\n      break\n    end\n    if i == last_index then\n      break\n\
    \    end\n    strings[i] = strings[i] .. strings[i + 1]\n    table.remove(strings,\
    \ i + 1)\n  end\n  return strings[1]\nend", "  local s = ''\n  for _,v in ipairs(strings)\
    \ do\n    s = s .. v\n  end\n  return s\nend", "  local result = ''\n  for _,\
    \ v in ipairs(strings) do\n    result = result .. v\n  end\n  return result\n\
    end", "    return table.concat(strings)\nend", "  local result = ''\n  for _,\
    \ string in ipairs(strings) do\n    result = result .. string\n  end\n  return\
    \ result\nend", "  return table.concat(strings)\nend", "    if #strings == 0 then\n\
    \        return ''\n    else\n        return table.concat(strings)\n    end\n\
    end", "  local result = ''\n  for i = 1, #strings do\n    result = result .. strings[i]\n\
    \  end\n  return result\nend", "  local result = ''\n  for _, s in ipairs(strings)\
    \ do\n    result = result .. s\n  end\n  return result\nend", "    local res =\
    \ ''\n    for _, str in ipairs(strings) do\n        res = res .. str\n    end\n\
    \    return res\nend", "    if #strings == 0 then\n        return ''\n    else\n\
    \        return table.concat(strings)\n    end\nend", "    local result = ''\n\
    \    for i, item in ipairs(strings) do\n        result = result .. item\n    end\n\
    \    return result\nend", "    local concat_table = {}\n    for _, str in ipairs(strings)\
    \ do\n        concat_table[#concat_table + 1] = str\n    end\n    return table.concat(concat_table)\n\
    end", "    local result = ''\n    for _, string in ipairs(strings) do\n      \
    \  result = result .. string\n    end\n    return result\nend", "    local result\
    \ = ''\n    for _, str in ipairs(strings) do\n        result = result .. str\n\
    \    end\n    return result\nend", "    local result = \"\"\n    for _, str in\
    \ ipairs(strings) do\n        result = result .. str\n    end\n    return result\n\
    end", "    return table.concat(strings)\nend", "  local concatenated = ''\n  for\
    \ _, s in ipairs(strings) do\n    concatenated = concatenated .. s\n  end\n  return\
    \ concatenated\nend", "    return table.concat(strings)\nend", "  local result\
    \ = ''\n  for _, s in ipairs(strings) do\n    result = result .. s\n  end\n  return\
    \ result\nend", "  local str = \"\"\n  for _, v in ipairs(strings) do\n    str\
    \ = str .. v\n  end\n  return str\nend", "  return table.concat(strings)\nend",
  "    local string = ''\n    for _,s in ipairs(strings) do\n        string = string\
    \ .. s\n    end\n    return string\nend", "  return table.concat(strings)\nend",
  "  if #strings == 0 then\n    return ''\n  else\n    return table.concat(strings)\n\
    \  end\nend", "  return table.concat(strings)\nend", "    return table.concat(strings)\n\
    end", "  local result = ''\n  for _, string in ipairs(strings) do\n    result\
    \ = result .. string\n  end\n  return result\nend", "    local result = ''\n \
    \   for i = 1, #strings do\n        result = result .. strings[i]\n    end\n \
    \   return result\nend", "    local result = \"\"\n    for i, s in ipairs(strings)\
    \ do\n        result = result .. s\n    end\n    return result\nend", "    local\
    \ newString = \"\"\n    for _, str in ipairs(strings) do\n        newString =\
    \ newString .. str\n    end\n    return newString\nend", "    local result = ''\n\
    \    for _, s in ipairs(strings) do\n        result = result .. s\n    end\n \
    \   return result\nend", "    return table.concat(strings)\nend", "  local result\
    \ = ''\n  for _, string in ipairs(strings) do\n    result = result .. string\n\
    \  end\n  return result\nend", "    local result = ''\n    for _, string in ipairs(strings)\
    \ do\n        result = result .. string\n    end\n    return result\nend", " \
    \ local result = {}\n  for _, s in ipairs(strings) do\n    result[#result + 1]\
    \ = s\n  end\n  return table.concat(result)\nend", "    local result = ''\n  \
    \  for _, v in ipairs(strings) do\n        result = result .. v\n    end\n   \
    \ return result\nend", "    local text = ''\n    for _, s in ipairs(strings) do\n\
    \        text = text .. s\n    end\n    return text\nend", "    local s = ''\n\
    \    for i, v in ipairs(strings) do\n        s = s .. v\n    end\n    return s\n\
    end", "  return table.concat(strings)\nend", "    return table.concat(strings)\n\
    end", "    local result = ''\n    for _, str in ipairs(strings) do\n        result\
    \ = result .. str\n    end\n    return result\nend", "  return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "    return table.concat(strings)\n\
    end", "    return table.concat(strings)\nend", "  return table.concat(strings)\n\
    end", "    return table.concat(strings)\nend", "    local result = ''\n    for\
    \ _, s in ipairs(strings) do\n        result = result .. s\n    end\n    return\
    \ result\nend", "  return table.concat(strings)\nend", "  local result = ''\n\
    \  for _,s in ipairs(strings) do\n    result = result .. s\n  end\n  return result\n\
    end", "  return table.concat(strings)\nend", "  return (table.concat(strings))\n\
    end", "  local result = ''\n  for _, s in ipairs(strings) do\n    result = result\
    \ .. s\n  end\n  return result\nend", "  return table.concat(strings)\nend", " \
    \   if #strings == 0 then\n        return ''\n    else\n        return table.concat(strings)\n\
    \    end\nend", "    return table.concat(strings)\nend", "  local result = ''\n\
    \  for _, s in ipairs(strings) do\n    result = result .. s\n  end\n  return result\n\
    end", "  return table.concat(strings)\nend", "    return table.concat(strings)\n\
    end", "    local result = ''\n    for _, v in ipairs(strings) do\n        result\
    \ = result .. v\n    end\n    return result\nend", "    local out = \"\"\n   \
    \ for _, v in ipairs(strings) do\n        out = out .. v\n    end\n    return\
    \ out\nend", "  local concat = {}\n  for _, val in ipairs(strings) do\n    concat[#concat\
    \ + 1] = val\n  end\n  return table.concat(concat)\nend", "  if not strings then\
    \ return '' end\n  local output = ''\n  for _,string in ipairs(strings) do\n \
    \   output = output .. string\n  end\n  return output\nend", "    local result\
    \ = ''\n    for _, str in ipairs(strings) do\n        result = result .. str\n\
    \    end\n    return result\nend", "  local result = ''\n  for i = 1, #strings\
    \ do\n    result = result .. strings[i]\n  end\n  return result\nend", "    return\
    \ table.concat(strings)\nend", "  local buffer = {}\n  for i, v in ipairs(strings)\
    \ do\n    buffer[i] = tostring(v)\n  end\n  return table.concat(buffer)\nend",
  "    local result = ''\n    for i = 1, #strings do\n        result = result .. strings[i]\n\
    \    end\n    return result\nend", "  local result = ''\n  for _, s in ipairs(strings)\
    \ do\n    result = result .. s\n  end\n  return result\nend", "    return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "    local result = ''\n    for _,\
    \ s in ipairs(strings) do\n        result = result .. s\n    end\n    return result\n\
    end", "  return table.concat(strings)\nend", "  local result = ''\n  for _, s\
    \ in ipairs(strings) do\n    result = result .. s\n  end\n  return result\nend",
  "  return table.concat(strings)\nend", "    return table.concat(strings)\nend",
  "    return table.concat(strings)\nend", "    local result = ''\n    for _, s in\
    \ ipairs(strings) do\n        result = result .. s\n    end\n    return result\n\
    end", "  return table.concat(strings)\nend", "  local result = ''\n  for i = 1,\
    \ #strings do\n    result = result .. strings[i]\n  end\n  return result\nend",
  "  local result = ''\n  for i = 1, #strings do\n    result = result .. strings[i]\n\
    \  end\n  return result\nend", "  local result = ''\n  for _, str in ipairs(strings)\
    \ do\n    result = result .. str\n  end\n  return result\nend", "    return table.concat(strings)\n\
    end", "    local result = ''\n    for _, text in ipairs(strings) do\n        result\
    \ = result .. text\n    end\n    return result\nend", "  local string = ''\n \
    \ for _,s in ipairs(strings) do\n    string = string .. s\n  end\n  return string\n\
    end", "    local result = ''\n    for i, string in ipairs(strings) do\n      \
    \  result = result .. string\n    end\n    return result\nend", "  local result\
    \ = ''\n  for i = 1, #strings do\n    result = result .. strings[i]\n  end\n \
    \ return result\nend", "  return table.concat(strings)\nend", "  local result\
    \ = {}\n  for _, v in ipairs(strings) do\n    table.insert(result, v)\n  end\n\
    \  return table.concat(result)\nend", "  if #strings == 0 then\n    return ''\n\
    \  else\n    return table.concat(strings)\n  end\nend", "  return (table.concat(strings))\n\
    end", "    return table.concat(strings)\nend", "    local s = ''\n    for i =\
    \ 1, #strings do\n        s = s .. strings[i]\n    end\n    return s\nend", " \
    \ local result = ''\n  for i = 1, #strings do\n    result = result .. strings[i]\n\
    \  end\n  return result\nend", "    return table.concat(strings)\nend", "    local\
    \ result = \"\"\n    for _, string in ipairs(strings) do\n        result = result\
    \ .. string\n    end\n    return result\nend", "  return table.concat(strings)\n\
    end", "    local result = ''\n    for _, str in ipairs(strings) do\n        result\
    \ = result .. str\n    end\n    return result\nend", "  return table.concat(strings)\n\
    end", "    local result = ''\n    for _, s in ipairs(strings) do\n        result\
    \ = result .. s\n    end\n    return result\nend", "    local result = ''\n  \
    \  for _, string in ipairs(strings) do\n        result = result .. string\n  \
    \  end\n    return result\nend", "    return table.concat(strings)\nend", "  return\
    \ table.concat(strings)\nend", "  return table.concat(strings)\nend", "    return\
    \ table.concat(strings)\nend", "  return (table.concat(strings))\nend", "  local\
    \ buffer = {}\n  for _,s in ipairs(strings) do\n    table.insert(buffer, s)\n\
    \  end\n  return table.concat(buffer)\nend", "  local result = ''\n  for i, str\
    \ in ipairs(strings) do\n    result = result .. str\n  end\n  return result\n\
    end", "  local result = ''\n  for i, v in ipairs(strings) do\n    result = result\
    \ .. v\n  end\n  return result\nend", "    local result = ''\n    for _, str in\
    \ ipairs(strings) do\n        result = result .. str\n    end\n    return result\n\
    end", "  local result = ''\n  for _, s in ipairs(strings) do\n    result = result\
    \ .. s\n  end\n  return result\nend", "  local result = ''\n  for i, v in ipairs(strings)\
    \ do\n    result = result .. v\n  end\n  return result\nend", "  local result\
    \ = ''\n  for _, str in ipairs(strings) do\n    result = result .. str\n  end\n\
    \  return result\nend", "  local result = ''\n  for _, string in ipairs(strings)\
    \ do\n    result = result .. string\n  end\n  return result\nend", "  local result\
    \ = ''\n  for _,s in ipairs(strings) do\n    result = result .. s\n  end\n  return\
    \ result\nend", "    local string = ''\n    for _, s in ipairs(strings) do\n \
    \       string = string .. s\n    end\n    return string\nend", "    local result\
    \ = ''\n    for i, s in ipairs(strings) do\n        result = result .. s\n   \
    \ end\n    return result\nend", "  local string = \"\"\n  for i = 1, #strings\
    \ do\n    string = string .. strings[i]\n  end\n  return string\nend", "  local\
    \ result = ''\n  for _, s in ipairs(strings) do\n    result = result .. s\n  end\n\
    \  return result\nend", "    return table.concat(strings)\nend", "    local buffer\
    \ = {}\n    for _, str in ipairs(strings) do\n        table.insert(buffer, str)\n\
    \    end\n    return table.concat(buffer)\nend", "  return table.concat(strings)\n\
    end", "  local result = ''\n  for i = 1, #strings do\n    result = result .. strings[i]\n\
    \  end\n  return result\nend", "  local result = ''\n  for i, v in ipairs(strings)\
    \ do\n    result = result .. v\n  end\n  return result\nend", "    return table.concat(strings)\n\
    end", "  local result = ''\n  for _, s in ipairs(strings) do\n    result = result\
    \ .. s\n  end\n  return result\nend", "    local result = ''\n    for _, str in\
    \ ipairs(strings) do\n        result = result .. str\n    end\n    return result\n\
    end", "  if table.isempty(strings) then\n    return ''\n  end\n  return table.concat(strings)\n\
    end", "    local result = ''\n    for _, s in ipairs(strings) do\n        result\
    \ = result .. s\n    end\n    return result\nend", "  local result = ''\n  for\
    \ _, str in ipairs(strings) do\n    result = result .. str\n  end\n  return result\n\
    end", "    local result = ''\n    for _, str in ipairs(strings) do\n        result\
    \ = result .. str\n    end\n    return result\nend", "    if type(strings) ~=\
    \ 'table' then\n        return nil\n    end\n    return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "  local result = ''\n  for i = 1,\
    \ #strings do\n    result = result .. strings[i]\n  end\n  return result\nend",
  "  return table.concat(strings)\nend", "  local buffer = {}\n  for _, s in ipairs(strings)\
    \ do\n    table.insert(buffer, s)\n  end\n  return table.concat(buffer)\nend",
  "  local result = {}\n  for _, v in ipairs(strings) do\n    table.insert(result,\
    \ v)\n  end\n  return table.concat(result)\nend", "    local concatenated = ''\n\
    \    for _, s in ipairs(strings) do\n        concatenated = concatenated .. s\n\
    \    end\n    return concatenated\nend", "  return table.concat(strings)\nend",
  "  return strings:reduce(function(acc, str)\n    return acc .. str\n  end, '')\n\
    end", "    local stringBuilder = StringBuilder()\n    for _, s in ipairs(strings)\
    \ do\n        stringBuilder:append(s)\n    end\n    return stringBuilder:toString()\n\
    end", "    local result = \"\"\n    for _, str in ipairs(strings) do\n       \
    \ result = result .. str\n    end\n    return result\nend", "    local c = {}\n\
    \    for i = 1, #strings do\n        c[i] = strings[i]\n    end\n    return table.concat(c)\n\
    end", "  local buffer = {}\n  for _, s in ipairs(strings) do\n    table.insert(buffer,\
    \ s)\n  end\n  return table.concat(buffer)\nend", "  return join(table.concat(strings,\
    \ ' '))\nend", "  if #strings == 0 then\n    return ''\n  else\n    return table.concat(strings)\n\
    \  end\nend", "    local buffer = {}\n    for _, s in ipairs(strings) do\n   \
    \     table.insert(buffer, s)\n    end\n    return table.concat(buffer)\nend",
  "  local result = {}\n  for _, string in ipairs(strings) do\n    result[#result\
    \ + 1] = string\n  end\n  return table.concat(result)\nend", "  local result =\
    \ ''\n  for _, str in ipairs(strings) do\n    result = result .. str\n  end\n\
    \  return result\nend", "    return table.concat(strings)\nend", "    local buffer\
    \ = {}\n    for _, s in ipairs(strings) do\n        buffer[#buffer + 1] = s\n\
    \    end\n    return table.concat(buffer)\nend", "  return table.concat(strings)\n\
    end", "  local buffer = {}\n  for _, s in ipairs(strings) do\n    buffer[#buffer\
    \ + 1] = s\n  end\n  return table.concat(buffer)\nend", "  local result = ''\n\
    \  for _, s in ipairs(strings) do\n    result = result .. s\n  end\n  return result\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
