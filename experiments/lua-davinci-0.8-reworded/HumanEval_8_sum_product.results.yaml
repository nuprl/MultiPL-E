name: HumanEval_8_sum_product
language: lua
results:
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \    local sum = 0\n    local product = 1\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + number\n        product = product * number\n    end\n\
    \    return {sum, product}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n  \
    \  lu.assertEquals(candidate({1, 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100,\
    \ 0}), {100, 0})\n    lu.assertEquals(candidate({3, 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}),\
    \ {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    end\n```\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0g8vil3g.lua:9: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \  local sum = 0\n  local product = 1\n  for i, n in ipairs(numbers) do\n    sum\
    \ = sum + n\n    product = product * n\n  end\n  return {sum, product}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_product\n\
    \    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \    local result = {0, 1}\n    for _, number in ipairs(numbers) do\n        result[1]\
    \ = result[1] + number\n        result[2] = result[2] * number\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \tlocal sum = 0\n\tlocal product = 1\n\tfor _, v in ipairs(numbers) do\n\t\tsum\
    \ = sum + v\n\t\tproduct = product * v\n\tend\n\treturn {sum, product}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_product\n\
    \    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \    local sum = 0\n    local product = 1\n    for _, num in ipairs(numbers) do\n\
    \        sum = sum + num\n        product = product * num\n    end\n    return\
    \ {sum, product}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n  \
    \  lu.assertEquals(candidate({1, 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100,\
    \ 0}), {100, 0})\n    lu.assertEquals(candidate({3, 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}),\
    \ {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \    local sum = 0\n    local product = 1\n    for _, v in ipairs(numbers) do\n\
    \        sum = sum + v\n        product = product * v\n    end\n    return {sum,\
    \ product}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \  -- hint: you should use a fold or a loop\n  local product = 1\n  local sum\
    \ = 0\n  for _, number in ipairs(numbers) do\n    product = product * number\n\
    \    sum = sum + number\n  end\n  return {sum, product}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_product\n    lu.assertEquals(candidate({}),\
    \ {0, 1})\n    lu.assertEquals(candidate({1, 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100,\
    \ 0}), {100, 0})\n    lu.assertEquals(candidate({3, 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}),\
    \ {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \    local sum = 0\n    local product = 1\n    for _, n in ipairs(numbers) do\n\
    \        sum = sum + n\n        product = product * n\n    end\n    return {sum,\
    \ product}\nend\nassert(same({0, 1}, sum_product({})))\nassert(same({10, 24},\
    \ sum_product({1, 2, 3, 4})))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n  \
    \  lu.assertEquals(candidate({1, 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100,\
    \ 0}), {100, 0})\n    lu.assertEquals(candidate({3, 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}),\
    \ {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppxe6hk2c.lua:16: attempt to call a nil value (global 'same')\n\
    stack traceback:\n\t/tmp/tmppxe6hk2c.lua:16: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \    local sum = 0\n    local product = 1\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + number\n        product = product * number\n    end\n\
    \    return {sum, product}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n  \
    \  lu.assertEquals(candidate({1, 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100,\
    \ 0}), {100, 0})\n    lu.assertEquals(candidate({3, 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}),\
    \ {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \tlocal sum = 0\n\tlocal product = 1\n\tfor i = 1, #numbers do\n\t\tsum = sum\
    \ + numbers[i]\n\t\tproduct = product * numbers[i]\n\tend\n\treturn {sum, product}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_product\n\
    \    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \    local sum = 0\n    local product = 1\n    for i = 1, #numbers do\n      \
    \  sum = sum + numbers[i]\n        product = product * numbers[i]\n    end\n \
    \   return {sum, product}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n  \
    \  lu.assertEquals(candidate({1, 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100,\
    \ 0}), {100, 0})\n    lu.assertEquals(candidate({3, 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}),\
    \ {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \tif not is_a_list(numbers) then\n\t\terror('Invalid input: ' .. tostring(numbers))\n\
    \tend\n\tlocal sum = 0\n\tlocal product = 1\n\tfor i = 1, #numbers do\n\t\tlocal\
    \ n = numbers[i]\n\t\tif not is_a_number(n) then\n\t\t\terror('Invalid input:\
    \ ' .. tostring(numbers))\n\t\tend\n\t\tsum = sum + n\n\t\tproduct = product *\
    \ n\n\tend\n\treturn {sum, product}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_product\n    lu.assertEquals(candidate({}),\
    \ {0, 1})\n    lu.assertEquals(candidate({1, 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100,\
    \ 0}), {100, 0})\n    lu.assertEquals(candidate({3, 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}),\
    \ {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr6zb_7hu.lua:8:\
    \ attempt to call a nil value (global 'is_a_list')\nstack traceback:\n\t/tmp/tmpr6zb_7hu.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpr6zb_7hu.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \    local sum = 0\n    local product = 1\n    for _,v in ipairs(numbers) do\n\
    \        sum = sum + v\n        product = product * v\n    end\n    return {sum,\
    \ product}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \  local sum = 0\n  local product = 1\n  for _, v in ipairs(numbers) do\n    sum\
    \ = sum + v\n    product = product * v\n  end\n  return {sum, product}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_product\n\
    \    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \  local sum = 0\n  local product = 1\n  for _, number in ipairs(numbers) do\n\
    \    sum = sum + number\n    product = product * number\n  end\n  return {sum,\
    \ product}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \  local sum = 0\n  local product = 1\n  for _, number in ipairs(numbers) do\n\
    \    sum = sum + number\n    product = product * number\n  end\n  return {sum,\
    \ product}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \    local sum = 0\n    local product = 1\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + number\n        product = product * number\n    end\n\
    \    return {sum, product}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n  \
    \  lu.assertEquals(candidate({1, 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100,\
    \ 0}), {100, 0})\n    lu.assertEquals(candidate({3, 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}),\
    \ {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \  local sum = 0\n  local product = 1\n  for _, number in ipairs(numbers) do\n\
    \    sum = sum + number\n    product = product * number\n  end\n  return {sum,\
    \ product}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_product\n    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of integers, return a table consisting of a sum and\
    \ a product of all the integers in a table.\n-- Empty sum should be equal to 0\
    \ and empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n\
    -- >>> sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n\
    \  local sum = 0\n  local product = 1\n  for k, v in pairs(numbers) do\n    sum\
    \ = sum + v\n    product = product * v\n  end\n  return {sum, product}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_product\n\
    \    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 1, 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
    \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
