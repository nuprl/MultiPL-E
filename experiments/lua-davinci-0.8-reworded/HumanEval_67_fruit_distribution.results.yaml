language: lua
name: HumanEval_67_fruit_distribution
results:
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  \n  local b = {}\n  local a = {}\n  local o = {}\n\
    \  local f = {}\n  local t = {}\n  local r = {}\n  for i in string.gmatch(s, \"\
    %S+\") do\n    if i == \"apples\" then\n      table.insert(b,i)\n    elseif i\
    \ == \"oranges\" then\n      table.insert(b,i)\n    elseif i == \"and\" then\n\
    \      table.insert(b,i)\n    else\n      table.insert(a,i)\n    end\n  end\n\
    \  for i in string.gmatch(s, \"%S+\") do\n    if i == \"oranges\" then\n     \
    \ table.insert(o,i)\n    end\n  end\n  for i in string.gmatch(s, \"%S+\") do\n\
    \    if i == \"and\" then\n      table.insert(f,i)\n    end\n  end\n  for i in\
    \ string.gmatch(s, \"%S+\") do\n    if i == \"apples\" then\n      table.insert(t,i)\n\
    \    end\n  end\n  local ma = table.getn(a) - 1\n  local mo = table.getn(o) -\
    \ 1\n  local mf = table.getn(f) - 1\n  local mt = table.getn(t) - 1\n  local m\
    \ = n - (a[ma] * t[mt]) - (a[ma] * f[mf]) - (a[ma] * o[mo])\n  return m\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpudo9aqeu.lua:49:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpudo9aqeu.lua:49:\
    \ in local 'candidate'\n\t/tmp/tmpudo9aqeu.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local ap, ora, tot = s:match('(%d+) apples and\
    \ (%d+) oranges')\n    return n - (tonumber(ap) + tonumber(ora))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local total_apples = tonumber(string.match(s, \"\
    (%d+) apples\"))\n  local total_oranges = tonumber(string.match(s, \"(%d+) oranges\"\
    ))\n  local total_mangoes = n - total_apples - total_oranges\n  return total_mangoes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local n_apples, n_oranges = tonumber(s:match(\"\
    ^(%d+) apples\")), tonumber(s:match(\"(%d+) oranges$\"))\n    if n_apples then\n\
    \        return n - n_apples - n_oranges\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local i, j, total, remainder = string.find(s,\
    \ '(%d+) ([%a%s]+) and (%d+) oranges')\n    total = tonumber(total) + tonumber(remainder)\n\
    \    return n - total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr5x0jysw.lua:17:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpr5x0jysw.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpr5x0jysw.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = s:match('(%d+) apples\
    \ and (%d+) oranges')\n    return n - (tonumber(apples) + tonumber(oranges))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- body\n    -- apples = tonumber(string.match(s,\
    \ '%d+ apples'))\n    -- oranges = tonumber(string.match(s, '%d+ oranges'))\n\
    \    local apples, oranges = s:match('(%d+) apples and (%d+) oranges')\n    apples\
    \ = tonumber(apples)\n    oranges = tonumber(oranges)\n    local mango = (n -\
    \ (apples + oranges))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppmcg2dx5.lua:36: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local a, o = string.match(s, '(%d+) apples and\
    \ (%d+) oranges')\n    return n - (a + o)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local apples = string.match(s, '%d+')\n  local oranges\
    \ = string.match(s, '%d+ oranges')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfix0709g.lua:31: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9ksqcza.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpl9ksqcza.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n \n\t-- TODO: implement this function\n\t\tlocal x,y\
    \ = 0,0\n\t\tfor i in string.gmatch(s,\"%d+\") do \n\t\t\tif x==0 then x=i\n\t\
    \t\telse y=i end\n\t\tend\n\t\treturn n-(x+y)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- your code here\n  local total = 0;\n  local apples\
    \ = 0;\n  local oranges = 0;\n  --local t={}\n  local t = string.gmatch(s, \"\
    %d+\")\n  for val in t do\n  \tif (total == 0) then\n  \t\tapples = tonumber(val)\n\
    \  \t\ttotal = total + 1\n  \telse\n  \t\toranges = tonumber(val)\n  \t\ttotal\
    \ = total + 1\n  \tend\n  end\n  return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- TODO: Implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yp6z1kp.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp1yp6z1kp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code here\n    return (n - tonumber(s:match(\"\
    %d+\")))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph87r36_m.lua:23:\
    \ expected: 8, actual: 14\nstack traceback:\n\t/tmp/tmph87r36_m.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\t-- type check\n\tif type(s) ~= 'string' or type(n)\
    \ ~= 'number' then\n\t\treturn nil\n\tend\n\t-- extract numbers from the input\n\
    \tlocal pattern = '(%d+) apples and (%d+) oranges'\n\tlocal app, org = s:match(pattern)\n\
    \tapp, org = tonumber(app), tonumber(org)\n\t-- compute the answer\n\tlocal sum\
    \ = app + org\n\tlocal remain = n - sum\n\treturn remain\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local a = 0\n    local o = 0\n    local sum =\
    \ 0\n    local m = 0\n    local k = 0\n    for i = 1, #s do\n        if s:sub(i,\
    \ i) == 'a' then\n            k = 1\n        elseif s:sub(i, i) == 'p' then\n\
    \            k = 2\n        elseif s:sub(i, i) == 'l' then\n            k = 3\n\
    \        elseif s:sub(i, i) == 'e' then\n            k = 4\n        elseif s:sub(i,\
    \ i) == 's' then\n            k = 5\n        elseif s:sub(i, i) == ' ' then\n\
    \            k = 6\n        elseif s:sub(i, i) == 'n' then\n            k = 7\n\
    \        elseif s:sub(i, i) == 'd' then\n            k = 8\n        elseif s:sub(i,\
    \ i) == 'o' then\n            k = 9\n        elseif s:sub(i, i) == 'r' then\n\
    \            k = 10\n        elseif s:sub(i, i) == 'g' then\n            k = 11\n\
    \        elseif s:sub(i, i) == '0' then\n            k = 12\n        elseif s:sub(i,\
    \ i) == '1' then\n            k = 13\n        elseif s:sub(i, i) == '2' then\n\
    \            k = 14\n        elseif s:sub(i, i) == '3' then\n            k = 15\n\
    \        elseif s:sub(i, i) == '4' then\n            k = 16\n        elseif s:sub(i,\
    \ i) == '5' then\n            k = 17\n        elseif s:sub(i, i) == '6' then\n\
    \            k = 18\n        elseif s:sub(i, i) == '7' then\n            k = 19\n\
    \        elseif s:sub(i, i) == '8' then\n            k = 20\n        elseif s:sub(i,\
    \ i) == '9' then\n            k = 21\n        end\n        if k == 12 then\n \
    \          \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4h8gzia6.lua:80: ''end'' expected (to close ''if'' at line
    65) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples = 0\n    local oranges = 0\n    local\
    \ rs = {}\n    for w in s:gmatch(\"%w+\") do\n        table.insert(rs, w)\n  \
    \  end\n    for _, v in ipairs(rs) do\n        if tonumber(v) then\n         \
    \   if rs[1] == \"apples\" then\n                apples = tonumber(v)\n      \
    \      elseif rs[1] == \"oranges\" then\n                oranges = tonumber(v)\n\
    \            end\n        end\n    end\n    return n - apples - oranges\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cnuu0wm.lua:37:\
    \ expected: 8, actual: 19\nstack traceback:\n\t/tmp/tmp1cnuu0wm.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code goes here\n    local _, _, apples,\
    \ oranges = s:find('(%d+) apples and (%d+) oranges')\n    return n - (tonumber(apples)\
    \ + tonumber(oranges))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal n_apples, n_oranges = s:match'(%d+) apples\
    \ and (%d+) oranges'\n\treturn n - n_apples - n_oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local a = s:match(\"(%d+) apples\")\n    local\
    \ o = s:match(\"(%d+) oranges\")\n    return n - (a + o)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local cnt_a, cnt_o, cnt_m\n  cnt_a, cnt_o = string.match(s,\
    \ '(%d+) apples and (%d+) oranges')\n  cnt_a, cnt_o = tonumber(cnt_a), tonumber(cnt_o)\n\
    \  cnt_m = n - cnt_a - cnt_o\n  return cnt_m\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local n1, n2 = s:match('(%d+) apples and (%d+) oranges')\n\
    \  return n - n1 - n2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\t-- your code here\n\tlocal words = s:split(' ')\n\
    \tlocal apple = tonumber(words[1])\n\tlocal orange = tonumber(words[4])\n\treturn\
    \ n - apple - orange\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwk4zio_.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmplwk4zio_.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmplwk4zio_.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code here\n    local x = tonumber(s:sub(1,s:find('\
    \ ')-1))\n    local y = tonumber(s:sub(s:find('and')+5,s:find(' ')-1))\n    return\
    \ n - (x+y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxgxxmlb1.lua:19:\
    \ attempt to perform arithmetic on a nil value (local 'y')\nstack traceback:\n\
    \t/tmp/tmpxgxxmlb1.lua:19: in local 'candidate'\n\t/tmp/tmpxgxxmlb1.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  return n - tonumber(s:match(\"%d+\"))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxi4sx3t.lua:22:\
    \ expected: 8, actual: 14\nstack traceback:\n\t/tmp/tmpaxi4sx3t.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n   --@TODO: Write your code here\n   return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2mp5zfe.lua:23:\
    \ expected: 8, actual: 0\nstack traceback:\n\t/tmp/tmpf2mp5zfe.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal a, o = s:match('(%d+) apples and (%d+) oranges')\n\
    \ta, o = tonumber(a), tonumber(o)\n\treturn n - a - o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdr1zvc7_.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpdr1zvc7_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    return n - s:match(\"%d+\") - s:match(\"%d+$\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9otyc4m.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpt9otyc4m.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpt9otyc4m.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- parse input string\n    local apples = tonumber(s:match(\"\
    (%d+) apples\"))\n    local oranges = tonumber(s:match(\"(%d+) oranges\"))\n \
    \   -- calculate the total number of fruits in the basket\n    local total = apples\
    \ + oranges\n    -- return the number of mango fruits\n    return n - total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local a, o = s:match('(%d+) apples and (%d+) oranges')\n\
    \    return n - (a + o)\nend\nprint(fruit_distribution('5 apples and 6 oranges',\
    \ 19))\nprint(fruit_distribution('0 apples and 1 oranges', 3))\nprint(fruit_distribution('2\
    \ apples and 3 oranges', 100))\nprint(fruit_distribution('100 apples and 1 oranges',\
    \ 120))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '8

    2

    95

    19

    .

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n   local apples, oranges = s:match('(%d+) apples and\
    \ (%d+) oranges')\n   return n - (tonumber(apples) + tonumber(oranges))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local _, _, a, o = s:find(\"(%d+)%s+apples%s+and%s+(%d+)%s+oranges\"\
    )\n    return n - (tonumber(a) + tonumber(o))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1trmdqi.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpv1trmdqi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- return the number of mango fruits in the basket.\n\
    \    local fruit1, fruit2 = s:match(\"(%d+) apples and (%d+) oranges\")\n    return\
    \ n - (fruit1 + fruit2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local r = 0\n    local t = {}\n    s:gsub(\"(%d+)%s(%w+)\"\
    , function(a, b)\n        t[b] = a\n    end)\n    r = n - (t['apples'] + t['oranges'])\n\
    \    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local function to_number(s)\n        local n =\
    \ 0\n        for w in s:gmatch('%d+') do\n            n = n + tonumber(w)\n  \
    \      end\n        return n\n    end\n    local total = to_number(s)\n    return\
    \ n - total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\ts = s:gsub(' and ', ' ')\n\ts = s:gsub(' apples',\
    \ '')\n\ts = s:gsub(' oranges', '')\n\tlocal total = 0\n\tfor num in s:gmatch('%d+')\
    \ do\n\t\ttotal = total + tonumber(num)\n\tend\n\treturn n - total\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local oranges = tonumber(s:match('%d+ oranges'))\n\
    \    local apples = tonumber(s:match('%d+ apples'))\n    return n - oranges -\
    \ apples\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwautl61h.lua:18:\
    \ attempt to perform arithmetic on a nil value (local 'oranges')\nstack traceback:\n\
    \t/tmp/tmpwautl61h.lua:18: in local 'candidate'\n\t/tmp/tmpwautl61h.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = s:match'(%d+) apples and\
    \ (%d+) oranges'\n    return n - (apples + oranges)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code goes here\n    \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbobrylg4.lua:23:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpbobrylg4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc66ba_ty.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpc66ba_ty.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\t-- your code here\n\tlocal count_of_apple = 0\n\t\
    local count_of_orange = 0\n\tlocal count_of_fruit = 0\n\t\n\tfor word in string.gmatch(s,\
    \ \"%d+\") do\n\t\tcount_of_fruit = count_of_fruit + tonumber(word)\n\tend\n\t\
    count_of_fruit = n - count_of_fruit\n\treturn count_of_fruit\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code here\n    local temp = ''\n    local\
    \ fruitNum = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if\
    \ c ~= ' ' then\n            temp = temp .. c\n        else\n            fruitNum\
    \ = fruitNum + tonumber(temp)\n            temp = ''\n        end\n    end\n \
    \   fruitNum = fruitNum + tonumber(temp)\n    return n - fruitNum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd9ivlw27.lua:24:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpd9ivlw27.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpd9ivlw27.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    print(s)\n    local _, __, a, o = s:find('(%d+)\
    \ apples and (%d+) oranges')\n    local a = tonumber(a)\n    local o = tonumber(o)\n\
    \    if a == nil or o == nil then\n        return nil\n    end\n    return n -\
    \ a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '5 apples and 6 oranges

    5 apples and 6 oranges

    0 apples and 1 oranges

    1 apples and 0 oranges

    2 apples and 3 oranges

    2 apples and 3 oranges

    1 apples and 100 oranges

    .

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local apple_count, orange_count = s:match('(%d+)\
    \ apples and (%d+) oranges')\n  local total_fruits = n\n  return total_fruits\
    \ - apple_count - orange_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local apples = tonumber(s:match(\"(%d+) apples\"\
    ))\n  local oranges = tonumber(s:match(\"(%d+) oranges\"))\n  return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  return n - (tonumber(s:match('%d+')) + tonumber(s:match('%d+$')))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp83kz5hhb.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp83kz5hhb.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp83kz5hhb.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local sub, total_fruit, apple, orange = s:find('\
    \ and '), n\n    if sub then\n        apple, orange = tonumber(s:sub(1, sub -\
    \ 1)), tonumber(s:sub(sub + 5))\n        total_fruit = total_fruit - apple - orange\n\
    \    end\n    return total_fruit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_u7_9ga.lua:19:\
    \ attempt to perform arithmetic on a nil value (local 'apple')\nstack traceback:\n\
    \t/tmp/tmps_u7_9ga.lua:19: in local 'candidate'\n\t/tmp/tmps_u7_9ga.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local s_split = s:split(\"%s+\")\n    local n_of_apples\
    \ = tonumber(s_split[1])\n    local n_of_oranges = tonumber(s_split[4])\n    return\
    \ n - n_of_apples - n_of_oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbz2w8hoh.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpbz2w8hoh.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpbz2w8hoh.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hdrf5t_.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp2hdrf5t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hjkatn_.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp4hjkatn_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hdrf5t_.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp2hdrf5t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples = tonumber(s:match('(%d+) apples'))\n\
    \    local oranges = tonumber(s:match('(%d+) oranges'))\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  return n - (tonumber(s:match('^(%d+) apples')) or\
    \ 0) - \n      (tonumber(s:match('^(%d+) oranges')) or 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv36w1v6.lua:23:\
    \ expected: 8, actual: 14\nstack traceback:\n\t/tmp/tmpqv36w1v6.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  if s == \"\" or s == nil then\n    return n\n  end\n\
    \  local str = split(s,\" \")\n  local sum = tonumber(str[1]) + tonumber(str[5])\n\
    \  local res = n - sum\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5mmwipk5.lua:19:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp5mmwipk5.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp5mmwipk5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local function find_index(s, pattern)\n      \
    \  for i = 1, #s do\n            if s:sub(i, i) == pattern then\n            \
    \    return i\n            end\n        end\n    end\n    local a = tonumber(s:sub(1,\
    \ find_index(s, ' ') - 1))\n    local b = tonumber(s:sub(find_index(s, ' ') +\
    \ 5, find_index(s, 'a') - 1))\n    local c = n - a - b\n    return c\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjz8ywnlk.lua:25:\
    \ attempt to perform arithmetic on a nil value (local 'b')\nstack traceback:\n\
    \t/tmp/tmpjz8ywnlk.lua:25: in local 'candidate'\n\t/tmp/tmpjz8ywnlk.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local rest = n\n    local num_apple, num_orange\
    \ = 0, 0\n    local start_apple, end_apple = string.find(s, '%d+ apples')\n  \
    \  local start_orange, end_orange = string.find(s, '%d+ oranges')\n    if start_apple\
    \ then\n        num_apple = tonumber(string.sub(s, start_apple, end_apple - 1))\n\
    \        rest = rest - num_apple\n    end\n    if start_orange then\n        num_orange\
    \ = tonumber(string.sub(s, start_orange, end_orange - 1))\n        rest = rest\
    \ - num_orange\n    end\n    return rest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5_y1kjo2.lua:22:\
    \ attempt to perform arithmetic on a nil value (local 'num_apple')\nstack traceback:\n\
    \t/tmp/tmp5_y1kjo2.lua:22: in local 'candidate'\n\t/tmp/tmp5_y1kjo2.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdr1zvc7_.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpdr1zvc7_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\t-- print('fuction call with s='..s..' n='..n)\n\t\
    local num_apples = 0\n\tlocal num_oranges = 0\n\tlocal i = 1\n\twhile i <= #s\
    \ do\n\t\tlocal char = s:sub(i,i)\n\t\tif is_digit(char) then\n\t\t\tlocal num\
    \ = 0\n\t\t\twhile is_digit(char) do\n\t\t\t\tnum = num * 10 + (char - '0')\n\t\
    \t\t\ti = i + 1\n\t\t\t\tchar = s:sub(i,i)\n\t\t\tend\n\t\t\tlocal word = s:sub(i,\
    \ i+5)\n\t\t\tif word == ' apples' then\n\t\t\t\tnum_apples = num\n\t\t\t\ti =\
    \ i + 6\n\t\t\telseif word == ' orange' then\n\t\t\t\tnum_oranges = num\n\t\t\t\
    \ti = i + 7\n\t\t\tend\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn n\
    \ - num_apples - num_oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0gqzm4ll.lua:22:\
    \ attempt to call a nil value (global 'is_digit')\nstack traceback:\n\t/tmp/tmp0gqzm4ll.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp0gqzm4ll.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local s_split = split(s, ' ')\n    local apples\
    \ = tonumber(s_split[1])\n    local oranges = tonumber(s_split[3])\n    return\
    \ n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6jf6uhpg.lua:16:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp6jf6uhpg.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp6jf6uhpg.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdr1zvc7_.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpdr1zvc7_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local function count_chars(str,ch)\n    return select(2,\
    \ str:gsub(ch, \"\"))\n  end\n  local apples, oranges = s:match(\"(%d+) apples\
    \ and (%d+) oranges\")\n  return tonumber(n) - (tonumber(apples) + tonumber(oranges))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- local oranges, apples = s:match('(%d+) apples\
    \ and (%d+) oranges')\n    -- local basket_size = tonumber(oranges) + tonumber(apples)\
    \ + n - tonumber(oranges) - tonumber(apples)\n    local apples, oranges = s:match('(%d+)\
    \ apples and (%d+) oranges')\n    local basket_size = apples + oranges + n - apples\
    \ - oranges\n    return basket_size\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprttpmuhe.lua:26:\
    \ expected: 8, actual: 19\nstack traceback:\n\t/tmp/tmprttpmuhe.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local count = 0\n    local fruit = nil\n    local\
    \ flag = true\n    local sum = 0\n    local i = 1\n    while i < #s do\n     \
    \   if flag then\n            if string.match(s:sub(i, i), \"[0-9]\") then\n \
    \               if fruit then\n                    sum = sum + tonumber(fruit)\n\
    \                end\n                fruit = \"\"\n                while string.match(s:sub(i,\
    \ i), \"[0-9]\") do\n                    fruit = fruit .. s:sub(i, i)\n      \
    \              i = i + 1\n                end\n                i = i + 1\n   \
    \         else\n                if s:sub(i, i) == \" \" then\n               \
    \     i = i + 1\n                else\n                    flag = false\n    \
    \            end\n            end\n        else\n            if s:sub(i, i) ==\
    \ \" \" then\n                flag = true\n                i = i + 1\n       \
    \     else\n                i = i + 1\n            end\n        end\n    end\n\
    \    return n - sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_r_qgte.lua:55:\
    \ expected: 8, actual: 14\nstack traceback:\n\t/tmp/tmpo_r_qgte.lua:55: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  return n - (tonumber(s:match(\"%d+ apples and %d+\
    \ oranges\")) or 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwtvlqrf.lua:22:\
    \ expected: 8, actual: 19\nstack traceback:\n\t/tmp/tmpqwtvlqrf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- Write your code here ...\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5q7uin3w.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp5q7uin3w.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n   -- your code here\n   local s = s:gsub('%s+', '')\n\
    \   local apples, oranges = s:match('(%d+)applesand(%d+)oranges')\n   local fruit\
    \ = n - (tonumber(apples) + tonumber(oranges))\n   return fruit\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- Write your code here\n    -- return 0\n   \
    \ if s == ' ' then return 0 end\n    local total = 0\n    local i = 1\n    local\
    \ apples = ''\n    local oranges = ''\n    local temp = s\n    for c in s:gmatch'.'\
    \ do\n        if c == ' ' then\n            if i == 1 then\n                apples\
    \ = temp:sub(1, i-1)\n                temp = temp:sub(i+1)\n                i\
    \ = 1\n            elseif i == 3 then\n                oranges = temp:sub(1, i-1)\n\
    \                temp = temp:sub(i+1)\n                i = 1\n            end\n\
    \        elseif i == 2 then\n            if temp:sub(1, i) == 'oranges' then\n\
    \                oranges = temp:sub(1, i-1)\n                temp = temp:sub(i+1)\n\
    \                i = 1\n            end\n        elseif i == 5 then\n        \
    \    if temp:sub(1, i) == 'apples' then\n                apples = temp:sub(1,\
    \ i-1)\n                temp = temp:sub(i+1)\n                i = 1\n        \
    \    end\n        end\n        i = i + 1\n    end\n    total = total + tonumber(apples)\n\
    \    total = total + tonumber(oranges)\n    total = n - total\n    return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsk6caznz.lua:50:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpsk6caznz.lua:50:\
    \ in local 'candidate'\n\t/tmp/tmpsk6caznz.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal a, b = string.match(s, '(%d+) apples and (%d+)\
    \ oranges')\n\treturn n - a - b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local total_apples = 0\n  local total_oranges =\
    \ 0\n  for w in s:gmatch(\"%S+\") do\n    if w:sub(-1) == \"s\" then\n      total_apples\
    \ = total_apples + tonumber(w:sub(1, #w - 1))\n    else\n      total_oranges =\
    \ total_oranges + tonumber(w:sub(1, #w - 1))\n    end\n  end\n  return n - total_apples\
    \ - total_oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnb2oxmcp.lua:22:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpnb2oxmcp.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpnb2oxmcp.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal pattern = \"(%d+) apples and (%d+) oranges\"\
    \n\tlocal apples, oranges = s:match(pattern)\n\t\n\tapples = tonumber(apples)\n\
    \toranges = tonumber(oranges)\n\t\n\tif apples + oranges == n then\n\t\treturn\
    \ 0\n\telse\n\t\treturn n - (apples + oranges)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hdrf5t_.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp2hdrf5t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local a, o = s:match('(%d+) apples and (%d+) oranges')\n\
    \    local result = n - tonumber(a) - tonumber(o)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc66ba_ty.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpc66ba_ty.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal total = 0\n\tlocal oranges = 0\n\tlocal apples\
    \ = 0\n\tlocal part = s:match('(%d+) apples')\n\tif part then\n\t\tapples = tonumber(part)\n\
    \tend\n\tpart = s:match('(%d+) oranges')\n\tif part then\n\t\toranges = tonumber(part)\n\
    \tend\n\ttotal = oranges + apples\n\treturn n - total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- Write your code here ...\n    local s_table\
    \ = string.split(s, ' ')\n    local sum = 0\n    for i, v in ipairs(s_table) do\n\
    \        if i%2 == 1 then\n            sum = sum + tonumber(v)\n        end\n\
    \    end\n    local result = n - sum\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8oww8j41.lua:17:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp8oww8j41.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp8oww8j41.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hdrf5t_.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp2hdrf5t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hdrf5t_.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp2hdrf5t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local subtotal = s:gsub('%s%d+%s%a+', '')\n  \
    \  subtotal = subtotal:gsub('%s', '')\n    local total = subtotal:match('%d+')\n\
    \    local totalnumber = 0\n    local counter = 1\n    while counter <= n do\n\
    \        local check = s:match('%d+%s%a+')\n        if check ~= nil then\n   \
    \         totalnumber = totalnumber + 1\n            s = s:gsub(check, '')\n \
    \       end\n        counter = counter + 1\n    end\n    return n - tonumber(total)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1599b_3.lua:35:\
    \ expected: 8, actual: 14\nstack traceback:\n\t/tmp/tmpa1599b_3.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local a, o = tonumber(s:match(\"(%d+) apples\"\
    )), tonumber(s:match(\"(%d+) oranges\"))\n    return n - a - o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples = tonumber(s:match('^(%d+)'))\n \
    \   local oranges = tonumber(s:match('%d+ apples and (%d+) oranges'))\n    return\
    \ n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal a, b = s:match('(%d+) apples and (%d+) oranges')\n\
    \treturn n - (a + b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local oranges = tonumber(s:match('%d+ oranges'))\n\
    \  local apples = tonumber(s:match('%d+ apples'))\n  return n - (oranges + apples)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp96p30km2.lua:18:\
    \ attempt to perform arithmetic on a nil value (local 'oranges')\nstack traceback:\n\
    \t/tmp/tmp96p30km2.lua:18: in local 'candidate'\n\t/tmp/tmp96p30km2.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    return n - tonumber(s:match('%d+')) - tonumber(s:match('%d+$'))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpro6c6my9.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpro6c6my9.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpro6c6my9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9ksqcza.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpl9ksqcza.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local r1, r2 = s:match(\"(%d+) apples and (%d+)\
    \ oranges\")\n    r1, r2 = tonumber(r1), tonumber(r2)\n    return n - r1 - r2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\t-- TODO: Implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_57r2yl.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpo_57r2yl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples = tonumber(string.match(s, '%d+ apples'))\n\
    \    local oranges = tonumber(string.match(s, '%d+ oranges'))\n    return n -\
    \ apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7aao7sx.lua:18:\
    \ attempt to perform arithmetic on a nil value (local 'apples')\nstack traceback:\n\
    \t/tmp/tmpq7aao7sx.lua:18: in local 'candidate'\n\t/tmp/tmpq7aao7sx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = s:match('(%d+)%sapples%sand%s(%d+)%soranges')\n\
    \    apples, oranges = tonumber(apples), tonumber(oranges)\n    return n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code here\n    local a, o = string.match(s,\
    \ '%s(%d+)%sapples%sand%s(%d+)%soranges')\n    return n - a - o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdxi16tb.lua:18:\
    \ attempt to perform arithmetic on a nil value (local 'a')\nstack traceback:\n\
    \t/tmp/tmpjdxi16tb.lua:18: in local 'candidate'\n\t/tmp/tmpjdxi16tb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tprint(\"s = \" .. s)\n\tprint(\"n = \" .. n)\n\t\
    --[[\n\ts = \"5 apples and 6 oranges\"\n\ts = \"0 apples and 1 oranges\"\n\ts\
    \ = \"2 apples and 3 oranges\"\n\ts = \"100 apples and 1 oranges\"\n\t]]--\n\t\
    -- Hint: string.find, string.gsub, tonumber, and string.format\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd68c0hul.lua:38: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal a, o = string.match(s, '(%d+) apples and (%d+)\
    \ oranges')\n\treturn n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- extract the number of apples and oranges\n\
    \    local apples, oranges = string.match(s, '^(%d+) apples and (%d+) oranges$')\n\
    \    -- get the total number of fruits\n    local total = tonumber(apples) + tonumber(oranges)\
    \ + n - tonumber(total)\n    -- return the number of mango fruits\n    return\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv7k1qy_.lua:19:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpmv7k1qy_.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmv7k1qy_.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  return n - s:gsub('[^ ]*', ''):gsub('[^ ]*', ''):gsub('\
    \ ', ''):len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6tdi_ab.lua:22:\
    \ expected: 8, actual: 19\nstack traceback:\n\t/tmp/tmpv6tdi_ab.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local _, a, o = s:find('(%d+) apples and (%d+)\
    \ oranges')\n    return n - tonumber(a) - tonumber(o)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8fyikbz.lua:23:\
    \ expected: 8, actual: -8\nstack traceback:\n\t/tmp/tmpj8fyikbz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc66ba_ty.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpc66ba_ty.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc66ba_ty.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpc66ba_ty.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local apples = tonumber(s:match(\"(%d+)%sapples\"\
    ))\n  local oranges = tonumber(s:match(\"(%d+)%soranges\"))\n  local mangoes =\
    \ n - apples - oranges\n  return mangoes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local a, o = s:match(\"(%d+)%s+apples%s+and%s+(%d+)%s+oranges\"\
    )\n    return (n - (tonumber(a) + tonumber(o)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local fruits = {}\n    local nums = {}\n    for\
    \ fruit, num in s:gmatch('(%a+)%s(%d+)') do\n        fruits[#fruits + 1] = fruit\n\
    \        nums[#nums + 1] = tonumber(num)\n    end\n    return n - nums[1] - nums[2]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpifk0rtrf.lua:22:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpifk0rtrf.lua:22: in local 'candidate'\n\t/tmp/tmpifk0rtrf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdr1zvc7_.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpdr1zvc7_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\t-- body\n\tlocal count_apples = tonumber(string.match(s,\
    \ '%d+ apples'))\n\tlocal count_oranges = tonumber(string.match(s, '%d+ oranges'))\n\
    \treturn n - count_apples - count_oranges\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnsq2e2fx.lua:19:\
    \ attempt to perform arithmetic on a nil value (local 'count_apples')\nstack traceback:\n\
    \t/tmp/tmpnsq2e2fx.lua:19: in local 'candidate'\n\t/tmp/tmpnsq2e2fx.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = s:match('(%d+) apples\
    \ and (%d+) oranges')\n    return n - (tonumber(apples) + tonumber(oranges))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hdrf5t_.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp2hdrf5t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local a, b = string.match(s, '(%d+) apples and\
    \ (%d+) oranges')\n    return n - tonumber(a) - tonumber(b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  s = split(s, ' ')\n  local apples, oranges = tonumber(s[1]),\
    \ tonumber(s[4])\n  return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8h1r3yk1.lua:16:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp8h1r3yk1.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp8h1r3yk1.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local pattern = \"(%d+)%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppirpq58i.lua:16: unfinished string near ''"(%d+)%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%''

    '
  stdout: ''
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal oranges, apples = s:match('(%d+) apples and\
    \ (%d+) oranges')\n\tlocal oranges, apples = tonumber(oranges), tonumber(apples)\n\
    \tlocal mangoes = n - (oranges + apples)\n\treturn mangoes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulwlqsms.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpulwlqsms.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local apples, oranges = tonumber(s:match '^%d+'),\
    \ tonumber(s:match '%d+$')\n  return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp39yi01ph.lua:17:\
    \ attempt to perform arithmetic on a nil value (local 'oranges')\nstack traceback:\n\
    \t/tmp/tmp39yi01ph.lua:17: in local 'candidate'\n\t/tmp/tmp39yi01ph.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = s:match(\"^(%d+) apples\
    \ and (%d+) oranges$\")\n    apples, oranges = tonumber(apples), tonumber(oranges)\n\
    \    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- check if it is a valid string and number \n\
    \    assert(type(s) == 'string' and type(n) == 'number')\n    -- Split the input\
    \ string and save the numbers in two variables\n    local apples, oranges = string.match(s,\
    \ '^(%d+) apples and (%d+) oranges$')\n    -- Return the number of mangoes\n \
    \   return n - (tonumber(apples) + tonumber(oranges))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hdrf5t_.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp2hdrf5t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hjkatn_.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp4hjkatn_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- s is a string like '1 apples and 2 oranges'\n\
    \    -- n is the total number of fruits in the basket\n    -- return the number\
    \ of mango fruits in the basket\n    -- use the following string methods to split\
    \ the string\n    -- string.match(s, pattern)\n    -- string.gmatch(s, pattern)\n\
    \    -- string.gsub(s, pattern, replacement)\n    -- string.find(s, pattern)\n\
    \    -- string.format(formatstring, ...)\n    -- string.char(c1, c2, ...)\n  \
    \  -- string.byte(s [, i [, j]])\n    -- string.dump(function)\n    -- string.len(s)\n\
    \    -- string.lower(s)\n    -- string.upper(s)\n    -- string.rep(s, n)\n   \
    \ -- string.reverse(s)\n    -- string.pack(fmt, v1, v2, ...)\n    -- string.packsize(fmt)\n\
    \    -- string.unpack(fmt, s [, pos])\n    -- string.packsize(fmt)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmq7jnvg.lua:42:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmppmq7jnvg.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local nums = s:gmatch('%d+')\n    local a, o =\
    \ nums(), nums()\n    return n - a - o\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local s_apple, s_orange, s_total = s:match('^(%d+)\
    \ apples and (%d+) oranges$')\n    local apple, orange, total = tonumber(s_apple),\
    \ tonumber(s_orange), tonumber(s_total)\n    return n - (apple + orange)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\t--function implementation\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmped4fyqf_.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmped4fyqf_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = string.match(s, '(%d+)\
    \ apples and (%d+) oranges')\n    return n - tonumber(apples) - tonumber(oranges)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- WRITE YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurexz7_m.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpurexz7_m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local _, _, a, o = s:find('(%d+) apples and (%d+)\
    \ oranges')\n    return n - tonumber(a) - tonumber(o)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = string.match(s, '(%d+)\
    \ apples and (%d+) oranges')\n    return n - (tonumber(apples) + tonumber(oranges))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\t-- TODO: Implement this function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_57r2yl.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpo_57r2yl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- TODO\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip37qsmn.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpip37qsmn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- Write your code here\n    return 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2d23ss53.lua:23:\
    \ expected: 8, actual: 0\nstack traceback:\n\t/tmp/tmp2d23ss53.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = string.match(s, '(%d+)\
    \ apples and (%d+) oranges')\n    return n - (tonumber(apples) + tonumber(oranges))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  --your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjgpnu81.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpgjgpnu81.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    return n - string.match(s, '%d+') + 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscv1vm3w.lua:22:\
    \ expected: 8, actual: 14\nstack traceback:\n\t/tmp/tmpscv1vm3w.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = 0, 0\n    for w in s:gmatch('%d+')\
    \ do\n        if s:find('apple') then apples = tonumber(w)\n        else oranges\
    \ = tonumber(w) end\n    end\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j4nrta9.lua:27:\
    \ expected: 8, actual: 13\nstack traceback:\n\t/tmp/tmp4j4nrta9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc66ba_ty.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpc66ba_ty.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local x = (s:gsub('%D', ''))\n    local y = (x:gsub('\
    \ ', ''))\n    local z = (y:gsub('and', ''))\n    local a = tonumber(z)\n    local\
    \ b = (n - a)\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9ob3gqk.lua:27:\
    \ expected: 8, actual: -37\nstack traceback:\n\t/tmp/tmpr9ob3gqk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- only one line needed\n    return n - tonumber(s:sub(1,\
    \ 1)) - tonumber(s:sub(15, 15))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvo3l7hgf.lua:17:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpvo3l7hgf.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpvo3l7hgf.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local apples, oranges = string.match(s, '(%d+) apples\
    \ and (%d+) oranges')\n  apples, oranges = tonumber(apples), tonumber(oranges)\n\
    \  return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ozoozss.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp0ozoozss.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n   local apples, oranges = s:match(\"(%d+) apples\
    \ and (%d+) oranges\")\n   return n - (tonumber(apples) + tonumber(oranges))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ozoozss.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp0ozoozss.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal a, o = 0, 0\n\ta = s:match('^(%d+) apples')\n\
    \to = s:match('^%d+ apples and (%d+) oranges')\n\ta = a or 0\n\to = o or 0\n\t\
    return n - (a + o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal apples = tonumber(s:match(\"(%d+) apples\"\
    ))\n\tlocal oranges = tonumber(s:match(\"(%d+) oranges\"))\n\treturn n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    --local s = '100 apples and 1 oranges'\n    --local\
    \ n = 10\n    local x = s:match(\"(%d+) apples\")\n    local y = s:match(\"(%d+)\
    \ oranges\")\n    --print(x, y)\n    if x and y then\n        return n - tonumber(x)\
    \ - tonumber(y)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    return n - tonumber(s:match('(%d+)%s+apples%s+and%s+(%d+)%s+oranges'))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20xavoat.lua:22:\
    \ expected: 8, actual: 14\nstack traceback:\n\t/tmp/tmp20xavoat.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local _, _, a, o = s:find('(%d+) apples and (%d+)\
    \ oranges')\n    return n - (a + o)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- all_fruit_number, orange_number\n    local\
    \ a, b = s:match('(%d+) apples and (%d+) oranges')\n    a, b = tonumber(a), tonumber(b)\n\
    \    return n - a - b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local a, o = string.match(s, '(%d+) apples and\
    \ (%d+) oranges')\n    return n - (a + o)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\treturn 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk38le0ni.lua:22:\
    \ expected: 8, actual: 0\nstack traceback:\n\t/tmp/tmpk38le0ni.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ee5n319.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp9ee5n319.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- Write your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmlmj_e5.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpxmlmj_e5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc66ba_ty.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpc66ba_ty.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hdrf5t_.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp2hdrf5t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- Write your code here\n  local total_apples =\
    \ tonumber(string.match(s, \"%d+ apples\"))\n  local total_oranges = tonumber(string.match(s,\
    \ \"%d+ oranges\"))\n  return (n - total_apples - total_oranges)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprvcs8i5b.lua:19:\
    \ attempt to perform arithmetic on a nil value (local 'total_apples')\nstack traceback:\n\
    \t/tmp/tmprvcs8i5b.lua:19: in local 'candidate'\n\t/tmp/tmprvcs8i5b.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdr1zvc7_.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpdr1zvc7_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local i=0\n    local j=0\n    local str = s\n\
    \    local arr = {}\n    for i in string.gmatch(str, \"%S+\") do\n        arr[#arr+1]\
    \ = i\n    end\n    local f = arr[1]\n    local h = arr[3]\n    local sum1 = tonumber(f)\
    \ + tonumber(h)\n    local sum2 = n - sum1\n    return sum2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo370pb8j.lua:25:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpo370pb8j.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpo370pb8j.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal a, o = string.match(s, \"(%d+) apples and\
    \ (%d+) oranges\")\n\ta, o = tonumber(a), tonumber(o)\n\treturn n - a - o\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local sum\n    local elem = {}\n    for i in string.gmatch(s,\
    \ '%d+') do\n        sum = sum + tonumber(i)\n        table.insert(elem, tonumber(i))\n\
    \    end\n    -- for i in string.gmatch(s, '%a+') do\n    --     print(i)\n  \
    \  -- end\n    local result = n - sum\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw353mevx.lua:19:\
    \ attempt to perform arithmetic on a nil value (local 'sum')\nstack traceback:\n\
    \t/tmp/tmpw353mevx.lua:19: in local 'candidate'\n\t/tmp/tmpw353mevx.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local str = s:gsub('[^%d]', ' ')\n  local fruits\
    \ = split(str)\n  local x = 0\n  local y = 0\n  for i=1, #fruits do\n    if (i\
    \ % 2) == 0 then\n      y = y + tonumber(fruits[i])\n    else\n      x = x + tonumber(fruits[i])\n\
    \    end\n  end\n  return n - (x + y)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqo36o4c_.lua:17:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpqo36o4c_.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpqo36o4c_.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    assert(type(s) == 'string')\n    assert(type(n)\
    \ == 'number')\n    local a = s:match('^(%d+)%s+apples')\n    local o = s:match('^%d+%s+apples%s+and%s+(%d+)%s+oranges')\n\
    \    return n - (a + o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ozoozss.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp0ozoozss.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hdrf5t_.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp2hdrf5t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal a, o = s:match('(%d+) apples and (%d+) oranges')\n\
    \ta, o = tonumber(a), tonumber(o)\n\treturn n - a - o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  \n  local tab = {' apples and ', ' oranges'}\n \
    \ s = s:gsub(tab[1], ',')\n  s = s:gsub(tab[2], '')\n  s = s:gsub(' ', '')\n \
    \ --print(s)\n  -- get the number of mangoes\n  local total_mangoes = tonumber(s:match('([^,]+)$'))\
    \ + tonumber(s:match('^([^,]+)'))\n  local mangoes = n - total_mangoes\n  print(mangoes)\n\
    \  return(mangoes)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '8

    10

    2

    2

    95

    0

    19

    .

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- write your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d0ireu3.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp5d0ireu3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n \n  local nums = s:match('(%d+) apples and (%d+)\
    \ oranges')\n \n  local num_of_apples = tonumber(nums:match('(%d+) apples'))\n\
    \  local num_of_oranges = tonumber(nums:match('(%d+) oranges'))\n \n  local num_of_mangoes\
    \ = n - (num_of_apples + num_of_oranges)\n \n  return num_of_mangoes\n \nend\n\
    \ \n \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp337alacv.lua:22:\
    \ attempt to perform arithmetic on a nil value (local 'num_of_apples')\nstack\
    \ traceback:\n\t/tmp/tmp337alacv.lua:22: in local 'candidate'\n\t/tmp/tmp337alacv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- extract the number of apples and oranges\n\
    \    local _, _, a, o = s:find('(%d+) apples and (%d+) oranges')\n    -- compute\
    \ the number of mangoes in the basket\n    return n - (tonumber(a) + tonumber(o))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal x, y = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n\treturn n - (x+y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal function count(s)\n\t\tlocal a, o = 0, 0\n\
    \t\tfor m in s:gmatch('%d+') do\n\t\t\tlocal n = tonumber(m)\n\t\t\tif s:find('apples')\
    \ then\n\t\t\t\ta = n\n\t\t\telse\n\t\t\t\to = n\n\t\t\tend\n\t\tend\n\t\treturn\
    \ a, o\n\tend\n\tlocal a, o = count(s)\n\tlocal p = a + o\n\tif p > n then\n\t\
    \tp = n\n\tend\n\treturn n - p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjexygyrh.lua:39:\
    \ expected: 8, actual: 13\nstack traceback:\n\t/tmp/tmpjexygyrh.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hdrf5t_.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp2hdrf5t_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = s:match'(%d+) apples and\
    \ (%d+) oranges'\n    return n - (apples + oranges)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local a,o = string.match(s, '(%d+) apples and\
    \ (%d+) oranges')\n    return n - tonumber(a) - tonumber(o)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = s:match(\"(%d+) apples\
    \ and (%d+) oranges\")\n    return n - tonumber(apples) - tonumber(oranges)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal fruits_str = string.gsub(s, \" and \", \"\
    \ \")\n\tlocal nums = string.split(fruits_str, \" \")\n\tlocal num_apples = tonumber(nums[1])\n\
    \tlocal num_oranges = tonumber(nums[3])\n\tlocal mango_fruits = n - (num_apples\
    \ + num_oranges)\n\treturn mango_fruits\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1kcw50hs.lua:17:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp1kcw50hs.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp1kcw50hs.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local function get_num(s)\n        local num =\
    \ 0\n        for i = 1, #s do\n            local c = s:sub(i, i)\n           \
    \ if c >= '0' and c <= '9' then\n                num = num * 10 + tonumber(c)\n\
    \            end\n        end\n        return num\n    end\n    local a, o = s:find('apples')\n\
    \    local total = n - get_num(s:sub(1, a - 2)) - get_num(s:sub(o + 2))\n    return\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local _, _, apples, oranges = s:find(\"(%d+) apples\
    \ and (%d+) oranges\")\n  apples = tonumber(apples)\n  oranges = tonumber(oranges)\n\
    \  return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ozoozss.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp0ozoozss.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local pat = '(%d+) apples and (%d+) oranges'\n \
    \ local apples, oranges = s:match(pat)\n  return n - (tonumber(apples) + tonumber(oranges))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local apples = tonumber(s:match'^(%d+) apples')\n\
    \  local oranges = tonumber(s:match'and (%d+) oranges')\n  return n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    apples, oranges = string.match(s, \"(%d+) apples\
    \ and (%d+) oranges\")\n    if apples then\n        apples = tonumber(apples)\n\
    \        oranges = tonumber(oranges)\n        return n - apples - oranges\n  \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local apples, oranges = s:match('([0-9]+) apples\
    \ and ([0-9]+) oranges')\n    apples, oranges = tonumber(apples), tonumber(oranges)\n\
    \    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal p = s:find(\" a\")\n\tlocal a = tonumber(s:sub(1,\
    \ p-1))\n\tlocal p = s:find(\" o\")\n\tlocal o = tonumber(s:sub(p-2, p-1))\n\t\
    return n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqfji8fm.lua:32:\
    \ expected: 19, actual: 119\nstack traceback:\n\t/tmp/tmpxqfji8fm.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n   -- your code\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk_5iu2b.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpjk_5iu2b.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local count_apples = string.match(s, '%d+')\n\
    \    local count_oranges = string.match(s, '%d+$')\n    local count_mangoes =\
    \ n - count_apples - count_oranges\n    return count_mangoes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmdhjyajk.lua:18:\
    \ attempt to perform arithmetic on a nil value (local 'count_oranges')\nstack\
    \ traceback:\n\t/tmp/tmpmdhjyajk.lua:18: in local 'candidate'\n\t/tmp/tmpmdhjyajk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n   -- your code here\n   -- ...\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirm071tf.lua:23:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpirm071tf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  return s:match(\"^(%d+) apples and (%d+) oranges$\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl87hwsnh.lua:22:\
    \ expected: 8, actual: \"5\"\nstack traceback:\n\t/tmp/tmpl87hwsnh.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- This is a stub function.\n    -- Local variables\n\
    \    local apples_oranges,fruits_basket,apples,oranges,apples_oranges_int,fruits_basket_int\n\
    \    -- removing white spaces\n    s = s:gsub(\"%s+\", \"\")\n    -- split string\
    \ into 2 seperate strings\n    apples_oranges,fruits_basket = s:match(\"(.+)%sand(.+)\"\
    )\n    -- removing apples or oranges\n    apples_oranges = apples_oranges:gsub(\"\
    %w+\", \"\")\n    -- removing basket\n    fruits_basket = fruits_basket:gsub(\"\
    %w+\", \"\")\n    -- convert strings to integers\n    apples_oranges_int = tonumber(apples_oranges)\n\
    \    fruits_basket_int = tonumber(fruits_basket)\n    -- some simple calculations\n\
    \    apples = apples_oranges_int * 2\n    oranges = apples_oranges_int * 3\n \
    \   -- return the result\n    return fruits_basket_int - apples - oranges\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_74btcu.lua:24:\
    \ attempt to index a nil value (local 'apples_oranges')\nstack traceback:\n\t\
    /tmp/tmpd_74btcu.lua:24: in local 'candidate'\n\t/tmp/tmpd_74btcu.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- TODO: add your code here\n    local index_apples\
    \ = string.find(s, 'apples')\n    local index_oranges = string.find(s, 'oranges')\n\
    \    local apples = string.sub(s, 1, index_apples - 2)\n    local oranges = string.sub(s,\
    \ index_oranges - 1, index_oranges - 2)\n    local result = 0\n    result = n\
    \ - (tonumber(apples) + tonumber(oranges))\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7jtwuas.lua:22:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpv7jtwuas.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpv7jtwuas.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- body\n    local a, o = s:match('(%d+) apples\
    \ and (%d+) oranges')\n    return tonumber(n) - tonumber(a) - tonumber(o)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- get the numbers of apples and oranges\n   \
    \ local apples, oranges = (string.match(s, '(%d+) apples and (%d+) oranges'))\n\
    \    -- sum the apples and oranges\n    local sum = apples + oranges\n    -- the\
    \ number of mango fruits is n - sum\n    return n - sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwdw508t.lua:19:\
    \ attempt to add a 'string' with a 'nil'\nstack traceback:\n\t/tmp/tmppwdw508t.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmppwdw508t.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- place your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_r2jd35.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp9_r2jd35.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\t-- TODO: Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xb8snxo.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp5xb8snxo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local ss = {}\n    for s in s:gmatch(\"%d+\")\
    \ do\n        table.insert(ss, s)\n    end\n    return n - (tonumber(ss[1]) +\
    \ tonumber(ss[2]))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    local f = 0\n    local _, _, a, o = s:find('(%d+)\
    \ apples and (%d+) oranges')\n    f = n - (tonumber(a) + tonumber(o))\n    return\
    \ f\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    -- write your code here\n    local l, r = 0, 0\n\
    \    for i in s:gmatch('%d+') do\n        l = l + tonumber(i)\n    end\n    r\
    \ = n - l\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal index_of_orange = s:find(' oranges')\n\tlocal\
    \ index_of_apple = s:find(' apples')\n\tlocal number_of_apple = tonumber(s:sub(1,\
    \ index_of_apple - 1))\n\tlocal number_of_orange = tonumber(s:sub(index_of_apple\
    \ + 1, index_of_orange - 1))\n\tlocal total_number_of_apple_and_orange = number_of_apple\
    \ + number_of_orange\n\treturn n - total_number_of_apple_and_orange\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpemftu269.lua:20:\
    \ attempt to perform arithmetic on a nil value (local 'number_of_orange')\nstack\
    \ traceback:\n\t/tmp/tmpemftu269.lua:20: in local 'candidate'\n\t/tmp/tmpemftu269.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local apples = tonumber(s:match('(%d+) apples'))\n\
    \  local oranges = tonumber(s:match('(%d+) oranges'))\n  return n - apples - oranges\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  -- body\n  local  a, b = string.match(s, '(%d+)\
    \ apples and (%d+) oranges')\n  return n - (a + b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n    return n - tonumber(s:match(\"%d+\")) * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpciedqfi3.lua:22:\
    \ expected: 8, actual: 9\nstack traceback:\n\t/tmp/tmpciedqfi3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal a, o = s:match('(%d+) apples and (%d+) oranges')\n\
    \treturn n - (a + o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local num_apples = tonumber(s:match(\"(%d+) apples\"\
    ))\n  local num_oranges = tonumber(s:match(\"(%d+) oranges\"))\n  return n - num_apples\
    \ - num_oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc66ba_ty.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpc66ba_ty.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 1
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n  local count = string.gsub(s, 'apples', '')\n  count\
    \ = string.gsub(count, 'oranges', '')\n  count = string.gsub(count, 'and', '')\n\
    \  count = string.gsub(count, ' ', '')\n  local number = (2 * tonumber(count))\
    \ - n\n  return number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqcvpnws.lua:27:\
    \ expected: 8, actual: 93\nstack traceback:\n\t/tmp/tmpcqcvpnws.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978809
- exit_code: 0
  program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples\
    \ and 6 oranges', 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges',\
    \ 3)\n-- 2\n-- >>> fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n\
    -- >>> fruit_distribution('100 apples and 1 oranges', 120)\n-- 19\nlocal function\
    \ fruit_distribution(s, n)\n\tlocal apples = tonumber(s:match('%d+'))\n\tlocal\
    \ oranges = tonumber(s:match('%d+', #s:match('%d+') + 2))\n\treturn n - apples\
    \ - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978809
