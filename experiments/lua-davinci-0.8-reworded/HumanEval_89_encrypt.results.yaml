name: HumanEval_89_encrypt
language: lua
results:
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n    local encryptedString = ''\n    for index = 1,\
    \ string.len(s) do\n        local char = string.sub(s, index, index)\n       \
    \ local charIndex = string.find(alphabet, char)\n        if charIndex ~= nil then\n\
    \            local newCharIndex = charIndex + 2 * 2\n            local newChar\
    \ = alphabet[newCharIndex]\n            encryptedString = encryptedString .. newChar\n\
    \        else\n            encryptedString = encryptedString .. char\n       \
    \ end\n    end\n    return encryptedString\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84qk0rrk.lua:18:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp84qk0rrk.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp84qk0rrk.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n  local alphabet = {}\n  local encrypted = {}\n  local\
    \ i = 0\n  for ch = string.byte('a'), string.byte('z') do\n    alphabet[ch - string.byte('a')\
    \ + 1] = ch\n  end\n  for ch in string.gmatch(s, \".\") do\n    i = i + 1\n  \
    \  encrypted[i] = alphabet[((string.byte(ch) - string.byte('a') + 1 + 2) % 26)\
    \ + 1]\n  end\n  return string.char(unpack(encrypted))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzxknq7h7.lua:25:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzxknq7h7.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpzxknq7h7.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n  return s:gsub(\".\", function(c)\n    local b = c:byte()\n\
    \    if b >= 65 and b <= 122 then\n      b = b + 2 * 2\n      if b > 122 then\n\
    \        b = b - 26\n      end\n    end\n    return string.char(b)\n  end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n    local rot={}\n    for i=1, string.len(s) do\n \
    \       rot[i] = string.char(string.byte(s,i)+2*2)\n    end\n    local rs = \"\
    \"\n    for k,v in pairs(rot) do\n        rs = rs .. v\n    end\n    return rs\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_i010ls.lua:33:\
    \ expected: \"jeiajeaijeiak\"\nactual: \"jei{je{ijei{k\"\nstack traceback:\n\t\
    /tmp/tmpp_i010ls.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local s_out = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        local index_out = index - (2\
    \ * 2)\n        if index_out <= 0 then\n            index_out = index_out + #alphabet\n\
    \        end\n        s_out = s_out .. alphabet:sub(index_out, index_out)\n  \
    \  end\n    return s_out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpew5sw4qt.lua:32:\
    \ expected: \"lm\"\nactual: \"de\"\nstack traceback:\n\t/tmp/tmpew5sw4qt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \  local lowercase = string.lower(s)\n  local start = 1\n  local end_ = string.len(alphabet)\n\
    \  local new_str = \"\"\n  for i = 1, string.len(lowercase) do\n    for i2 = start,\
    \ end_ do\n      if string.sub(lowercase, i, i) == string.sub(alphabet, i2, i2)\
    \ then\n        if i2 == 25 then\n          new_str = new_str .. \"a\"\n     \
    \   elseif i2 == 26 then\n          new_str = new_str .. \"b\"\n        else\n\
    \          new_str = new_str .. string.sub(alphabet, i2 + 2, i2 + 2)\n       \
    \ end\n      end\n    end\n  end\n  return new_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyqwe9o9.lua:39:\
    \ expected: \"lm\"\nactual: \"jk\"\nstack traceback:\n\t/tmp/tmpcyqwe9o9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\t\
    local res = ''\n\tfor i = 1, #s do\n\t\tlocal ch = s:sub(i, i)\n\t\tlocal offset\
    \ = alphabet:find(ch)\n\t\tlocal place = (offset + 4) % 26\n\t\tres = res .. alphabet:sub(place,\
    \ place)\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n    local i = 1\n    return s:gsub('.', function(c)\n\
    \        local x = i * 2\n        i = i + 1\n        return string.char(c:byte()\
    \ + x)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemljfiis.lua:26:\
    \ expected: \"lm\"\nactual: \"jm\"\nstack traceback:\n\t/tmp/tmpemljfiis.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n    local length = #s\n    local encrypted_s = ''\n\
    \    local dictionary = {\n        a = 'c',\n        b = 'd',\n        c = 'e',\n\
    \        d = 'f',\n        e = 'g',\n        f = 'h',\n        g = 'i',\n    \
    \    h = 'j',\n        i = 'k',\n        j = 'l',\n        k = 'm',\n        l\
    \ = 'n',\n        m = 'o',\n        n = 'p',\n        o = 'q',\n        p = 'r',\n\
    \        q = 's',\n        r = 't',\n        s = 'u',\n        t = 'v',\n    \
    \    u = 'w',\n        v = 'x',\n        w = 'y',\n        x = 'z',\n        y\
    \ = 'a',\n        z = 'b'\n    }\n    for i = 1, length do\n        local char\
    \ = s:sub(i, i)\n        encrypted_s = encrypted_s .. dictionary[char]\n    end\n\
    \    return encrypted_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv2ul4yx.lua:55:\
    \ expected: \"lm\"\nactual: \"jk\"\nstack traceback:\n\t/tmp/tmpnv2ul4yx.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n    -- Implement me\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pdo88ez.lua:21:\
    \ expected: \"lm\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6pdo88ez.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n  -- Code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbq96xsv7.lua:21:\
    \ expected: \"lm\"\nactual: nil\nstack traceback:\n\t/tmp/tmpbq96xsv7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n    local alpha = 'abcdefghijklmnopqrstuvwxyz'\n  \
    \  local enc = ''\n    for i = 1, #s do\n        enc = enc .. alpha:sub(alpha:find(s:sub(i,i))\
    \ + 4, alpha:find(s:sub(i,i)) + 4)\n    end\n    return enc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajr8kkfd.lua:30:\
    \ expected: \"jeiajeaijeiak\"\nactual: \"jeijeijeik\"\nstack traceback:\n\t/tmp/tmpajr8kkfd.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n  -- TODO: Implement me!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphczez39r.lua:21:\
    \ expected: \"lm\"\nactual: nil\nstack traceback:\n\t/tmp/tmphczez39r.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \  local my_list = {}\n  for i = 1, string.len(s) do\n    local c = string.sub(s,\
    \ i, i)\n    local value = string.byte(c) - 96\n    value = value + 2 * 2\n  \
    \  if value > 26 then\n      value = value - 26\n    end\n    local w = string.sub(alphabet,\
    \ value, value)\n    table.insert(my_list, w)\n  end\n  return table.concat(my_list)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n\tlocal str = \"\"\n\tfor c in s:gmatch(\".\") do\n\
    \t\tlocal n = string.byte(c)\n\t\tif c == \"z\" then\n\t\t\tstr = str .. \"b\"\
    \n\t\telseif c == \"y\" then\n\t\t\tstr = str .. \"a\"\n\t\telse\n\t\t\tstr =\
    \ str .. string.char(n + 2)\n\t\tend\n\tend\n\treturn str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_3219v1.lua:32:\
    \ expected: \"lm\"\nactual: \"jk\"\nstack traceback:\n\t/tmp/tmpw_3219v1.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n\tlocal len = #s\n\tlocal s2 = \"\"\n\tfor i = 1, len\
    \ do\n\t\ts2 = s2 .. string.char(string.byte(s, i) + 2*2)\n\tend\n\treturn s2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvkuiny_.lua:30:\
    \ expected: \"jeiajeaijeiak\"\nactual: \"jei{je{ijei{k\"\nstack traceback:\n\t\
    /tmp/tmplvkuiny_.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  dict =\
    \ {}\n  for i = 1,#alphabet do\n    dict[alphabet:sub(i,i)] = alphabet:sub((i\
    \ + 4) % 26 + 1, (i + 4) % 26 + 1)\n  end\n  local s = s:lower()\n  local ans\
    \ = ''\n  for i = 1,#s do\n    ans = ans .. dict[s:sub(i,i)]\n  end\n  return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpincjzgag.lua:31:\
    \ expected: \"lm\"\nactual: \"mn\"\nstack traceback:\n\t/tmp/tmpincjzgag.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n    s = string.gsub(s, '[A-Za-z]', alphabet)\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6ujfjjv.lua:15:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpx6ujfjjv.lua:15: in local 'candidate'\n\t/tmp/tmpx6ujfjjv.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n\t--[[\n\t\tHINT:\n\t\tYou can access the characters\
    \ in the string using square brackets.\n\t\tSo you can use s[1] to get the first\
    \ character in the string. \n\t\tYou can use string.char(97) to get the character\
    \ a.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfkl9e3l7.lua:34: unfinished long comment (starting at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
    -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\n\
    local function encrypt(s)\n    local res = {}\n    local alpha = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        local o = alpha:find(c)\n\
    \        if o then\n            res[#res + 1] = alpha:sub((o + 2) % #alpha + 1,\
    \ (o + 2) % #alpha + 1)\n        else\n            res[#res + 1] = c\n       \
    \ end\n    end\n    return table.concat(res)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78mxa6kh.lua:32:\
    \ expected: \"lm\"\nactual: \"kl\"\nstack traceback:\n\t/tmp/tmp78mxa6kh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
