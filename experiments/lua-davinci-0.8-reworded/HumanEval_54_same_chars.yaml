name: HumanEval_54_same_chars
language: lua
prompt: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n-- true\n\
  -- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd', 'dddddddabc')\n\
  -- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n-- >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n-- false\nlocal function same_chars(s0, s1)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
  \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd',\
  \ 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n\
  \    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd',\
  \ 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'),\
  \ false)\n    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if #s0 ~= #s1 then\n        return false\n    end\n    local chars0\
    \ = {}\n    local chars1 = {}\n    for i = 1, #s0 do\n        chars0[s0:sub(i,\
    \ i)] = (chars0[s0:sub(i, i)] or 0) + 1\n        chars1[s1:sub(i, i)] = (chars1[s1:sub(i,\
    \ i)] or 0) + 1\n    end\n    for c in pairs(chars0) do\n        if chars0[c]\
    \ ~= chars1[c] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if #s0 == #s1 then\n        return s0:gsub('%a', '') == s1:gsub('%a',\
    \ '')\n    else\n        local c0, c1 = {}, {}\n        for c in s0:gmatch('%a')\
    \ do\n            c0[c] = c0[c] and c0[c] + 1 or 1\n        end\n        for c\
    \ in s1:gmatch('%a') do\n            c1[c] = c1[c] and c1[c] + 1 or 1\n      \
    \  end\n        for k, v in pairs(c0) do\n            if c1[k] ~= v then\n   \
    \             return false\n            end\n        end\n        for k, v in\
    \ pairs(c1) do\n            if c0[k] ~= v then\n                return false\n\
    \            end\n        end\n        return true\n    end\nend", "    local\
    \ sc0 = S.chars(s0)\n    local sc1 = S.chars(s1)\n    local ts0 = T.new(#sc0,\
    \ 0)\n    local ts1 = T.new(#sc1, 0)\n    for _, c in ipairs(sc0) do\n       \
    \ ts0[c] = (ts0[c] or 0) + 1\n    end\n    for _, c in ipairs(sc1) do\n      \
    \  ts1[c] = (ts1[c] or 0) + 1\n    end\n    for _, c in ipairs(sc0) do\n     \
    \   if ts0[c] ~= ts1[c] then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local t0 = {}\n    local t1 = {}\n    for i = 1,\
    \ #s0 do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n \
    \   end\n    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c]\
    \ = (t1[c] or 0) + 1\n    end\n    return table.compare(t0, t1)\nend", "    local\
    \ char_count = {}\n    local len_s0 = #s0\n    local len_s1 = #s1\n    if len_s0\
    \ ~= len_s1 then\n        return false\n    end\n    for i = 1, len_s0 do\n  \
    \      local char = s0:sub(i, i)\n        char_count[char] = (char_count[char]\
    \ or 0) + 1\n    end\n    for i = 1, len_s1 do\n        local char = s1:sub(i,\
    \ i)\n        char_count[char] = (char_count[char] or 0) - 1\n        if char_count[char]\
    \ < 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local c0 = count_chars(s0)\n    local c1 = count_chars(s1)\n    for\
    \ k, v in pairs(c0) do\n        if v ~= c1[k] then\n            return false\n\
    \        end\n    end\n    return true\nend", "    -- Convert the strings to tables\
    \ of character counts.\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    -- Check that the characters are present in the same\
    \ quantities.\n    for i = 1, #s0 do\n        local c = s0:sub(i, i)\n       \
    \ if t0[c] ~= t1[c] then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    -- YOUR CODE HERE\nend", "  local t0 = {}\n  local t1\
    \ = {}\n  for c in (s0..s1):gmatch(\".\") do\n    t0[c] = (t0[c] or 0) + 1\n \
    \   t1[c] = (t1[c] or 0) + 1\n  end\n  for c, n in pairs(t0) do\n    if n ~= t1[c]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  if #s0 ~=\
    \ #s1 then return false end\n  for i = 1, #s0 do\n    local c = s0:sub(i, i)\n\
    \    if s1:find(c, 1, true) == nil then return false end\n  end\n  return true\n\
    end", "  if s0 == s1 then return true end\n  if #s0 ~= #s1 then return false end\n\
    \  local vs0 = _M.vars(s0)\n  local vs1 = _M.vars(s1)\n  if #vs0 ~= #vs1 then\
    \ return false end\n  -- if not the same number of characters -> false\n  for\
    \ _,v in ipairs(vs0) do\n    if not _M.contains(vs1, v) then return false end\n\
    \  end\n  return true\nend", "    local t0 = to_letters(s0)\n    local t1 = to_letters(s1)\n\
    \    for _, ch in ipairs(t0) do\n        t1[ch] = (t1[ch] or 0) - 1\n    end\n\
    \    for _, n in pairs(t1) do\n        if n ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local chars0 = {}\n    local\
    \ chars1 = {}\n    for i=1, #s0 do\n        local c = s0:sub(i,i)\n        chars0[c]\
    \ = chars0[c] and chars0[c] + 1 or 1\n    end\n    for i=1, #s1 do\n        local\
    \ c = s1:sub(i,i)\n        chars1[c] = chars1[c] and chars1[c] + 1 or 1\n    end\n\
    \    for i=1, #s0 do\n        local c = s0:sub(i,i)\n        if chars0[c] ~= chars1[c]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local used = {}\n    for c in s0:gmatch('.') do\n        used[c] = true\n \
    \   end\n    for c in s1:gmatch('.') do\n        if not used[c] then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local t\
    \ = {}\n    local i = 1\n    while i <= #s0 do\n        local c = s0:sub(i, i)\n\
    \        t[c] = (t[c] or 0) + 1\n        i = i + 1\n    end\n    i = 1\n    while\
    \ i <= #s1 do\n        local c = s1:sub(i, i)\n        if t[c] == nil then\n \
    \           return false\n        end\n        t[c] = t[c] - 1\n        if t[c]\
    \ == 0 then\n            t[c] = nil\n        end\n        i = i + 1\n    end\n\
    \    return true\nend", "  local char_counts = {}\n  for char in string.gmatch(s0,\
    \ \".\") do\n    char_counts[char] = (char_counts[char] or 0) + 1\n  end\n  for\
    \ char in string.gmatch(s1, \".\") do\n    if char_counts[char] == nil then\n\
    \      return false\n    end\n    char_counts[char] = char_counts[char] - 1\n\
    \    if char_counts[char] == 0 then\n      char_counts[char] = nil\n    end\n\
    \  end\n  return char_counts[next(char_counts)] == nil\nend", "  local charcount\
    \ = 0\n  local s = s0\n  if #s0 > #s1 then\n    s = s1\n  end\n  for i = 1, #s\
    \ do\n    charcount = charcount + 1\n    s0 = s0:gsub(s:sub(i, i), \"\")\n   \
    \ s1 = s1:gsub(s:sub(i, i), \"\")\n  end\n  return #s0 + #s1 == 0\nend", "   \
    \ local char_count = 0\n    local mask = 0\n    for i = 1, #s0 do\n        local\
    \ c = string.byte(s0, i)\n        mask = bit.bor(mask, bit.lshift(1, c))\n   \
    \     char_count = char_count + 1\n    end\n    for i = 1, #s1 do\n        local\
    \ c = string.byte(s1, i)\n        mask = bit.bxor(mask, bit.lshift(1, c))\n  \
    \      char_count = char_count - 1\n    end\n    if mask ~= 0 or char_count ~=\
    \ 0 then\n        return false\n    end\n    return true\nend", "\tlocal t0 =\
    \ { }\n\tlocal t1 = { }\n\tfor i = 1, #s0 do\n\t\tlocal c = s0:sub(i, i)\n\t\t\
    t0[c] = (t0[c] or 0) + 1\n\tend\n\tfor i = 1, #s1 do\n\t\tlocal c = s1:sub(i,\
    \ i)\n\t\tt1[c] = (t1[c] or 0) + 1\n\tend\n\tfor k, v in pairs(t0) do\n\t\tif\
    \ v ~= t1[k] then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor k, v in pairs(t1)\
    \ do\n\t\tif v ~= t0[k] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "\tlocal charcounts = {}\n\tlocal i0, i1\n\tlocal c0, c1\n\tfor i0 = 1,\
    \ #s0 do\n\t\tc0 = s0:sub(i0, i0)\n\t\tcharcounts[c0] = (charcounts[c0] or 0)\
    \ + 1\n\tend\n\tfor i1 = 1, #s1 do\n\t\tc1 = s1:sub(i1, i1)\n\t\tcharcounts[c1]\
    \ = (charcounts[c1] or 0) - 1\n\tend\n\tfor _, c in pairs(charcounts) do\n\t\t\
    if c ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
