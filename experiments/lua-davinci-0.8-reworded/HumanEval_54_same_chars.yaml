name: HumanEval_54_same_chars
language: lua
prompt: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n-- true\n\
  -- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd', 'dddddddabc')\n\
  -- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n-- >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n-- false\nlocal function same_chars(s0, s1)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
  \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd',\
  \ 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n\
  \    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd',\
  \ 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'),\
  \ false)\n    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if #s0 ~= #s1 then\n        return false\n    end\n    local chars0\
    \ = {}\n    local chars1 = {}\n    for i = 1, #s0 do\n        chars0[s0:sub(i,\
    \ i)] = (chars0[s0:sub(i, i)] or 0) + 1\n        chars1[s1:sub(i, i)] = (chars1[s1:sub(i,\
    \ i)] or 0) + 1\n    end\n    for c in pairs(chars0) do\n        if chars0[c]\
    \ ~= chars1[c] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if #s0 == #s1 then\n        return s0:gsub('%a', '') == s1:gsub('%a',\
    \ '')\n    else\n        local c0, c1 = {}, {}\n        for c in s0:gmatch('%a')\
    \ do\n            c0[c] = c0[c] and c0[c] + 1 or 1\n        end\n        for c\
    \ in s1:gmatch('%a') do\n            c1[c] = c1[c] and c1[c] + 1 or 1\n      \
    \  end\n        for k, v in pairs(c0) do\n            if c1[k] ~= v then\n   \
    \             return false\n            end\n        end\n        for k, v in\
    \ pairs(c1) do\n            if c0[k] ~= v then\n                return false\n\
    \            end\n        end\n        return true\n    end\nend", "    local\
    \ sc0 = S.chars(s0)\n    local sc1 = S.chars(s1)\n    local ts0 = T.new(#sc0,\
    \ 0)\n    local ts1 = T.new(#sc1, 0)\n    for _, c in ipairs(sc0) do\n       \
    \ ts0[c] = (ts0[c] or 0) + 1\n    end\n    for _, c in ipairs(sc1) do\n      \
    \  ts1[c] = (ts1[c] or 0) + 1\n    end\n    for _, c in ipairs(sc0) do\n     \
    \   if ts0[c] ~= ts1[c] then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local t0 = {}\n    local t1 = {}\n    for i = 1,\
    \ #s0 do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n \
    \   end\n    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c]\
    \ = (t1[c] or 0) + 1\n    end\n    return table.compare(t0, t1)\nend", "    local\
    \ char_count = {}\n    local len_s0 = #s0\n    local len_s1 = #s1\n    if len_s0\
    \ ~= len_s1 then\n        return false\n    end\n    for i = 1, len_s0 do\n  \
    \      local char = s0:sub(i, i)\n        char_count[char] = (char_count[char]\
    \ or 0) + 1\n    end\n    for i = 1, len_s1 do\n        local char = s1:sub(i,\
    \ i)\n        char_count[char] = (char_count[char] or 0) - 1\n        if char_count[char]\
    \ < 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local c0 = count_chars(s0)\n    local c1 = count_chars(s1)\n    for\
    \ k, v in pairs(c0) do\n        if v ~= c1[k] then\n            return false\n\
    \        end\n    end\n    return true\nend", "    -- Convert the strings to tables\
    \ of character counts.\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    -- Check that the characters are present in the same\
    \ quantities.\n    for i = 1, #s0 do\n        local c = s0:sub(i, i)\n       \
    \ if t0[c] ~= t1[c] then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    -- YOUR CODE HERE\nend", "  local t0 = {}\n  local t1\
    \ = {}\n  for c in (s0..s1):gmatch(\".\") do\n    t0[c] = (t0[c] or 0) + 1\n \
    \   t1[c] = (t1[c] or 0) + 1\n  end\n  for c, n in pairs(t0) do\n    if n ~= t1[c]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  if #s0 ~=\
    \ #s1 then return false end\n  for i = 1, #s0 do\n    local c = s0:sub(i, i)\n\
    \    if s1:find(c, 1, true) == nil then return false end\n  end\n  return true\n\
    end", "  if s0 == s1 then return true end\n  if #s0 ~= #s1 then return false end\n\
    \  local vs0 = _M.vars(s0)\n  local vs1 = _M.vars(s1)\n  if #vs0 ~= #vs1 then\
    \ return false end\n  -- if not the same number of characters -> false\n  for\
    \ _,v in ipairs(vs0) do\n    if not _M.contains(vs1, v) then return false end\n\
    \  end\n  return true\nend", "    local t0 = to_letters(s0)\n    local t1 = to_letters(s1)\n\
    \    for _, ch in ipairs(t0) do\n        t1[ch] = (t1[ch] or 0) - 1\n    end\n\
    \    for _, n in pairs(t1) do\n        if n ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local chars0 = {}\n    local\
    \ chars1 = {}\n    for i=1, #s0 do\n        local c = s0:sub(i,i)\n        chars0[c]\
    \ = chars0[c] and chars0[c] + 1 or 1\n    end\n    for i=1, #s1 do\n        local\
    \ c = s1:sub(i,i)\n        chars1[c] = chars1[c] and chars1[c] + 1 or 1\n    end\n\
    \    for i=1, #s0 do\n        local c = s0:sub(i,i)\n        if chars0[c] ~= chars1[c]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local used = {}\n    for c in s0:gmatch('.') do\n        used[c] = true\n \
    \   end\n    for c in s1:gmatch('.') do\n        if not used[c] then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local t\
    \ = {}\n    local i = 1\n    while i <= #s0 do\n        local c = s0:sub(i, i)\n\
    \        t[c] = (t[c] or 0) + 1\n        i = i + 1\n    end\n    i = 1\n    while\
    \ i <= #s1 do\n        local c = s1:sub(i, i)\n        if t[c] == nil then\n \
    \           return false\n        end\n        t[c] = t[c] - 1\n        if t[c]\
    \ == 0 then\n            t[c] = nil\n        end\n        i = i + 1\n    end\n\
    \    return true\nend", "  local char_counts = {}\n  for char in string.gmatch(s0,\
    \ \".\") do\n    char_counts[char] = (char_counts[char] or 0) + 1\n  end\n  for\
    \ char in string.gmatch(s1, \".\") do\n    if char_counts[char] == nil then\n\
    \      return false\n    end\n    char_counts[char] = char_counts[char] - 1\n\
    \    if char_counts[char] == 0 then\n      char_counts[char] = nil\n    end\n\
    \  end\n  return char_counts[next(char_counts)] == nil\nend", "  local charcount\
    \ = 0\n  local s = s0\n  if #s0 > #s1 then\n    s = s1\n  end\n  for i = 1, #s\
    \ do\n    charcount = charcount + 1\n    s0 = s0:gsub(s:sub(i, i), \"\")\n   \
    \ s1 = s1:gsub(s:sub(i, i), \"\")\n  end\n  return #s0 + #s1 == 0\nend", "   \
    \ local char_count = 0\n    local mask = 0\n    for i = 1, #s0 do\n        local\
    \ c = string.byte(s0, i)\n        mask = bit.bor(mask, bit.lshift(1, c))\n   \
    \     char_count = char_count + 1\n    end\n    for i = 1, #s1 do\n        local\
    \ c = string.byte(s1, i)\n        mask = bit.bxor(mask, bit.lshift(1, c))\n  \
    \      char_count = char_count - 1\n    end\n    if mask ~= 0 or char_count ~=\
    \ 0 then\n        return false\n    end\n    return true\nend", "\tlocal t0 =\
    \ { }\n\tlocal t1 = { }\n\tfor i = 1, #s0 do\n\t\tlocal c = s0:sub(i, i)\n\t\t\
    t0[c] = (t0[c] or 0) + 1\n\tend\n\tfor i = 1, #s1 do\n\t\tlocal c = s1:sub(i,\
    \ i)\n\t\tt1[c] = (t1[c] or 0) + 1\n\tend\n\tfor k, v in pairs(t0) do\n\t\tif\
    \ v ~= t1[k] then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor k, v in pairs(t1)\
    \ do\n\t\tif v ~= t0[k] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "\tlocal charcounts = {}\n\tlocal i0, i1\n\tlocal c0, c1\n\tfor i0 = 1,\
    \ #s0 do\n\t\tc0 = s0:sub(i0, i0)\n\t\tcharcounts[c0] = (charcounts[c0] or 0)\
    \ + 1\n\tend\n\tfor i1 = 1, #s1 do\n\t\tc1 = s1:sub(i1, i1)\n\t\tcharcounts[c1]\
    \ = (charcounts[c1] or 0) - 1\n\tend\n\tfor _, c in pairs(charcounts) do\n\t\t\
    if c ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  for\
    \ c in utf8.chars(s0) do\n    if not string.find(s1, c, 1, true) then\n      return\
    \ false\n    end\n  end\n  for c in utf8.chars(s1) do\n    if not string.find(s0,\
    \ c, 1, true) then\n      return false\n    end\n  end\n  return true\nend", " \
    \ local d0, d1 = {}, {}\n  for c in string.gmatch(s0, '.') do\n    d0[c] = (d0[c]\
    \ or 0) + 1\n  end\n  for c in string.gmatch(s1, '.') do\n    d1[c] = (d1[c] or\
    \ 0) + 1\n  end\n  for c, _ in pairs(d0) do\n    if d1[c] == nil or d1[c] < d0[c]\
    \ then\n      return false\n    end\n  end\n  for c, _ in pairs(d1) do\n    if\
    \ d0[c] == nil or d0[c] < d1[c] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0 do\n \
    \       local c = s0:sub(i, i)\n        if not t0[c] then\n            t0[c] =\
    \ 1\n        else\n            t0[c] = t0[c] + 1\n        end\n    end\n    for\
    \ i = 1, #s1 do\n        local c = s1:sub(i, i)\n        if not t1[c] then\n \
    \           t1[c] = 1\n        else\n            t1[c] = t1[c] + 1\n        end\n\
    \    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n         \
    \   return false\n        end\n    end\n    for k, v in pairs(t1) do\n       \
    \ if t0[k] ~= v then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local t0 = char_freq(s0)\n    local t1 = char_freq(s1)\n  \
    \  local sum = 0\n    for c, n in pairs(t0) do\n        if t1[c] then\n      \
    \      sum = sum + min(n, t1[c])\n        end\n    end\n    return sum == len(s0)\n\
    end", "    local h = {}\n    for c in s0:gmatch(\".\") do\n        h[c] = (h[c]\
    \ or 0) + 1\n    end\n    for c in s1:gmatch(\".\") do\n        h[c] = (h[c] or\
    \ 0) - 1\n    end\n    for _,v in pairs(h) do\n        if v ~= 0 then\n      \
    \      return false\n        end\n    end\n    return true\nend", "  local h0,\
    \ h1 = {}, {}\n  for i = 1, #s0 do\n    h0[s0:sub(i, i)] = (h0[s0:sub(i, i)] or\
    \ 0) + 1\n  end\n  for i = 1, #s1 do\n    h1[s1:sub(i, i)] = (h1[s1:sub(i, i)]\
    \ or 0) + 1\n  end\n  for k, v in pairs(h0) do\n    if h1[k] == nil or h1[k] <\
    \ v then\n      return false\n    end\n  end\n  return true\nend", "\tlocal h0,\
    \ h1 = {}, {}\n\tfor c in s0:gmatch('.') do\n\t\th0[c] = (h0[c] or 0) + 1\n\t\
    end\n\tfor c in s1:gmatch('.') do\n\t\th1[c] = (h1[c] or 0) + 1\n\tend\n\tlocal\
    \ count0, count1 = 0, 0\n\tfor k, v in pairs(h0) do\n\t\tcount0 = count0 + 1\n\
    \t\tif h1[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor k, v in pairs(h1)\
    \ do\n\t\tcount1 = count1 + 1\n\tend\n\tif count0 ~= count1 then\n\t\treturn false\n\
    \tend\n\treturn true\nend", "    local t0 = table.copy(char_counts(s0))\n    local\
    \ t1 = char_counts(s1)\n    for ch, n in pairs(t1) do\n        t0[ch] = t0[ch]\
    \ - n\n        if t0[ch] < 0 then\n            return false\n        end\n   \
    \ end\n    for _, n in pairs(t0) do\n        if n ~= 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local chars0 = {}\n \
    \ local chars1 = {}\n  for i = 1, #s0 do\n    local c = s0:sub(i, i)\n    chars0[c]\
    \ = (chars0[c] or 0) + 1\n  end\n  for i = 1, #s1 do\n    local c = s1:sub(i,\
    \ i)\n    chars1[c] = (chars1[c] or 0) + 1\n  end\n  for c, count in pairs(chars0)\
    \ do\n    if chars1[c] ~= count then\n      return false\n    end\n  end\n  for\
    \ c, count in pairs(chars1) do\n    if chars0[c] ~= count then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local t0 = {}\n  local t1 = {}\n  for\
    \ char in s0:gmatch('.') do\n    t0[char] = t0[char] and t0[char] + 1 or 1\n \
    \ end\n  for char in s1:gmatch('.') do\n    t1[char] = t1[char] and t1[char] +\
    \ 1 or 1\n  end\n  for char, count in pairs(t0) do\n    if t1[char] ~= count then\n\
    \      return false\n    end\n  end\n  for char, count in pairs(t1) do\n    if\
    \ t0[char] ~= count then\n      return false\n    end\n  end\n  return true\n\
    end", "  local r0 = {}; local r1 = {}\n  for i = 1, #s0 do r0[s0:sub(i,i)] = 1\
    \ end\n  for i = 1, #s1 do r1[s1:sub(i,i)] = 1 end\n  for k,_ in pairs(r0) do\n\
    \    if r1[k] ~= 1 then return false end\n  end\n  for k,_ in pairs(r1) do\n \
    \   if r0[k] ~= 1 then return false end\n  end\n  return true\nend", "    if #s0\
    \ ~= #s1 then\n        return false\n    end\n    local last_i0 = #s0\n    for\
    \ i = 1, last_i0 do\n        local i0 = i - 1\n        local c0 = s0:sub(i, i)\n\
    \        local i1 = s1:find(c0, 1, true)\n        if not i1 then\n           \
    \ return false\n        end\n        s1 = s1:sub(1, i1 - 1) .. s1:sub(i1 + 1)\n\
    \    end\n    return true\nend", "\tlocal h = {}\n\tfor c in utf8.codes(s0) do\n\
    \t\th[c] = (h[c] or 0) + 1\n\tend\n\tfor c in utf8.codes(s1) do\n\t\th[c] = (h[c]\
    \ or 0) - 1\n\tend\n\tfor _, n in pairs(h) do\n\t\tif n ~= 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  local t0 = {}\n  local t1 = {}\n\
    \  for i = 1, string.len(s0) do\n    t0[string.sub(s0, i, i)] = true\n  end\n\
    \  for i = 1, string.len(s1) do\n    t1[string.sub(s1, i, i)] = true\n  end\n\
    \  for k, _ in pairs(t0) do\n    if not t1[k] then\n      return false\n    end\n\
    \  end\n  for k, _ in pairs(t1) do\n    if not t0[k] then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if #s0 ~= #s1 then\n        return\
    \ false\n    end\n    return count_chars(s0) == count_chars(s1)\nend", "    local\
    \ chars = {}\n    for i = 1, #s0 do\n        local char = s0:sub(i, i)\n     \
    \   chars[char] = (chars[char] or 0) + 1\n    end\n    for i = 1, #s1 do\n   \
    \     local char = s1:sub(i, i)\n        chars[char] = (chars[char] or 0) - 1\n\
    \    end\n    for _, c in pairs(chars) do\n        if c ~= 0 then\n          \
    \  return false\n        end\n    end\n    return true\nend", "    local res =\
    \ true\n    for i = 1, string.len(s0) do\n        if not string.find(s1, string.sub(s0,\
    \ i, i)) then\n            res = false\n            break\n        end\n    end\n\
    \    return res\nend", "  local t0 = {}\n  local t1 = {}\n  for i = 1, #s0 do\n\
    \    local c = s0:sub(i, i)\n    t0[c] = t0[c] and t0[c] + 1 or 1\n  end\n  for\
    \ i = 1, #s1 do\n    local c = s1:sub(i, i)\n    t1[c] = t1[c] and t1[c] + 1 or\
    \ 1\n  end\n  for k, v in pairs(t0) do\n    if not t1[k] or t1[k] ~= v then\n\
    \      return false\n    end\n  end\n  for k, v in pairs(t1) do\n    if not t0[k]\
    \ or t0[k] ~= v then\n      return false\n    end\n  end\n  return true\nend",
  "    local chars = {}\n    local chars_count = 0\n    for i = 1, #s0 do\n      \
    \  local c = s0:sub(i, i)\n        if not chars[c] then\n            chars[c]\
    \ = 0\n            chars_count = chars_count + 1\n        end\n        chars[c]\
    \ = chars[c] + 1\n    end\n    for i = 1, #s1 do\n        local c = s1:sub(i,\
    \ i)\n        if not chars[c] then\n            return false\n        end\n  \
    \      chars[c] = chars[c] - 1\n        if chars[c] == 0 then\n            chars_count\
    \ = chars_count - 1\n            if chars_count == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "    local\
    \ c0 = {}; local c1 = {}\n    for i = 1, #s0 do\n        local c = s0:sub(i, i)\n\
    \        c0[c] = (c0[c] or 0) + 1\n    end\n    for i = 1, #s1 do\n        local\
    \ c = s1:sub(i, i)\n        c1[c] = (c1[c] or 0) + 1\n    end\n    for c, v in\
    \ pairs(c0) do\n        if c1[c] ~= v then\n            return false\n       \
    \ end\n    end\n    for c, v in pairs(c1) do\n        if c0[c] ~= v then\n   \
    \         return false\n        end\n    end\n    return true\nend", "\treturn\
    \ #s0 == #s1 and (s0:gsub('.', '') == s1:gsub('.', ''))\nend", "    local t0 =\
    \ {}\n    local t1 = {}\n    for c in utf8.codes(s0) do\n        t0[c] = (t0[c]\
    \ or 0) + 1\n    end\n    for c in utf8.codes(s1) do\n        t1[c] = (t1[c] or\
    \ 0) + 1\n    end\n    if #t0 ~= #t1 then\n        return false\n    end\n   \
    \ for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend", "  -- This is a pretty naive implementation,\
    \ but it works and\n  -- is quite simple.\n  return (s0:gsub('%a', '') == s1:gsub('%a',\
    \ ''))\nend", "\tlocal d0, d1 = {}, {}\n\tfor i = 1, #s0 do\n\t\td0[s0:sub(i,\
    \ i)] = d0[s0:sub(i, i)] and d0[s0:sub(i, i)] + 1 or 1\n\tend\n\tfor i = 1, #s1\
    \ do\n\t\td1[s1:sub(i, i)] = d1[s1:sub(i, i)] and d1[s1:sub(i, i)] + 1 or 1\n\t\
    end\n\tfor k, v in pairs(d0) do\n\t\tif d1[k] ~= v then\n\t\t\treturn false\n\t\
    \tend\n\tend\n\tfor k, v in pairs(d1) do\n\t\tif d0[k] ~= v then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  local sum0, sum1 = 0, 0\n  for\
    \ i = 1, #s0 do\n    sum0 = sum0 + string.byte(s0, i)\n  end\n  for i = 1, #s1\
    \ do\n    sum1 = sum1 + string.byte(s1, i)\n  end\n  return sum0 == sum1\nend",
  "\tlocal l0, l1 = unicode.utf8.len(s0), unicode.utf8.len(s1)\n\tif l0 ~= l1 then\n\
    \t\treturn false\n\tend\n\t--\n\tlocal map = {}\n\tfor i = 1, l0 do\n\t\tlocal\
    \ c = unicode.utf8.at(s0, i)\n\t\tmap[c] = (map[c] or 0) + 1\n\tend\n\t--\n\t\
    for i = 1, l1 do\n\t\tlocal c = unicode.utf8.at(s1, i)\n\t\tmap[c] = (map[c] or\
    \ 0) - 1\n\t\tif map[c] < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t--\n\t\
    return true\nend", "    local map0 = char_map(s0)\n    local map1 = char_map(s1)\n\
    \    for k, v in pairs(map0) do\n        if v ~= map1[k] then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(map1) do\n        if v ~=\
    \ map0[k] then\n            return false\n        end\n    end\n    return true\n\
    end", "    local c0 = char_counter(s0)\n    local c1 = char_counter(s1)\n    for\
    \ k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return false\n\
    \        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k] ~= v then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tlocal\
    \ d0, d1 = {}, {}\n\tfor i = 1, #s0 do\n\t\tlocal c = s0:sub(i, i)\n\t\td0[c]\
    \ = (d0[c] or 0) + 1\n\tend\n\tfor i = 1, #s1 do\n\t\tlocal c = s1:sub(i, i)\n\
    \t\td1[c] = (d1[c] or 0) + 1\n\tend\n\tfor k, v in pairs(d0) do\n\t\tif v ~= d1[k]\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor k, v in pairs(d1) do\n\t\tif\
    \ v ~= d0[k] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", " \
    \ local c0 = {}\n  local c1 = {}\n  for i=1,#s0 do\n    c0[s0:sub(i,i)] = true\n\
    \  end\n  for i=1,#s1 do\n    c1[s1:sub(i,i)] = true\n  end\n  for k,v in pairs(c0)\
    \ do\n    if not c1[k] then\n      return false\n    end\n  end\n  for k,v in\
    \ pairs(c1) do\n    if not c0[k] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local chars = {}\n    for c in utf8.chars(s0) do\n        chars[c]\
    \ = (chars[c] or 0) + 1\n    end\n    for c in utf8.chars(s1) do\n        chars[c]\
    \ = (chars[c] or 0) - 1\n    end\n    for _, n in pairs(chars) do\n        if\
    \ n ~= 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "\tlocal t0 = {}\n\tlocal t1 = {}\n\tfor c in s0:gmatch('.') do\n\t\tt0[c]\
    \ = (t0[c] or 0) + 1\n\tend\n\tfor c in s1:gmatch('.') do\n\t\tt1[c] = (t1[c]\
    \ or 0) + 1\n\tend\n\tfor k, v in pairs(t0) do\n\t\tif t1[k] ~= v then\n\t\t\t\
    return false\n\t\tend\n\tend\n\tfor k, v in pairs(t1) do\n\t\tif t0[k] ~= v then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    local c0 = string.to_chars(s0)\n\
    \    local c1 = string.to_chars(s1)\n    return table.same_set(c0, c1)\nend",
  "    local count = {}\n    for c in s0:gmatch(\".\") do\n        count[c] = (count[c]\
    \ or 0) + 1\n    end\n    for c in s1:gmatch(\".\") do\n        count[c] = (count[c]\
    \ or 0) - 1\n    end\n    for _, c in pairs(count) do\n        if c ~= 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tlocal\
    \ count = {}\n\tfor i = 1, #s0 do\n\t\tcount[s0:sub(i, i)] = (count[s0:sub(i,\
    \ i)] or 0) + 1\n\tend\n\tfor i = 1, #s1 do\n\t\tcount[s1:sub(i, i)] = (count[s1:sub(i,\
    \ i)] or 0) - 1\n\tend\n\tfor _, v in pairs(count) do\n\t\tif v ~= 0 then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local lc = {}\n  local\
    \ i = 0\n  while i < s0:len() do\n    local c = s0:sub(i+1, i+1)\n    if lc[c]\
    \ then\n      lc[c] = lc[c] + 1\n    else\n      lc[c] = 1\n    end\n    i = i\
    \ + 1\n  end\n  i = 0\n  while i < s1:len() do\n    local c = s1:sub(i+1, i+1)\n\
    \    if lc[c] then\n      lc[c] = lc[c] - 1\n    else\n      return false\n  \
    \  end\n    i = i + 1\n  end\n  for _, v in pairs(lc) do\n    if v ~= 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local t0 = word_freq(s0)\n\
    \  local t1 = word_freq(s1)\n  for k, v in pairs(t0) do\n    if t1[k] ~= v then\n\
    \      return false\n    end\n  end\n  for k, v in pairs(t1) do\n    if t0[k]\
    \ ~= v then\n      return false\n    end\n  end\n  return true\nend", "    local\
    \ chars = {}\n    for i = 1, #s0 do\n        local c = s0:sub(i, i)\n        chars[c]\
    \ = chars[c] and chars[c] + 1 or 1\n    end\n    for i = 1, #s1 do\n        local\
    \ c = s1:sub(i, i)\n        chars[c] = chars[c] and chars[c] - 1 or 0\n    end\n\
    \    for _, n in pairs(chars) do\n        if n ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    -- Write your code here\n \
    \   return true\nend", "  return s0:len() == s1:len() and\n         s0:len() ==\
    \ (s0 .. s1):unique():len()\nend", "  local char_counts = {}\n  for c in s0:gmatch\
    \ '.' do\n    char_counts[c] = (char_counts[c] or 0) + 1\n  end\n  for c in s1:gmatch\
    \ '.' do\n    if not char_counts[c] then return false end\n    char_counts[c]\
    \ = char_counts[c] - 1\n  end\n  for c, count in pairs(char_counts) do\n    if\
    \ count ~= 0 then return false end\n  end\n  return true\nend", "    local chars0\
    \ = {}\n    local chars1 = {}\n    for i = 1, #s0 do\n        chars0[s0:sub(i,\
    \ i)] = true\n    end\n    for i = 1, #s1 do\n        chars1[s1:sub(i, i)] = true\n\
    \    end\n    for k, _ in pairs(chars0) do\n        if not chars1[k] then\n  \
    \          return false\n        end\n    end\n    for k, _ in pairs(chars1) do\n\
    \        if not chars0[k] then\n            return false\n        end\n    end\n\
    \    return true\nend", "    assert(type(s0) == 'string' and type(s1) == 'string')\n\
    \    local function same_chars_rec(s0, s1)\n        local n0, n1 = #s0, #s1\n\
    \        if n0 == 0 then\n            return n1 == 0\n        elseif n1 == 0 then\n\
    \            return false\n        else\n            local c0, c1 = s0:sub(1,\
    \ 1), s1:sub(1, 1)\n            if c0 == c1 then\n                return same_chars_rec(s0:sub(2),\
    \ s1:sub(2))\n            else\n                return same_chars_rec(s0:sub(2),\
    \ s1) or same_chars_rec(s0, s1:sub(2))\n            end\n        end\n    end\n\
    \    return same_chars_rec(s0, s1)\nend", "  local ok = true\n  for c in s0:gmatch'.'\
    \ do\n    if not s1:find(c, 1, true) then\n      ok = false\n      break\n   \
    \ end\n  end\n  return ok\nend", "  local cs0 = count_chars(s0)\n  local cs1 =\
    \ count_chars(s1)\n  local ks = {}\n  for k, _ in pairs(cs0) do\n    ks[#ks +\
    \ 1] = k\n  end\n  for k, _ in pairs(cs1) do\n    ks[#ks + 1] = k\n  end\n  for\
    \ _, k in ipairs(ks) do\n    if cs0[k] ~= cs1[k] then\n      return false\n  \
    \  end\n  end\n  return true\nend", "    if #s0 ~= #s1 then\n        return false\n\
    \    end\n    local count = {}\n    for i = 1, #s0 do\n        count[s0:sub(i,\
    \ i)] = (count[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n     \
    \   count[s1:sub(i, i)] = (count[s1:sub(i, i)] or 0) - 1\n    end\n    for _,\
    \ v in pairs(count) do\n        if v ~= 0 then\n            return false\n   \
    \     end\n    end\n    return true\nend", "    -- check if the two words have\
    \ the same character set\n    local chars0 = to_chars(s0)\n    local chars1 =\
    \ to_chars(s1)\n    for char in pairs(chars0) do\n        if chars1[char] == nil\
    \ then\n            return false\n        end\n    end\n    for char in pairs(chars1)\
    \ do\n        if chars0[char] == nil then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local m0 = {}\n    local m1 = {}\n    for\
    \ c in s0:gmatch('.') do\n        m0[c] = (m0[c] or 0) + 1\n    end\n    for c\
    \ in s1:gmatch('.') do\n        m1[c] = (m1[c] or 0) + 1\n    end\n    for k,\
    \ v in pairs(m0) do\n        if v ~= m1[k] then\n            return false\n  \
    \      end\n    end\n    for k, v in pairs(m1) do\n        if v ~= m0[k] then\n\
    \            return false\n        end\n    end\n    return true\nend", "    --\
    \ XXX: Implements a simple but inefficient algorithm. Could be optimized.\n  \
    \  local chars0 = {}\n    for i=1, #s0 do\n        local c = s0:sub(i,i)\n   \
    \     chars0[c] = (chars0[c] or 0) + 1\n    end\n    local chars1 = {}\n    for\
    \ i=1, #s1 do\n        local c = s1:sub(i,i)\n        chars1[c] = (chars1[c] or\
    \ 0) + 1\n    end\n    for k, v in pairs(chars0) do\n        if chars1[k] ~= v\
    \ then\n            return false\n        end\n    end\n    for k, v in pairs(chars1)\
    \ do\n        if chars0[k] ~= v then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local c0 = {}\n    local c1 = {}\n    local\
    \ n = s0:len()\n    local m = s1:len()\n    if n ~= m then\n        return false\n\
    \    end\n    for i = 1, n do\n        local c = s0:sub(i, i)\n        c0[c] =\
    \ (c0[c] or 0) + 1\n        c = s1:sub(i, i)\n        c1[c] = (c1[c] or 0) + 1\n\
    \    end\n    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n         \
    \   return false\n        end\n    end\n    return true\nend", "  local function\
    \ count(s)\n    local t = {}\n    for c in s:gmatch('.') do\n      t[c] = (t[c]\
    \ or 0) + 1\n    end\n    return t\n  end\n  local t0, t1 = count(s0), count(s1)\n\
    \  for k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local s0len = #s0\n  local s1len = #s1\n\
    \  if s0len ~= s1len then\n    return false\n  end\n  for i = 1, s0len do\n  \
    \  local c = s0:sub(i, i)\n    local idx = s1:find(c, 1, true)\n    if not idx\
    \ then\n      return false\n    end\n    s1 = s1:sub(1, idx - 1) .. s1:sub(idx\
    \ + 1)\n  end\n  return true\nend", "    assert(s0 and s1, \"both words must be\
    \ given\")\n    local charcount = {}\n    for i = 1, #s0 do\n        local c =\
    \ s0:sub(i, i)\n        charcount[c] = (charcount[c] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        local c = s1:sub(i, i)\n        charcount[c] = (charcount[c]\
    \ or 0) - 1\n    end\n    for _, count in pairs(charcount) do\n        if count\
    \ ~= 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local counts0 = count_chars(s0)\n    local counts1 = count_chars(s1)\n\
    \    local same = true\n    for k, v in pairs(counts0) do\n        if counts1[k]\
    \ ~= v then\n            same = false\n            break\n        end\n    end\n\
    \    for k, v in pairs(counts1) do\n        if counts0[k] ~= v then\n        \
    \    same = false\n            break\n        end\n    end\n    return same\n\
    end", "\tif s0 == s1 then return true end\n\tlocal l0, l1 = #s0, #s1\n\tif l0\
    \ ~= l1 then return false end\n\tlocal cnt0, cnt1 = {}, {}\n\tfor i = 1, l0 do\n\
    \t\tlocal c0, c1 = s0:sub(i, i), s1:sub(i, i)\n\t\tcnt0[c0] = (cnt0[c0] or 0)\
    \ + 1\n\t\tcnt1[c1] = (cnt1[c1] or 0) + 1\n\tend\n\tfor c, n in pairs(cnt0) do\n\
    \t\tif n ~= cnt1[c] then return false end\n\tend\n\treturn true\nend", "    local\
    \ l0, l1 = unicode.utf8.len(s0), unicode.utf8.len(s1)\n    if l0 ~= l1 then\n\
    \        return false\n    end\n    local m0, m1 = {}, {}\n    for i = 1, l0 do\n\
    \        local c0, c1 = unicode.utf8.sub(s0, i, i), unicode.utf8.sub(s1, i, i)\n\
    \        if not m0[c0] then\n            m0[c0] = 1\n        else\n          \
    \  m0[c0] = m0[c0] + 1\n        end\n        if not m1[c1] then\n            m1[c1]\
    \ = 1\n        else\n            m1[c1] = m1[c1] + 1\n        end\n    end\n \
    \   for k, v in pairs(m0) do\n        if not m1[k] or m1[k] ~= v then\n      \
    \      return false\n        end\n    end\n    return true\nend", "    local c0\
    \ = string.char_counts(s0)\n    local c1 = string.char_counts(s1)\n    for c,\
    \ n in pairs(c0) do\n        if c1[c] ~= n then\n            return false\n  \
    \      end\n    end\n    for c, n in pairs(c1) do\n        if c0[c] ~= n then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ map0 = {}\n    local map1 = {}\n    for i = 1, #s0 do\n        local c = s0:sub(i,\
    \ i)\n        map0[c] = (map0[c] or 0) + 1\n    end\n    for i = 1, #s1 do\n \
    \       local c = s1:sub(i, i)\n        map1[c] = (map1[c] or 0) + 1\n    end\n\
    \    for k, v in pairs(map0) do\n        if map1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(map1) do\n        if map0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end", "\tfor k, v in pairs(get_chars(s0)) do\n\t\tif get_chars(s1)[k] ~= v then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal len0 = #s0\n\
    \tlocal len1 = #s1\n\tif len0 ~= len1 then\n\t\treturn false\n\tend\n\tlocal n0\
    \ = {}\n\tlocal n1 = {}\n\tfor i = 1, len0 do\n\t\tlocal c0 = s0:sub(i, i)\n\t\
    \tlocal c1 = s1:sub(i, i)\n\t\tif n0[c0] then\n\t\t\tn0[c0] = n0[c0] + 1\n\t\t\
    else\n\t\t\tn0[c0] = 1\n\t\tend\n\t\tif n1[c1] then\n\t\t\tn1[c1] = n1[c1] + 1\n\
    \t\telse\n\t\t\tn1[c1] = 1\n\t\tend\n\tend\n\tfor k, v in pairs(n0) do\n\t\tif\
    \ n1[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", " \
    \   local c0 = {}\n    local c1 = {}\n    for i = 1, #s0 do\n        c0[s0:sub(i,\
    \ i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n        c1[s1:sub(i,\
    \ i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n    return c0 == c1\nend", "\tlocal\
    \ count_s0 = count_chars(s0)\n\tlocal count_s1 = count_chars(s1)\n\tfor char in\
    \ pairs(count_s0) do\n\t\tif count_s0[char] ~= count_s1[char] then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  local c0 = {}\n  local c1 = {}\n\
    \  for i = 1, #s0 do\n    c0[s0:sub(i, i)] = c0[s0:sub(i, i)] + 1\n  end\n  for\
    \ i = 1, #s1 do\n    c1[s1:sub(i, i)] = c1[s1:sub(i, i)] + 1\n  end\n  for i =\
    \ 1, #s0 do\n    if c0[s0:sub(i, i)] ~= c1[s0:sub(i, i)] then\n      return false\n\
    \    end\n  end\n  return true\nend", "\tlocal t = {}\n\tfor i = 1, #s0 do\n\t\
    \tt[string.byte(s0, i)] = true\n\tend\n\tfor i = 1, #s1 do\n\t\tif not t[string.byte(s1,\
    \ i)] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    local\
    \ h0 = to_histogram(s0)\n    local h1 = to_histogram(s1)\n    return same_histogram(h0,\
    \ h1)\nend", "    if #s0 ~= #s1 then\n        return false\n    end\n    for i\
    \ = 1, #s0 do\n        if count_char(s0, s0:sub(i, i)) ~= count_char(s1, s0:sub(i,\
    \ i)) then\n            return false\n        end\n    end\n    return true\n\
    end", "  local w0 = {}\n  local w1 = {}\n  for i = 1, #s0 do\n    w0[s0:sub(i,\
    \ i)] = true\n  end\n  for i = 1, #s1 do\n    w1[s1:sub(i, i)] = true\n  end\n\
    \  for k, v in pairs(w0) do\n    if not w1[k] then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(w1) do\n    if not w0[k] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local chars_0 = unique_chars(s0)\n  local\
    \ chars_1 = unique_chars(s1)\n  for char, count in pairs(chars_0) do\n    if chars_1[char]\
    \ ~= count then\n      return false\n    end\n  end\n  for char, count in pairs(chars_1)\
    \ do\n    if chars_0[char] ~= count then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local t0 = {}\n    local t1 = {}\n    for i = 1,#s0\
    \ do\n        t0[s0:sub(i,i)] = true\n    end\n    for i = 1,#s1 do\n        t1[s1:sub(i,i)]\
    \ = true\n    end\n    for k,v in pairs(t0) do\n        if not t1[k] then\n  \
    \          return false\n        end\n    end\n    for k,v in pairs(t1) do\n \
    \       if not t0[k] then\n            return false\n        end\n    end\n  \
    \  return true\nend", "  local n0, n1 = #s0, #s1\n  if n0 ~= n1 then return false\
    \ end\n  local c0, c1 = map_chars(s0), map_chars(s1)\n  for char in pairs(c0)\
    \ do\n    if c0[char] ~= c1[char] then return false end\n  end\n  return true\n\
    end", "  local char_count = {}\n  local function count_chars(s)\n    for c in\
    \ s:gmatch('.') do\n      if char_count[c] then\n        char_count[c] = char_count[c]\
    \ + 1\n      else\n        char_count[c] = 1\n      end\n    end\n  end\n  count_chars(s0)\n\
    \  count_chars(s1)\n  for k, v in pairs(char_count) do\n    if v % 2 ~= 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local t0 = {}\n \
    \ local t1 = {}\n  for i = 1,#s0 do\n    local c = s0:sub(i,i)\n    t0[c] = t0[c]\
    \ and t0[c] + 1 or 1\n  end\n  for i = 1,#s1 do\n    local c = s1:sub(i,i)\n \
    \   t1[c] = t1[c] and t1[c] + 1 or 1\n  end\n  for k,v in pairs(t0) do\n    if\
    \ t1[k] ~= v then\n      return false\n    end\n  end\n  for k,v in pairs(t1)\
    \ do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n  return true\n\
    end", "  local cnt0 = freq(s0)\n  local cnt1 = freq(s1)\n  for k, v in pairs(cnt0)\
    \ do\n    if v ~= cnt1[k] then\n      return false\n    end\n  end\n  for k, v\
    \ in pairs(cnt1) do\n    if v ~= cnt0[k] then\n      return false\n    end\n \
    \ end\n  return true\nend", "    local seen = {}\n    for c in each_char(s0) do\n\
    \        seen[c] = (seen[c] or 0) + 1\n    end\n    for c in each_char(s1) do\n\
    \        if not seen[c] then\n            return false\n        end\n        seen[c]\
    \ = seen[c] - 1\n    end\n    for _, n in pairs(seen) do\n        if n ~= 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ #s0 ~= #s1 then\n        return false\n    end\n    local c0 = to_char_counts(s0)\n\
    \    local c1 = to_char_counts(s1)\n    for c, n in pairs(c0) do\n        if c1[c]\
    \ ~= n then\n            return false\n        end\n    end\n    return true\n\
    end", "  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n    c0[s0:sub(i,\
    \ i)] = true\n  end\n  for i = 1, #s1 do\n    c1[s1:sub(i, i)] = true\n  end\n\
    \  for k, _ in pairs(c0) do\n    if not c1[k] then\n      return false\n    end\n\
    \  end\n  for k, _ in pairs(c1) do\n    if not c0[k] then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if #s0 == #s1 then\n        local n0\
    \ = make_word_count(s0)\n        local n1 = make_word_count(s1)\n        local\
    \ n = 0\n        for k in pairs(n0) do\n            if n0[k] == n1[k] then\n \
    \               n = n + 1\n            end\n        end\n        return n == #n0\n\
    \    else\n        return false\n    end\nend", "    local s0, s1 = string.lower(s0),\
    \ string.lower(s1)\n    local count = {}\n    for i = 1, #s0 do\n        local\
    \ c = s0:sub(i, i)\n        count[c] = (count[c] or 0) + 1\n    end\n    for i\
    \ = 1, #s1 do\n        local c = s1:sub(i, i)\n        count[c] = (count[c] or\
    \ 0) - 1\n    end\n    for _, c in pairs(count) do\n        if c ~= 0 then\n \
    \           return false\n        end\n    end\n    return true\nend", "  if s0\
    \ == s1 then return true end\n  if #s0 ~= #s1 then return false end\n  local chars0\
    \ = {}\n  local chars1 = {}\n  for i = 1, #s0 do\n    local char0 = s0:sub(i,\
    \ i)\n    local char1 = s1:sub(i, i)\n    if char0 ~= char1 then\n      chars0[char0]\
    \ = (chars0[char0] or 0) + 1\n      chars1[char1] = (chars1[char1] or 0) + 1\n\
    \    end\n  end\n  for k, v in pairs(chars0) do\n    if chars1[k] ~= v then return\
    \ false end\n  end\n  for k, v in pairs(chars1) do\n    if chars0[k] ~= v then\
    \ return false end\n  end\n  return true\nend", "    local function add(a, b)\
    \ return a + b end\n    local c0 = table.reduce(table.count(s0), add)\n    local\
    \ c1 = table.reduce(table.count(s1), add)\n    return c0 == c1\nend", "  if #s0\
    \ ~= #s1 then return false end\n  -- s0 and s1 have the same length.\n  local\
    \ count = {}\n  for i = 1, #s0 do\n    count[s0:sub(i, i)] = (count[s0:sub(i,\
    \ i)] or 0) + 1\n    count[s1:sub(i, i)] = (count[s1:sub(i, i)] or 0) - 1\n  end\n\
    \  for _, v in pairs(count) do\n    if v ~= 0 then return false end\n  end\n \
    \ return true\nend", "  local char_map = {}\n  for i = 1, #s0 do\n    char_map[s0:sub(i,\
    \ i)] = (char_map[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n    char_map[s1:sub(i,\
    \ i)] = (char_map[s1:sub(i, i)] or 0) - 1\n  end\n  for _, count in pairs(char_map)\
    \ do\n    if count ~= 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "    -- @TODO: implement same_chars.\n    local count0 = {}\n    local count1\
    \ = {}\n    local d0 = {}\n    local d1 = {}\n    for c in s0:gmatch('.') do\n\
    \        if not count0[c] then\n            count0[c] = 1\n        else\n    \
    \        count0[c] = count0[c] + 1\n        end\n    end\n    for c in s1:gmatch('.')\
    \ do\n        if not count1[c] then\n            count1[c] = 1\n        else\n\
    \            count1[c] = count1[c] + 1\n        end\n    end\n    for k,v in pairs(count0)\
    \ do\n        if count1[k] and v == count1[k] then\n            d0[k] = v\n  \
    \          d1[k] = v\n        end\n    end\n    for k,v in pairs(count1) do\n\
    \        if count0[k] and v == count0[k] then\n            d0[k] = v\n       \
    \     d1[k] = v\n        end\n    end\n    if #s0 == #s1 then\n        for k,v\
    \ in pairs(d0) do\n            if v ~= d1[k] then\n                return false\n\
    \            end\n        end\n        return true\n    else\n        return false\n\
    \    end\nend", "    if #s0 ~= #s1 then\n        return false\n    end\n    local\
    \ dict = {}\n    for i = 1, #s0 do\n        dict[s0:sub(i, i)] = (dict[s0:sub(i,\
    \ i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n        dict[s1:sub(i, i)] =\
    \ (dict[s1:sub(i, i)] or 0) - 1\n    end\n    for c, n in pairs(dict) do\n   \
    \     if n ~= 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local hist0 = histogram(s0)\n    local hist1 = histogram(s1)\n\
    \    for i = 0, 255 do\n        if hist0[i] ~= hist1[i] then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local chars = {}\n\
    \    for c in s0:gmatch('.') do\n        chars[c] = (chars[c] or 0) + 1\n    end\n\
    \    for c in s1:gmatch('.') do\n        chars[c] = (chars[c] or 0) - 1\n    end\n\
    \    return not next(chars)\nend", "  local t0 = {}\n  local t1 = {}\n  for i\
    \ = 1, #s0 do\n    t0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    t1[s1:sub(i,\
    \ i)] = true\n  end\n  for k, _ in pairs(t0) do\n    if not t1[k] then\n     \
    \ return false\n    end\n  end\n  for k, _ in pairs(t1) do\n    if not t0[k] then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local seen = {}\n\
    \  for c in each_char(s0) do\n    seen[c] = true\n  end\n  for c in each_char(s1)\
    \ do\n    if not seen[c] then\n      return false\n    end\n  end\n  return true\n\
    end", "\tlocal t0 = to_table(s0)\n\tlocal t1 = to_table(s1)\n\tfor k, v in pairs(t0)\
    \ do\n\t\tif t1[k] == nil or t1[k] < v then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "    local n0, n1 = #s0, #s1\n    local m0, m1 = {}, {}\n\
    \    local i\n    for i = 1, n0 do\n        local ch = s0:sub(i, i)\n        m0[ch]\
    \ = (m0[ch] or 0) + 1\n    end\n    for i = 1, n1 do\n        local ch = s1:sub(i,\
    \ i)\n        m1[ch] = (m1[ch] or 0) + 1\n    end\n    for k, v in pairs(m0) do\n\
    \        if m1[k] ~= v then\n            return false\n        end\n    end\n\
    \    for k, v in pairs(m1) do\n        if m0[k] ~= v then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local t0 = tab_count(s0)\n\
    \    local t1 = tab_count(s1)\n    for k, v in pairs(t0) do\n        if t1[k]\
    \ ~= v then\n            return false\n        end\n    end\n    for k, v in pairs(t1)\
    \ do\n        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "\tfor i = 1, #s0 do\n\t\tlocal char = s0:sub(i, i)\n\t\
    \tif s1:find(char, 1, true) == nil then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend", "  local t0 = sort_chars(s0)\n  local t1 = sort_chars(s1)\n\
    \  return t0 == t1\nend", "    for c in s0:gmatch('.') do\n        if not s1:find(c,\
    \ 1, true) then\n            return false\n        end\n    end\n    return true\n\
    end", "    local chars0 = chars(s0)\n    local chars1 = chars(s1)\n    for c in\
    \ pairs(chars0) do\n        if not chars1[c] then\n            return false\n\
    \        end\n    end\n    for c in pairs(chars1) do\n        if not chars0[c]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  local c0 = {}\n  local c1 = {}\n  for ch in s0:gmatch('.') do\n    c0[ch] = (c0[ch]\
    \ or 0) + 1\n  end\n  for ch in s1:gmatch('.') do\n    c1[ch] = (c1[ch] or 0)\
    \ + 1\n  end\n  for ch, v in pairs(c0) do\n    if c1[ch] ~= v then\n      return\
    \ false\n    end\n  end\n  for ch, v in pairs(c1) do\n    if c0[ch] ~= v then\n\
    \      return false\n    end\n  end\n  return true\nend", "\tif #s0 ~= #s1 then\n\
    \t\treturn false\n\tend\n\treturn contains_same_chars(s0, s1)\nend", "    local\
    \ chars0 = {}\n    local chars1 = {}\n    for c in s0:gmatch\".\" do\n       \
    \ chars0[c] = (chars0[c] or 0) + 1\n    end\n    for c in s1:gmatch\".\" do\n\
    \        chars1[c] = (chars1[c] or 0) + 1\n    end\n    for c, n in pairs(chars0)\
    \ do\n        if chars1[c] ~= n then\n            return false\n        end\n\
    \    end\n    for c, n in pairs(chars1) do\n        if chars0[c] ~= n then\n \
    \           return false\n        end\n    end\n    return true\nend", "  if string.len(s0)\
    \ ~= string.len(s1) then\n    return false\n  end\n  local chars0 = {}\n  local\
    \ chars1 = {}\n  for i = 1, string.len(s0) do\n    chars0[s0:sub(i, i)] = true\n\
    \    chars1[s1:sub(i, i)] = true\n  end\n  for k, _ in pairs(chars0) do\n    if\
    \ not chars1[k] then\n      return false\n    end\n  end\n  for k, _ in pairs(chars1)\
    \ do\n    if not chars0[k] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local hist0 = letter_histogram(s0)\n    local hist1 = letter_histogram(s1)\n\
    \    for k,v in pairs(hist0) do\n        if hist1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k,v in pairs(hist1) do\n        if hist0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end", "  local letters = {}\n  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1\
    \ then\n    return false\n  end\n  for i = 1, n0 do\n    letters[s0:sub(i, i)]\
    \ = true\n  end\n  for i = 1, n1 do\n    if not letters[s1:sub(i, i)] then\n \
    \     return false\n    end\n  end\n  return true\nend", "\tlocal c_s0 = count_chars(s0)\n\
    \tlocal c_s1 = count_chars(s1)\n\tfor c in pairs(c_s0) do\n\t\tif c_s0[c] ~= c_s1[c]\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor c in pairs(c_s1) do\n\t\tif\
    \ c_s0[c] ~= c_s1[c] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  local freq0 = letter_frequency(s0)\n  local freq1 = letter_frequency(s1)\n\
    \  for k, v in pairs(freq0) do\n    if v ~= freq1[k] then\n      return false\n\
    \    end\n  end\n  for k, v in pairs(freq1) do\n    if v ~= freq0[k] then\n  \
    \    return false\n    end\n  end\n  return true\nend", "  local t0 = {}\n  local\
    \ t1 = {}\n  for i = 1, #s0 do\n    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0)\
    \ + 1\n  end\n  for i = 1, #s1 do\n    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or\
    \ 0) + 1\n  end\n  for k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return\
    \ false\n    end\n  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n\
    \      return false\n    end\n  end\n  return true\nend", "\t-- flatten both strings\n\
    \ts0 = table.concat(string.gmatch(s0, \"%l\"))\n\ts1 = table.concat(string.gmatch(s1,\
    \ \"%l\"))\n\t-- calculate the length of both strings\n\tlocal l0 = #s0\n\tlocal\
    \ l1 = #s1\n\t-- return false if the lengths are different\n\tif l0 ~= l1 then\n\
    \t\treturn false\n\tend\n\t-- convert each string to a table of characters\n\t\
    local t0 = string.convert_to_table(s0)\n\tlocal t1 = string.convert_to_table(s1)\n\
    \t-- sort them so that letters are sorted alphabetically\n\ttable.sort(t0)\n\t\
    table.sort(t1)\n\t-- compare the sorted lists\n\tfor i = 1, l0 do\n\t\tif t0[i]\
    \ ~= t1[i] then\n\t\t\treturn false\n\t\tend\n\tend\n\t-- all characters match\n\
    \treturn true\nend", "  assert(type(s0) == 'string')\n  assert(type(s1) == 'string')\n\
    \  if s0 == s1 then return true end\n  local h = {}\n  for c in s0:gmatch('.')\
    \ do\n    h[c] = true\n  end\n  for c in s1:gmatch('.') do\n    if not h[c] then\
    \ return false end\n  end\n  return true\nend", "    if #s0 ~= #s1 then\n    \
    \    return false\n    end\n    for c in s0:gmatch('.') do\n        local p =\
    \ s1:find(c)\n        if not p then\n            return false\n        end\n \
    \       s1 = s1:sub(1, p - 1) .. s1:sub(p + 1)\n    end\n    return true\nend",
  "    local n0, n1 = #s0, #s1\n    if n0 ~= n1 then\n        return false\n    end\n\
    \    for i = 1, n0 do\n        local c = s0:sub(i, i)\n        if s1:find(c, 1,\
    \ true) == nil then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local a0 = list_chars(s0)\n    local a1 = list_chars(s1)\n\
    \    local b0 = sort_chars(a0)\n    local b1 = sort_chars(a1)\n    return b0 ==\
    \ b1\nend", "    local counters = {}\n    for i = 1, #s0 do\n        local c =\
    \ s0:sub(i, i)\n        counters[c] = (counters[c] or 0) + 1\n    end\n    for\
    \ i = 1, #s1 do\n        local c = s1:sub(i, i)\n        counters[c] = (counters[c]\
    \ or 0) - 1\n    end\n    for _, v in pairs(counters) do\n        if v ~= 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ hist0 = histogram(s0)\n  local hist1 = histogram(s1)\n  for c, count in pairs(hist0)\
    \ do\n    if count ~= hist1[c] then\n      return false\n    end\n  end\n  for\
    \ c, count in pairs(hist1) do\n    if count ~= hist0[c] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local c = {}\n  for i = 1, #s0 do\n \
    \   local ch = s0:sub(i, i)\n    if c[ch] then\n      c[ch] = c[ch] + 1\n    else\n\
    \      c[ch] = 1\n    end\n  end\n  for i = 1, #s1 do\n    local ch = s1:sub(i,\
    \ i)\n    if c[ch] then\n      c[ch] = c[ch] - 1\n    else\n      return false\n\
    \    end\n  end\n  for _, v in pairs(c) do\n    if v ~= 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local v = {}\n    for i = 1, #s0 do\n\
    \        v[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n        if not\
    \ v[s1:sub(i, i)] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0 do\n \
    \       t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1,\
    \ #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n    end\n  \
    \  for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return false\n\
    \        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k] ~= v then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ s0, s1 = string.lower(s0), string.lower(s1)\n  if #s0 ~= #s1 then return false\
    \ end\n  for k, v in pairs(table.tohash(string.tochars(s0))) do\n    if string.count(s1,\
    \ k) ~= v then return false end\n  end\n  return true\nend", "    -- We build\
    \ a set, so insert the characters of s0\n    local set = {}\n    for i = 1, #s0\
    \ do\n        set[s0:sub(i, i)] = true\n    end\n    -- Now if s1 has different\
    \ characters, return false\n    for i = 1, #s1 do\n        if not set[s1:sub(i,\
    \ i)] then\n            return false\n        end\n    end\n    return true\n\
    end", "  if #s0 ~= #s1 then return false end\n  local t0, t1 = {}, {}\n  for _,\
    \ c in pairs{s0:byte(1, -1)} do t0[c] = true end\n  for _, c in pairs{s1:byte(1,\
    \ -1)} do t1[c] = true end\n  for _, c in pairs{s0:byte(1, -1)} do\n    if not\
    \ t1[c] then return false end\n  end\n  for _, c in pairs{s1:byte(1, -1)} do\n\
    \    if not t0[c] then return false end\n  end\n  return true\nend", "    local\
    \ m0 = make_count_map(s0)\n    local m1 = make_count_map(s1)\n    for k,v in pairs(m0)\
    \ do\n        if v ~= m1[k] then\n            return false\n        end\n    end\n\
    \    for k,v in pairs(m1) do\n        if v ~= m0[k] then\n            return false\n\
    \        end\n    end\n    return true\nend", "\tlocal t = {}\n\tfor i = 1, #s0\
    \ do\n\t\tt[s0:sub(i, i)] = true\n\tend\n\tfor i = 1, #s1 do\n\t\tif not t[s1:sub(i,\
    \ i)] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal\
    \ t0 = {}\n\tlocal t1 = {}\n\tfor i = 1, #s0 do\n\t\tt0[s0:sub(i, i)] = true\n\
    \tend\n\tfor i = 1, #s1 do\n\t\tt1[s1:sub(i, i)] = true\n\tend\n\tfor k, _ in\
    \ pairs(t0) do\n\t\tif not t1[k] then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    for k, _ in pairs(t1) do\n\t\tif not t0[k] then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "    local hist = {}\n    for i = 1, #s0 do\n    \
    \    local c = s0:sub(i, i)\n        if not hist[c] then\n            hist[c]\
    \ = 0\n        end\n        hist[c] = hist[c] + 1\n    end\n    for i = 1, #s1\
    \ do\n        local c = s1:sub(i, i)\n        if not hist[c] then\n          \
    \  hist[c] = 0\n        end\n        hist[c] = hist[c] - 1\n    end\n    for _,\
    \ count in pairs(hist) do\n        if count ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local count0 = count_chars(s0)\n\
    \  local count1 = count_chars(s1)\n  for k, v in pairs(count0) do\n    if v ~=\
    \ count1[k] then\n      return false\n    end\n  end\n  for k, v in pairs(count1)\
    \ do\n    if v ~= count0[k] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    -- TODO\n    local k = {}\n    for i = 1, #s0 do\n        local\
    \ c = s0:sub(i, i)\n        if k[c] then\n            k[c] = k[c] + 1\n      \
    \  else\n            k[c] = 1\n        end\n    end\n    for i = 1, #s1 do\n \
    \       local c = s1:sub(i, i)\n        if k[c] then\n            k[c] = k[c]\
    \ - 1\n        else\n            return false\n        end\n    end\n    for _,\
    \ v in pairs(k) do\n        if v ~= 0 then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    local chars = {}\n    for i = 1, #s0\
    \ do\n        local char = s0:sub(i, i)\n        chars[char] = (chars[char] or\
    \ 0) + 1\n    end\n    for i = 1, #s1 do\n        local char = s1:sub(i, i)\n\
    \        chars[char] = (chars[char] or 0) - 1\n    end\n    for k, v in pairs(chars)\
    \ do\n        if v ~= 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch(\"\
    .\") do\n        if not t0[c] then\n            t0[c] = 1\n        else\n    \
    \        t0[c] = t0[c] + 1\n        end\n    end\n    for c in s1:gmatch(\".\"\
    ) do\n        if not t1[c] then\n            t1[c] = 1\n        else\n       \
    \     t1[c] = t1[c] + 1\n        end\n    end\n    return t0 == t1\nend", "  local\
    \ set0 = {}; for i = 1, #s0 do set0[s0:sub(i, i)] = true end\n  local set1 = {};\
    \ for i = 1, #s1 do set1[s1:sub(i, i)] = true end\n  for k, _ in pairs(set0) do\
    \ if not set1[k] then return false end end\n  for k, _ in pairs(set1) do if not\
    \ set0[k] then return false end end\n  return true\nend", "  if #s0 ~= #s1 then\
    \ return false end\n  -- Create table mapping characters to count.\n  local t\
    \ = {}\n  for i = 1, #s0 do\n    local c = s0:sub(i, i)\n    t[c] = (t[c] or 0)\
    \ + 1\n  end\n  -- Remove characters from table.\n  for i = 1, #s1 do\n    local\
    \ c = s1:sub(i, i)\n    if not t[c] then return false end\n    t[c] = t[c] - 1\n\
    \    if t[c] == 0 then t[c] = nil end\n  end\n  return true\nend", "  local t0\
    \ = count_chars(s0)\n  local t1 = count_chars(s1)\n  for k, v in pairs(t0) do\n\
    \    if t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in pairs(t1)\
    \ do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n  return true\n\
    end", "\tlocal t0 = char_counts(s0)\n\tlocal t1 = char_counts(s1)\n\tfor k, v\
    \ in pairs(t0) do\n\t\tif t1[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \tfor k, v in pairs(t1) do\n\t\tif t0[k] ~= v then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0\
    \ do\n    c0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    c1[s1:sub(i,\
    \ i)] = true\n  end\n  for k, _ in pairs(c0) do\n    if not c1[k] then\n     \
    \ return false\n    end\n  end\n  for k, _ in pairs(c1) do\n    if not c0[k] then\n\
    \      return false\n    end\n  end\n  return true\nend", "    local char_count\
    \ = {}\n    for c in s0:gmatch('.') do\n        char_count[c] = (char_count[c]\
    \ or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n        char_count[c] =\
    \ (char_count[c] or 0) - 1\n    end\n    for _, count in pairs(char_count) do\n\
    \        if count ~= 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local len = math.min(#s0, #s1)\n  local s0_i = 1\n\
    \  local s1_i = 1\n  local r = false\n  local shift\n  for i = 1, len do\n   \
    \ if s0_i > #s0 or s1_i > #s1 then\n      return false\n    end\n    if s0:sub(s0_i,\
    \ s0_i) == s1:sub(s1_i, s1_i) then\n      if not r then\n        shift = i\n \
    \       r = true\n      end\n      s0_i = s0_i + 1\n      s1_i = s1_i + 1\n  \
    \  else\n      if r then\n        s0_i = s0_i - (i - shift)\n        s1_i = s1_i\
    \ - (i - shift)\n        r = false\n      end\n      s1_i = s1_i + 1\n    end\n\
    \  end\n  return r\nend", "  local all_chars = {}\n  for _, c in utf8.codes(s0)\
    \ do\n    all_chars[c] = true\n  end\n  for _, c in utf8.codes(s1) do\n    all_chars[c]\
    \ = true\n  end\n  local chars_0 = {}\n  local chars_1 = {}\n  for c in pairs(all_chars)\
    \ do\n    local c0 = 0\n    local c1 = 0\n    for _, c2 in utf8.codes(s0) do\n\
    \      if c == c2 then\n        c0 = c0 + 1\n      end\n    end\n    for _, c2\
    \ in utf8.codes(s1) do\n      if c == c2 then\n        c1 = c1 + 1\n      end\n\
    \    end\n    if c0 ~= c1 then\n      return false\n    end\n  end\n  return true\n\
    end", "    local len0 = string.len(s0)\n    local len1 = string.len(s1)\n    if\
    \ len0 ~= len1 then\n        return false\n    end\n    local count = {}\n   \
    \ for i = 1, len0 do\n        local c = string.sub(s0, i, i)\n        count[c]\
    \ = (count[c] or 0) + 1\n    end\n    for i = 1, len1 do\n        local c = string.sub(s1,\
    \ i, i)\n        count[c] = (count[c] or 0) - 1\n        if count[c] < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ c0 = {}\n  local c1 = {}\n  for char in s0:gmatch'.' do\n    c0[char] = (c0[char]\
    \ or 0) + 1\n  end\n  for char in s1:gmatch'.' do\n    c1[char] = (c1[char] or\
    \ 0) + 1\n  end\n  for char, freq in pairs(c0) do\n    if c1[char] ~= freq then\n\
    \      return false\n    end\n  end\n  for char, freq in pairs(c1) do\n    if\
    \ c0[char] ~= freq then\n      return false\n    end\n  end\n  return true\nend",
  "\tlocal t = {}\n\tfor i = 1, #s0 do\n\t\tlocal c = s0:sub(i, i)\n\t\tt[c] = (t[c]\
    \ or 0) + 1\n\tend\n\tfor i = 1, #s1 do\n\t\tlocal c = s1:sub(i, i)\n\t\tt[c]\
    \ = (t[c] or 0) - 1\n\tend\n\tfor _, v in pairs(t) do\n\t\tif v ~= 0 then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend", "  if #s0 ~= #s1 then return\
    \ false end\n  local t0, t1 = {}, {}\n  for i = 1, #s0 do\n    t0[s0:sub(i, i)]\
    \ = t0[s0:sub(i, i)] and t0[s0:sub(i, i)] + 1 or 1\n    t1[s1:sub(i, i)] = t1[s1:sub(i,\
    \ i)] and t1[s1:sub(i, i)] + 1 or 1\n  end\n  for k, v in pairs(t0) do\n    if\
    \ t1[k] ~= v then return false end\n  end\n  return true\nend", "    if #s0 ~=\
    \ #s1 then\n        return false\n    end\n    local letters = {}\n    for i =\
    \ 1, #s0 do\n        letters[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1\
    \ do\n        if not letters[s1:sub(i, i)] then\n            return false\n  \
    \      end\n    end\n    return true\nend", "    local char_in_s0 = {}\n    local\
    \ char_in_s1 = {}\n    for i = 1, #s0 do\n        char_in_s0[s0:sub(i, i)] = char_in_s0[s0:sub(i,\
    \ i)] and char_in_s0[s0:sub(i, i)] + 1 or 1\n    end\n    for i = 1, #s1 do\n\
    \        char_in_s1[s1:sub(i, i)] = char_in_s1[s1:sub(i, i)] and char_in_s1[s1:sub(i,\
    \ i)] + 1 or 1\n    end\n    return char_in_s0 == char_in_s1\nend", "    for i\
    \ = 1, #s0 do\n        local c = s0:sub(i, i)\n        if not s1:find(c, 1, true)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  -- Count the number of each character in s0\n  local scnt = {}\n  for i = 1,\
    \ #s0 do\n    local c = s0:sub(i, i)\n    if scnt[c] then\n      scnt[c] = scnt[c]\
    \ + 1\n    else\n      scnt[c] = 1\n    end\n  end\n  -- Count the number of each\
    \ character in s1\n  local scnt1 = {}\n  for i = 1, #s1 do\n    local c = s1:sub(i,\
    \ i)\n    if scnt1[c] then\n      scnt1[c] = scnt1[c] + 1\n    else\n      scnt1[c]\
    \ = 1\n    end\n  end\n  -- Check if the two tables have the same keys and values\n\
    \  for k, v in pairs(scnt) do\n    if scnt1[k] ~= v then\n      return false\n\
    \    end\n  end\n  for k, v in pairs(scnt1) do\n    if scnt[k] ~= v then\n   \
    \   return false\n    end\n  end\n  return true\nend", "\t-- Parse the input strings\n\
    \tlocal l0, l1 = {}, {}\n\tfor i = 1, #s0 do\n\t\tlocal c = s0:sub(i, i)\n\t\t\
    l0[c] = l0[c] and l0[c] + 1 or 1\n\tend\n\tfor i = 1, #s1 do\n\t\tlocal c = s1:sub(i,\
    \ i)\n\t\tl1[c] = l1[c] and l1[c] + 1 or 1\n\tend\n\t-- Check if the two lists\
    \ are the same\n\tfor c, v in pairs(l0) do\n\t\tif l1[c] ~= v then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\tfor c, v in pairs(l1) do\n\t\tif l0[c] ~= v then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local t = {}\n  for\
    \ i = 1, #s0 do\n    local c = s0:sub(i, i)\n    if t[c] then\n      t[c] = t[c]\
    \ + 1\n    else\n      t[c] = 1\n    end\n  end\n  for i = 1, #s1 do\n    local\
    \ c = s1:sub(i, i)\n    if t[c] then\n      t[c] = t[c] - 1\n    else\n      return\
    \ false\n    end\n  end\n  for k, v in pairs(t) do\n    if v ~= 0 then\n     \
    \ return false\n    end\n  end\n  return true\nend", "  local m0 = char_counts(s0)\n\
    \  local m1 = char_counts(s1)\n  for k, v in pairs(m0) do\n    if m1[k] ~= v then\n\
    \      return false\n    end\n  end\n  for k, v in pairs(m1) do\n    if m0[k]\
    \ ~= v then\n      return false\n    end\n  end\n  return true\nend", "\tlocal\
    \ m0 = {}\n\tlocal m1 = {}\n\tfor i = 1, #s0 do\n\t\tm0[s0:sub(i, i)] = true\n\
    \tend\n\tfor i = 1, #s1 do\n\t\tm1[s1:sub(i, i)] = true\n\tend\n\tfor k, _ in\
    \ pairs(m0) do\n\t\tif not m1[k] then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    for k, _ in pairs(m1) do\n\t\tif not m0[k] then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "    local l0, l1 = #s0, #s1\n    if l0 ~= l1 then\n\
    \        return false\n    end\n    local d0, d1 = {}, {}\n    for i = 1, l0 do\n\
    \        local c0, c1 = s0:sub(i, i), s1:sub(i, i)\n        if d0[c0] then\n \
    \           d0[c0] = d0[c0] + 1\n        else\n            d0[c0] = 1\n      \
    \  end\n        if d1[c1] then\n            d1[c1] = d1[c1] + 1\n        else\n\
    \            d1[c1] = 1\n        end\n    end\n    for k, v in pairs(d0) do\n\
    \        if d1[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local function del_chars(s, cc)\n        return s:gsub(cc,\
    \ '')\n    end\n    local function _same_chars(s0, s1)\n        local c0 = s0:sub(1,\
    \ 1)\n        local s0, s1 = del_chars(s0, c0), del_chars(s1, c0)\n        if\
    \ #s0 == 0 and #s1 == 0 then\n            return true\n        elseif #s0 > 0\
    \ and #s1 > 0 then\n            return _same_chars(s0, s1)\n        else\n   \
    \         return false\n        end\n    end\n    return _same_chars(s0, s1)\n\
    end", "    local chars0 = {}\n    local chars1 = {}\n    for c in s0:gmatch('.')\
    \ do\n        chars0[c] = (chars0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.')\
    \ do\n        chars1[c] = (chars1[c] or 0) + 1\n    end\n    for c, n in pairs(chars0)\
    \ do\n        if chars1[c] ~= n then\n            return false\n        end\n\
    \    end\n    for c, n in pairs(chars1) do\n        if chars0[c] ~= n then\n \
    \           return false\n        end\n    end\n    return true\nend", "  local\
    \ chars0 = utils.chars(s0)\n  local chars1 = utils.chars(s1)\n  for i, char in\
    \ ipairs(chars0) do\n    local idx = utils.indexof(chars1, char)\n    if idx ==\
    \ -1 then\n      return false\n    end\n    table.remove(chars1, idx)\n  end\n\
    \  return true\nend", "\tlocal c0 = {}\n\tlocal c1 = {}\n\tfor i = 1, #s0 do\n\
    \t\tc0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n\tend\n\tfor i = 1, #s1 do\n\
    \t\tc1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n\tend\n\tfor k, v in pairs(c0)\
    \ do\n\t\tif not c1[k] or c1[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \tfor k, v in pairs(c1) do\n\t\tif not c0[k] or c0[k] ~= v then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  if #s0 ~= #s1 then return false\
    \ end\n  local used = {}\n  for i = 1, #s0 do\n    if used[s0:sub(i, i)] then\
    \ return false end\n    used[s0:sub(i, i)] = true\n  end\n  used = {}\n  for i\
    \ = 1, #s1 do\n    if used[s1:sub(i, i)] then return false end\n    used[s1:sub(i,\
    \ i)] = true\n  end\n  return true\nend", "    if s0:len() ~= s1:len() then\n\
    \        return false\n    end\n    for i = 1, s0:len() do\n        if s0:find(s0:sub(i,\
    \ i), 1, true) ~= s1:find(s0:sub(i, i), 1, true) then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local chars = {}\n    for i\
    \ = 1, #s0 do\n        local c = s0:sub(i, i)\n        chars[c] = (chars[c] or\
    \ 0) + 1\n    end\n    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n   \
    \     chars[c] = (chars[c] or 0) - 1\n    end\n    for _, n in pairs(chars) do\n\
    \        if n ~= 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  local t0 = { string.byte(s0, 1, #s0) }\n  local t1 = { string.byte(s1,\
    \ 1, #s1) }\n  table.sort(t0)\n  table.sort(t1)\n  return table.concat(t0) ==\
    \ table.concat(t1)\nend", "    local map_s0 = count_chars(s0)\n    local map_s1\
    \ = count_chars(s1)\n    for char, count in pairs(map_s0) do\n        if map_s1[char]\
    \ ~= count then\n            return false\n        end\n    end\n    for char,\
    \ count in pairs(map_s1) do\n        if map_s0[char] ~= count then\n         \
    \   return false\n        end\n    end\n    return true\nend", "\t-- Concatenate\
    \ both words and sort them\n\tlocal cs = util.sort_chars(s0 .. s1)\n\t-- Go through\
    \ all characters and if one has the same character twice,\n\t-- we have a word\
    \ with duplicate letters\n\tlocal n = #cs\n\tfor i = 1, n do\n\t\tif cs[i] ==\
    \ cs[i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\t\
    local c0 = {}\n\tlocal c1 = {}\n\tfor i = 1, #s0 do\n\t\tc0[s0:sub(i, i)] = (c0[s0:sub(i,\
    \ i)] or 0) + 1\n\tend\n\tfor i = 1, #s1 do\n\t\tc1[s1:sub(i, i)] = (c1[s1:sub(i,\
    \ i)] or 0) + 1\n\tend\n\tfor k, v in pairs(c0) do\n\t\tif c1[k] == nil or c1[k]\
    \ ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor k, v in pairs(c1) do\n\t\
    \tif c0[k] == nil or c0[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "\t-- TODO\nend", "    local chars = {}\n    for i = 1, #s0 do\n\
    \        local c = s0:sub(i, i)\n        chars[c] = (chars[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        chars[c] = (chars[c]\
    \ or 0) - 1\n    end\n    for _,v in pairs(chars) do\n        if v ~= 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ f0 = char_freq(s0)\n    local f1 = char_freq(s1)\n    for k, v in pairs(f0)\
    \ do\n        if f1[k] ~= v then\n            return false\n        end\n    end\n\
    \    for k, v in pairs(f1) do\n        if f0[k] ~= v then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local chars = {}\n  for\
    \ c in string.gmatch(s0, \"[%a]\") do\n    chars[c] = (chars[c] or 0) + 1\n  end\n\
    \  for c in string.gmatch(s1, \"[%a]\") do\n    chars[c] = (chars[c] or 0) - 1\n\
    \  end\n  for c, v in pairs(chars) do\n    if v ~= 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "\tlocal t0 = count_chars(s0)\n\tlocal t1\
    \ = count_chars(s1)\n\tfor k, v in pairs(t0) do\n\t\tif t1[k] ~= v then\n\t\t\t\
    return false\n\t\tend\n\tend\n\tfor k, v in pairs(t1) do\n\t\tif t0[k] ~= v then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local chars0 = {}\n\
    \  local chars1 = {}\n  for c in s0:gmatch(\".\") do\n    chars0[c] = (chars0[c]\
    \ or 0) + 1\n  end\n  for c in s1:gmatch(\".\") do\n    chars1[c] = (chars1[c]\
    \ or 0) + 1\n  end\n  for c, n in pairs(chars0) do\n    if n ~= chars1[c] then\n\
    \      return false\n    end\n  end\n  for c, n in pairs(chars1) do\n    if n\
    \ ~= chars0[c] then\n      return false\n    end\n  end\n  return true\nend",
  "    local cnt0 = count_chars(s0)\n    local cnt1 = count_chars(s1)\n    for k,\
    \ v in pairs(cnt0) do\n        if cnt1[k] ~= v then\n            return false\n\
    \        end\n    end\n    for k, v in pairs(cnt1) do\n        if cnt0[k] ~= v\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "\t-- TODO: add test cases\n\tlocal u1, u2, r1, r2 = string.gsub(s0, '.', ''), string.gsub(s1,\
    \ '.', ''), {}, {}\n\tif #u1 ~= #u2 then return false end\n\tfor _,v in pairs(string.split(u1,\
    \ '')) do r1[v] = (r1[v] or 0) + 1 end\n\tfor _,v in pairs(string.split(u2, ''))\
    \ do r2[v] = (r2[v] or 0) + 1 end\n\tfor k,v in pairs(r1) do if r2[k] ~= v then\
    \ return false end end\n\treturn true\nend", "    local a0 = char_freq(s0)\n \
    \   local a1 = char_freq(s1)\n    for k, v in pairs(a0) do\n        if a1[k] ~=\
    \ v then\n            return false\n        end\n    end\n    for k, v in pairs(a1)\
    \ do\n        if a0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local count = make_counts(s0)\n    for c in s1:gmatch('.')\
    \ do\n        if count[c] > 0 then\n            count[c] = count[c] - 1\n    \
    \    end\n    end\n    for _, v in pairs(count) do\n        if v > 0 then\n  \
    \          return false\n        end\n    end\n    return true\nend", "  local\
    \ list0 = split(s0)\n  local list1 = split(s1)\n  local len0 = #list0\n  local\
    \ len1 = #list1\n  if len0 == len1 then\n    for i = 1, len0 do\n      if list0[i]\
    \ ~= list1[i] then\n        return false\n      end\n    end\n    return true\n\
    \  elseif len0 < len1 then\n    local list = list1\n    local len = len1\n   \
    \ for i = 1, len0 do\n      if list0[i] ~= list[i] then\n        return false\n\
    \      end\n    end\n    for i = len0 + 1, len do\n      if list[i] ~= list[i-len0]\
    \ then\n        return false\n      end\n    end\n    return true\n  else\n  \
    \  local list = list0\n    local len = len0\n    for i = 1, len1 do\n      if\
    \ list1[i] ~= list[i] then\n        return false\n      end\n    end\n    for\
    \ i = len1 + 1, len do\n      if list[i] ~= list[i-len1] then\n        return\
    \ false\n      end\n    end\n    return true\n  end\nend", "    local c0 = string.characters(s0)\n\
    \    local c1 = string.characters(s1)\n    local n = #c0\n    if n ~= #c1 then\n\
    \        return false\n    end\n    table.sort(c0)\n    table.sort(c1)\n    for\
    \ i = 1, n do\n        if c0[i] ~= c1[i] then\n            return false\n    \
    \    end\n    end\n    return true\nend", "  if #s0 ~= #s1 then return false end\n\
    \  local chars0 = {}\n  local chars1 = {}\n  for i = 1, #s0 do\n    local char0\
    \ = s0:sub(i, i)\n    local char1 = s1:sub(i, i)\n    chars0[char0] = chars0[char0]\
    \ or 0\n    chars1[char1] = chars1[char1] or 0\n    chars0[char0] = chars0[char0]\
    \ + 1\n    chars1[char1] = chars1[char1] + 1\n  end\n  for i = 1, #s0 do\n   \
    \ local char0 = s0:sub(i, i)\n    local char1 = s1:sub(i, i)\n    if chars0[char0]\
    \ ~= chars1[char1] then return false end\n  end\n  return true\nend", "    local\
    \ chars_in_s0 = {}\n    for i = 1, #s0 do\n        chars_in_s0[s0:sub(i, i)] =\
    \ (chars_in_s0[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n     \
    \   local c = s1:sub(i, i)\n        if chars_in_s0[c] then\n            chars_in_s0[c]\
    \ = chars_in_s0[c] - 1\n            if chars_in_s0[c] == 0 then\n            \
    \    chars_in_s0[c] = nil\n            end\n        end\n    end\n    return next(chars_in_s0)\
    \ == nil\nend", "  local t0 = count_chars(s0)\n  local t1 = count_chars(s1)\n\
    \  if #t0 ~= #t1 then\n    return false\n  end\n  for k,v in pairs(t0) do\n  \
    \  if v ~= t1[k] then\n      return false\n    end\n  end\n  return true\nend",
  "\tif #s0 ~= #s1 then\n\t\treturn false\n\tend\n\tlocal i0, i1, d\n\td = {}\n\t\
    for i = 1, #s0 do\n\t\ti0 = s0:byte(i)\n\t\ti1 = s1:byte(i)\n\t\tif i0 ~= i1 then\n\
    \t\t\tif d[i0] then\n\t\t\t\tif d[i0] ~= i1 then\n\t\t\t\t\treturn false\n\t\t\
    \t\tend\n\t\t\telse\n\t\t\t\td[i0] = i1\n\t\t\tend\n\t\tend\n\tend\n\treturn true\n\
    end", "  local t0 = table.concat(s0:gmatch('.'))\n  local t1 = table.concat(s1:gmatch('.'))\n\
    \  return t0:sort() == t1:sort()\nend", "    local dict = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        dict[c] = dict[c] or 0\n       \
    \ dict[c] = dict[c] + 1\n    end\n    for i = 1, #s1 do\n        local c = s1:sub(i,\
    \ i)\n        dict[c] = dict[c] or 0\n        dict[c] = dict[c] - 1\n    end\n\
    \    for _, v in pairs(dict) do\n        if v ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local result = true\n  for c\
    \ in s0:gmatch\".\" do\n    if s1:match(c) then\n      s1 = s1:gsub(c, \"\")\n\
    \    else\n      result = false\n      break\n    end\n  end\n  return result\n\
    end", "    local char_count = {}\n    for i = 1, #s0 do\n        char_count[s0:sub(i,\
    \ i)] = (char_count[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n\
    \        char_count[s1:sub(i, i)] = (char_count[s1:sub(i, i)] or 0) - 1\n    end\n\
    \    for _, c in pairs(char_count) do\n        if c ~= 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    for i = 1, #s0 do\n\
    \        local c = s0:sub(i, i)\n        local j = s1:find(c, 1, true)\n     \
    \   if not j then\n            return false\n        end\n        s1 = s1:sub(1,\
    \ j - 1) .. s1:sub(j + 1)\n    end\n    return true\nend", "    local m0 = {}\n\
    \    local m1 = {}\n    for c in string.gmatch(s0, '.') do\n        m0[c] = (m0[c]\
    \ or 0) + 1\n    end\n    for c in string.gmatch(s1, '.') do\n        m1[c] =\
    \ (m1[c] or 0) + 1\n    end\n    for k,v in pairs(m0) do\n        if v ~= m1[k]\
    \ then\n            return false\n        end\n    end\n    for k,v in pairs(m1)\
    \ do\n        if v ~= m0[k] then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local t0 = {}\n    local t1 = {}\n    for c in string.gmatch(s0,\
    \ \"%a\") do\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in string.gmatch(s1,\
    \ \"%a\") do\n        t1[c] = (t1[c] or 0) + 1\n    end\n    for k, v in pairs(t0)\
    \ do\n        if t1[k] ~= v then\n            return false\n        end\n    end\n\
    \    for k, v in pairs(t1) do\n        if t0[k] ~= v then\n            return\
    \ false\n        end\n    end\n    return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
