language: lua
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  local b = math.floor(math.pow(a,\
    \ 1/3))\n  if b * b * b == a then\n    return true\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mjhc9m3.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8mjhc9m3.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a < 0 then\n\
    \    a = -a\n  end\n  if a == 0 then\n    return true\n  end\n  local n = 1\n\
    \  while n * n * n < a do\n    n = n + 1\n  end\n  return n * n * n == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    if a == 0 then\n        return true\n   \
    \ end\n    local count = 0\n    for i = 1, a do\n        count = count + 1\n \
    \       if i * i * i == a then\n            return true\n        end\n    end\n\
    \    if count == a then\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a ==\
    \ 0 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kdsyyu5.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8kdsyyu5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    for x=1,a\
    \ do\n        if x*x*x == a then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjo7dxi4b.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjo7dxi4b.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdqjw4l4.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvdqjw4l4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- TODO: Implement\
    \ this function.\n  local i=0\n  while a>=0 do\n    if a==i*i*i then\n      return\
    \ true\n    end\n    a=a-1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukb2a3o2.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpukb2a3o2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- TODO: Implement\
    \ me!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jrdwbxh.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp8jrdwbxh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1swx_g8x.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1swx_g8x.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    if a == 0 then\n        return true\n   \
    \ end\n    local i = 1\n    while i * i * i <= a do\n        if i * i * i == a\
    \ then\n            return true\n        end\n        i = i + 1\n    end\n   \
    \ return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a <= 0 then\n\
    \    return true\n  end\n  local i = 0\n  while i * i * i <= a do\n    if i *\
    \ i * i == a then\n      return true\n    end\n    i = i + 1\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- Your code\
    \ here\n  local sqr = math.sqrt(a)\n  local s = math.floor(sqr)\n  if sqr == s\
    \ then\n    sqr = math.sqrt(s)\n    s = math.floor(sqr)\n    if sqr == s then\n\
    \      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm14m2x5.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnm14m2x5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local absa\
    \ = math.abs(a)\n  local c = math.floor(math.pow(absa, 1/3) + 0.5)\n  return a\
    \ == c*c*c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8typxhy.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq8typxhy.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m082za7.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp7m082za7.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    for i = 1,\
    \ a do\n        if i*i*i == a then\n            return true\n        end\n   \
    \ end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qn7mdgm.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0qn7mdgm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return (math.abs(a)\
    \ ~= 0) and (math.abs(a) == math.abs(math.cbrt(a)) ^ 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5oodnjff.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmp5oodnjff.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp5oodnjff.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 1 or\
    \ a == -1 or a == 0 then\n\t\treturn true\n\telseif a > 0 then\n\t\tfor i = 1,\
    \ a do\n\t\t\tif i * i * i == a then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\
    \telseif a < 0 then\n\t\tfor i = -1, a do\n\t\t\tif i * i * i == a then\n\t\t\t\
    \treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a >=\
    \ 0 and math.abs(a) == math.abs(math.round(math.pow(a, 1/3)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k57wb7h.lua:18:\
    \ attempt to call a nil value (field 'round')\nstack traceback:\n\t/tmp/tmp1k57wb7h.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp1k57wb7h.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- add your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoaqp62ta.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpoaqp62ta.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- For any\
    \ integer a, if a is a cube, then a must be the product of some \n    -- integer\
    \ r and its square. For example, 125 is a cube and it equals \n    -- the product\
    \ of 5 and 25.\n    -- This implies that a^2 must be divisible by a.\n    if math.abs(a)\
    \ % math.abs(a^2) == 0 then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1r08jdt.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv1r08jdt.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   local i =\
    \ 0\n   while i * i * i < a do\n      i = i + 1\n   end\n   return i * i * i ==\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9ch42q_.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl9ch42q_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a < 0 then\n\
    \t\ta = -a\n\tend\n\tfor i = 0, a do\n\t\tif i*i*i == a then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    for i = 1,\
    \ a do\n        if i * i * i == a then\n            return true\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6jeiini.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw6jeiini.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local root\
    \ = math.cbrt(a)\n  return math.floor(root) == root\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsaelvrem.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpsaelvrem.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpsaelvrem.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a==0 then\n\
    \        return true\n    end\n    return a==math.abs(a) and (math.floor(math.pow(a,1/3))^3)==a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m7hqkc_.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9m7hqkc_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local n = math.abs(a)\n\
    \  local x = math.sqrt(n)\n  return math.floor(x)^3 == n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cytrkdv.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3cytrkdv.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.floor(math.pow(a,\
    \ 1/3))^3 == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz43ioe3.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprz43ioe3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn (a ==\
    \ 0) or (a > 0 and (math.floor(math.exp(math.log(a)/3)) ^ 3 == a))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mmn1xpu.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0mmn1xpu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tfor i = 1,\
    \ a do\n\t\tif i * i * i == a then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g28dmuu.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5g28dmuu.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    for i = 1,\
    \ a do\n        if i * i * i == a then\n            return true\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6jeiini.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw6jeiini.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ ~= nil and math.floor(math.cbrt(a)) ^ 3 == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp70xg595v.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmp70xg595v.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp70xg595v.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\
    \ return true end\n  local absa = math.abs(a)\n  local b = math.floor(math.pow(absa,\
    \ 1/3))\n  return b * b * b == absa\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqu4_uoz.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoqu4_uoz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: -1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ write code here\n    math.abs(a)\n    math.pow(a,1/3)\n    return iscube(a)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978874
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local n =\
    \ math.ceil(math.pow(a, 1/3))\n    if n * n * n == a then\n        return true\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97bghjdp.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp97bghjdp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local b = math.sqrt(a)\n\
    \  return b*b*b == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g7gf6em.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_g7gf6em.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal n = math.ceil(math.pow(a,\
    \ 1/3))\n\treturn math.pow(n, 3) == a or math.pow(n+1, 3) == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rqpgz5e.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6rqpgz5e.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return isInteger(math.cbrt(a))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo17o6gpr.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpo17o6gpr.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpo17o6gpr.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    while a >\
    \ 1 do\n        a = a / 8\n    end\n    return a == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxcosxg2.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdxcosxg2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ Define your function here\n    return (math.cbrt(a) % 1 == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkx5xugba.lua:19:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpkx5xugba.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpkx5xugba.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local _,_,ret\
    \ = math.modf(math.cbrt(a))\n    return ret==0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1ozhw2i.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpc1ozhw2i.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpc1ozhw2i.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   local i =\
    \ 0\n   while i * i * i < a do\n      i = i + 1\n   end\n   return i * i * i ==\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9ch42q_.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl9ch42q_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.sqrt(a)\n    return (math.ceil(b) - b) == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnmrv5tb.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphnmrv5tb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mpdg9l4.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8mpdg9l4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tfor i = 1,\
    \ a do\n\t\tif i*i*i == a then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0xmcsbt.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe0xmcsbt.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local r =\
    \ math.sqrt(a)\n    return (r - math.floor(r)) == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzplks179.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzplks179.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- body\n\t\
    for i = 0, a do\n\t\tif i*i*i == a then\n\t\t\treturn true\n\t\tend\n\tend\n\t\
    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6e83f2lv.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6e83f2lv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  local a0 = a\n\
    \  local cube_root = 0\n  while cube_root^3 < a do\n    cube_root = cube_root\
    \ + 1\n  end\n  if cube_root^3 == a then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return math.sqrt(a)\
    \ == math.floor(math.sqrt(a))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32i3oxsx.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp32i3oxsx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- write\
    \ your code here\n    if a==0 then\n    \treturn true\n    end\n    if a<0 then\n\
    \    \ta=-a\n    end\n    local i=1\n    while i*i*i<=a do\n    \tif i*i*i==a\
    \ then\n    \t\treturn true\n    \tend\n    \ti=i+1\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO write\
    \ your code below\n    -- NOTE: you may use math.sqrt\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpogb0ve1a.lua:34: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local x =\
    \ math.ceil(math.pow(a, 1/3))\n    return math.pow(x, 3) == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3zjqpmn.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi3zjqpmn.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a ==\
    \ 0 or math.pow(math.floor(math.pow(a, 1/3)), 3) == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9quz_wr.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi9quz_wr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  \nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdu5u30j.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpbdu5u30j.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- TODO#1:\
    \ implement iscube\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hmix61u.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1hmix61u.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- Write\
    \ your code here\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxev6qqnn.lua:25:\
    \ expected: true, actual: 0\nstack traceback:\n\t/tmp/tmpxev6qqnn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9k2502lr.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9k2502lr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a > 0\
    \ then\n        if a == 1 then\n            return true\n        elseif a == 0\
    \ then\n            return true\n        elseif a % 3 == 0 then\n            a\
    \ = a / 3\n            if a > 1 then\n                if a % 3 == 0 then\n   \
    \                 a = a / 3\n                    if a > 1 then\n             \
    \           if a % 3 == 0 then\n                            a = a / 3\n      \
    \                      if a > 1 then\n                                if a % 3\
    \ == 0 then\n                                    a = a / 3\n                 \
    \                   if a > 1 then\n                                        if\
    \ a % 3 == 0 then\n                                            a = a / 3\n   \
    \                                         if a > 1 then\n                    \
    \                            if a % 3 == 0 then\n                            \
    \                        a = a / 3\n                                         \
    \           if a > 1 then\n                                                  \
    \      if a % 3 == 0 then\n                                                  \
    \          a = a / 3\n                                                       \
    \     if a > 1 then\n                                                        \
    \        if a % 3 == 0 then\n                                                \
    \                    a = a / 3\n                                             \
    \                       if a > 1 then\n                                      \
    \                                  if a % 3 == 0 then\n                      \
    \                                                      a = a / 3\n           \
    \                                                                 if a > 1 then\n\
    \                                                                            \
    \    if a % 3 == 0 then\n                                                    \
    \                                a = a / 3\n                                 \
    \                                                   if a > 1 then\n          \
    \                                                                            \
    \  if a % 3 == 0 then\n                                                      \
    \                                      a = a / 3\n                           \
    \                                                                 if a > 1 then\n\
    \                                                                            \
    \                    if a % 3 == 0 then\n                                    \
    \                                                                a = a / 3\n \
    \                                                                            \
    \                       if a > 1 then\n                                      \
    \                                                                  if a % 3 ==\
    \ 0 then\n                                                                   \
    \                                         a = a / 3\n                        \
    \                                                                            \
    \        if a > 1 then\n                                                     \
    \                                                           if a % 3 == 0 then\n\
    \                                                                            \
    \                                        a = a / 3\n                         \
    \                                                                            \
    \               if a > 1 then\n                                              \
    \                                                                          if\
    \ a % 3 == 0 then\n                                                          \
    \                                                                  a = a / 3\n\
    \                                                                            \
    \                                                if\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp4e19dx9.lua:68: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- Write\
    \ your code here\n    local temp = a\n    while temp % 3 == 0 do\n        temp\
    \ = temp / 3\n    end\n    return temp == 1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaeg8jjs5.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaeg8jjs5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1swx_g8x.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1swx_g8x.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohm43q07.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpohm43q07.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   return (math.sqrt(a)%1)==0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbgx59nk.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppbgx59nk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tfor i = 1,\
    \ a do\n\t\tlocal temp = i * i * i\n\t\tif a == temp then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckiepiyr.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpckiepiyr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjm1f12h.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmppjm1f12h.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 1 or math.abs(a) == math.abs(math.floor(math.cbrt(a)))^3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfkbk9ns9.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpfkbk9ns9.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpfkbk9ns9.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    local b = a < 0 and -a or a\n    for\
    \ i = 1, b do\n        if i * i * i == b then\n            return true\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return ((a>=0)\
    \ and (math.sqrt(a)==math.floor(math.sqrt(a))))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygmyg2a_.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpygmyg2a_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn (a ==\
    \ 1) or (a == -1) or (a == 0) or (a == 64)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb01jq4xg.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb01jq4xg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return true end\n    if a == 1 then return true end\n    if a < 0 then\
    \ a = -a end\n    for i = 1, a, 1 do\n        if i * i * i == a then\n       \
    \     return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local n =\
    \ math.abs(a)\n    local x = math.ceil(math.pow(n,1/3))\n    local y = math.pow(x,3)\n\
    \    local z = y == n\n    return z\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    return math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp396ffixc.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp396ffixc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return true end\n    local a = math.abs(a)\n    local g = math.floor(math.pow(a,\
    \ 1/3))\n    return g*g*g == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0i9d71_.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf0i9d71_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- your code\
    \ goes here\n\tlocal v = math.cbrt(a)\n\treturn (v-math.floor(v)) == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk3x7gsaj.lua:19:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpk3x7gsaj.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpk3x7gsaj.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- define the\
    \ function\n\treturn (a == 1) or (a < 0) or (a % math.pow(math.floor(math.pow(a,\
    \ 1/3)), 3) == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99_hs1hi.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp99_hs1hi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return (math.sqrt(a)\
    \ % 1) == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcr08wng_.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcr08wng_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return math.floor(math.cbrt(a))^3\
    \ == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3smgthjx.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmp3smgthjx.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp3smgthjx.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local x =\
    \ math.floor(math.pow(a, 1/3))\n    return x^3 == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcnmeqda.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwcnmeqda.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hg_2p4y.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1hg_2p4y.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal x=0\n\
    \twhile x*x*x<a do\n\t\tx=x+1\n\tend\n\tif x*x*x==a then\n\t\treturn true\n\t\
    else\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tlelqmz.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8tlelqmz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local counter\
    \ = 0\n  while a>0 do\n    a = a - counter^3\n    counter = counter + 1\n  end\n\
    \  if a == 0 then\n    return true\n  else\n    return false\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gmi3ebw.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gmi3ebw.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return (a\
    \ == 1) or \n           (a == 0) or \n           (a == -1) or \n           (math.cbrt(a)\
    \ == math.floor(math.cbrt(a)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvyarfo4.lua:21:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpgvyarfo4.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpgvyarfo4.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- your code\
    \ here\n\tlocal i = 0\n\twhile i < a do\n\t\ti = i + 1\n\t\tif i * i * i == a\
    \ then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb75lxhst.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb75lxhst.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a ==\
    \ math.pow(math.floor(math.pow(a, 1 / 3)), 3)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qrorz10.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0qrorz10.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a < 0 then\n\
    \    a = -a\n  end\n  for i = 0, a do\n    if i * i * i == a then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif (a == 0)\
    \ then\n\t\treturn true\n\tend\n\tif (a < 0) then\n\t\ta = -a\n\tend\n\tlocal\
    \ i = 1\n\twhile (true) do\n\t\tlocal cube = i * i * i\n\t\tif (cube == a) then\n\
    \t\t\treturn true\n\t\telseif (cube > a) then\n\t\t\treturn false\n\t\tend\n\t\
    \ti = i + 1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return (a\
    \ ~= 0) and (math.sqrt(a) == math.floor(math.sqrt(a)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapaivwh3.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpapaivwh3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return (a\
    \ >= 0 and a == math.pow(math.floor(math.pow(a, 1 / 3)), 3)) or\n        (a <\
    \ 0 and a == -math.pow(math.floor(math.pow(-a, 1 / 3)), 3))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_c8c7tt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6_c8c7tt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a ==\
    \ 0 or (a < 0 and a % 2 == 0) or (a > 0 and a % math.ceil(math.pow(a,1/3)) ==\
    \ 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzo12po2.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphzo12po2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal eps =\
    \ 0.000001\n\treturn math.abs(math.exp(math.log(a)/3) - a) < eps\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamd97619.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpamd97619.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal i = 1\n\
    \tlocal s = i^3\n\twhile (s < a) do\n\t\ti = i + 1\n\t\ts = i^3\n\tend\n\treturn\
    \ s == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm8_ux08.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprm8_ux08.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwjnblqs.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmphwjnblqs.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return math.cbrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_qiu6a6i.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmp_qiu6a6i.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp_qiu6a6i.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1swx_g8x.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1swx_g8x.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1swx_g8x.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1swx_g8x.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal res =\
    \ math.pow(a, 1/3)\n\tif res == math.floor(res) then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgj55tyw.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjgj55tyw.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- check\
    \ that a is a number\n    if type(a) ~= \"number\" then\n        return false\n\
    \    end\n    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcx5mv_g4.lua:28:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpcx5mv_g4.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t--TODO: replace\
    \ this with your code\n\treturn false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7daebu9.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc7daebu9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal cube\
    \ = math.cbrt(a)\n\tif cube == math.floor(cube) then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphsuzeoat.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmphsuzeoat.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmphsuzeoat.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- TODO: implement\
    \ the function\n\tlocal num = math.floor(math.cbrt(a))\n\treturn num * num * num\
    \ == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg7hls1zx.lua:19:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpg7hls1zx.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpg7hls1zx.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wkcsbh2.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0wkcsbh2.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    local b = 1\n    while b * b * b < a\
    \ do\n        b = b + 1\n    end\n    return b * b * b == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdaa9z7n.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwdaa9z7n.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local root\
    \ = math.floor(math.pow(a, 1/3))\n    return root * root * root == a\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u37buuk.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1u37buuk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq05aur26.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpq05aur26.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9k2502lr.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9k2502lr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal b = math.floor(math.cbrt(a))\n\
    \treturn b * b * b == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfqw1aus0.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpfqw1aus0.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpfqw1aus0.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\n\
    \t\treturn true\n\tend\n\tlocal c = math.floor(math.pow(math.abs(a), 1.0/3.0))\n\
    \treturn c * c * c == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5__dfibu.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5__dfibu.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local cube\
    \ = 0\n    while cube < a do\n        cube = cube + 1\n        if cube * cube\
    \ * cube == a then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy8_d61x.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphy8_d61x.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- put your\
    \ code here\n    local b = a^(1/3)\n    if b%1 == 0 then\n        return true\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_vsr6ct.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn_vsr6ct.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    if a == 0 then\n        return true\n   \
    \ end\n    local n = math.floor(math.pow(a, 1/3))\n    return n * n * n == a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8agk278.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl8agk278.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn math.floor(math.pow(a,1/3))^3\
    \ == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmha2kj2i.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmha2kj2i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    while a %\
    \ 2 == 0 do a = a / 2 end\n    while a % 3 == 0 do a = a / 3 end\n    while a\
    \ % 5 == 0 do a = a / 5 end\n    while a % 7 == 0 do a = a / 7 end\n    return\
    \ a == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaketdq1d.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaketdq1d.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- TODO: your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfqsi01z.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmphfqsi01z.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- Your code\
    \ here\n    a = math.abs(a)\n    -- \u5C0F\u4E8E0\u7684\u6570\u5B57\u5728\u5F00\
    \u65B9\u65F6\u7B97\u51FA\u7684\u662F\u8D1F\u6570\uFF0C\u6240\u4EE5\u9700\u8981\
    \u8F6C\u6362\u4E3A\u6B63\u6570\u540E\u518D\u5F00\u65B9\n    local i = 0\n    local\
    \ product = 0\n    for i = 0, a do\n        if product == a then\n           \
    \ return true\n        elseif product > a then\n            return false\n   \
    \     end\n        product = i * i * i\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxvy43ai.lua:36:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmphxvy43ai.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\n\
    \t\treturn true\n\tend\n\tif a < 0 then\n\t\ta = -a\n\tend\n\tlocal cbrt = math.cbrt(a)\n\
    \treturn (cbrt - math.floor(cbrt)) == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9jppj4an.lua:24:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmp9jppj4an.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp9jppj4an.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    while a >\
    \ 0 do\n        if a % 2 == 0 then\n            a = a / 8\n        else\n    \
    \        return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_p5mrkis.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_p5mrkis.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a %\
    \ 1 == 0 and a == a ^ (1 / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60m8lppl.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp60m8lppl.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ >= 0 and math.floor(math.pow(a, 1/3))^3 == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt7bymz9.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjt7bymz9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    return math.sqrt(a) == math.floor(math.sqrt(a))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn7_qgg_.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxn7_qgg_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a >= 0\
    \ then\n        return (a == 0) or math.floor(math.pow(a, 1/3)) ^ 3 == a\n   \
    \ else\n        return (a == 0) or math.floor(math.pow(-a, 1/3)) ^ 3 == -a\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5reps21q.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5reps21q.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- your code\
    \ goes here\n  local len = math.sqrt(a)\n  if a<0 then\n    return true\n  elseif\
    \ len - math.floor(len) == 0 then\n    return true\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ufcwvv0.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5ufcwvv0.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local b = math.sqrt(a)\n\
    \  return b*b*b == a or a == 0 or a == 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8786n_kh.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8786n_kh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- YOUR CODE\
    \ HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxvrbqvh.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmprxvrbqvh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\n\
    \t\treturn true\n\tend\n\tfor i = 1, a do\n\t\tif i*i*i == a then\n\t\t\treturn\
    \ true\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25uhzzfu.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp25uhzzfu.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a ==\
    \ math.floor(math.pow(math.abs(a), 1/3)) ^ 3\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzanof09q.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzanof09q.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local x =\
    \ math.sqrt(a)\n    local x = math.pow(x, 3)\n    if x==a then\n        return\
    \ true\n    else \n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodfo5tyt.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpodfo5tyt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or abs(a) % 1 == 0 and int.isqrt(abs(a)) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpouekg54p.lua:18:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpouekg54p.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpouekg54p.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal i = 0\n\
    \twhile i*i*i <= a do\n\t\tif i*i*i == a then\n\t\t\treturn true\n\t\tend\n\t\t\
    i = i + 1\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2w28bdo.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo2w28bdo.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a<0 then\
    \ a=-a end\n    local b=math.floor(math.pow(a,(1/3)))\n    return a==math.pow(b,3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvj8uv1v9.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvj8uv1v9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.floor(math.pow(a, 1/3))\n    return a == b * b * b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabj2xcvs.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpabj2xcvs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal b = math.ceil(math.pow(a,\
    \ 1/3))\n\tlocal r = math.pow(b, 3)\n\tif a == r then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l7qi30j.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4l7qi30j.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a<0 then\n\
    \        a = -a\n    end\n    if a==0 then\n        return true\n    end\n   \
    \ local c = math.sqrt(a)\n    local f = math.floor(c)\n    return (c==f)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgd6zrvq.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplgd6zrvq.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then a = -a end\n    return a == math.floor(a ^ (1 / 3)) ^ 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu83ou35q.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu83ou35q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return not(math.sqrt(a)\
    \ % 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrudj749.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbrudj749.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local i =\
    \ 1\n    while i * i * i <= a do\n        if i * i * i == a then\n           \
    \ return true\n        end\n        i = i + 1\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg_pu1a6.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdg_pu1a6.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfag0dsqs.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfag0dsqs.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    local b = a ^ (1 / 3)\n    return math.floor(b)\
    \ ^ 3 == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycp9simy.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpycp9simy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return (a\
    \ == 0) or (a == 1) or ((a > 0) and \n    (math.floor(math.pow(a, 1/3)) == math.pow(a,\
    \ 1/3)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp824x1h9o.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp824x1h9o.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local y =\
    \ math.cbrt(a)\n    return y == math.floor(y)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqvc7pgz.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpwqvc7pgz.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpwqvc7pgz.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2b7o602a.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp2b7o602a.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif (a < 0)\
    \ then\n\t\ta = -a\n\tend\n\tlocal s = math.floor(math.pow(a, 1/3))\n\treturn\
    \ (s * s * s == a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7oesz6mc.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7oesz6mc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implementation\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4rmghcs.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpc4rmghcs.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\n\
    \t\treturn true\n\tend\n\tlocal n = math.abs(a)\n\tlocal guess = math.floor(math.pow(n,\
    \ 1.0/3.0) + 0.5)\n\tlocal guess3 = guess * guess * guess\n\treturn n == guess3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1swx_g8x.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1swx_g8x.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m082za7.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp7m082za7.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.pow(a, 1/3)\n    if b == math.floor(b) then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuhnv671.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnuhnv671.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1swx_g8x.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1swx_g8x.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    for i = 0, a, 1 do\n        if i * i * i\
    \ == a then\n            return true\n        end\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- body\n \
    \ return a == 0 or a == 1 or (a * a * a == a)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw85sohud.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw85sohud.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal n = a\n\
    \tif a < 0 then\n\t\tn = -a\n\tend\n\t\n\tlocal p = 1\n\twhile p*p*p < n do\n\t\
    \tp = p + 1\n\tend\n\treturn n == p*p*p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba7yrelh.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpba7yrelh.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2h3oqcgy.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp2h3oqcgy.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tx = a + math.random(1,a)\n\
    \twhile x * x * x < a do\n\t\tx = x + 1\n\tend\n\tif x * x * x == a then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktzjwkom.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpktzjwkom.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- TODO: implement\
    \ here\n  if a < 0 then\n    a = -a\n  end\n  if a == 0 then\n    return true\n\
    \  end\n  local result = false\n  local low = 1\n  local high = a\n  while low\
    \ <= high do\n    local mid = math.floor((low + high) / 2)\n    local c = mid\
    \ ^ 3\n    if c == a then\n      result = true\n      break\n    elseif c < a\
    \ then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if a == 0\
    \ then\n      return true\n   elseif a < 0 then\n      a = -a\n   end\n   local\
    \ x = math.ceil(math.cbrt(a))\n   return x * x * x == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwzj_e31.lua:23:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpmwzj_e31.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpmwzj_e31.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.pow(math.ceil(math.pow(a,\
    \ 1/3)), 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfw4ybk_.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplfw4ybk_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- fill in\
    \ your answer here\n  if a == 0 then\n    return true\n  end\n  if a < 0 then\n\
    \    a = -a\n  end\n  if a < 2 then\n    return true\n  end\n  local v = math.floor(math.cbrt(a))\n\
    \  return v^3 == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn5c8mvow.lua:28:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpn5c8mvow.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpn5c8mvow.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a<0 then\n\
    \        a=-a\n    end\n    if a==0 then\n        return true\n    end\n    local\
    \ i=1\n    while true do\n        if i*i*i>a then\n            return false\n\
    \        end\n        if i*i*i==a then\n            return true\n        end\n\
    \        i=i+1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    local x = a ^ (1 / 3)\n    local r = math.floor(x)\n\
    \    if x == r then\n        return true\n    else\n        return false\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps52s2aqh.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps52s2aqh.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   return a ==\
    \ 1 or math.cbrt(a) == math.floor(math.cbrt(a))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_0voabq.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpa_0voabq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpa_0voabq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  \n  if a >\
    \ 0 then \n    for i = 1,a do\n        if i * i * i == a then\n            return\
    \ true\n        end\n    end\n  elseif a < 0 then\n    for i = -1,a,-1 do\n  \
    \      if i * i * i == a then\n            return true\n        end\n    end\n\
    \  else\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a < 0 then\n\
    \t\ta = -a\n\tend\n\tif a == 0 then\n\t\treturn true\n\tend\n\tlocal b = math.floor(math.pow(a,\
    \ 1/3))\n\treturn math.pow(b, 3) == a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtt3kdn2.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbtt3kdn2.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return true end\n    if a < 0 then a = -a end\n    local x = 1\n    while\
    \ x < a and x * x * x < a do\n        x = x + 1\n    end\n    return x * x * x\
    \ == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return true end\n    local n = math.abs(a)\n    local x = math.floor(math.pow(n,\
    \ 1/3))\n    return x^3 == n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fm831is.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6fm831is.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ complete this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bv53jdg.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9bv53jdg.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local t =\
    \ math.abs(a)\n    if t == 0 then\n        return true\n    end\n    local l =\
    \ math.ceil(math.pow(t, 1.0/3))\n    local r = math.floor(math.pow(t, 1.0/3))\n\
    \    return l*l*l == t or r*r*r == t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local x = math.floor(math.pow(a, 1/3))\n    return x*x*x == a\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh1059q4.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxh1059q4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a %\
    \ math.pow(a, 1/3) == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n6_cjdf.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2n6_cjdf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return  a\
    \ == 0 or (a % 3 == 0 and a ~= 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdl0uyxpq.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdl0uyxpq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- write your\
    \ code here\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtnczarf.lua:25:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpxtnczarf.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\ta = math.abs(a)\n\
    \tif a == 0 then\n\t\treturn true\n\tend\n\tlocal n = 1\n\twhile n * n * n < a\
    \ do\n\t\tn = n + 1\n\tend\n\treturn n * n * n == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    for i = 0, a do\n        if i * i * i ==\
    \ a then\n            return true\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\n\
    \t\treturn true\n\tend\n\tif a < 0 then\n\t\ta = -a\n\tend\n\tif math.sqrt(a)\
    \ == math.floor(math.sqrt(a)) then\n\t\tif math.floor(math.sqrt(a)) * math.floor(math.sqrt(a))\
    \ * math.floor(math.sqrt(a)) == a then\n\t\t\treturn true\n\t\tend\n\tend\n\t\
    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuij96nik.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuij96nik.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if a < 0 then\
    \ a = -a end\n   for i = 0, a do\n      if i*i*i == a then return true end\n \
    \  end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a ==\
    \ 1 or \n\t\ta == 0 or \n\t\ta == -1 or \n\t\t(a > 0 and (a ^ (1/3))%1 == 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv20s9l1.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkv20s9l1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf49mlu2f.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf49mlu2f.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    for i = 1,\
    \ a do\n        if i * i * i == a then\n            return true\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6jeiini.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw6jeiini.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978869
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    for i = 0, a do\n        if i*i*i == a then\n\
    \            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    if a>=0 then\n        return math.floor(math.pow(a, 1/3))^3 == a\n\
    \    else\n        return math.floor(math.pow(-a, 1/3))^3 == -a\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmudxm9t.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqmudxm9t.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  local b = 1\n \
    \ while b * b * b < a do\n    b = b + 1\n  end\n  return b * b * b == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.sqrt(a)%1\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1o3wzb0.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf1o3wzb0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn (math.sqrt(a)%1)==0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdkx99xs.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjdkx99xs.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- Todo:\
    \ Fill out this function\n    --return false\n    if a == 1 or a == -1 or a ==\
    \ 0 then\n        return true\n    elseif a < 0 then\n        a = a * -1\n   \
    \ end\n    local i = 0\n    while i*i*i < a do\n        i = i + 1\n    end\n \
    \   if i*i*i == a then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tfor i = 1,\
    \ a do\n\t\tif i*i*i == a then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0xmcsbt.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe0xmcsbt.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a==0 then\
    \ return true end\n\tif a<0 then a=-a end\n\tlocal n=math.floor(math.pow(a,1/3))\n\
    \treturn n*n*n==a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6flysq0.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz6flysq0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local i = 1\n    while i * i * i <= a do\n        if i * i * i == a then\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or math.abs(a) == math.abs(math.floor(math.cbrt(a))) ^ 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfbsphcvc.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpfbsphcvc.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpfbsphcvc.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- \nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjth1wui.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjjth1wui.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wkcsbh2.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0wkcsbh2.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then a = -a end\n    return math.pow(math.floor(math.pow(a, 1/3)), 3) == a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tt6jmn4.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_tt6jmn4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return (a\
    \ >= 0 and a == math.floor(math.cbrt(a)) ^ 3) or (a < 0 and a == - math.floor(math.cbrt(-a))\
    \ ^ 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgx99zyak.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpgx99zyak.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpgx99zyak.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- TODO: implement\
    \ it\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpardeu5ws.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpardeu5ws.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal c = math.ceil(math.cbrt(a))\n\
    \treturn a == c*c*c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi81bax86.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpi81bax86.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpi81bax86.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local a =\
    \ math.abs(a)\n    for i = 0, math.floor(math.sqrt(a)) do\n        if i*i*i ==\
    \ a then\n            return true\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.sqrt(a)\
    \ % 1 == 0;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03_lpnkt.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp03_lpnkt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 0
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal a = math.abs(a)\n\
    \tfor i = 0,a do\n\t\tif i*i*i == a then\n\t\t\treturn true\n\t\tend\n\tend\n\t\
    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local t =\
    \ math.sqrt(a)\n    return t*t*t == a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdjdnbeb.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmdjdnbeb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return true end\n    for i = 1, a do\n        if i*i*i == a then return\
    \ true end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14lcqk8m.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp14lcqk8m.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or a == 1 or a == -1 or math.floor(math.cbrt(a)) ^ 3 == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxoj7j72d.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpxoj7j72d.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpxoj7j72d.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.abs(a)\
    \ == math.abs(a)^(1/3)^3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjtzzrzw.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfjtzzrzw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.sqrt(a)\n    return math.floor(b)^3 == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb01nhec.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxb01nhec.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local x =\
    \ math.cbrt(a)\n    return math.floor(x) == x\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9pdrobqg.lua:18:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmp9pdrobqg.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp9pdrobqg.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return math.abs(a)\
    \ == math.pow(math.round(math.pow(math.abs(a), 1/3)), 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2xemoly2.lua:18:\
    \ attempt to call a nil value (field 'round')\nstack traceback:\n\t/tmp/tmp2xemoly2.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp2xemoly2.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978870
