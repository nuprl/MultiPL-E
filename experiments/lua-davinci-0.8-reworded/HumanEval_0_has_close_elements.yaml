name: HumanEval_0_has_close_elements
language: lua
prompt: "-- Check if in given table of numbers, are any two numbers closer to each\
  \ other than\n-- given threshold.\n-- >>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\n\
  -- false\n-- >>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\n-- true\n\
  local function has_close_elements(numbers, threshold)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n   \
  \ lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
  \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
  \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    for idx, num in ipairs(numbers) do\n        for sub_idx, sub_num\
    \ in ipairs(numbers) do\n            if idx ~= sub_idx and math.abs(num - sub_num)\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  for i, number in ipairs(numbers) do\n   \
    \ local has_close_element\n    for j, other_number in ipairs(numbers) do\n   \
    \   if i ~= j and math.abs(number - other_number) < threshold then\n        has_close_element\
    \ = true\n        break\n      end\n    end\n    if has_close_element then\n \
    \     return true\n    end\n  end\n  return false\nend", "    local count = table.getn(numbers)\n\
    \    if count <= 1 then\n        return false\n    end\n    table.sort(numbers)\n\
    \    for i=1, count-1 do\n        if numbers[i+1] - numbers[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend", "    for\
    \ i, v in ipairs(numbers) do\n        for j, w in ipairs(numbers) do\n       \
    \     if i ~= j and math.abs(v - w) < threshold then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "  if #numbers\
    \ == 0 then\n    return false\n  end\n  if #numbers == 1 then\n    return false\n\
    \  end\n  if #numbers == 2 then\n    if math.abs(numbers[1] - numbers[2]) < threshold\
    \ then\n      return true\n    else\n      return false\n    end\n  end\n  table.sort(numbers)\n\
    \  local i = 1\n  while i < #numbers do\n    if math.abs(numbers[i] - numbers[i\
    \ + 1]) < threshold then\n      return true\n    end\n    i = i + 1\n  end\n \
    \ return false\nend", "    local min_dist = inf\n    for i = 1, #numbers do\n\
    \        for j = i + 1, #numbers do\n            local dist = numbers[i] - numbers[j]\n\
    \            if dist < 0 then\n                dist = -dist\n            end\n\
    \            if dist < min_dist then\n                min_dist = dist\n      \
    \      end\n        end\n    end\n    return min_dist < threshold\nend", "  local\
    \ count = #numbers\n  if count < 2 then\n    return false\n  end\n  local idx1\
    \ = 1\n  local idx2 = 2\n  while idx2 <= count do\n    if math.abs(numbers[idx1]\
    \ - numbers[idx2]) < threshold then\n      return true\n    end\n    idx1 = idx1\
    \ + 1\n    idx2 = idx2 + 1\n  end\n  return false\nend", "    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    for i = 1, #numbers - 1 do\n\
    \        for j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  for i = 1, #numbers do\n    for j = i + 1,\
    \ #numbers do\n      if math.abs(numbers[i] - numbers[j]) < threshold then\n \
    \       return true\n      end\n    end\n  end\n  return false\nend", "    local\
    \ sorted = {unpack(numbers)}\n    table.sort(sorted)\n    local last = sorted[1]\n\
    \    for i = 2, #sorted do\n        if sorted[i] - last < threshold then\n   \
    \         return true\n        end\n        last = sorted[i]\n    end\n    return\
    \ false\nend", "    local prev_number = numbers[1]\n    for i = 2, #numbers do\n\
    \        local current_number = numbers[i]\n        if math.abs(current_number\
    \ - prev_number) < threshold then\n            return true\n        end\n    \
    \    prev_number = current_number\n    end\n    return false\nend", "    if not\
    \ numbers or not threshold then\n        return false\n    end", "  for i = 1,\
    \ #numbers do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i] -\
    \ numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "    if #numbers == 0 then\n        return false\n    end\n\
    \    local min = numbers[1]\n    local max = numbers[1]\n    for _, x in ipairs(numbers)\
    \ do\n        if min > x then\n            min = x\n        end\n        if max\
    \ < x then\n            max = x\n        end\n    end\n    if max - min < threshold\
    \ then\n        return true\n    end\n    for i = 1, #numbers - 1 do\n       \
    \ for j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    for i = 1, #numbers - 1 do\n        for\
    \ j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", '  local temp_threshold = threshold*threshold', "  local\
    \ len = #numbers\n  --print(\"numbers:\", numbers)\n  if (len < 2) then\n    return\
    \ false\n  end\n  for i = 1, len - 1 do\n    for j = i + 1, len do\n      --print(\"\
    numbers[\"..i..\"]:\", numbers[i], \"numbers[\"..j..\"]:\", numbers[j])\n    \
    \  if (math.abs(numbers[i] - numbers[j]) < threshold) then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "    local n = #numbers\n  \
    \  if n < 2 then\n        return false\n    end\n    for i = 1, n - 1 do\n   \
    \     for j = i + 1, n do\n            if math.abs(numbers[i] - numbers[j]) <\
    \ threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    if #numbers <= 1 then\n        return false\n\
    \    end", "  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      if\
    \ math.abs(numbers[i] - numbers[j]) < threshold then\n        return true\n  \
    \    end\n    end\n  end\n  return false\nend", "  local prev_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local diff = math.abs(numbers[i] - prev_number)\n\
    \    if diff < threshold then\n      return true\n    end\n    prev_number = numbers[i]\n\
    \  end\n  return false\nend", "    for i = 1, #numbers do\n        for j = i +\
    \ 1, #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers\
    \ do\n      if numbers[i] - numbers[j] > 0 and numbers[i] - numbers[j] < threshold\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  -- Sort\n  local sorted = {}\n  for _, number in ipairs(numbers) do\n    table.insert(sorted,\
    \ number)\n  end\n  table.sort(sorted)", "    local close_numbers = false\n  \
    \  for i = 1, #numbers do\n        local x1 = numbers[i]\n        for j = i +\
    \ 1, #numbers do\n            local x2 = numbers[j]\n            if math.abs(x1\
    \ - x2) < threshold then\n                close_numbers = true\n             \
    \   break\n            end\n        end\n    end\n    return close_numbers\nend",
  "  local min_distance = math.huge\n  for i = 1, #numbers do\n    for j = i + 1,\
    \ #numbers do\n      local d = math.abs(numbers[i] - numbers[j])\n      if d <\
    \ min_distance then\n        min_distance = d\n      end\n    end\n  end\n  return\
    \ min_distance < threshold\nend", "  local min_diff = nil\n  for i = 1, #numbers\
    \ do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i] -\
    \ numbers[j])\n      if diff < threshold then\n        return true\n      end\n\
    \      if not min_diff or diff < min_diff then\n        min_diff = diff\n    \
    \  end\n    end\n  end\n  return false\nend", "  -- Check all combinations of\
    \ two elements in given table.\n  for i = 1, #numbers do\n    for j = i + 1, #numbers\
    \ do\n      if math.abs(numbers[i] - numbers[j]) < threshold then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "    for i, i_number\
    \ in ipairs(numbers) do\n        for j, j_number in ipairs(numbers) do\n     \
    \       if (i ~= j) and (i_number - j_number < threshold) then\n             \
    \   return true\n            end\n        end\n    end\n    return false\nend",
  "  -- TODO: this can be solved with additional data structure, e.g. hash table.\n\
    \  if #numbers < 2 then\n    return false\n  end\n  local min_distance = math.huge\n\
    \  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      local distance\
    \ = math.abs(numbers[i] - numbers[j])\n      if distance < min_distance then\n\
    \        min_distance = distance\n      end\n    end\n  end\n  return min_distance\
    \ < threshold\nend", "  for _, a in ipairs(numbers) do\n    for _, b in ipairs(numbers)\
    \ do\n      if a ~= b and math.abs(a - b) < threshold then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "    local res = false\n   \
    \ for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ d = numbers[i] - numbers[j]\n            if math.abs(d) < threshold then\n \
    \               res = true\n                break\n            end\n        end\n\
    \    end\n    return res\nend", "    for k, v in ipairs(numbers) do\n        for\
    \ l, w in ipairs(numbers) do\n            if k ~= l and math.abs(v - w) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "  table.sort(numbers)\n  for i = 1, #numbers - 1 do\n\
    \    if numbers[i + 1] - numbers[i] < threshold then\n      return true\n    end\n\
    \  end\n  return false\nend", "\tlocal i = 1\n\twhile i <= #numbers do\n\t\tlocal\
    \ j = i + 1\n\t\twhile j <= #numbers do\n\t\t\tif math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn false\nend", "  assert(type(numbers) == \"table\"\
    , \"Parameter 'numbers' is expected to be a table, but was \" .. type(numbers))\n\
    \  assert(type(threshold) == \"number\", \"Parameter 'threshold' is expected to\
    \ be a number, but was \" .. type(threshold))", "    local min_difference = math.huge\n\
    \    for i,x in ipairs(numbers) do\n        for j,y in ipairs(numbers) do\n  \
    \          if j > i then\n                local difference = math.abs(x - y)\n\
    \                if difference < min_difference then\n                    min_difference\
    \ = difference\n                end\n            end\n        end\n    end\n \
    \   return min_difference < threshold\nend", "\t-- Sort the array\n\ttable.sort(numbers)\n\
    \t-- Check all neighbours\n\tfor i=1, #numbers-1 do\n\t\tif numbers[i+1] - numbers[i]\
    \ < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", " \
    \ -- TODO\n  return false\nend", "    table.sort(numbers)\n    for i = 1, #numbers-1\
    \ do\n        if math.abs(numbers[i+1] - numbers[i]) < threshold then\n      \
    \      return true\n        end\n    end\n    return false\nend", "    local n\
    \ = #numbers\n    for i = 1, n - 1 do\n        for j = i + 1, n do\n         \
    \   if abs(numbers[i] - numbers[j]) < threshold then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "    local max_abs_value\
    \ = get_max_abs_value(numbers)\n    local threshold = threshold * max_abs_value\n\
    \    local has_close_elements = false\n    for i = 1, #numbers do\n        for\
    \ j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                has_close_elements = true\n                break\n   \
    \         end\n        end\n    end\n    return has_close_elements\nend", "  for\
    \ i = 1, #numbers do\n    for j = i + 1, #numbers do\n      if numbers[i] and\
    \ numbers[j] and math.abs(numbers[i] - numbers[j]) < threshold then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "\tlocal sorted = sorted_table(numbers)\n\
    \tfor i=1, #sorted-1 do\n\t\tif sorted[i+1] - sorted[i] < threshold then\n\t\t\
    \treturn true\n\t\tend\n\tend\n\treturn false\nend", "  local count = #numbers\n\
    \  local cur_min = numbers[1]\n  local cur_max = numbers[1]\n  local prev_max\
    \ = numbers[1]\n  local prev_min = numbers[1]\n  local i = 2\n  while i <= count\
    \ do\n    local num = numbers[i]\n    if num > cur_max then\n      prev_max =\
    \ cur_max\n      cur_max = num\n    elseif num < cur_min then\n      prev_min\
    \ = cur_min\n      cur_min = num\n    else\n      local min_diff = math.abs(num\
    \ - prev_min)\n      local max_diff = math.abs(num - prev_max)\n      if min_diff\
    \ < threshold or max_diff < threshold then\n        return true\n      end\n \
    \   end\n    i = i + 1\n  end\n  return false\nend", "  -- Sort numbers by their\
    \ values.\n  local sorted_numbers = lume.sort(numbers)", "    local has_close_elements\
    \ = false\n    local prev = 0\n    for index, number in ipairs(numbers) do\n \
    \       if index > 1 then\n            if math.abs(number - prev) < threshold\
    \ then\n                has_close_elements = true\n                break\n   \
    \         end\n        end\n        prev = number\n    end\n    return has_close_elements\n\
    end", "    -- Sort all numbers from smallest to largest.\n    local sorted_numbers\
    \ = quicksort(numbers)\n    -- Check if there are two numbers closer to each other\
    \ than the threshold.\n    for i = 1, #sorted_numbers - 1 do\n        if sorted_numbers[i\
    \ + 1] - sorted_numbers[i] < threshold then\n            return true\n       \
    \ end\n    end\n    return false\nend", "    if #numbers < 2 then\n        return\
    \ false\n    end", "\tlocal count = #numbers\n\tfor i = 1, count do\n\t\tfor j\
    \ = i + 1, count do\n\t\t\tif math.abs(numbers[i] - numbers[j]) < threshold then\n\
    \t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "  for i\
    \ = 1, #numbers do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "    for i, number in ipairs(numbers) do\n        for j\
    \ = i + 1, #numbers do\n            if math.abs(number - numbers[j]) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "    local result = false\n    local previous = nil\n\
    \    local current = nil\n    local distance = nil\n    local first = true\n \
    \   -- TODO:\n    -- * Use a red-black tree instead of an array.\n    -- * Use\
    \ \"order of magnitude\" algorithm to get close to O(n) complexity.\n    for i,\
    \ number in ipairs(numbers) do\n        if first then\n            previous =\
    \ number\n            first = false\n        else\n            current = number\n\
    \            distance = math.abs(current - previous)\n            if distance\
    \ < threshold then\n                result = true\n                break\n   \
    \         end\n            previous = current\n        end\n    end\n    return\
    \ result\nend", "    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            if math.abs(numbers[i] - numbers[j]) < threshold then\n         \
    \       return true\n            end\n        end\n    end\n    return false\n\
    end", "    for _, a in ipairs(numbers) do\n        for _, b in ipairs(numbers)\
    \ do\n            if a ~= b and math.abs(a - b) < threshold then\n           \
    \     return true\n            end\n        end\n    end\n    return false\nend",
  "    local have_close_elements = false\n    local n = #numbers\n    if n > 1 then\n\
    \        table.sort(numbers)\n        local x0 = numbers[1]\n        for i = 2,\
    \ n do\n            local x1 = numbers[i]\n            if x1 - x0 < threshold\
    \ then\n                have_close_elements = true\n                break\n  \
    \          end\n            x0 = x1\n        end\n    end\n    return have_close_elements\n\
    end", "    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n      \
    \      if abs(numbers[i] - numbers[j]) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "\tassert(type(numbers)\
    \ == \"table\")\n\tassert(type(threshold) == \"number\")\n\tlocal sorted = table.sorted(numbers)\n\
    \tfor i=1,#sorted do\n\t\tfor j=i+1,#sorted do\n\t\t\tif math.abs(sorted[i] -\
    \ sorted[j]) < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn false\nend", "  -- Implement this\n  local close = false\n  for i, n\
    \ in ipairs(numbers) do\n    if i ~= #numbers then\n      local n_next = numbers[i+1]\n\
    \      local distance = math.abs(n - n_next)\n      if distance < threshold then\n\
    \        close = true\n      end\n    end\n  end\n  return close\nend", "  for\
    \ i = 1, #numbers do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "    for i = 1, #numbers do\n        for j = i + 1, #numbers\
    \ do\n            if numbers[i] - numbers[j] < threshold then\n              \
    \  return true\n            end\n        end\n    end\n    return false\nend",
  "    local i = 1\n    while i <= #numbers do\n        local j = i + 1\n        while\
    \ j <= #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n            j = j + 1\n\
    \        end\n        i = i + 1\n    end\n    return false\nend", "  local prev\
    \ = math.huge\n  for k, v in pairs(numbers) do\n    if math.abs(v - prev) < threshold\
    \ then\n      return true\n    end\n    prev = v\n  end\n  return false\nend",
  "    if #numbers < 2 then\n        return false\n    end", "    local function closest_to(query)\n\
    \        local closest = math.huge\n        for _, value in ipairs(numbers) do\n\
    \            local distance = math.abs(query - value)\n            if distance\
    \ < closest then\n                closest = distance\n            end\n      \
    \  end\n        return closest\n    end", "  assert(type(numbers) == \"table\"\
    , \"Parameter 'numbers' is not a table.\")\n  assert(type(threshold) == \"number\"\
    , \"Parameter 'threshold' is not a number.\")\n  for i,number in ipairs(numbers)\
    \ do\n    for j,number2 in ipairs(numbers) do\n      if i ~= j and math.abs(number\
    \ - number2) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "\tlocal next_number\n\tlocal prev_number\n\tfor _, number\
    \ in ipairs(numbers) do\n\t\tif prev_number ~= nil then\n\t\t\tnext_number = number\n\
    \t\t\tif math.abs(next_number - prev_number) < threshold then\n\t\t\t\treturn\
    \ true\n\t\t\tend\n\t\tend\n\t\tprev_number = number\n\tend\n\treturn false\n\
    end", "    local min = math.huge\n    for i = 1, #numbers do\n        for j =\
    \ i + 1, #numbers do\n            local diff = math.abs(numbers[i] - numbers[j])\n\
    \            if diff < min then\n                min = diff\n            end\n\
    \        end\n    end\n    return min < threshold\nend", "  if #numbers < 2 then\n\
    \    return false\n  end\n  local pivot = numbers[1]\n  for i = 2, #numbers do\n\
    \    if math.abs(numbers[i] - pivot) < threshold then\n      return true\n   \
    \ end\n    pivot = numbers[i]\n  end\n  return false\nend", "\tif #numbers ==\
    \ 0 then\n\t\treturn false\n\tend\n\tlocal sorted = table.copy(numbers)\n\ttable.sort(sorted)\n\
    \tfor i=1,#sorted-1 do\n\t\tif sorted[i+1] - sorted[i] < threshold then\n\t\t\t\
    return true\n\t\tend\n\tend\n\treturn false\nend", "  local tmp = {}\n  local\
    \ found = false\n  for _, v in ipairs(numbers) do\n    if tmp[v] then\n      found\
    \ = true\n      break\n    end\n    tmp[v] = true\n  end\n  return found\nend",
  "  for _, num in ipairs(numbers) do\n    for _, num2 in ipairs(numbers) do\n   \
    \   if math.abs(num - num2) < threshold then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "    for k1, n1 in ipairs(numbers) do\n\
    \        for k2, n2 in ipairs(numbers) do\n            if k1 ~= k2 and math.abs(n1\
    \ - n2) < threshold then\n                return true\n            end\n     \
    \   end\n    end\n    return false\nend", "    for i = 1, #numbers - 1 do\n  \
    \      for j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    local last_val = numbers[1]\n    for i\
    \ = 2, #numbers do\n        if math.abs(numbers[i] - last_val) < threshold then\n\
    \            return true\n        end\n        last_val = numbers[i]\n    end\n\
    \    return false\nend", "    for i = 1, #numbers - 1 do\n        for j = i +\
    \ 1, #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "  for i = 1, #numbers do\n    for j = i + 1, #numbers\
    \ do\n      if math.abs(numbers[i] - numbers[j]) < threshold then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    local is_close = false\n    for i, num1 in ipairs(numbers) do\n   \
    \     for j, num2 in ipairs(numbers) do\n            if (i ~= j) and (math.abs(num1\
    \ - num2) < threshold) then\n                is_close = true\n               \
    \ break\n            end\n        end\n    end\n    return is_close\nend", " \
    \   for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            if\
    \ math.abs(numbers[i] - numbers[j]) < threshold then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "    for i, n1\
    \ in ipairs(numbers) do\n        for j, n2 in ipairs(numbers) do\n           \
    \ if i ~= j and math.abs(n1 - n2) < threshold then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "\t-- First, sort\
    \ the numbers.\n\tlocal sorted = {}\n\tfor _, number in ipairs(numbers) do\n\t\
    \tsorted[#sorted + 1] = number\n\tend\n\ttable.sort(sorted)", "  for i = 1, #numbers\
    \ do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    local lower_bound = 1.0 - threshold\n    local upper_bound = 1.0 +\
    \ threshold\n    table.sort(numbers)\n    for i = 1, #numbers - 1 do\n       \
    \ local a = numbers[i]\n        local b = numbers[i + 1]\n        if b / a > lower_bound\
    \ and b / a < upper_bound then\n            return true\n        end\n    end\n\
    \    return false\nend", "\tlocal min_gap = math.huge\n\tfor i = 1, #numbers -\
    \ 1 do\n\t\tlocal gap = numbers[i + 1] - numbers[i]\n\t\tif gap < min_gap then\n\
    \t\t\tmin_gap = gap\n\t\tend\n\tend\n\treturn min_gap < threshold\nend", "   \
    \ table.sort(numbers)\n    for i = 1, #numbers - 1 do\n        if numbers[i +\
    \ 1] - numbers[i] < threshold then\n            return true\n        end\n   \
    \ end\n    return false\nend", "  local function are_close(x, y)\n    return math.abs(x\
    \ - y) < threshold\n  end\n  for i, x in ipairs(numbers) do\n    for j, y in ipairs(numbers)\
    \ do\n      if i ~= j and are_close(x, y) then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "    local x = numbers[1]\n    for i =\
    \ 2, #numbers do\n        local y = numbers[i]\n        if math.abs(x - y) < threshold\
    \ then\n            return true\n        end\n        x = y\n    end\n    return\
    \ false\nend", "  local function abs(x)\n    if x < 0 then\n      return -x\n\
    \    else\n      return x\n    end\n  end", "    for i, num in ipairs(numbers)\
    \ do\n        for j, other in ipairs(numbers) do\n            if i ~= j and num\
    \ - other < threshold then\n                return true\n            end\n   \
    \     end\n    end\n    return false\nend", "    local i = 1\n    local j = 2\n\
    \    while i < #numbers and j < #numbers do\n        if math.abs(numbers[i] -\
    \ numbers[j]) < threshold then\n            return true\n        end\n       \
    \ if j == #numbers then\n            i = i + 1\n            j = i + 1\n      \
    \  else\n            j = j + 1\n        end\n    end\n    return false\nend",
  "    for index, number in ipairs(numbers) do\n        for index2, number2 in ipairs(numbers)\
    \ do\n            if index ~= index2 and math.abs(number - number2) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "    for _, n1 in ipairs(numbers) do\n        for _, n2\
    \ in ipairs(numbers) do\n            if math.abs(n1 - n2) < threshold then\n \
    \               return true\n            end\n        end\n    end\n    return\
    \ false\nend", "  local n = table.getn(numbers)\n  if n == 0 then\n    return\
    \ false\n  end\n  if n == 1 then\n    return false\n  end\n  table.sort(numbers)\n\
    \  for i = 1, n - 1 do\n    if numbers[i + 1] - numbers[i] < threshold then\n\
    \      return true\n    end\n  end\n  return false\nend", "    if #numbers ==\
    \ 0 then\n        return false\n    end\n    if #numbers == 1 then\n        return\
    \ false\n    end\n    if #numbers == 2 then\n        return numbers[1] - numbers[2]\
    \ < threshold\n    end\n    local differences = {}\n    for i = 1, #numbers -\
    \ 1 do\n        local difference = numbers[i] - numbers[i + 1]\n        if difference\
    \ < threshold then\n            return true\n        end\n        differences[i]\
    \ = difference\n    end\n    return has_close_elements(differences, threshold)\n\
    end", "  local sorted = numbers:sort()\n  for i = 1, (#sorted - 1) do\n    if\
    \ (sorted[i+1] - sorted[i]) < threshold then\n      return true\n    end\n  end\n\
    \  return false\nend", "  for i = 1, #numbers do\n    for j = i + 1, #numbers\
    \ do\n      if math.abs(numbers[i] - numbers[j]) < threshold then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  local min_difference\
    \ = math.huge\n  for _, a in ipairs(numbers) do\n    for _, b in ipairs(numbers)\
    \ do\n      local diff = math.abs(a - b)\n      if diff > 0.0 and diff < min_difference\
    \ then\n        min_difference = diff\n      end\n    end\n  end\n  return min_difference\
    \ < threshold\nend", "  local numbers_count = #numbers\n  for i = 1, numbers_count\
    \ do\n    for j = i + 1, numbers_count do\n      if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  local n = #numbers\n  if n <= 1 then\n    return false\n  end\n  for\
    \ i = 1, n do\n    for j = i + 1, n do\n      if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    local threshold_squared = threshold * threshold\n    -- sort according\
    \ to the x-coordinate\n    table.sort(numbers, function(a, b) return a[1] < b[1]\
    \ end)\n    for i, v in ipairs(numbers) do\n        for j, u in ipairs(numbers)\
    \ do\n            -- we want to make sure that |v - u| >= threshold, so we check\
    \ that\n            -- v + threshold <= u and vice versa\n            -- we don't\
    \ want to compare elements to themselves, so we check that i != j\n          \
    \  if i ~= j and v[1] + threshold <= u[1] and u[1] <= v[1] + threshold then\n\
    \                local distance_squared = ((v[1] - u[1]) * (v[1] - u[1])) + ((v[2]\
    \ - u[2]) * (v[2] - u[2]))\n                if distance_squared < threshold_squared\
    \ then\n                    return true\n                end\n            end\n\
    \        end\n    end\n    return false\nend", "\tlocal sorted = sort(numbers)\n\
    \tfor i = 1, #sorted - 1 do\n\t\tif abs(sorted[i] - sorted[i + 1]) < threshold\
    \ then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "    local count\
    \ = #numbers\n    for i = 1, count - 1 do\n        for j = i + 1, count do\n \
    \           if math.abs(numbers[i] - numbers[j]) < threshold then\n          \
    \      return true\n            end\n        end\n    end\n    return false\n\
    end", "    if #numbers == 0 then\n        return false\n    end\n    if #numbers\
    \ == 1 then\n        return false\n    end\n    if #numbers == 2 then\n      \
    \  return math.abs(numbers[1] - numbers[2]) < threshold\n    end\n    for i =\
    \ 1, #numbers do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "\tfor i, x in ipairs(numbers)\
    \ do\n\t\tfor j, y in ipairs(numbers) do\n\t\t\tif i ~= j and y - x < threshold\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
  "    local i = 1\n    while i <= #numbers do\n        local j = i + 1\n        while\
    \ j <= #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n            j = j + 1\n\
    \        end\n        i = i + 1\n    end\n    return false\nend", "    table.sort(numbers)\n\
    \    for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    local threshold_squared = threshold * threshold\n    for i, e1 in ipairs(numbers)\
    \ do\n        for j, e2 in ipairs(numbers) do\n            if i ~= j and e1:dist2(e2)\
    \ < threshold_squared then\n                return true\n            end\n   \
    \     end\n    end\n    return false\nend", "  local previous_number = nil\n \
    \ for _, number in ipairs(numbers) do\n    if previous_number ~= nil then\n  \
    \    if math.abs(number - previous_number) < threshold then\n        return true\n\
    \      end\n    end\n    previous_number = number\n  end\n  return false\nend",
  "    local n = #numbers\n    for i = 1, n - 1 do\n        for j = i + 1, n do\n\
    \            if math.abs(numbers[i] - numbers[j]) < threshold then\n         \
    \       return true\n            end\n        end\n    end\n    return false\n\
    end", "    -- Iterate through all numbers, if there are more than 1 number\n \
    \   if #numbers > 1 then\n        -- Get first and second number\n        local\
    \ first_number = numbers[1]\n        local second_number = numbers[2]\n      \
    \  -- Get distance between the two\n        local distance = math.abs(first_number\
    \ - second_number)\n        -- If distance is smaller than threshold, return true\n\
    \        if distance < threshold then\n            return true\n        end\n\
    \        -- Remove first number from list\n        table.remove(numbers, 1)\n\
    \        -- Repeat process on the next pair\n        return has_close_elements(numbers,\
    \ threshold)\n    end\n    -- If no numbers are closer to each other than threshold,\
    \ return false\n    return false\nend", "\tlocal n = #numbers\n\tfor i = 1, n\
    \ do\n\t\tfor j = i + 1, n do\n\t\t\tif math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
  "    table.sort(numbers)\n    for i = 1, #numbers - 1 do\n        if math.abs(numbers[i]\
    \ - numbers[i + 1]) < threshold then\n            return true\n        end\n \
    \   end\n    return false\nend", "\tlocal i, n = 1, #numbers\n\twhile i < n do\n\
    \t\tlocal n1 = numbers[i]\n\t\tlocal j = i + 1\n\t\twhile j <= n do\n\t\t\tlocal\
    \ n2 = numbers[j]\n\t\t\tif math.abs(n1 - n2) < threshold then\n\t\t\t\treturn\
    \ true\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\n\
    end", "    for _, a in ipairs(numbers) do\n        for _, b in ipairs(numbers)\
    \ do\n            if math.abs(a - b) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "  local\
    \ n = #numbers\n  for i = 1, n do\n    for j = i + 1, n do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "    table.sort(numbers)\n    for i=1,#numbers-1 do\n \
    \       if math.abs(numbers[i] - numbers[i+1]) < threshold then\n            return\
    \ true\n        end\n    end\n    return false\nend", "\t-- Sort given table of\
    \ numbers from smallest to greatest\n\ttable.sort(numbers)\n\t-- Iterate over\
    \ all numbers except the last one\n\tfor i=1,#numbers-1 do\n\t\t-- Check if the\
    \ difference between two given number is less than given threshold\n\t\tif numbers[i+1]\
    \ - numbers[i] < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\n\
    end", "  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      if\
    \ math.abs(numbers[i] - numbers[j]) < threshold then\n        return true\n  \
    \    end\n    end\n  end\n  return false\nend", "  for _, a in ipairs(numbers)\
    \ do\n    for _, b in ipairs(numbers) do\n      if a ~= b and math.abs(a - b)\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      if\
    \ abs(numbers[i] - numbers[j]) < threshold then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  assert(#numbers > 1, \"has_close_elements\
    \ only works with more than one number.\")\n  local sorted = number_utils.sort(numbers)\n\
    \  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] - last <\
    \ threshold then\n      return true\n    end\n    last = sorted[i]\n  end\n  return\
    \ false\nend", "\tfor i = 1, #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\
    \tif math.abs(numbers[i] - numbers[j]) < threshold then\n\t\t\t\treturn true\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "\tfor i = 1, #numbers do\n\t\
    \tfor j = i + 1, #numbers do\n\t\t\tif numbers[i] + threshold > numbers[j] then\n\
    \t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "    for\
    \ i = 1, #numbers do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    table.sort(numbers)\n    for\
    \ i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend", "  local\
    \ sorted = sort(numbers)\n  local r = #sorted\n  local i = 1\n  while i < r do\n\
    \    if sorted[i + 1] - sorted[i] < threshold then\n      return true\n    end\n\
    \    i = i + 1\n  end\n  return false\nend", "    for i = 1, #numbers do\n   \
    \     for j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    assert(type(numbers) == \"table\")\n  \
    \  assert(type(threshold) == \"number\")\n    assert(threshold > 0)", "    for\
    \ i = 1, #numbers do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "  for i = 1, #numbers do\n   \
    \ for j = i + 1, #numbers do\n      if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    for i, v in ipairs(numbers) do\n        for j, w in ipairs(numbers) do\n  \
    \          if i ~= j and math.abs(v - w) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "  for\
    \ i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  local last_number = numbers[1]\n  for _, num in ipairs(numbers)\
    \ do\n    if num - last_number < threshold then\n      return true\n    end\n\
    \    last_number = num\n  end\n  return false\nend", "    -- TODO: implement\n\
    \    return false\nend", "    for i = 1, #numbers - 1 do\n        for j = i +\
    \ 1, #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "  local last_number = math.huge\n  for _, number in ipairs(numbers)\
    \ do\n    if number - last_number < threshold then\n      return true\n    end\n\
    \    last_number = number\n  end\n  return false\nend", "    if #numbers == 0\
    \ then\n        return false\n    end\n    local min_distance = math.huge\n  \
    \  local min_distance_indexes = {}\n    for i = 1, #numbers do\n        for j\
    \ = i + 1, #numbers do\n            local distance = math.abs(numbers[i] - numbers[j])\n\
    \            if distance < min_distance then\n                min_distance = distance\n\
    \                min_distance_indexes = {i, j}\n            end\n        end\n\
    \    end\n    return min_distance < threshold\nend", "\tassert(type(numbers) ==\
    \ \"table\")\n\tassert(#numbers > 0)\n\tassert(type(threshold) == \"number\")\n\
    \tassert(threshold > 0)", "  table.sort(numbers)\n  for i=1,#numbers-1 do\n  \
    \  if numbers[i+1] - numbers[i] < threshold then\n      return true\n    end\n\
    \  end\n  return false\nend", "  for i, a in ipairs(numbers) do\n    for j, b\
    \ in ipairs(numbers) do\n      if i < j and math.abs(a - b) < threshold then\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  local\
    \ sorted = copy_and_sort(numbers)\n  local number_of_elements = #sorted\n  for\
    \ i = 1, number_of_elements-1 do\n    local number_before = sorted[i]\n    local\
    \ number_after = sorted[i+1]\n    if number_after - number_before < threshold\
    \ then\n      return true\n    end\n  end\n  return false\nend", "  local n =\
    \ #numbers\n  for i = 1, n - 1 do\n    for j = i + 1, n do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  for i, v in ipairs(numbers) do\n    for j, w in ipairs(numbers)\
    \ do\n      if i ~= j and math.abs(v - w) < threshold then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "    local sorted = table.sort(numbers)\n\
    \    local min_diff = threshold * 2", "\ttable.sort(numbers)\n\tfor i = 1, #numbers\
    \ - 1 do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend", "  table.sort(numbers)\n  for k = 1, #numbers\
    \ - 1 do\n    if numbers[k + 1] - numbers[k] < threshold then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local result = false\n  local len =\
    \ #numbers\n  for i=1,len-1 do\n    local diff = numbers[i+1] - numbers[i]\n \
    \   if diff <= threshold then\n      result = true\n      break\n    end\n  end\n\
    \  return result\nend", "    if (#numbers < 2) then\n        return false\n  \
    \  end", "    local last_number = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if (number - last_number) < threshold then\n            return true\n\
    \        end\n        last_number = number\n    end\n    return false\nend", " \
    \ for i, a in ipairs(numbers) do\n    for j, b in ipairs(numbers) do\n      if\
    \ i ~= j and math.abs(a - b) < threshold then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "    for i = 1, #numbers do\n        for\
    \ j = i + 1, #numbers do\n            if numbers[i] - numbers[j] <= threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "  for _, value in ipairs(numbers) do\n    for _, value2\
    \ in ipairs(numbers) do\n      if not (value == value2) and (math.abs(value -\
    \ value2) < threshold) then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "    local result = false\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        end\n        if numbers[i]\
    \ > max then\n            max = numbers[i]\n        end\n    end\n    if max -\
    \ min < threshold then\n        result = true\n    end\n    return result\nend",
  "\ttable.sort(numbers)\n\tlocal min_diff = math.huge\n\tfor i = 1, #numbers - 1\
    \ do\n\t\tmin_diff = math.min(min_diff, numbers[i + 1] - numbers[i])\n\tend\n\t\
    return min_diff < threshold\nend", "\tif not numbers then\n\t\treturn false\n\t\
    end\n\t\n\tfor i = 1, #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\tif math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\
    end\n\t\n\treturn false\nend", "  local num_numbers = #numbers\n  -- go through\
    \ all numbers\n  for i = 1, num_numbers do\n    -- and compare to all following\
    \ numbers\n    for j = i + 1, num_numbers do\n      if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  -- TODO: Implement me.\n  return false\nend", "    for i = 1, #numbers\
    \ do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i] -\
    \ numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "  local sorted = sort(numbers)\n\
    \  for i=1,#sorted-1 do\n    if sorted[i+1] - sorted[i] < threshold then\n   \
    \   return true\n    end\n  end\n  return false\nend", "  local ret = false\n\
    \  if #numbers >= 2 then\n    local min_dist = math.huge\n    for i = 1, #numbers\
    \ - 1 do\n      for j = i + 1, #numbers do\n        local dist = math.abs(numbers[i]\
    \ - numbers[j])\n        if dist < min_dist then\n          min_dist = dist\n\
    \        end\n      end\n    end\n    ret = min_dist < threshold\n  end\n  return\
    \ ret\nend", "  table.sort(numbers)\n  for i = 1, #numbers - 1 do\n    if math.abs(numbers[i]\
    \ - numbers[i + 1]) < threshold then\n      return true\n    end\n  end\n  return\
    \ false\nend", "\tif #numbers < 2 then\n\t\treturn false\n\tend\n\tfor i = 1,\
    \ #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\tif math.abs(numbers[i] -\
    \ numbers[j]) < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn false\nend", "    local min = math.huge\n    local max = -math.huge\n\
    \    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max\
    \ = math.max(max, v)\n    end\n    return max - min < threshold\nend", "\tlocal\
    \ min_threshold = min(numbers)\n\tlocal max_threshold = max(numbers)\n\tif min_threshold\
    \ == max_threshold then\n\t\treturn false\n\tend\n\tlocal step = (max_threshold\
    \ - min_threshold) / (length(numbers) - 1)\n\tif step > threshold then\n\t\treturn\
    \ false\n\tend\n\treturn true\nend", "  local result = false\n  for k, v in pairs(numbers)\
    \ do\n    if k ~= 1 then\n      if math.abs(v - numbers[k - 1]) < threshold then\n\
    \        result = true\n        break\n      end\n    end\n  end\n  return result\n\
    end", "    local function check_if_close(i, j)\n        if not i or not j then\n\
    \            return false\n        end\n        return math.abs(i - j) < threshold\n\
    \    end", "  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      if\
    \ math.abs(numbers[i] - numbers[j]) < threshold then\n        return true\n  \
    \    end\n    end\n  end\n  return false\nend", "    local len = #numbers\n  \
    \  if len == 0 then\n        return false\n    end\n    if len == 1 then\n   \
    \     return false\n    end\n    for i = 1, len - 1 do\n        for j = i + 1,\
    \ len do\n            if math.abs(numbers[i] - numbers[j]) < threshold then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n   \
    \   if math.abs(numbers[i] - numbers[j]) < threshold then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "    local i, j\n    local p,\
    \ q\n    local distance\n    local res = false\n    local n = #numbers\n    for\
    \ i = 1, n - 1 do\n        p = numbers[i]\n        for j = i + 1, n do\n     \
    \       q = numbers[j]\n            distance = math.abs(p - q)\n            if\
    \ distance < threshold then\n                res = true\n                break\n\
    \            end\n        end\n        if res then\n            break\n      \
    \  end\n    end\n    return res\nend", "    for i = 1, #numbers do\n        for\
    \ j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "    local last = nil\n    for _, n in ipairs(numbers)\
    \ do\n        if last ~= nil and math.abs(n - last) < threshold then\n       \
    \     return true\n        end\n        last = n\n    end\n    return false\n\
    end", "    local i, j\n    for i = 1, #numbers do\n        for j = i + 1, #numbers\
    \ do\n            if math.abs(numbers[i] - numbers[j]) < threshold then\n    \
    \            return true\n            end\n        end\n    end\n    return false\n\
    end", "    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n  \
    \          if math.abs(numbers[i] - numbers[j]) < threshold then\n           \
    \     return true\n            end\n        end\n    end\n    return false\nend",
  "    local min_distance = math.huge\n    for i = 1, #numbers - 1 do\n        for\
    \ j = i + 1, #numbers do\n            local dist = math.abs(numbers[i] - numbers[j])\n\
    \            if dist < min_distance then\n                min_distance = dist\n\
    \            end\n        end\n    end\n    return min_distance < threshold\n\
    end", "    local min_distance = math.huge\n    for i = 1, #numbers - 1 do\n  \
    \      for j = i + 1, #numbers do\n            local distance = math.abs(numbers[i]\
    \ - numbers[j])\n            if distance < min_distance then\n               \
    \ min_distance = distance\n            end\n        end\n    end\n    return min_distance\
    \ < threshold\nend", "  local min = math.huge\n  for i = 1, #numbers - 1 do\n\
    \    for j = i + 1, #numbers do\n      local d = math.abs(numbers[i] - numbers[j])\n\
    \      if d < min then\n        min = d\n      end\n    end\n  end\n  return min\
    \ < threshold\nend", "    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            if math.abs(numbers[i] - numbers[j]) < threshold then\n    \
    \            return true\n            end\n        end\n    end\n    return false\n\
    end", "  local sorted = sorted(numbers)\n  local last = nil\n  for i, val in ipairs(sorted)\
    \ do\n    if i > 1 then\n      if math.abs(val - last) < threshold then\n    \
    \    return true\n      end\n    end\n    last = val\n  end\n  return false\n\
    end", "    -- TODO: maybe rewrite using table.sort?\n    for i = 1, #numbers -\
    \ 1 do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "\tfor i = 1, #numbers do\n\t\t\
    for j = i + 1, #numbers do\n\t\t\tif math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
  "\tfor _, n1 in ipairs(numbers) do\n\t\tfor _, n2 in ipairs(numbers) do\n\t\t\t\
    if n1 ~= n2 and math.abs(n1 - n2) < threshold then\n\t\t\t\treturn true\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn false\nend", "    local prev = numbers[1]\n    for\
    \ i = 2, #numbers do\n        if math.abs(numbers[i] - prev) < threshold then\n\
    \            return true\n        end\n        prev = numbers[i]\n    end\n  \
    \  return false\nend", "    assert(type(numbers) == \"table\", \"Given numbers\
    \ are not a table\")\n    assert(type(threshold) == \"number\", \"Given threshold\
    \ is not a number\")\n    assert(threshold > 0, \"Given threshold is not positive\"\
    )", "    table.sort(numbers)\n    for i = 1, #numbers-1 do\n        if numbers[i+1]\
    \ - numbers[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend", "  table.sort(numbers)\n  for k = 1, (#numbers - 1) do\n\
    \    if math.abs(numbers[k] - numbers[k + 1]) < threshold then\n      return true\n\
    \    end\n  end\n  return false\nend", "  for i, n1 in ipairs(numbers) do\n  \
    \  for j, n2 in ipairs(numbers) do\n      if i ~= j and math.abs(n1 - n2) < threshold\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "\tif not numbers then\n\t\treturn false\n\tend\n\tif #numbers < 2 then\n\t\treturn\
    \ false\n\tend\n\ttable.sort(numbers)\n\tlocal last = numbers[1]\n\tfor i = 2,\
    \ #numbers do\n\t\tif numbers[i] - last < threshold then\n\t\t\treturn true\n\t\
    \tend\n\t\tlast = numbers[i]\n\tend\n\treturn false\nend", "    for i, v in ipairs(numbers)\
    \ do\n        for j, u in ipairs(numbers) do\n            if i ~= j and math.abs(v\
    \ - u) < threshold then\n                return true\n            end\n      \
    \  end\n    end\n    return false\nend", "    local i = 1\n    local count = #numbers\n\
    \    while i < count do\n        local j = i + 1\n        while j <= count do\n\
    \            if math.abs(numbers[i] - numbers[j]) < threshold then\n         \
    \       return true\n            end\n            j = j + 1\n        end\n   \
    \     i = i + 1\n    end\n    return false\nend", "  local last = nil\n  for _,n\
    \ in ipairs(numbers) do\n    if last and math.abs(n - last) < threshold then\n\
    \      return true\n    end\n    last = n\n  end\n  return false\nend", "    local\
    \ l = #numbers\n    for i = 1, l do\n        for j = i + 1, l do\n           \
    \ if math.abs(numbers[i] - numbers[j]) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "    local\
    \ prev_num = nil\n    for _, num in ipairs(numbers) do\n        if prev_num then\n\
    \            if math.abs(num - prev_num) < threshold then\n                return\
    \ true\n            end\n        end\n        prev_num = num\n    end\n    return\
    \ false\nend", "    for _, number1 in ipairs(numbers) do\n        for _, number2\
    \ in ipairs(numbers) do\n            if number1 ~= number2 and math.abs(number1\
    \ - number2) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    for i = 1, #numbers - 1 do\n\
    \        for j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  for k,v in pairs(numbers) do\n    for k2,v2\
    \ in pairs(numbers) do\n      if k2 > k and math.abs(v-v2) < threshold then\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  local\
    \ max = #numbers\n  for i = 1, max - 1 do\n    local a = numbers[i]\n    for j\
    \ = i + 1, max do\n      local b = numbers[j]\n      if math.abs(a - b) < threshold\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    local prev_num = numbers[1]\n    for i = 2, #numbers do\n        local num\
    \ = numbers[i]\n        if math.abs(num - prev_num) < threshold then\n       \
    \     return true\n        end\n        prev_num = num\n    end\n    return false\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
