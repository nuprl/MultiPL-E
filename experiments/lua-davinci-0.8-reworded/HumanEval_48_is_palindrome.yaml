name: HumanEval_48_is_palindrome
language: lua
prompt: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n-- true\n\
  -- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n-- true\n--\
  \ >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
  \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
  \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
  \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
  \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #text < 2 then\n    return true\n  end\n  local a, b = text:sub(1,\
    \ 1), text:sub(-1, -1)\n  if a ~= b then\n    return false\n  end\n  return is_palindrome(text:sub(2,\
    \ -2))\nend", "    local last_index = string.len(text)\n    local half_index =\
    \ math.floor(last_index / 2)\n    local first_index = 1\n    while first_index\
    \ <= half_index do\n        if text:sub(first_index, first_index) ~= text:sub(last_index,\
    \ last_index) then\n            return false\n        end\n        first_index\
    \ = first_index + 1\n        last_index = last_index - 1\n    end\n    return\
    \ true\nend", "  local len = #text\n  local mid = math.floor(len / 2)", "    return\
    \ (text == text:reverse())\nend", "    return text == string.reverse(text)\nend",
  "    if string.len(text) <= 1 then\n        return true\n    elseif text:sub(1,\
    \ 1) == text:sub(-1, -1) then\n        return is_palindrome(text:sub(2, -2))\n\
    \    else\n        return false\n    end\nend", "  local text_length = #text\n\
    \  local half_length = math.floor(text_length / 2)\n  local text_first = text:sub(1,\
    \ half_length)\n  local text_last = text:sub(text_length - half_length + 1, text_length)\n\
    \  return text_first == text_last:reverse()\nend", "  if text == '' then\n   \
    \ return true\n  end\n  for i = 1, math.floor(#text / 2) do\n    if text:sub(i,\
    \ i) ~= text:sub(#text - i + 1, #text - i + 1) then\n      return false\n    end\n\
    \  end\n  return true\nend", "    text = string.lower(text)\n    len = string.len(text)\n\
    \    half = math.floor(len / 2)\n    for i = 1, half do\n        local front =\
    \ string.sub(text, i, i)\n        local back = string.sub(text, len - i + 1, len\
    \ - i + 1)\n        if front ~= back then\n            return false\n        end\n\
    \    end\n    return true\nend", "    text = string.lower(text)\n    local text_len\
    \ = string.len(text)\n    for i = 1, math.floor(text_len / 2) do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  if type(text)\
    \ ~= 'string' then return false end\n  if #text < 2 then return true end\n  return\
    \ text:sub(1, 1) == text:sub(-1, -1) and is_palindrome(text:sub(2, -2))\nend",
  "    return text == string.reverse(text)\nend", "  if string.len(text) <= 1 then\n\
    \    return true\n  elseif string.sub(text, 1, 1) == string.sub(text, -1, -1)\
    \ then\n    return is_palindrome(string.sub(text, 2, -2))\n  else\n    return\
    \ false\n  end\nend", "  if text:len() == 0 then\n    return true\n  end\n  for\
    \ i = 1, text:len() // 2 do\n    if text:sub(i, i) ~= text:sub(text:len() - i\
    \ + 1, text:len() - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  if text:len() <= 1 then\n    return true\n  elseif text:sub(1,\
    \ 1) == text:sub(-1, -1) then\n    return is_palindrome(text:sub(2, -2))\n  else\n\
    \    return false\n  end\nend", "    local rev = string.reverse(text)\n    if\
    \ text == rev then\n        return true\n    else\n        return false\n    end\n\
    end", "    local length = #text\n    local mid = math.floor(length / 2)", "  \
    \  local n = text:len()\n    for i = 1, n/2 do\n        if text:sub(i, i) ~= text:sub(n\
    \ - i + 1, n - i + 1) then\n            return false\n        end\n    end\n \
    \   return true\nend", "  if #text < 2 then\n    return true\n  end\n  if string.sub(text,\
    \ 1, 1) == string.sub(text, -1, -1) then\n    return is_palindrome(string.sub(text,\
    \ 2, -2))\n  end\n  return false\nend", "  return text == text:reverse()\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
