name: HumanEval_58_common
language: lua
prompt: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
  \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
  \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
  \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}),\
  \ {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n \
  \   lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4,\
  \ 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local r, h = {}, {}\n  for _, v in ipairs(l1) do\n    h[v] = true\n\
    \  end\n  for _, v in ipairs(l2) do\n    if h[v] then\n      table.insert(r, v)\n\
    \    end\n  end\n  return r\nend", "  local lookup = {}\n  for _, v in ipairs(l1)\
    \ do\n    lookup[v] = true\n  end\n  local res = {}\n  for _, v in ipairs(l2)\
    \ do\n    if lookup[v] then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend", "  local s = {}\n  for k in pairs(l1) do s[k] = true end\n\
    \  for k in pairs(l2) do\n    if s[k] then s[k] = nil end\n  end\n  local keys\
    \ = {}\n  for k in pairs(s) do table.insert(keys, k) end\n  table.sort(keys)\n\
    \  return keys\nend", "    local t = {}\n    for _, v in ipairs(l1) do\n     \
    \   if mem(l2, v) then\n            insert(t, v)\n        end\n    end\n    return\
    \ sort(t)\nend", "    local ret = { }\n    if #l1 == 0 or #l2 == 0 then\n    \
    \    return ret\n    end\n    local h = { }\n    for _, v in ipairs(l1) do\n \
    \       h[v] = true\n    end\n    for _, v in ipairs(l2) do\n        if h[v] then\n\
    \            ret[#ret + 1] = v\n        end\n    end\n    table.sort(ret)\n  \
    \  return ret\nend", "    local lookup = {}\n    for _, v in ipairs(l1) do\n \
    \       lookup[v] = true\n    end\n    local out = {}\n    for _, v in ipairs(l2)\
    \ do\n        if lookup[v] then\n            out[#out + 1] = v\n        end\n\
    \    end\n    return sort(out)\nend", "    local r = {}\n    local t = {}\n  \
    \  for _, v in ipairs(l1) do\n        t[v] = true\n    end\n    for _, v in ipairs(l2)\
    \ do\n        if t[v] then\n            table.insert(r, v)\n        end\n    end\n\
    \    table.sort(r)\n    return r\nend", "    local res = {}\n    for _, v in ipairs(l1)\
    \ do\n        for _, v2 in ipairs(l2) do\n            if v == v2 then\n      \
    \          table.insert(res, v)\n            end\n        end\n    end\n    table.sort(res)\n\
    \    return uniq(res)\nend", "    local ret = {}\n    for _, v in ipairs(l1) do\n\
    \        for _, v2 in ipairs(l2) do\n            if v == v2 then\n           \
    \     table.insert(ret, v)\n            end\n        end\n    end\n    return\
    \ table.unpack(table.sort(ret))\nend", "\tlocal common = {}\n\tfor _, e in ipairs(l1)\
    \ do\n\t\tif has(l2, e) then\n\t\t\tcommon[#common + 1] = e\n\t\tend\n\tend\n\t\
    return uniq(common)\nend", "\tlocal common_tbl = {}\n\tfor i = 1, #l1 do\n\t\t\
    for j = 1, #l2 do\n\t\t\tif l1[i] == l2[j] then\n\t\t\t\ttable.insert(common_tbl,\
    \ l1[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn unique(common_tbl)\nend", "  local\
    \ c = {}\n  for i = 1, #l1 do\n    local v = l1[i]\n    if sorted_index(l2, v)\
    \ then\n      table.insert(c, v)\n    end\n  end\n  return c\nend", "\tif l1 and\
    \ l2 then\n\t\tlocal a, b, c = {}, {}, {}\n\t\tfor k, v in pairs(l1) do a[v] =\
    \ true end\n\t\tfor k, v in pairs(l2) do b[v] = true end\n\t\tfor k, v in pairs(a)\
    \ do if b[k] then c[#c+1] = k end end\n\t\tsort(c)\n\t\treturn c\n\tend\nend",
  "    return sortedkeys(keyfilter(l1, l2))\nend", "  local common = {}\n  for k,\
    \ v in pairs(l1) do\n    if l2[v] then\n      common[v] = true\n    end\n  end\n\
    \  local list = {}\n  for k, v in pairs(common) do\n    table.insert(list, k)\n\
    \  end\n  table.sort(list)\n  return list\nend", "  if not l1 or not l2 then return\
    \ end\n  local t, c = {}, {}\n  for i, v in ipairs(l1) do t[v] = true end\n  for\
    \ i, v in ipairs(l2) do if t[v] then table.insert(c, v) end end\n  table.sort(c)\n\
    \  return c\nend", "  local u = {}\n  for _, v in ipairs(l1) do\n    if elem(v,\
    \ l2) then\n      u[#u + 1] = v\n    end\n  end\n  return sorted(u)\nend", " \
    \ local result = {}\n  local hash = {}\n  for _, v in ipairs(l1) do\n    hash[v]\
    \ = true\n  end\n  for _, v in ipairs(l2) do\n    if hash[v] then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend", "    local\
    \ c = {}\n    for _, e in ipairs(l1) do\n        if contains(l2, e) then\n   \
    \         table.insert(c, e)\n        end\n    end\n    return unique(c)\nend",
  "  local ret = {}\n  for i = 1, #l1 do\n    for j = 1, #l2 do\n      if l1[i] ==\
    \ l2[j] then\n        table.insert(ret, l1[i])\n      end\n    end\n  end\n  return\
    \ unique(ret)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
