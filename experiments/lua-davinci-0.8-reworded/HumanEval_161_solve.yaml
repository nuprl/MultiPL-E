name: HumanEval_161_solve
language: lua
prompt: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string\
  \ contains no letters, reverse the string.\n-- The function should return the resulted\
  \ string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n--\
  \ 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
  \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
  \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
  \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
  \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local function rev_case(c)\n        if c == string.upper(c) then\
    \ return string.lower(c) end\n        return string.upper(c)\n    end\n    local\
    \ no_letters = true\n    for c in s:gmatch('%a') do\n        no_letters = false\n\
    \        break\n    end\n    if no_letters then return s:reverse() end\n    local\
    \ res = {}\n    for c in s:gmatch('.') do\n        if c:match('%a') then\n   \
    \         res[#res + 1] = rev_case(c)\n        else\n            res[#res + 1]\
    \ = c\n        end\n    end\n    return table.concat(res)\nend", "    local t\
    \ = {}\n    for c in s:gmatch'.' do\n        if c:match'%a' then\n           \
    \ t[#t+1] = c:lower() == c and c:upper() or c:lower()\n        else\n        \
    \    t[#t+1] = c\n        end\n    end\n    return #t > 0 and table.concat(t)\
    \ or s:reverse()\nend\nreturn solve", "  s = string.gsub(s, \"%a\", function(l)\
    \ return l:lower() == l and l:upper() or l:lower() end)\n  return string.reverse(s)\n\
    end", "    if not s:find('%a') then\n        return s:reverse()\n    end\n   \
    \ return s:gsub('%a', function(letter)\n        return letter:lower() == letter\
    \ and letter:upper() or letter:lower()\n    end)\nend", "    local _s = string.reverse(s)\n\
    \    local ret = \"\"\n    for i = 1, #_s do\n        local char = string.sub(_s,\
    \ i, i)\n        if char:find(\"%l\") then\n            ret = ret .. char:upper()\n\
    \        elseif char:find(\"%u\") then\n            ret = ret .. char:lower()\n\
    \        else\n            ret = ret .. char\n        end\n    end\n    return\
    \ ret\nend", "    if s == '' then return '' end\n    return s:gsub('[%w]', function(c)\n\
    \        if c:lower() == c then\n            return c:upper()\n        elseif\
    \ c:upper() == c then\n            return c:lower()\n        end\n    end)\nend",
  "    return s:gsub('[a-zA-Z]', function(c) return c:lower() == c and c:upper() or\
    \ c:lower() end)\nend", "  local new_s = ''\n  for i = 1, #s do\n    if s[i]:match('%a')\
    \ then\n      if s[i]:match('%u') then\n        new_s = new_s .. s[i]:lower()\n\
    \      else\n        new_s = new_s .. s[i]:upper()\n      end\n    else\n    \
    \  new_s = new_s .. s[i]\n    end\n  end\n  return new_s == '' and s:reverse()\
    \ or new_s\nend", "  return s:gsub('%a', function(c)\n    if c:lower() == c then\
    \ return c:upper() else return c:lower() end\n  end)\nend", "  return s:gsub('%w',\
    \ function(c)\n    return c:lower() == c and c:upper() or c:lower()\n  end):reverse()\n\
    end", "\tlocal function isLetter(ch)\n\t\tlocal ch = string.char(ch)\n\t\treturn\
    \ ch >= 'a' and ch <= 'z' or ch >= 'A' and ch <= 'Z'\n\tend\n\tlocal function\
    \ isUpper(ch)\n\t\tlocal ch = string.char(ch)\n\t\treturn ch >= 'A' and ch <=\
    \ 'Z'\n\tend\n\tlocal function get(ch)\n\t\tif isUpper(ch) then\n\t\t\treturn\
    \ string.lower(string.char(ch))\n\t\telse\n\t\t\treturn string.upper(string.char(ch))\n\
    \t\tend\n\tend\n\tif s:find('%a') then\n\t\tlocal ret = {}\n\t\tfor i = 1, #s\
    \ do\n\t\t\tlocal ch = string.byte(s, i)\n\t\t\tif isLetter(ch) then\n\t\t\t\t\
    ret[#ret + 1] = get(ch)\n\t\t\telse\n\t\t\t\tret[#ret + 1] = string.char(ch)\n\
    \t\t\tend\n\t\tend\n\t\treturn table.concat(ret)\n\telse\n\t\treturn s:reverse()\n\
    \tend\nend", "    local str, i = \"\", 1\n    while i <= #s do\n        if s[i]:match(\"\
    %a\") then\n            str = str .. s[i]:lower() == s[i] and s[i]:upper() or\
    \ s[i]:lower()\n        else\n            str = str .. s[i]\n        end\n   \
    \     i = i + 1\n    end\n    return str\nend", "  return \nend", "    return\
    \ (s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower() end))\n\
    end", "\tlocal t = {}\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal\
    \ l = c:lower()\n\t\tif l ~= c then\n\t\t\tt[#t + 1] = l\n\t\telse\n\t\t\tt[#t\
    \ + 1] = c:upper()\n\t\tend\n\tend\n\treturn table.concat(t)\nend", "  local res\
    \ = {}\n  for i = #s, 1, -1 do\n    if string.match(s[i], '%a') then\n      res[#res\
    \ + 1] = string.upper(s[i]) == s[i] and string.lower(s[i]) or string.upper(s[i])\n\
    \    else\n      res[#res + 1] = s[i]\n    end\n  end\n  return #res > 0 and table.concat(res)\
    \ or s\nend", "  local str1 = \"\"\n  local str2 = \"\"\n  for i=1,#s do\n   \
    \ if s:sub(i,i):match(\"%a\") then\n      str1 = str1 .. s:sub(i,i):lower()\n\
    \      str2 = str2 .. s:sub(i,i):upper()\n    else\n      str1 = str1 .. s:sub(i,i)\n\
    \      str2 = str2 .. s:sub(i,i)\n    end\n  end\n  if str1 == str2 then return\
    \ str1:reverse() end\n  for i=1,#s do\n    if s:sub(i,i):match(\"%a\") then\n\
    \      if s:sub(i,i) == str1:sub(i,i) then\n        s = s:sub(1,i-1) .. str2:sub(i,i)\
    \ .. s:sub(i+1)\n      else\n        s = s:sub(1,i-1) .. str1:sub(i,i) .. s:sub(i+1)\n\
    \      end\n    end\n  end\n  return s\nend", "    local t = {}\n    for i = 1,\
    \ #s do\n        if s[i]:match(\"%a\") then\n            table.insert(t, s[i]:upper()\
    \ == s[i] and s[i]:lower() or s[i]:upper())\n        else\n            table.insert(t,\
    \ s[i])\n        end\n    end\n    return table.concat(t)\nend", "  local str\
    \ = ''\n  local c = ''\n  local a = ''\n  for i = 1,#s do\n    c = s:sub(i,i)\n\
    \    if c:match('%w') then\n      a = c:match('%l') and c:upper() or c:lower()\n\
    \    else\n      a = c\n    end\n    str = str .. a\n  end\n  return str\nend",
  "   -- if the string contains no letters, reverse the string\n   if s:match(\"%a\"\
    ) == nil then\n      return s:reverse()\n   end\n   local t = {}\n   for i = 1,\
    \ #s do\n      -- if s[i] is a letter, reverse its case from lower to upper or\
    \ vise versa\n      -- otherwise keep it as it is\n      local l = s:sub(i, i)\n\
    \      if l:match(\"%l\") then\n         t[i] = l:upper()\n      elseif l:match(\"\
    %u\") then\n         t[i] = l:lower()\n      else\n         t[i] = l\n      end\n\
    \   end\n   return table.concat(t)\nend\nreturn solve"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
