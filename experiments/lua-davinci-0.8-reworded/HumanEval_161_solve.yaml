name: HumanEval_161_solve
language: lua
prompt: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string\
  \ contains no letters, reverse the string.\n-- The function should return the resulted\
  \ string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n--\
  \ 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
  \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
  \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
  \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
  \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local function rev_case(c)\n        if c == string.upper(c) then\
    \ return string.lower(c) end\n        return string.upper(c)\n    end\n    local\
    \ no_letters = true\n    for c in s:gmatch('%a') do\n        no_letters = false\n\
    \        break\n    end\n    if no_letters then return s:reverse() end\n    local\
    \ res = {}\n    for c in s:gmatch('.') do\n        if c:match('%a') then\n   \
    \         res[#res + 1] = rev_case(c)\n        else\n            res[#res + 1]\
    \ = c\n        end\n    end\n    return table.concat(res)\nend", "    local t\
    \ = {}\n    for c in s:gmatch'.' do\n        if c:match'%a' then\n           \
    \ t[#t+1] = c:lower() == c and c:upper() or c:lower()\n        else\n        \
    \    t[#t+1] = c\n        end\n    end\n    return #t > 0 and table.concat(t)\
    \ or s:reverse()\nend\nreturn solve", "  s = string.gsub(s, \"%a\", function(l)\
    \ return l:lower() == l and l:upper() or l:lower() end)\n  return string.reverse(s)\n\
    end", "    if not s:find('%a') then\n        return s:reverse()\n    end\n   \
    \ return s:gsub('%a', function(letter)\n        return letter:lower() == letter\
    \ and letter:upper() or letter:lower()\n    end)\nend", "    local _s = string.reverse(s)\n\
    \    local ret = \"\"\n    for i = 1, #_s do\n        local char = string.sub(_s,\
    \ i, i)\n        if char:find(\"%l\") then\n            ret = ret .. char:upper()\n\
    \        elseif char:find(\"%u\") then\n            ret = ret .. char:lower()\n\
    \        else\n            ret = ret .. char\n        end\n    end\n    return\
    \ ret\nend", "    if s == '' then return '' end\n    return s:gsub('[%w]', function(c)\n\
    \        if c:lower() == c then\n            return c:upper()\n        elseif\
    \ c:upper() == c then\n            return c:lower()\n        end\n    end)\nend",
  "    return s:gsub('[a-zA-Z]', function(c) return c:lower() == c and c:upper() or\
    \ c:lower() end)\nend", "  local new_s = ''\n  for i = 1, #s do\n    if s[i]:match('%a')\
    \ then\n      if s[i]:match('%u') then\n        new_s = new_s .. s[i]:lower()\n\
    \      else\n        new_s = new_s .. s[i]:upper()\n      end\n    else\n    \
    \  new_s = new_s .. s[i]\n    end\n  end\n  return new_s == '' and s:reverse()\
    \ or new_s\nend", "  return s:gsub('%a', function(c)\n    if c:lower() == c then\
    \ return c:upper() else return c:lower() end\n  end)\nend", "  return s:gsub('%w',\
    \ function(c)\n    return c:lower() == c and c:upper() or c:lower()\n  end):reverse()\n\
    end", "\tlocal function isLetter(ch)\n\t\tlocal ch = string.char(ch)\n\t\treturn\
    \ ch >= 'a' and ch <= 'z' or ch >= 'A' and ch <= 'Z'\n\tend\n\tlocal function\
    \ isUpper(ch)\n\t\tlocal ch = string.char(ch)\n\t\treturn ch >= 'A' and ch <=\
    \ 'Z'\n\tend\n\tlocal function get(ch)\n\t\tif isUpper(ch) then\n\t\t\treturn\
    \ string.lower(string.char(ch))\n\t\telse\n\t\t\treturn string.upper(string.char(ch))\n\
    \t\tend\n\tend\n\tif s:find('%a') then\n\t\tlocal ret = {}\n\t\tfor i = 1, #s\
    \ do\n\t\t\tlocal ch = string.byte(s, i)\n\t\t\tif isLetter(ch) then\n\t\t\t\t\
    ret[#ret + 1] = get(ch)\n\t\t\telse\n\t\t\t\tret[#ret + 1] = string.char(ch)\n\
    \t\t\tend\n\t\tend\n\t\treturn table.concat(ret)\n\telse\n\t\treturn s:reverse()\n\
    \tend\nend", "    local str, i = \"\", 1\n    while i <= #s do\n        if s[i]:match(\"\
    %a\") then\n            str = str .. s[i]:lower() == s[i] and s[i]:upper() or\
    \ s[i]:lower()\n        else\n            str = str .. s[i]\n        end\n   \
    \     i = i + 1\n    end\n    return str\nend", "  return \nend", "    return\
    \ (s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower() end))\n\
    end", "\tlocal t = {}\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal\
    \ l = c:lower()\n\t\tif l ~= c then\n\t\t\tt[#t + 1] = l\n\t\telse\n\t\t\tt[#t\
    \ + 1] = c:upper()\n\t\tend\n\tend\n\treturn table.concat(t)\nend", "  local res\
    \ = {}\n  for i = #s, 1, -1 do\n    if string.match(s[i], '%a') then\n      res[#res\
    \ + 1] = string.upper(s[i]) == s[i] and string.lower(s[i]) or string.upper(s[i])\n\
    \    else\n      res[#res + 1] = s[i]\n    end\n  end\n  return #res > 0 and table.concat(res)\
    \ or s\nend", "  local str1 = \"\"\n  local str2 = \"\"\n  for i=1,#s do\n   \
    \ if s:sub(i,i):match(\"%a\") then\n      str1 = str1 .. s:sub(i,i):lower()\n\
    \      str2 = str2 .. s:sub(i,i):upper()\n    else\n      str1 = str1 .. s:sub(i,i)\n\
    \      str2 = str2 .. s:sub(i,i)\n    end\n  end\n  if str1 == str2 then return\
    \ str1:reverse() end\n  for i=1,#s do\n    if s:sub(i,i):match(\"%a\") then\n\
    \      if s:sub(i,i) == str1:sub(i,i) then\n        s = s:sub(1,i-1) .. str2:sub(i,i)\
    \ .. s:sub(i+1)\n      else\n        s = s:sub(1,i-1) .. str1:sub(i,i) .. s:sub(i+1)\n\
    \      end\n    end\n  end\n  return s\nend", "    local t = {}\n    for i = 1,\
    \ #s do\n        if s[i]:match(\"%a\") then\n            table.insert(t, s[i]:upper()\
    \ == s[i] and s[i]:lower() or s[i]:upper())\n        else\n            table.insert(t,\
    \ s[i])\n        end\n    end\n    return table.concat(t)\nend", "  local str\
    \ = ''\n  local c = ''\n  local a = ''\n  for i = 1,#s do\n    c = s:sub(i,i)\n\
    \    if c:match('%w') then\n      a = c:match('%l') and c:upper() or c:lower()\n\
    \    else\n      a = c\n    end\n    str = str .. a\n  end\n  return str\nend",
  "   -- if the string contains no letters, reverse the string\n   if s:match(\"%a\"\
    ) == nil then\n      return s:reverse()\n   end\n   local t = {}\n   for i = 1,\
    \ #s do\n      -- if s[i] is a letter, reverse its case from lower to upper or\
    \ vise versa\n      -- otherwise keep it as it is\n      local l = s:sub(i, i)\n\
    \      if l:match(\"%l\") then\n         t[i] = l:upper()\n      elseif l:match(\"\
    %u\") then\n         t[i] = l:lower()\n      else\n         t[i] = l\n      end\n\
    \   end\n   return table.concat(t)\nend\nreturn solve", "    -- checking if the\
    \ string is not empty and contains letters at all\n    if s ~= '' and s:match('%a')\
    \ then\n        -- replace all lowercase letters with uppercase and vice versa\n\
    \        s = s:gsub('%a',function(c)\n            if c:match('%l') then return\
    \ c:upper() end\n            return c:lower()\n        end)\n    else\n      \
    \  -- if no letters are found reverse the string\n        s = s:reverse()\n  \
    \  end\n    return s\nend", "    for i = 1, #s do\n        s = s:gsub(\"[a-z]\"\
    , string.upper)\n        s = s:gsub(\"[A-Z]\", string.lower)\n    end\n    return\
    \ s\nend", "    if (not s:find('%a')) then\n        return s:reverse()\n    end\n\
    \    local result = ''\n    for c in s:gmatch('.') do\n        if c:find('%a')\
    \ then\n            if c:find('%l') then\n                result = result .. c:upper()\n\
    \            else\n                result = result .. c:lower()\n            end\n\
    \        else\n            result = result .. c\n        end\n    end\n    return\
    \ result\nend\nprint(solve('#a@C'))", "  local t = {}\n  for i = 1, #s do\n  \
    \  local char = s:sub(i, i)\n    if char:match('%a') then\n      if char:match('%l')\
    \ then\n        t[#t + 1] = char:upper()\n      else\n        t[#t + 1] = char:lower()\n\
    \      end\n    else\n      t[#t + 1] = char\n    end\n  end\n  if #t == 0 then\
    \ return s:reverse() end\n  return table.concat(t)\nend\nreturn solve", "    return\
    \ (s:gsub('[a-zA-Z]', {\n        ['a'] = 'A',\n        ['b'] = 'B',\n        ['c']\
    \ = 'C',\n        ['d'] = 'D',\n        ['e'] = 'E',\n        ['f'] = 'F',\n \
    \       ['g'] = 'G',\n        ['h'] = 'H',\n        ['i'] = 'I',\n        ['j']\
    \ = 'J',\n        ['k'] = 'K',\n        ['l'] = 'L',\n        ['m'] = 'M',\n \
    \       ['n'] = 'N',\n        ['o'] = 'O',\n        ['p'] = 'P',\n        ['q']\
    \ = 'Q',\n        ['r'] = 'R',\n        ['s'] = 'S',\n        ['t'] = 'T',\n \
    \       ['u'] = 'U',\n        ['v'] = 'V',\n        ['w'] = 'W',\n        ['x']\
    \ = 'X',\n        ['y'] = 'Y',\n        ['z'] = 'Z',\n        ['A'] = 'a',\n \
    \       ['B'] = 'b',\n        ['C'] = 'c',\n        ['D'] = 'd',\n        ['E']\
    \ = 'e',\n        ['F'] = 'f',\n        ['G'] = 'g',\n        ['H'] = 'h',\n \
    \       ['I'] = 'i',\n        ['J'] = 'j',\n        ['K'] = 'k',\n        ['L']\
    \ = 'l',\n        ['M'] = 'm',\n        ['N'] = 'n',\n        ['O'] = 'o',\n \
    \       ['P'] = 'p',\n        ['Q'] = 'q',\n        ['R'] = 'r',\n        ['S']\
    \ = 's',\n        ['T'] = 't',\n        ['U'] = 'u',\n        ['V'] = 'v',\n \
    \       ['W'] = 'w',\n        ['X'] = 'x',\n        ['Y'] = 'y',\n        ['Z']\
    \ = 'z',\n    }))\nend", "  \n  local res = \"\"\n  local n = string.len(s)\n\
    \  for i = 1, n do\n    local char = string.sub(s, i, i)\n    if char:match(\"\
    %a\") then\n      local up = char:upper()\n      res = res .. (char == up and\
    \ char:lower() or up)\n    else\n      res = res .. char\n    end\n  end\n  return\
    \ res:reverse()\nend", "  local s2 = string.gsub(s, '%a', function(ch) return\
    \ string.char(string.byte(ch) ^ 0x20) end)\n  return string.gsub(s2, '%l', '')\
    \ == '' and s2 or s\nend", "    if not s:find(\"%l\") then\n        return s:reverse()\n\
    \    end\n    local t = {}\n    for c in s:gmatch(\".\") do\n        if c:find(\"\
    %l\") then\n            table.insert(t, c:upper() == c and c:lower() or c:upper())\n\
    \        else\n            table.insert(t, c)\n        end\n    end\n    return\
    \ table.concat(t)\nend", "    return s:gsub('%a', function(ch)\n        return\
    \ ch:upper() == ch and ch:lower() or ch:upper()\n    end)\nend", "  return (s:gsub('%a',\
    \ function(ch) return ch:lower() == ch and ch:upper() or ch:lower() end):reverse())\n\
    end", "  if string.find(s, '[a-zA-Z]') then\n    return string.gsub(s, '[a-zA-Z]',\
    \ function(c) return c == c:upper() and c:lower() or c:upper() end)\n  else\n\
    \    return string.reverse(s)\n  end\nend", "  if not s:find(\"%a\") then return\
    \ s:reverse() end\n  local a = \"\"\n  for i = 1, #s do\n    if s:sub(i,i):find(\"\
    %a\") then\n      a = a .. s:sub(i,i):reverse()\n    else\n      a = a .. s:sub(i,i)\n\
    \    end\n  end\n  return a\nend", "    if #s == 0 then return s end\n    s =\
    \ string.gsub(s, \"%a\", function(ch)\n        return ch == string.lower(ch) and\
    \ string.upper(ch) or string.lower(ch)\n    end)\n    return s\nend", "    if\
    \ s:match('%a') then\n        return (s:gsub('%a', function(c)\n            return\
    \ c:lower() == c and c:upper() or c:lower()\n        end))\n    else\n       \
    \ return s:reverse()\n    end\nend\nreturn solve", "  return s:gsub('[a-zA-Z]',\
    \ '%l->%u,%u->%l'):reverse()\nend", "  s = string.gsub(s, \"[a-z]\", function(c)\n\
    \    if string.byte(c) > 96 then\n      return string.upper(c)\n    else\n   \
    \   return string.lower(c)\n    end\n  end)\n  return string.reverse(s)\nend",
  "    local reverse = {}\n    for i = 1, #s do\n        if tonumber(s[i]) == nil\
    \ then\n            if s[i] == s[i]:upper() then\n                reverse[i] =\
    \ s[i]:lower()\n            else\n                reverse[i] = s[i]:upper()\n\
    \            end\n        else\n            reverse[i] = s[i]\n        end\n \
    \   end\n    return table.concat(reverse)\nend", "   local res = ''\n   for i\
    \ = 1, #s do\n      local c = s:sub(i, i)\n      if c:match('%a') then\n     \
    \    res = res .. c:gsub('%a', function(v) return (v == v:upper() and v:lower()\
    \ or v:upper()) end)\n      else\n         res = res .. c\n      end\n   end\n\
    \   return #res > 0 and res or s:reverse()\nend\nreturn solve", "    local function\
    \ swapCase(c)\n        if c:match(\"%a\") then\n            if c:match(\"%u\"\
    ) then\n                return c:lower()\n            else\n                return\
    \ c:upper()\n            end\n        else\n            return c\n        end\n\
    \    end\n    local result = \"\"\n    for i = #s, 1, -1 do\n        result =\
    \ result .. swapCase(s:sub(i, i))\n    end\n    return result\nend", "  local\
    \ result = {}\n  for i=1,#s do\n    local c = s:sub(i,i)\n    if c:match('%l')\
    \ then\n      result[#result+1] = c:upper()\n    elseif c:match('%u') then\n \
    \     result[#result+1] = c:lower()\n    else\n      result[#result+1] = c\n \
    \   end\n  end\n  return #result > 0 and table.concat(result) or s:reverse()\n\
    end", "    if #s == 0 then\n        return s\n    end\n    local rev = s:reverse()\n\
    \    local t={}\n    for i=1,#rev do\n        if string.match(rev[i], \"[%l]\"\
    ) then\n            if string.match(rev[i], \"[%u]\") then\n                table.insert(t,\
    \ string.lower(rev[i]))\n            else\n                table.insert(t, string.upper(rev[i]))\n\
    \            end\n        else\n            table.insert(t, rev[i])\n        end\n\
    \    end\n    return table.concat(t)\nend", "    if not s then return 'The string\
    \ is empty!' end\n    local res = ''\n    for i = 1, #s do\n        local l =\
    \ s:sub(i, i)\n        if l:match('%a') then\n            if l == l:upper() then\n\
    \                res = res .. l:lower()\n            else\n                res\
    \ = res .. l:upper()\n            end\n        else\n            res = res ..\
    \ l\n        end\n    end\n    return res\nend", "  local function reverse_case(c)\n\
    \    return (c:lower() == c) and c:upper() or c:lower()\n  end\n  return s:gsub('%a',\
    \ reverse_case)\nend", "    local r, rt = {}, s:gsub('%a', function(c)\n     \
    \   return c:lower() == c and c:upper() or c:lower()\n    end)\n    if rt ~= ''\
    \ then return rt end\n    for i = 1, #s do r[#s - i + 1] = s:sub(i, i) end\n \
    \   return table.concat(r)\nend\nreturn solve", "\treturn s:gsub('%l', function(c)\n\
    \t\treturn c:upper() == c and c:lower() or c:upper()\n\tend)\nend", "  local t\
    \ = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    t[i] = c:match(\"%a\"\
    ) and c:lower() == c and c:upper() or c:lower()\n  end\n  return #t == 0 and s:reverse()\
    \ or table.concat(t)\nend", "  if not s:match('%a') then\n    return s:reverse()\n\
    \  end\n  local ans = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if\
    \ c:match('%a') then\n      c = c:lower() == c and c:upper() or c:lower()\n  \
    \  end\n    ans[#ans + 1] = c\n  end\n  return table.concat(ans)\nend\nreturn\
    \ solve", "    -- write your code here\nend", "    -- write your code here\n \
    \   local newString = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        if char:match('%a') then\n            if char:match('%l') then\n\
    \                newString = newString .. char:upper()\n            else\n   \
    \             newString = newString .. char:lower()\n            end\n       \
    \ else\n            newString = newString .. char\n        end\n    end\n    return\
    \ newString\nend", "  -- TODO: add your code here\nend", "    local r = {}\n \
    \   for i = #s, 1, -1 do\n        if string.match(s[i], \"%a\") then\n       \
    \     r[#r + 1] = string.lower(s[i]) == s[i] and string.upper(s[i]) or string.lower(s[i])\n\
    \        else\n            r[#r + 1] = s[i]\n        end\n    end\n    return\
    \ table.concat(r)\nend", "  local t = {}\n  for i = 1, #s do\n    local char =\
    \ s:sub(i, i)\n    if char:match('%a') then\n      t[i] = char:upper() == char\
    \ and char:lower() or char:upper()\n    else\n      t[i] = char\n    end\n  end\n\
    \  return #t > 0 and table.concat(t) or s:reverse()\nend", "  if not s:match('%a')\
    \ then\n    return s:reverse()\n  end\n  local res = s:gsub('(%a)', function(a)\
    \ return a:lower() == a and a:upper() or a:lower() end)\n  return res\nend", " \
    \ local function reverse(c)\n    if c == c:upper() then\n      return c:lower()\n\
    \    else\n      return c:upper()\n    end\n  end\n  local res = s:gsub('%a',\
    \ reverse)\n  if res == s then\n    return res:reverse()\n  else\n    return res\n\
    \  end\nend", "    local i, j = 1, s:len()\n    while i <= j do\n        local\
    \ c1, c2 = s:sub(i, i), s:sub(j, j)\n        if c1:match('%a') then\n        \
    \    c1 = c1:lower() == c1 and c1:upper() or c1:lower()\n        end\n       \
    \ if c2:match('%a') then\n            c2 = c2:lower() == c2 and c2:upper() or\
    \ c2:lower()\n        end\n        s = s:sub(1, i - 1) .. c1 .. s:sub(i + 1, j\
    \ - 1) .. c2 .. s:sub(j + 1)\n        i, j = i + 1, j - 1\n    end\n    return\
    \ s\nend", "  local str = \"\"\n  for i=1,#s do\n    if s[i]:match(\"%u\") then\n\
    \      str = str .. s[i]:lower()\n    elseif s[i]:match(\"%l\") then\n      str\
    \ = str .. s[i]:upper()\n    else\n      str = str .. s[i]\n    end\n  end\n \
    \ if #str == 0 then str = string.reverse(s) end\n  return str\nend", "    local\
    \ t = {}\n    for i = 1, string.len(s) do\n        local c = string.sub(s, i,\
    \ i)\n        if string.match(c, '%a') then\n            if string.match(c, '%a')\
    \ then\n                c = string.upper(c)\n            else\n              \
    \  c = string.lower(c)\n            end\n        end\n        table.insert(t,\
    \ c)\n    end\n    return table.concat(t)\nend", "    local t = {}\n    for char\
    \ in s:gmatch('%a') do\n        t[#t + 1] = char:swapcase()\n    end\n    if #t\
    \ == 0 then\n        return s:reverse()\n    end\n    return table.concat(t)\n\
    end\nreturn solve", "    local t = {}\n    local res = \"\"\n    if string.find(s,\
    \ \"[%a]\") then\n        for i=1, #s do\n            if s[i] == string.upper(s[i])\
    \ then\n                res = res .. string.lower(s[i])\n            else\n  \
    \              res = res .. string.upper(s[i])\n            end\n        end\n\
    \    else\n        for i=#s, 1, -1 do\n            table.insert(t, s[i])\n   \
    \     end\n        for i=1, #t do\n            res = res .. t[i]\n        end\n\
    \    end\n    return res\nend", "    local function isLetter(c)\n        local\
    \ lower = 'a' <= c and c <= 'z'\n        local upper = 'A' <= c and c <= 'Z'\n\
    \        return lower or upper\n    end\n    local ss = ''\n    for c in s:gmatch\
    \ '.' do\n        if isLetter(c) then\n            if c:lower() == c then\n  \
    \              ss = ss .. c:upper()\n            else\n                ss = ss\
    \ .. c:lower()\n            end\n        else\n            ss = ss .. c\n    \
    \    end\n    end\n    if ss == '' then\n        return s:reverse()\n    else\n\
    \        return ss\n    end\nend", "    if (s:match(\"%a\")) == nil then\n   \
    \     return s:reverse()\n    end\n    local res = \"\"\n    for c in s:gmatch\"\
    .\" do\n        if c:match(\"%a\") then\n            if c:lower() == c then\n\
    \                res = res .. c:upper()\n            else\n                res\
    \ = res .. c:lower()\n            end\n        else\n            res = res ..\
    \ c\n        end\n    end\n    return res\nend", "  return (string.gsub(s, \"\
    %a\", \n    function(c) \n      return string.char(string.byte(c) + (string.byte(c)\
    \ < 97 and 32 or -32))\n    end))\nend", "  if not s:match('%a') then\n    return\
    \ s:reverse()\n  end\n  return s:gsub('.', {\n    ['%a'] = function(ch) return\
    \ ch:upper() == ch and ch:lower() or ch:upper() end,\n    ['%d'] = function(ch)\
    \ return ch end,\n    ['%p'] = function(ch) return ch end,\n  })\nend", "  local\
    \ r = s:gsub('[%a]',function(x) return x:gsub('%a',{['a']='A',['A']='a',['b']='B',['B']='b',['c']='C',['C']='c',['d']='D',['D']='d',['e']='E',['E']='e',['f']='F',['F']='f',['g']='G',['G']='g',['h']='H',['H']='h',['i']='I',['I']='i',['j']='J',['J']='j',['k']='K',['K']='k',['l']='L',['L']='l',['m']='M',['M']='m',['n']='N',['N']='n',['o']='O',['O']='o',['p']='P',['P']='p',['q']='Q',['Q']='q',['r']='R',['R']='r',['s']='S',['S']='s',['t']='T',['T']='t',['u']='U',['U']='u',['v']='V',['V']='v',['w']='W',['W']='w',['x']='X',['X']='x',['y']='Y',['Y']='y',['z']='Z',['Z']='z'})\
    \ end)\n  if r==s then\n    return r:reverse()\n  else\n    return r\n  end\n\
    end", "\tif type(s) ~= 'string' then\n\t\terror('bad argument #1 (string expected,\
    \ got ' .. type(s) .. ')', 2)\n\tend\n\tlocal letters, result = 0, {}\n\tfor i\
    \ = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif c:match('%a') then\n\t\t\tletters\
    \ = letters + 1\n\t\t\tif c:match('%u') then\n\t\t\t\tresult[i] = c:lower()\n\t\
    \t\telse\n\t\t\t\tresult[i] = c:upper()\n\t\t\tend\n\t\telse\n\t\t\tresult[i]\
    \ = c\n\t\tend\n\tend\n\tif letters == 0 then\n\t\tfor i = 1, #s do\n\t\t\tresult[i]\
    \ = result[#s - i + 1]\n\t\tend\n\tend\n\treturn table.concat(result)\nend\nreturn\
    \ solve", "    local news = ''\n    for i=1,#s do\n        local c = s:sub(i,i)\n\
    \        if c:match('%a') then\n            news = news .. c:reverse()\n     \
    \   else\n            news = news .. c\n        end\n    end\n    return news\n\
    end\nreturn solve", "  return (s:gsub('%a', function(c)\n         return c:lower()\
    \ == c and c:upper() or c:lower()\n       end))\nend", "  return (s:gsub('(%a)',\
    \ function(c) return c:upper() == c and c:lower() or c:upper() end))\nend", "\t\
    s = s:gsub(\"%a\", function(c)\n\t\treturn c:lower() == c and c:upper() or c:lower()\n\
    \tend)\n\treturn s:reverse()\nend", "  if not s:match('%a') then return s:reverse()\
    \ end\n  return (s:gsub('%a', function(c)\n    if c:match('%u') then return c:lower()\
    \ end\n    return c:upper()\n  end))\nend", "    return (s:gsub('[a-zA-Z]', {\n\
    \        ['a'] = 'A',\n        ['b'] = 'B',\n        ['c'] = 'C',\n        ['d']\
    \ = 'D',\n        ['e'] = 'E',\n        ['f'] = 'F',\n        ['g'] = 'G',\n \
    \       ['h'] = 'H',\n        ['i'] = 'I',\n        ['j'] = 'J',\n        ['k']\
    \ = 'K',\n        ['l'] = 'L',\n        ['m'] = 'M',\n        ['n'] = 'N',\n \
    \       ['o'] = 'O',\n        ['p'] = 'P',\n        ['q'] = 'Q',\n        ['r']\
    \ = 'R',\n        ['s'] = 'S',\n        ['t'] = 'T',\n        ['u'] = 'U',\n \
    \       ['v'] = 'V',\n        ['w'] = 'W',\n        ['x'] = 'X',\n        ['y']\
    \ = 'Y',\n        ['z'] = 'Z',\n        ['A'] = 'a',\n        ['B'] = 'b',\n \
    \       ['C'] = 'c',\n        ['D'] = 'd',\n        ['E'] = 'e',\n        ['F']\
    \ = 'f',\n        ['G'] = 'g',\n        ['H'] = 'h',\n        ['I'] = 'i',\n \
    \       ['J'] = 'j',\n        ['K'] = 'k',\n        ['L'] = 'l',\n        ['M']\
    \ = 'm',\n        ['N'] = 'n',\n        ['O'] = 'o',\n        ['P'] = 'p',\n \
    \       ['Q'] = 'q',\n        ['R'] = 'r',\n        ['S'] = 's',\n        ['T']\
    \ = 't',\n        ['U'] = 'u',\n        ['V'] = 'v',\n        ['W'] = 'w',\n \
    \       ['X'] = 'x',\n        ['Y'] = 'y',\n        ['Z'] = 'z',\n    }))\nend",
  "    local s2 = \"\"\n    for k = #s, 1, -1 do\n        local ch = s:sub(k, k)\n\
    \        if ch:find(\"%a\") then\n            if ch:find(\"%l\") then\n      \
    \          ch = ch:upper()\n            else\n                ch = ch:lower()\n\
    \            end\n        end\n        s2 = s2 .. ch\n    end\n    return s2\n\
    end", "  local l = \"\"\n  for i = 1, #s do\n    if s[i]:match(\"%a\") then\n\
    \      l = l .. s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()\n    else\n\
    \      l = l .. s[i]\n    end\n  end\n  return #l > 0 and l or s:reverse()\nend",
  "    local res = {}\n    local letter = false\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:match('%a') then\n            letter = true\n\
    \            res[i] = c:lower() == c and c:upper() or c:lower()\n        else\n\
    \            res[i] = c\n        end\n    end\n    if not letter then\n      \
    \  res = res:reverse()\n    end\n    return table.concat(res)\nend", "    local\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local res = ''\n    for i=1, #s\
    \ do\n        if alphabet:find(s:sub(i,i)) then\n            res = res .. s:sub(i,i):reverse()\n\
    \        else\n            res = res .. s:sub(i,i)\n        end\n    end\n   \
    \ return res\nend\nprint(solve('#a@C'))", "    local ss = {}\n    for i = 1, string.len(s)\
    \ do\n        if s[i]:match(\"%a\") then\n            ss[i] = s[i]:lower() ==\
    \ s[i] and s[i]:upper() or s[i]:lower()\n        else\n            ss[i] = s[i]\n\
    \        end\n    end\n    if string.len(s) == #ss then\n        return table.concat(ss,\
    \ \"\")\n    else\n        return s\n    end\nend", "  local flipped = \"\"\n\
    \  for i = 1, #s do\n    local current = s:sub(i, i)\n    if current == current:upper()\
    \ then\n      flipped = flipped .. current:lower()\n    elseif current == current:lower()\
    \ then\n      flipped = flipped .. current:upper()\n    else\n      flipped =\
    \ flipped .. current\n    end\n  end\n  if flipped == s then\n    return flipped:reverse()\n\
    \  else\n    return flipped\n  end\nend", "  s = s:gsub('%a', function(ch)\n \
    \   if ch:match('%u') then return ch:lower()\n    else return ch:upper() end\n\
    \  end)\n  return s\nend", "    local t = {}\n    for c in s:gmatch '.' do\n \
    \       if c:match '%a' then\n            t[#t+1] = c:lower() == c and c:upper()\
    \ or c:lower()\n        else\n            t[#t+1] = c\n        end\n    end\n\
    \    if #t > 0 then\n        return table.concat(t)\n    else\n        return\
    \ s:reverse()\n    end\nend", "  -- your code here\nend", "    -- check if string\
    \ has letters\n    local hasLetters = false\n    for i = 1, string.len(s) do\n\
    \        if string.match(s[i], '%a') then\n            hasLetters = true\n   \
    \         break\n        end\n    end\n    -- if no letters, return reversed string\n\
    \    if not hasLetters then\n        return string.reverse(s)\n    end\n    --\
    \ else, reverse case\n    for i = 1, string.len(s) do\n        local c = s[i]\n\
    \        if string.match(c, '%a') then\n            if string.match(c, '%l') then\n\
    \                s = string.gsub(s, c, string.upper(c))\n            else\n  \
    \              s = string.gsub(s, c, string.lower(c))\n            end\n     \
    \   end\n    end\n    return s\nend", "    if s:match('%a') then\n        return\
    \ (s:gsub('%a', function(s)\n            return (s:match('%u') and s:lower() or\
    \ s:upper())\n        end))\n    else\n        return s:reverse()\n    end\nend\n\
    return solve", "  if s:match(\"%a\") then\n    return s:gsub(\"[%a]\", {[\"a\"\
    ] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] = \"D\", [\"e\"] = \"E\"\
    , [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"i\"] = \"I\", [\"j\"]\
    \ = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\"\
    , [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"]\
    \ = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\"\
    , [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\", [\"A\"] = \"a\", [\"B\"]\
    \ = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"] = \"f\"\
    , [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\", [\"K\"]\
    \ = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"] = \"o\"\
    , [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\", [\"T\"]\
    \ = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"] = \"x\"\
    , [\"Y\"] = \"y\", [\"Z\"] = \"z\"})\n  else\n    return s:reverse()\n  end\n\
    end", "\tlocal t = {}\n\tlocal flag = false\n\tfor i = 1, #s do\n\t\tif string.match(s[i],\"\
    %a\") then\n\t\t\tflag = true\n\t\t\tif string.match(s[i],\"%u\") then\n\t\t\t\
    \ttable.insert(t,string.lower(s[i]))\n\t\t\telse\n\t\t\t\ttable.insert(t,string.upper(s[i]))\n\
    \t\t\tend\n\t\telse\n\t\t\ttable.insert(t,s[i])\n\t\tend\n\tend\n\tif flag then\n\
    \t\treturn table.concat(t)\n\telse\n\t\treturn table.concat(t):reverse()\n\tend\n\
    end", "  -- your code here\nend", "\tlocal _s = string.gsub(s, \"(%l)(%u)\", \"\
    %2%1\")\n\treturn string.gsub(_s, \"(%u)(%l)\", \"%2%1\")\nend\nreturn solve",
  "    --..\nend", "  -- your code here\nend", "    local f = string.gsub(s, \"%a\"\
    , function(s)\n        return string.sub(s, 1, 1) == string.lower(string.sub(s,\
    \ 1, 1)) and string.upper(s) or string.lower(s)\n    end)\n    return string.find(s,\
    \ \"%a\") and f or string.reverse(s)\nend", "  local t = {}\n  for i = 1, #s do\n\
    \    if s[i]:match('%a') then\n      t[i] = s[i]:gsub('%l', string.upper):gsub('%u',\
    \ string.lower)\n    else\n      t[i] = s[i]\n    end\n  end\n  if next(t) then\n\
    \    return table.concat(t)\n  else\n    return s:reverse()\n  end\nend", "  \
    \  -- checking for letters\n    local function isLetter(character)\n        local\
    \ n = string.byte(character)\n        return ((n >= 65 and n <= 90) or (n >= 97\
    \ and n <= 122))\n    end\n    -- reversing the case\n    local function reverseCase(character)\n\
    \        local n = string.byte(character)\n        if n >= 65 and n <= 90 then\n\
    \            return string.char(n + 32)\n        elseif n >= 97 and n <= 122 then\n\
    \            return string.char(n - 32)\n        end\n    end\n    local str =\
    \ ''\n    local _f = {}\n    local _t = {}\n    -- storing the letters in to two\
    \ tables\n    for i = 1, #s do\n        if isLetter(s[i]) then\n            table.insert(_f,\
    \ s[i])\n            table.insert(_t, reverseCase(s[i]))\n        end\n    end\n\
    \    -- reversing the string\n    if #_f > 0 then\n        for i = 1, #s do\n\
    \            if isLetter(s[i]) then\n                str = str .. _t[i]\n    \
    \        else\n                str = str .. s[i]\n            end\n        end\n\
    \    else\n        for i = #s, 1, -1 do\n            str = str .. s[i]\n     \
    \   end\n    end\n    return str\nend", "  local res = ''\n  for ch in s:gmatch('.')\
    \ do\n    if ch:match('%a') then\n      res = res .. (ch:upper() == ch and ch:lower()\
    \ or ch:upper())\n    else\n      res = res .. ch\n    end\n  end\n  return #res\
    \ > 0 and res or s:reverse()\nend", "\tlocal t = {}\n\tlocal index = 0\n\tlocal\
    \ letter = '^%a'\n\tfor i = 1, string.len(s) do\n\t\tlocal sub = string.sub(s,\
    \ i, i)\n\t\tif string.find(sub, letter) then\n\t\t\tindex = index + 1\n\t\t\t\
    t[index] = sub\n\t\tend\n\tend\n\tlocal reverse = string.reverse(table.concat(t))\n\
    \tlocal result = ''\n\tfor i = 1, string.len(s) do\n\t\tlocal sub = string.sub(s,\
    \ i, i)\n\t\tif string.find(sub, letter) then\n\t\t\tindex = index + 1\n\t\t\t\
    result = result .. string.upper(string.sub(reverse, i, i))\n\t\telse\n\t\t\tresult\
    \ = result .. sub\n\t\tend\n\tend\n\treturn result\nend", "    local str = ''\n\
    \    for i = 1, #s do\n        if tonumber(s[i]) then\n            str = s[i]\
    \ .. str\n        else\n            if s[i] == s[i]:upper() then\n           \
    \     str = s[i]:lower() .. str\n            else\n                str = s[i]:upper()\
    \ .. str\n            end\n        end\n    end\n    return str\nend", "  local\
    \ res = \"\"\n  for i = #s, 1, -1 do\n    local ch = s:sub(i, i)\n    if ch:match(\"\
    %a\") then\n      res = res .. (ch:lower() == ch and ch:upper() or ch:lower())\n\
    \    else\n      res = res .. ch\n    end\n  end\n  return res\nend\nreturn solve",
  "    -- returns string containing only alphabetical characters\n    local function\
    \ onlyLetters(x)\n        return x:gsub(\"%a\", \"\")\n    end\n    -- if we don't\
    \ have any letters, reverse the string\n    if #onlyLetters(s) == #s then\n  \
    \      return s:reverse()\n    end\n    -- otherwise\n    -- replace every character\
    \ with its opposite case\n    -- string.gsub(s, pat, repl [, n])\n    -- Returns\
    \ a copy of s in which all (or the first n, if given) occurrences of the pattern\
    \ have been replaced by a replacement string specified by repl, which can be a\
    \ string, a table, or a function. gsub also returns, as its second value, the\
    \ total number of matches that occurred.\n    -- The name gsub comes from Global\
    \ SUBstitution.\n    -- gsub(s, \"%a\", function(x) return x:upper() end)\n  \
    \  -- %a - matches any character from the alphabet\n    -- function (x)\n    --\
    \ returns:\n    -- if (x == x:upper()) then\n    -- x:lower()\n    -- else\n \
    \   -- x:upper()\n    -- end\n    return s:gsub(\"%a\", function(x)\n        if\
    \ (x == x:upper()) then\n            return x:lower()\n        else\n        \
    \    return x:upper()\n        end\n    end)\nend", "  local result = {}\n  for\
    \ c in s:gmatch\".\" do\n    if c:match(\"%a\") then\n      if c:match(\"%l\"\
    ) then\n        result[#result+1] = c:upper()\n      else\n        result[#result+1]\
    \ = c:lower()\n      end\n    else\n      result[#result+1] = c\n    end\n  end\n\
    \  if #result > 0 then\n    return table.concat(result)\n  else\n    return s:reverse()\n\
    \  end\nend", "    return s:gsub('%a', function(c) return c:upper() == c and c:lower()\
    \ or c:upper() end)\nend", "    if not s:match'%a' then return s:reverse() end\n\
    \    s = s:gsub('(%a)', function(char) return char:lower() == char and char:upper()\
    \ or char:lower() end)\n    return s\nend", "\tlocal str = string.gsub(s, \"%a\"\
    , function(c)\n\t\tif c == c:upper() then\n\t\t\treturn c:lower()\n\t\telse\n\t\
    \t\treturn c:upper()\n\t\tend\n\tend)\n\treturn str:reverse()\nend", "    return\
    \ s:gsub('%a', function(c) return c:upper() == c and c:lower() or c:upper() end)\n\
    end", "    return (s:gsub('%a', function(ch) return ch:lower() == ch and ch:upper()\
    \ or ch:lower() end))\nend", "    if not s:match('%a') then\n        return s:reverse()\n\
    \    end\n    return (s:gsub('%a', function(c) return c:lower() == c and c:upper()\
    \ or c:lower() end))\nend", "    return s:gsub('%a', function(c)\n        if c:lower()\
    \ == c then return c:upper()\n        else return c:lower() end\n    end)\nend",
  "    if not s:find(\"%a\") then\n        return s:reverse()\n    end\n    local\
    \ i = 1\n    while i <= #s do\n        local c = s:sub(i, i)\n        if c:find(\"\
    %a\") then\n            local d = c:lower() == c and c:upper() or c:lower()\n\
    \            s = s:sub(1, i - 1) .. d .. s:sub(i + 1)\n        end\n        i\
    \ = i + 1\n    end\n    return s\nend", "    local t = {}\n    for i = 1, #s do\n\
    \        local c = s:sub(i, i)\n        local c2 = c:lower()\n        if c ~=\
    \ c2 then\n            t[#t + 1] = c2\n        else\n            t[#t + 1] = c:upper()\n\
    \        end\n    end\n    if #t == 0 then\n        return s:reverse()\n    end\n\
    \    return table.concat(t)\nend", "    local res = {}\n    for i = 1, #s do\n\
    \        local c = s:sub(i, i)\n        if (c >= 'a' and c <= 'z') or (c >= 'A'\
    \ and c <= 'Z') then\n            res[#res + 1] = c:gsub('.', function(m)\n  \
    \              if m >= 'a' and m <= 'z' then\n                    return m:upper()\n\
    \                else\n                    return m:lower()\n                end\n\
    \            end)\n        else\n            res[#res + 1] = c\n        end\n\
    \    end\n    if #res == 0 then\n        res = {s:reverse()}\n    end\n    return\
    \ table.concat(res)\nend", "\tlocal r,c = '',false\n\tfor i=1,#s do\n\t\tlocal\
    \ ch = s:sub(i,i)\n\t\tif ch:match('%a') then\n\t\t\tif c then r = r..ch:lower()\n\
    \t\t\telse r = r..ch:upper() end\n\t\t\tc = not c\n\t\telse r = r..ch end\n\t\
    end\n\treturn r\nend", "\ts = s:gsub('([a-z])', function(c) return c:upper() end)\n\
    \ts = s:gsub('([A-Z])', function(c) return c:lower() end)\n\tif s:match('[a-zA-Z]')\
    \ then\n\t\treturn s\n\telse\n\t\treturn s:reverse()\n\tend\nend", "  return (s:gsub('%a',\
    \ function(c)\n    return c:lower() == c and c:upper() or c:lower()\n  end))\n\
    end", "  local t = ''\n  for c in s:gmatch('.') do\n    if c:match('%a') then\n\
    \      if c:match('%u') then\n        t = t .. c:lower()\n      else\n       \
    \ t = t .. c:upper()\n      end\n    else\n      t = t .. c\n    end\n  end\n\
    \  return t:reverse()\nend\nreturn solve", "    if string.match(s, \"%a\") then\n\
    \        return string.gsub(s, \"(%a)\", function(c)\n            if string.match(c,\
    \ \"%l\") then\n                return string.upper(c)\n            else\n   \
    \             return string.lower(c)\n            end\n        end)\n    else\n\
    \        return string.reverse(s)\n    end\nend", "    local n = string.len(s)\n\
    \    if n == 0 then return s end\n    local res = {}\n    for i = 1, n do\n  \
    \      local c = string.sub(s, i, i)\n        if string.match(c, '[a-zA-Z]') then\n\
    \            c = string.lower(c) == c and string.upper(c) or string.lower(c)\n\
    \        end\n        table.insert(res, c)\n    end\n    return table.concat(res)\n\
    end", "  return s:gsub('%a', { ['a'] = 'A', ['b'] = 'B', ['c'] = 'C', ['d'] =\
    \ 'D', ['e'] = 'E', ['f'] = 'F', ['g'] = 'G', ['h'] = 'H', ['i'] = 'I', ['j']\
    \ = 'J', ['k'] = 'K', ['l'] = 'L', ['m'] = 'M', ['n'] = 'N', ['o'] = 'O', ['p']\
    \ = 'P', ['q'] = 'Q', ['r'] = 'R', ['s'] = 'S', ['t'] = 'T', ['u'] = 'U', ['v']\
    \ = 'V', ['w'] = 'W', ['x'] = 'X', ['y'] = 'Y', ['z'] = 'Z', ['A'] = 'a', ['B']\
    \ = 'b', ['C'] = 'c', ['D'] = 'd', ['E'] = 'e', ['F'] = 'f', ['G'] = 'g', ['H']\
    \ = 'h', ['I'] = 'i', ['J'] = 'j', ['K'] = 'k', ['L'] = 'l', ['M'] = 'm', ['N']\
    \ = 'n', ['O'] = 'o', ['P'] = 'p', ['Q'] = 'q', ['R'] = 'r', ['S'] = 's', ['T']\
    \ = 't', ['U'] = 'u', ['V'] = 'v', ['W'] = 'w', ['X'] = 'x', ['Y'] = 'y', ['Z']\
    \ = 'z' })\nend", "    local f = function(c)\n        if c:match('%a') then\n\
    \            return c:lower() == c and c:upper() or c:lower()\n        else\n\
    \            return c\n        end\n    end\n    return s:gsub('.', f)\nend",
  "    local letters = {}\n    local others = {}\n    for i = 1,#s do\n        if\
    \ s[i]:match(\"%a\") then\n            table.insert(letters,s[i])\n        else\n\
    \            table.insert(others,s[i])\n        end\n    end\n    if #letters\
    \ == 0 then\n        return string.reverse(s)\n    end\n    local result = {}\n\
    \    for i = 1,#letters do\n        if letters[i]:match(\"%u\") then\n       \
    \     table.insert(result,letters[i]:lower())\n        else\n            table.insert(result,letters[i]:upper())\n\
    \        end\n    end\n    for i = 1,#others do\n        table.insert(result,others[i])\n\
    \    end\n    return table.concat(result)\nend", "    local r = {}\n    for c\
    \ in s:gmatch('.') do\n        if c:match('%a') then\n            r[#r+1] = c:lower()\
    \ == c and c:upper() or c:lower()\n        else\n            r[#r+1] = c\n   \
    \     end\n    end\n    if #r == 0 then\n        return s:reverse()\n    end\n\
    \    return table.concat(r)\nend", "    local rev_str = ''\n    local index =\
    \ #s\n    while index >= 1 do\n        local c = s:sub(index, index)\n       \
    \ if c:match('%a') then\n            local c2 = c:lower() == c and c:upper() or\
    \ c:lower()\n            rev_str = rev_str .. c2\n        else\n            rev_str\
    \ = rev_str .. c\n        end\n        index = index - 1\n    end\n    return\
    \ rev_str\nend", "    local letters = \"[a-zA-Z]\"\n    local str = \"\"\n   \
    \ for i = 1, #s do\n        if string.match(s:sub(i, i), letters) then\n     \
    \       if string.match(s:sub(i, i), \"[a-z]\") then\n                str = str\
    \ .. string.upper(s:sub(i, i))\n            else\n                str = str ..\
    \ string.lower(s:sub(i, i))\n            end\n        else\n            str =\
    \ str .. s:sub(i, i)\n        end\n    end\n    return str\nend", "    return\
    \ (s:gsub('.', {\n        [string.lower] = string.upper,\n        [string.upper]\
    \ = string.lower\n    }))\nend\nreturn solve", "\tif #s == 0 then return s end\n\
    \tlocal t = {}\n\tfor i = 1, #s do\n\t\tif s[i]:match('%a') then\n\t\t\tt[i] =\
    \ s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()\n\t\telse\n\t\t\tt[i]\
    \ = s[i]\n\t\tend\n\tend\n\treturn table.concat(t)\nend", "    if string.match(s,\
    \ \"%a\") then\n        return string.gsub(s, \"%a\", function(c)\n          \
    \  return c == c:upper() and c:lower() or c:upper()\n        end)\n    else\n\
    \        return string.reverse(s)\n    end\nend", "    local res = {}\n    local\
    \ letters = 0\n    for c in s:gmatch('.') do\n        if c:find('%a') then\n \
    \           letters = letters + 1\n            if c:find('%l') then\n        \
    \        res[#res + 1] = c:upper()\n            else\n                res[#res\
    \ + 1] = c:lower()\n            end\n        else\n            res[#res + 1] =\
    \ c\n        end\n    end\n    if letters == 0 then\n        return s:reverse()\n\
    \    else\n        return table.concat(res)\n    end\nend", "    -- write your\
    \ code here\n    return s\nend", "  local res = ''\n  for i = #s, 1, -1 do\n \
    \   local c = s:sub(i, i)\n    if c:find('%a') then\n      if c:find('%l') then\n\
    \        res = res .. c:upper()\n      else\n        res = res .. c:lower()\n\
    \      end\n    else\n      res = res .. c\n    end\n  end\n  return res\nend",
  "  -- if the string does not contain letters, reverse the string\n  if not string.match(s,\
    \ '%a') then\n    return string.reverse(s)\n  end\n  -- otherwise loop over the\
    \ string and reverse its case\n  local newString = ''\n  for i=1, #s do\n    local\
    \ newCh = ''\n    if string.match(s:sub(i,i), '%a') then\n      if string.match(s:sub(i,i),\
    \ '%l') then\n        newCh = string.upper(s:sub(i,i))\n      elseif string.match(s:sub(i,i),\
    \ '%u') then\n        newCh = string.lower(s:sub(i,i))\n      end\n    else\n\
    \      newCh = s:sub(i,i)\n    end\n    newString = newString .. newCh\n  end\n\
    \  return newString\nend", "  local t = {}\n  for i=1,#s do\n    if string.match(s[i],\
    \ '[a-zA-Z]') then\n      if s[i] == string.lower(s[i]) then\n        table.insert(t,\
    \ string.upper(s[i]))\n      else\n        table.insert(t, string.lower(s[i]))\n\
    \      end\n    else\n      table.insert(t, s[i])\n    end\n  end\n  return table.concat(t)\n\
    end", "    local t = {}\n    local case = false\n    local result = ''\n    for\
    \ i = 1, string.len(s) do\n        local c = string.sub(s, i, i)\n        local\
    \ l = string.lower(c)\n        if string.find(l, '[a-z]') then\n            case\
    \ = true\n            if c == l then\n                t[i] = string.upper(c)\n\
    \            else\n                t[i] = l\n            end\n        else\n \
    \           t[i] = c\n        end\n    end\n    if case then\n        for i =\
    \ string.len(s), 1, -1 do\n            result = result .. t[i]\n        end\n\
    \    else\n        result = s\n    end\n    return result\nend", "\tlocal str\
    \ = s:reverse()\n\tlocal result = \"\"\n\tfor i = 1, #str do\n\t\tlocal char =\
    \ str:sub(i, i)\n\t\tif (string.byte(char) >= 97 and string.byte(char) <= 122)\
    \ then\n\t\t\tresult = result .. string.upper(char)\n\t\telseif (string.byte(char)\
    \ >= 65 and string.byte(char) <= 90) then\n\t\t\tresult = result .. string.lower(char)\n\
    \t\telse\n\t\t\tresult = result .. char\n\t\tend\n\tend\n\treturn result\nend",
  "  local letters = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \  local alphabet = {}\n  for k, v in pairs(letters) do\n    alphabet[v] = string.upper(v)\n\
    \  end\n  s = string.reverse(s)\n  local str = ''\n  for char in s:gmatch('.')\
    \ do\n    if alphabet[char] then\n      str = str .. alphabet[char]\n    elseif\
    \ alphabet[string.lower(char)] then\n      str = str .. string.lower(char)\n \
    \   else\n      str = str .. char\n    end\n  end\n  return str\nend", "\tlocal\
    \ r = string.reverse(s)\n\tlocal ab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tlocal abc\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n\tlocal new = ''\n\tfor i = 1,#r do\n\t\tif\
    \ ab:find(r:sub(i,i)) then\n\t\t\tnew = new .. abc:sub(ab:find(r:sub(i,i)),ab:find(r:sub(i,i)))\n\
    \t\telseif abc:find(r:sub(i,i)) then\n\t\t\tnew = new .. ab:sub(abc:find(r:sub(i,i)),abc:find(r:sub(i,i)))\n\
    \t\telse\n\t\t\tnew = new .. r:sub(i,i)\n\t\tend\n\tend\n\treturn new\nend", " \
    \ -- \u0414\u043B\u044F \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u0441\u0438\
    \u043C\u0432\u043E\u043B\u0430 \u043F\u0440\u043E\u0432\u0435\u0440\u044F\u0435\
    \u043C, \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043B\u0438 \u043E\u043D\
    \ \u0431\u0443\u043A\u0432\u043E\u0439. \u0415\u0441\u043B\u0438 \u0434\u0430\
    , \u0442\u043E \u043C\u0435\u043D\u044F\u0435\u043C \u0440\u0435\u0433\u0438\u0441\
    \u0442\u0440,\n  -- \u0435\u0441\u043B\u0438 \u043D\u0435\u0442, \u0442\u043E\
    \ \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C \u0442\u0430\u043A\
    \u0438\u043C \u0436\u0435, \u043A\u0430\u043A \u0431\u044B\u043B.\n  -- string.match\
    \ \u0432\u0435\u0440\u043D\u0435\u0442 \u0441\u0442\u0440\u043E\u043A\u0443, \u043A\
    \u043E\u0442\u043E\u0440\u0430\u044F \u0441\u043E\u043E\u0442\u0432\u0435\u0442\
    \u0441\u0442\u0432\u0443\u0435\u0442 \u0448\u0430\u0431\u043B\u043E\u043D\u0443\
    , \u0438\u043B\u0438 nil, \u0435\u0441\u043B\u0438 \u043D\u0435 \u0441\u043E\u043E\
    \u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442.\n  local function\
    \ reverse_case(c)\n    if string.match(c, \"[a-z]\") then\n      return string.upper(c)\n\
    \    elseif string.match(c, \"[A-Z]\") then\n      return string.lower(c)\n  \
    \  else\n      return c\n    end\n  end\n  -- gsub - global substitution.\n  --\
    \ \u0417\u0430\u043C\u0435\u043D\u0438\u0442\u044C \u043A\u0430\u0436\u0434\u044B\
    \u0439 \u0441\u0438\u043C\u0432\u043E\u043B \u0432 \u0441\u0442\u0440\u043E\u043A\
    \u0435 s \u043D\u0430 \u0441\u0438\u043C\u0432\u043E\u043B, \u0432\u043E\u0437\
    \u0432\u0440\u0430\u0449\u0435\u043D\u043D\u044B\u0439 reverse_case(c).\n  local\
    \ t = string.gsub(s, \".\", reverse_case)\n  -- \u0412\u0435\u0440\u043D\u0443\
    \u0442\u044C \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\n  return\
    \ t\nend", "  local res = {}\n  for i = 1, #s do\n    if string.match(s[i], '%u')\
    \ then\n      res[i] = string.lower(s[i])\n    elseif string.match(s[i], '%l')\
    \ then\n      res[i] = string.upper(s[i])\n    else\n      res[i] = s[i]\n   \
    \ end\n  end\n  return table.concat(res)\nend", "  if not s:match('%a') then return\
    \ s:reverse() end\n  local result = ''\n  for i = 1, #s do\n    if s:sub(i, i):match('%a')\
    \ then\n      if s:sub(i, i):match('%u') then\n        result = result .. s:sub(i,\
    \ i):lower()\n      else\n        result = result .. s:sub(i, i):upper()\n   \
    \   end\n    else\n      result = result .. s:sub(i, i)\n    end\n  end\n  return\
    \ result\nend", "    if s:find('%a') == nil then\n        return s:reverse()\n\
    \    end\n    local result = {}\n    for uchar in string.gfind(s, \"([%z\\1-\\\
    127\\194-\\244][\\128-\\191]*)\") do\n        if uchar:match('%l') then\n    \
    \        table.insert(result, uchar:upper())\n        elseif uchar:match('%u')\
    \ then\n            table.insert(result, uchar:lower())\n        else\n      \
    \      table.insert(result, uchar)\n        end\n    end\n    return table.concat(result)\n\
    end", "    return (s:gsub('%a',\n            function(c)\n                if c:lower()\
    \ == c then\n                    return c:upper()\n                else\n    \
    \                return c:lower()\n                end\n            end)\n   \
    \     )\nend", "    local ns = {}\n    for i=1,#s do\n        if (string.match(s[i],'%a'))\
    \ then\n            ns[i] = string.lower(s[i]) == s[i] and string.upper(s[i])\
    \ or string.lower(s[i])\n        else\n            ns[i] = s[i]\n        end\n\
    \    end\n    return (#ns == 0 and string.reverse(s) or table.concat(ns))\nend",
  "    return s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower()\
    \ end)\nend", "    local result = {}\n    for w in s:gmatch('%w') do\n       \
    \ if w == w:upper() then\n            result[#result + 1] = w:lower()\n      \
    \  else\n            result[#result + 1] = w:upper()\n        end\n    end\n \
    \   return result[1] and table.concat(result) or s:reverse()\nend", "    local\
    \ t = {}\n    for ch in s:gmatch('.') do\n        if ch:match('%a') then\n   \
    \         ch = ch:lower() == ch and ch:upper() or ch:lower()\n        end\n  \
    \      table.insert(t, ch)\n    end\n    return s:match('%a') and table.concat(t)\
    \ or table.concat(t):reverse()\nend", "    local res = ''\n    for i=1,#s do\n\
    \        local c = s:sub(i,i)\n        if c:find('%a') then\n            res =\
    \ res .. c:lower()\n        else\n            res = res .. c\n        end\n  \
    \  end\n    return res:reverse()\nend", "  local function t(ch)\n    if ch:isupper()\
    \ then\n      return ch:lower()\n    elseif ch:islower() then\n      return ch:upper()\n\
    \    else\n      return ch\n    end\n  end\n  return (s:gsub('%w', t))\nend",
  "    return s:gsub(\"%a\", function(c) return c:lower() == c and c:upper() or c:lower()\
    \ end)\nend", "    if #s == 0 then\n        return s\n    end\n    local s_ret\
    \ = ''\n    for i = 1, #s do\n        if string.find(s, s[i], i, true) then\n\
    \            s_ret = s_ret .. string.lower(s[i])\n        else\n            s_ret\
    \ = s_ret .. string.upper(s[i])\n        end\n    end\n    return s_ret\nend",
  "    local t = {}\n    local isnum = false\n    for i=1,#s do\n        local asc\
    \ = string.byte(s,i)\n        if asc>=65 and asc<=90 then\n            asc = asc\
    \ + 32\n        elseif asc>=97 and asc<=122 then\n            asc = asc - 32\n\
    \        else\n            isnum = true\n        end\n        t[#t+1] = string.char(asc)\n\
    \    end\n    if isnum then\n        return table.concat(t)\n    else\n      \
    \  local l = math.floor(#t/2)\n        for i=1,l do\n            t[i],t[#t-i+1]\
    \ = t[#t-i+1],t[i]\n        end\n        return table.concat(t)\n    end\nend",
  "    local letters = 'abcdefghijklmnopqrstuvwxyz'\n    local result = ''\n    for\
    \ i = 1, #s do\n        local c = s:sub(i, i)\n        if letters:find(c) then\n\
    \            result = result .. c:upper()\n        elseif letters:upper():find(c)\
    \ then\n            result = result .. c:lower()\n        else\n            result\
    \ = result .. c\n        end\n    end\n    return #result == 0 and s:reverse()\
    \ or result\nend", "    -- TODO\nend", "    if s:match('%l') then\n        return\
    \ s:gsub('%a', function(x) \n            return x:lower() == x and x:upper() or\
    \ x:lower()\n        end)\n    else\n        return s:reverse()\n    end\nend",
  "    return (s:gsub('.', function(ch)\n        if ch:find('%l') then\n         \
    \   return ch:upper()\n        elseif ch:find('%u') then\n            return ch:lower()\n\
    \        else\n            return ch\n        end\n    end))\nend", "    local\
    \ res = ''\n    for c in s:gmatch '.' do\n        if c:match '%l' then\n     \
    \       res = res .. c:gsub('%l', c:upper())\n        elseif c:match '%u' then\n\
    \            res = res .. c:gsub('%u', c:lower())\n        else\n            res\
    \ = res .. c\n        end\n    end\n    return res:reverse()\nend", "  local res\
    \ = {}\n  local c\n  for c in s:gmatch('.') do\n    if not c:match('%d') then\n\
    \      c = c:lower() == c and c:upper() or c:lower()\n    end\n    table.insert(res,\
    \ c)\n  end\n  table.sort(res)\n  return table.concat(res)\nend", "\tlocal res\
    \ = s:gsub('%a',function(x) \n\t\tif x == x:upper() then\n\t\t\treturn x:lower()\n\
    \t\telse\n\t\t\treturn x:upper()\n\t\tend\n\tend)\n\tif res == s then\n\t\treturn\
    \ s:reverse()\n\telse\n\t\treturn res\n\tend\nend", "    -- body\n    if #s ==\
    \ 0 then\n        return s\n    end\n    local res = {}\n    for i = 1, #s do\n\
    \        local c = s:sub(i, i)\n        if c:match('%w') then\n            if\
    \ c:match('%u') then\n                res[#res + 1] = c:lower()\n            else\n\
    \                res[#res + 1] = c:upper()\n            end\n        else\n  \
    \          res[#res + 1] = c\n        end\n    end\n    return table.concat(res)\n\
    end", "    local buffer = ''\n    for i = 1, #s do\n        local ch = s:sub(i,\
    \ i)\n        if ch >= 'a' and ch <= 'z' then\n            buffer = buffer ..\
    \ ch:upper()\n        elseif ch >= 'A' and ch <= 'Z' then\n            buffer\
    \ = buffer .. ch:lower()\n        else\n            buffer = buffer .. ch\n  \
    \      end\n    end\n    return buffer\nend", "    if s:match(\"%a\") == nil then\n\
    \        return s:reverse()\n    end\n    local t = { }\n    for i in s:gmatch(\"\
    .\") do\n        if i:match(\"%a\") then\n            t[#t + 1] = i:match(\"%l\"\
    ) and i:upper() or i:lower()\n        else\n            t[#t + 1] = i\n      \
    \  end\n    end\n    return table.concat(t)\nend", "    s = string.gsub(s, \"\
    [%a]\", function(c)\n        return string.upper(c) == c and string.lower(c) or\
    \ string.upper(c)\n    end)\n    return string.reverse(s)\nend", "  local str\
    \ = string.reverse(s)\n  return str:gsub(\"%a\",function(char)\n    return string.lower(char)\
    \ == char and char:upper() or char:lower()\n  end)\nend", "    local string_out\
    \ = \"\"\n    local letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    for c in s:gmatch(\"\
    %a\") do\n        for i, v in ipairs(letters) do\n            if c == v then\n\
    \                if c == c:upper() then\n                    string_out = string_out\
    \ .. c:lower()\n                else\n                    string_out = string_out\
    \ .. c:upper()\n                end\n            end\n        end\n    end\n \
    \   if string_out ~= \"\" then\n        for c in s:gmatch(\"%a\") do\n       \
    \     local idx = s:find(c)\n            if idx == nil then\n                string_out\
    \ = string_out .. c\n            end\n        end\n        return string_out\n\
    \    else\n        return s:reverse()\n    end\nend", "    local len = #s\n  \
    \  local str = {}\n    local tmp\n    for i = 1, len do\n        tmp = s:sub(i,\
    \ i)\n        if (tmp:match('%a')) then\n            if (tmp:match('%l')) then\n\
    \                tmp = tmp:upper()\n            else\n                tmp = tmp:lower()\n\
    \            end\n        end\n        str[i] = tmp\n    end\n    str = table.concat(str)\n\
    \    return str\nend", "  local res = ''\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match('%a') then\n      res = res .. (c:lower() == c and c:upper()\
    \ or c:lower())\n    else\n      res = res .. c\n    end\n  end\n  return #res\
    \ == 0 and s:reverse() or res\nend", "\tlocal result = \"\"\n\tfor i = 1, #s do\n\
    \t\tif s[i]:lower() == s[i] then\n\t\t\tresult = result .. s[i]:upper()\n\t\t\
    else\n\t\t\tresult = result .. s[i]:lower()\n\t\tend\n\tend\n\tif result == \"\
    \" then\n\t\treturn s:reverse()\n\tend\n\treturn result\nend", "    if #s > 0\
    \ then\n        if s:find(\"%l\") then\n            return s:gsub(\"%l\",\"%u\"\
    ):gsub(\"%u\",\"%l\")\n        elseif s:find(\"%L\") then\n            return\
    \ s:gsub(\"%L\",\"%l\"):gsub(\"%l\",\"%L\")\n        else\n            return\
    \ s:reverse()\n        end\n    else\n        return s\n    end\nend", "    local\
    \ rev = ''\n    for i=1,#s do\n        local asc = string.byte(s[i])\n       \
    \ if asc>=65 and asc<=90 then\n            rev = rev..string.char(asc+32)\n  \
    \      elseif asc>=97 and asc<=122 then\n            rev = rev..string.char(asc-32)\n\
    \        else\n            rev = rev..s[i]\n        end\n    end\n    return rev:reverse()\n\
    end", "  local d = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n  local\
    \ t = ''\n  for c in s:gmatch '.' do\n    t = t .. (d:find(c, 1, true) and c:lower()\
    \ == c and c:upper() or c:lower())\n  end\n  return #t > 0 and t or s:reverse()\n\
    end", "    local aux = ''\n    local function is_letter(c)\n        return c >=\
    \ 'a' and c <= 'z' or c >= 'A' and c <= 'Z'\n    end\n    for i = #s, 1, -1 do\n\
    \        if is_letter(s:sub(i, i)) then\n            if s:sub(i, i) == s:sub(i,\
    \ i):lower() then\n                aux = aux .. s:sub(i, i):upper()\n        \
    \    else\n                aux = aux .. s:sub(i, i):lower()\n            end\n\
    \        else\n            aux = aux .. s:sub(i, i)\n        end\n    end\n  \
    \  return aux\nend", "    s = string.gsub(s, \"[a-z]\", \n    function(m)\n  \
    \      return string.upper(m)\n    end)\n    s = string.gsub(s, \"[A-Z]\", \n\
    \    function(m)\n        return string.lower(m)\n    end)\n    return s\nend",
  "  -- Implement your code here\nend", "    local str = {}\n    local rev = {}\n\
    \    local res = {}\n    local flag = false\n    for i = 1, #s do\n        if\
    \ s[i]:match('%l') then\n            flag = true\n            str[i] = s[i]:upper()\n\
    \        elseif s[i]:match('%u') then\n            flag = true\n            str[i]\
    \ = s[i]:lower()\n        else\n            str[i] = s[i]\n        end\n    end\n\
    \    if flag then\n        for i = 1, #str do\n            rev[i] = str[#str -\
    \ i + 1]\n        end\n        for i = 1, #rev do\n            res[i] = rev[i]\n\
    \        end\n        return table.concat(res)\n    else\n        for i = 1, #s\
    \ do\n            rev[i] = s[#s - i + 1]\n        end\n        for i = 1, #rev\
    \ do\n            res[i] = rev[i]\n        end\n        return table.concat(res)\n\
    \    end\nend", "    return reverse(s:gsub('%a', function(c) return (c:lower()\
    \ == c) and c:upper() or c:lower() end))\nend", "    return (s:match'%a*' or s):gsub('.',{\n\
    \        ['a'] = 'A', ['b'] = 'B', ['c'] = 'C', ['d'] = 'D', ['e'] = 'E',\n  \
    \      ['f'] = 'F', ['g'] = 'G', ['h'] = 'H', ['i'] = 'I', ['j'] = 'J',\n    \
    \    ['k'] = 'K', ['l'] = 'L', ['m'] = 'M', ['n'] = 'N', ['o'] = 'O',\n      \
    \  ['p'] = 'P', ['q'] = 'Q', ['r'] = 'R', ['s'] = 'S', ['t'] = 'T',\n        ['u']\
    \ = 'U', ['v'] = 'V', ['w'] = 'W', ['x'] = 'X', ['y'] = 'Y',\n        ['z'] =\
    \ 'Z', ['A'] = 'a', ['B'] = 'b', ['C'] = 'c', ['D'] = 'd',\n        ['E'] = 'e',\
    \ ['F'] = 'f', ['G'] = 'g', ['H'] = 'h', ['I'] = 'i',\n        ['J'] = 'j', ['K']\
    \ = 'k', ['L'] = 'l', ['M'] = 'm', ['N'] = 'n',\n        ['O'] = 'o', ['P'] =\
    \ 'p', ['Q'] = 'q', ['R'] = 'r', ['S'] = 's',\n        ['T'] = 't', ['U'] = 'u',\
    \ ['V'] = 'v', ['W'] = 'w', ['X'] = 'x',\n        ['Y'] = 'y', ['Z'] = 'z'\n \
    \   })\nend", "    s = s:gsub(\"%l\", function(c) return c:upper() == c and c:lower()\
    \ or c:upper() end)\n    s = s:reverse()\n    return s\nend", "  local t = {}\n\
    \  for c in s:gmatch('%a') do\n    t[#t+1] = c:match('%l') and c:upper() or c:lower()\n\
    \  end\n  return #t == 0 and s:reverse() or table.concat(t)\nend", "  s = s:gsub('%l',\
    \ string.upper)\n  s = s:gsub('%u', string.lower)\n  return s\nend", "    return\
    \ (s:gsub('[%a]', function(c) return c:upper() == c and c:lower() or c:upper()\
    \ end))\nend", "    local flag = false\n    local str = ''\n    local ch = ''\n\
    \    for i = 1, string.len(s) do\n        ch = string.sub(s, i, i)\n        if\
    \ string.match(ch, '%a') then\n            if string.upper(ch) == ch then\n  \
    \              str = str .. string.lower(ch)\n            else\n             \
    \   str = str .. string.upper(ch)\n            end\n            flag = true\n\
    \        else\n            str = str .. ch\n        end\n    end\n    if flag\
    \ then\n        return str\n    else\n        return string.reverse(s)\n    end\n\
    end", "    local res = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c:find(\"%l\") then\n            res = res .. c:upper()\n   \
    \     elseif c:find(\"%u\") then\n            res = res .. c:lower()\n       \
    \ else\n            res = res .. c\n        end\n    end\n    return res:reverse()\n\
    end", "    local t = {}\n    for c in s:gmatch('%a') do\n        t[#t+1] = c:lower()\
    \ == c and c:upper() or c:lower()\n    end\n    if #t == 0 then\n        return\
    \ s:reverse()\n    end\n    return table.concat(t)\nend", "  if s:match('%a')\
    \ then\n    local result = s:gsub('%a', function(c)\n      if c:match('%l') then\n\
    \        return c:upper()\n      else\n        return c:lower()\n      end\n \
    \   end)\n    return result\n  else\n    return s:reverse()\n  end\nend", "  \
    \  local res = ''\n    for i = 1, #s do\n        local x = s:sub(i, i)\n     \
    \   if string.match(x, '[a-zA-Z]') then\n            res = res .. string.char(string.byte(x)\
    \ ^ 32)\n        else\n            res = res .. x\n        end\n    end\n    return\
    \ res\nend", "\tif not s:find('%a') then return s:reverse() end\n\tlocal res =\
    \ ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif c:find('%a') then\n\
    \t\t\tif c:find('%a') then\n\t\t\t\tres = res .. c:upper()\n\t\t\telse\n\t\t\t\
    \tres = res .. c:lower()\n\t\t\tend\n\t\telse\n\t\t\tres = res .. c\n\t\tend\n\
    \tend\n\treturn res\nend", "  local a = ''\n  for i=1,#s do\n    if string.find(s:sub(i,i),'%a')\
    \ then\n      if s:sub(i,i) == s:sub(i,i):upper() then\n        a = a .. s:sub(i,i):lower()\n\
    \      else\n        a = a .. s:sub(i,i):upper()\n      end\n    else\n      a\
    \ = a .. s:sub(i,i)\n    end\n  end\n  if #a == 0 then return string.reverse(s)\
    \ else return a end\nend", "    local reverseCase = {\n        ['a'] = 'A',\n\
    \        ['b'] = 'B',\n        ['c'] = 'C',\n        ['d'] = 'D',\n        ['e']\
    \ = 'E',\n        ['f'] = 'F',\n        ['g'] = 'G',\n        ['h'] = 'H',\n \
    \       ['i'] = 'I',\n        ['j'] = 'J',\n        ['k'] = 'K',\n        ['l']\
    \ = 'L',\n        ['m'] = 'M',\n        ['n'] = 'N',\n        ['o'] = 'O',\n \
    \       ['p'] = 'P',\n        ['q'] = 'Q',\n        ['r'] = 'R',\n        ['s']\
    \ = 'S',\n        ['t'] = 'T',\n        ['u'] = 'U',\n        ['v'] = 'V',\n \
    \       ['w'] = 'W',\n        ['x'] = 'X',\n        ['y'] = 'Y',\n        ['z']\
    \ = 'Z',\n        ['A'] = 'a',\n        ['B'] = 'b',\n        ['C'] = 'c',\n \
    \       ['D'] = 'd',\n        ['E'] = 'e',\n        ['F'] = 'f',\n        ['G']\
    \ = 'g',\n        ['H'] = 'h',\n        ['I'] = 'i',\n        ['J'] = 'j',\n \
    \       ['K'] = 'k',\n        ['L'] = 'l',\n        ['M'] = 'm',\n        ['N']\
    \ = 'n',\n        ['O'] = 'o',\n        ['P'] = 'p',\n        ['Q'] = 'q',\n \
    \       ['R'] = 'r',\n        ['S'] = 's',\n        ['T'] = 't',\n        ['U']\
    \ = 'u',\n        ['V'] = 'v',\n        ['W'] = 'w',\n        ['X'] = 'x',\n \
    \       ['Y'] = 'y',\n        ['Z'] = 'z',\n    }\n    local reversedString =\
    \ ''\n    for i = #s, 1, -1 do\n        if reverseCase[s[i]] then\n          \
    \  reversed", "    if #s == 0 then\n        return s\n    end\n    local res =\
    \ {}\n    for i = 1, #s do\n        if s[i]:match('%a') then\n            local\
    \ lower_ch = s[i]:lower()\n            if s[i] == lower_ch then\n            \
    \    res[i] = s[i]:upper()\n            else\n                res[i] = lower_ch\n\
    \            end\n        else\n            res[i] = s[i]\n        end\n    end\n\
    \    return table.concat(res)\nend", "    return (s:gsub('%a', {\n        ['a']\
    \ = 'A',\n        ['b'] = 'B',\n        ['c'] = 'C',\n        ['d'] = 'D',\n \
    \       ['e'] = 'E',\n        ['f'] = 'F',\n        ['g'] = 'G',\n        ['h']\
    \ = 'H',\n        ['i'] = 'I',\n        ['j'] = 'J',\n        ['k'] = 'K',\n \
    \       ['l'] = 'L',\n        ['m'] = 'M',\n        ['n'] = 'N',\n        ['o']\
    \ = 'O',\n        ['p'] = 'P',\n        ['q'] = 'Q',\n        ['r'] = 'R',\n \
    \       ['s'] = 'S',\n        ['t'] = 'T',\n        ['u'] = 'U',\n        ['v']\
    \ = 'V',\n        ['w'] = 'W',\n        ['x'] = 'X',\n        ['y'] = 'Y',\n \
    \       ['z'] = 'Z',\n        ['A'] = 'a',\n        ['B'] = 'b',\n        ['C']\
    \ = 'c',\n        ['D'] = 'd',\n        ['E'] = 'e',\n        ['F'] = 'f',\n \
    \       ['G'] = 'g',\n        ['H'] = 'h',\n        ['I'] = 'i',\n        ['J']\
    \ = 'j',\n        ['K'] = 'k',\n        ['L'] = 'l',\n        ['M'] = 'm',\n \
    \       ['N'] = 'n',\n        ['O'] = 'o',\n        ['P'] = 'p',\n        ['Q']\
    \ = 'q',\n        ['R'] = 'r',\n        ['S'] = 's',\n        ['T'] = 't',\n \
    \       ['U'] = 'u',\n        ['V'] = 'v',\n        ['W'] = 'w',\n        ['X']\
    \ = 'x',\n        ['Y'] = 'y',\n        ['Z'] = 'z',\n    }))\nend", "  local\
    \ t,r = {},''\n  for i=1,#s do\n    local c = s:sub(i,i)\n    if c:match('%a')\
    \ then\n      if c:match('%l') then c = c:upper() else c = c:lower() end\n   \
    \ end\n    t[#t+1] = c\n  end\n  for i=#t,1,-1 do r = r..t[i] end\n  return r\n\
    end", "    return string.gsub(s, '%a', \n        function(x) \n            if\
    \ x == x:upper() then\n                return x:lower()\n            else \n \
    \               return x:upper()\n            end\n        end)\nend", "    local\
    \ res, i = {}, 1\n    for c in s:gmatch('.') do\n        if c:match('%a') then\n\
    \            res[i] = c:lower() == c and c:upper() or c:lower()\n        else\n\
    \            res[i] = c\n        end\n        i = i + 1\n    end\n    return #res\
    \ == 0 and s:reverse() or table.concat(res)\nend", "    local res, sz = '', #s\n\
    \    for i = 1, sz do\n        if string.match(s[i], '[a-zA-Z]') then\n      \
    \      res = res .. string.char(string.byte(s[i]) ^ 32)\n        else\n      \
    \      res = res .. s[i]\n        end\n    end\n    return sz == 0 and s or res\n\
    end", "  return s:gsub('%a', function(x) return x:lower()==x and x:upper() or\
    \ x:lower() end)\nend", "\tlocal r = {}\n\tfor i = #s, 1, -1 do\n\t\tlocal c =\
    \ s:sub(i, i)\n\t\tlocal l = c:lower()\n\t\tif l ~= c then\n\t\t\tr[#r + 1] =\
    \ l\n\t\telse\n\t\t\tr[#r + 1] = c:upper()\n\t\tend\n\tend\n\treturn table.concat(r)\n\
    end\nreturn solve", "    if s:match(\"%a\") then\n        return (s:gsub(\"%a\"\
    ,function(c) return c == c:upper() and c:lower() or c:upper() end))\n    else\n\
    \        return s:reverse()\n    end\nend", "    -- write your code here\n   \
    \ local tab = {}\n    for i=1, #s do\n        if string.match(s[i],\"%a\") then\n\
    \            if string.match(s[i],\"%l\") then\n                s[i] = string.upper(s[i])\n\
    \            elseif string.match(s[i],\"%u\") then\n                s[i] = string.lower(s[i])\n\
    \            end\n        end\n        table.insert(tab,s[i])\n    end\n    return\
    \ table.concat(tab)\nend", "    local buf = {}\n    for i = #s, 1, -1 do\n   \
    \     if s[i]:match(\"%a\") then\n            buf[#buf + 1] = s[i]:lower() ==\
    \ s[i] and s[i]:upper() or s[i]:lower()\n        else\n            buf[#buf +\
    \ 1] = s[i]\n        end\n    end\n    return #buf == 0 and s:reverse() or table.concat(buf)\n\
    end", "    local result = {}\n    for c in s:gmatch(\"%S\") do\n        if c:match(\"\
    %a\") then\n            c = c:lower() == c and c:upper() or c:lower()\n      \
    \  end\n        table.insert(result, c)\n    end\n    return #result == 0 and\
    \ s:reverse() or table.concat(result)\nend", "  return (s:gsub('%w', function(c)\
    \ return c:lower() == c and c:upper() or c:lower() end))\nend", "\tlocal u = {}\n\
    \tfor c in s:gmatch'.' do\n\t\tif c:find'%a' then u[#u+1] = c:upper()==c and c:lower()\
    \ or c:upper() else u[#u+1] = c end\n\tend\n\treturn #u>0 and table.concat(u)\
    \ or s:reverse()\nend", "  local lower = 'abcdefghijklmnopqrstuvwxyz'\n  local\
    \ upper = lower:upper()\n  local chars = {}\n  for i=1,#s do\n    local char =\
    \ s:sub(i,i)\n    local p = lower:find(char)\n    if p then\n      chars[#chars+1]\
    \ = upper:sub(p,p)\n    else\n      p = upper:find(char)\n      if p then\n  \
    \      chars[#chars+1] = lower:sub(p,p)\n      else\n        chars[#chars+1] =\
    \ char\n      end\n    end\n  end\n  return #chars>0 and table.concat(chars) or\
    \ s:reverse()\nend", "    if not s:match(\"%a\") then return s:reverse() end\n\
    \    return s:gsub(\"%a\", function(l)\n        if l:match(\"%l\") then\n    \
    \        return l:upper()\n        else\n            return l:lower()\n      \
    \  end\n    end)\nend", "    if #s == 0 then return '' end\n    local res = ''\n\
    \    for i = 1, #s do\n        local char = s:sub(i, i)\n        if char == char:upper()\
    \ then\n            res = res .. char:lower()\n        elseif char == char:lower()\
    \ then\n            res = res .. char:upper()\n        else\n            res =\
    \ res .. char\n        end\n    end\n    return res\nend", "    if string.match(s,'%a')\
    \ then\n        return string.gsub(s,'.',function(ch)\n            if ch == ch:upper()\
    \ then return ch:lower() end\n            return ch:upper()\n        end)\n  \
    \  else\n        return string.reverse(s)\n    end\nend\nreturn solve"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
