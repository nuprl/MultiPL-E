name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return table of all prefixes from shortest to longest of the input string\n\
  -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {string}\n    for i = #string - 1, 1, -1 do\n  \
    \      table.insert(result, string:sub(1, i))\n    end\n    return result\nend",
  "    local prefixes = {}\n    for n = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string:sub(1, n)\n    end\n    return prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n    end\n    return prefixes\nend", "  local result = {}\n  for i = 1, #string\
    \ do\n    table.insert(result, string:sub(1, i))\n  end\n  return result\nend",
  "\tlocal t = {}\n\tfor i = 1, #string do\n\t\tt[#t+1] = sub(string, 1, i)\n\tend\n\
    \treturn t\nend", "    assert(type(string) == 'string')\n    local prefixes =\
    \ {}\n    for i = 1, #string do\n        insert(prefixes, sub(string, 1, i))\n\
    \    end\n    return prefixes\nend", "    local out = {}\n    for i = 1, #string\
    \ do\n        table.insert(out, string:sub(1, i))\n    end\n    return out\nend",
  "\tlocal t = {}\n\tlocal length = #string\n\tfor i = 1, length do\n\t\tt[i] = sub(string,\
    \ 1, i)\n\tend\n\treturn t\nend", "\tlocal out = {}\n\tfor i = 1, #string do\n\
    \t\tout[#out + 1] = string:sub(1, i)\n\tend\n\treturn out\nend", "    local prefixes\
    \ = {}\n    for i = 1, string:len() do\n        table.insert(prefixes, string:sub(1,\
    \ i))\n    end\n    return prefixes\nend", "    local len = string.len(string)\n\
    \    local t = {}\n    for i = 1, len do\n        t[i] = string.sub(string, 1,\
    \ i)\n    end\n    return t\nend", "    local prefixes = {}\n    for n = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, n)\n    end\n    return\
    \ prefixes\nend", "    return map(function(i) return sub(string, 1, i) end, irange(1,\
    \ #string))\nend", "    local result = {}\n    local substring = ''\n    for char\
    \ in string:gmatch('.') do\n        substring = substring .. char\n        table.insert(result,\
    \ substring)\n    end\n    return result\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n \
    \ return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n\
    \        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return prefixes\n\
    end", "  -- if empty string, no prefixes\n  if string:len() == 0 then\n    return\
    \ {}\n  end", "    local t = {}\n    for i = 1, string:len() do\n        t[i]\
    \ = string:sub(1, i)\n    end\n    return t\nend", "    local t = {}\n    for\
    \ i = 1, string:len() do\n        t[i] = string:sub(1, i)\n    end\n    return\
    \ t\nend", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend", "  local t = {}\n  for i\
    \ = 1, string:len() do\n    table.insert(t, string:sub(1, i))\n  end\n  return\
    \ t\nend", "\tlocal result = {}\n\tfor i = 1, #string do\n\t\ttinsert(result,\
    \ strsub(string, 1, i))\n\tend\n\treturn result\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n\
    \  return prefixes\nend", "    local ps = {}\n    for i = 1, #string do\n    \
    \    ps[#ps + 1] = string:sub(1, i)\n    end\n    return ps\nend", "  local len\
    \ = #string\n  local prefixes = {}\n  for i = len, 1, -1 do\n    prefixes[#prefixes+1]\
    \ = string:sub(1, i)\n  end\n  return prefixes\nend", "    local parts = {}\n\
    \    for i = 1, #string do\n        parts[i] = string:sub(1, i)\n    end\n   \
    \ return parts\nend", "    local result = {}\n    for i = 1, #string do\n    \
    \    local prefix = string:sub(1, i)\n        table.insert(result, prefix)\n \
    \   end\n    return result\nend", "    local prefixes = {}\n    local start, stop\
    \ = 1, 1\n    while true do\n        prefixes[#prefixes + 1] = string:sub(start,\
    \ stop)\n        stop = stop + 1\n        if stop > #string then\n           \
    \ start = start + 1\n            stop = start\n            if start > #string\
    \ then\n                break\n            end\n        end\n    end\n    return\
    \ prefixes\nend", "  local ret = {}\n  for i = 1, #string do\n    table.insert(ret,\
    \ string:sub(1, i))\n  end\n  return ret\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n \
    \ return prefixes\nend", "\tlocal ret = {}\n\tfor i = 1, #string do\n\t\ttable.insert(ret,\
    \ string:sub(1, i))\n\tend\n\treturn ret\nend", "    local result = {}\n    for\
    \ i = 1, #string do\n        table.insert(result, string:sub(1, i))\n    end\n\
    \    return result\nend", "  local ret = {}\n  for i = 1, #string do\n    ret[#ret\
    \ + 1] = string:sub(1, i)\n  end\n  return ret\nend", "    local result = {}\n\
    \    for i = 1, #string do\n        result[#result + 1] = string:sub(1, i)\n \
    \   end\n    return result\nend", "    local len = string.len(string)\n    local\
    \ out = {}\n    for n = 1, len do\n        table.insert(out, string.sub(string,\
    \ 1, n))\n    end\n    return out\nend", "    local prefixes = {}\n    for length=1,#string\
    \ do\n        prefixes[#prefixes+1] = string:sub(1, length)\n    end\n    return\
    \ prefixes\nend", "  local n = #string\n  local result = {}\n  for i = 1, n do\n\
    \    result[i] = string:sub(1, i)\n  end\n  return result\nend", "  local all\
    \ = {}\n  for i = 1, #string do\n    all[i] = string:sub(1, i)\n  end\n  return\
    \ all\nend", "    local ret = {}\n    for pos = 1, #string do\n        ret[#ret\
    \ + 1] = string:sub(1, pos)\n    end\n    return ret\nend", "    local out = {}\n\
    \    for i = 1, #string do\n        table.insert(out, string:sub(1, i))\n    end\n\
    \    return out\nend", "    local len = #string\n    local prefixes = {}\n   \
    \ for i = 1, len do\n        table.insert(prefixes, string:sub(1, i))\n    end\n\
    \    return prefixes\nend", "  local result = { }\n  for i = 1, #string do\n \
    \   result[i] = string:sub(1, i)\n  end\n  return result\nend", "\tlocal t = {}\n\
    \tfor i = 1, #string do\n\t\tt[#t+1] = string:sub(1, i)\n\tend\n\treturn t\nend",
  "  -- Base case\n  if string == '' then\n    return {''}\n  end", "    local results\
    \ = {}\n    for i = 1, #string do\n        table.insert(results, string:sub(1,\
    \ i))\n    end\n    return results\nend", "  local t = {}\n  for i = 1, string:len()\
    \ do\n    t[i] = string:sub(1, i)\n  end\n  return t\nend", "    local result\
    \ = {}\n    for i = 1, #string do\n        result[#result + 1] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "  local result = {''}\n  for i = 1, #string\
    \ do\n    table.insert(result, string:sub(1, i))\n  end\n  return result\nend",
  "    local list = {}\n    for i = 1, #string do\n        list[#list + 1] = string:sub(1,\
    \ i)\n    end\n    return list\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end", "    local prefixes = { }\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n    end\n    return prefixes\nend", "  local prefixes\
    \ = {}\n  for n = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(1, n)\n\
    \  end\n  return prefixes\nend", "    local prefixes = {}\n    for length=1, #string\
    \ do\n        prefixes[#prefixes+1] = string:sub(1, length)\n    end\n    return\
    \ prefixes\nend", "    local t = {}\n    for i = 1, #string do\n        table.insert(t,\
    \ string:sub(1, i))\n    end\n    return t\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return\
    \ prefixes\nend", "  local tbl = {}\n  for i = 1, #string do\n    tbl[#tbl+1]\
    \ = string:sub(1, i)\n  end\n  return tbl\nend", "    local tbl = {}\n    for\
    \ i = 1, string:len() do\n        tbl[i] = string:sub(1, i)\n    end\n    return\
    \ tbl\nend", "    return vim.tbl_reverse(vim.tbl_filter(function(prefix)\n   \
    \     return string:find(prefix)\n    end, vim.tbl_reverse(vim.tbl_map(function(i)\n\
    \        return string:sub(1, i)\n    end, vim.seq(1, #string)))))\nend", "  \
    \  local prefixes = {}\n    for len = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string:sub(1, len)\n    end\n    return prefixes\nend", "    local result\
    \ = {}\n    for i = 1, #string do\n        result[#result + 1] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "  local tbl = {}\n  for i = 1, #string\
    \ do\n    table.insert(tbl, string:sub(1, i))\n  end\n  return tbl\nend", "\t\
    local result = {}\n\tfor i = 1, #string do\n\t\tresult[#result + 1] = string:sub(1,\
    \ i)\n\tend\n\treturn result\nend", "  local result = {}\n  local len = #string\n\
    \  for i = 1, len do\n    result[i] = string:sub(1, i)\n  end\n  return result\n\
    end", "    local prefixes = {}\n    for i = 1, string.len(string) do\n       \
    \ table.insert(prefixes, string.sub(string, 1, i))\n    end\n    return prefixes\n\
    end", "    local prefixes = {''}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n    end\n    return prefixes\nend", "    local result\
    \ = {}\n    for i = 1, string:len() do\n        table.insert(result, string:sub(1,\
    \ i))\n    end\n    return result\nend", "    local t = {}\n    for i = 1, #string\
    \ do\n        t[#t + 1] = string:sub(1, i)\n    end\n    return t\nend", "   \
    \ local result = {}\n    for i = 1, string:len() do\n        result[i] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "  --return map(partial(string.sub, string),\
    \ range(1, string:len()))\n  local prefixes = {}\n  for i = 1, string:len() do\n\
    \    prefixes[i] = string:sub(1, i)\n  end\n  return prefixes\nend", "\tassert(type(string)\
    \ == 'string')\n\tlocal char_list = split(string)\n\tlocal result = {}\n\t-- start\
    \ with first char, then two, then three, etc.\n\tfor i = 1, #char_list do\n\t\t\
    table.insert(result, table.concat(char_list, '', 1, i))\n\tend\n\treturn result\n\
    end", "  local ret = {}\n  for i = 1, string:len() do\n    ret[#ret + 1] = string:sub(1,\
    \ i)\n  end\n  return ret\nend", "    local result = { }\n    local j = 1\n  \
    \  for i = 1, string.len(string) do\n        result[j] = string.sub(string, 1,\
    \ i)\n        j = j + 1\n    end\n    return result\nend", "  local res = {}\n\
    \  for i = 1, #string do\n    res[i] = string:sub(1, i)\n  end\n  return res\n\
    end", "  local prefixes = {}\n  local l = #string\n  for i = 1, l do\n    prefixes[i]\
    \ = string:sub(1, i)\n  end\n  return prefixes\nend", "    local prefixes = {}\n\
    \    for i = 1, string:len() do\n        prefixes[i] = string:sub(1, i)\n    end\n\
    \    return prefixes\nend", "    local pfxs = {}\n    for i = 1, #string do\n\
    \        pfxs[#pfxs + 1] = string:sub(1, i)\n    end\n    return pfxs\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string:sub(1, i)\n  end\n  return prefixes\nend", "\tlocal result = {}\n\tfor\
    \ i = 1, #string do\n\t\tlocal prefix = string:sub(1, i)\n\t\ttable.insert(result,\
    \ prefix)\n\tend\n\treturn result\nend", "\tlocal ret = {}\n\tfor i = 1, string:len()\
    \ do\n\t\ttable.insert(ret, string:sub(1, i))\n\tend\n\treturn ret\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n  end\n  return prefixes\nend", "    local prefixes = {string}\n    for\
    \ i = 1, #string - 1 do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n\
    \    end\n    return prefixes\nend", "  local prefixes = {}\n  for i = 1, string:len()\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "    local str_tbl = {}\n    for i = 1, #string do\n        table.insert(str_tbl,\
    \ string:sub(1, i))\n    end\n    return str_tbl\nend", "    local out = {}\n\
    \    for i = 1, #string do\n        table.insert(out, string:sub(1, i))\n    end\n\
    \    return out\nend", "    local prefixes = {}\n    for i = 1, #string do\n \
    \       prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return prefixes\n\
    end", "  local out = {}\n  for i = 1, #string do\n    out[#out+1] = string:sub(1,\
    \ i)\n  end\n  return out\nend", "    local list = {}\n    for i = 1, #string\
    \ do\n        table.insert(list, string:sub(1, i))\n    end\n    return list\n\
    end", "    assert(type(string) == 'string')\n    local t = {}\n    for i = 1,\
    \ #string do\n        t[#t + 1] = string:sub(1, i)\n    end\n    return t\nend",
  "    local prefixes = {}\n    for i = 1, #string do\n        table.insert(prefixes,\
    \ string:sub(1, i))\n    end\n    return prefixes\nend", "\tlocal result = {}\n\
    \tlocal prefix = ''\n\tfor i = 1, #string do\n\t\tprefix = prefix .. string:sub(i,\
    \ i)\n\t\tresult[#result + 1] = prefix\n\tend\n\treturn result\nend", "  local\
    \ t = {}\n  for i = 1, #string do\n    t[#t+1] = string:sub(1, i)\n  end\n  return\
    \ t\nend", "\tlocal prefixes = {}\n\tlocal length = #string\n\tfor i = 1, length\
    \ do\n\t\tprefixes[i] = string:sub(1, i)\n\tend\n\treturn prefixes\nend", "  \
    \  local prefixes = {}\n    for i = 1, string.len(string) do\n        table.insert(prefixes,\
    \ string.sub(string, 1, i))\n    end\n    return prefixes\nend", "\tlocal _all_prefixes\
    \ = {}\n\tfor i = 1, #string do\n\t\t_all_prefixes[#_all_prefixes + 1] = string:sub(1,\
    \ i)\n\tend\n\treturn _all_prefixes\nend", "    local t = {}\n    for i = 1, #string\
    \ do\n        t[#t + 1] = string:sub(1, i)\n    end\n    return t\nend", "   \
    \ local result = {}\n    for i = 1, #string do\n        table.insert(result, string:sub(1,\
    \ i))\n    end\n    return result\nend", "\tlocal set = {}\n\tfor i = 1, #string\
    \ do\n\t\tset[#set+1] = string:sub(1, i)\n\tend\n\treturn set\nend", "\tlocal\
    \ result = {}\n\tfor length = 1, string:len() do\n\t\tresult[#result + 1] = string:sub(1,\
    \ length)\n\tend\n\treturn result\nend", "    local prefixes = {}\n    for i =\
    \ 1, #string do\n        table.insert(prefixes, string:sub(1, i))\n    end\n \
    \   return prefixes\nend", "    local all_prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(all_prefixes, string:sub(1, i))\n    end\n    return\
    \ all_prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n  \
    \      prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return prefixes\n\
    end", "    local out = {}\n    for i = 1, #string do\n        table.insert(out,\
    \ string:sub(1, i))\n    end\n    return out\nend", "    local result = {}\n \
    \   for i = 1, #string do\n        table.insert(result, string:sub(1, i))\n  \
    \  end\n    return result\nend", "    local all_pref = {}\n    for i = 1, #string\
    \ do\n        all_pref[#all_pref + 1] = string:sub(1, i)\n    end\n    return\
    \ all_pref\nend", "    local prefixes = {}\n    for i = 1, #string do\n      \
    \  insert(prefixes, sub(string, 1, i))\n    end\n    return prefixes\nend", " \
    \   local t = {}\n    for i = 1, #string do\n        table.insert(t, string:sub(1,\
    \ i))\n    end\n    return t\nend", "  local r = {}\n  for i = 1, #string do\n\
    \    r[#r+1] = string:sub(1, i)\n  end\n  return r\nend", "  local size = string.len(string)\n\
    \  local prefixes = {}\n  for i = 1, size do\n    table.insert(prefixes, string.sub(string,\
    \ 1, i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for length\
    \ = 1, #string do\n    prefixes[#prefixes + 1] = str_sub(string, 1, length)\n\
    \  end\n  return prefixes\nend", "    local result = {}\n    local length = #string\n\
    \    for i = 1, length do\n        table.insert(result, string:sub(1, i))\n  \
    \  end\n    return result\nend", "    local result = {}\n    local prefix_len\
    \ = 1\n    while prefix_len <= #string do\n        local prefix = string:sub(1,\
    \ prefix_len)\n        result[#result + 1] = prefix\n        prefix_len = prefix_len\
    \ + 1\n    end\n    return result\nend", "    local prefixes = {}\n    local i\
    \ = 1\n    while i <= #string do\n        prefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n        i = i + 1\n    end\n    return prefixes\nend", "    local p = {}\n\
    \    for i = 1, string:len() do\n        table.insert(p, string:sub(1, i))\n \
    \   end\n    return p\nend", "    local out = {}\n    for i = 1, #string do\n\
    \        out[#out + 1] = string:sub(1, i)\n    end\n    return out\nend", "  \
    \  local result = {}\n    for idx = 1, #string do\n        table.insert(result,\
    \ string:sub(1, idx))\n    end\n    return result\nend", "  local result = {}\n\
    \  for i = 1, #string do\n    table.insert(result, string:sub(1, i))\n  end\n\
    \  return result\nend", "  local prefixes = {}\n  for index,_ in utf8.codes(string)\
    \ do\n    table.insert(prefixes, string:sub(1, index))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n  end\n  return prefixes\nend", "    local t = {}\n\
    \    for i = 1, #string do\n        table.insert(t, string:sub(1, i))\n    end\n\
    \    return t\nend", "    local ret = {}\n    for i = 1, #string do\n        ret[#ret\
    \ + 1] = string:sub(1, i)\n    end\n    return ret\nend", "  local res = {}\n\
    \  for i = 1, #string do\n    res[i] = string:sub(1, i)\n  end\n  return res\n\
    end", "    local prefixes = {}\n    for i = 1, #string do\n        table.insert(prefixes,\
    \ string:sub(1, i))\n    end\n    return prefixes\nend", "  local tbl = {}\n \
    \ for prefix_len = 1, #string do\n    table.insert(tbl, string:sub(1, prefix_len))\n\
    \  end\n  return tbl\nend", "\tlocal t = {}\n\tfor i = 1, #string do\n\t\tt[#t+1]\
    \ = string:sub(1, i)\n\tend\n\treturn t\nend", "  local t = {}\n  for i = 1, #string\
    \ do\n    t[#t+1] = string:sub(1, i)\n  end\n  return t\nend", "\tlocal prefixes\
    \ = {}\n\tfor i = 1, #string do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\
    \tend\n\treturn prefixes\nend", "  local r = {}\n  for i = 1, #string do\n   \
    \ r[#r+1] = string:sub(1, i)\n  end\n  return r\nend", "    local prefixes = {}\n\
    \    for i = 1, #string do\n        table.insert(prefixes, string:sub(1, i))\n\
    \    end\n    return prefixes\nend", "    local prefixes = {}\n    for i = 1,\
    \ #string do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n  \
    \  return prefixes\nend", "    local ret = {}\n    local len = unicode.len(string)\n\
    \    for i = 1, len do\n        table.insert(ret, unicode.sub(string, 1, i))\n\
    \    end\n    return ret\nend", "    local result = {}\n    local prefix = ''\n\
    \    for c in string:gmatch('.') do\n        prefix = prefix .. c\n        result[#result\
    \ + 1] = prefix\n    end\n    return result\nend", "    local result = {}\n  \
    \  for i = 1, string:len() do\n        table.insert(result, string:sub(1, i))\n\
    \    end\n    return result\nend", "\tlocal m = {}\n\tfor i = 1, #string do\n\t\
    \tm[#m+1] = string:sub(1, i)\n\tend\n\treturn m\nend", "    local result = {}\n\
    \    for i = 1, #string do\n        result[#result + 1] = string:sub(1, i)\n \
    \   end\n    return result\nend", "  local n = string.len(string)\n  local result\
    \ = {}\n  for i = 1, n do\n    result[i] = string.sub(string, 1, i)\n  end\n \
    \ return result\nend", "    local out = {}\n    for i = 1, #string do\n      \
    \  out[#out + 1] = string:sub(1, i)\n    end\n    return out\nend", "  local t\
    \ = {}\n  for i = 1, #string do\n    t[#t+1] = string:sub(1, i)\n  end\n  return\
    \ t\nend", "\tlocal prefixes = {}\n\tlocal prefix = ''\n\tfor char in string:gmatch('.')\
    \ do\n\t\tprefix = prefix .. char\n\t\tprefixes[#prefixes + 1] = prefix\n\tend\n\
    \treturn prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\nend",
  "    local res = {}\n    local start = 1\n    local l = string:len()\n    while\
    \ start <= l do\n        table.insert(res, string:sub(1, start))\n        start\
    \ = start + 1\n    end\n    return res\nend", "    local result = {''}\n    for\
    \ idx = 1, #string do\n        result[#result + 1] = string:sub(1, idx)\n    end\n\
    \    return result\nend", "  local len = #string\n  local prefixes = {}\n  for\
    \ i = 1, len do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return\
    \ prefixes\nend", "    local out = {}\n    for i = 1, #string do\n        table.insert(out,\
    \ string:sub(1, i))\n    end\n    return out\nend", "    local prefixes = {}\n\
    \    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n\
    \    end\n    return prefixes\nend", "    local r = {}\n    for i = 1, #string\
    \ do\n        table.insert(r, string:sub(1, i))\n    end\n    return r\nend",
  "  local newlist = {}\n  for i = 1,#string do\n    insert(newlist,sub(string,1,i))\n\
    \  end\n  return newlist\nend", "  local r = {}\n  for i = 1, #string do\n   \
    \ r[#r+1] = string:sub(1, i)\n  end\n  return r\nend", "    local t = {}\n   \
    \ for i = 1, string:len() do\n        table.insert(t, string:sub(1, i))\n    end\n\
    \    return t\nend", "  local prefixes = {}\n  for start = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string:sub(1, start)\n  end\n  return prefixes\nend",
  "  local res = {}\n  for i = 1, #string do\n    table.insert(res, string:sub(1,\
    \ i))\n  end\n  return res\nend", "  local result = {}\n  for i = 1, #string do\n\
    \    insert(result, string:sub(1, i))\n  end\n  return result\nend", "  local\
    \ tbl = {}\n  for i = 1, #string do\n    table.insert(tbl, string:sub(1, i))\n\
    \  end\n  return tbl\nend", "  local result = {}\n  for i = 1, #string do\n  \
    \  table.insert(result, string:sub(1, i))\n  end\n  return result\nend", "   \
    \ local prefixes = {string}\n    for i = 2, #string do\n        table.insert(prefixes,\
    \ string:sub(1, i))\n    end\n    return prefixes\nend", "\tlocal output = {}\n\
    \tfor i = 1, #string do\n\t\ttable.insert(output, string:sub(1, i))\n\tend\n\t\
    return output\nend", "  -- Compute length of string\n  local len = string:len()\n\
    \  -- Create empty table\n  local table = {}\n  -- Append prefixes of all lengths\
    \ to table\n  for i = 1, len do\n    table[i] = string:sub(1, i)\n  end\n  --\
    \ Return table\n  return table\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end", "  local t = {}\n  for len = 1, #string do\n    table.insert(t, string:sub(1,\
    \ len))\n  end\n  return t\nend", "    local result = {}\n    for i = 1, string:len()\
    \ do\n        result[i] = string:sub(1, i)\n    end\n    return result\nend",
  "    local result = {}\n    for i = 1, string:len() do\n        result[i] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "\tlocal t = {}\n\tlocal i = 1\n\twhile\
    \ i <= #string do\n\t\tt[#t+1] = string:sub(1, i)\n\t\ti = i + 1\n\tend\n\treturn\
    \ t\nend", "    local result = {}\n    for i = 1, #string do\n        table.insert(result,\
    \ string:sub(1, i))\n    end\n    return result\nend", "    local prefixes = {}\n\
    \    for i = 1, #string do\n        table.insert(prefixes, string:sub(1, i))\n\
    \    end\n    return prefixes\nend", "    local t = {}\n    for i = 1, #string\
    \ do\n        t[#t + 1] = string:sub(1, i)\n    end\n    return t\nend", "   \
    \ local ret = {}\n    for i = 1, string:len() do\n        table.insert(ret, string:sub(1,\
    \ i))\n    end\n    return ret\nend", "    local prefixes = {[''] = true}\n  \
    \  for i = 1, #string do\n        prefixes[string:sub(1, i)] = true\n    end\n\
    \    return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n\
    \        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return prefixes\n\
    end", "    local prefixes = {}\n    for i = 1, string:len() do\n        table.insert(prefixes,\
    \ string:sub(1, i))\n    end\n    return prefixes\nend", "    local result = {}\n\
    \    for i = 1, #string do\n        result[#result + 1] = string:sub(1, i)\n \
    \   end\n    return result\nend", "\tlocal result = {}\n\tfor i = 1, #string do\n\
    \t\tresult[#result + 1] = string:sub(1, i)\n\tend\n\treturn result\nend", "  \
    \  assert(type(string) == 'string')\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend", "  local result = {}\n  local len = #string\n  for i = 1, len\
    \ do\n    table.insert(result, string:sub(1, i))\n  end\n  return result\nend",
  "    local res = {}\n    local len = #string\n    for i = 1, len do\n        res[i]\
    \ = string:sub(1, i)\n    end\n    return res\nend", "    local tbl = {}\n   \
    \ for i = 1, #string do\n        tbl[#tbl + 1] = string:sub(1, i)\n    end\n \
    \   return tbl\nend", "    local t = {}\n    for i = 1, #string do\n        t[#t\
    \ + 1] = string:sub(1, i)\n    end\n    return t\nend", "    local prefixes =\
    \ {}\n    for i = 1, #string do\n        table.insert(prefixes, string:sub(1,\
    \ i))\n    end\n    return prefixes\nend", "  local l = {}\n  for i = 1, #string\
    \ do\n    l[#l+1] = string:sub(1, i)\n  end\n  return l\nend", "    local result\
    \ = {}\n    for i = 1, string:len() do\n        result[i] = string:sub(1, i)\n\
    \    end\n    return result\nend", "\tlocal prefixes = {}\n\tfor i = 1, string:len()\
    \ do\n\t\tprefixes[i] = string:sub(1, i)\n\tend\n\treturn prefixes\nend", "  \
    \  local res = {}\n    for i = 1, string:len() do\n        res[i] = string:sub(1,\
    \ i)\n    end\n    return res\nend", "\treturn set.from_iter(it.prefixes(string))\n\
    end", "    local ret = {}\n    for i = 1, #string do\n        ret[#ret + 1] =\
    \ string:sub(1, i)\n    end\n    return ret\nend", "\tlocal prefixes = {}\n\t\
    for i = 1, #string do\n\t\tlocal prefix = string:sub(1, i)\n\t\tprefixes[prefix]\
    \ = true\n\tend\n\treturn prefixes\nend", "  local first = string.sub(string,\
    \ 1, 1)\n  local remaining = string.sub(string, 2)\n  if remaining == '' then\n\
    \    return {string}\n  else\n    local remaining_prefixes = all_prefixes(remaining)\n\
    \    local result = {}\n    for _, p in ipairs(remaining_prefixes) do\n      result[#result\
    \ + 1] = first .. p\n    end\n    result[#result + 1] = first\n    return result\n\
    \  end\nend", "    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n    end\n    return prefixes\nend", "    local result\
    \ = {}\n    for i = 1, #string do\n        result[#result + 1] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "    local prefixes = {}\n    for i =\
    \ 1, string:len() do\n        prefixes[i] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend", "    local result = {}\n    local prefix = ''\n    for i=1,#string\
    \ do\n        prefix = prefix .. string.sub(string, i, i)\n        result[#result+1]\
    \ = prefix\n    end\n    return result\nend", "    local result = {''}\n    for\
    \ i = 1, #string do\n        result[#result + 1] = string:sub(1, i)\n    end\n\
    \    return result\nend", "    local n = #string\n    local prefixes = {}\n  \
    \  for i = 1, n do\n        prefixes[i] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend", "    local prefixes = {}\n    for pos = 1, #string do\n    \
    \    insert(prefixes, sub(string, 1, pos))\n    end\n    return prefixes\nend",
  "\tlocal t = {}\n\tfor i = 1, #string do\n\t\tt[#t+1] = string:sub(1, i)\n\tend\n\
    \treturn t\nend", "\tlocal retval = {}\n\tfor i = 1, string:len() do\n\t\ttable.insert(retval,\
    \ string:sub(1, i))\n\tend\n\treturn retval\nend", "  local result = {}\n  for\
    \ i = 1, #string do\n    table.insert(result, string:sub(1, i))\n  end\n  return\
    \ result\nend", "  local prefixes = {}\n  for i = 1, #string do\n    vim.list_extend(prefixes,\
    \ vim.split(string:sub(1, i), '', true))\n  end\n  return prefixes\nend", "  \
    \  local result = {}\n    local size = #string\n    for i = 1, size do\n     \
    \   result[i] = string:sub(1, i)\n    end\n    return result\nend", "\tlocal prefixes\
    \ = {}\n\tfor i = 1, #string do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\
    \tend\n\treturn prefixes\nend", "    local prefixes = {string}\n    for i = #string,\
    \ 1, -1 do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend", "  local tbl = {}\n  for i = 1, #string do\n    table.insert(tbl,string:sub(1,i))\n\
    \  end\n  return tbl\nend", "    local result = {}\n    for i = 1, #string do\n\
    \        tinsert(result, string:sub(1, i))\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
