name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return table of all prefixes from shortest to longest of the input string\n\
  -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {string}\n    for i = #string - 1, 1, -1 do\n  \
    \      table.insert(result, string:sub(1, i))\n    end\n    return result\nend",
  "    local prefixes = {}\n    for n = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string:sub(1, n)\n    end\n    return prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n    end\n    return prefixes\nend", "  local result = {}\n  for i = 1, #string\
    \ do\n    table.insert(result, string:sub(1, i))\n  end\n  return result\nend",
  "\tlocal t = {}\n\tfor i = 1, #string do\n\t\tt[#t+1] = sub(string, 1, i)\n\tend\n\
    \treturn t\nend", "    assert(type(string) == 'string')\n    local prefixes =\
    \ {}\n    for i = 1, #string do\n        insert(prefixes, sub(string, 1, i))\n\
    \    end\n    return prefixes\nend", "    local out = {}\n    for i = 1, #string\
    \ do\n        table.insert(out, string:sub(1, i))\n    end\n    return out\nend",
  "\tlocal t = {}\n\tlocal length = #string\n\tfor i = 1, length do\n\t\tt[i] = sub(string,\
    \ 1, i)\n\tend\n\treturn t\nend", "\tlocal out = {}\n\tfor i = 1, #string do\n\
    \t\tout[#out + 1] = string:sub(1, i)\n\tend\n\treturn out\nend", "    local prefixes\
    \ = {}\n    for i = 1, string:len() do\n        table.insert(prefixes, string:sub(1,\
    \ i))\n    end\n    return prefixes\nend", "    local len = string.len(string)\n\
    \    local t = {}\n    for i = 1, len do\n        t[i] = string.sub(string, 1,\
    \ i)\n    end\n    return t\nend", "    local prefixes = {}\n    for n = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, n)\n    end\n    return\
    \ prefixes\nend", "    return map(function(i) return sub(string, 1, i) end, irange(1,\
    \ #string))\nend", "    local result = {}\n    local substring = ''\n    for char\
    \ in string:gmatch('.') do\n        substring = substring .. char\n        table.insert(result,\
    \ substring)\n    end\n    return result\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n \
    \ return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n\
    \        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return prefixes\n\
    end", "  -- if empty string, no prefixes\n  if string:len() == 0 then\n    return\
    \ {}\n  end", "    local t = {}\n    for i = 1, string:len() do\n        t[i]\
    \ = string:sub(1, i)\n    end\n    return t\nend", "    local t = {}\n    for\
    \ i = 1, string:len() do\n        t[i] = string:sub(1, i)\n    end\n    return\
    \ t\nend", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
