name: HumanEval_64_vowels_count
language: lua
prompt: "-- Write a function vowels_count which takes a string representing\n-- a\
  \ word as input and returns the number of vowels in the string.\n-- Vowels in this\
  \ case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only when\
  \ it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
  -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
  \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
  \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
  \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
  \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for i=1,#s do\n    if s:sub(i,i) == 'a' or s:sub(i,i)\
    \ == 'e' or s:sub(i,i) == 'i' or s:sub(i,i) == 'o' or s:sub(i,i) == 'u' or s:sub(i,i)\
    \ == 'y' and i == #s then\n      sum = sum + 1\n    end\n  end\n  return sum\n\
    end", "    local vowels = {\n        a = true,\n        e = true,\n        i =\
    \ true,\n        o = true,\n        u = true,\n        A = true,\n        E =\
    \ true,\n        I = true,\n        O = true,\n        U = true,\n    }\n    local\
    \ count = 0\n    for i = 1, #s do\n        if vowels[s:sub(i, i)] then\n     \
    \       count = count + 1\n        end\n    end\n    if vowels[s:sub(-1, -1)]\
    \ then\n        count = count + 1\n    end\n    return count\nend", "    local\
    \ _, cnt = s:gsub('[aeiouy]', '')\n    return cnt\nend", "  -- TODO\nend", " \
    \ local n = 0\n  s = s:lower()\n  for _, char in ipairs({'a', 'e', 'i', 'o', 'u'})\
    \ do\n    n = n + string.gsub(s, char, '')\n  end\n  if string.sub(s, #s) == 'y'\
    \ then\n    n = n + 1\n  end\n  return n\nend", "    local cnt = 0\n    local\
    \ l = s:lower()\n    for i = 1, #l do\n        if l:sub(i, i) == 'a' or l:sub(i,\
    \ i) == 'e' or l:sub(i, i) == 'i' or l:sub(i, i) == 'o' or l:sub(i, i) == 'u'\
    \ then\n            cnt = cnt + 1\n        end\n    end\n    if l:sub(#l, #l)\
    \ == 'y' then\n        cnt = cnt + 1\n    end\n    return cnt\nend", "  -- You\
    \ have to complete this function.\n  return -1\nend", "    -- ...\nend", "   \
    \ local vowels = 'aeiouy'\n    local count = 0\n    for c in s:lower():gmatch('.')\
    \ do\n        if vowels:find(c) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local n = 0\n  local c = s:lower():sub(1,\
    \ 1)\n  if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n   \
    \ n = n + 1\n  end\n  c = s:lower():sub(-1)\n  if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' or c == 'y' then\n    n = n + 1\n  end\n  for i\
    \ = 2, #s - 1 do\n    c = s:lower():sub(i, i)\n    if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n      n = n + 1\n    end\n  end\n  return\
    \ n\nend", "\tlocal s = s:lower()\n\tlocal vowel = 'aeiouy'\n\tlocal sum = 0\n\
    \tfor i = 1, #s do\n\t\tfor j = 1, #vowel do\n\t\t\tif vowel:sub(j, j) == s:sub(i,\
    \ i) then\n\t\t\t\tsum = sum + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend",
  "  -- TODO\nend", "  local count = 0\n  for i = 1, #s do\n    if s:sub(i, i) ==\
    \ 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i,\
    \ i) == 'u' or s:sub(i, i) == 'y' then\n      count = count + 1\n    end\n  end\n\
    \  if s:sub(#s, #s) == 'y' then\n    count = count - 1\n  end\n  return count\n\
    end", "   -- Your code here\nend", "    -- TODO: add your code here\nend", " \
    \ -- convert string to lowercase\n  s = s:lower()\n  -- track number of vowels\n\
    \  local vcount = 0\n  -- iterate over each character in string\n  for c in s:gmatch(\"\
    .\") do\n    -- count vowels\n    if c == 'a' or c == 'e' or c == 'i' or c ==\
    \ 'o' or c == 'u' then\n      vcount = vcount + 1\n    end\n  end\n  -- if last\
    \ character in string is 'y', count it as a vowel\n  if s:sub(-1) == 'y' then\n\
    \    vcount = vcount + 1\n  end\n  -- return count\n  return vcount\nend", " \
    \   assert(type(s) == 'string')\n    -- replace the following line with your code\n\
    \    return 2\nend", "    local vowels = 'aeiouy'\n    local count = 0\n    for\
    \ i = 1, string.len(s) do\n        if vowels:find(string.lower(s:sub(i, i))) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    if not string.find(s, \"[aeiou]\") then\n        return 0\n    end\n    if\
    \ not string.find(s, \"[^aeiou]\") then\n        return #s\n    end\n    s = string.gsub(s,\
    \ \"[^aeiou]\", \"\")\n    if string.find(s, \"^y\") then\n        return #s -\
    \ 1\n    end\n    return #s\nend", "  local n = 0\n  local l = string.lower(s)\n\
    \  for c in string.gmatch(l, \"[aeiouy]\") do\n    n = n + 1\n  end\n  return\
    \ n\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
