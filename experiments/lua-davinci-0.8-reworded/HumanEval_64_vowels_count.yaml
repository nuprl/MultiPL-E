name: HumanEval_64_vowels_count
language: lua
prompt: "-- Write a function vowels_count which takes a string representing\n-- a\
  \ word as input and returns the number of vowels in the string.\n-- Vowels in this\
  \ case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only when\
  \ it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
  -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
  \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
  \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
  \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
  \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for i=1,#s do\n    if s:sub(i,i) == 'a' or s:sub(i,i)\
    \ == 'e' or s:sub(i,i) == 'i' or s:sub(i,i) == 'o' or s:sub(i,i) == 'u' or s:sub(i,i)\
    \ == 'y' and i == #s then\n      sum = sum + 1\n    end\n  end\n  return sum\n\
    end", "    local vowels = {\n        a = true,\n        e = true,\n        i =\
    \ true,\n        o = true,\n        u = true,\n        A = true,\n        E =\
    \ true,\n        I = true,\n        O = true,\n        U = true,\n    }\n    local\
    \ count = 0\n    for i = 1, #s do\n        if vowels[s:sub(i, i)] then\n     \
    \       count = count + 1\n        end\n    end\n    if vowels[s:sub(-1, -1)]\
    \ then\n        count = count + 1\n    end\n    return count\nend", "    local\
    \ _, cnt = s:gsub('[aeiouy]', '')\n    return cnt\nend", "  -- TODO\nend", " \
    \ local n = 0\n  s = s:lower()\n  for _, char in ipairs({'a', 'e', 'i', 'o', 'u'})\
    \ do\n    n = n + string.gsub(s, char, '')\n  end\n  if string.sub(s, #s) == 'y'\
    \ then\n    n = n + 1\n  end\n  return n\nend", "    local cnt = 0\n    local\
    \ l = s:lower()\n    for i = 1, #l do\n        if l:sub(i, i) == 'a' or l:sub(i,\
    \ i) == 'e' or l:sub(i, i) == 'i' or l:sub(i, i) == 'o' or l:sub(i, i) == 'u'\
    \ then\n            cnt = cnt + 1\n        end\n    end\n    if l:sub(#l, #l)\
    \ == 'y' then\n        cnt = cnt + 1\n    end\n    return cnt\nend", "  -- You\
    \ have to complete this function.\n  return -1\nend", "    -- ...\nend", "   \
    \ local vowels = 'aeiouy'\n    local count = 0\n    for c in s:lower():gmatch('.')\
    \ do\n        if vowels:find(c) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local n = 0\n  local c = s:lower():sub(1,\
    \ 1)\n  if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n   \
    \ n = n + 1\n  end\n  c = s:lower():sub(-1)\n  if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' or c == 'y' then\n    n = n + 1\n  end\n  for i\
    \ = 2, #s - 1 do\n    c = s:lower():sub(i, i)\n    if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n      n = n + 1\n    end\n  end\n  return\
    \ n\nend", "\tlocal s = s:lower()\n\tlocal vowel = 'aeiouy'\n\tlocal sum = 0\n\
    \tfor i = 1, #s do\n\t\tfor j = 1, #vowel do\n\t\t\tif vowel:sub(j, j) == s:sub(i,\
    \ i) then\n\t\t\t\tsum = sum + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend",
  "  -- TODO\nend", "  local count = 0\n  for i = 1, #s do\n    if s:sub(i, i) ==\
    \ 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i,\
    \ i) == 'u' or s:sub(i, i) == 'y' then\n      count = count + 1\n    end\n  end\n\
    \  if s:sub(#s, #s) == 'y' then\n    count = count - 1\n  end\n  return count\n\
    end", "   -- Your code here\nend", "    -- TODO: add your code here\nend", " \
    \ -- convert string to lowercase\n  s = s:lower()\n  -- track number of vowels\n\
    \  local vcount = 0\n  -- iterate over each character in string\n  for c in s:gmatch(\"\
    .\") do\n    -- count vowels\n    if c == 'a' or c == 'e' or c == 'i' or c ==\
    \ 'o' or c == 'u' then\n      vcount = vcount + 1\n    end\n  end\n  -- if last\
    \ character in string is 'y', count it as a vowel\n  if s:sub(-1) == 'y' then\n\
    \    vcount = vcount + 1\n  end\n  -- return count\n  return vcount\nend", " \
    \   assert(type(s) == 'string')\n    -- replace the following line with your code\n\
    \    return 2\nend", "    local vowels = 'aeiouy'\n    local count = 0\n    for\
    \ i = 1, string.len(s) do\n        if vowels:find(string.lower(s:sub(i, i))) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    if not string.find(s, \"[aeiou]\") then\n        return 0\n    end\n    if\
    \ not string.find(s, \"[^aeiou]\") then\n        return #s\n    end\n    s = string.gsub(s,\
    \ \"[^aeiou]\", \"\")\n    if string.find(s, \"^y\") then\n        return #s -\
    \ 1\n    end\n    return #s\nend", "  local n = 0\n  local l = string.lower(s)\n\
    \  for c in string.gmatch(l, \"[aeiouy]\") do\n    n = n + 1\n  end\n  return\
    \ n\nend", "   -- YOUR CODE HERE\nend", "    local i = 0\n    local count = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) == 'a' then\n            count =\
    \ count + 1\n        elseif s:sub(i, i) == 'e' then\n            count = count\
    \ + 1\n        elseif s:sub(i, i) == 'i' then\n            count = count + 1\n\
    \        elseif s:sub(i, i) == 'o' then\n            count = count + 1\n     \
    \   elseif s:sub(i, i) == 'u' then\n            count = count + 1\n        elseif\
    \ s:sub(i, i) == 'y' then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    if s == '' then\n        return 0\n    elseif s:sub(1,\
    \ 1) == 'y' then\n        return vowels_count(s:sub(2)) + 1\n    elseif s:sub(1,\
    \ 1) == 'a' or s:sub(1, 1) == 'e' or s:sub(1, 1) == 'i' or s:sub(1, 1) == 'o'\
    \ or s:sub(1, 1) == 'u' then\n        return vowels_count(s:sub(2)) + 1\n    else\n\
    \        return vowels_count(s:sub(2))\n    end\nend", "    -- TODO: implement\
    \ this function\nend", "  -- To check if a character is a vowel, check the value\
    \ of the string\n  -- in the table of vowels.\n  local vowels = {a = true, e =\
    \ true, i = true, o = true, u = true, y = true}\n  local c, n = string.sub(s,\
    \ 1, 1), 0\n  -- The second iteration parameter is the index of the last character\
    \ of the\n  -- string (including the last character). The iteration parameters\
    \ are called\n  -- in reverse order.\n  for i = #s, 1, -1 do\n    if vowels[c]\
    \ then\n      n = n + 1\n    end\n    c = string.sub(s, i, i)\n  end\n  return\
    \ n\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local counter = 0\n\
    \  local ch = ''\n  -- i is an index, while ch is the character at that index\n\
    \  for i, ch in ipairs(s) do\n    if ch == 'y' and i == #s then\n      counter\
    \ = counter + 1\n    elseif ch == 'y' then\n      -- do nothing\n    elseif helpers.contains(vowels,\
    \ ch) then\n      counter = counter + 1\n    end\n  end\n  return counter\nend",
  "    s = string.lower(s)\n    return string.len(string.gsub(s, '[^aeiouy]', ''))\n\
    end", "  -- Put your code here\nend", "\tlocal total = 0\n\tlocal is_y = false\n\
    \tfor i = 1, #s do\n\t\tlocal ch = s:sub(i, i)\n\t\tif 'aeiou' :find(ch) then\n\
    \t\t\ttotal = total + 1\n\t\telseif ch == 'y' then\n\t\t\tis_y = true\n\t\tend\n\
    \tend\n\tif is_y then\n\t\ttotal = total + 1\n\tend\n\treturn total\nend", " \
    \  return #string.gsub(s, \"[AEIOUaeiou]\", \"\")\nend", "\t-- TODO: Implement\
    \ the function\nend", "\tlocal count = 0\n\tfor _, c in pairs(s:lower():gmatch(\"\
    .\")) do\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or c\
    \ == 'y' then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
  "  -- write your code here\nend", "  local count = 0\n  for i = 1, #s do\n    local\
    \ letter = s:sub(i, i)\n    if string.find(letter, '[aeiouy]') or\n      (letter\
    \ == 'y' and i == #s) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  local l = s:lower()\n  for i = 1, s:len()\
    \ do\n    if l:sub(i, i) == 'a' or l:sub(i, i) == 'e' or l:sub(i, i) == 'i' or\
    \ l:sub(i, i) == 'o' or l:sub(i, i) == 'u' then\n      count = count + 1\n   \
    \ end\n  end\n  return count\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      for j = 1, #vowels do\n            if c == vowels[j] then\n           \
    \     count = count + 1\n            end\n        end\n    end\n    if (s:sub(-1,\
    \ -1) == 'y') then\n        count = count + 1\n    end\n    return count\nend",
  "  -- body\nend", "\tlocal count = 0\n\tlocal word_end = string.len(s)\n\tlocal\
    \ vowels = 'aeiouy'\n\t--\n\tfor i = 1, word_end do\n\t\tlocal letter = string.sub(s,\
    \ i, i)\n\t\tlocal pos = string.find(vowels, letter)\n\t\tif pos and (i ~= word_end\
    \ or letter == 'y') then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    return s:gsub('[^aeiouy]', ''):len()\nend", "  if s == nil then return\
    \ nil end\n  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for\
    \ i=1, #s do\n    for j=1, #vowels do\n      if vowels[j] == s:sub(i, i) then\n\
    \        count = count + 1\n      end\n    end\n  end\n  if #s > 1 and s:sub(-1)\
    \ == 'y' then\n    count = count + 1\n  end\n  return count\nend", "    assert(type(s)\
    \ == 'string')\n    local count = 0\n    for c in s:gmatch'.' do\n        if c:lower()\
    \ == 'a' or c:lower() == 'e' or c:lower() == 'i' or c:lower() == 'o' or c:lower()\
    \ == 'u' then\n            count = count + 1\n        end\n    end\n    if count\
    \ ~= 0 and s:sub(-1) == 'y' then\n        count = count + 1\n    end\n    return\
    \ count\nend", "    local acc, last = 0, #s\n    for c in s:gmatch '.' do\n  \
    \      if c:find '[aeiouy]' then\n            acc = acc + 1\n            if c\
    \ == 'y' then\n                last = s:find(c, last)\n            end\n     \
    \   end\n    end\n    if last == #s then\n        acc = acc + 1\n    end\n   \
    \ return acc\nend", "  -- your code here\nend", "  local n = 0\n  for c in s:gmatch(\"\
    [aeiouy]\") do\n    n = n + 1\n  end\n  return n\nend", "    local count = 0\n\
    \    -- for c in s:gmatch('.') do\n    --     if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' or c == 'y' then\n    --         count = count +\
    \ 1\n    --     end\n    -- end\n    for i = 1, #s do\n        if s:sub(i, i)\
    \ == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or\
    \ s:sub(i, i) == 'u' or s:sub(i, i) == 'y' then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    return string.len(string.gsub(s,\
    \ \"[^aeiouy]\", \"\"))\nend", "    local count = 0\n    for i = 1, #s do\n  \
    \      if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i,\
    \ i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y' and i == #s) then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", " \
    \ -- See if the string contains any vowels and if so, count them\n  return s:gsub('[^aeiouy]',\
    \ ''):len()\nend", "    local count = 0\n    for i = 1, #s do\n        local c\
    \ = s:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n            count = count + 1\n        elseif c == 'y' and i ==\
    \ #s then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    -- <write solution here>\nend", "    local num = 0\n    for i=1,#s\
    \ do\n        if s:sub(i,i) == 'a' or s:sub(i,i) == 'e' or s:sub(i,i) == 'i' or\
    \ s:sub(i,i) == 'o' or s:sub(i,i) == 'u' or (s:sub(i,i) == 'y' and i == #s) then\n\
    \            num = num + 1\n        end\n    end\n    return num\nend", "  --\
    \ TODO\nend", "  local count = 0\n  for _, v in ipairs(s:gmatch('[aeiouy]') or\
    \ {}) do\n    count = count + 1\n  end\n  return count\nend", "    s = string.lower(s)\n\
    \    local count = 0\n    local vowels = {a = true, e = true, i = true, o = true,\
    \ u = true}\n    for i = 1, #s do\n        if vowels[s:sub(i, i)] then\n     \
    \       count = count + 1\n        end\n    end\n    if not vowels[s:sub(-1, -1)]\
    \ then\n        count = count - 1\n    end\n    return count\nend", "  local n\
    \ = 0\n  local v = 'aeiouy'\n  local c = string.lower(s)\n  for i = 1,#c do\n\
    \    if string.find(v, string.sub(c, i, i)) then\n      n = n + 1\n    end\n \
    \ end\n  if string.find(string.sub(c, #c, #c), 'y') then\n    n = n - 1\n  end\n\
    \  return n\nend", "    return error('Not implemented')\nend", "  return select(2,\
    \ string.gsub(s, '[aeiou]', ''))\nend", "  -- See vowels_indexes() above.\n  local\
    \ vc = 0\n  local last_vowel = 0\n  for i in ipairs(s) do\n    local v = s:sub(i,\
    \ i)\n    if is_vowel(v) then\n      vc = vc + 1\n      last_vowel = i\n    end\n\
    \  end\n  if last_vowel == #s and s:sub(last_vowel, last_vowel) == 'y' then\n\
    \    return vc + 1\n  else\n    return vc\n  end\nend", "  local pattern = '[aeiouyAEIOUY]'\n\
    \  local n = 0\n  for _ in s:gmatch(pattern) do\n    n = n + 1\n  end\n  return\
    \ n\nend", "\tif s:find(\"[AEIOUaeiou]\") == nil then\n\t\treturn 0\n\telse\n\t\
    \treturn s:gsub(\"[^AEIOUaeiou]\", \"\"):len()\n\tend\nend", "    return 0\nend",
  "  -- your code goes here\nend", "   -- REPLACE ME WITH YOUR IMPLEMENTATION\n  \
    \ local count = 0;\n   local vowels = {'a', 'e', 'i', 'o', 'u'};\n   local index\
    \ = 0;\n   local lastindex = 0;\n   while (index < #s) do\n      for i, j in ipairs(vowels)\
    \ do\n         if (s:sub(index, index) == j) then\n            count = count +\
    \ 1;\n            break;\n         end\n      end\n      index = index + 1;\n\
    \   end\n   for i, j in ipairs(vowels) do\n      if (s:sub(#s, #s) == j) then\n\
    \         count = count + 1;\n         break;\n      end\n   end\n   return count;\n\
    end", "  assert(type(s) == 'string')\n  local count = 0\n  for letter in s:gmatch('[aeiou]')\
    \ do\n    count = count + 1\n  end\n  if string.find(s, 'y$') then\n    count\
    \ = count + 1\n  end\n  return count\nend", "  local count = 0\n  for _, c in\
    \ ipairs({s:lower():byte(1, -1)}) do\n    if ('aeiou'):find(string.char(c)) ~=\
    \ nil then\n      count = count + 1\n    end\n  end\n  local last_char = s:sub(-1)\n\
    \  if last_char == 'y' or last_char == 'Y' then\n    count = count + 1\n  end\n\
    \  return count\nend", "  -- TODO: your code here\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local c = 0\n  local last = false\n  for i = 1, #s do\n\
    \    local ch = s:sub(i, i)\n    if ch == 'y' then\n      last = true\n    elseif\
    \ last then\n      last = false\n      c = c + 1\n    else\n      for _, v in\
    \ ipairs(vowels) do\n        if ch == v then\n          c = c + 1\n          break\n\
    \        end\n      end\n    end\n  end\n  return c\nend", "  -- TODO: implement\
    \ the function\nend", "  local counter = 0\n  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  for i = 1, #s do\n    for j = 1, #vowels do\n      if s:sub(i, i) ==\
    \ vowels[j] then\n        counter = counter + 1\n      end\n    end\n  end\n \
    \ if #s > 1 and s:sub(-1) == 'y' then\n    counter = counter + 1\n  end\n  return\
    \ counter\nend", "  local count = 0\n  for k, v in pairs(VOWELS) do\n    for i\
    \ = 1, string.len(s) do\n      if (s:sub(i, i) == v) then\n        count = count\
    \ + 1\n      end\n    end\n  end\n  return count\nend", "  return s:lower():gsub('[^aeiouy]',\
    \ ''):len()\nend", "  -- Write your code here.\nend", "    s = string.lower(s)\n\
    \    local vowels = 'aeiouy'\n    local count = 0\n    for i = 1, #s do\n    \
    \    local v = string.sub(s, i, i)\n        if string.find(vowels, v) then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", " \
    \ local c = 0\n  for i = 1, #s do\n    local ch = s:sub(i, i)\n    if (ch == 'a'\
    \ or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u') or\n       (ch == 'y' and\
    \ i == #s) then\n      c = c + 1\n    end\n  end\n  return c\nend", "    local\
    \ v = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            v = v\
    \ + 1\n        elseif c == 'y' and i == #s then\n            v = v + 1\n     \
    \   end\n    end\n    return v\nend", "  -- TODO: write your code here\n  local\
    \ v = s:gsub('%w+', 'aeiouAEIOU')\n  local c = v:gsub('[aeiouAEIOU]', '')\n  return\
    \ #v - #c\nend", "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \tfor c in s:gmatch('.') do\n\t\tfor _, v in ipairs(vowels) do\n\t\t\tif c ==\
    \ v then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "  -- TODO: implement this function.\n  local n = 0\n  for i = 1, string.len(s)\
    \ do\n    if string.sub(s, i, i) == 'a' or string.sub(s, i, i) == 'e' or string.sub(s,\
    \ i, i) == 'i' or string.sub(s, i, i) == 'o' or string.sub(s, i, i) == 'u' or\
    \ string.sub(s, i, i) == 'y' and i == string.len(s) then\n      n = n + 1\n  \
    \  end\n  end\n  return n\nend", "    local vowels = 'aeiouy'\n    local count\
    \ = 0\n    for i = 1, #s do\n        local char = s:sub(i, i)\n        if char:find(vowels)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif\
    \ c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or (c == 'y' and i\
    \ == #s) then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\treturn sum\nend", "    local\
    \ count = 0\n    for i=1, #s do\n        if is_vowel(s:sub(i, i)) then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend", "  --\
    \ Must use a string.gsub here\n  local pattern = 'a'\n  local count = 0\n  count\
    \ = s:gsub(pattern, function (c)\n    count = count + 1\n  end)\n  pattern = 'e'\n\
    \  count = s:gsub(pattern, function (c)\n    count = count + 1\n  end)\n  pattern\
    \ = 'i'\n  count = s:gsub(pattern, function (c)\n    count = count + 1\n  end)\n\
    \  pattern = 'o'\n  count = s:gsub(pattern, function (c)\n    count = count +\
    \ 1\n  end)\n  pattern = 'u'\n  count = s:gsub(pattern, function (c)\n    count\
    \ = count + 1\n  end)\n  -- An Edge case where y is a vowel at the end of the\
    \ word.\n  -- This does not consider y at the beginning of the word as a vowel.\n\
    \  -- Example \"Yellow\".\n  local y_vowel = (s:match(\"y$\") == \"y\")\n  --\
    \ Only increase count if \"y\" is a vowel at the end of the word.\n  count = count\
    \ + y_vowel\n  return count\nend", "  local count = 0\n  for i = 1, #s do\n  \
    \  if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i,\
    \ i) == 'o' or s:sub(i, i) == 'u' or s:sub(i, i) == 'y' then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local res = 0\n    s = s:lower()\n\
    \    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or\
    \ s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n      \
    \      res = res + 1\n        end\n    end\n    if s:sub(#s, #s) == 'y' then\n\
    \        res = res + 1\n    end\n    return res\nend", "  local _, c = s:gsub('[aeiouy]',\
    \ '')\n  return c\nend", "  local c = 0\n  for i = 1, string.len(s) do\n    local\
    \ char = string.sub(s, i, i)\n    if is_vowel(char) then\n      c = c + 1\n  \
    \  end\n  end\n  return c\nend", "    local n = 0\n    for i=1, #s do\n      \
    \  if is_vowel(s:sub(i, i)) then\n            n = n + 1\n        end\n    end\n\
    \    return n\nend", "    local l = string.lower(s)\n    return #l - #l:gsub('[aeiouy]',\
    \ '')\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n\
    \  for i=1, #s do\n    local c = s:sub(i, i)\n    if not (s:sub(1, 1) == 'y' and\
    \ i == #s) then\n      for _, v in ipairs(vowels) do\n        if c == v then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "  local s_lower = s:lower()\n  local count = 0\n  for i = 1, #s_lower\
    \ do\n    if s_lower:sub(i, i) == 'a' or s_lower:sub(i, i) == 'e' or s_lower:sub(i,\
    \ i) == 'i' or s_lower:sub(i, i) == 'o' or s_lower:sub(i, i) == 'u' or s_lower:sub(i,\
    \ i) == 'y' then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    -- STUDENT CODE HERE\n    -- Check if string is empty.\n    if s == \"\" then\n\
    \        return 0\n    end\n    -- If it is not then check if first letter of\
    \ string is a vowel\n    local n = 0\n    local t = string.sub(s, 1, 1)\n    if\
    \ t == \"a\" or t == \"e\" or t == \"i\" or t == \"o\" or t == \"u\" then\n  \
    \      n = n + 1\n    end\n    -- If it is not then check if the last letter of\
    \ string is a vowel\n    local l = string.sub(s, -1, -1)\n    if l == \"a\" or\
    \ l == \"e\" or l == \"i\" or l == \"o\" or l == \"u\" then\n        n = n + 1\n\
    \    end\n    -- Check for the remaining letters of the string using recursion\n\
    \    return n + vowels_count(string.sub(s, 2, -2))\nend", "  -- YOUR CODE HERE\n\
    \  local count = 0\n  s=string.lower(s)\n  for i=1,string.len(s) do\n    if string.sub(s,i,i)\
    \ == 'a' or string.sub(s,i,i) == 'e' or string.sub(s,i,i) == 'i' or string.sub(s,i,i)\
    \ == 'o' or string.sub(s,i,i) == 'u' or (string.sub(s,i,i) == 'y' and i == string.len(s))\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "\tlocal\
    \ vowels = 0\n\tfor i=1,string.len(s) do\n\t\tif (s:sub(i,i) == 'a' or s:sub(i,i)\
    \ == 'e' or s:sub(i,i) == 'i' or s:sub(i,i) == 'o' or s:sub(i,i) == 'u' or s:sub(i,i)\
    \ == 'y') then\n\t\t\tvowels = vowels + 1\n\t\tend\n\tend\n\treturn vowels\nend",
  "  local count = 0\n  for i = 1, #s do\n    if vowels[s:sub(i, i)] then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "\tlocal vowels = 'aeiouy'\n\
    \tlocal count = 0\n\tlocal l = s:lower()\n\tfor i = 1, #l do\n\t\tlocal c = l:sub(i,\
    \ i)\n\t\tif c == 'y' and i == #l then\n\t\t\tcount = count + 1\n\t\telseif vowels:find(c)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  return\
    \ string.gsub(s, '([^aeiouyAEIOUY]*)[aeiouyAEIOUY]([^aeiouyAEIOUY]*)', '%1%2')\n\
    end", "    -- code here\nend", "    -- TODO: implement this function.\n    return\
    \ nil\nend", "    -- TODO: implement this function\nend", "  assert(type(s) ==\
    \ 'string')\n  -- TODO\nend", "   -- implement the function here\n   return nil\n\
    end", "  return #s:gsub('[^aeiouy]', '')\nend", "    if not s then return 0 end\n\
    \    return string.gsub(s, '[aeiou]', '')\nend", "    local count = 0\n    local\
    \ v = {'a', 'e', 'i', 'o', 'u'}\n    for i=1,#s do\n        for j=1,#v do\n  \
    \          if s:sub(i,i) == v[j] then\n                count = count + 1\n   \
    \         end\n        end\n    end\n    return count\nend", "\tlocal n = 0\n\t\
    for i = 1, #s do\n\t\tif s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i,\
    \ i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or s:sub(i, i) == 'y'\
    \ then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend", "    local vowel_str\
    \ = \"aeiouy\"\n    local i = 0\n    local count = 0\n    while (i < #s) do\n\
    \        local c = s:sub(i, i)\n        if vowel_str:find(c) then\n          \
    \  count = count + 1\n        end\n        i = i + 1\n    end\n    return count\n\
    end", "   local n = 0\n   for c in s:gmatch('[aeiou]') do\n      n = n + 1\n \
    \  end\n   if s:match('[^aeiou]y$') then\n      n = n + 1\n   end\n   return n\n\
    end", "    local c = 0\n    local v = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1,\
    \ s:len() do\n        if (i == s:len() and s:sub(i, i) == 'y') or table.contains(v,\
    \ s:sub(i, i)) then\n            c = c + 1\n        end\n    end\n    return c\n\
    end", "    local n = 0\n    local seenY = false\n    for i=1, #s do\n        local\
    \ c = s:sub(i,i)\n        if 'aeiouAEIOU' :find(c) then\n            n = n + 1\n\
    \            if c:lower() == 'y' then\n                seenY = true\n        \
    \    end\n        end\n    end\n    return n + (seenY and #s > 1 and 1 or 0)\n\
    end", "  local count = 0\n  local end_of_string = string.len(s)\n  for i = 1,\
    \ end_of_string do\n    if string.sub(s, i, i) == 'a' or string.sub(s, i, i) ==\
    \ 'e' or string.sub(s, i, i) == 'i' or string.sub(s, i, i) == 'o' or string.sub(s,\
    \ i, i) == 'u' or (string.sub(s, i, i) == 'y' and i == end_of_string) then\n \
    \     count = count + 1\n    end\n  end\n  return count\nend", "  -- YOUR CODE\
    \ HERE\n  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local counter\
    \ = 0\n  for i=1, #s do\n    if (s:sub(i,i) == \"y\") then\n      if (i == #s)\
    \ then\n        counter = counter + 1\n      end\n    else\n      for j=1, #vowels\
    \ do\n        if (s:sub(i,i) == vowels[j]) then\n          counter = counter +\
    \ 1\n        end\n      end\n    end\n  end\n  return counter\nend", "  local\
    \ count = 0\n  local s = s:lower()\n  for i = 1, #s do\n    if string.find('aeiouy',\
    \ s:sub(i, i)) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    return 1\nend", "    local vowels = 0\n    for i=1, #s do\n       \
    \ local c = s:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o'\
    \ or c == 'u' or\n                (c == 'y' and i == #s) then\n            vowels\
    \ = vowels + 1\n        end\n    end\n    return vowels\nend", "\ts = s:lower()\n\
    \treturn (s:gsub('[aeiouy]', ''))\nend", "   -- TODO: return the correct value\n\
    \   return 0\nend", "    return 0\nend", "  return #s:gsub('[^aeiouAEIOU]', '')\n\
    end", "  local i = 0\n  for x in s:gmatch('[aeiou]') do\n    i = i + 1\n  end\n\
    \  return i\nend", "    local count = 0\n    for c in s:gmatch\"a\" do count =\
    \ count + 1 end\n    for c in s:gmatch\"e\" do count = count + 1 end\n    for\
    \ c in s:gmatch\"i\" do count = count + 1 end\n    for c in s:gmatch\"o\" do count\
    \ = count + 1 end\n    for c in s:gmatch\"u\" do count = count + 1 end\n    for\
    \ c in s:gmatch\"y\" do count = count + 1 end\n    return count\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if (string.find('aeiouy', string.lower(s:sub(i,\
    \ i)), 1, true)) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local vowels = {a = true, e = true, i = true, o = true, u = true}\n \
    \ local count = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if vowels[c:lower()]\
    \ then\n      count = count + 1\n    end\n  end\n  if s:sub(-1):lower() == 'y'\
    \ then\n    count = count + 1\n  end\n  return count\nend", "  -- TODO: Implement\
    \ this function.\n  s = string.lower(s)\n  local vowel_count = 0\n  for i=1,#s\
    \ do\n    local letter = string.sub(s,i,i)\n    if letter == 'a' or letter ==\
    \ 'e' or letter == 'i' or letter == 'o' or letter == 'u' then\n      vowel_count\
    \ = vowel_count + 1\n    end\n  end\n  if string.sub(s,#s,#s) == 'y' then\n  \
    \  vowel_count = vowel_count + 1\n  end\n  return vowel_count\nend", "    local\
    \ i = 0\n    for c in s:gmatch(\"[aeiouy]\") do\n        i = i + 1\n    end\n\
    \    return i\nend", "\tlocal vowels = {['a'] = 1, ['e'] = 1, ['i'] = 1, ['o']\
    \ = 1, ['u'] = 1, ['y'] = 1}\n\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif vowels[s:sub(i,\
    \ i)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tif vowels[s:sub(-1, -1)]\
    \ then\n\t\tcount = count + 1\n\tend\n\treturn count\nend", "    local n = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or\
    \ s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n      \
    \      n = n + 1\n        end\n    end\n    if s:sub(-1, -1) == 'y' then\n   \
    \     n = n + 1\n    end\n    return n\nend", "    -- your code here\nend", " \
    \   return 0\nend", "    if #s == 0 then\n        return 0\n    elseif string.find('aeiouy',\
    \ s:sub(1, 1)) ~= nil then\n        return 1 + vowels_count(s:sub(2))\n    else\n\
    \        return vowels_count(s:sub(2))\n    end\nend", "  assert(type(s) == 'string')\n\
    \  return s:gsub('[^aeiouAEIOU]', ''):len()\nend", "  local count = 0\n  for w\
    \ in s:gmatch(\"%a\") do\n    if w == 'a' or w == 'e' or w == 'i' or w == 'o'\
    \ or w == 'u' then\n      count = count + 1\n    end\n  end\n  local last_char\
    \ = s:sub(-1)\n  if last_char == 'y' then\n    count = count + 1\n  end\n  return\
    \ count\nend", "    local found = 0\n    local str = string.lower(s)\n    for\
    \ i = 1, string.len(str) do\n        if string.find('aeiouy', string.sub(str,\
    \ i, i)) then\n            found = found + 1\n        end\n    end\n    return\
    \ found\nend", "    local n = 0\n    local c = s:sub(1, 1)\n    if c == 'a' or\
    \ c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n        n = n + 1\n    end\n\
    \    for i = 2, s:len() do\n        local c = s:sub(i, i)\n        if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            n = n + 1\n\
    \        end\n        local p = s:sub(i - 1, i - 1)\n        if p == 'a' or p\
    \ == 'e' or p == 'i' or p == 'o' or p == 'u' then\n            n = n - 1\n   \
    \     end\n    end\n    return n\nend", "  -- TODO\nend", "  -- TODO\nend", " \
    \   local count = 0\n    for v in s:gmatch('[aeiou]') do\n        count = count\
    \ + 1\n    end\n    if s:sub(-1) == 'y' then\n        count = count + 1\n    end\n\
    \    return count\nend", "\t-- your implementation here\n\tlocal s = string.lower(s)\n\
    \tlocal str = {}\n\tfor i=1,#s do\n\t\tstr[i] = string.sub(s,i,i)\n\tend\n\tlocal\
    \ num = 0\n\tfor i=1,#str do\n\t\tif (str[i] == 'a') or (str[i] == 'e') or (str[i]\
    \ == 'i') or (str[i] == 'o') or (str[i] == 'u') or (str[i] == 'y') then\n\t\t\t\
    num = num + 1\n\t\tend\n\tend\n\tif str[#str] == 'y' then\n\t\tnum = num - 1\n\
    \tend\n\treturn num\nend", "    return count_matches(s, '[aeiou]') + count_matches(s,\
    \ 'y$')\nend", "    local vowels = \"aeiou\"\n    local count = 0\n    local last\
    \ = string.sub(s, string.len(s))\n    for i = 1, string.len(s) do\n        if\
    \ string.find(vowels, string.sub(s, i, i)) then\n            count = count + 1\n\
    \        end\n    end\n    if last == \"y\" then\n        count = count + 1\n\
    \    end\n    return count\nend", "  s = s:lower()\n  if s:sub(-1) == 'y' then\n\
    \    s = s:sub(1, -2) .. 'i'\n  end\n  return #s:gsub('[aeiou]', '')\nend", " \
    \   -- TODO: Implementation\nend", "  local count = 0\n  local vowels = 'aeiouy'\n\
    \  local last_vowel = 'y'\n  for letter in s:lower():gmatch('%a') do\n    for\
    \ _, vowel in ipairs(vowels) do\n      if letter == vowel then\n        count\
    \ = count + 1\n        last_vowel = vowel\n      end\n    end\n  end\n  if last_vowel\
    \ == 'y' then\n    return count - 1\n  else\n    return count\n  end\nend", " \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for v = 1, #vowels\
    \ do\n    for c = 1, #s do\n      if s:sub(c, c) == vowels[v] then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend", "  return s:gsub('[^aeiouy]',\
    \ ''):len()\nend", "  local vowels = {a = true, e = true, i = true, o = true,\
    \ u = true}\n  local count = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n\
    \    if vowels[c:lower()] then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  return -1\nend", "    local count = 0\n    for c in s:gmatch\"\
    .\" do\n        if c:lower() == 'a' or c:lower() == 'e' or c:lower() == 'i' or\
    \ c:lower() == 'o' or c:lower() == 'u' then\n            count = count + 1\n \
    \       end\n    end\n    if count == 0 then return 0 end\n    local last = s:sub(-1)\n\
    \    if last == 'y' then\n        count = count + 1\n    end\n    return count\n\
    end", "    local result = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a'\
    \ or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i,\
    \ i) == 'u' or s:sub(i, i) == 'y' then\n            result = result + 1\n    \
    \    end\n    end\n    return result\nend", "    local letters = s:lower()\n \
    \   local count = 0\n    for i = 1, #letters do\n        if letters:sub(i, i)\
    \ == 'a' or letters:sub(i, i) == 'e' or letters:sub(i, i) == 'i' or letters:sub(i,\
    \ i) == 'o' or letters:sub(i, i) == 'u' then\n            count = count + 1\n\
    \        end\n    end\n    if letters:sub(#letters, #letters) == 'y' then\n  \
    \      count = count + 1\n    end\n    return count\nend", "    s = string.lower(s)\n\
    \    local count = 0\n    for i = 1, string.len(s) do\n        if string.sub(s,\
    \ i, i) == 'a' or string.sub(s, i, i) == 'e' or string.sub(s, i, i) == 'i' or\
    \ string.sub(s, i, i) == 'o' or string.sub(s, i, i) == 'u' then\n            count\
    \ = count + 1\n        end\n    end\n    if string.sub(s, string.len(s), string.len(s))\
    \ == 'y' then\n        count = count + 1\n    end\n    return count\nend", " \
    \ local count = 0\n  for i = 1, #s do\n    if is_vowel(s:sub(i, i)) then\n   \
    \   count = count + 1\n    end\n  end\n  return count\nend", "   local count =\
    \ 0\n   s = s:lower()\n   local last_vowel = ''\n   for i = 1, #s do\n      local\
    \ c = s:sub(i, i)\n      if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n         count = count + 1\n         last_vowel = c\n      end\n\
    \   end\n   if last_vowel == 'y' then\n      count = count + 1\n   end\n   return\
    \ count\nend", "\tlocal n = 0\n\tlocal s = string.lower(s)\n\t-- iterate over\
    \ all characters in the string\n\tfor i = 1, string.len(s) do\n\t\tlocal c = string.sub(s,\
    \ i, i)\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \t\t\tn = n + 1\n\t\tend\n\tend\n\t-- check if the last character is a 'y'\n\t\
    local last_c = string.sub(s, string.len(s), string.len(s))\n\tif last_c == 'y'\
    \ then\n\t\tn = n + 1\n\tend\n\treturn n\nend", "    -- body\nend", "  local cnt\
    \ = 0\n  s = s:lower()\n  for i=1, #s do\n    if (s:sub(i,i) == 'a' or s:sub(i,i)\
    \ == 'e' or s:sub(i,i) == 'i' or s:sub(i,i) == 'o' or s:sub(i,i) == 'u') then\n\
    \      cnt = cnt + 1\n    end\n  end\n  if (s:sub(#s,#s) == 'y') then\n    cnt\
    \ = cnt + 1\n  end\n  return cnt\nend", "    local vowels = 'AEIOUYaeiouy'\n \
    \   local count = 0\n    for i = 1, #s do\n        if vowels:find(s:sub(i, i))\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local n = 0\n  -- Here I assume that the string 's' is a valid word.\n\
    \  -- That is, it has at least one character.\n  if not s then\n    return 0\n\
    \  end\n  -- The string s ends with a vowel?\n  if (string.sub(s, -1) == 'a')\
    \ or\n     (string.sub(s, -1) == 'e') or\n     (string.sub(s, -1) == 'i') or\n\
    \     (string.sub(s, -1) == 'o') or\n     (string.sub(s, -1) == 'u') or\n    \
    \ (string.sub(s, -1) == 'y') then\n    n = n + 1\n  end\n  if string.len(s) >\
    \ 1 then\n    return n + vowels_count(string.sub(s, 1, -2))\n  else\n    return\
    \ n\n  end\nend", "   return s:gsub('[^aeiouy]', ''):len()\nend", "   local n\
    \ = 0\n   for c in s:gmatch('[aeiouy]') do\n      n = n + 1\n   end\n   return\
    \ n\nend", "    local function is_vowel(c)\n        return string.find('aeiouy',\
    \ c)\n    end\n    local n = 0\n    for i=1, #s do\n        local c = string.sub(s,\
    \ i, i)\n        if is_vowel(c) then\n            n = n + 1\n        end\n   \
    \ end\n    return n\nend", "    local num_vowels = 0\n    local end_y = false\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        local lc = c:lower()\n\
    \        if lc == 'a' or lc == 'e' or lc == 'i' or lc == 'o' or lc == 'u' then\n\
    \            num_vowels = num_vowels + 1\n        elseif lc == 'y' then\n    \
    \        end_y = true\n        end\n    end\n    if end_y then\n        num_vowels\
    \ = num_vowels + 1\n    end\n    return num_vowels\nend", "  local n = 0\n  for\
    \ i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' or\n        (c == 'y' and i == #s) then\n      n\
    \ = n + 1\n    end\n  end\n  return n\nend", "    local vowel = { a = true, e\
    \ = true, i = true, o = true, u = true, y = true }\n    local n = 0\n    local\
    \ last = string.sub(s, #s, #s)\n    for i = 1, #s do\n        local c = string.sub(s,\
    \ i, i)\n        if c == 'y' and i ~= #s then\n            -- y is not a vowel,\
    \ unless it is at the end of the word\n        elseif vowel[c] then\n        \
    \    n = n + 1\n        end\n    end\n    return n\nend", "  local total = 0\n\
    \  local len = string.len(s)\n  local y = string.sub(s, len, len)\n  if y == 'y'\
    \ then\n    total = total + 1\n  end\n  for i = 1, len - 1 do\n    local c = string.sub(s,\
    \ i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      total = total + 1\n    end\n  end\n  return total\nend", "  local n = 0\n\
    \  for c in s:gmatch('[aeiouy]') do\n    n = n + 1\n  end\n  return n\nend", " \
    \   local cnt = 0\n    for v in s:gmatch('[aeiouy]') do\n        cnt = cnt + 1\n\
    \    end\n    if (s:sub(-1) == 'y') then\n        cnt = cnt + 1\n    end\n   \
    \ return cnt\nend", "    -- write your code here\nend", "    -- TODO: Implement\
    \ me\nend", "  local cnt = 0\n  for _, ch in ipairs{'a', 'e', 'i', 'o', 'u'} do\n\
    \    cnt = cnt + s:lower():count(ch)\n  end\n  if s:lower():find('y$') then\n\
    \    cnt = cnt + 1\n  end\n  return cnt\nend", "  return nil\nend", "    local\
    \ i = 0\n    for c in s:gmatch('[aeiouy]') do\n        i = i + 1\n    end\n  \
    \  return i\nend", "  if type(s) ~= 'string' then\n    error('Input must be a\
    \ string', 2)\n  end\n  local counter = 0\n  local vowels = { 'a', 'e', 'i', 'o',\
    \ 'u' }\n  -- check the last letter\n  if s:sub(-1) == 'y' then\n    table.insert(vowels,\
    \ 'y')\n  end\n  for i = 1, #s do\n    local letter = s:sub(i, i)\n    for j =\
    \ 1, #vowels do\n      if letter == vowels[j] then\n        counter = counter\
    \ + 1\n      end\n    end\n  end\n  return counter\nend", "    return #s:gsub('[^aeiouy]',\
    \ '')\nend", "\tlocal count = 0\n\tlocal vowels = {\n\t\ta = true,\n\t\te = true,\n\
    \t\ti = true,\n\t\to = true,\n\t\tu = true,\n\t\ty = true\n\t}\n\tfor i = 1, #s\
    \ do\n\t\tif vowels[string.lower(s:sub(i, i))] then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "  -- TODO: implement this function\nend",
  "    s = string.lower(s)\n    local count = 0\n    for i = 1, string.len(s) do\n\
    \        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or\
    \ s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n            count = count + 1\n\
    \        end\n    end\n    if s:sub(string.len(s), string.len(s)) == 'y' then\n\
    \        count = count + 1\n    end\n    return count\nend", "\ts = s:lower()\n\
    \tlocal count = 0\n\tlocal i = 0\n\twhile i < #s do\n\t\tif (s:sub(i, i) == 'a')\
    \ or (s:sub(i, i) == 'e') or (s:sub(i, i) == 'i') or (s:sub(i, i) == 'o') or (s:sub(i,\
    \ i) == 'u') then\n\t\t\tcount = count + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    if (s:sub(#s, #s) == 'y') then\n\t\tcount = count + 1\n\tend\n\treturn count\n\
    end", "\tlocal i = 1\n\tlocal count = 0\n\twhile i <= string.len(s) do\n\t\tif\
    \ string.find('aeiouy', string.sub(s, i, i)) then\n\t\t\tcount = count + 1\n\t\
    \tend\n\t\ti = i + 1\n\tend\n\treturn count\nend", "    local function is_vowel(c)\n\
    \        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n    \
    \        c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U' or\n       \
    \     c == 'y' or c == 'Y' then\n            return true\n        else\n     \
    \       return false\n        end\n    end", "    -- your code here\nend", " \
    \   local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local\
    \ count = 0\n    for i = 1, #s do\n        if i == #s and s[i] == 'y' then\n \
    \           count = count + 1\n        elseif vowels[s[i]:lower()] then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  \
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i =\
    \ 1, #s do\n        local c = s:sub(i, i)\n        for j = 1, #vowels do\n   \
    \         if c == vowels[j] then\n                count = count + 1\n        \
    \    end\n        end\n    end\n    return count\nend", "    local counter = 0\n\
    \    local last_was_y = false\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \            counter = counter + 1\n        elseif c == 'y' then\n           \
    \ if i == #s then\n                counter = counter + 1\n            end\n  \
    \          last_was_y = true\n        else\n            last_was_y = false\n \
    \       end\n    end\n    return counter\nend", "    local n = 0\n    for c in\
    \ s:gmatch(\"[aeiouy]\") do\n        n = n + 1\n    end\n    return n\nend", " \
    \ -- Your code here\nend", "    return 0\nend", "\tlocal count = 0\n\tfor c in\
    \ s:gmatch('[aeiouy]') do\n\t\tcount = count + 1\n\tend\n\treturn count\nend",
  "    -- ...\nend", "  local count = 0\n  local v_count = 0\n  -- itarate through\
    \ all characters of the string\n  for i = 1, #s do\n    -- if it is a vowel or\
    \ the last character of the string\n    if s:sub(i, i) == 'a' or s:sub(i, i) ==\
    \ 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or s:sub(i,\
    \ i) == 'y' and i == #s then\n      -- add to the counter\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  if type(s) ~= 'string' then return\
    \ 0 end\n  return string.gsub(s:lower(), '[^aeiouy]', ''):len()\nend", "    --\
    \ your code goes here\nend", "    return string.gsub(s, '[^aeiouy]', ''):len()\n\
    end", "   local count = 0\n   s = s:lower()\n   if (string.sub(s, string.len(s),\
    \ string.len(s)) == 'y') then\n      count = count + 1\n   end\n   for i=1, string.len(s)\
    \ do\n      if (string.find('aeiou', string.sub(s, i, i)) ~= nil) then\n     \
    \    count = count + 1\n      end\n   end\n   return count\nend", "    -- you\
    \ are required to write this function\n    -- do not return anything\nend", " \
    \ return #s:gsub('[^aeiouy]', '')\nend", "\tlocal n, i = 0, 1\n\twhile i <= #s\
    \ do\n\t\tif s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or\
    \ s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y' and i == #s)\
    \ then\n\t\t\tn = n + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn n\nend", "  \
    \  -- your code here\nend", "  local cnt = 0\n  for i = 1, #s do\n    local c\
    \ = s:sub(i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n      cnt = cnt + 1\n    elseif c == 'y' and i == #s then\n      cnt =\
    \ cnt + 1\n    end\n  end\n  return cnt\nend", "    s = string.lower(s)\n    return\
    \ string.len(string.gsub(s, '[^aeiouy]', ''))\nend", "    local count = 0\n  \
    \  for letter in s:gmatch(\"%a\") do\n        if letter == 'a' or letter == 'e'\
    \ or letter == 'i' or letter == 'o' or letter == 'u' or letter == 'y' then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
