name: HumanEval_108_count_nums
language: lua
prompt: "-- Write a function count_nums which takes a table of integers and returns\n\
  -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
  \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
  \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
  -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
  \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2, 0}),\
  \ 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
  \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
  \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
  \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local nums = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n\
    \    for d in tostring(math.abs(n)):gmatch(\"%d\") do\n      sum = sum + tonumber(d)\n\
    \    end\n    if sum > 0 then\n      nums = nums + 1\n    end\n  end\n  return\
    \ nums\nend", "    local sum = 0\n    for _, v in ipairs(arr) do\n        local\
    \ sum_of_digits = sum_of_signed_digits(v)\n        if sum_of_digits > 0 then\n\
    \            sum = sum + 1\n        end\n    end\n    return sum\nend", "  local\
    \ count = 0\n  for i = 1, #arr do\n    local sum = 0\n    local num = arr[i]\n\
    \    while num ~= 0 do\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local cnt = 0\n    for i = 1, #arr do\n        if\
    \ sum_digits(arr[i]) > 0 then\n            cnt = cnt + 1\n        end\n    end\n\
    \    return cnt\nend", "    local total = 0\n    for i, v in ipairs(arr) do\n\
    \        if v ~= 0 then\n            local sum = 0\n            local a = math.abs(v)\n\
    \            while a > 0 do\n                sum = sum + (a % 10)\n          \
    \      a = math.floor(a / 10)\n            end\n            if sum > 0 then\n\
    \                total = total + 1\n            end\n        end\n    end\n  \
    \  return total\nend", "  local count = 0\n  for i = 1, #arr do\n    if signed_digits_sum(arr[i])\
    \ > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ local n = 0\n  for _, v in ipairs(arr) do\n    local dsum = 0\n    for d in\
    \ string.gmatch(tostring(v), '.') do\n      dsum = dsum + tonumber(d)\n    end\n\
    \    if dsum > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend", "  \
    \  local sum = 0\n    for i = 1, #arr do\n        local num = arr[i]\n       \
    \ if num == 0 then\n            sum = sum + 1\n        else\n            num =\
    \ math.abs(num)\n            while num > 0 do\n                sum = sum + num\
    \ % 10\n                num = math.floor(num / 10)\n            end\n        end\n\
    \    end\n    return sum\nend", end, "\tlocal count = 0\n\tfor i = 1, #arr do\n\
    \t\tlocal number = arr[i]\n\t\tlocal sum = 0\n\t\tif number < 0 then\n\t\t\tsum\
    \ = sum + number\n\t\t\tnumber = -number\n\t\tend\n\t\twhile number > 0 do\n\t\
    \t\tsum = sum + number % 10\n\t\t\tnumber = math.floor(number / 10)\n\t\tend\n\
    \t\tif sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    local count = 0\n    for _, i in ipairs(arr) do\n        if math.abs(i)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local counter = 0\n    for i = 1, #arr do\n        local num = math.abs(arr[i])\n\
    \        local sum = 0\n        while num > 0 do\n            sum = sum + num\
    \ % 10\n            num = math.floor(num / 10)\n        end\n        if sum >\
    \ 0 then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend", end, "    -- Your code here\nend", "  local count = 0\n  for\
    \ _, val in ipairs(arr) do\n    local num = math.abs(val)\n    local sum = 0\n\
    \    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local result = 0\n    for _, num in ipairs(arr) do\n\
    \        local abs = math.abs(num)\n        local sum = 0\n        while abs >\
    \ 0 do\n            sum = sum + (abs % 10)\n            abs = abs // 10\n    \
    \    end\n        if sum > 0 then\n            result = result + 1\n        end\n\
    \    end\n    return result\nend", "\tlocal count = 0\n\tfor _, n in ipairs(arr)\
    \ do\n\t\tlocal sum = 0\n\t\tfor d in n:gmatch('-?%d') do\n\t\t\tsum = sum + tonumber(d)\n\
    \t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "  local function sum_digit(n)\n    local n = math.abs(n)\n   \
    \ local sum = 0\n    while n > 0 do\n      sum = sum + (n % 10)\n      n = math.floor(n\
    \ / 10)\n    end\n    return sum\n  end\n  local count = 0\n  for i = 1, #arr\
    \ do\n    if sum_digit(arr[i]) > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    -- YOUR CODE HERE\n    local count = 0\n    for _,\
    \ v in ipairs(arr) do\n        local n = v < 0 and -v or v\n        local sum\
    \ = 0\n        while n > 0 do\n            sum = sum + n % 10\n            n =\
    \ math.floor(n / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  local count =\
    \ 0\n  for k, v in pairs(arr) do\n    count = count + 1\n  end\n  return count\n\
    end", "\treturn nil\nend", "\tlocal count = 0\n\tfor _, v in ipairs(arr) do\n\t\
    \t-- TODO: implement\n\tend\n\treturn count\nend", "    local cnt = 0\n    for\
    \ _, num in ipairs(arr) do\n        local signed_digits = utils.signed_digits(num)\n\
    \        local sum = 0\n        for _, digit in ipairs(signed_digits) do\n   \
    \         sum = sum + digit\n        end\n        if sum > 0 then\n          \
    \  cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "    local res =\
    \ 0\n    for _, n in ipairs(arr) do\n        if sum_digits(n) > 0 then\n     \
    \       res = res + 1\n        end\n    end\n    return res\nend", "    local\
    \ cnt = 0\n    for _, v in ipairs(arr) do\n        if sum_digits(v) > 0 then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local digits = v < 0 and {v % 10}\
    \ or {}\n    v = math.abs(v)\n    while v > 0 do\n      table.insert(digits, v\
    \ % 10)\n      v = math.floor(v / 10)\n    end\n    local sum = 0\n    for _,\
    \ d in ipairs(digits) do\n      sum = sum + d\n    end\n    if sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local count\
    \ = 0\n    for i = 1, #arr do\n        if signed_digits_sum(arr[i]) > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local sum = 0\n    for _, num in ipairs(arr) do\n        local curr = num\n\
    \        local sum_digits = 0\n        while curr ~= 0 do\n            sum_digits\
    \ = sum_digits + (curr % 10)\n            curr = math.floor(curr / 10)\n     \
    \   end\n        if sum_digits > 0 then\n            sum = sum + 1\n        end\n\
    \    end\n    return sum\nend", "    local count = 0\n    for _, v in ipairs(arr)\
    \ do\n        local sum = 0\n        while v ~= 0 do\n            local digit\
    \ = v % 10\n            sum = sum + digit\n            v = (v - digit) / 10\n\
    \        end\n        if sum > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "\t-- compute the sum of digits for all\
    \ elements in the table\n\treturn fold(\n\t\tarr,\n\t\t0,\n\t\tfunction(acc, n)\n\
    \t\t\treturn\n\t\t\t\t-- if n is negative, then the first signed digit is negative\n\
    \t\t\t\tif n < 0 then\n\t\t\t\t\t-- get the sign of n\n\t\t\t\t\tlocal sign =\
    \ -1\n\t\t\t\t\t-- remove the sign of n\n\t\t\t\t\tn = -n\n\t\t\t\tend\n\t\t\t\
    \t-- add the sum of digits\n\t\t\t\t+ acc\n\t\t\t\t+ sign * fold(\n\t\t\t\t\t\
    -- digits of n\n\t\t\t\t\tto_digits(n),\n\t\t\t\t\t0,\n\t\t\t\t\tfunction(acc,\
    \ d)\n\t\t\t\t\t\treturn acc + d\n\t\t\t\t\tend\n\t\t\t\t)\n\t\tend\n\t)\nend",
  "    local cnt = 0\n    for _, v in ipairs(arr) do\n        if sum_digits(v) > 0\
    \ then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend",
  "    local count = 0\n    for _, n in ipairs(arr) do\n        if sum_digits(n) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for _, num in ipairs(arr) do\n    local sum = 0\n\
    \    while num ~= 0 do\n      sum = sum + math.abs(num % 10)\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  -- #### Your code starts here ####\n  local sum = 0\n\
    \  for _,v in pairs(arr) do\n    if v < 0 then\n      sum = sum + sum_digits(-v)\n\
    \    else\n      sum = sum + sum_digits(v)\n    end\n  end\n  return sum\n  --\
    \ #### Your code ends here ####\nend", "  local count = 0\n  for _, x in ipairs(arr)\
    \ do\n    local sum = 0\n    local num = x\n    while num ~= 0 do\n      sum =\
    \ sum + math.abs(num % 10)\n      num = math.floor(num / 10)\n    end\n    if\
    \ sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    local count = 0\n    for _, i in ipairs(arr) do\n        if (i < 0) then\n\
    \            i = -i\n        end\n        local sum = 0\n        while (i > 0)\
    \ do\n            sum = sum + i % 10\n            i = math.floor(i / 10)\n   \
    \     end\n        if (sum > 0) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local c = 0\n    for _, v in ipairs(arr)\
    \ do\n        local s = 0\n        if v < 0 then v = -v end\n        while v >\
    \ 0 do\n            s = s + v % 10\n            v = math.floor(v / 10)\n     \
    \   end\n        if s > 0 then c = c + 1 end\n    end\n    return c\nend", " \
    \ local count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    local sum =\
    \ 0\n    while n ~= 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  -- YOUR CODE HERE\n  local counter = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > 0 then\n      sum = 0\n      for digit in tostring(arr[i]):gmatch(\"\
    %d\") do\n        sum = sum + tonumber(digit)\n      end\n      if sum > 0 then\n\
    \        counter = counter + 1\n      end\n    else\n      sum = 0\n      for\
    \ digit in tostring(arr[i]):gmatch(\"%d\") do\n        sum = sum + tonumber(digit)\n\
    \      end\n      if sum < 0 then\n        counter = counter + 1\n      end\n\
    \    end\n  end\n  return counter\nend", "  return #arr\nend", "    local count\
    \ = 0\n    for _, number in ipairs(arr) do\n        local sum = 0\n        local\
    \ abs_number = math.abs(number)\n        while abs_number > 0 do\n           \
    \ sum = sum + abs_number % 10\n            abs_number = math.floor(abs_number\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    -- CODE HERE --\nend", " \
    \ local count = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    for _,\
    \ d in ipairs(split_digits(v)) do\n      sum = sum + d\n    end\n    if sum >\
    \ 0 then\n      count = count + 1\n    end\n  end\n  return count\nend", "  --\
    \ Your code here\nend", "    local sum = 0\n    for _, v in ipairs(arr) do\n \
    \       local v = tostring(v)\n        if v:sub(1, 1) == '-' then\n          \
    \  v = v:sub(2)\n        end\n        local s = 0\n        for i = 1, #v do\n\
    \            s = s + tonumber(v:sub(i, i))\n        end\n        if s > 0 then\n\
    \            sum = sum + 1\n        end\n    end\n    return sum\nend", "    --\
    \ your code goes here\nend", "    local count = 0\n    for i, v in ipairs(arr)\
    \ do\n        -- TODO: write your code here\n    end\n    return count\nend",
  "  local cnt = 0\n  for _, v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n\
    \      cnt = cnt + 1\n    end\n  end\n  return cnt\nend", "  return #l.filter(function(x)\n\
    \    return l.sum(l.map(math.abs, l.digits(x))) > 0\n  end, arr)\nend", "  local\
    \ count = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n    local a = math.abs(n)\n\
    \    while a > 0 do\n      sum = sum + a % 10\n      a = math.floor(a / 10)\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  for _, v in ipairs(arr) do\n    local sum\
    \ = 0\n    for s in tostring(math.abs(v)):gmatch('%d') do\n      sum = sum + tonumber(s)\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local sum = 0\n  for _, num in ipairs(arr) do\n    sum = sum\
    \ + sum_of_digits(num)\n  end\n  return sum\nend", "  local count = 0\n  for i,\
    \ v in ipairs(arr) do\n    count = count + is_pos(v)\n  end\n  return count\n\
    end", "    local count = 0\n    for i = 1, #arr do\n        if sum_digits(arr[i])\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local result = 0\n  for _, e in ipairs(arr) do\n    if sum_digits(e)\
    \ > 0 then\n      result = result + 1\n    end\n  end\n  return result\nend",
  "    local function sum_digits(num)\n        local sum = 0\n        for c in tostring(num):gmatch('%d')\
    \ do\n            sum = sum + tonumber(c)\n        end\n        return sum\n \
    \   end", "    local count = 0\n    for i = 1, #arr do\n        local sum = 0\n\
    \        local num = arr[i]\n        if num < 0 then\n            num = -num\n\
    \        end\n        while num > 0 do\n            sum = sum + num % 10\n   \
    \         num = math.floor(num / 10)\n        end\n        if sum > 0 then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", " \
    \   local function negative(x)\n        return x > 0 and x or -x\n    end\n  \
    \  local function digits_sum(x)\n        local sum = 0\n        while x ~= 0 do\n\
    \            sum = sum + (x % 10)\n            x = math.floor(x / 10)\n      \
    \  end\n        return sum\n    end\n    local function check(x)\n        return\
    \ digits_sum(negative(x)) > 0\n    end\n    local count = 0\n    for _, x in ipairs(arr)\
    \ do\n        if check(x) then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend", "  -- YOUR CODE HERE\n  local function sign_digits(num)\n\
    \    local t = {}\n    local i = 0\n    if num < 0 then\n      table.insert(t,\
    \ num)\n      num = -num\n    end\n    while num > 0 do\n      table.insert(t,\
    \ num % 10)\n      num = math.floor(num / 10)\n    end\n    return t\n  end\n\
    \  local count = 0\n  for _, num in ipairs(arr) do\n    local sum = 0\n    for\
    \ _, s_digit in ipairs(sign_digits(num)) do\n      sum = sum + s_digit\n    end\n\
    \    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  return nil\nend", "  return count(arr, function(i)\n    local sum = 0\n\
    \    for _,v in ipairs(signed_digits(i)) do\n      sum = sum + v\n    end\n  \
    \  return sum > 0\n  end)\nend", "    local count = 0\n    for _, v in ipairs(arr)\
    \ do\n        if is_positive(math.abs(v)) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local nums = 0\n    for i\
    \ = 1, #arr do\n        if sum_digits(arr[i]) > 0 then\n            nums = nums\
    \ + 1\n        end\n    end\n    return nums\nend", "    local count = 0\n   \
    \ for i = 1, #arr do\n        if sign_digits_sum(arr[i]) > 0 then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend", "  local cnt\
    \ = 0\n  for i = 1, #arr do\n    local sum = 0\n    local num = arr[i]\n    if\
    \ num < 0 then\n      num = -num\n      sum = -1\n    end\n    while num > 0 do\n\
    \      sum = sum + (num % 10)\n      num = math.floor(num / 10)\n    end\n   \
    \ if sum > 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend", " \
    \ -- TODO: Write your code here\n  local count = 0\n  for k, v in pairs(arr) do\n\
    \    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for _, num in ipairs(arr) do\n    -- YOUR CODE HERE\n\
    \  end\n  return count\nend", "  local count = 0\n  for i,v in ipairs(arr) do\n\
    \    if sum_digits(v) > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    local counter = 0\n    for i, j in pairs(arr) do\n       \
    \ local sum = 0\n        if (j < 0) then\n            j = j * -1\n           \
    \ sum = sum + 1\n        end\n        while (j > 0) do\n            sum = sum\
    \ + j % 10\n            j = math.floor(j / 10)\n        end\n        if (sum >\
    \ 0) then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend", "    local sum = 0\n    for _, num in ipairs(arr) do\n      \
    \  local abs_num = abs(num)\n        local digits_sum = 0\n        for _, digit\
    \ in tostring(abs_num):gmatch(\"%d\") do\n            digits_sum = digits_sum\
    \ + tonumber(digit)\n        end\n        if (num > 0 and digits_sum > 0) or (num\
    \ < 0 and digits_sum < 0) then\n            sum = sum + 1\n        end\n    end\n\
    \    return sum\nend", "  local count = 0\n  for _, num in ipairs(arr) do\n  \
    \  -- Do NOT call math.abs on num here - negative numbers still need to\n    --\
    \ be handled.\n    local sum = 0\n    local val = num\n    while val ~= 0 do\n\
    \      sum = sum + (val % 10)\n      val = math.floor(val / 10)\n    end\n   \
    \ if sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    local cnt = 0\n    for i, v in ipairs(arr) do\n        local sum = 0\n    \
    \    if v < 0 then\n            sum = 1\n        end\n        while v ~= 0 do\n\
    \            sum = sum + v % 10\n            v = math.floor(v / 10)\n        end\n\
    \        if sum > 0 then\n            cnt = cnt + 1\n        end\n    end\n  \
    \  return cnt\nend", "    return 0\nend", "    local count = 0\n    for i = 1,\
    \ #arr do\n        local num = arr[i]\n        local sum = 0\n        if num <\
    \ 0 then\n            num = -num\n            sum = -1\n        end\n        while\
    \ num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #arr do\n        local sum = 0\n        local num = arr[i]\n        if\
    \ num < 0 then\n            num = -num\n        end\n        while num > 0 do\n\
    \            sum = sum + num % 10\n            num = math.floor(num / 10)\n  \
    \      end\n        if sum > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nassert(count_nums({}) == 0)\nassert(count_nums({-1,\
    \ 11, -11}) == 1)\nassert(count_nums({1, 1, 2}) == 3)", "  -- your implementation\
    \ here\n  if #arr == 0 then return 0 end\n  local sum = 0\n  for _, num in ipairs(arr)\
    \ do\n    local nums = {}\n    num = math.abs(num)\n    while num > 0 do\n   \
    \   table.insert(nums, num % 10)\n      num = math.floor(num / 10)\n    end\n\
    \    local tmp = 0\n    for _, n in ipairs(nums) do\n      tmp = tmp + n\n   \
    \ end\n    if tmp > 0 then sum = sum + 1 end\n  end\n  return sum\nend", "   \
    \ -- your code here\nend", "  local total = 0\n  for _, v in ipairs(arr) do\n\
    \    local sum = 0\n    local n = v\n    if n < 0 then\n      n = n * -1\n   \
    \   sum = sum - n % 10\n      n = math.floor(n / 10)\n    end\n    while n > 0\
    \ do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n    if\
    \ sum > 0 then\n      total = total + 1\n    end\n  end\n  return total\nend",
  "    local count = 0\n    for i, num in ipairs(arr) do\n        local sum = 0\n\
    \        local n = math.abs(num)\n        while n > 0 do\n            sum = sum\
    \ + (n % 10)\n            n = n // 10\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local count = 0\n  for i, v in ipairs(arr) do\n    local sum = 0\n    if v <\
    \ 0 then\n      v = -v\n    end\n    for n in tostring(v):gmatch(\"%d\") do\n\
    \      sum = sum + tonumber(n)\n    end\n    if sum > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local count = 0\n    for _,v\
    \ in ipairs(arr) do\n        local new_v = string.format(\"%d\", math.abs(v))\n\
    \        local sum = 0\n        for i = 1, string.len(new_v) do\n            sum\
    \ = sum + tonumber(string.sub(new_v, i, i))\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local count = 0\n  for i, num in ipairs(arr) do\n    local sum = 0\n    if num\
    \ < 0 then\n      sum = sum + 1\n      num = -num\n    end\n    while num > 0\
    \ do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n\
    \    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, #arr do\n    if sum_digits(arr[i]) > 0\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ count = 0\n    for _,num in ipairs(arr) do\n        if num > 0 then\n      \
    \      if sum_digits(num) > 0 then\n                count = count + 1\n      \
    \      end\n        else\n            if -sum_digits(num) > 0 then\n         \
    \       count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "    local function sum_digits(num)\n        local s = 0\n        for c\
    \ in (tostring(num)):gmatch('%d') do\n            s = s + tonumber(c)\n      \
    \  end\n        return s\n    end", "  local count = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v ~= 0 then\n      local sum = 0\n      local neg = false\n     \
    \ local n = v\n      if n < 0 then\n        neg = true\n        n = -n\n     \
    \ end\n      while n > 0 do\n        sum = sum + n % 10\n        n = n // 10\n\
    \      end\n      if neg then\n        sum = -sum\n      end\n      if sum > 0\
    \ then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "    return 0\nend", "    local count = 0\n    for _, v in ipairs(arr) do\n\
    \        local sum = 0\n        v = math.abs(v)\n        while v > 0 do\n    \
    \        sum = sum + v % 10\n            v = math.floor(v / 10)\n        end\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local count = 0\n  for _, x in ipairs(arr) do\n  \
    \  if not (sum_digits(x) == 0) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local cnt = 0\n  for _, x in ipairs(arr) do\n    if\
    \ sum_digits(x) > 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\n\
    end", "    return list.foldl(function(acc, num)\n        if num == 0 then\n  \
    \          return acc\n        end\n        local sum = 0\n        for _, signed_digit\
    \ in string.gmatch(num, \"(%-?%d)\") do\n            sum = sum + tonumber(signed_digit)\n\
    \        end\n        if sum == 0 then\n            return acc\n        end\n\
    \        return acc + 1\n    end, 0, arr)\nend", "\tlocal count = 0\n\tfor i =\
    \ 1, #arr do\n\t\tif arr[i] > 0 then\n\t\t\tif (math.floor(arr[i] / 10) > 0) or\
    \ ((arr[i] % 10) > 0) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telse\n\t\
    \t\tif (math.floor(arr[i] / 10) < 0) or ((arr[i] % 10) < 0) then\n\t\t\t\tcount\
    \ = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "    local function\
    \ sum_nums(arr)\n        local sum = 0\n        for i = 1, #arr do\n         \
    \   sum = sum + math.abs(arr[i])\n        end\n        return sum\n    end\n \
    \   local counter = 0\n    for i = 1, #arr do\n        local num = arr[i]\n  \
    \      local sum = 0\n        while num ~= 0 do\n            sum = sum + math.abs(num\
    \ % 10)\n            num = math.floor(num / 10)\n        end\n        if sum >\
    \ 0 then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend", "    local count = 0\n    for _, num in ipairs(arr) do\n    \
    \    local sum = 0\n        local n = num\n        while n ~= 0 do\n         \
    \   local d = n % 10\n            sum = sum + d\n            n = (n - d) / 10\n\
    \        end\n        if sum > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "\tlocal count = 0\n\tfor i = 1, #arr\
    \ do\n\t\tif sum_digits(arr[i]) > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend", "    local count = 0\n    for _, v in ipairs(arr) do\n\
    \        local sum = 0\n        if v < 0 then\n            v = -v\n        end\n\
    \        while v > 0 do\n            sum = sum + v % 10\n            v = math.floor(v\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    -- YOUR CODE HERE\nend", " \
    \ local count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local sum\
    \ = 0\n    while num ~= 0 do\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for i = 1, #arr do\n        local\
    \ num = arr[i]\n        local sum = 0\n        if num < 0 then\n            num\
    \ = -num\n            sum = -1\n        end\n        while num > 0 do\n      \
    \      sum = sum + (num % 10)\n            num = math.floor(num / 10)\n      \
    \  end\n        if sum > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    for _, v in ipairs(arr)\
    \ do\n        local n = math.abs(v)\n        local sum = 0\n        while n >\
    \ 0 do\n            sum = sum + n % 10\n            n = math.floor(n / 10)\n \
    \       end\n        if sum > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    -- your code here\nend", "    local count\
    \ = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        if num < 0\
    \ then\n            num = -num\n        end\n        local sum = 0\n        while\
    \ num > 0 do\n            sum = sum + num % 10\n            num = num // 10\n\
    \        end\n        if sum > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "    local counter = 0\n    for _,v in\
    \ pairs(arr) do\n        if sum_digits(v) > 0 then\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend", "  count = 0\n  for _,\
    \ n in ipairs(arr) do\n    -- TODO: code goes here\n  end\n  return count\nend",
  "    local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n  \
    \      local t = v\n        if v < 0 then\n            t = -v\n        end\n \
    \       while t > 0 do\n            sum = sum + (t % 10)\n            t = t //\
    \ 10\n        end\n        if sum > 0 then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "  local count = 0\n  for i, v in\
    \ ipairs(arr) do\n    if v > 0 then\n      local m = v\n      local sum = 0\n\
    \      while m > 0 do\n        sum = sum + (m % 10)\n        m = math.floor(m\
    \ / 10)\n      end\n      if sum > 0 then\n        count = count + 1\n      end\n\
    \    else\n      local m = v\n      local sum = 0\n      while m < 0 do\n    \
    \    sum = sum + ((m % 10) * -1)\n        m = math.floor(m / 10)\n      end\n\
    \      if sum > 0 then\n        count = count + 1\n      end\n    end\n  end\n\
    \  return count\nend", "  -- INSERT CODE HERE\nend", "  -- Implement the function\n\
    end", "\tlocal count = 0\n\tfor _, num in ipairs(arr) do\n\t\tif sum_of_digits(num)\
    \ > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", " \
    \   local total = 0\n    for i,v in ipairs(arr) do\n        local sum = 0\n  \
    \      for c in tostring(v):gmatch(\"[-]?%d\") do\n            sum = sum + tonumber(c)\n\
    \        end\n        if sum > 0 then\n            total = total + 1\n       \
    \ end\n    end\n    return total\nend", "  -- TODO: your code here\nend", "  \
    \  local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n\
    \        for d in tostring(math.abs(num)):gmatch('%d') do\n            sum = sum\
    \ + tonumber(d)\n        end\n        if sum > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local count = 0\n  for\
    \ i, v in ipairs(arr) do\n    if (sum_digits(v) > 0) then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local sum = 0\n    for k,v in\
    \ pairs(arr) do\n        if sum_digits(v) > 0 then\n            sum = sum + 1\n\
    \        end\n    end\n    return sum\nend", "  local result = 0\n  for _, v in\
    \ ipairs(arr) do\n    if v < 0 then\n      v = -v\n    end\n    local sum = 0\n\
    \    while v > 0 do\n      sum = sum + v % 10\n      v = math.floor(v / 10)\n\
    \    end\n    if sum > 0 then\n      result = result + 1\n    end\n  end\n  return\
    \ result\nend", "    local count = 0\n    for k,v in pairs(arr) do\n        local\
    \ sum = 0\n        if v < 0 then\n            v = -v\n        end\n        while\
    \ v > 0 do\n            local q, r = math.floor(v / 10), v % 10\n            sum\
    \ = sum + r\n            v = q\n        end\n        if sum > 0 then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for i, v in ipairs(arr) do\n        if v > 0 then\n         \
    \   local digits = split_digits(v)\n            local sum = 0\n            for\
    \ j, d in ipairs(digits) do\n                sum = sum + d\n            end\n\
    \            if sum > 0 then\n                count = count + 1\n            end\n\
    \        else\n            local digits = split_digits(v * -1)\n            local\
    \ sum = 0\n            for j, d in ipairs(digits) do\n                sum = sum\
    \ + d\n            end\n            if sum > 0 then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for k,v in pairs(arr) do\n        if sum_digits(v) > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local result = 0\n    for i = 1, #arr do\n        local digits = {}\n     \
    \   local num = math.abs(arr[i])\n        repeat\n            local digit = num\
    \ % 10\n            digits[#digits + 1] = digit\n            num = math.floor(num\
    \ / 10)\n        until num == 0\n        local sum = 0\n        for i = 1, #digits\
    \ do\n            sum = sum + digits[i]\n        end\n        if sum > 0 then\n\
    \            result = result + 1\n        end\n    end\n    return result\nend",
  "\tlocal res = 0", "    local cnt = 0\n    for i = 1, #arr do\n        local x =\
    \ math.abs(arr[i])\n        local sum = 0\n        while x > 0 do\n          \
    \  sum = sum + x % 10\n            x = math.floor(x / 10)\n        end\n     \
    \   if sum > 0 then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend", "  local function sum_digits(num)\n    -- only positive numbers,\
    \ if the number is negative then first signed\n    -- digit will be negative too\
    \ (e.g. 123 has signed digits 1, 2, and 3)\n    num = math.abs(num)\n    local\
    \ sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    return sum\n  end", "  local cnt = 0\n  for _, v in ipairs(arr)\
    \ do\n    if count_digits(v) > 0 then\n      cnt = cnt + 1\n    end\n  end\n \
    \ return cnt\nend", "    return 0\nend", "    local cnt = 0\n    for i = 1, #arr\
    \ do\n        if signed_digits_sum(arr[i]) > 0 then\n            cnt = cnt + 1\n\
    \        end\n    end\n    return cnt\nend", "\tlocal cnt = 0\n\tfor _, n in ipairs(arr)\
    \ do\n\t\tif signed_digits_sum(n) > 0 then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\
    \treturn cnt\nend", "    local sum = 0\n    for i = 1, #arr do\n        if signed_digits_sum(arr[i])\
    \ > 0 then\n            sum = sum + 1\n        end\n    end\n    return sum\n\
    end", "    count = 0\n    for _, v in pairs(arr) do\n        -- print(sum_digits(v))\n\
    \        if sum_digits(v) > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local count = 0\n  for _, val in ipairs(arr)\
    \ do\n    if val < 0 then\n      if val % -10 + 1 ~= 0 then\n        count = count\
    \ + 1\n      end\n    else\n      if val % 10 ~= 0 then\n        count = count\
    \ + 1\n      end\n    end\n  end\n  return count\nend", "    local function count_nums_helper(arr,\
    \ acc)\n        if #arr == 0 then\n            return acc\n        else\n    \
    \        local sum_of_digits = table.sum(arr[1]:tonumber():digits())\n       \
    \     if sum_of_digits > 0 then\n                return count_nums_helper(arr:slice(2),\
    \ acc + 1)\n            else\n                return count_nums_helper(arr:slice(2),\
    \ acc)\n            end\n        end\n    end\n    return count_nums_helper(arr,\
    \ 0)\nend", "  local function sum_digits(num)\n    local result = 0\n    if num\
    \ < 0 then num = -num end\n    while num > 0 do\n      result = result + num %\
    \ 10\n      num = math.floor(num / 10)\n    end\n    return result\n  end\n  local\
    \ result = 0\n  for _, num in ipairs(arr) do\n    if sum_digits(num) > 0 then\n\
    \      result = result + 1\n    end\n  end\n  return result\nend", "  local sum\
    \ = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local signed_digits =\
    \ {0,0,0,0,0,0,0,0,0,0}\n    for _ = 1, math.abs(num) do\n      local digit =\
    \ num % 10\n      if num < 0 then\n        digit = -digit\n      end\n      signed_digits[digit\
    \ + 10] = signed_digits[digit + 10] + 1\n      num = math.floor(num / 10)\n  \
    \  end\n    local subset_sum = 0\n    for i = 1, 10 do\n      subset_sum = subset_sum\
    \ + signed_digits[i]\n    end\n    sum = sum + subset_sum\n  end\n  return sum\n\
    end", "    local count = 0\n    for i = 1, #arr do\n        local n = arr[i]\n\
    \        local sum = 0\n        if n < 0 then\n            sum = -1\n        \
    \    n = -n\n        end\n        while n > 0 do\n            sum = sum + n %\
    \ 10\n            n = math.floor(n / 10)\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  if not (type(arr) == \"table\") then return nil end\n  local count = 0\n  for\
    \ _, v in pairs(arr) do\n    if _sum_of_digits(v) > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", '    return None', "    local cnt\
    \ = 0\n    for i,x in ipairs(arr) do\n        local s = 0\n        if x < 0 then\n\
    \            s = s - x%10\n            x = x / 10\n        end\n        while\
    \ x ~= 0 do\n            s = s + x%10\n            x = x / 10\n        end\n \
    \       if s > 0 then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend", "  local res = 0\n  for i, v in ipairs(arr) do\n    if v == 0 then\n\
    \      res = res + 1\n    else\n      local sum = 0\n      if v < 0 then\n   \
    \     v = -v\n        sum = -1\n      end\n      while v > 0 do\n        sum =\
    \ sum + (v % 10)\n        v = math.floor(v / 10)\n      end\n      if sum > 0\
    \ then\n        res = res + 1\n      end\n    end\n  end\n  return res\nend",
  "  local count = 0\n  for i,v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local cnt\
    \ = 0\n    for _, i in ipairs(arr) do\n        local sum = 0\n        local sign\
    \ = i < 0 and -1 or 1\n        local n = math.abs(i)\n        while n > 0 do\n\
    \            sum = sum + (n % 10)\n            n = math.floor(n / 10)\n      \
    \  end\n        if sign * sum > 0 then\n            cnt = cnt + 1\n        end\n\
    \    end\n    return cnt\nend", "  local count = 0\n  for _, a in ipairs(arr)\
    \ do\n    if sum_digits(a) > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "\tlocal count = 0\n\tfor i = 1, #arr do\n\t\t-- \u0418\
    \u0437\u0432\u043B\u0435\u043A\u0430\u0435\u043C \u043F\u043E\u0441\u043B\u0435\
    \u0434\u043D\u044E\u044E \u0446\u0438\u0444\u0440\u0443 \u0447\u0438\u0441\u043B\
    \u0430 \u0438 \u0441\u0443\u043C\u043C\u0438\u0440\u0443\u0435\u043C \u0435\u0451\
    \ \u0441 \u043F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u043C\u0438\n\t\
    \t-- \u0438 \u043F\u043E\u043A\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\
    \u044F\u044F \u0446\u0438\u0444\u0440\u0430 \u043D\u0435 \u0440\u0430\u0432\u043D\
    \u0430 \u0447\u0438\u0441\u043B\u0443 \u043F\u043E\u043B\u043D\u043E\u0441\u0442\
    \u044C\u044E\n\t\tlocal sum = 0\n\t\tlocal num = arr[i]\n\t\twhile num ~= 0 do\n\
    \t\t\tsum = sum + num % 10\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif\
    \ sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
  "  -- YOUR CODE HERE\n  local count = 0\n  for k, v in pairs(arr) do\n    if v >\
    \ 0 then\n      local sum = 0\n      local digits = tostring(v)\n      for i =\
    \ 1, #digits do\n        sum = sum + tonumber(digits:sub(i, i))\n      end\n \
    \     if sum > 0 then\n        count = count + 1\n      end\n    else\n      if\
    \ tostring(v):sub(2, 2) ~= \"-\" then\n        local sum = 0\n        local digits\
    \ = tostring(v)\n        for i = 2, #digits do\n          sum = sum + tonumber(digits:sub(i,\
    \ i))\n        end\n        if sum > 0 then\n          count = count + 1\n   \
    \     end\n      end\n    end\n  end\n  return count\nend", "\treturn 0\nend",
  "    local function count_nums_rec(arr, idx, count)\n        if idx > #arr then\n\
    \            return count\n        end\n        if arr[idx] > 0 then\n       \
    \     return count_nums_rec(arr, idx + 1, count + 1)\n        end\n        return\
    \ count_nums_rec(arr, idx + 1, count)\n    end\n    return count_nums_rec(arr,\
    \ 1, 0)\nend", "  local count = 0\n  for _, v in ipairs(arr) do\n    if sum_digits(v)\
    \ > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \   local count = 0\n    for _, num in ipairs(arr) do\n        if sum_of_digits(num)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n  \
    \  local digit\n    if n < 0 then\n      digit = -(n % 10)\n      n = -math.floor(n\
    \ / 10)\n    else\n      digit = n % 10\n      n = math.floor(n / 10)\n    end\n\
    \    sum = sum + digit\n    while n ~= 0 do\n      digit = n % 10\n      n = math.floor(n\
    \ / 10)\n      sum = sum + digit\n    end\n    if sum > 0 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "    local total = 0\n    for\
    \ i,v in ipairs(arr) do\n        if signed_sum(v) > 0 then\n            total\
    \ = total + 1\n        end\n    end\n    return total\nend", "    local count\
    \ = 0\n    for i = 1, #arr do\n        local sum = 0\n        local num = arr[i]\n\
    \        if num < 0 then num = -num end\n        while num > 0 do\n          \
    \  sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n\
    \        if sum > 0 then count = count + 1 end\n    end\n    return count\nend",
  "  -- your code here\nend", "    if not arr then\n        return 0\n    end\n  \
    \  local count = 0\n    for _,v in pairs(arr) do\n        if v < 0 then\n    \
    \        if digits_sum(math.abs(v)) ~= 0 then\n                count = count +\
    \ 1\n            end\n        else\n            if digits_sum(v) ~= 0 then\n \
    \               count = count + 1\n            end\n        end\n    end\n   \
    \ return count\nend", "    local count = 0\n    for i = 1, #arr do\n        if\
    \ count_digits(arr[i]) > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local sum = 0\n  for k, v in pairs(arr) do\n\
    \    if v < 0 then\n      v = v * -1\n    end\n    local nums = 0\n    while v\
    \ > 0 do\n      nums = nums + v % 10\n      v = math.floor(v / 10)\n    end\n\
    \    if nums > 0 then\n      sum = sum + 1\n    end\n  end\n  return sum\nend",
  "  return len(filter(\n    function(n)\n      local sign = signum(n)\n      n =\
    \ abs(n)\n      local sum = 0\n      while n > 0 do\n        sum = sum + (n %\
    \ 10)\n        n = n // 10\n      end\n      return sum * sign > 0\n    end,\n\
    \    arr\n  ))\nend", "    return foldl(\n        function(acc, x)\n         \
    \   local sum = foldl(\n                function(acc2, y)\n                  \
    \  return acc2 + y\n                end,\n                0,\n               \
    \ signed_digits(x)\n            )\n            if sum > 0 then\n             \
    \   return acc + 1\n            else\n                return acc\n           \
    \ end\n        end,\n        0,\n        arr\n    )\nend", "    local cnt = 0\n\
    \    for _, v in ipairs(arr) do\n        if is_positive(v) then\n            cnt\
    \ = cnt + 1\n        end\n    end\n    return cnt\nend", "  local count = 0\n\
    \  for i = 1, #arr do\n    local num = arr[i]\n    if num < 0 then\n      num\
    \ = num * -1\n    end\n    local sum = 0\n    while num > 0 do\n      sum = sum\
    \ + num % 10\n      num = math.floor(num / 10)\n    end\n    if sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for _,x in ipairs(arr) do\n    local sum = 0\n    while x ~= 0 do\n \
    \     sum = sum + math.abs(x % 10)\n      x = math.floor(x / 10)\n    end\n  \
    \  if sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    local count = 0\n    for _,v in ipairs(arr) do\n        local num =\
    \ tonumber(v)\n        if num and num ~= 0 then\n            local sum = 0\n \
    \           if num < 0 then\n                num = -num\n            end\n   \
    \         for d in string.gmatch(num, \"[-0-9]+\") do\n                sum = sum\
    \ + tonumber(d)\n            end\n            if sum > 0 then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "  -- the function returns the number of elements\n  -- in the table which\
    \ has a sum of digits > 0\n  local count = 0\n  for key, value in pairs(arr) do\n\
    \    local sum = 0\n    local num = value\n    -- iterate over the number till\
    \ it is 0\n    while num ~= 0 do\n      sum = sum + (num % 10)\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local sum = 0\n    for _, num in ipairs(arr) do\n\
    \        sum = sum + signed_digits_sum(num)\n    end\n    return sum\nend", " \
    \ local count = 0\n  for _, num in ipairs(arr) do\n    local sum = 0\n    if num\
    \ < 0 then\n      num = -num\n    end\n    while num > 0 do\n      sum = sum +\
    \ num % 10\n      num = math.floor(num / 10)\n    end\n    if sum > 0 then\n \
    \     count = count + 1\n    end\n  end\n  return count\nend", "    local len\
    \ = 0\n    for _, v in pairs(arr) do\n        local count = 0\n        local n\
    \ = v\n        while n ~= 0 do\n            count = count + (n % 10)\n       \
    \     n = math.floor(n / 10)\n        end\n        if count > 0 then\n       \
    \     len = len + 1\n        end\n    end\n    return len\nend", "    local count\
    \ = 0\n    for _,v in ipairs(arr) do\n        if sum_digits(v) > 0 then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  \
    \  local count = 0\n    for _, num in ipairs(arr) do\n        local x = num\n\
    \        local sum = 0\n        if x < 0 then\n            x = -x\n          \
    \  sum = -1\n        end\n        while x > 0 do\n            sum = sum + (x %\
    \ 10)\n            x = math.floor(x / 10)\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    return nil\nend", "\tlocal cnt = 0\n\tfor _, i in ipairs(arr) do\n\t\tlocal\
    \ n = 0\n\t\tif i < 0 then\n\t\t\tn = n - i % 10\n\t\t\ti = -i\n\t\tend\n\t\t\
    while i > 0 do\n\t\t\tn = n + i % 10\n\t\t\ti = i // 10\n\t\tend\n\t\tif n > 0\
    \ then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\nend", "\tlocal count\
    \ = 0\n\tfor _, elem in ipairs(arr) do\n\t\tlocal digits = math.abs(elem)\n\t\t\
    local sum = 0\n\t\twhile digits > 0 do\n\t\t\tsum = sum + digits % 10\n\t\t\t\
    digits = math.floor(digits / 10)\n\t\tend\n\t\tif elem < 0 then\n\t\t\tsum = sum\
    \ + 1\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "    count = 0\n    for i, v in ipairs(arr) do\n       \
    \ if (v > 0) then\n            v = v % 10\n            v = (v + (v - (v % 10))\
    \ / 10)\n            if (v > 0) then\n                count = count + 1\n    \
    \        end\n        else\n            v = -v\n            v = -v % 10\n    \
    \        v = -(v + (v - (v % 10)) / 10)\n            if (v > 0) then\n       \
    \         count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    return fold(function(sum, a)\n        return sum + (signed_digits_sum(a)\
    \ > 0 and 1 or 0)\n    end, 0, arr)\nend", "  -- your code here\nend", "    --\
    \ Write your code here\nend", "    local sum = 0\n    for i = 1, #arr do\n   \
    \     local num = arr[i]\n        local temp = num\n        if num < 0 then\n\
    \            temp = -temp\n        end\n        local total = 0\n        while\
    \ temp > 0 do\n            total = total + temp % 10\n            temp = temp\
    \ // 10\n        end\n        if total > 0 then\n            sum = sum + 1\n \
    \       end\n    end\n    return sum\nend", "  local count = 0\n  for _, i in\
    \ ipairs(arr) do\n    local sum = 0\n    local num = i < 0 and i * -1 or i\n \
    \   repeat\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n   \
    \ until num == 0\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for _, v in ipairs(arr) do\n\
    \        local s = 0\n        for k in (\"\" .. v):gmatch(\".\") do\n        \
    \    k = tonumber(k)\n            if k then\n                s = s + k\n     \
    \       end\n        end\n        if s > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local c = 0\n    for _,n in\
    \ ipairs(arr) do\n        local s = math.abs(n)\n        while s > 0 do\n    \
    \        c = c + (s % 10)\n            s = math.floor(s / 10)\n        end\n \
    \   end\n    return c\nend", "    --todo: Write this function\nend", "  local\
    \ count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local sum = 0\n\
    \    while num ~= 0 do\n      local n = num % 10\n      sum = sum + math.abs(n)\n\
    \      num = math.floor(num / 10)\n    end\n    if sum > 0 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n    for\
    \ _,v in ipairs(arr) do\n        -- Check the sum of the number's digits.\n  \
    \      local sum = 0\n        if v < 0 then\n            sum = sum - (v % 10)\n\
    \            v = math.floor(v / 10)\n        end\n        while v > 0 do\n   \
    \         sum = sum + (v % 10)\n            v = math.floor(v / 10)\n        end\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for _, num in ipairs(arr) do\n\
    \        local sum = 0\n        local n = math.abs(num)\n        while n > 0 do\n\
    \            sum = sum + (n % 10)\n            n = n // 10\n        end\n    \
    \    if sum > 0 then\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend", "    return 0\nend", "\tcount = 0\n\tfor i, num in ipairs(arr)\
    \ do\n\t\tif sum_of_digits(num) > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend", "  local function count_digits(x)\n    x = math.abs(x)\n\
    \    local res = 0\n    while x > 0 do\n      res = res + x % 10\n      x = math.floor(x\
    \ / 10)\n    end\n    return res\n  end\n  local res = 0\n  for i = 1, #arr do\n\
    \    if count_digits(arr[i]) > 0 then\n      res = res + 1\n    end\n  end\n \
    \ return res\nend", "  local sum = 0\n  for i, num in ipairs(arr) do\n    while\
    \ num ~= 0 do\n      local mod = num % 10\n      if mod > 0 then\n        sum\
    \ = sum + 1\n        break\n      end\n      num = num // 10\n    end\n  end\n\
    \  return sum\nend", "    local count = 0\n    for _, v in ipairs(arr) do\n  \
    \      if sum_digits(v) > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local count = 0\n  for i = 1, #arr do\n \
    \   local sum = 0\n    local n = arr[i]\n    if n < 0 then\n      n = -n\n   \
    \ end\n    while n > 0 do\n      sum = sum + n % 10\n      n = n // 10\n    end\n\
    \    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local cnt = 0\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      cnt\
    \ = cnt + 1\n    end\n  end\n  return cnt\nend", "  local count = 0\n  for _,\
    \ v in ipairs(arr) do\n    local sum = 0\n    while (v ~= 0) do\n      sum = sum\
    \ + (v % 10)\n      v = math.floor(v / 10)\n    end\n    if sum > 0 then\n   \
    \   count = count + 1\n    end\n  end\n  return count\nend", "    return 0\nend",
  "  local count = 0\n  for _, v in ipairs(arr) do\n    if v == 0 then\n      count\
    \ = count + 1\n    else\n      count = count + signed_sum_digits(v)\n    end\n\
    \  end\n  return count\nend", "    -- TODO: implement this\nend", "    -- TODO:\
    \ Implement\nend", "    local count = 0\n    for _,v in ipairs(arr) do\n     \
    \   if sum_digits(v) > 0 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend", "    -- WRITE CODE HERE\n    local count = 0\n\
    \    for i, v in ipairs(arr) do\n        if v > 0 then\n            sum = 0\n\
    \            while v > 0 do\n                sum = sum + v % 10\n            \
    \    v = math.floor(v / 10)\n            end\n            if sum > 0 then\n  \
    \              count = count + 1\n            end\n        else\n            sum\
    \ = 0\n            while v < 0 do\n                sum = sum + v % 10\n      \
    \          v = math.floor(v / 10)\n            end\n            if sum < 0 then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "    local count = 0\n    for i = 1, #arr do\n        local\
    \ num = arr[i]\n        local sum = 0\n        if num < 0 then\n            num\
    \ = -num\n            sum = -sum - num % 10\n            num = num // 10\n   \
    \     end\n        while num > 0 do\n            sum = sum + num % 10\n      \
    \      num = num // 10\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i, v in ipairs(arr) do\n        if sum_digits(v) > 0 then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", " \
    \   --@TODO\nend", "    local count = 0\n    for _,v in ipairs(arr) do\n     \
    \   local sum = 0\n        if v < 0 then\n            v = -v\n        end\n  \
    \      for i = 1, string.len(tostring(v)) do\n            sum = sum + string.sub(tostring(v),\
    \ i, i)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #arr do\n        if sum_digits(arr[i]) > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  -- body\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
