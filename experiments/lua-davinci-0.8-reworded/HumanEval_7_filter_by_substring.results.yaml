language: lua
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for k, v in pairs(strings) do\n     \
    \   if string.find(v, substring) then\n            table.insert(result, v)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, s in ipairs(strings) do\n  \
    \      if s:find(substring) then\n            table.insert(filtered, s)\n    \
    \    end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, v in ipairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\n  for key, str in pairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(results, str)\n    end\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local ret = {}\n  for i, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(ret, s)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local res = {}\n  for i, v in ipairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ vim.endswith(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi5fuct9b.lua:9:\
    \ attempt to index a nil value (global 'vim')\nstack traceback:\n\t/tmp/tmpi5fuct9b.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi5fuct9b.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for i, item in ipairs(strings) do\n \
    \       if item:find(substring) then\n            table.insert(result, item)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for i, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for i,s in ipairs(strings) do\n   \
    \     if s:find(substring) then\n            table.insert(filtered, s)\n     \
    \   end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif\
    \ str:find(substring) then\n\t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for i = 1, #strings do\n        if\
    \ string.find(strings[i], substring) then\n            table.insert(filtered,\
    \ strings[i])\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local res = {}\n    for _, v in ipairs(strings) do\n       \
    \ if type(v) == 'string' and string.find(v, substring) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for i, str in ipairs(strings) do\n\
    \        if str:find(substring) then\n            table.insert(filtered, str)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_strings = {}\n    for _, s in ipairs(strings) do\n\
    \        if string.find(s, substring) then\n            table.insert(new_strings,\
    \ s)\n        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:find(substring) then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return lib.list_filter(strings, substring, string.find)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzohd1ttg.lua:7:\
    \ attempt to index a nil value (global 'lib')\nstack traceback:\n\t/tmp/tmpzohd1ttg.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzohd1ttg.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_strings = {}\n    for _, s in ipairs(strings) do\n\
    \        if string.find(s, substring) then\n            table.insert(new_strings,\
    \ s)\n        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for i, str in ipairs(strings) do\n  \
    \      if str:find(substring) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for i, v in ipairs(strings) do\n  \
    \      if string.find(v, substring) then\n            table.insert(filtered, v)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    return utils.filter(strings, function(str)\n        return string.find(str,\
    \ substring) ~= nil\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgvs2vnw.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpjgvs2vnw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjgvs2vnw.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(string, substring) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _,s in ipairs(strings) do\n     \
    \   if s:find(substring) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979963
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return array.filter(strings, function(v) return v:find(substring)\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy1g4h7od.lua:7:\
    \ attempt to index a nil value (global 'array')\nstack traceback:\n\t/tmp/tmpy1g4h7od.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpy1g4h7od.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local res = {}\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring) then\n      table.insert(res, str)\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local res = {}\n    for _, s in ipairs(strings) do\n       \
    \ if string.find(s, substring) then\n            table.insert(res, s)\n      \
    \  end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string:find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tif type(strings) ~= 'table' then\n\t\treturn {}\n\tend\n\tlocal\
    \ filtered = {}\n\tfor k, v in pairs(strings) do\n\t\tif v:find(substring) then\n\
    \t\t\ttable.insert(filtered, v)\n\t\tend\n\tend\n\treturn filtered\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local res = {}\n  for _, v in ipairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(filtered, str)\n    end\n\
    \  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, v in ipairs(strings) do\n    \
    \    if string.find(v, substring) then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\treturn lib.filter(strings, function(elem)\n\t\treturn elem:find(substring)\
    \ ~= nil\n\tend)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvfu3v51y.lua:7:\
    \ attempt to index a nil value (global 'lib')\nstack traceback:\n\t/tmp/tmpvfu3v51y.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvfu3v51y.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local out = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:find(substring) then\n            table.insert(out, s)\n        end\n \
    \   end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal res = {}\n\tfor i, name in ipairs(strings) do\n\t\tif name:find(substring)\
    \ then\n\t\t\ttable.insert(res, name)\n\t\tend\n\tend\n\treturn res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local array = {}\n    for _, str in ipairs(strings) do\n   \
    \     if str:match(substring) then\n            table.insert(array, str)\n   \
    \     end\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local match = {}\n  if type(strings) == 'table' then\n    for\
    \ k,v in pairs(strings) do\n      if string.find(v, substring) then\n        table.insert(match,\
    \ v)\n      end\n    end\n  end\n  return match\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for k, v in pairs(strings) do\n    if string.find(v,\
    \ substring) then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _,str in ipairs(strings) do\n \
    \       if str:find(substring) then\n            table.insert(filtered, str)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, s in ipairs(strings) do\n    \
    \    if string.find(s, substring) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table')\n  assert(type(substring) ==\
    \ 'string')\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal filtered = {}\n\tfor _, s in ipairs(strings) do\n\t\tif\
    \ s:find(substring) then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\t\
    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal results = {}\n\tfor _,s in ipairs(strings) do\n\t\tif string.find(s,\
    \ substring) then\n\t\t\ttable.insert(results, s)\n\t\tend\n\tend\n\treturn results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local res = {}\n  for _, str in ipairs(strings) do\n    if str:match(substring)\
    \ then\n      table.insert(res, str)\n    end\n  end\n  return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local output = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(output, s)\n    end\n  end\n  return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local res = {}\n  for _,s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(res, s)\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local res = {}\n  for _,s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(res, s)\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local res = {}\n    for i, v in ipairs(strings) do\n       \
    \ if v:find(substring) then\n            table.insert(res, v)\n        end\n \
    \   end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for k, v in pairs(strings) do\n     \
    \   if string.find(v, substring) then\n            table.insert(result, v)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local out = {}\n    for i,v in ipairs(strings) do\n        if\
    \ v:find(substring) then\n            table.insert(out, v)\n        end\n    end\n\
    \    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, str in ipairs(strings) do\n\
    \        if string.find(str, substring) then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:find(substring) then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local ret = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:find(substring) then\n            table.insert(ret, s)\n        end\n \
    \   end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, s in ipairs(strings) do\n    \
    \    if string.find(s, substring) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:match(substring) then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(result, string)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, value in ipairs(strings) do\n\
    \        if (value:find(substring)) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if not strings or #strings == 0 then\n        return strings\n\
    \    end\n    local result = {}\n    for _, str in ipairs(strings) do\n      \
    \  if str:find(substring) then\n            table.insert(result, str)\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _,str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(filtered, str)\n    end\n\
    \  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i, string in ipairs(strings) do\n   \
    \ if string:find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ vim.endswith(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi5fuct9b.lua:9:\
    \ attempt to index a nil value (global 'vim')\nstack traceback:\n\t/tmp/tmpi5fuct9b.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi5fuct9b.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, s in ipairs(strings) do\n  \
    \      if s:find(substring) then\n            table.insert(filtered, s)\n    \
    \    end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for i, e in ipairs(strings) do\n  \
    \      if string.find(e, substring) then\n            table.insert(filtered, e)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif\
    \ string.find(str, substring) then\n\t\t\ttable.insert(result, str)\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif\
    \ str:find(substring) then\n\t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, value in ipairs(strings) do\n\
    \        if string.find(value, substring) then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in ipairs(strings) do\n  \
    \      if str:find(substring) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    assert(strings)\n    assert(substring)\n    local result = {}\n\
    \    for _, string in ipairs(strings) do\n        if string.find(string, substring)\
    \ then\n            table.insert(result, string)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local res = {}\n  for _, x in ipairs(strings) do\n    if string.find(x,\
    \ substring) then\n      table.insert(res, x)\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for i, s in ipairs(strings) do\n  \
    \      if (string.find(s, substring)) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(result, string)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string:find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local results = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(results, string)\n\
    \        end\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, v in ipairs(strings) do\n    \
    \    if v:find(substring) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(string, substring) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:find(substring) then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(filtered, str)\n    end\n\
    \  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local strings_filtered = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string:find(substring) then\n            table.insert(strings_filtered,\
    \ string)\n        end\n    end\n    return strings_filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string:find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local out = {}\n    for _,s in ipairs(strings) do\n        if\
    \ s:find(substring) then\n            table.insert(out, s)\n        end\n    end\n\
    \    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:find(substring) then\n      table.insert(filtered, str)\n    end\n  end\n\
    \  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, word in ipairs(strings) do\n\
    \        if string.find(word, substring) then\n            table.insert(filtered,\
    \ word)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\treturn util.filter(strings, function(value)\n\t\treturn string.find(value,\
    \ substring) ~= nil\n\tend)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnoe1w8e5.lua:7:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpnoe1w8e5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnoe1w8e5.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_table = {}\n    for i = 1, #strings do\n        if\
    \ strings[i]:find(substring) then\n            table.insert(new_table, strings[i])\n\
    \        end\n    end\n    return new_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if strfind(s,\
    \ substring) then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg_a6yfwe.lua:9:\
    \ attempt to call a nil value (global 'strfind')\nstack traceback:\n\t/tmp/tmpg_a6yfwe.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpg_a6yfwe.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return map(function(s) return string.find(s, substring) and s\
    \ or nil end, strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo9awdzhe.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpo9awdzhe.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpo9awdzhe.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, v in ipairs(strings) do\n    \
    \    if v:find(substring) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:match(substring)\
    \ then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_strings = {}\n    for _, s in ipairs(strings) do\n\
    \        if string.find(s, substring) then\n            table.insert(new_strings,\
    \ s)\n        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local ret = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(ret, str)\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for k,v in pairs(strings) do\n    \
    \    if v:find(substring) then\n            table.insert(filtered, v)\n      \
    \  end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return fun.totable(fun.filter(function(s) return s:find(substring)\
    \ end, fun.iter(strings)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps5pegwum.lua:7:\
    \ attempt to index a nil value (global 'fun')\nstack traceback:\n\t/tmp/tmps5pegwum.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps5pegwum.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, v in ipairs(strings) do\n\t\tif v:match(substring)\
    \ then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return maplist(function(x) return string.find(x, substring) and\
    \ x or nil end, strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdb3e0yb.lua:7:\
    \ attempt to call a nil value (global 'maplist')\nstack traceback:\n\t/tmp/tmpgdb3e0yb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgdb3e0yb.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if strings == nil or substring == nil then\n        return {}\n\
    \    end\n    local filtered = {}\n    for _,v in pairs(strings) do\n        if\
    \ string.find(v, substring) ~= nil then\n            table.insert(filtered, v)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for k, string in pairs(strings) do\n\
    \        if string.find(string, substring) then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    return mp.filter_map(strings, function(string)\n        if string:find(substring)\
    \ then\n            return string\n        end\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpscgladsz.lua:7:\
    \ attempt to index a nil value (global 'mp')\nstack traceback:\n\t/tmp/tmpscgladsz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpscgladsz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif\
    \ string.find(str, substring) then\n\t\t\ttable.insert(result, str)\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _,s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.find(string, substring) then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, v in ipairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(result, string)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, v in ipairs(strings) do\n  \
    \      if v:find(substring) then\n            table.insert(filtered, v)\n    \
    \    end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(string, substring) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _,v in ipairs(strings) do\n     \
    \   if string.find(v, substring) then\n            table.insert(result, v)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, s in ipairs(strings) do\n    \
    \    if s:find(substring) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:find(substring) then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if type(strings) ~= 'table' then\n        return strings\n \
    \   end\n    local output = {}\n    for _,v in ipairs(strings) do\n        if\
    \ v:find(substring) then\n            table.insert(output, v)\n        end\n \
    \   end\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for i, string in ipairs(strings) do\n\
    \        if string.find(string, substring) then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _,string in ipairs(strings) do\n  \
    \  if string.find(string, substring) then\n      table.insert(filtered, string)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, v in ipairs(strings) do\n    \
    \    if v:find(substring) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_strings = {}\n    for _,v in ipairs(strings) do\n\
    \        if v:find(substring) then\n            table.insert(new_strings, v)\n\
    \        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    return {}\n  end\n  local\
    \ result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s, substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local r = {}\n    for _, s in ipairs(strings) do\n        if\
    \ string.find(s, substring) then\n            table.insert(r, s)\n        end\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local out = {}\n  for i, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(out, s)\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal filtered = {}\n\tfor _, value in pairs(strings) do\n\t\t\
    if string.find(value, substring) then\n\t\t\ttable.insert(filtered, value)\n\t\
    \tend\n\tend\n\treturn filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local res = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:find(substring) then\n            table.insert(res, str)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    assert(type(strings) == 'table')\n    assert(type(substring)\
    \ == 'string')\n    local result = {}\n    for _, str in ipairs(strings) do\n\
    \        if str:find(substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    local current = 0\n    for _, string\
    \ in ipairs(strings) do\n        if string.find(string, substring) then\n    \
    \        current = current + 1\n            filtered[current] = string\n     \
    \   end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local res = {}\n    for _, s in ipairs(strings) do\n       \
    \ if string.find(s, substring) then\n            table.insert(res, s)\n      \
    \  end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _,s in ipairs(strings) do\n     \
    \   if s:find(substring) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979963
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _,str in ipairs(strings) do\n    if\
    \ str:match(substring) then\n      table.insert(filtered, str)\n    end\n  end\n\
    \  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, v in ipairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local rv = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(rv, s)\n    end\n  end\n  return rv\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local res = {}\n  for i, value in ipairs(strings) do\n    if value:find(substring)\
    \ then\n      table.insert(res, value)\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local res = {}\n    for _, string in ipairs(strings) do\n  \
    \      if string.find(string, substring) then\n            table.insert(res, string)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local n = #strings\n  local result = {}\n  for i = 1, n do\n \
    \   if strings[i]:find(substring) then\n      result[#result + 1] = strings[i]\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, value in ipairs(strings) do\n\t\t\
    if value:find(substring) then\n\t\t\ttable.insert(result, value)\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if not is_table(strings) then\n    error('expected strings to\
    \ be a table')\n  end\n  if not is_string(substring) then\n    error('expected\
    \ substring to be a string')\n  end\n  local filtered = {}\n  for i, val in ipairs(strings)\
    \ do\n    if is_string(val) and (val:find(substring) ~= nil) then\n      table.insert(filtered,\
    \ val)\n    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaoubglyc.lua:7:\
    \ attempt to call a nil value (global 'is_table')\nstack traceback:\n\t/tmp/tmpaoubglyc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaoubglyc.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, str in ipairs(strings) do\n\
    \        if str:find(substring) then\n            table.insert(filtered, str)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, s in ipairs(strings) do\n    \
    \    if s:find(substring) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, s in ipairs(strings) do\n    \
    \    if string.find(s, substring) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return tablex.filter(strings, function(s) return s:find(substring)\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpei7ypc7r.lua:7:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmpei7ypc7r.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpei7ypc7r.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = {}\n  for _, str in ipairs(strings) do\n \
    \   if string.find(str, substring) then\n      table.insert(new_strings, str)\n\
    \    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local t = {}\n    for i, v in ipairs(strings) do\n        if\
    \ v:find(substring) then\n            table.insert(t, v)\n        end\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local results = {}\n  for _, val in pairs(strings) do\n    if\
    \ val:match(substring) then\n      table.insert(results, val)\n    end\n  end\n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, v in ipairs(strings) do\n    \
    \    if string.find(v, substring) then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if vim.startswith(s,\
    \ substring) then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp15xmz59q.lua:9:\
    \ attempt to index a nil value (global 'vim')\nstack traceback:\n\t/tmp/tmp15xmz59q.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp15xmz59q.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local out = {}\n    for k,v in pairs(strings) do\n        if\
    \ string.find(v, substring) then\n            table.insert(out, v)\n        end\n\
    \    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return utils.map(\n    function(s)\n      if string.find(s, substring)\
    \ then\n        return s\n      end\n    end,\n    strings\n  )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpra1_nyhz.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpra1_nyhz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpra1_nyhz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, v in ipairs(strings) do\n    if string.find(v,\
    \ substring) then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in ipairs(strings) do\n  \
    \      if string.find(str, substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in ipairs(strings) do\n  \
    \      if str:find(substring) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _,string in ipairs(strings) do\n    if\
    \ string:find(substring) then\n      table.insert(result, string)\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal ret = {}\n\tfor _,s in ipairs(strings) do\n\t\tif string.find(s,\
    \ substring) then\n\t\t\ttable.insert(ret, s)\n\t\tend\n\tend\n\treturn ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in ipairs(strings) do\n  \
    \      if string.find(str, substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, s in ipairs(strings) do\n  \
    \      if string.find(s, substring) then\n            table.insert(filtered, s)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in ipairs(strings) do\n  \
    \      if string.find(str, substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local ret = {}\n    for key, value in pairs(strings) do\n  \
    \      if utils.string_contains(value, substring) then\n            table.insert(ret,\
    \ value)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwrf64b8k.lua:9:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpwrf64b8k.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwrf64b8k.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in ipairs(strings) do\n  \
    \      if str:find(substring) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, v in ipairs(strings) do\n    \
    \    if v:find(substring) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_strings = {}\n    for _, val in pairs(strings) do\n\
    \        if string.find(val, substring) then\n            table.insert(new_strings,\
    \ val)\n        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local ret = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:match(substring) then\n            table.insert(ret, s)\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _,s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local array = {}\n    for _,string in pairs(strings) do\n  \
    \      if string.find(string, substring) then\n            table.insert(array,\
    \ string)\n        end\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local found = {}\n  for _, str in ipairs(strings) do\n    if str:match(substring)\
    \ then\n      table.insert(found, str)\n    end\n  end\n  return found\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local ret = {}\n    for _, k in ipairs(strings) do\n       \
    \ if string.find(k, substring) then\n            table.insert(ret, k)\n      \
    \  end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local strings_filtered = {}\n    for k,v in pairs(strings) do\n\
    \        if v:find(substring) then\n            table.insert(strings_filtered,\
    \ v)\n        end\n    end\n    return strings_filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local out = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:find(substring) then\n            table.insert(out, s)\n        end\n \
    \   end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if not istable(strings) then\n        return {}\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuyk6hm2h.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i = 1, #strings do\n    if (string.find(strings[i],\
    \ substring) ~= nil) then\n      table.insert(result, strings[i])\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local strings_filtered = {}\n  for i, value in ipairs(strings)\
    \ do\n    if string.find(value, substring) then\n      table.insert(strings_filtered,\
    \ value)\n    end\n  end\n  return strings_filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if not strings or not substring then\n        return {}\n  \
    \  end\n    local res = {}\n    for _, string in ipairs(strings) do\n        if\
    \ string:match(substring) then\n            table.insert(res, string)\n      \
    \  end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, s in ipairs(strings) do\n    \
    \    if s:match(substring) then\n            table.insert(result, s)\n       \
    \ end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif\
    \ str:match(substring) then\n\t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string:find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local ret = {}\n    for i,str in ipairs(strings) do\n      \
    \  if str:find(substring) then\n            table.insert(ret, str)\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, string in ipairs(strings) do\n\t\t\
    if string:find(substring) then\n\t\t\ttable.insert(result, string)\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, v in ipairs(strings) do\n    \
    \    if v:find(substring) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if type(strings) ~= 'table' then\n        error('Invalid input!\
    \ Expected a table of strings!')\n    end\n    if type(substring) ~= 'string'\
    \ then\n        error('Invalid input! Expected a string!')\n    end\n    local\
    \ filtered = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(filtered, s)\n        end\n    end\n    return\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, s in ipairs(strings) do\n    \
    \    if string.find(s, substring) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\treturn table.filter(strings, function(element)\n\t\treturn string.find(element,\
    \ substring) ~= nil\n\tend)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf5p7err1.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpf5p7err1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf5p7err1.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal filtered = {}\n\tfor _, string in ipairs(strings) do\n\t\
    \tif string.find(string, substring) then\n\t\t\ttable.insert(filtered, string)\n\
    \t\tend\n\tend\n\treturn filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local matches = {}\n  for _, v in ipairs(strings) do\n    if string.find(v,\
    \ substring) then\n      table.insert(matches, v)\n    end\n  end\n  return matches\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, s in ipairs(strings) do\n    \
    \    if s:find(substring) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local res = {}\n    for i, str in ipairs(strings) do\n     \
    \   if string.find(str, substring) then\n            table.insert(res, str)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.find(string, substring) then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local res = {}\n    for _, v in ipairs(strings) do\n       \
    \ if v:find(substring) then\n            table.insert(res, v)\n        end\n \
    \   end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in ipairs(strings) do\n  \
    \      if string.find(str, substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local set = {}\n  for _, s in ipairs(strings) do\n    if (s:find(substring))\
    \ then\n      table.insert(set, s)\n    end\n  end\n  return set\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, v in ipairs(strings) do\n    \
    \    if string.find(v, substring) then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local matches = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(matches, s)\n    end\n  end\n  return matches\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal rv = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:find(substring)\
    \ then\n\t\t\ttable.insert(rv, s)\n\t\tend\n\tend\n\treturn rv\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal filtered = {}\n\tfor _, s in ipairs(strings) do\n\t\tif\
    \ (s:find(substring)) then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\t\
    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, s in ipairs(strings) do\n    \
    \    if s:find(substring) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor i, v in ipairs(strings) do\n\t\tif v:find(substring)\
    \ then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local output = {}\n    for i, s in ipairs(strings) do\n    \
    \    if string.find(s, substring) then\n            table.insert(output, s)\n\
    \        end\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
