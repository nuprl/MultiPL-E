name: HumanEval_47_median
language: lua
prompt: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2, 4,\
  \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function median(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
  \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
  \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Sort l first\n  local tmp = {}\n  for i, v in ipairs(l) do\n \
    \   tmp[i] = v\n  end\n  table.sort(tmp)", "    assert(type(l) == \"table\", \"\
    expected table\")\n    local n = #l\n    assert(n > 0, \"expected non-empty table\"\
    )\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n\
    \        return l[math.ceil(n / 2)]\n    end\nend", "\tlocal l = sorted(l)\n\t\
    local n = #l\n\treturn (l[(n+1)/2] + l[(n+2)/2]) / 2\nend", "\tlocal n = #l\n\t\
    if n == 0 then return nil end\n\tif n == 1 then return l[1] end\n\t\n\tlocal t\
    \ = {}\n\tfor i, v in ipairs(l) do\n\t\tt[#t + 1] = v\n\tend\n\t\n\ttable.sort(t)\n\
    \t\n\tif n % 2 == 0 then\n\t\treturn (t[n / 2] + t[n / 2 + 1]) / 2\n\telse\n\t\
    \treturn t[(n + 1) / 2]\n\tend\nend", "  local temp = clone(l)\n  sort(temp)\n\
    \  if #temp % 2 == 0 then\n    return (temp[#temp/2] + temp[#temp/2+1]) / 2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "    if #l == 0 then\n\
    \        return nil\n    end\n    local e = {}\n    for _, v in ipairs(l) do\n\
    \        e[#e + 1] = v\n    end\n    table.sort(e)\n    if #e % 2 == 0 then\n\
    \        return (e[#e / 2] + e[#e / 2 + 1]) / 2\n    else\n        return e[math.ceil(#e\
    \ / 2)]\n    end\nend", "\tlocal function comp(a, b)\n\t\treturn a < b\n\tend\n\
    \tlocal l2 = list.copy(l)\n\ttable.sort(l2, comp)\n\tlocal n = #l2\n\tlocal m\
    \ = math.floor(n / 2)\n\tif n % 2 == 0 then\n\t\treturn (l2[m] + l2[m + 1]) /\
    \ 2\n\telse\n\t\treturn l2[m + 1]\n\tend\nend", "  if not l then\n    return nil\n\
    \  end\n  local ll = copy(l)\n  table.sort(ll)\n  local n = #ll\n  if n == 0 then\n\
    \    return nil\n  elseif n % 2 == 0 then\n    local m = n / 2\n    return (ll[m]\
    \ + ll[m + 1]) / 2\n  else\n    return ll[(n + 1) / 2]\n  end\nend", "    local\
    \ sl = quick_sort(l)\n    local n = #sl\n    if n == 0 then\n        return 0\n\
    \    elseif n % 2 == 1 then\n        return sl[math.ceil(n/2)]\n    else\n   \
    \     return (sl[n/2] + sl[n/2+1]) / 2\n    end\nend", "\tlocal sort = table.sort\n\
    \tlocal len = #l\n\tsort(l)\n\tlocal m = len % 2 == 0 and (l[len / 2] + l[len\
    \ / 2 + 1]) / 2 or l[(len + 1) / 2]\n\treturn m\nend", "\tlocal sl = _.sort(l)\n\
    \tlocal half = math.floor(#sl / 2)\n\tif #sl % 2 == 0 then\n\t\treturn (sl[half]\
    \ + sl[half + 1]) / 2\n\telse\n\t\treturn sl[half + 1]\n\tend\nend", "    local\
    \ m = median_copy(l)\n    table.sort(m)\n    local n = #m\n    if n == 0 then\n\
    \        return nil\n    elseif n % 2 == 0 then\n        return (m[n / 2] + m[n\
    \ / 2 + 1]) / 2\n    else\n        return m[math.ceil(n / 2)]\n    end\nend",
  "\tlocal t = {}\n\tfor _,v in ipairs(l) do\n\t\ttable.insert(t, v)\n\tend\n\ttable.sort(t)\n\
    \tlocal i = #t\n\tif i % 2 == 0 then\n\t\treturn (t[i/2] + t[i/2+1]) / 2\n\telse\n\
    \t\treturn t[(i+1)/2]\n\tend\nend", "    local t = {}\n    for _, x in ipairs(l)\
    \ do\n        t[#t + 1] = x\n    end\n    if #t == 0 then\n        return nil\n\
    \    end\n    table.sort(t)\n    if #t % 2 == 0 then\n        return (t[#t / 2]\
    \ + t[#t / 2 + 1]) / 2\n    else\n        return t[math.ceil(#t / 2)]\n    end\n\
    end", "    assertx.is_table(l)\n    assertx.all_are(l, 'number')\n    local n\
    \ = #l\n    assertx.gt(n, 0)\n    table.sort(l)\n    local index = math.floor(n\
    \ / 2)\n    if n % 2 == 0 then\n        return (l[index] + l[index + 1]) / 2\n\
    \    else\n        return l[index + 1]\n    end\nend", "  local num = #l\n  local\
    \ m = math.floor(num / 2)\n  local n = num % 2", "\tlocal list = table.copy(l)\n\
    \ttable.sort(list)\n\tlocal length = #list\n\tlocal middle = length/2\n\tif not\
    \ math.fmod(length, 2) then\n\t\treturn (list[middle] + list[middle+1])/2\n\t\
    else\n\t\treturn list[math.ceil(middle)]\n\tend\nend", "    local m = {}\n   \
    \ for k, v in pairs(l) do\n        m[k] = v\n    end\n    table.sort(m)\n    if\
    \ #m % 2 == 0 then\n        return (m[#m / 2] + m[#m / 2 + 1]) / 2\n    else\n\
    \        return m[(#m + 1) / 2]\n    end\nend", "  local t = sorted_keys(l)\n\
    \  if #t % 2 == 0 then\n    return (t[#t/2] + t[#t/2+1]) / 2\n  else\n    return\
    \ t[(#t+1)/2]\n  end\nend", "  if not l or #l == 0 then\n    return nil\n  end\n\
    \  local sorted = {}\n  for i, v in ipairs(l) do\n    sorted[i] = v\n  end\n \
    \ table.sort(sorted)\n  local len = #sorted\n  if len % 2 == 0 then\n    return\
    \ (sorted[len / 2] + sorted[len / 2 + 1]) / 2\n  else\n    return sorted[math.ceil(len\
    \ / 2)]\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
