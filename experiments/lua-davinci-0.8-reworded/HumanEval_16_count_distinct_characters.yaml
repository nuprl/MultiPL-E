name: HumanEval_16_count_distinct_characters
language: lua
prompt: "-- Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n-- >>> count_distinct_characters('Jerry')\n\
  -- 4\nlocal function count_distinct_characters(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
  \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
  \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local count = 0\n    local t = {}\n    for char in string:gmatch(\"\
    .\") do\n        if not t[char:lower()] then\n            t[char:lower()] = 1\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  -- lowercase string\n  string = string:lower()\n  local chars = {}\n  for char\
    \ in string:gmatch('.') do\n    chars[char] = true\n  end\n  return table_size(chars)\n\
    end", "    local char_set = {}\n    local uppercase_string = string:upper()\n\
    \    for char in uppercase_string:gmatch('.') do\n        char_set[char] = true\n\
    \    end\n    return utils.table_size(char_set)\nend", "  local characters = {}\n\
    \  local count = 0\n  local length = string.len(string)\n  for index = 1, length\
    \ do\n    local character = string.sub(string, index, index)\n    if not characters[character]\
    \ then\n      characters[character] = true\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local string = string:lower()\n    local index\
    \ = 1\n    local chars = {}\n    local found = false\n    while index <= #string\
    \ do\n        for i,c in ipairs(chars) do\n            if c == string:sub(index,\
    \ index) then\n                found = true\n                break\n         \
    \   end\n        end\n        if not found then\n            table.insert(chars,\
    \ string:sub(index, index))\n        end\n        index = index + 1\n        found\
    \ = false\n    end\n    return #chars\nend", "    local count = 0\n    local characters\
    \ = {}\n    local index = string:len()\n    while index > 0 do\n        if not\
    \ characters[string:sub(index, index)] then\n            count = count + 1\n \
    \           characters[string:sub(index, index)] = true\n        end\n       \
    \ index = index - 1\n    end\n    return count\nend", "    local characters =\
    \ {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n     \
    \   characters[char:lower()] = true\n    end\n    return #characters\nend", " \
    \   local charSet = {}\n    local count = 0\n    local len = #string\n    local\
    \ lower_string = string:lower()\n    for i = 1, len do\n        local c = lower_string:sub(i,\
    \ i)\n        if charSet[c] == nil then\n            charSet[c] = true\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend", "   \
    \ -- You write this part\n    local dict = {}\n    local count = 0\n    for i\
    \ = 1, #string do\n        local char = string:sub(i, i)\n        local upper_char\
    \ = char:upper()\n        if dict[upper_char] == nil then\n            dict[upper_char]\
    \ = 1\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    return utils.string_to_set(string):size()\nend", "  local chars = {}\n\
    \  for char in string:gmatch('.') do\n    if not chars[char:lower()] then\n  \
    \    chars[char:lower()] = true\n    end\n  end\n  return table.length(chars)\n\
    end", "    local result = {}\n    for char in string:gmatch('%a') do\n       \
    \ if not result[char:lower()] then\n            result[char:lower()] = true\n\
    \        end\n    end\n    return count_table(result)\nend", "    return #unique_characters(string)\n\
    end", "    local distinct = {}\n    local str = string:lower()\n    for i = 1,\
    \ #str do\n        distinct[str:sub(i, i)] = 1\n    end\n    return #distinct\n\
    end", "    return len(set(list(string.lower(string))))\nend", "\tlocal characters\
    \ = {}\n\tfor character in string:gmatch(\".\") do\n\t\tcharacters[character:lower()]\
    \ = true\n\tend\n\treturn #table.keys(characters)\nend", "\tlocal characters =\
    \ {}\n\tfor c in string:gmatch('.') do\n\t\tcharacters[c:lower()] = true\n\tend\n\
    \treturn #characters\nend", "\tstring = string:lower()\n\tlocal character_list\
    \ = {}\n\tfor i = 1, #string do\n\t\tcharacter_list[string:sub(i, i)] = 1\n\t\
    end\n\treturn table.getn(character_list)\nend", "    local seen = {}\n    local\
    \ count = 0\n    for character in string:gmatch('.') do\n        if not seen[character:lower()]\
    \ then\n            seen[character:lower()] = true\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "\t-- TODO: IMPLEMENT ME\n\
    \treturn 0\nend", "    local dic = {}\n    for k, v in string.gmatch(string, \"\
    ([%w%s])\") do\n        if dic[k] == nil then\n            dic[k] = 1\n      \
    \  end\n    end\n    return #dic\nend", "    local length = string:len()\n   \
    \ local last_char = string:sub(length, length)\n    local counts = {[last_char]\
    \ = 1}\n    for i = 1, length - 1 do\n        local char = string:sub(i, i)\n\
    \        counts[char] = (counts[char] or 0) + 1\n    end\n    return get_count(counts)\n\
    end", "  local str = string.lower(string)\n  local tbl = {}\n  for i = 1, #str\
    \ do\n    tbl[str:sub(i, i)] = true\n  end\n  return #tbl\nend", "  local unique\
    \ = ''\n  for i = 1, string.len(string) do\n    local char = string.sub(string,\
    \ i, i)\n    if string.find(unique, char, 1, true) == nil then\n      unique =\
    \ unique .. char\n    end\n  end\n  return string.len(unique)\nend", "    local\
    \ tbl = {}\n    for char in string:gmatch(\".\") do\n        tbl[char:lower()]\
    \ = true\n    end\n    return #tbl\nend", "    local char_set = {}\n    local\
    \ count = 0\n    local string_lower = string:lower()\n    for i = 1, #string_lower\
    \ do\n        if char_set[string_lower:sub(i, i)] == nil then\n            char_set[string_lower:sub(i,\
    \ i)] = true\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local s = string:lower()\n    local seen = {}\n    local count\
    \ = 0\n    for c in s:gmatch('.') do\n        if not seen[c] then\n          \
    \  seen[c] = true\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local string_lower = string:lower()\n    local count = 0\n\
    \    local characters = {}\n    for i=1, string.len(string_lower) do\n       \
    \ local character = string_lower:sub(i, i)\n        if characters[character] ==\
    \ nil then\n            count = count + 1\n            characters[character] =\
    \ true\n        end\n    end\n    return count\nend", "    local characters =\
    \ {}\n    local count = 0\n    for i = 1, #string do\n        local character\
    \ = string:sub(i, i)\n        if not characters[character] then\n            characters[character]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local char_used = {}\n    local num_of_char = 0\n    for char in string:gmatch'.'\
    \ do\n        if not char_used[char:lower()] then\n            char_used[char:lower()]\
    \ = true\n            num_of_char = num_of_char + 1\n        end\n    end\n  \
    \  return num_of_char\nend", "  string = string:lower()\n  local chars = {}\n\
    \  for c in string:gmatch('.') do\n    chars[c] = true\n  end\n  return #chars\n\
    end", "    local count = 0\n    local all_chars = {}\n    for i = 1, #string do\n\
    \        local current_char = string:sub(i, i)\n        if all_chars[current_char]\
    \ == nil then\n            count = count + 1\n            all_chars[current_char]\
    \ = true\n        end\n    end\n    return count\nend", "\tlocal lower = string:lower()\n\
    \tlocal count = 0\n\tfor i = 1, #lower do\n\t\tlocal c = lower:sub(i, i)\n\t\t\
    if not count_distinct_characters[c] then\n\t\t\tcount_distinct_characters[c] =\
    \ true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local\
    \ count = 0\n    local tmp = {}\n    for i=1, #string do\n        local c = string:sub(i,i)\n\
    \        if not tmp[c] then\n            tmp[c] = true\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local chars = {}\n \
    \   for c in string:gmatch('.') do\n        if not chars[c:lower()] then\n   \
    \         chars[c:lower()] = true\n        end\n    end\n    return (#chars)\n\
    end", "    return #utils.remove_duplicates(string:lower():gmatch(\"%a\"))\nend",
  "    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend", "    --return count(list(set(list(string.lower(string)))))\n\
    \    return count(list(set(list(string))))\nend", "  local dic = {}\n  for _,\
    \ c in ipairs(string) do\n    dic[c] = true\n  end\n  return #dic\nend", "   \
    \ local distinct = {}\n    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        if not distinct[string.lower(string:sub(i, i))] then\n         \
    \   distinct[string.lower(string:sub(i, i))] = true\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    return #string\nend",
  "  local unique = {}\n  local string = lower_case(string)\n  for i = 1, string.len(string)\
    \ do\n    unique[string.sub(string, i, i)] = true\n  end\n  return table.getn(unique)\n\
    end", "    local characters = {}\n    for c in string:gmatch('.') do\n       \
    \ characters[c:lower()] = true\n    end\n    return table.getn(characters)\nend",
  "  local used = {}\n  local count = 0\n  for k, v in string.gmatch(string, '.')\
    \ do\n    if not used[v:lower()] then\n      used[v:lower()] = true\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  if #string == 0 then\n\
    \    return 0\n  end\n  string = string:lower()\n  local seen = {}\n  local distinct_count\
    \ = 0\n  for i=1,#string do\n    if not seen[string:sub(i,i)] then\n      distinct_count\
    \ = distinct_count + 1\n      seen[string:sub(i,i)] = true\n    end\n  end\n \
    \ return distinct_count\nend", "    local unique = {}\n    for c in string:gmatch('.')\
    \ do\n        unique[c:lower()] = true\n    end\n    return h.len(unique)\nend",
  "    return utils.uniq(utils.to_lower(string):gmatch(\"%a\")).n\nend", "    return\
    \ #string\nend", "    local chars = {}\n    for c in string:gmatch('.') do\n \
    \       local key = c:lower()\n        if not chars[key] then\n            chars[key]\
    \ = true\n        end\n    end\n    return table.count(chars)\nend", "    return\
    \ string:upper():gsub('[^%w]', ''):len()\nend", "  local chars = {}\n  for i =\
    \ 1, #string do\n    local c = string:sub(i, i)\n    if not chars[c] then\n  \
    \    chars[c] = true\n    end\n  end\n  return count_table_entries(chars)\nend",
  "    return #set.new(string:lower()):totable()\nend", "    local chars_table = {}\n\
    \    for c in string:gmatch('%w') do\n        local uppercase_c = c:upper()\n\
    \        if not chars_table[uppercase_c] then\n            chars_table[uppercase_c]\
    \ = true\n        end\n    end\n    return #chars_table\nend", "    if not string\
    \ then return 0 end\n    local result = {}\n    for i = 1, #string do\n      \
    \  local c = string:sub(i, i)\n        local lc = c:lower()\n        if not result[lc]\
    \ then\n            result[lc] = true\n        end\n    end\n    return #result\n\
    end", "  local found = {}\n  local count = 0\n  for i = 1, #string do\n    local\
    \ char = string:sub(i, i)\n    local lower_char = char:lower()\n    if found[lower_char]\
    \ == nil then\n      found[lower_char] = true\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "\tlocal t={}\n\tlocal count=0\n\tfor i=1,#string\
    \ do\n\t\tlocal char=string:sub(i,i)\n\t\tif not t[char] then\n\t\t\tt[char]=1\n\
    \t\t\tcount=count+1\n\t\tend\n\tend\n\treturn count\nend", "    -- Turn all the\
    \ letters in the string into lowercase, so we only need to count one of each letter\n\
    \    -- The gsub function can replace a match with a string\n    -- gsub(string,\
    \ match_pattern, replace_string)\n    -- In our case, the match pattern is '[A-Z]'\
    \ meaning any capital letter, and the replace_string is '[A-Z]' transformed to\
    \ lowercase\n    -- We could have used '[A-Z]' -> '[a-z]' instead, but that would\
    \ not have taught us anything\n    local lowercase_string = string:gsub('[A-Z]',\n\
    \                                         function(c)\n                      \
    \                       return c:lower()\n                                   \
    \      end)\n    -- Now we can get the length of the string, but taking the length\
    \ of a table instead\n    -- We make a table by inserting each character into\
    \ a table\n    -- If we insert each character into a table using table.insert,\
    \ then we'll be sure that each character only appears once in the table\n    local\
    \ character_set = {}\n    for c in lowercase_string:gmatch('.') do\n        table.insert(character_set,\
    \ c)\n    end\n    return #character_set\nend", "\treturn #(string:lower()):gsub('[^%a]',\
    \ '')\nend", "    local character_array = {}\n    for i=1, #string do\n      \
    \  local character = string:sub(i,i)\n        if not character_array[character]\
    \ then\n            character_array[character] = true\n        end\n    end\n\
    \    return #character_array\nend", "    local characters = {}\n    for char in\
    \ string:gmatch('.') do\n        characters[char:lower()] = true\n    end\n  \
    \  return table.length(characters)\nend", "  local char_map = {}\n  for c in string:gmatch('%a')\
    \ do\n    char_map[c:lower()] = true\n  end\n  return tlen(char_map)\nend", " \
    \   local distinct = {}\n    local characters = to_lower_case(string)\n    for\
    \ i = 1, #characters do\n        distinct[characters:sub(i, i)] = true\n    end\n\
    \    return #keys(distinct)\nend", "  return count_distinct(string:lower():split())\n\
    end", "  local set = {}\n  local i = 1\n  while i <= #string do\n    set[string:sub(i,\
    \ i)] = true\n    i = i + 1\n  end\n  return #set\nend", "\tlocal set = {}\n\t\
    local case_insensitive_string = string:lower()\n\tfor char in case_insensitive_string:gmatch('.')\
    \ do\n\t\tset[char] = true\n\tend\n\treturn #set\nend", "    local dictionary\
    \ = {}\n    for i = 1, #string do\n        local character = string:sub(i, i)\n\
    \        if not dictionary[character] then\n            dictionary[character]\
    \ = true\n        end\n    end\n    return #dictionary\nend", "    local lowercase\
    \ = string:lower()\n    local lookup = {}\n    for i = 1, #lowercase do\n    \
    \    lookup[lowercase:sub(i, i)] = true\n    end\n    return #lowercase, #lowercase\
    \ ~= table.length(lookup)\nend", "    local chars = {}\n    for i = 1, string.len(string)\
    \ do\n        local char = string.sub(string, i, i)\n        chars[char] = true\n\
    \    end\n    return table.size(chars)\nend", "    local count = 0\n    for i\
    \ = 1, #string do\n        local n = string.sub(string, i, i)\n        local found\
    \ = false\n        for j = 0, count - 1 do\n            if n == string.sub(string,\
    \ j + 1, j + 1) then\n                found = true\n                break\n  \
    \          end\n        end\n        if not found then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    -- TODO: implement this\n\
    \    local set = {}\n    local count = 0\n    for i = 1, string.len(string) do\n\
    \        if set[string.sub(string, i, i)] == nil then\n            set[string.sub(string,\
    \ i, i)] = 1\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    local exists = {}\n    for i = 1, #string\
    \ do\n        local c = string:sub(i, i)\n        local c_lower = c:lower()\n\
    \        if not exists[c_lower] then\n            count = count + 1\n        \
    \    exists[c_lower] = true\n        end\n    end\n    return count\nend", "\t\
    local chars = {}\n\tlocal count = 0\n\tfor char in string:gmatch('.') do\n\t\t\
    if not chars[char:lower()] then\n\t\t\tchars[char:lower()] = 1\n\t\t\tcount =\
    \ count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local t = {}\n    for\
    \ _, c in ipairs(string:lower():split('')) do\n        t[c] = true\n    end\n\
    \    return table.size(t)\nend", "  return len(distinct_characters(string))\n\
    end", "  local str = {}\n  for i=1,#string do\n    str[string.lower(string:sub(i,i))]\
    \ = true\n  end\n  return #str\nend", "    local table_of_distinct_characters\
    \ = {}\n    for character in string:gmatch('.') do\n        table_of_distinct_characters[character:lower()]\
    \ = true\n    end\n    return table_size(table_of_distinct_characters)\nend",
  "  -- Create an empty set for unique characters\n  local unique_characters = {}\n\
    \  -- Transform each character from the string to an appropriate lowercase character\n\
    \  -- and add it to the set\n  for character in string:gmatch('%w') do\n    unique_characters[character:lower()]\
    \ = true\n  end\n  -- Return the number of unique characters in the set\n  return\
    \ #unique_characters\nend", "    string = string:lower()\n    local char_table\
    \ = {}\n    for i = 1, #string do\n        char_table[string:sub(i, i)] = true\n\
    \    end\n    return #char_table\nend", "  local characters = {}\n  for i = 1,\
    \ string.len(string) do\n    if not characters[string.lower(string.sub(string,\
    \ i, i))] then\n      characters[string.lower(string.sub(string, i, i))] = 1\n\
    \    end\n  end\n  return table.count(characters)\nend", "  local set = {}\n \
    \ for s in string:gmatch(\"[%a]\") do\n    set[s:lower()] = true\n  end\n  return\
    \ table_size(set)\nend", "    local t = { }\n    for i = 1, #string do\n     \
    \   local c = string:sub(i, i)\n        t[c] = true\n    end\n    return #t\n\
    end", "    local chars = {}\n    local distinct_chars = 0\n    local lower_string\
    \ = string:lower()\n    for i = 1, #lower_string do\n        local char = lower_string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \      distinct_chars = distinct_chars + 1\n        end\n    end\n    return distinct_chars\n\
    end", "    --[[\n        We'll use a dictionary to count how many times each character\
    \ has occurred\n        If a character has occurred 0 times, it doesn't exist\
    \ in the string\n    ]]\n    local count = {}\n    local total = 0\n    -- Loop\
    \ through the string\n    for i=1, #string do\n        -- Set the current character\
    \ as the key in the dictionary\n        -- If the key already exists, add 1 to\
    \ the value\n        -- If the key doesn't exist, set the value to 1\n       \
    \ count[string:sub(i,i)] = (count[string:sub(i,i)] or 0) + 1\n    end\n    --\
    \ Loop through the dictionary of characters\n    for key, value in pairs(count)\
    \ do\n        -- If a character has occurred at least once\n        if value >\
    \ 0 then\n            -- Add 1 to the total\n            total = total + 1\n \
    \       end\n    end\n    -- Return the total\n    return total\nend", "  local\
    \ table_of_characters = {};\n  local distinct_characters = 0;\n  for character\
    \ in string:gmatch(\"%a\") do\n    table_of_characters[character:lower()] = true;\n\
    \  end\n  for _ in pairs(table_of_characters) do\n    distinct_characters = distinct_characters\
    \ + 1;\n  end\n  return distinct_characters;\nend", "  local count = 0\n  for\
    \ c in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n    if not\
    \ characters[c] then\n      characters[c] = true\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend", "    local characters = {}\n    for i = 1,\
    \ #string do\n        local index = string.lower(string:sub(i, i))\n        if\
    \ not characters[index] then\n            characters[index] = 1\n        end\n\
    \    end\n    return #characters\nend", "    local list = chars_array(string)\n\
    \    local set = Set(list)\n    return #set\nend", "  return count_occurrences(string:lower())\n\
    end", "  return count_unique(string:upper():gmatch('%a'))\nend", "  -- TODO: Implement\
    \ this function\n  -- This is an example of how to use a set\n  local s = set.new()\n\
    \  for c in string:gmatch(\".\") do\n    s:add(c:lower())\n  end\n  return s:length()\n\
    end", "    -- Turn string into a set, omitting duplicates.\n    local set = {}\n\
    \    for character in string:gmatch('%w') do\n        set[character:lower()] =\
    \ true\n    end\n    -- Return size of the set.\n    return #set\nend", "    --\
    \ TODO: implement\n    return 0\nend", "  local count = 0\n  for i = 1, #string\
    \ do\n    local letter = string:sub(i, i)\n    if not string.find(string:sub(1,\
    \ i - 1), letter) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    return count_distinct(string:upper():to_chars())\nend", "    local\
    \ count = 0\n    local characters = {}\n    for i = 1,#string do\n        local\
    \ char = string:sub(i,i)\n        char = char:lower()\n        if characters[char]\
    \ == nil then\n            count = count + 1\n            characters[char] = true\n\
    \        end\n    end\n    return count\nend", "    local distinct_characters\
    \ = {}\n    local count = 0\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if not distinct_characters[c] then\n            distinct_characters[c]\
    \ = 1\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for char in string:gmatch(\".\") do\n    count = count\
    \ + 1\n  end\n  return count\nend", "  return string:lower():gsub('[^%a]', ''):len()\n\
    end", "    local char_map = {}\n    local count = 0\n    for char in string:gmatch('.')\
    \ do\n        if char_map[char] == nil then\n            char_map[char] = 1\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  return #(string:lower():gsub('%a', ''))\nend", "    local charmap = {}\n    for\
    \ i = 1, #string do\n        charmap[string:sub(i, i)] = 1\n    end\n    return\
    \ #charmap\nend", "  local dist_chars = {}\n  local count = 0\n  for i = 1, #string\
    \ do\n    if not dist_chars[string:sub(i, i)] then\n      dist_chars[string:sub(i,\
    \ i)] = true\n      count = count + 1\n    end\n  end\n  return count\nend", "\t\
    local characters = {}\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i,\
    \ i)\n\t\tcharacters[char:lower()] = true\n\tend\n\treturn table_length(characters)\n\
    end", "  local hash = {}\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    hash[char:lower()] = 1\n  end\n  return len(hash)\nend", "    return\
    \ #table.unique(table.keys(table.create_table_from_string(string)))\nend", " \
    \   local char_set = {}\n    for char in string:gmatch(\"%w\") do\n        char_set[char:lower()]\
    \ = true\n    end\n    return table.length(char_set)\nend", "    local distinct_characters\
    \ = {}\n    for i = 1, string.len(string) do\n        local c = string.sub(string,\
    \ i, i)\n        distinct_characters[c] = true\n    end\n    return table.getn(distinct_characters)\n\
    end", "\tlocal character_set = {}\n\tfor char in string:gmatch('.') do\n\t\tcharacter_set[char:lower()]\
    \ = true\n\tend\n\treturn character_set:len()\nend", "\tlocal dict = {}\n\tfor\
    \ i = 1, string.len(string) do\n\t\tlocal char = string.sub(string, i, i)\n\t\t\
    if not dict[char] then\n\t\t\tdict[char] = true\n\t\tend\n\tend\n\treturn table.length(dict)\n\
    end", "    return #string\nend", "  local hash = {}\n  for i = 1, #string do\n\
    \    local char = string:sub(i, i)\n    if not hash[char] then\n      hash[char]\
    \ = true\n    end\n  end\n  return count_table_keys(hash)\nend", "  local t =\
    \ {}\n  for c in string:gmatch(\".\") do\n    t[c:lower()] = true\n  end\n  return\
    \ utils.len(t)\nend", "    local character_table = {}\n    for char in string:gmatch('%a')\
    \ do\n        character_table[char:lower()] = true\n    end\n    return #character_table\n\
    end", "\treturn #string -- to be replaced with real implementation\nend", "\t\
    local set = {}\n\tlocal length = 0\n\tlocal string_lower = string:lower()\n\t\
    for i = 1, #string_lower do\n\t\tlocal character = string_lower:sub(i, i)\n\t\t\
    if not set[character] then\n\t\t\tset[character] = true\n\t\t\tlength = length\
    \ + 1\n\t\tend\n\tend\n\treturn length\nend", "\tlocal distinct = {}\n\tfor char\
    \ in string:gmatch('.') do\n\t\tdistinct[char:lower()] = true\n\tend\n\treturn\
    \ table.length(distinct)\nend", "    return #(string:lower()):gsub('%a', '')\n\
    end", "  return #set.new(string:lower():gmatch('.'))\nend", "    if string ==\
    \ '' then\n        return 0\n    end\n    local seen = {}\n    local count = 0\n\
    \    local first_char = string.sub(string, 1, 1)\n    local lower_first_char =\
    \ string.lower(first_char)\n    seen[lower_first_char] = true\n    count = count\
    \ + 1\n    for i = 2, string.len(string) do\n        char = string.sub(string,\
    \ i, i)\n        lower_char = string.lower(char)\n        if not seen[lower_char]\
    \ then\n            seen[lower_char] = true\n            count = count + 1\n \
    \       end\n    end\n    return count\nend", "  local t = {}\n  local count =\
    \ 0\n  for _, v in utf8.codes(string) do\n    if t[v] == nil then\n      t[v]\
    \ = 1\n      count = count + 1\n    end\n  end\n  return count\nend", "    return\
    \ #(mw.ustring.gsub(mw.ustring.lower(string), \"[^%a]\", \"\"))\nend", "  local\
    \ set = {}\n  local length = 0\n  for char in utf8.gmatch(string, \".\") do\n\
    \    if not set[char] then\n      set[char] = true\n      length = length + 1\n\
    \    end\n  end\n  return length\nend", "  -- Return the correct result\n  --\
    \ hints: \n  --     use the string:lower() method to map the string to all lower\
    \ case\n  --     use the # operator to get the size of a table\n  --     use the\
    \ table:insert() method to insert a new value into a table\n  --     use the table:remove()\
    \ method to remove an existing value from a table\n  --     use the table:sort()\
    \ method to sort a table\n  --     use the pairs() method to visit all key-value\
    \ pairs in a table\n  --     use the string:sub() method to return a substring\n\
    \  local result = 0", "    if #string == 0 then\n        return 0\n    end\n \
    \   local str = string.lower(string)\n    local unique_chars = ''\n    for _,\
    \ char in ipairs({string.byte(str, 1, #str)}) do\n        local char_str = string.char(char)\n\
    \        if string.find(unique_chars, char_str) == nil then\n            unique_chars\
    \ = unique_chars .. char_str\n        end\n    end\n    return #unique_chars\n\
    end", "    local distinct = {}\n    for i=1,#string do\n        if not distinct[string:sub(i,i):lower()]\
    \ then\n            distinct[string:sub(i,i):lower()] = true\n        end\n  \
    \  end\n    return #distinct\nend", "\tlocal str = {}\n\tfor i = 1, string.len(string)\
    \ do\n\t\tstr[string.sub(string, i, i)] = 1\n\tend\n\treturn table.getn(str)\n\
    end", "    local counter = 0\n    local characters = {}\n    for i = 1, #string\
    \ do\n        local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            counter = counter + 1\n            characters[char] = true\n    \
    \    end\n    end\n    return counter\nend", "    local characters = {}\n    local\
    \ count = 0\n    local len = #string\n    for i = 1, len do\n        local c =\
    \ string:sub(i, i)\n        if not characters[c] then\n            characters[c]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    return #tostring(string):gsub('[^A-Za-z]', ''):gsub('(.)(.*)%1', '%2'):gsub('(.)(.*)%1',\
    \ '%2')\nend", "    local count = 0\n    local characters = {}\n    for character\
    \ in string:gmatch('.') do\n        if not characters[character:lower()] then\n\
    \            count = count + 1\n            characters[character:lower()] = true\n\
    \        end\n    end\n    return count\nend", "  return table.len(string:lower():split(''))\n\
    end", "  local cs = {}\n  for i = 1, #string do\n    cs[string:sub(i, i):lower()]\
    \ = true\n  end\n  return #cs\nend", "\t--[[ TODO: refactor (minimize) ]]\n\t\
    local count = 0\n\tlocal s = {}\n\tlocal function helper(c)\n\t\tif not s[c] then\n\
    \t\t\ts[c] = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tforEachChar(string,\
    \ helper)\n\treturn count\nend", "  local set = {}\n  for i=1, #string do\n  \
    \  set[lower(string:sub(i,i))] = true\n  end\n  return len(set)\nend", "  local\
    \ len = string.len(string)\n  local seen = {}\n  local count = 0\n  for i = 1,\
    \ len do\n    if not seen[string.sub(string, i, i)] then\n      seen[string.sub(string,\
    \ i, i)] = true\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    local distinct_characters = {}\n    local n = 0\n    for char in string:gmatch('.')\
    \ do\n        if not distinct_characters[char:lower()] then\n            distinct_characters[char:lower()]\
    \ = true\n            n = n + 1\n        end\n    end\n    return n\nend", " \
    \   local characters = {}\n    for i = 1, #string do\n        local index = string.sub(string,\
    \ i, i)\n        if not characters[index] then\n            characters[index]\
    \ = index\n        end\n    end\n    return count_table_keys(characters)\nend",
  "  local t = {}\n  for i = 1, #string do\n    local c = string:sub(i, i)\n    t[c:lower()]\
    \ = c\n  end\n  return #t\nend", "  return #(string:lower():gsub('[^%a]', ''))\n\
    end", "    local characters = {}\n    for character in string:gmatch(\".\") do\n\
    \        characters[character:lower()] = true\n    end\n    return table.count(characters)\n\
    end", "  local count = 0\n  local existed = {}\n  for _, c in ipairs(string) do\n\
    \    if existed[c] == nil then\n      count = count + 1\n      existed[c] = true\n\
    \    end\n  end\n  return count\nend", "  local char_hash = {\n    upper_case\
    \ = {},\n    lower_case = {}\n  }\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if char:match('%u') then\n      char_hash.upper_case[char] = true\n\
    \    elseif char:match('%l') then\n      char_hash.lower_case[char] = true\n \
    \   end\n  end\n  return #char_hash.upper_case + #char_hash.lower_case\nend",
  "    local unique = {}\n    local count = 0\n    for i = 1, #string do\n       \
    \ if unique[string:sub(i, i):lower()] == nil then\n            unique[string:sub(i,\
    \ i):lower()] = true\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend", "    local s = string:lower()\n    local d = {}\n    for\
    \ c in s:gmatch'.' do\n        d[c] = true\n    end\n    return #d\nend", "\t\
    local result = {}\n\tlocal count = 0\n\tfor character in string:gmatch('.') do\n\
    \t\tif not result[character:lower()] then\n\t\t\tresult[character:lower()] = 1\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local hash\
    \ = {}\n    local count = 0\n    for i = 1, string.len(string) do\n        local\
    \ char = string.sub(string, i, i)\n        if (hash[char] == nil) then\n     \
    \       hash[char] = 1\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    local letters = {}\n    for\
    \ char in string:gmatch('%a') do\n        if not letters[char:lower()] then\n\
    \            letters[char:lower()] = true\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "    string = string:lower()\n   \
    \ local hash = {}\n    for c in string:gmatch('.') do\n        hash[c] = true\n\
    \    end\n    return #hash\nend", "    local out = 0\n    local seen = {}\n  \
    \  for c in string:gmatch(\".\") do\n        if not seen[c:lower()] then\n   \
    \         out = out + 1\n            seen[c:lower()] = true\n        end\n   \
    \ end\n    return out\nend", "  return count_distinct(split(string))\nend", " \
    \   local characters = {}\n    for c in string:gmatch('%l') do\n        characters[c:lower()]\
    \ = true\n    end\n    return #tablex.keys(characters)\nend", "    return table.length(table.unique(string:explode('')))\n\
    end", "  local char_map = {}\n  for _, char in ipairs(string) do\n    char_map[char]\
    \ = true\n  end\n  return count_keys(char_map)\nend", "    -- FIXME: Implement\n\
    \    -- FIXME: or just use this one: return #set.new(string:upper():gmatch('.'))\n\
    end", "    return count_distinct(sorted_characters(string))\nend", "    local\
    \ chars = {}\n    for i=1,string.len(string) do\n        chars[string.sub(string,\
    \ i, i)] = true\n    end\n    return chars\nend", "    return table.length(count_characters(string))\n\
    end", "    -- Create a dictionary of every character that exists in the string\n\
    \    local char_hash = {}\n    for i = 1, #string do\n        char_hash[string:sub(i,\
    \ i)] = true\n    end", "  local chars = string:lower():gsub('[^%a]', '')\n  return\
    \ #chars\nend", "  local total = 0\n  local char_list = {}\n  for char in string:gmatch('.')\
    \ do\n    if not char_list[char:lower()] then\n      total = total + 1\n     \
    \ char_list[char:lower()] = true\n    end\n  end\n  return total\nend", "    local\
    \ chars = {}\n    local count = 0\n    for i = 1, string.len(string) do\n    \
    \    if not chars[string.lower(string.sub(string, i, i))] then\n            chars[string.lower(string.sub(string,\
    \ i, i))] = 1\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local total = 0\n    local char_map = {}\n    for i = 1, string.len(string)\
    \ do\n        local c = string.sub(string, i, i)\n        local has_seen = false\n\
    \        for _, seen_c in pairs(char_map) do\n            if string.lower(c) ==\
    \ string.lower(seen_c) then\n                has_seen = true\n               \
    \ break\n            end\n        end\n        if not has_seen then\n        \
    \    char_map[i] = c\n            total = total + 1\n        end\n    end\n  \
    \  return total\nend", "    local uniq = {}\n    local lower = string:lower()\n\
    \    for c in lower:gmatch('.') do\n        uniq[c] = true\n    end\n    return\
    \ table.getn(uniq)\nend", "    local characters = {}\n    for character in string:gmatch('.')\
    \ do\n        local uppercase_character = character:upper()\n        if not characters[uppercase_character]\
    \ then\n            characters[uppercase_character] = true\n        end\n    end\n\
    \    return #characters\nend", "    local count = 0\n    local processed = {}\n\
    \    for i = 1, #string do\n        local c = string:sub(i, i)\n        if not\
    \ processed[c] then\n            count = count + 1\n            processed[c] =\
    \ true\n        end\n    end\n    return count\nend", "    local set = {}\n  \
    \  for i = 1, #string do\n        local ch = string:sub(i, i)\n        set[ch:lower()]\
    \ = true\n    end\n    return #set\nend", "    local count = 0\n    for i = 1,\
    \ #string do\n        local c = string:sub(i, i)\n        if not char_info[c]\
    \ then\n            char_info[c] = true\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend", "    local counts = {}\n    local lower_string\
    \ = string:lower()\n    for char in lower_string:gmatch('.') do\n        if counts[char]\
    \ == nil then\n            counts[char] = 0\n        end\n        counts[char]\
    \ = counts[char] + 1\n    end\n    return table.getn(counts)\nend", "    local\
    \ used = {}\n    local count = 0\n    for i = 1, #string do\n        local char\
    \ = string:sub(i, i)\n        if not used[char] then\n            used[char] =\
    \ true\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local chars = {}\n  local count = 0\n  for c in string:gmatch('.') do\n\
    \    c = c:lower()\n    if not chars[c] then\n      chars[c] = true\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    return #string\nend",
  "  -- Body goes here\nend", "    local distinct_characters = {}\n    for character\
    \ in string:gmatch('.') do\n        local uppercase_character = character:upper()\n\
    \        if distinct_characters[uppercase_character] == nil then\n           \
    \ distinct_characters[uppercase_character] = true\n        end\n    end\n    return\
    \ table.length(distinct_characters)\nend", "    local character_counts = {}\n\
    \    for char in string:gmatch(\".\") do\n        character_counts[char:lower()]\
    \ = true\n    end\n    return #character_counts\nend", "    -- convert to lower\
    \ case first\n    string = string:lower()\n    local characters = {}\n    local\
    \ count = 0\n    for i = 1, #string do\n        if not characters[string:sub(i,\
    \ i)] then\n            count = count + 1\n            characters[string:sub(i,\
    \ i)] = true\n        end\n    end\n    return count\nend", "  local lower = string:lower()\n\
    \  local count = 0\n  for i = 1, #lower do\n    local c = lower:sub(i, i)\n  \
    \  if not _distinct_characters[c] then\n      _distinct_characters[c] = 1\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend", "    local unicode\
    \ = require('unicode')\n    local utf8 = require('utf8')\n    local h = {}\n \
    \   local index = 1\n    while index <= #string do\n        local lower = unicode.lower(utf8.char(string:byte(index)))\n\
    \        h[lower] = true\n        index = index + 1\n    end\n    return #h\n\
    end", "    local unique_characters = {}\n    for character in string:gmatch('.')\
    \ do\n        unique_characters[character:lower()] = true\n    end\n    return\
    \ count_table_keys(unique_characters)\nend", "    string = string:lower()\n  \
    \  local seen = {}\n    local distinct_chars = 0\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if not seen[char] then\n     \
    \       distinct_chars = distinct_chars + 1\n            seen[char] = true\n \
    \       end\n    end\n    return distinct_chars\nend", "    -- TODO\nend", " \
    \ local chars = {}\n  for c in string:gmatch('.') do\n    chars[c:lower()] = true\n\
    \  end\n  return table.length(chars)\nend", "    -- lower case all characters\
    \ in the string\n    string = string:lower()\n    local count = 0\n    local exists\
    \ = {}\n    -- loop through the string\n    for i = 1, #string do\n        local\
    \ char = string:sub(i, i)\n        -- if it doesn't exist in the hash yet, it's\
    \ a distinct char\n        if exists[char] == nil then\n            count = count\
    \ + 1\n            exists[char] = true\n        end\n    end\n    return count\n\
    end", "    local char_set = {}\n    for char in string:gmatch(\".\") do\n    \
    \    if not char_set[char:lower()] then\n            char_set[char:lower()] =\
    \ true\n        end\n    end\n    return table.size(char_set)\nend", "    local\
    \ chars_set = {}\n    local chars_count = 0\n    for i = 1, #string do\n     \
    \   local char = string:sub(i, i)\n        local lower_char = char:lower()\n \
    \       if not chars_set[lower_char] then\n            chars_set[lower_char] =\
    \ true\n            chars_count = chars_count + 1\n        end\n    end\n    return\
    \ chars_count\nend", "  if string == '' then\n    return 0\n  end\n  local s =\
    \ string:lower()\n  local found = {}\n  for i = 1, s:len() do\n    found[s:sub(i,\
    \ i)] = true\n  end\n  return #found\nend", "    local set = {}\n    for i=1,string.len(string)\
    \ do\n        if set[string.lower(string:sub(i,i))] == nil then\n            set[string.lower(string:sub(i,i))]\
    \ = true\n        end\n    end\n    return table.getn(set)\nend", "  local characters\
    \ = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if not\
    \ characters[char] then\n      characters[char] = true\n    end\n  end\n  return\
    \ #characters\nend", "    local characters = {}\n    for char in string:gmatch('.')\
    \ do\n        characters[char:lower()] = true\n    end\n    return #characters\n\
    end", "    local hash = {}\n    local count = 0\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not hash[char] then\n      \
    \      hash[char] = true\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local function aux(string, chars, result)\n    \
    \    if string == '' then\n            return result\n        else\n         \
    \   if not chars[string:sub(1, 1)] then\n                chars[string:sub(1, 1)]\
    \ = true\n                return aux(string:sub(2), chars, result + 1)\n     \
    \       else\n                return aux(string:sub(2), chars, result)\n     \
    \       end\n        end\n    end\n    return aux(string, {}, 0)\nend", "  local\
    \ counted = {}\n  for c in string:gmatch(\".\") do\n    counted[c:lower()] = true\n\
    \  end\n  return #counted\nend", "    return set.size(set.create(string:lower()))\n\
    end", "    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        chars[char:lower()] = true\n    end\n    return #chars\nend", " \
    \ return len(set(string.lower(string)))\nend", "    local char_map = {}\n    for\
    \ _, char in ipairs(convert_string_to_character_list(string)) do\n        char_map[char]\
    \ = true\n    end\n    return num_items(char_map)\nend", "  local set = {}\n \
    \ for i = 1, #string do\n    set[string:sub(i, i)] = true\n  end\n  return #set\n\
    end", "  local checker = {}\n  local count = 0\n  for i = 1, #string do\n    local\
    \ ch = string:sub(i, i)\n    if not checker[ch] then\n      checker[ch] = true\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local characters\
    \ = {}\n  for c in string:gmatch(\".\") do\n    characters[c:lower()] = true\n\
    \  end\n  return table.size(characters)\nend", "  return #string:lower():gsub('[^%a]',\
    \ '')\nend", "    local chars = {}\n    local count = 0\n    for s in string:gmatch('.')\
    \ do\n        local char = s:lower()\n        if chars[char] == nil then\n   \
    \         chars[char] = true\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
