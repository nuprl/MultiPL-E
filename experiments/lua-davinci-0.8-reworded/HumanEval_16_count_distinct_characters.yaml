name: HumanEval_16_count_distinct_characters
language: lua
prompt: "-- Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n-- >>> count_distinct_characters('Jerry')\n\
  -- 4\nlocal function count_distinct_characters(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
  \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
  \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local count = 0\n    local t = {}\n    for char in string:gmatch(\"\
    .\") do\n        if not t[char:lower()] then\n            t[char:lower()] = 1\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  -- lowercase string\n  string = string:lower()\n  local chars = {}\n  for char\
    \ in string:gmatch('.') do\n    chars[char] = true\n  end\n  return table_size(chars)\n\
    end", "    local char_set = {}\n    local uppercase_string = string:upper()\n\
    \    for char in uppercase_string:gmatch('.') do\n        char_set[char] = true\n\
    \    end\n    return utils.table_size(char_set)\nend", "  local characters = {}\n\
    \  local count = 0\n  local length = string.len(string)\n  for index = 1, length\
    \ do\n    local character = string.sub(string, index, index)\n    if not characters[character]\
    \ then\n      characters[character] = true\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local string = string:lower()\n    local index\
    \ = 1\n    local chars = {}\n    local found = false\n    while index <= #string\
    \ do\n        for i,c in ipairs(chars) do\n            if c == string:sub(index,\
    \ index) then\n                found = true\n                break\n         \
    \   end\n        end\n        if not found then\n            table.insert(chars,\
    \ string:sub(index, index))\n        end\n        index = index + 1\n        found\
    \ = false\n    end\n    return #chars\nend", "    local count = 0\n    local characters\
    \ = {}\n    local index = string:len()\n    while index > 0 do\n        if not\
    \ characters[string:sub(index, index)] then\n            count = count + 1\n \
    \           characters[string:sub(index, index)] = true\n        end\n       \
    \ index = index - 1\n    end\n    return count\nend", "    local characters =\
    \ {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n     \
    \   characters[char:lower()] = true\n    end\n    return #characters\nend", " \
    \   local charSet = {}\n    local count = 0\n    local len = #string\n    local\
    \ lower_string = string:lower()\n    for i = 1, len do\n        local c = lower_string:sub(i,\
    \ i)\n        if charSet[c] == nil then\n            charSet[c] = true\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend", "   \
    \ -- You write this part\n    local dict = {}\n    local count = 0\n    for i\
    \ = 1, #string do\n        local char = string:sub(i, i)\n        local upper_char\
    \ = char:upper()\n        if dict[upper_char] == nil then\n            dict[upper_char]\
    \ = 1\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    return utils.string_to_set(string):size()\nend", "  local chars = {}\n\
    \  for char in string:gmatch('.') do\n    if not chars[char:lower()] then\n  \
    \    chars[char:lower()] = true\n    end\n  end\n  return table.length(chars)\n\
    end", "    local result = {}\n    for char in string:gmatch('%a') do\n       \
    \ if not result[char:lower()] then\n            result[char:lower()] = true\n\
    \        end\n    end\n    return count_table(result)\nend", "    return #unique_characters(string)\n\
    end", "    local distinct = {}\n    local str = string:lower()\n    for i = 1,\
    \ #str do\n        distinct[str:sub(i, i)] = 1\n    end\n    return #distinct\n\
    end", "    return len(set(list(string.lower(string))))\nend", "\tlocal characters\
    \ = {}\n\tfor character in string:gmatch(\".\") do\n\t\tcharacters[character:lower()]\
    \ = true\n\tend\n\treturn #table.keys(characters)\nend", "\tlocal characters =\
    \ {}\n\tfor c in string:gmatch('.') do\n\t\tcharacters[c:lower()] = true\n\tend\n\
    \treturn #characters\nend", "\tstring = string:lower()\n\tlocal character_list\
    \ = {}\n\tfor i = 1, #string do\n\t\tcharacter_list[string:sub(i, i)] = 1\n\t\
    end\n\treturn table.getn(character_list)\nend", "    local seen = {}\n    local\
    \ count = 0\n    for character in string:gmatch('.') do\n        if not seen[character:lower()]\
    \ then\n            seen[character:lower()] = true\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "\t-- TODO: IMPLEMENT ME\n\
    \treturn 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
