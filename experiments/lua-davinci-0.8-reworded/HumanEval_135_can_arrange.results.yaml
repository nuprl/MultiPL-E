name: HumanEval_135_can_arrange
language: lua
results:
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n  local\
    \ index = -1\n  for i = 1, #arr - 1 do\n    if arr[i] < arr[i + 1] then\n    \
    \  index = i\n    end\n  end\n  return index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2gakmu2.lua:23:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpm2gakmu2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n    local\
    \ max, length = 0, #arr\n    for i = 1, length do\n        if arr[i] <= max then\n\
    \            return i - 1\n        end\n        max = arr[i]\n    end\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xuuugvz.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp1xuuugvz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq06518mc.lua:16:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpq06518mc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n  local\
    \ last, max_idx = 0, -1\n  for i, v in ipairs(arr) do\n    if v > last then\n\
    \      max_idx = i\n      last = v\n    end\n  end\n  return max_idx - 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1a4vxh_t.lua:24:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp1a4vxh_t.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n  -- YOUR\
    \ CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8lhz7fe.lua:17:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpz8lhz7fe.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n  local\
    \ n = #arr\n  local idx = n\n  for i = n - 1, 1, -1 do\n    if arr[i] <= arr[i\
    \ + 1] then\n      idx = i\n    else\n      break\n    end\n  end\n  return idx\
    \ == n and -1 or idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptu6hnsxl.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmptu6hnsxl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwij5dg_z.lua:17:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpwij5dg_z.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n    local\
    \ a = arr\n    local k = #a\n    local i = 0\n    for j = 1, k - 1 do\n      \
    \  if a[j] > a[j + 1] then\n            i = j\n        end\n    end\n    return\
    \ i - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5x4dt8q.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpi5x4dt8q.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n  local\
    \ max = -1\n  for i, v in ipairs(arr) do\n    if v < arr[i-1] then\n      max\
    \ = math.max(max, i-1)\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsyksknix.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpsyksknix.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpsyksknix.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n    local\
    \ previous, index = 0, -1\n    for i, current in ipairs(arr) do\n        if current\
    \ < previous then\n            return index\n        end\n        if current >\
    \ previous then\n            index = i\n        end\n        previous = current\n\
    \    end\n    return index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuivt4mq.lua:28:\
    \ expected: -1, actual: 4\nstack traceback:\n\t/tmp/tmpuuivt4mq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n    local\
    \ g, s = {}, {}\n    for _, v in ipairs(arr) do\n        table.insert(g, v)\n\
    \        table.insert(s, v)\n    end\n    table.sort(g)\n    table.sort(s, function(a,\
    \ b) return a > b end)\n    local m, k = 0, -1\n    for i = 1, #arr do\n     \
    \   if g[i] ~= s[i] then\n            m = m + 1\n            k = i\n        end\n\
    \    end\n    if m ~= 1 then\n        return -1\n    end\n    for i = k, #arr\
    \ do\n        if g[i] ~= s[i] then\n            return -1\n        end\n    end\n\
    \    return k - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zdf03__.lua:39:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmp2zdf03__.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n  local\
    \ last_val = -1\n  local index = -1\n  for i, v in ipairs(arr) do\n    if v >\
    \ last_val then\n      index = i\n      last_val = v\n    end\n  end\n  return\
    \ index - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphknq_udk.lua:25:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmphknq_udk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n\tlocal\
    \ max_ind = -1\n\tlocal current_max = 0\n\tfor i = 1, #arr do\n\t\tif arr[i] >\
    \ current_max then\n\t\t\tcurrent_max = arr[i]\n\t\t\tmax_ind = i\n\t\tend\n\t\
    end\n\treturn max_ind\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbw0_1ojz.lua:25:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpbw0_1ojz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n    local\
    \ index, max = 0, -1\n    for i = 1, #arr do\n        if arr[i] < max then\n \
    \           return index\n        end\n        if arr[i] > max then\n        \
    \    max = arr[i]\n            index = i\n        end\n    end\n    return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsscyp0n_.lua:30:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpsscyp0n_.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n  local\
    \ l = #arr\n  for i = l - 1, 1, -1 do\n    if arr[i] > arr[i + 1] then\n     \
    \ return i\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n    local\
    \ cur_max = arr[1]\n    local cur_max_idx = 1\n    for i, v in ipairs(arr) do\n\
    \        if v <= cur_max then\n            return i - 1\n        end\n       \
    \ cur_max = v\n        cur_max_idx = i\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08xbpf8c.lua:26:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp08xbpf8c.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n    local\
    \ last_value = arr[1]\n    local last_index = 1\n    for i = 2, #arr do\n    \
    \    if arr[i] > last_value then\n            last_value = arr[i]\n          \
    \  last_index = i\n        end\n    end\n    return last_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdj8tvhq.lua:25:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpwdj8tvhq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n\t-- TODO:\
    \ Implement me\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl9ofsc6.lua:17:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpyl9ofsc6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n  for i\
    \ = #arr - 1, 1, -1 do\n    if arr[i] < arr[i + 1] then\n      return i\n    end\n\
    \  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9821dd6k.lua:22:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp9821dd6k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given table will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n\
    -- >>> can_arrange({1, 2, 3})\n-- -1\nlocal function can_arrange(arr)\n  local\
    \ last = arr[1] - 1\n  for i = #arr, 1, -1 do\n    if arr[i] < last then\n   \
    \   return i\n    end\n    last = arr[i]\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw1hasn6.lua:24:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpmw1hasn6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
