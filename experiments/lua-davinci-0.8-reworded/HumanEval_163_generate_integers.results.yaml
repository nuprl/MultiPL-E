name: HumanEval_163_generate_integers
language: lua
results:
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   if a > b then\n        a, b = b, a\n    end\n    local ret = {}\n    for i\
    \ = a, b do\n        if i % 2 == 0 then\n            table.insert(ret, i)\n  \
    \      end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq504woe0.lua:26:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpq504woe0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n\t\
    local function _even_iter(a, b)\n\t\tlocal c = a % 2 ~= 0 and a + 1 or a\n\t\t\
    return c, b\n\tend\n\treturn coroutine.wrap(function()\n\t\treturn coroutine.yield(a)\n\
    \tend), _even_iter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2,\
    \ 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n_c1xgh.lua:23:\
    \ expected: {2, 4, 6, 8}\nactual: function: 0x21acf80\nstack traceback:\n\t/tmp/tmp7n_c1xgh.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local set = {}\n    if a < b then\n        for i = a, b do\n            if\
    \ i % 2 == 0 then\n                set[#set + 1] = i\n            end\n      \
    \  end\n    else\n        for i = b, a do\n            if i % 2 == 0 then\n  \
    \              set[#set + 1] = i\n            end\n        end\n    end\n    return\
    \ set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n \
    \   lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8svwt6x.lua:31:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpi8svwt6x.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local integers = {}\n    if a < b then\n        for i = a, b do\n        \
    \    if i % 2 == 0 then\n                table.insert(integers, i)\n         \
    \   end\n        end\n    else\n        for i = b, a do\n            if i % 2\
    \ == 0 then\n                table.insert(integers, i)\n            end\n    \
    \    end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfbfgk7a.lua:31:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmphfbfgk7a.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    for i = math.min(a, b), math.max(a, b) do\n       \
    \ if (i % 2) == 0 then\n            table.insert(result, i)\n        end\n   \
    \ end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2,\
    \ 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_r97n992.lua:23:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp_r97n992.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   a = math.min(a, b)\n    b = math.max(a, b)\n    local result = {}\n    for\
    \ i = a, b do\n        if i % 2 == 0 then\n            table.insert(result, i)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2qkv338.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpn2qkv338.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \ local ints = {}\n  local start = (a > b) and b or a\n  local finish = (a > b)\
    \ and a or b\n  for i = start, finish do\n    if i % 2 == 0 then\n      table.insert(ints,\
    \ i)\n    end\n  end\n  return ints\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87xq3hwd.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp87xq3hwd.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \ local result = {}\n  local start = a\n  local finish = b\n  if a > b then\n\
    \    start = b\n    finish = a\n  end\n  for x = start, finish do\n    if math.fmod(x,\
    \ 2) == 0 then\n      table.insert(result, x)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n\
    \    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm75jadw_.lua:29:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpm75jadw_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local integers = {}\n    if a > b then\n        for i = b, a do\n        \
    \    if i % 2 == 0 then\n                table.insert(integers, i)\n         \
    \   end\n        end\n    else\n        for i = a, b do\n            if i % 2\
    \ == 0 then\n                table.insert(integers, i)\n            end\n    \
    \    end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8soz2q6.lua:31:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpu8soz2q6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \ local integers = {}\n  a = a - a % 2\n  b = b - b % 2\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpen_n9gat.lua:24: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local x = math.min(a, b)\n    local y = math.max(a,\
    \ b)\n    while x % 2 ~= 0 do\n        x = x + 1\n    end\n    while x <= y do\n\
    \        table.insert(result, x)\n        x = x + 2\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n\
    \    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb05zyat_.lua:27:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpb05zyat_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \ local result = {}\n  local start, stop\n  if a <= b then\n    start, stop =\
    \ a, b\n  else\n    start, stop = b, a\n  end\n  if start % 2 == 0 then\n    start\
    \ = start + 1\n  end\n  for i = start, stop, 2 do\n    table.insert(result, i)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2,\
    \ 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneaz752t.lua:30:\
    \ expected: {2, 4, 6, 8}\nactual: {3, 5, 7, 9}\nstack traceback:\n\t/tmp/tmpneaz752t.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local integers = {}\n    local start = a\n    local finish = b\n    if a >\
    \ b then\n        start = b\n        finish = a\n    end\n    for i = start, finish\
    \ do\n        if math.fmod(i, 2) == 0 then\n            table.insert(integers,\
    \ i)\n        end\n    end\n    return integers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmj6bkx6.lua:29:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpgmj6bkx6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   if a > b then\n        a, b = b, a\n    end\n    local result = {}\n    for\
    \ i = a, b do\n        if i % 2 == 0 then\n            table.insert(result, i)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3fyh0r1.lua:26:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpw3fyh0r1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \ local res = {}\n  local z = a\n  if a <= b then\n    while z <= b do\n     \
    \ if z % 2 == 0 then\n        table.insert(res, z)\n      end\n      z = z + 1\n\
    \    end\n  else\n    while z >= b do\n      if z % 2 == 0 then\n        table.insert(res,\
    \ z)\n      end\n      z = z - 1\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwphc1_9.lua:34:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpqwphc1_9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local lo, hi\n    if a < b then\n        lo, hi = a,\
    \ b\n    else\n        lo, hi = b, a\n    end\n    for i = lo, hi do\n       \
    \ if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2,\
    \ 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38vpams3.lua:29:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp38vpams3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local set = {}\n    local lower = math.min(a, b)\n    local upper = math.max(a,\
    \ b)\n    for i = lower, upper do\n        if i % 2 == 0 then\n            table.insert(set,\
    \ i)\n        end\n    end\n    return set\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbo071ph.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpqbo071ph.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local function even_digits(i)\n        local t = {}\n        while i > 0 do\n\
    \            if i % 2 == 0 then\n                table.insert(t, i % 10)\n   \
    \         end\n            i = math.floor(i / 10)\n        end\n        return\
    \ t\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n \
    \   lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe9iu0hka.lua:31: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local t = {}\n    if a > b then\n        a, b = b, a\n    end\n    for i =\
    \ a, b do\n        if i % 2 == 0 then\n            table.insert(t, i)\n      \
    \  end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2,\
    \ 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlj9qyun.lua:26:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmphlj9qyun.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local integers = {}\n    local smallest = math.min(a, b)\n    local largest\
    \ = math.max(a, b)\n    for i = smallest, largest do\n        if i % 2 == 0 then\n\
    \            table.insert(integers, i)\n        end\n    end\n    return integers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n\
    \    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfltubnkr.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpfltubnkr.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
