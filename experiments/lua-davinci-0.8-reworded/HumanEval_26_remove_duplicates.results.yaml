name: HumanEval_26_remove_duplicates
language: lua
results:
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n  local\
    \ t = {}\n  for _, v in ipairs(numbers) do\n    if not t[v] then\n      t[v] =\
    \ true\n      coroutine.yield(v)\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3koi_n.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2n3koi_n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n     \
    \   if not seen[v] then\n            seen[v] = true\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxofhuob0.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxofhuob0.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ found = {}\n    local result = {}\n    for _,n in ipairs(numbers) do\n     \
    \   if not found[n] then\n            table.insert(result, n)\n            found[n]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphic795gk.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmphic795gk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local results = {}\n    for _, n in ipairs(numbers) do\n    \
    \    if not seen[n] then\n            table.insert(results, n)\n            seen[n]\
    \ = true\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcff2l22.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmppcff2l22.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            seen[number] = true\n         \
    \   table.insert(result, number)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbndytz8w.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpbndytz8w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n  local\
    \ dupes = {}\n  local result = {}\n  for _, x in ipairs(numbers) do\n    if dupes[x]\
    \ then\n      dupes[x] = true\n    else\n      table.insert(result, x)\n     \
    \ dupes[x] = false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxbkltcj.lua:24:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpuxbkltcj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local function helper(i)\n        local n = numbers[i]\n    \
    \    if seen[n] then\n            return\n        end\n        seen[n] = true\n\
    \        return i\n    end\n    return map(helper, 1, #numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6mpj1iin.lua:15:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp6mpj1iin.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp6mpj1iin.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ not seen[number] then\n      seen[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8788w_gt.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp8788w_gt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _, v in ipairs(numbers) do\n        unique[v] = (unique[v]\
    \ or 0) + 1\n    end\n    local ordered = {}\n    for _, v in ipairs(numbers)\
    \ do\n        if unique[v] == 1 then\n            table.insert(ordered, v)\n \
    \       end\n    end\n    return ordered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for i = 1, #numbers do\n        local current = numbers[i]\n\
    \        if seen[current] then\n            table.remove(numbers, i)\n       \
    \     i = i - 1\n        else\n            seen[current] = true\n        end\n\
    \    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbe_3aer.lua:13:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpxbe_3aer.lua:13: in local 'candidate'\n\
    \t/tmp/tmpxbe_3aer.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _,v in ipairs(numbers) do\n      \
    \  if not seen[v] then\n            seen[v] = true\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2g3l8d9.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpk2g3l8d9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ set = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n      \
    \  if not set[n] then\n            set[n] = true\n            table.insert(result,\
    \ n)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptn1v33t1.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmptn1v33t1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _,v in ipairs(numbers) do\n    if not\
    \ seen[v] then\n      table.insert(result, v)\n      seen[v] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpvlxwr6.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmphpvlxwr6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n  local\
    \ table_to_keep = {}\n  local table_to_remove = {}\n  for _, i in ipairs(numbers)\
    \ do\n    if table_to_keep[i] then\n      table_to_remove[i] = true\n    else\n\
    \      table_to_keep[i] = true\n    end\n  end\n  local result = {}\n  for _,\
    \ i in ipairs(numbers) do\n    if not table_to_remove[i] then\n      table.insert(result,\
    \ i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local no_dupes = {}\n    for _, num in ipairs(numbers) do\n \
    \       if not seen[num] then\n            no_dupes[#no_dupes + 1] = num\n   \
    \         seen[num] = true\n        end\n    end\n    return no_dupes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef59zlr1.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpef59zlr1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n  --\
    \ TODO: Implement\n  local duplicates = {}\n  local final = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if duplicates[number] == nil then\n      duplicates[number]\
    \ = number\n      table.insert(final, number)\n    end\n  end\n  return final\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzv39v671.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpzv39v671.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local ids = {}\n  for _, num in ipairs(numbers) do\n    if not\
    \ ids[num] then\n      table.insert(result, num)\n      ids[num] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfouwq17.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpcfouwq17.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ res = {}\n    local map = {}\n    for i = 1, #numbers do\n        local num\
    \ = numbers[i]\n        if not map[num] then\n            map[num] = true\n  \
    \          res[#res + 1] = num\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphejlbled.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmphejlbled.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n    local\
    \ ret = {}\n    local counts = {}\n    for _, n in ipairs(numbers) do\n      \
    \  if counts[n] == nil then\n            ret[#ret + 1] = n\n            counts[n]\
    \ = 1\n        else\n            counts[n] = counts[n] + 1\n        end\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf99ucna.lua:24:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxf99ucna.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a table of integers, remove all elements that occur more than\
    \ once.\n-- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
    \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbumojnk_.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpbumojnk_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
