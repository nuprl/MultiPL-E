name: HumanEval_66_digitSum
language: lua
prompt: "-- Task\n-- Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum('')\n\
  -- 0\n-- >>> digitSum('abAB')\n-- 131\n-- >>> digitSum('abcCd')\n-- 67\n-- >>> digitSum('helloE')\n\
  -- 69\n-- >>> digitSum('woArBld')\n-- 131\n-- >>> digitSum('aAaaaXa')\n-- 153\n\
  local function digitSum(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n\
  \    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
  \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
  \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
  \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local _A = string.byte('A')\n    local _Z = string.byte('Z')\n\
    \    local sum = 0\n    for c in s:gmatch('.') do\n        local code = string.byte(c)\n\
    \        if code >= _A and code <= _Z then\n            sum = sum + code\n   \
    \     end\n    end\n    return sum\nend", "    local sum = 0\n    for c in s:gmatch('%u')\
    \ do\n        sum = sum + c:byte()\n    end\n    return sum\nend", "\tlocal total\
    \ = 0\n\tfor i = 1, #s do\n\t\tif string.match(s, \"%u\") then\n\t\t\ttotal =\
    \ total + string.byte(s, i)\n\t\tend\n\tend\n\treturn total\nend", "    local\
    \ total = 0\n    for c in s:gmatch('%u') do\n        total = total + c:byte()\n\
    \    end\n    return total\nend", "  local sum = 0\n  for i = 1, #s do\n    if\
    \ s:byte(i) >= 65 and s:byte(i) <= 90 then\n      sum = sum + s:byte(i)\n    end\n\
    \  end\n  return sum\nend", "    local digitSum = 0\n    local asciiCodes = {\n\
    \        ['A'] = 65,\n        ['B'] = 66,\n        ['C'] = 67,\n        ['D']\
    \ = 68,\n        ['E'] = 69,\n        ['F'] = 70,\n        ['G'] = 71,\n     \
    \   ['H'] = 72,\n        ['I'] = 73,\n        ['J'] = 74,\n        ['K'] = 75,\n\
    \        ['L'] = 76,\n        ['M'] = 77,\n        ['N'] = 78,\n        ['O']\
    \ = 79,\n        ['P'] = 80,\n        ['Q'] = 81,\n        ['R'] = 82,\n     \
    \   ['S'] = 83,\n        ['T'] = 84,\n        ['U'] = 85,\n        ['V'] = 86,\n\
    \        ['W'] = 87,\n        ['X'] = 88,\n        ['Y'] = 89,\n        ['Z']\
    \ = 90\n    }\n    for i = 1, #s do\n        if asciiCodes[s:sub(i, i)] then\n\
    \            digitSum = digitSum + asciiCodes[s:sub(i, i)]\n        end\n    end\n\
    \    return digitSum\nend", "    local sum = 0\n    for c in s:gmatch('%a') do\n\
    \        local c_ascii = string.byte(c)\n        if c_ascii >= 65 and c_ascii\
    \ <= 90 then\n            sum = sum + c_ascii\n        end\n    end\n    return\
    \ sum\nend", "    local sum = 0\n    for c in s:gmatch('.') do\n        if c:upper()\
    \ == c then\n            sum = sum + c:byte()\n        end\n    end\n    return\
    \ sum\nend", "  local sum = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n\
    \    if c:upper() == c then\n      sum = sum + c:byte()\n    end\n  end\n  return\
    \ sum\nend", "  sum = 0\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local charCode = string.byte(char)\n    if charCode >= 65 and charCode <= 90\
    \ then\n      sum = sum + charCode\n    end\n  end\n  return sum\nend", "\tlocal\
    \ sum = 0\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal ascii = c:byte()\n\
    \t\tif ascii >= 65 and ascii <= 90 then\n\t\t\tsum = sum + ascii\n\t\tend\n\t\
    end\n\treturn sum\nend", "  return (s:gsub('[%a]', function(c)\n    return c:upper()\
    \ == c and c:byte() or 0\n  end):gsub('%d', function(c)\n    return tonumber(c)\n\
    \  end):sum())\nend", "  \nend", "    local sum = 0\n    for c in s:gmatch('.')\
    \ do\n        local n = c:byte()\n        if n >= 65 and n <= 90 then\n      \
    \      sum = sum + n\n        end\n    end\n    return sum\nend", "  if type(s)\
    \ ~= 'string' then\n    error('String expected', 2)\n  end\n  local sum = 0\n\
    \  for _, c in utf8.codes(s) do\n    local uc = utf8.char(c)\n    if string.find(uc,\
    \ '%u') then\n      sum = sum + c\n    end\n  end\n  return sum\nend", "  local\
    \ sum = 0\n  local chars = s:byte(1, #s)\n  for i = 1, #chars do\n    local c\
    \ = chars[i]\n    if c >= 65 and c <= 90 then\n      sum = sum + c\n    end\n\
    \  end\n  return sum\nend", "    local sum = 0\n    for i = 1, #s do\n       \
    \ if s:byte(i) > 64 and s:byte(i) < 91 then\n            sum = sum + s:byte(i)\n\
    \        end\n    end\n    return sum\nend", "  local sum = 0\n  for i = 1, #s\
    \ do\n    if string.byte(s, i) < 97 then\n      sum = sum + string.byte(s, i)\n\
    \    end\n  end\n  return sum\nend", "\treturn s:gsub('%D+', ''):gsub('%d', function(i)\
    \ return tonumber(i) end):sum()\nend", "  local sum = 0\n  local ascii = string.byte(s)\n\
    \  if (ascii <= 90 and ascii >= 65) then\n    sum = sum + ascii\n  end\n  return\
    \ sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
