name: HumanEval_155_even_odd_count
language: lua
prompt: "-- Given an integer. return a table that has the number of even and odd digits\
  \ respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n-- >>> even_odd_count(123)\n\
  -- {1, 2}\nlocal function even_odd_count(num)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
  \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
  \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
  \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
  \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
  \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    num = math.abs(num)\n    local counter = {0, 0}\n    while num\
    \ > 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n   \
    \         counter[1] = counter[1] + 1\n        else\n            counter[2] =\
    \ counter[2] + 1\n        end\n        num = (num - digit) / 10\n    end\n   \
    \ return counter\nend", "    local count = {0, 0}\n    if num < 0 then num = -num\
    \ end\n    repeat\n        local last_digit = num % 10\n        if last_digit\
    \ % 2 == 0 then\n            count[1] = count[1] + 1\n        else\n         \
    \   count[2] = count[2] + 1\n        end\n        num = (num - last_digit) / 10\n\
    \    until num == 0\n    return count\nend", "  local even, odd = 0, 0\n  local\
    \ num = math.abs(num)\n  while num > 0 do\n    local digit = num % 10\n    if\
    \ digit % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n\
    \    end\n    num = (num - digit) / 10\n  end\n  return {even, odd}\nend", " \
    \   local even_count = 0\n    local odd_count = 0\n    for i = 0, 9 do\n     \
    \   local c = count_digits(num, i)\n        if i % 2 == 0 then\n            even_count\
    \ = even_count + c\n        else\n            odd_count = odd_count + c\n    \
    \    end\n    end\n    return {even_count, odd_count}\nend", "  local even_count\
    \ = 0\n  local odd_count = 0\n  for i = 0, num do\n    if math.floor(i / 2) ==\
    \ i / 2 then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n  end\n  return {even_count, odd_count}\nend", "    local even_count\
    \ = 0\n    local odd_count = 0\n    local num_digit_count = math.floor(math.log10(math.abs(num)))\
    \ + 1\n    for i = 1, num_digit_count do\n        local digit = math.floor(math.abs(num\
    \ / math.pow(10, i - 1))) % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n    end\n    return {even_count, odd_count}\nend", "  local even, odd\
    \ = 0, 0\n  for d in tostring(num):gmatch(\"%d\") do\n    if d % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ {even, odd}\nend", "    local abs_num = abs(num)\n    local even_count = 0\n\
    \    local odd_count = 0\n    local c\n    while abs_num > 0 do\n        c = abs_num\
    \ % 10\n        if c % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n        abs_num\
    \ = floor(abs_num / 10)\n    end\n    return {even_count, odd_count}\nend", " \
    \ assert(type(num) == \"number\", \"Need an integer!\")\n  local even, odd = 0,\
    \ 0\n  while num ~= 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even, odd}\nend", "    local even = 0\n    local odd\
    \ = 0\n    for i = 1, #num do\n        if (i % 2 == 0) then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n\
    \    return {even, odd}\nend", "    local even, odd = 0, 0\n    for _, v in pairs(string.totable(tostring(math.abs(num))))\
    \ do\n        if tonumber(v) % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend", "    num = math.abs(num)\n    local tbl = {0, 0}\n    while num\
    \ > 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n   \
    \         tbl[1] = tbl[1] + 1\n        else\n            tbl[2] = tbl[2] + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return tbl\nend",
  "    local t = {0, 0}\n    local n = num < 0 and -num or num\n    while n > 0 do\n\
    \        local d = n % 10\n        if d % 2 == 0 then\n            t[1] = t[1]\
    \ + 1\n        else\n            t[2] = t[2] + 1\n        end\n        n = (n\
    \ - d) / 10\n    end\n    return t\nend", "    local dn = math.abs(num)\n    local\
    \ t = {0, 0}\n    while dn > 0 do\n        local d = dn % 10\n        if d % 2\
    \ == 0 then\n            t[1] = t[1] + 1\n        else\n            t[2] = t[2]\
    \ + 1\n        end\n        dn = math.floor(dn / 10)\n    end\n    return t\n\
    end", "  local count = {0, 0}\n  if num < 0 then\n    count[1] = 1\n    num =\
    \ -num\n  end\n  while num > 0 do\n    if num % 2 == 0 then\n      count[1] =\
    \ count[1] + 1\n    else\n      count[2] = count[2] + 1\n    end\n    num = num\
    \ // 10\n  end\n  return count\nend", "    local even_count = 0\n    local odd_count\
    \ = 0\n    local num = math.abs(num)\n    while num > 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return {even_count, odd_count}\n\
    end", "    local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end", "    local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"%d\"\
    ) do\n        if tonumber(digit) % 2 == 0 then\n            even = even + 1\n\
    \        else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend", "    local even = 0\n    local odd = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(sub(tostring(num), i, i))\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return {even, odd}\nend", "    assert(num\
    \ < 1e10 and num > -1e10)\n    if num == 0 then\n        return {1, 0}\n    end\n\
    \    local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n  \
    \      local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = num // 10\n    end\n    return {even_count, odd_count}\n\
    end", "  local result = {0, 0}\n  for i = num, 0, -1 do\n    local d = i % 10\n\
    \    if d % 2 == 0 then\n      result[1] = result[1] + 1\n    else\n      result[2]\
    \ = result[2] + 1\n    end\n  end\n  return result\nend", "    local even = 0\n\
    \    local odd = 0\n    for i = 1, #tostring(num) do\n        if num % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend", "    local even, odd = 0,\
    \ 0\n    for c in num:gmatch(\".\") do\n        if c == \"-\" then\n         \
    \   continue\n        end\n        local n = tonumber(c)\n        if n % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend", "    local even_count = 0\n\
    \    local odd_count = 0\n    num = math.abs(num)\n    while num > 0 do\n    \
    \    if num % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend", "    local count =\
    \ {0, 0}\n    for digit in string.gmatch(tostring(num), \"%d\") do\n        count[1\
    \ + (digit % 2)] = count[1 + (digit % 2)] + 1\n    end\n    return count\nend",
  "  local odd = 0\n  local even = 0\n  local is_neg = false\n  if num < 0 then\n\
    \    is_neg = true\n    num = -num\n  end\n  while num > 0 do\n    local last_digit\
    \ = num % 10\n    if last_digit % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ {even, odd}\nend", "  local even, odd = 0, 0\n  for _, char in ipairs(string.split(num,\
    \ \"\")) do\n    if tonumber(char) % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n  end\n  return {even, odd}\nend", "  if num <\
    \ 0 then num = -num end\n  local even, odd = 0, 0\n  while num > 0 do\n    local\
    \ remainder = num % 10\n    if remainder % 2 == 0 then\n      even = even + 1\n\
    \    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return {even, odd}\nend", "    local digits = table.copy(digit_table(num))\n\
    \    local count = {0, 0}\n    for i = 1, #digits do\n        if digits[i] % 2\
    \ == 0 then\n            count[1] = count[1] + 1\n        else\n            count[2]\
    \ = count[2] + 1\n        end\n    end\n    return count\nend", "    local even_count\
    \ = 0\n    local odd_count = 0\n    num = tostring(num)\n    for n in num:gmatch(\"\
    [0-9]\") do\n        n = tonumber(n)\n        if n % 2 == 0 then\n           \
    \ even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend", "    num\
    \ = math.abs(num)\n    local even, odd = 0, 0\n    while num > 0 do\n        if\
    \ num % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ {even, odd}\nend", "    local even_count = 0\n    local odd_count = 0\n    if\
    \ num < 0 then\n        num = num * -1\n    end\n    while num > 0 do\n      \
    \  if num % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n        num = num // 10\n\
    \    end\n    return {even_count, odd_count}\nend", "  local even = 0\n  local\
    \ odd = 0\n  if num == 0 then\n    even = 1\n  else\n    while num ~= 0 do\n \
    \     local digit = num % 10\n      if (digit % 2) == 0 then\n        even = even\
    \ + 1\n      else\n        odd = odd + 1\n      end\n      num = (num - digit)\
    \ / 10\n    end\n  end\n  return {even, odd}\nend", "\tlocal even_count = 0\n\t\
    local odd_count = 0\n\tlocal n = num\n\twhile n ~= 0 do\n\t\tif (n % 2) == 0 then\n\
    \t\t\teven_count = even_count + 1\n\t\telse\n\t\t\todd_count = odd_count + 1\n\
    \t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn {even_count, odd_count}\n\
    end", "    if type(num) ~= \"number\" then\n        error(format(\"bad argument\
    \ #1 to '%s' (number expected, got %s)\", \"even_odd_count\", type(num)), 2)\n\
    \    end\n    local n = abs(num)\n    local even, odd = 0, 0\n    while n > 0\
    \ do\n        if n % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        n = floor(n / 10)\n    end\n\
    \    return {even, odd}\nend", "    local count = {0, 0}\n    for i = 1, num_to_string(num):len()\
    \ do\n        local digit = num_to_string(num):sub(i, i)\n        if tonumber(digit)\
    \ % 2 == 0 then\n            count[1] = count[1] + 1\n        else\n         \
    \   count[2] = count[2] + 1\n        end\n    end\n    return count\nend", " \
    \ local even_count = 0\n  local odd_count = 0\n  for i = 0, 20 do\n    local digit\
    \ = math.floor(num / 10^i) % 10\n    if digit % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n\
    \  return {even_count, odd_count}\nend", "    local t = {0, 0}\n    for i = 1,\
    \ #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i, i))\n\
    \        if digit % 2 == 0 then\n            t[1] = t[1] + 1\n        else\n \
    \           t[2] = t[2] + 1\n        end\n    end\n    return t\nend", "    local\
    \ even_count = 0\n    local odd_count = 0\n    num = math.abs(num)\n    local\
    \ rem = 0\n    while num > 0 do\n        rem = num % 10\n        if rem % 2 ==\
    \ 0 then\n            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even_count, odd_count}\nend", "    local even, odd = 0, 0\n    while\
    \ num ~= 0 do\n        if math.abs(num) % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend", "    local even, odd = 0, 0\n\
    \    num = math.abs(num)\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end", "  -- Your code here\nend", "  local even, odd = 0, 0\n  while num ~= 0\
    \ do\n    local digit = num % 10\n    if digit % 2 == 0 then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n\
    \  end\n  return {even, odd}\nend", "  local even_count = 0\n  local odd_count\
    \ = 0\n  if num == 0 then\n    even_count = 1\n  else\n    while num ~= 0 do\n\
    \      if num % 2 == 0 then\n        even_count = even_count + 1\n      else\n\
    \        odd_count = odd_count + 1\n      end\n      num = math.floor(num / 10)\n\
    \    end\n  end\n  return {even_count, odd_count}\nend", "  local n = num >= 0\
    \ and num or -num\n  local res = {0, 0}\n  for d in tostring(n):gmatch(\"%d\"\
    ) do\n    if tonumber(d) % 2 == 0 then\n      res[1] = res[1] + 1\n    else\n\
    \      res[2] = res[2] + 1\n    end\n  end\n  return res\nend", "\tlocal even,\
    \ odd = 0, 0\n\tnum = math.abs(num)\n\twhile num > 0 do\n\t\tif num % 2 == 0 then\n\
    \t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = math.floor(num\
    \ / 10)\n\tend\n\treturn {even, odd}\nend", "    local even, odd = 0, 0\n    for\
    \ d in tostring(num):gmatch('%d') do\n        if tonumber(d) % 2 == 0 then\n \
    \           even = even + 1\n        else\n            odd = odd + 1\n       \
    \ end\n    end\n    return {even, odd}\nend", "  local even_cnt = 0\n  local odd_cnt\
    \ = 0\n  for digit in tostring(num):gmatch('%d') do\n    if tonumber(digit) %\
    \ 2 == 0 then\n      even_cnt = even_cnt + 1\n    else\n      odd_cnt = odd_cnt\
    \ + 1\n    end\n  end\n  return {even_cnt, odd_cnt}\nend", "\tlocal even_digits\
    \ = 0\n\tlocal odd_digits = 0\n\tlocal num_copy = math.abs(num)\n\twhile num_copy\
    \ > 0 do\n\t\tlocal digit = num_copy % 10\n\t\tif digit % 2 == 0 then\n\t\t\t\
    even_digits = even_digits + 1\n\t\telse\n\t\t\todd_digits = odd_digits + 1\n\t\
    \tend\n\t\tnum_copy = math.floor(num_copy / 10)\n\tend\n\treturn {even_digits,\
    \ odd_digits}\nend", "    local count = {0, 0}\n    while num ~= 0 do\n      \
    \  local last_digit = num % 10\n        if last_digit % 2 == 0 then\n        \
    \    count[1] = count[1] + 1\n        else\n            count[2] = count[2] +\
    \ 1\n        end\n        num = math.floor(num / 10)\n    end\n    return count\n\
    end", "    local even_odd = {0, 0}\n    local reminder\n    num = math.abs(num)\n\
    \    while num > 0 do\n        reminder = num % 10\n        if reminder % 2 ==\
    \ 0 then\n            even_odd[1] = even_odd[1] + 1\n        else\n          \
    \  even_odd[2] = even_odd[2] + 1\n        end\n        num = math.floor(num /\
    \ 10)\n    end\n    return even_odd\nend", "\tlocal even, odd = 0, 0\n\twhile\
    \ (num > 0) do\n\t\tif (num % 2 == 0) then\n\t\t\teven = even + 1\n\t\telse\n\t\
    \t\todd = odd + 1\n\t\tend\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn {even,\
    \ odd}\nend", "  local even, odd = 0, 0\n  for i = 0, 9 do\n    local p = 10^i\n\
    \    local x = math.floor(math.abs(num) / p) % 10\n    if x % 2 == 0 then\n  \
    \    even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ {even, odd}\nend", "    num = math.abs(num)\n    local even_count = 0\n    local\
    \ odd_count = 0\n    for digit in tostring(num):gmatch(\".\") do\n        digit\
    \ = tonumber(digit)\n        if digit % 2 == 0 then\n            even_count =\
    \ even_count + 1\n        else\n            odd_count = odd_count + 1\n      \
    \  end\n    end\n    return {even_count, odd_count}\nend", "    local tb = {0,\
    \ 0}\n    while num ~= 0 do\n        if num % 2 == 0 then\n            tb[1] =\
    \ tb[1] + 1\n        else\n            tb[2] = tb[2] + 1\n        end\n      \
    \  num = math.floor(num / 10)\n    end\n    return tb\nend", "    local even,\
    \ odd = 0, 0\n    for c in string.gmatch(tostring(num), \"%d\") do\n        if\
    \ tonumber(c) % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n    end\n    return {even, odd}\nend", " \
    \ local even_count = 0\n  local odd_count = 0\n  for digit in num:gmatch('%d')\
    \ do\n    if (tonumber(digit) % 2) == 0 then\n      even_count = even_count +\
    \ 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n  return {even_count,\
    \ odd_count}\nend", "    local even = 0\n    local odd = 0\n    local n = tostring(num)\n\
    \    for i = 1, #n do\n        if n:sub(i, i) == '-' then\n            num = num\
    \ / 10\n        elseif math.fmod(num, 2) == 0 then\n            even = even +\
    \ 1\n            num = num / 10\n        else\n            odd = odd + 1\n   \
    \         num = num / 10\n        end\n    end\n    return {even, odd}\nend",
  "\tlocal s = tostring(num)\n\tlocal even = 0\n\tlocal odd = 0\n\tfor i = 1, #s do\n\
    \t\tif tonumber(s:sub(i, i)) % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\
    \t\todd = odd + 1\n\t\tend\n\tend\n\treturn {even, odd}\nend", "  local digits\
    \ = to_table(num)\n  local even_count = 0\n  local odd_count = 0\n  for _, digit\
    \ in ipairs(digits) do\n    if digit % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n  return {even_count,\
    \ odd_count}\nend", "    local even_count = 0\n    local odd_count = 0\n    for\
    \ i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n    end\n \
    \   return {even_count, odd_count}\nend", "    local count = {0, 0}\n    while\
    \ (num ~= 0) do\n        local digit = num % 10\n        num = math.floor(num\
    \ / 10)\n        if (digit % 2 == 0) then\n            count[1] = count[1] + 1\n\
    \        else\n            count[2] = count[2] + 1\n        end\n    end\n   \
    \ return count\nend", "  num = math.abs(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  while num > 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return {even_count,\
    \ odd_count}\nend", "\tlocal odd, even = 0, 0\n\tfor i = 0, math.abs(num) do\n\
    \t\t-- grab the last digit of num, then remove it\n\t\tlocal last_digit = num\
    \ % 10\n\t\tnum = (num - last_digit) / 10\n\t\tif last_digit % 2 == 0 then\n\t\
    \t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn {\
    \ even, odd }\nend", "\tlocal even = 0\n\tlocal odd = 0\n\tfor d in tostring(num):gmatch('.')\
    \ do\n\t\tlocal digit = tonumber(d)\n\t\tif digit % 2 == 0 then\n\t\t\teven =\
    \ even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn {even, odd}\n\
    end", "  local odds = 0\n  local evens = 0\n  while num ~= 0 do\n    if num %\
    \ 2 == 0 then\n      evens = evens + 1\n    else\n      odds = odds + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return {evens, odds}\nend", "    local\
    \ f = function(acc, x)\n        if x % 2 == 0 then\n            acc[1] = acc[1]\
    \ + 1\n        else\n            acc[2] = acc[2] + 1\n        end\n        return\
    \ acc\n    end\n    return foldl(f, {0, 0}, num_to_list(num))\nend", "  local\
    \ even = 0\n  local odd = 0\n  while num ~= 0 do\n    local val = num % 10\n \
    \   if val % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n\
    \    end\n    num = (num - val) / 10\n  end\n  return {even, odd}\nend", "   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = num % 10\n        if digit % 2 == 0 then\n       \
    \     even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n        num = (num - digit) / 10\n    end\n    return {even_count,\
    \ odd_count}\nend", "  local even = 0\n  local odd = 0\n  local res = {}\n  for\
    \ _, i in ipairs(to_digits(num)) do\n    if i % 2 == 0 then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n  end\n  res[1] = even\n  res[2]\
    \ = odd\n  return res\nend", "    local even = 0\n    local odd = 0\n    for char\
    \ in tostring(num):gmatch(\".\") do\n        if char == \"-\" then\n         \
    \   continue\n        end\n        if tonumber(char) % 2 == 0 then\n         \
    \   even = even + 1\n        else\n            odd = odd + 1\n        end\n  \
    \  end\n    return {even, odd}\nend", "\tlocal even = 0\n\tlocal odd = 0\n\tfor\
    \ i = 1, #tostring(num) do\n\t\tlocal ch = tostring(num):sub(i, i)\n\t\tif ch\
    \ == '0' or ch == '2' or ch == '4' or ch == '6' or ch == '8' then\n\t\t\teven\
    \ = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn {even, odd}\n\
    end", "    local even_count = 0\n    local odd_count = 0\n    for i in tostring(num):gmatch('.')\
    \ do\n        local digit = tonumber(i)\n        if digit % 2 == 0 then\n    \
    \        even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend", "  local\
    \ even_count = 0\n  local odd_count = 0\n  for _, digit in pairs(digits(num))\
    \ do\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n  end\n  return {even_count, odd_count}\n\
    end", "    local even, odd = 0, 0\n    local digits = break_digit(num)\n    for\
    \ i, v in ipairs(digits) do\n        if mod(v, 2) == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n\
    \    return {even, odd}\nend", "\tlocal even, odd = 0, 0\n\twhile num > 0 do\n\
    \t\tlocal digit = num % 10\n\t\tif digit % 2 == 0 then\n\t\t\teven = even + 1\n\
    \t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = math.floor(num / 10)\n\tend\n\
    \treturn {even, odd}\nend", "  local even, odd = 0, 0\n  for i = 1, tostring(num):len()\
    \ do\n    if (tonumber(tostring(num):sub(i, i)) % 2 == 0) then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return {even, odd}\nend",
  "\tlocal even = 0\n\tlocal odd = 0\n\t\n\twhile num ~= 0 do\n\t\tlocal tmp = num\
    \ % 10\n\t\t\n\t\tif tmp % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\t\
    odd = odd + 1\n\t\tend\n\t\t\n\t\tnum = math.floor(num / 10)\n\tend\n\t\n\treturn\
    \ {even, odd}\nend", "    local count = {\n        even = 0,\n        odd = 0\n\
    \    }\n    while num ~= 0 do\n        if num % 2 == 0 then\n            count.even\
    \ = count.even + 1\n        else\n            count.odd = count.odd + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return count\nend",
  "  local even, odd = 0, 0\n  for _, char in utf8.codes(num) do\n    local c = tonumber(utf8.char(char))\n\
    \    if (c % 2 == 0) then\n      even = even + 1\n    else\n      odd = odd +\
    \ 1\n    end\n  end\n  return {even, odd}\nend", "  local even, odd = 0, 0\n \
    \ if num >= 0 then\n    num = tostring(num)\n    even, odd = #(num:gsub(\"(%d)(%d)\"\
    , function(m1, m2)\n        if m1 == \"0\" or m1 == \"2\" or m1 == \"4\" or m1\
    \ == \"6\" or m1 == \"8\" then\n          return \"X\"\n        else\n       \
    \   return m1\n        end\n      end):gsub(\"X\", \"\")),\n      #(num:gsub(\"\
    (%d)(%d)\", function(m1, m2)\n        if m1 == \"1\" or m1 == \"3\" or m1 == \"\
    5\" or m1 == \"7\" or m1 == \"9\" then\n          return \"X\"\n        else\n\
    \          return m1\n        end\n      end):gsub(\"X\", \"\"))\n  else\n   \
    \ num = tostring(num):sub(2)\n    even, odd = #(num:gsub(\"(%d)(%d)\", function(m1,\
    \ m2)\n        if m1 == \"0\" or m1 == \"2\" or m1 == \"4\" or m1 == \"6\" or\
    \ m1 == \"8\" then\n          return \"X\"\n        else\n          return m1\n\
    \        end\n      end):gsub(\"X\", \"\")),\n      #(num:gsub(\"(%d)(%d)\", function(m1,\
    \ m2)\n        if m1 == \"1\" or m1 == \"3\" or m1 == \"5\" or m1 == \"7\" or\
    \ m1 == \"9\" then\n          return \"X\"\n        else\n          return m1\n\
    \        end\n      end):gsub(\"X\", \"\"))\n  end\n  return {even, odd}\nend",
  "  local even_digit_count = 0\n  local odd_digit_count = 0\n  while num ~= 0 do\n\
    \    local digit = num % 10\n    if digit % 2 == 0 then\n      even_digit_count\
    \ = even_digit_count + 1\n    else\n      odd_digit_count = odd_digit_count +\
    \ 1\n    end\n    num = (num - digit) / 10\n  end\n  return {even_digit_count,\
    \ odd_digit_count}\nend", "    local count = {0, 0}\n    local positive = num\
    \ >= 0\n    if positive then\n        num = num\n    else\n        num = -num\n\
    \    end\n    while num > 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            count[1] = count[1] + 1\n        else\n         \
    \   count[2] = count[2] + 1\n        end\n        num = (num - digit) / 10\n \
    \   end\n    return count\nend", "  local even_odd = {0, 0}\n  for n in tostring(num):gmatch(\"\
    %d\") do\n    even_odd[tonumber(n) % 2 + 1] = even_odd[tonumber(n) % 2 + 1] +\
    \ 1\n  end\n  return even_odd\nend", "  local tbl = {0, 0}\n  while num ~= 0 do\n\
    \    if (num % 2) == 0 then\n      tbl[1] = tbl[1] + 1\n    else\n      tbl[2]\
    \ = tbl[2] + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return tbl\n\
    end", "  local nums = {}\n  local str = tostring(num)\n  for i = 1, string.len(str)\
    \ do\n    local dig = tonumber(string.sub(str, i, i))\n    if dig % 2 == 0 then\n\
    \      nums[1] = (nums[1] or 0) + 1\n    else\n      nums[2] = (nums[2] or 0)\
    \ + 1\n    end\n  end\n  return nums\nend", "  local even, odd = 0, 0\n  for i\
    \ = 1, #tostring(num) do\n    local digit = tostring(num):sub(i, i)\n    if (digit\
    \ == '0' or digit == '2' or digit == '4' or digit == '6' or digit == '8') then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ {even, odd}\nend", "  local count = {0, 0}\n  while num > 0 do\n    count[1\
    \ + (num % 2)] = count[1 + (num % 2)] + 1\n    num = (num - (num % 10)) / 10\n\
    \  end\n  return count\nend", "  local even, odd = 0, 0\n  for char in string.gmatch(num,\
    \ \"%d\") do\n    if tonumber(char) % 2 == 0 then\n      even = even + 1\n   \
    \ else\n      odd = odd + 1\n    end\n  end\n  return {even, odd}\nend", "   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even = even + 1\n        else\n \
    \           odd = odd + 1\n        end\n        num = math.floor(num / 10)\n \
    \   end\n    return {even, odd}\nend", "\tassert(type(num) == \"number\", \"integer\
    \ expected\")\n\tlocal odd_num, even_num = 0, 0\n\tlocal digit\n\twhile num ~=\
    \ 0 do\n\t\tdigit = math.abs(num % 10)\n\t\tif digit % 2 == 0 then\n\t\t\teven_num\
    \ = even_num + 1\n\t\telse\n\t\t\todd_num = odd_num + 1\n\t\tend\n\t\tnum = math.floor(num\
    \ / 10)\n\tend\n\treturn {even_num, odd_num}\nend", "    local even = 0\n    local\
    \ odd = 0\n    for d in tostring(num):gmatch(\"%d\") do\n        if tonumber(d)\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return {even, odd}\nend", "    local even_count\
    \ = 0\n    local odd_count = 0\n    for _,v in string.gmatch(tostring(num), \"\
    %d\") do\n        local n = tonumber(v)\n        if n % 2 == 0 then\n        \
    \    even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend", "\tlocal\
    \ positive = true\n\tif num < 0 then\n\t\tpositive = false\n\t\tnum = -num\n\t\
    end\n\tlocal count = {0, 0}\n\twhile num > 0 do\n\t\tlocal digit = num % 10\n\t\
    \tif digit % 2 == 0 then\n\t\t\tcount[1] = count[1] + 1\n\t\telse\n\t\t\tcount[2]\
    \ = count[2] + 1\n\t\tend\n\t\tnum = math.floor(num / 10)\n\tend\n\tif not positive\
    \ then\n\t\tcount[2] = count[2] + 1\n\tend\n\treturn count\nend", "    local even_count\
    \ = 0\n    local odd_count = 0\n    while num ~= 0 do\n        local rem = num\
    \ % 10\n        if rem % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n        num\
    \ = math.floor(num / 10)\n    end\n    return {even_count, odd_count}\nend", " \
    \ -- Write your code here\n  local even_odd = {0, 0}\n  local str_num = num ..\
    \ \"\"\n  for _, ch in pairs(str_num) do\n    local n = tonumber(ch)\n    if n\
    \ and n % 2 == 0 then\n      even_odd[1] = even_odd[1] + 1\n    else\n      even_odd[2]\
    \ = even_odd[2] + 1\n    end\n  end\n  return even_odd\nend", "  local odd_num\
    \ = 0\n  local even_num = 0\n  local num_abs = math.abs(num)\n  for _, d in string.gmatch(tostring(num_abs),\
    \ \"(%d)\") do\n    if num_util.is_even(d) then\n      even_num = even_num + 1\n\
    \    else\n      odd_num = odd_num + 1\n    end\n  end\n  return {even_num, odd_num}\n\
    end", "    local even_count = 0\n    local odd_count = 0\n    local len = 0\n\
    \    local is_negative = false\n    if num < 0 then\n        is_negative = true\n\
    \        num = -num\n    end\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even_count = even_count +\
    \ 1\n        else\n            odd_count = odd_count + 1\n        end\n      \
    \  num = math.floor(num / 10)\n        len = len + 1\n    end\n    return { even_count,\
    \ odd_count }\nend", "    local even = 0\n    local odd = 0\n    while num ~=\
    \ 0 do\n        local last = num % 10\n        if last % 2 == 0 then\n       \
    \     even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = (num - last) / 10\n    end\n    return {even, odd}\nend", "  local\
    \ even, odd = 0, 0\n  for digit in tostring(num):gmatch('%d') do\n    if tonumber(digit)\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return {even, odd}\nend", "    if num == 0 then\n        return {0,\
    \ 0}\n    end\n    local even = 0\n    local odd = 0\n    while num ~= 0 do\n\
    \        local m = num % 10\n        if m % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = num\
    \ // 10\n    end\n    return {even, odd}\nend", "    local even = 0\n    local\
    \ odd = 0\n    if num < 0 then\n        num = math.abs(num)\n    end\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend", "    local even = 0\n    local\
    \ odd = 0\n    for digit in tostring(num):gmatch(\".\") do\n        if tonumber(digit)\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return {even, odd}\nend", "    local even_count\
    \ = 0\n    local odd_count = 0\n    local result = {}\n    if num >= 0 then\n\
    \        while num > 0 do\n            if (num % 10) % 2 == 0 then\n         \
    \       even_count = even_count + 1\n            else\n                odd_count\
    \ = odd_count + 1\n            end\n            num = math.floor(num / 10)\n \
    \       end\n    else\n        while num < 0 do\n            if (num % 10) % 2\
    \ == 0 then\n                even_count = even_count + 1\n            else\n \
    \               odd_count = odd_count + 1\n            end\n            num =\
    \ math.floor(num / 10)\n        end\n    end\n    result[1] = even_count\n   \
    \ result[2] = odd_count\n    return result\nend", "    local abs_num = abs(num)\n\
    \    local count = {\n        even = 0,\n        odd = 0\n    }\n    while abs_num\
    \ > 0 do\n        local digit = abs_num % 10\n        if digit % 2 == 0 then\n\
    \            count.even = count.even + 1\n        else\n            count.odd\
    \ = count.odd + 1\n        end\n        abs_num = math.floor(abs_num / 10)\n \
    \   end\n    return count\nend", "  local even_cnt = 0\n  local odd_cnt = 0\n\
    \  while (num ~= 0) do\n    local digit = num % 10\n    if (digit % 2 == 0) then\n\
    \      even_cnt = even_cnt + 1\n    else\n      odd_cnt = odd_cnt + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return {even_cnt, odd_cnt}\nend", " \
    \ local is_positive = num >= 0\n  num = math.abs(num)\n  local even_count = 0\n\
    \  local odd_count = 0\n  while num > 0 do\n    local d = num % 10\n    if d %\
    \ 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count =\
    \ odd_count + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return is_positive\
    \ and {even_count, odd_count} or {odd_count, even_count}\nend", "    local even_num\
    \ = 0\n    local odd_num = 0\n    local num = tostring(num)\n    for i = 1, #num\
    \ do\n        if tonumber(num:sub(i, i)) % 2 == 0 then\n            even_num =\
    \ even_num + 1\n        else\n            odd_num = odd_num + 1\n        end\n\
    \    end\n    return {even_num, odd_num}\nend", "    local function is_even(n)\n\
    \        if n % 2 == 0 then\n            return true\n        else\n         \
    \   return false\n        end\n    end", "    local even = 0\n    local odd =\
    \ 0\n    for _, n in string.gmatch(num, \"%d\") do\n        if n % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return {even, odd}\nend", "    local even_count = 0\n   \
    \ local odd_count = 0\n    for n in tostring(num):gmatch(\".\") do\n        n\
    \ = tonumber(n)\n        if n % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return {even_count, odd_count}\nend", "  local even_count = 0\n  local odd_count\
    \ = 0\n  while num ~= 0 do\n    local digit = num % 10\n    if digit % 2 == 0\
    \ then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return {even_count, odd_count}\n\
    end", "\tlocal even = 0\n\tlocal odd = 0\n\twhile num > 0 do\n\t\tlocal digit\
    \ = num % 10\n\t\tif digit % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\
    \todd = odd + 1\n\t\tend\n\t\tnum = num // 10\n\tend\n\treturn {even, odd}\nend",
  "    local num = math.abs(num)\n    local even, odd = 0, 0\n    while num > 0 do\n\
    \        local digit = num % 10\n        if digit % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n        num\
    \ = (num - digit) / 10\n    end\n    return {even, odd}\nend", "    -- e_count,\
    \ o_count\n    local e_count, o_count = 0, 0\n    local num_abs = math.abs(num)\n\
    \    while num_abs > 0 do\n        if num_abs % 2 == 0 then\n            e_count\
    \ = e_count + 1\n        else\n            o_count = o_count + 1\n        end\n\
    \        num_abs = math.floor(num_abs / 10)\n    end\n    return {e_count, o_count}\n\
    end", "  local even, odd = 0, 0\n  local n = math.abs(num)\n  while n > 0 do\n\
    \    local r = n % 10\n    if r % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n    n = (n - r) / 10\n  end\n  return {even, odd}\n\
    end", "    local even = 0\n    local odd = 0\n    for _, digit in string.gmatch(tostring(num),\
    \ '%d') do\n        digit = tonumber(digit)\n        if digit % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return {even, odd}\nend", "\tlocal even, odd = 0, 0\n\tnum\
    \ = math.abs(num)\n\twhile num > 0 do\n\t\tif (num % 10) % 2 == 0 then\n\t\t\t\
    even = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = math.floor(num\
    \ / 10)\n\tend\n\treturn {even, odd}\nend", "\tlocal n = math.abs(num)\n\tlocal\
    \ even_cnt = 0\n\tlocal odd_cnt = 0\n\tlocal digit\n\twhile n > 0 do\n\t\tdigit\
    \ = n % 10\n\t\tif digit % 2 == 0 then\n\t\t\teven_cnt = even_cnt + 1\n\t\telse\n\
    \t\t\todd_cnt = odd_cnt + 1\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn\
    \ {even_cnt, odd_cnt}\nend", "    local even, odd = 0, 0\n    for _, ch in utf8.codes(tostring(num))\
    \ do\n        if ch % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return {even, odd}\nend",
  "  local even_count = 0\n  local odd_count = 0\n  for digit in tostring(num):gmatch('%d')\
    \ do\n    if tonumber(digit) % 2 == 0 then\n      even_count = even_count + 1\n\
    \    else\n      odd_count = odd_count + 1\n    end\n  end\n  return {even_count,\
    \ odd_count}\nend", "    local even, odd = 0, 0\n    if num < 0 then\n       \
    \ num = -num\n    end\n    while num > 0 do\n        if num % 2 == 0 then\n  \
    \          even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return {even, odd}\nend", "\t\
    local count = {0, 0}\n\tif num < 0 then num = -num end\n\twhile num > 0 do\n\t\
    \tif num % 2 == 0 then\n\t\t\tcount[1] = count[1] + 1\n\t\telse\n\t\t\tcount[2]\
    \ = count[2] + 1\n\t\tend\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn count\n\
    end", "  local even_cnt = 0\n  local odd_cnt = 0\n  for i = 1,#tostring(num) do\n\
    \    local n = num % 10\n    if n % 2 == 0 then\n      even_cnt = even_cnt + 1\n\
    \    else\n      odd_cnt = odd_cnt + 1\n    end\n    num = math.floor(num / 10)\n\
    \  end\n  return {even_cnt, odd_cnt}\nend", "    local even = 0\n    local odd\
    \ = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ {even, odd}\nend", "  assert(type(num) == \"number\")\n  local s = num >= 0\
    \ and tostring(num) or tostring(num):sub(2)\n  local even_digits, odd_digits =\
    \ 0, 0\n  for i = 1, #s do\n    local n = tonumber(s:sub(i, i))\n    if n % 2\
    \ == 0 then\n      even_digits = even_digits + 1\n    else\n      odd_digits =\
    \ odd_digits + 1\n    end\n  end\n  return {even_digits, odd_digits}\nend", " \
    \   local odd_even = {0, 0}\n    local num_copy = math.abs(num)\n    while num_copy\
    \ > 0 do\n        local digit = num_copy % 10\n        if digit % 2 == 0 then\n\
    \            odd_even[1] = odd_even[1] + 1\n        else\n            odd_even[2]\
    \ = odd_even[2] + 1\n        end\n        num_copy = math.floor(num_copy / 10)\n\
    \    end\n    return odd_even\nend", "  local even, odd = 0, 0\n  local str =\
    \ tostring(num)\n  for i = 1, #str do\n    local sub = str:sub(i, i)\n    if tonumber(sub)\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return {even, odd}\nend", "    local even, odd = 0, 0\n    local num\
    \ = math.abs(num)\n    while num > 0 do\n        if (num % 10) % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end", "    local even_count = 0\n    local odd_count = 0\n    local num = math.abs(num)\n\
    \    while num > 0 do\n        if (num % 10) % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend", "    assert(type(num) == \"number\", \"Expect a number.\"\
    )\n    local count = {0, 0}\n    for c in tostring(num):gmatch(\"%d\") do\n  \
    \      if (tonumber(c) % 2) == 0 then\n            count[1] = count[1] + 1\n \
    \       else\n            count[2] = count[2] + 1\n        end\n    end\n    return\
    \ count\nend", "  local even = 0\n  local odd = 0\n  for i = 1, #tostring(num)\
    \ do\n    local num1 = tonumber(tostring(num):sub(i, i))\n    if num1 % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return {even, odd}\nend", "    local even_count = 0\n    local odd_count =\
    \ 0\n    for digit in tostring(num):gmatch(\"%d\") do\n        local digit = tonumber(digit)\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend", "\tlocal t = {0, 0}\n\tif num == 0 then\n\t\t\
    t[1] = 1\n\t\treturn t\n\tend\n\tnum = math.abs(num)\n\twhile num > 0 do\n\t\t\
    local mod = num % 10\n\t\tif mod % 2 == 0 then\n\t\t\tt[1] = t[1] + 1\n\t\telse\n\
    \t\t\tt[2] = t[2] + 1\n\t\tend\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn\
    \ t\nend", "  num = math.abs(num)\n  local even, odd = 0, 0\n  while num > 0 do\n\
    \    local digit = num % 10\n    if digit % 2 == 0 then\n      even = even + 1\n\
    \    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return {even, odd}\nend", "    local even_count = 0\n    local odd_count =\
    \ 0\n    local sign = num >= 0 and 1 or -1\n    num = math.abs(num)\n    while\
    \ num > 0 do\n        local digit = num % 10\n        if (digit % 2) == 0 then\n\
    \            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even_count * sign, odd_count * sign}\nend", "  local even_odd = {0,\
    \ 0}\n  for digit in string.gmatch(tostring(math.abs(num)), '%d') do\n    even_odd[digit\
    \ % 2 == 0 and 1 or 2] = even_odd[digit % 2 == 0 and 1 or 2] + 1\n  end\n  return\
    \ even_odd\nend", "    local even_count = 0\n    local odd_count = 0\n    for\
    \ i = 0, 9 do\n        local n = num\n        local digit_count = 0\n        while\
    \ n > 0 do\n            if n % 10 == i then\n                digit_count = digit_count\
    \ + 1\n            end\n            n = math.floor(n / 10)\n        end\n    \
    \    if i % 2 == 0 then\n            even_count = even_count + digit_count\n \
    \       else\n            odd_count = odd_count + digit_count\n        end\n \
    \   end\n    return {even_count, odd_count}\nend", "    local even_count = 0\n\
    \    local odd_count = 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tostring(num):sub(i, i)\n        if digit == '0' or tonumber(digit) % 2 ==\
    \ 0 then\n            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n    end\n    return {even_count, odd_count}\n\
    end", "    local even = 0\n    local odd = 0\n    for i = 1, #num do\n       \
    \ local digit = num[i]\n        if digit % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ {even, odd}\nend", "    local even_count = 0\n    local odd_count = 0\n    for\
    \ _, v in pairs(int_to_table(num)) do\n        if (v % 2 == 0) then\n        \
    \    even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend", "    local\
    \ num_str = tostring(num)\n    local even_count = 0\n    local odd_count = 0\n\
    \    for _, c in pairs(num_str) do\n        local n = tonumber(c)\n        if\
    \ n % 2 == 0 then\n            even_count = even_count + 1\n        else\n   \
    \         odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nassert_equal({2, 0}, even_odd_count(12))\nassert_equal({1,\
    \ 2}, even_odd_count(123))\nassert_equal({2, 1}, even_odd_count(1234))\nassert_equal({1,\
    \ 1}, even_odd_count(-12))", "  local odd, even = 0, 0\n  while num > 0 do\n \
    \   if num % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n\
    \    end\n    num = num / 10\n  end\n  return {even, odd}\nend", "  local even_count\
    \ = 0\n  local odd_count = 0\n  for digit in string.gmatch(tostring(math.abs(num)),\
    \ \"%d\") do\n    digit = tonumber(digit)\n    if digit % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n\
    \  return {even_count, odd_count}\nend", "  num = math.abs(num)\n  local even_count\
    \ = 0\n  local odd_count = 0\n  while num > 0 do\n    local d = num % 10\n   \
    \ if d % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n    num = (num - d) / 10\n  end\n  return {even_count,\
    \ odd_count}\nend", "    local even, odd = 0, 0\n    for i = 1, string.len(num)\
    \ do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return {even, odd}\nend",
  "    local even, odd = 0, 0\n    if num < 0 then\n        num = -num\n    end\n\
    \    while num > 0 do\n        if (num % 10) % 2 == 0 then\n            even =\
    \ even + 1\n        else\n            odd = odd + 1\n        end\n        num\
    \ = num // 10\n    end\n    return {even, odd}\nend", "    local even, odd = 0,\
    \ 0\n    num = math.abs(num)\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = (num - digit) / 10\n  \
    \  end\n    return {even, odd}\nend", "    local even_count = 0\n    local odd_count\
    \ = 0\n    for i in num:gmatch(\"[%d]\") do\n        if ((tonumber(i) % 2) ==\
    \ 0) then\n            even_count = even_count + 1\n        else\n           \
    \ odd_count = odd_count + 1\n        end\n    end\n    return {even_count, odd_count}\n\
    end", "  local even = 0\n  local odd = 0\n  for d in tostring(num):gmatch('%d')\
    \ do\n    if d % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1\n    end\n  end\n  return {even, odd}\nend", "  local even, odd = 0, 0\n\
    \  while num ~= 0 do\n    local last_digit = num % 10\n    if last_digit % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return {even, odd}\nend", "    local even,\
    \ odd = 0, 0\n    num = math.abs(num)\n    while num > 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend", "\tnum = math.abs(num)\n\tlocal\
    \ even, odd = 0, 0\n\twhile num > 0 do\n\t\tif (num % 10) % 2 == 0 then\n\t\t\t\
    even = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = math.floor(num\
    \ / 10)\n\tend\n\treturn {even, odd}\nend", "    local even = 0\n    local odd\
    \ = 0\n    local num = math.abs(num)\n    while num > 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend", "    local even, odd = 0, 0\n\
    \    for digit in tostring(num):gmatch(\"%d\") do\n        if tonumber(digit)\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return {even, odd}\nend", "    local even,\
    \ odd = 0, 0\n    for i in tostring(num):gmatch(\"%d\") do\n        if tonumber(i)\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return {even, odd}\nend", "    local even\
    \ = 0\n    local odd = 0\n    for i = 1, #(tostring(num)) do\n        local digit\
    \ = tonumber(string.sub(tostring(num), i, i))\n        if digit % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return {even, odd}\nend", "    local even, odd = 0, 0\n \
    \   for i = 1, #tostring(num) do\n        local d = tonumber(tostring(num):sub(i,\
    \ i))\n        if d % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return {even, odd}\nend",
  "    local even = 0\n    local odd = 0\n    while num ~= 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend", "    local even = 0\n    local\
    \ odd = 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend", "    local even,\
    \ odd = 0, 0\n    for n in tostring(num):gmatch('%d') do\n        if tonumber(n)\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return {even, odd}\nend", "  local even,\
    \ odd = 0, 0\n  num = math.abs(num)\n  while num > 0 do\n    local n = num % 10\n\
    \    if n % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n\
    \    end\n    num = (num - n) / 10\n  end\n  return {even, odd}\nend", "    local\
    \ count = {0, 0}\n    while num ~= 0 do\n        local digit = num % 10\n    \
    \    if digit % 2 == 0 then\n            count[1] = count[1] + 1\n        else\n\
    \            count[2] = count[2] + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return count\nend", "    local even_count = 0\n    local\
    \ odd_count = 0\n    for _, digit in utils.dg(_, num) do\n        if digit % 2\
    \ == 0 then\n            even_count = even_count + 1\n        else\n         \
    \   odd_count = odd_count + 1\n        end\n    end\n    return {even_count, odd_count}\n\
    end", "    local even, odd = 0, 0\n    for i = 1, string.len(num) do\n       \
    \ local digit = tonumber(string.sub(num, i, i))\n        if digit % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return {even, odd}\nend", "  local count = {0, 0}\n  while\
    \ num ~= 0 do\n    count[((num % 10) % 2) + 1] = count[((num % 10) % 2) + 1] +\
    \ 1\n    num = math.floor(num / 10)\n  end\n  return count\nend", "    local count\
    \ = {0, 0}\n    while num ~= 0 do\n        if (num % 2) == 0 then\n          \
    \  count[1] = count[1] + 1\n        else\n            count[2] = count[2] + 1\n\
    \        end\n        num = num / 10\n    end\n    return count\nend", "    local\
    \ even_count = 0\n    local odd_count = 0\n    local number = math.abs(num)\n\
    \    while number > 0 do\n        local digit = number % 10\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        number = math.floor(number\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend", "\tnum = math.abs(num)\n\
    \tlocal t = {0, 0}\n\tfor d in tostring(num):gmatch(\"%d\") do\n\t\tif d:byte()\
    \ % 2 == 0 then\n\t\t\tt[1] = t[1] + 1\n\t\telse\n\t\t\tt[2] = t[2] + 1\n\t\t\
    end\n\tend\n\treturn t\nend", "    local digits = tostring(math.abs(num))\n  \
    \  local even_count = 0\n    local odd_count = 0\n    for i = 1, #digits do\n\
    \        local n = tonumber(digits:sub(i, i))\n        if n % 2 == 0 then\n  \
    \          even_count = even_count + 1\n        else\n            odd_count =\
    \ odd_count + 1\n        end\n    end\n    return {even_count, odd_count}\nend",
  "    local even = 0\n    local odd = 0\n    for digit in tostring(num):gmatch('%d')\
    \ do\n        if tonumber(digit) % 2 == 0 then\n            even = even + 1\n\
    \        else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend", "  local even_count = 0\n  local odd_count = 0\n  for _, v in pairs(to_digits(num))\
    \ do\n    if v % 2 == 0 then\n      even_count = even_count + 1\n    else\n  \
    \    odd_count = odd_count + 1\n    end\n  end\n  return {even_count, odd_count}\n\
    end", "\tlocal t = {0, 0}\n\tfor n in tostring(num):gmatch(\"%d\") do\n\t\tif\
    \ tonumber(n) % 2 == 0 then\n\t\t\tt[1] = t[1] + 1\n\t\telse\n\t\t\tt[2] = t[2]\
    \ + 1\n\t\tend\n\tend\n\treturn t\nend", "    assert(is_positive_integer(num))\n\
    \    local even_count = 0\n    local odd_count = 0\n    while num > 0 do\n   \
    \     local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = (num - digit) / 10\n    end\n    return {even_count, odd_count}\n\
    end", "    local even_cnt = 0\n    local odd_cnt = 0\n    num = math.abs(num)\n\
    \    while num > 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even_cnt = even_cnt + 1\n        else\n            odd_cnt\
    \ = odd_cnt + 1\n        end\n        num = (num - digit) / 10\n    end\n    return\
    \ {even_cnt, odd_cnt}\nend", "    local even, odd = 0, 0\n    num = math.abs(num)\n\
    \    while num > 0 do\n        local digit = num % 10\n        if math.fmod(digit,\
    \ 2) == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return {even,\
    \ odd}\nend", "    local even_count = 0\n    local odd_count = 0\n    while num\
    \ ~= 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n  \
    \          even_count = even_count + 1\n        else\n            odd_count =\
    \ odd_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n  \
    \  return {even_count, odd_count}\nend", "    if num == 0 then\n        return\
    \ {0, 0}\n    end\n    local even, odd = 0, 0\n    for _, n in ipairs(to_digits(num))\
    \ do\n        if n % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return {even, odd}\nend",
  "\tlocal even, odd = 0, 0\n\tfor _,i in ipairs(split_digits(num)) do\n\t\tif is_even(i)\
    \ then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\
    \treturn {even, odd}\nend", "  assert(num and type(num) == \"number\",\n    \"\
    even_odd_count: num must be a number!\")\n  local even_count = 0\n  local odd_count\
    \ = 0\n  while num ~= 0 do\n    local digit = num % 10\n    if digit % 2 == 0\
    \ then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return {even_count, odd_count}\n\
    end", "    local even = 0\n    local odd = 0\n    for i = 0, math.abs(num) do\n\
    \        if i % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n    end\n    return {even, odd}\nend", " \
    \   local even, odd = 0, 0\n    for i in tostring(num):gmatch('.') do\n      \
    \  if tonumber(i) % 2 == 0 then\n            even = even + 1\n        else\n \
    \           odd = odd + 1\n        end\n    end\n    return {even, odd}\nend",
  "    local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n    \
    \    local rem = num % 10\n        if rem % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend", "    local even = 0\n    local odd = 0\n    if num < 0 then\n\
    \        num = -num\n    end\n    while num > 0 do\n        local d = num % 10\n\
    \        if d % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even, odd}\nend", "  local result = {0, 0}\n  local odd = false\n\
    \  if num < 0 then num = -num odd = true end\n  while num > 0 do\n    local digit\
    \ = num % 10\n    num = (num - digit) / 10\n    if digit % 2 == 0 then\n     \
    \ result[1] = result[1] + 1\n    else\n      result[2] = result[2] + 1\n    end\n\
    \  end\n  if odd then result[2] = result[2] + 1 end\n  return result\nend", " \
    \ local even, odd = 0, 0\n  local n = math.abs(num)\n  while n > 0 do\n    local\
    \ d = n % 10\n    if d % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n    n = math.floor(n / 10)\n  end\n  return {even, odd}\n\
    end", "  num = math.abs(num)\n  local even, odd = 0, 0\n  while num > 0 do\n \
    \   local d = num % 10\n    if d % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ {even, odd}\nend", "  -- num == 0\n  if num == 0 then\n    return {0, 0}\n \
    \ end", "\tlocal even, odd = 0, 0\n\tfor char in tostring(num):gmatch(\".\") do\n\
    \t\tif tonumber(char) % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd\
    \ = odd + 1\n\t\tend\n\tend\n\treturn {even, odd}\nend", "\tlocal even, odd =\
    \ 0, 0\n\tfor i = 1, #tostring(num) do\n\t\tif num % 2 == 0 then\n\t\t\teven =\
    \ even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn {even, odd}\n\
    end", "  local num = math.abs(num)\n  local even = 0\n  local odd = 0\n  while\
    \ (num > 0) do\n    local digit = num % 10\n    if digit % 2 == 0 then\n     \
    \ even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even, odd}\nend", "    local even, odd = 0, 0\n    local\
    \ negative = false\n    if num < 0 then\n        negative = true\n        num\
    \ = -num\n    end\n    for _ = 0, math.huge do\n        local remainder = num\
    \ % 10\n        if remainder % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n        if num == 0 then\n            break\n        end\n    end\n \
    \   return {even, odd}\nend", "    local even_count = 0\n    local odd_count =\
    \ 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit %\
    \ 2 == 0 then\n            even_count = even_count + 1\n        else\n       \
    \     odd_count = odd_count + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return {even_count, odd_count}\nend", "  num = math.abs(num)\n \
    \ local even_count = 0\n  local odd_count = 0\n  while num > 0 do\n    local digit\
    \ = num % 10\n    if is_even(digit) then\n      even_count = even_count + 1\n\
    \    else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even_count, odd_count}\nend", "  local even_count =\
    \ 0\n  local odd_count = 0\n  for i = 1, #num do\n    if num[i] % 2 == 0 then\n\
    \      even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n  end\n  return {even_count, odd_count}\nend", "  local result = {\n\
    \    even = 0,\n    odd = 0\n  }\n  for digit in tostring(num):gmatch(\"%d\")\
    \ do\n    if is_even(digit) then\n      result.even = result.even + 1\n    else\n\
    \      result.odd = result.odd + 1\n    end\n  end\n  return result\nend", " \
    \   num = math.abs(num)\n    local even, odd = 0, 0\n    while num > 0 do\n  \
    \      if num % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even, odd}\nend", "    local even, odd = 0, 0\n    if num < 0 then\n\
    \        num = -num\n    end\n    while num > 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return {even, odd}\nend", "  if num == 0 then\n    return {1, 0}\n\
    \  end\n  local even_count = 0\n  local odd_count = 0\n  while num ~= 0 do\n \
    \   local d = num % 10\n    if d % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    else\n      odd_count = odd_count + 1\n    end\n    num = (num - d)\
    \ / 10\n  end\n  return {even_count, odd_count}\nend", "    local even = 0\n \
    \   local odd = 0\n    for i = 1, #tostring(num) do\n        local str = num %\
    \ 10\n        if str % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = num / 10\n    end\n   \
    \ return {even, odd}\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
