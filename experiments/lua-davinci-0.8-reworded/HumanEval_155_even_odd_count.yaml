name: HumanEval_155_even_odd_count
language: lua
prompt: "-- Given an integer. return a table that has the number of even and odd digits\
  \ respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n-- >>> even_odd_count(123)\n\
  -- {1, 2}\nlocal function even_odd_count(num)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
  \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
  \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
  \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
  \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
  \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    num = math.abs(num)\n    local counter = {0, 0}\n    while num\
    \ > 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n   \
    \         counter[1] = counter[1] + 1\n        else\n            counter[2] =\
    \ counter[2] + 1\n        end\n        num = (num - digit) / 10\n    end\n   \
    \ return counter\nend", "    local count = {0, 0}\n    if num < 0 then num = -num\
    \ end\n    repeat\n        local last_digit = num % 10\n        if last_digit\
    \ % 2 == 0 then\n            count[1] = count[1] + 1\n        else\n         \
    \   count[2] = count[2] + 1\n        end\n        num = (num - last_digit) / 10\n\
    \    until num == 0\n    return count\nend", "  local even, odd = 0, 0\n  local\
    \ num = math.abs(num)\n  while num > 0 do\n    local digit = num % 10\n    if\
    \ digit % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n\
    \    end\n    num = (num - digit) / 10\n  end\n  return {even, odd}\nend", " \
    \   local even_count = 0\n    local odd_count = 0\n    for i = 0, 9 do\n     \
    \   local c = count_digits(num, i)\n        if i % 2 == 0 then\n            even_count\
    \ = even_count + c\n        else\n            odd_count = odd_count + c\n    \
    \    end\n    end\n    return {even_count, odd_count}\nend", "  local even_count\
    \ = 0\n  local odd_count = 0\n  for i = 0, num do\n    if math.floor(i / 2) ==\
    \ i / 2 then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n  end\n  return {even_count, odd_count}\nend", "    local even_count\
    \ = 0\n    local odd_count = 0\n    local num_digit_count = math.floor(math.log10(math.abs(num)))\
    \ + 1\n    for i = 1, num_digit_count do\n        local digit = math.floor(math.abs(num\
    \ / math.pow(10, i - 1))) % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n    end\n    return {even_count, odd_count}\nend", "  local even, odd\
    \ = 0, 0\n  for d in tostring(num):gmatch(\"%d\") do\n    if d % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ {even, odd}\nend", "    local abs_num = abs(num)\n    local even_count = 0\n\
    \    local odd_count = 0\n    local c\n    while abs_num > 0 do\n        c = abs_num\
    \ % 10\n        if c % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n        abs_num\
    \ = floor(abs_num / 10)\n    end\n    return {even_count, odd_count}\nend", " \
    \ assert(type(num) == \"number\", \"Need an integer!\")\n  local even, odd = 0,\
    \ 0\n  while num ~= 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even, odd}\nend", "    local even = 0\n    local odd\
    \ = 0\n    for i = 1, #num do\n        if (i % 2 == 0) then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n\
    \    return {even, odd}\nend", "    local even, odd = 0, 0\n    for _, v in pairs(string.totable(tostring(math.abs(num))))\
    \ do\n        if tonumber(v) % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend", "    num = math.abs(num)\n    local tbl = {0, 0}\n    while num\
    \ > 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n   \
    \         tbl[1] = tbl[1] + 1\n        else\n            tbl[2] = tbl[2] + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return tbl\nend",
  "    local t = {0, 0}\n    local n = num < 0 and -num or num\n    while n > 0 do\n\
    \        local d = n % 10\n        if d % 2 == 0 then\n            t[1] = t[1]\
    \ + 1\n        else\n            t[2] = t[2] + 1\n        end\n        n = (n\
    \ - d) / 10\n    end\n    return t\nend", "    local dn = math.abs(num)\n    local\
    \ t = {0, 0}\n    while dn > 0 do\n        local d = dn % 10\n        if d % 2\
    \ == 0 then\n            t[1] = t[1] + 1\n        else\n            t[2] = t[2]\
    \ + 1\n        end\n        dn = math.floor(dn / 10)\n    end\n    return t\n\
    end", "  local count = {0, 0}\n  if num < 0 then\n    count[1] = 1\n    num =\
    \ -num\n  end\n  while num > 0 do\n    if num % 2 == 0 then\n      count[1] =\
    \ count[1] + 1\n    else\n      count[2] = count[2] + 1\n    end\n    num = num\
    \ // 10\n  end\n  return count\nend", "    local even_count = 0\n    local odd_count\
    \ = 0\n    local num = math.abs(num)\n    while num > 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return {even_count, odd_count}\n\
    end", "    local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end", "    local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"%d\"\
    ) do\n        if tonumber(digit) % 2 == 0 then\n            even = even + 1\n\
    \        else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend", "    local even = 0\n    local odd = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(sub(tostring(num), i, i))\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return {even, odd}\nend", "    assert(num\
    \ < 1e10 and num > -1e10)\n    if num == 0 then\n        return {1, 0}\n    end\n\
    \    local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n  \
    \      local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = num // 10\n    end\n    return {even_count, odd_count}\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
