name: HumanEval_35_max_element
language: lua
results:
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for _, v in ipairs(l) do\n  \
    \  if v > max then\n      max = v\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = l[1]\n  for i = 2, #l do\n    if l[i] >\
    \ m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    local max = 0\n    for k, v in pairs(l) do\n  \
    \      if v > max then\n            max = v\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    local max = 0\n    for _, v in ipairs(l) do\n \
    \       if v > max then\n            max = v\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for _, e in ipairs(l) do\n  \
    \  if max < e then\n      max = e\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    if #l == 0 then\n        return nil\n    end\n\
    \    local m = l[1]\n    for i = 2, #l do\n        if l[i] > m then\n        \
    \    m = l[i]\n        end\n    end\n    return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    local i = 0\n    for k, _ in pairs(l) do\n    \
    \    i = math.max(i, k)\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9r_amucj.lua:18:\
    \ expected: 124, actual: 11\nstack traceback:\n\t/tmp/tmp9r_amucj.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    local max = l[1]\n    for i=2,#l do\n        if\
    \ l[i] > max then\n            max = l[i]\n        end\n    end\n    return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    local max = l[1]\n    for i = 2, #l do\n      \
    \  if l[i] > max then\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    local max_ = l[1]\n    for i = 2, #l do\n     \
    \   if l[i] > max_ then\n            max_ = l[i]\n        end\n    end\n    return\
    \ max_\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n\tlocal max = l[1]\n\tfor i=2,#l do\n\t\tif l[i] >\
    \ max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for _, v in ipairs(l) do\n  \
    \  if v > max then\n      max = v\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if not l then return end\n  local max = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local mx = l[1]\n  for _, v in ipairs(l) do\n   \
    \ if v > mx then\n      mx = v\n    end\n  end\n  return mx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    local max = 0\n    for _,v in ipairs(l) do\n  \
    \      if v > max then\n            max = v\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    assert_arg_number(1, l)\n    assert(l[1], \"cannot\
    \ take max of empty list\")\n    local ans = l[1]\n    for i = 2, #l do\n    \
    \    if l[i] > ans then\n            ans = l[i]\n        end\n    end\n    return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvd81bde1.lua:7:\
    \ attempt to call a nil value (global 'assert_arg_number')\nstack traceback:\n\
    \t/tmp/tmpvd81bde1.lua:7: in local 'candidate'\n\t/tmp/tmpvd81bde1.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max = l[1]\n  for _, v in ipairs(l) do\n  \
    \  if v > max then\n      max = v\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    local max_key, max_value = nil, -math.huge\n  \
    \  for key, value in pairs(l) do\n        if max_value < value then\n        \
    \    max_key, max_value = key, value\n        end\n    end\n    return max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n    local max = l[1]\n    for i = 2, #l do\n      \
    \  if l[i] > max then\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
