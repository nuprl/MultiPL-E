name: HumanEval_51_remove_vowels
language: lua
prompt: "-- remove_vowels is a function that takes string and returns string without\
  \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n-- 'bcdf'\n\
  -- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n-- 'B'\n--\
  \ >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
  nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
  \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
  \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
  \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return text:gsub('[aeiou]', '')\nend", "    return text:gsub('[AEIOUaeiou]',\
    \ '')\nend", "  return string.gsub(text, '[aeiouAEIOU]', '')\nend", "\treturn\
    \ string.gsub(text, \"[AEIOUaeiou]\", \"\")\nend", "    if text == '' then\n \
    \       return ''\n    elseif text:find('a') == nil and text:find('e') == nil\
    \ and text:find('i') == nil and text:find('o') == nil and text:find('u') == nil\
    \ then\n        return text\n    else\n        text = text:gsub('a', '')\n   \
    \     text = text:gsub('e', '')\n        text = text:gsub('i', '')\n        text\
    \ = text:gsub('o', '')\n        text = text:gsub('u', '')\n        return text\n\
    \    end\nend", "  local function is_vowel(c)\n    local vowels = 'aeiouAEIOU'\n\
    \    for v in vowels:gmatch('.') do\n      if v == c then\n        return true\n\
    \      end\n    end\n    return false\n  end\n  local out = ''\n  for c in text:gmatch('.')\
    \ do\n    if not is_vowel(c) then\n      out = out .. c\n    end\n  end\n  return\
    \ out\nend", "  if text == '' then\n    return ''\n  elseif string.sub(text, 1,\
    \ 1) == 'a' or string.sub(text, 1, 1) == 'e' or string.sub(text, 1, 1) == 'i'\
    \ or string.sub(text, 1, 1) == 'o' or string.sub(text, 1, 1) == 'u' then\n   \
    \ return remove_vowels(string.sub(text, 2))\n  else\n    return string.sub(text,\
    \ 1, 1) .. remove_vowels(string.sub(text, 2))\n  end\nend", "  return remove_matches(text,\
    \ '[aeiou]')\nend", "    if not text then\n        return ''\n    end\n    local\
    \ vowel = \"[aeiouAEIOU]\"\n    return text:gsub(vowel, '')\nend", "    return\
    \ text:gsub('[aeiouAEIOU]', '')\nend", "  local t = {}\n  for c in text:gmatch(\"\
    .\") do\n    if not is_vowel(c) then\n      table.insert(t, c)\n    end\n  end\n\
    \  return table.concat(t)\nend", "  return text:gsub('[aeiou]', '')\nend", " \
    \ if type(text) ~= 'string' then return end\n  local result = ''\n  for char in\
    \ string.gmatch(text, '.') do\n    if not string.find(vowels, char) then\n   \
    \   result = result .. char\n    end\n  end\n  return result\nend", "    return\
    \ (text:gsub('[aeiou]', ''))\nend", "\t--local text = remove_compose(text)\n\t\
    --print('remove_vowels text=', text)\n\treturn text:gsub('[aeiouAEIOU]', '')\n\
    end", "  return string.gsub(text, '[AEIOUaeiou]', '')\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "  return text:gsub('[aeiouAEIOU]', '')\nend", "    -- todo make\
    \ it return string without vowels\n    -- HINT: you can check if some character\
    \ is a vowel by using\n    --       is_vowel() function.\n    return text:gsub('a',\
    \ ''):gsub('e', ''):gsub('i', ''):gsub('o', ''):gsub('u', '')\nend", "    return\
    \ text:gsub('[aeiouAEIOU]', '')\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
