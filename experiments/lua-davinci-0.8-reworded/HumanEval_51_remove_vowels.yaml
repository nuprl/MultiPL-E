name: HumanEval_51_remove_vowels
language: lua
prompt: "-- remove_vowels is a function that takes string and returns string without\
  \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n-- 'bcdf'\n\
  -- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n-- 'B'\n--\
  \ >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
  nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
  \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
  \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
  \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return text:gsub('[aeiou]', '')\nend", "    return text:gsub('[AEIOUaeiou]',\
    \ '')\nend", "  return string.gsub(text, '[aeiouAEIOU]', '')\nend", "\treturn\
    \ string.gsub(text, \"[AEIOUaeiou]\", \"\")\nend", "    if text == '' then\n \
    \       return ''\n    elseif text:find('a') == nil and text:find('e') == nil\
    \ and text:find('i') == nil and text:find('o') == nil and text:find('u') == nil\
    \ then\n        return text\n    else\n        text = text:gsub('a', '')\n   \
    \     text = text:gsub('e', '')\n        text = text:gsub('i', '')\n        text\
    \ = text:gsub('o', '')\n        text = text:gsub('u', '')\n        return text\n\
    \    end\nend", "  local function is_vowel(c)\n    local vowels = 'aeiouAEIOU'\n\
    \    for v in vowels:gmatch('.') do\n      if v == c then\n        return true\n\
    \      end\n    end\n    return false\n  end\n  local out = ''\n  for c in text:gmatch('.')\
    \ do\n    if not is_vowel(c) then\n      out = out .. c\n    end\n  end\n  return\
    \ out\nend", "  if text == '' then\n    return ''\n  elseif string.sub(text, 1,\
    \ 1) == 'a' or string.sub(text, 1, 1) == 'e' or string.sub(text, 1, 1) == 'i'\
    \ or string.sub(text, 1, 1) == 'o' or string.sub(text, 1, 1) == 'u' then\n   \
    \ return remove_vowels(string.sub(text, 2))\n  else\n    return string.sub(text,\
    \ 1, 1) .. remove_vowels(string.sub(text, 2))\n  end\nend", "  return remove_matches(text,\
    \ '[aeiou]')\nend", "    if not text then\n        return ''\n    end\n    local\
    \ vowel = \"[aeiouAEIOU]\"\n    return text:gsub(vowel, '')\nend", "    return\
    \ text:gsub('[aeiouAEIOU]', '')\nend", "  local t = {}\n  for c in text:gmatch(\"\
    .\") do\n    if not is_vowel(c) then\n      table.insert(t, c)\n    end\n  end\n\
    \  return table.concat(t)\nend", "  return text:gsub('[aeiou]', '')\nend", " \
    \ if type(text) ~= 'string' then return end\n  local result = ''\n  for char in\
    \ string.gmatch(text, '.') do\n    if not string.find(vowels, char) then\n   \
    \   result = result .. char\n    end\n  end\n  return result\nend", "    return\
    \ (text:gsub('[aeiou]', ''))\nend", "\t--local text = remove_compose(text)\n\t\
    --print('remove_vowels text=', text)\n\treturn text:gsub('[aeiouAEIOU]', '')\n\
    end", "  return string.gsub(text, '[AEIOUaeiou]', '')\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "  return text:gsub('[aeiouAEIOU]', '')\nend", "    -- todo make\
    \ it return string without vowels\n    -- HINT: you can check if some character\
    \ is a vowel by using\n    --       is_vowel() function.\n    return text:gsub('a',\
    \ ''):gsub('e', ''):gsub('i', ''):gsub('o', ''):gsub('u', '')\nend", "    return\
    \ text:gsub('[aeiouAEIOU]', '')\nend", "    local text_without_vowels = ''\n \
    \   local used_vowels = {}\n    local vowels = {'a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U'}\n    for i = 1, #text do\n        for index, vowel in ipairs(vowels)\
    \ do\n            if text:sub(i, i) == vowel then\n                used_vowels[i]\
    \ = true\n            end\n        end\n    end\n    for i = 1, #text do\n   \
    \     if not used_vowels[i] then\n            text_without_vowels = text_without_vowels\
    \ .. text:sub(i, i)\n        end\n    end\n    return text_without_vowels\nend",
  "    -- YOUR CODE HERE\n    -- return 'abc'\nend", "    return (text:gsub('[aeiouAEIOU]',\
    \ ''))\nend", "  return text:gsub('[aeiouAEIOU]', '')\nend", "\treturn text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "  return text:gsub('[AEIOUaeiou]', '')\nend", "\tlocal temp = text:gsub('[aeiouAEIOU]',\
    \ '')\n\treturn temp\nend", "    return (string.gsub(text, \"[aeiouAEIOU]\", \"\
    \"))\nend", "\tlocal result = ''\n\tfor i = 1, #text do\n\t\tlocal letter = string.sub(text,\
    \ i, i)\n\t\tif letter ~= 'a' and letter ~= 'e' and letter ~= 'i' and letter ~=\
    \ 'o' and letter ~= 'u' then\n\t\t\tresult = result .. letter\n\t\tend\n\tend\n\
    \treturn result\nend", "    return string.gsub(text, '[aeiouAEIOU]', '')\nend",
  "    -- TODO:\n    -- This function is a stub. You should fill it in\n    -- with\
    \ the actual code.", "    local result = ''\n    for i = 1, text:len() do\n  \
    \      local char = text:sub(i, i)\n        if char:match('[^aeiouAEIOU]') then\n\
    \            result = result .. char\n        end\n    end\n    return result\n\
    end", "    local vowels = {a = true, e = true, i = true, o = true, u = true, ['A']\
    \ = true, ['E'] = true, ['I'] = true, ['O'] = true, ['U'] = true}\n    local output\
    \ = ''\n    local counter = 1\n    while counter <= #text do\n        if not vowels[text:sub(counter,\
    \ counter)] then\n            output = output .. text:sub(counter, counter)\n\
    \        end\n        counter = counter + 1\n    end\n    return output\nend",
  "    return text:gsub('[aeiou]', '')\nend", "    if text == '' then\n        return\
    \ ''\n    elseif table.contains(vowels, text:sub(1, 1)) then\n        return remove_vowels(text:sub(2))\n\
    \    else\n        return text:sub(1, 1) .. remove_vowels(text:sub(2))\n    end\n\
    end", "  return text:gsub('[aeiou]', '')\nend", "  return text:gsub('[aeiou]',\
    \ '')\nend", "  -- YOUR CODE HERE\nend", "  local ret = {}\n  local i = 1\n  for\
    \ char in text:gmatch\".\" do\n    if not char:match\"[aeiouAEIOU]\" then\n  \
    \    ret[i] = char\n      i = i + 1\n    end\n  end\n  return table.concat(ret)\n\
    end", "\tlocal vowels = 'aeiouAEIOU'\n\tlocal removed = text:gsub('[aeiouAEIOU]',\
    \ '')\n\treturn removed\nend", "    local text = string.gsub(text, '[aeiouAEIOU]',\
    \ '')\n    return text\nend", "    -- check if text is empty\n    if text == ''\
    \ then\n        return ''\n    end\n    -- get first character of text\n    local\
    \ first_char = text:sub(1, 1)\n    -- get rest of text after first character\n\
    \    local rest_text = text:sub(2)\n    -- check if first character is a vowel\n\
    \    if is_vowel(first_char) then\n        -- if first character is a vowel, return\
    \ rest of text without vowels\n        return remove_vowels(rest_text)\n    else\n\
    \        -- if first character is not a vowel, return first character plus rest\
    \ of text without vowels\n        return first_char .. remove_vowels(rest_text)\n\
    \    end\nend", "    return filter(text, vowels)\nend", "    -- body...\n    local\
    \ text_no_vowels = text:gsub('[aeiouAEIOU]', '')\n    return text_no_vowels\n\
    end", "    return text:gsub('[aeiouAEIOU]', '')\nend", "\tlocal vowels = 'aeiouAEIOU'\n\
    \treturn text:gsub('['..vowels..']', '')\nend", "  return string.gsub(text, '[AEIOUaeiou]',\
    \ '')\nend", "    local result = ''\n    for char in text:gmatch('.') do\n   \
    \     if not is_vowel(char) then\n            result = result .. char\n      \
    \  end\n    end\n    return result\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "    local v = 'aeiouAEIOU'\n    return text:gsub('['..v..']', '')\n\
    end", "\treturn (text:gsub('[aeiouAEIOU]', ''))\nend", "  -- TODO: implement me\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend", "    return ''\nend", "    return\
    \ text:gsub('[aeiou]', '')\nend", "  return string.gsub(text, '[aeiouAEIOU]',\
    \ '')\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\
    \  local new_text = {}\n  for i = 1, #text do\n    if not util.table_contains(vowels,\
    \ text:sub(i, i)) then\n      table.insert(new_text, text:sub(i, i))\n    end\n\
    \  end\n  return table.concat(new_text)\nend", "\treturn text:gsub('[aeiou]',\
    \ '')\nend", "\tlocal out = {}\n\tfor i = 1, #text do\n\t\tlocal char = text:sub(i,\
    \ i)\n\t\tif not char:match('[aeiou]') then\n\t\t\ttable.insert(out, char)\n\t\
    \tend\n\tend\n\treturn table.concat(out)\nend", "    local vowels = 'aeiou'\n\
    \    return text:gsub('[aeiou]', '')\nend", "\ttext = string.gsub(text, \"[aeiouAEIOU]\"\
    , \"\")\n\treturn text\nend", "  return string.gsub(text, '%a*[aeiou]%a*', '')\n\
    end", "\treturn (text:gsub('[aeiouAEIOU]', ''))\nend", "    return text:gsub('[aeiou]',\
    \ '')\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'}\n    local result = ''\n    for i = 1, #text do\n        if not vowels[text:sub(i,\
    \ i)] then\n            result = result .. text:sub(i, i)\n        end\n    end\n\
    \    return result\nend", "    return string.gsub(text, '[aeiouAEIOU]', '')\n\
    end", "    local text_without_vowels = text:gsub('[aeiouAEIOU]', '')\n    return\
    \ text_without_vowels\nend", "    if text == '' then\n        return ''\n    elseif\
    \ not text:find('[aeiouAEIOU]') then\n        return text\n    else\n        local\
    \ new_text = text:gsub('[aeiouAEIOU]', '')\n        return new_text\n    end\n\
    end", "    return text:gsub('[aeiou]', '')\nend", "\treturn text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "\ttext = string.gsub(text, '[aeiouAEIOU]', '')\n\treturn text\n\
    end", "  if not text or text == '' then\n    return ''\n  end\n  return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "  local vowels = {'a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U'}\n\
    \  local no_vowels = ''\n  local i = 1\n  local j = 1\n  for i = 1, string.len(text)\
    \ do\n    for j = 1, #vowels do\n      if vowels[j] == string.sub(text, i, i)\
    \ then\n        text = string.sub(text, 1, i - 1) .. string.sub(text, i + 1)\n\
    \        break\n      end\n    end\n  end\n  return text\nend", "    local res\
    \ = ''\n    for i = 1, #text do\n        local c = text:sub(i, i)\n        if\
    \ not_vowel(c) then\n            res = res .. c\n        end\n    end\n    return\
    \ res\nend", "    local vowels = \"aeiou\"\n    local chars = split(text, '')\n\
    \    local non_vowels = filter(chars, function(char)\n        for _, v in ipairs(vowels)\
    \ do\n            if char == v then\n                return false\n          \
    \  end\n        end\n        return true\n    end)\n    return table.concat(non_vowels)\n\
    end", "  return text:gsub('[aeiouAEIOU]', '')\nend", "\tlocal list = {}\n\tfor\
    \ word in string.gmatch(text, '%w+') do\n\t\ttable.insert(list, word)\n\tend\n\
    \tfor k,v in pairs(list) do\n\t\tlocal result = string.gsub(v, '[aeiou]', '')\n\
    \t\tlist[k] = result\n\tend\n\tlocal string = \"\"\n\tfor _, v in pairs(list)\
    \ do\n\t\tstring = string .. v\n\tend\n\treturn string\nend", "\treturn text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "\treturn text:gsub('[aeiou]', '')\nend", "    if type(text) ~= 'string'\
    \ then\n        error(\"argument must be a string\", 2)\n    end\n    return string.gsub(text,\
    \ \"[aeiouAEIOU]\", \"\")\nend", "    local result = {}\n    for i = 1, #text\
    \ do\n        local letter = text:sub(i, i)\n        if not vowels[letter] then\n\
    \            table.insert(result, letter)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local t = {}\n    for i=1, #text do\n        local char = text:sub(i,i)\n\
    \        if not string.find(char, '[aeiouAEIOU]') then\n            table.insert(t,\
    \ char)\n        end\n    end\n    return table.concat(t)\nend", "    return text:gsub('[aeiou]',\
    \ '')\nend", "    local output = ''\n    local vowels = {\n        ['a'] = 1,\n\
    \        ['A'] = 1,\n        ['e'] = 1,\n        ['E'] = 1,\n        ['i'] = 1,\n\
    \        ['I'] = 1,\n        ['o'] = 1,\n        ['O'] = 1,\n        ['u'] = 1,\n\
    \        ['U'] = 1,\n    }\n    for char in text:gmatch('.') do\n        if not\
    \ vowels[char] then\n            output = output .. char\n        end\n    end\n\
    \    return output\nend", "    if text == '' then\n        return ''\n    elseif\
    \ vowels[string.sub(text, 1, 1)] then\n        return remove_vowels(string.sub(text,\
    \ 2))\n    else\n        return string.sub(text, 1, 1) .. remove_vowels(string.sub(text,\
    \ 2))\n    end\nend", "    local letters = {a = 1, e = 1, i = 1, o = 1, u = 1,\
    \ A = 1, E = 1, I = 1, O = 1, U = 1}\n    local text = text:gsub('[aeiouAEIOU]',\
    \ '')\n    return text\nend", "    return text:gsub('a', ''):gsub('e', ''):gsub('i',\
    \ ''):gsub('o', ''):gsub('u', '')\nend", "    local result = ''\n    for i = 1,\
    \ #text do\n        local char = string.sub(text, i, i)\n        if not is_vowel(char)\
    \ then\n            result = result .. char\n        end\n    end\n    return\
    \ result\nend", "    local results = {}\n    for char in text:gmatch('.') do\n\
    \        if not(char:find('[aeiou]')) then\n            table.insert(results,\
    \ char)\n        end\n    end\n    return table.concat(results)\nend", "  return\
    \ text:gsub('[aeiou]', '')\nend", "  local new_text = ''\n  for i=1, #text do\n\
    \    if is_vowel(text:sub(i,i)) == false then\n      new_text = new_text .. text:sub(i,i)\n\
    \    end\n  end\n  return new_text\nend", "\treturn text:gsub('[aeiou]', '')\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\
    \    local no_vowels = {}\n    for i=1, #text do\n        local letter = text:sub(i,\
    \ i)\n        local found = false\n        for j=1, #vowels do\n            if\
    \ letter == vowels[j] then\n                found = true\n                break\n\
    \            end\n        end\n        if not found then\n            table.insert(no_vowels,\
    \ letter)\n        end\n    end\n    return table.concat(no_vowels)\nend", "\t\
    return (text:gsub('[aeiouAEIOU]', ''))\nend", "    return string.gsub(text, 'a',\
    \ '')\n        :gsub('e', '')\n        :gsub('i', '')\n        :gsub('o', '')\n\
    \        :gsub('u', '')\nend", "  return string.gsub(text, '[aeiouAEIOU]', '')\n\
    end", "  local result = ''\n  local vowels = 'aeiouAEIOU'\n  for c in text:gmatch('.')\
    \ do\n    if not vowels:find(c) then\n      result = result .. c\n    end\n  end\n\
    \  return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'}\n    local result = ''\n    for i = 1, string.len(text) do\n\
    \        if(not string_contains(vowels, string.sub(text, i, i))) then\n      \
    \      result = result .. string.sub(text, i, i)\n        end\n    end\n    return\
    \ result\nend", "    return (text:gsub('[aeiou]', ''))\nend", "  if string.len(text)\
    \ == 0 then\n    return ''\n  elseif string.find(text, '[AEIOUaeiou]') == nil\
    \ then\n    return text\n  else\n    local removed = string.sub(text, 1, string.find(text,\
    \ '[AEIOUaeiou]') - 1) .. string.sub(text, string.find(text, '[AEIOUaeiou]') +\
    \ 1)\n    return remove_vowels(removed)\n  end\nend", "    return string.gsub(text,\
    \ '[aeiouAEIOU]', '')\nend", "  local text = text:gsub('[AEIOUaeiou]', '')\n \
    \ return text\nend", "    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U' }\n    local rst = {}\n    for i = 1, #text do\n        local\
    \ char = text:sub(i, i)\n        if not (char == 'a' or char == 'e' or char ==\
    \ 'i' or char == 'o' or char == 'u' or char == 'A' or char == 'E' or char == 'I'\
    \ or char == 'O' or char == 'U') then\n            table.insert(rst, char)\n \
    \       end\n    end\n    return table.concat(rst)\nend", "    -- e.g. return\
    \ string.gsub(text, \"[aeiouAEIOU]\", \"\")\n    return text:gsub(\"[aeiouAEIOU]\"\
    , \"\")\nend", "    local out = ''\n    for c in text:gmatch('.') do\n       \
    \ if c:lower() ~= 'a' and c:lower() ~= 'e' and c:lower() ~= 'i' and c:lower()\
    \ ~= 'o' and c:lower() ~= 'u' then\n            out = out .. c\n        end\n\
    \    end\n    return out\nend", "    if text == '' then\n        return ''\n \
    \   elseif string.match(text,'[aeiouAEIOU]') == nil then\n        return text\n\
    \    else\n        return remove_vowels(string.gsub(text,'[aeiouAEIOU]',''))\n\
    \    end\nend", "\tif text == nil then\n\t\treturn ''\n\tend\n\ttext = text:gsub('[aeiouAEIOU]',\
    \ '')\n\treturn text\nend", "    text = text:gsub('a', '')\n    text = text:gsub('e',\
    \ '')\n    text = text:gsub('i', '')\n    text = text:gsub('o', '')\n    text\
    \ = text:gsub('u', '')\n    return text\nend", "    local vowel = '[aeiouAEIOU]'\n\
    \    return mw.ustring.gsub(text, vowel, '')\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "\treturn string.gsub(text, '[AEIOUaeiou]', '')\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local result = ''\n\
    \  for char in string.gmatch(text, '.') do\n    if not string.find(table.concat(vowels),\
    \ char) then\n      result = result .. char\n    end\n  end\n  return result\n\
    end", "  text = text:gsub('[aeiouAEIOU]', '')\n  return text\nend", "    return\
    \ text:gsub('[aeiou]', '')\nend", "    return text:gsub('[AEIOUaeiou]', '')\n\
    end", "    text = text:gsub('a', '')\n    text = text:gsub('e', '')\n    text\
    \ = text:gsub('i', '')\n    text = text:gsub('o', '')\n    text = text:gsub('u',\
    \ '')\n    return text\nend", "  return string.gsub(text, '[aeiouAEIOU]', '')\n\
    end", "  -- TODO: write code here\nend", "  return text:gsub('[aeiou]', '')\n\
    end", "    local result = ''\n    for i = 1, #text do\n        local letter =\
    \ text:sub(i, i)\n        if not is_vowel(letter) then\n            result = result\
    \ .. letter\n        end\n    end\n    return result\nend", "\treturn string.gsub(text,\
    \ \"[aeiouAEIOU]\", \"\")\nend", "  -- Sanity check\n  if not text then return\
    \ nil end\n  return text:gsub('[aeiou]', '')\nend", "    if #text == 0 then\n\
    \        return text\n    else\n        local next_text = string.sub(text, 2)\n\
    \        local ch = string.sub(text, 1, 1)\n        if string.find(ch, '[AEIOUaeiou]')\
    \ then\n            return remove_vowels(next_text)\n        else\n          \
    \  return ch .. remove_vowels(next_text)\n        end\n    end\nend", "  return\
    \ string.gsub(text,'[aeiouAEIOU]','')\nend", "    if type(text) ~= 'string' then\
    \ return text end\n    local new_text = ''\n    for i = 1, #text do\n        local\
    \ ch = text:sub(i, i)\n        if not VOWELS[ch] then\n            new_text =\
    \ new_text .. ch\n        end\n    end\n    return new_text\nend", "    if text:find('[aeiou]')\
    \ then\n        text = text:gsub('[aeiou]', '')\n        return remove_vowels(text)\n\
    \    else\n        return text\n    end\nend", "\treturn text:gsub('a', ''):gsub('e',\
    \ ''):gsub('i', ''):gsub('o', ''):gsub('u', ''):gsub('y', '')\nend", "  if text\
    \ == '' then\n    return ''\n  elseif not text:match('%a') then\n    return ''\n\
    \  elseif text:match('[aeiouAEIOU]') then\n    return remove_vowels(text:gsub('[aeiouAEIOU]',\
    \ ''))\n  else\n    return text\n  end\nend", "\tlocal result = text:gsub('[aeiou]',\
    \ '')\n\treturn result\nend", "  return string.gsub(text, \"[AEIOUaeiou]\", \"\
    \")\nend", "\t-- only lower case\n\treturn text:gsub('a', ''):gsub('e', ''):gsub('i',\
    \ ''):gsub('o', ''):gsub('u', '')\nend", "\treturn text:gsub('[aeiouAEIOU]', '')\n\
    end", "  local replaced_text = string.gsub(text, \"[aeiouAEIOU]\", \"\")\n  return\
    \ replaced_text\nend", "    return text:gsub('[aeiou]', '')\nend", "  text = text:gsub('[aeiouAEIOU]',\
    \ '')\n  return text\nend", "  --put your code here\nend", "  return string.gsub(text,\
    \ \"[aeiouAEIOU]\", \"\")\nend", "    local vowels = {'a', 'A', 'e', 'E', 'i',\
    \ 'I', 'o', 'O', 'u', 'U'}\n    local result = ''\n    for ch in text:gmatch('.')\
    \ do\n        if not lists.contains(vowels, ch) then\n            result = result\
    \ .. ch\n        end\n    end\n    return result\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local result = {}\n    for\
    \ letter in text:gmatch('.') do\n        if not has_value(vowels, letter) then\n\
    \            table.insert(result, letter)\n        end\n    end\n    return table.concat(result)\n\
    end", "\treturn text:gsub('[aeiouAEIOU]', '')\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "    return text:gsub('[aAeEiIoOuUyY]', '')\nend", "    local vowels\
    \ = 'aeiou'\n    return text:gsub('[aeiou]', '')\nend", "  text = text:gsub('[aeiouAEIOU]',\
    \ '')\n  return text\nend", "    return text:gsub('[aeiouAEIOU]', '')\nend", " \
    \   if text == '' then\n        return ''\n    elseif text:sub(1,1):match('[aeiouAEIOU]')\
    \ then\n        return remove_vowels(text:sub(2, -1))\n    else\n        return\
    \ text:sub(1,1) .. remove_vowels(text:sub(2, -1))\n    end\nend", "    local text\
    \ = text:gsub('[aeiouAEIOU]', '')\n    return text\nend", "    -- body\n    if\
    \ #text == 0 then\n        return ''\n    elseif is_vowel(text:sub(1,1)) then\n\
    \        return remove_vowels(text:sub(2))\n    else\n        return text:sub(1,1)\
    \ .. remove_vowels(text:sub(2))\n    end\nend", "    local ret = ''\n    local\
    \ vowel = 'aeiouAEIOU'\n    for i = 1, #text do\n        if not vowel:find(text:sub(i,\
    \ i)) then\n            ret = ret .. text:sub(i, i)\n        end\n    end\n  \
    \  return ret\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'}\n    local filtered_text = ''\n    for i = 1, #text do\n        local\
    \ character = text:sub(i, i)\n        if not contains(vowels, character) then\n\
    \            filtered_text = filtered_text .. character\n        end\n    end\n\
    \    return filtered_text\nend", "  return string.gsub(text, '[aeiou]', '')\n\
    end", "    return text:gsub('[aeiou]', '')\nend", "\treturn text:gsub('[aeiou]',\
    \ '')\nend", "    return text:gsub('[%a]', function(c)\n        if c:find('[aeiou]')\
    \ then\n            return ''\n        else\n            return c\n        end\n\
    \    end)\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'}\n  for i,v in ipairs(vowels) do\n    text = text:gsub(v, '')\n  end\n \
    \ return text\nend", "\treturn text:gsub('[aeiouAEIOU]', '')\nend", "    return\
    \ text:gsub('[AEIOUaeiou]', '')\nend", "  local text = text:gsub('a', '')\n  text\
    \ = text:gsub('e', '')\n  text = text:gsub('i', '')\n  text = text:gsub('o', '')\n\
    \  text = text:gsub('u', '')\n  text = text:gsub('A', '')\n  text = text:gsub('E',\
    \ '')\n  text = text:gsub('I', '')\n  text = text:gsub('O', '')\n  text = text:gsub('U',\
    \ '')\n  return text\nend", "    local iter = string.gmatch(text, \"[^aeiouAEIOU]\"\
    )\n    return table.concat({ iter() }, \"\")\nend", "    if text == '' then\n\
    \        return ''\n    elseif text:match('[aeiou]') == nil then\n        return\
    \ text\n    else\n        return remove_vowels(text:gsub('[aeiou]', ''))\n   \
    \ end\nend", "  return string.gsub(text, '[aeiouAEIOU]', '')\nend", "    return\
    \ text:gsub('[aeiou]', '')\nend", "    local result = ''\n    local vowels = {\
    \ 'a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U' }\n    for char in string.gmatch(text,\
    \ '.') do\n        if not luhn.in_array(vowels, char) then\n            result\
    \ = result .. char\n        end\n    end\n    return result\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    return text:gsub(\"\
    [aeiouAEIOU]\", '')\nend", "\ttext = text:gsub('[aeiouAEIOU]', '')\n\treturn text\n\
    end", "    if #text > 0 then\n        if is_vowel(text:sub(1, 1)) then\n     \
    \       return remove_vowels(text:sub(2))\n        else\n            return text:sub(1,\
    \ 1) .. remove_vowels(text:sub(2))\n        end\n    else\n        return ''\n\
    \    end\nend", "    return (text:gsub('[aeiou]', ''))\nend", "    return string.gsub(text,\
    \ '[AEIOUaeiou]', '')\nend", "    return (text:gsub('[aeiouAEIOU]', ''))\nend",
  "  if text == '' then\n    return ''\n  elseif (string.match(text, 'a') ~= nil)\
    \ then\n    return remove_vowels(string.gsub(text, 'a', ''))\n  elseif (string.match(text,\
    \ 'e') ~= nil) then\n    return remove_vowels(string.gsub(text, 'e', ''))\n  elseif\
    \ (string.match(text, 'i') ~= nil) then\n    return remove_vowels(string.gsub(text,\
    \ 'i', ''))\n  elseif (string.match(text, 'o') ~= nil) then\n    return remove_vowels(string.gsub(text,\
    \ 'o', ''))\n  elseif (string.match(text, 'u') ~= nil) then\n    return remove_vowels(string.gsub(text,\
    \ 'u', ''))\n  else\n    return text\n  end\nend", "  -- First, let's get string's\
    \ length\n  local len = text:len()\n  local result = ''", "  return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "    return string.gsub(text, '[aeiouAEIOU]', '')\nend", "  local\
    \ text_table = {}\n  for char in string.gmatch(text, \".\") do\n    if char ~=\
    \ 'a' and char ~= 'e' and char ~= 'i' and char ~= 'o' and char ~= 'u' then\n \
    \     table.insert(text_table, char)\n    end\n  end\n  return table.concat(text_table)\n\
    end", "  return text:gsub('[aeiouAEIOU]', '')\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "    local vowels = \"aeiouAEIOU\"\n    return text:gsub(\"[\"..vowels..\"\
    ]\", \"\")\nend", "    return text:gsub('[aeiou]', '')\nend", "    local vowels\
    \ = 'aeiouAEIOU'\n    return string.gsub(text, \"[\" .. vowels .. \"]\", \"\"\
    )\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\
    \    local result = ''\n    for c in text:gmatch('.') do\n        local has_vowel\
    \ = false\n        for _,v in ipairs(vowels) do\n            if c == v then\n\
    \                has_vowel = true\n                break\n            end\n  \
    \      end\n        if not has_vowel then\n            result = result .. c\n\
    \        end\n    end\n    return result\nend", "    local result = ''\n    for\
    \ i = 1, #text do\n        local c = text:sub(i, i)\n        if not is_vowel(c)\
    \ then\n            result = result .. c\n        end\n    end\n    return result\n\
    end", "    local text_without_vowels = ''\n    local chars = utf8.chars(text)\n\
    \    for _, char in ipairs(chars) do\n        if vowels[char] == nil then\n  \
    \          text_without_vowels = text_without_vowels .. char\n        end\n  \
    \  end\n    return text_without_vowels\nend", "    return text:gsub('[aeiou]',\
    \ '')\nend", "  return text:gsub('[aeiou]', '')\nend", "    if not text then return\
    \ nil end\n    return text:gsub('[aeiou]', '')\nend", "    local t = {}\n    for\
    \ v in text:gmatch('[^aeiouAEIOU]') do\n        t[#t+1] = v\n    end\n    return\
    \ table.concat(t)\nend", "    return (text:gsub('[aeiouAEIOU]', ''))\nend", "\t\
    local result = ''\n\tlocal vowels = 'aeiouAEIOU'\n\tfor i = 1, #text do\n\t\t\
    local c = text:sub(i, i)\n\t\tif vowels:find(c) == nil then\n\t\t\tresult = result\
    \ .. c\n\t\tend\n\tend\n\treturn result\nend", "    return\n        text:gsub('[aAiIuUeEoO]',\
    \ '')\nend", "  local rmv = {a='',e='',i='',o='',u='',A='',E='',I='',O='',U=''}\n\
    \  return text:gsub('[aeiouAEIOU]', rmv)\nend", "  local new_text = text:gsub('[AEIOUaeiou]',\
    \ '')\n  return new_text\nend", "    return text:gsub('[aeiou]', '')\nend", " \
    \ local vowels = 'aeiou'\n  local result = text\n  for i=1, #vowels do\n    result\
    \ = string.gsub(result, string.sub(vowels, i, i), '')\n  end\n  return result\n\
    end", "\treturn (text:gsub('[aeiouAEIOU]', ''))\nend", "  local i = 1\n  local\
    \ text_size = #text\n  local out = {}\n  while i <= text_size do\n    local l\
    \ = text:sub(i, i)\n    if not vowels[l] then\n      table.insert(out, l)\n  \
    \  end\n    i = i + 1\n  end\n  return table.concat(out)\nend", "    return text:gsub('[aeiou]',\
    \ '')\nend", "    local text = string.gsub(text, '%a', function(x)\n        if\
    \ string.find('aeiouAEIOU', x) then\n            return ''\n        else\n   \
    \         return x\n        end\n    end)\n    return text\nend", "  text = string.gsub(text,\
    \ \"[aeiouAEIOU]\", \"\")\n  return text\nend", "    return string.gsub(text,'[aeiouAEIOU]','')\n\
    end", "    if #text < 1 then\n        return ''\n    end\n    local function is_vowel(c)\n\
    \        return string.find('aeiou', c, 1, true) ~= nil\n    end\n    local vpos\
    \ = 0\n    for i = 1, #text do\n        if is_vowel(text:sub(i, i)) then\n   \
    \         vpos = i\n            break\n        end\n    end\n    if vpos == 0\
    \ then\n        return text\n    end\n    return text:sub(1, vpos - 1) .. remove_vowels(text:sub(vpos\
    \ + 1))\nend", "\tlocal out = \"\"\n\tfor i = 1, #text do\n\t\tlocal letter =\
    \ text:sub(i, i)\n\t\tif vowels[letter] ~= true then\n\t\t\tout = out .. letter\n\
    \t\tend\n\tend\n\treturn out\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
