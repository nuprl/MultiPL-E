name: HumanEval_145_order_by_points
language: lua
prompt: "-- Write a function which sorts the given table of integers\n-- in ascending\
  \ order according to the sum of their digits.\n-- Note: if there are several items\
  \ with similar sum of their digits,\n-- order them based on their index in original\
  \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
  \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
  \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
  \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
  \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11,\
  \ -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
  \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return nums\nend", "    local dict = {}\n    for _, v in ipairs(nums)\
    \ do\n        local sum = 0\n        local tmp = v\n        while tmp ~= 0 do\n\
    \            sum = sum + tmp % 10\n            tmp = math.floor(tmp / 10)\n  \
    \      end\n        dict[v] = sum\n    end\n    table.sort(nums, function(a, b)\n\
    \        if dict[a] == dict[b] then\n            return a < b\n        else\n\
    \            return dict[a] < dict[b]\n        end\n    end)\n    return nums\n\
    end", "  local function sum(num)\n    local s = 0\n    while num > 0 do\n    \
    \  s = s + num % 10\n      num = math.floor(num / 10)\n    end\n    return s\n\
    \  end\n  table.sort(nums, function(a, b)\n    return sum(a) < sum(b) or (sum(a)\
    \ == sum(b) and a < b)\n  end)\n  return nums\nend", "  local function _order_by_points(...)\n\
    \    local sums = {}\n    local nums = {...}\n    for i, v in ipairs(nums) do\n\
    \      sums[i] = sum_of_digits(v)\n    end\n    return _sort_by_index(sums, nums)\n\
    \  end\n  return _order_by_points(unpack(nums))\nend", "  if #nums <= 1 then\n\
    \    return nums\n  end\n  local pivot = nums[1]\n  local pivot_sum = sum_of_digits(pivot)\n\
    \  local less = {}\n  local more = {}\n  for _, num in ipairs(nums) do\n    if\
    \ num ~= pivot then\n      local num_sum = sum_of_digits(num)\n      if num_sum\
    \ < pivot_sum then\n        table.insert(less, num)\n      else\n        table.insert(more,\
    \ num)\n      end\n    end\n  end\n  local result = {}\n  for _, num in ipairs(order_by_points(less))\
    \ do\n    table.insert(result, num)\n  end\n  table.insert(result, pivot)\n  for\
    \ _, num in ipairs(order_by_points(more)) do\n    table.insert(result, num)\n\
    \  end\n  return result\nend", "    local function digit_sum(num)\n        local\
    \ sum = 0\n        while num > 0 do\n            sum = sum + num % 10\n      \
    \      num = math.floor(num / 10)\n        end\n        return sum\n    end",
  "\ttable.sort(nums, function(a, b)\n\t\tlocal a_sum = sum_of_digits(a)\n\t\tlocal\
    \ b_sum = sum_of_digits(b)\n\t\tif a_sum == b_sum then\n\t\t\treturn a < b\n\t\
    \telse\n\t\t\treturn a_sum < b_sum\n\t\tend\n\tend)\n\treturn nums\nend", "  \
    \  local sums = {}\n    for i = 1, #nums do\n        sums[i] = 0\n        local\
    \ num = nums[i]\n        while num ~= 0 do\n            sums[i] = sums[i] + num\
    \ % 10\n            num = math.floor(num / 10)\n        end\n    end\n    local\
    \ function compare(a, b)\n        return sums[a] < sums[b] or (sums[a] == sums[b]\
    \ and a < b)\n    end\n    local indexes = {}\n    for i = 1, #nums do\n     \
    \   indexes[i] = i\n    end\n    table.sort(indexes, compare)\n    local result\
    \ = {}\n    for i = 1, #indexes do\n        result[i] = nums[indexes[i]]\n   \
    \ end\n    return result\nend", "  -- TODO: Implement this\nend", "    -- TODO:\
    \ implement\nend", "    local point_sum = {}\n    for idx, num in ipairs(nums)\
    \ do\n        local sum = 0\n        for digit in string.gmatch(string.format(\"\
    %d\", math.abs(num)), \"%d\") do\n            sum = sum + tonumber(digit)\n  \
    \      end\n        point_sum[idx] = sum\n    end", "    local mapped = {}\n \
    \   for i, num in ipairs(nums) do\n        local sum = 0\n        while num ~=\
    \ 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n\
    \        end\n        table.insert(mapped, { num = nums[i], sum = sum, index =\
    \ i })\n    end\n    table.sort(mapped, function(a, b)\n        if a.sum == b.sum\
    \ then\n            return a.index < b.index\n        else\n            return\
    \ a.sum < b.sum\n        end\n    end)\n    local ordered = {}\n    for _, map\
    \ in ipairs(mapped) do\n        table.insert(ordered, map.num)\n    end\n    return\
    \ ordered\nend", "    local copy = nums\n    table.sort(copy,\n        function(a,\
    \ b)\n            local sum_a = 0\n            local sum_b = 0\n            for\
    \ digit in tostring(a):gmatch(\"%d\") do\n                sum_a = sum_a + tonumber(digit)\n\
    \            end\n            for digit in tostring(b):gmatch(\"%d\") do\n   \
    \             sum_b = sum_b + tonumber(digit)\n            end\n            if\
    \ sum_a == sum_b then\n                return a < b\n            else\n      \
    \          return sum_a < sum_b\n            end\n        end\n    )\n    return\
    \ copy\nend", "  return {}\nend", "    if #nums == 0 then\n        return {}\n\
    \    end\n    local nums_table = {}\n    for i, n in ipairs(nums) do\n       \
    \ nums_table[i] = { n, n % 10 + n // 10 }\n    end\n    table.sort(nums_table,\
    \ function(a, b)\n        if a[2] ~= b[2] then\n            return a[2] < b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    local\
    \ res = {}\n    for i, n in ipairs(nums_table) do\n        res[i] = n[1]\n   \
    \ end\n    return res\nend", "    local rt = {}\n    local n = #nums\n    for\
    \ i = 1, n do\n        local s = nums[i]\n        if rt[s] == nil then\n     \
    \       rt[s] = {}\n        end\n        table.insert(rt[s], i)\n    end\n   \
    \ local tbl = {}\n    for k, v in pairs(rt) do\n        table.insert(tbl, {k,\
    \ v})\n    end\n    table.sort(tbl, function(x, y)\n        local sx = sum_of_digits(x[1])\n\
    \        local sy = sum_of_digits(y[1])\n        if sx == sy then\n          \
    \  local nx = #x[2]\n            local ny = #y[2]\n            for i = 1, math.min(nx,\
    \ ny) do\n                if x[2][i] ~= y[2][i] then\n                    return\
    \ x[2][i] < y[2][i]\n                end\n            end\n            return\
    \ nx < ny\n        else\n            return sx < sy\n        end\n    end)\n \
    \   local rt = {}\n    for _, v in ipairs(tbl) do\n        for _, v2 in ipairs(v[2])\
    \ do\n            table.insert(rt, nums[v2])\n        end\n    end\n    return\
    \ rt\nend", "    local sums = {}\n    for i, num in ipairs(nums) do\n        sums[i]\
    \ = {sum = sum_of_digits(num), index = i}\n    end\n    table.sort(sums, function(a,\
    \ b)\n        if a.sum == b.sum then\n            return a.index < b.index\n \
    \       else\n            return a.sum < b.sum\n        end\n    end)\n    local\
    \ res = {}\n    for i, sum in ipairs(sums) do\n        res[i] = nums[sum.index]\n\
    \    end\n    return res\nend", "  if #nums == 0 then\n    return {}\n  end\n\
    \  local sorted = {}\n  for i, num in ipairs(nums) do\n    table.insert(sorted,\
    \ {num, i})\n  end\n  table.sort(sorted, function(a, b)\n    local sum_a = 0\n\
    \    local sum_b = 0\n    for _, digit in ipairs(get_digits(a[1])) do\n      sum_a\
    \ = sum_a + digit\n    end\n    for _, digit in ipairs(get_digits(b[1])) do\n\
    \      sum_b = sum_b + digit\n    end\n    if sum_a == sum_b then\n      return\
    \ a[2] < b[2]\n    end\n    return sum_a < sum_b\n  end)\n  local result = {}\n\
    \  for _, v in ipairs(sorted) do\n    table.insert(result, v[1])\n  end\n  return\
    \ result\nend", "    -- your code here\n    return {}\nend", end]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
