language: lua
name: HumanEval_12_longest
results:
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_string\
    \ = nil\n  local longest_length = 0\n  for _, s in ipairs(strings) do\n    if\
    \ #s > longest_length then\n      longest_string = s\n      longest_length = #s\n\
    \    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  --[[\n  We rely on the fact that a table is a sorted collection\
    \ and strings are ordered lexicographically.\n  Thus, the longest string must\
    \ be the last one in the input table. We iterate until the end, so\n  we can return\
    \ the first longest string in case there are multiple strings of the same length.\n\
    \  ]]--\n  for _, str in ipairs(strings) do\n    longest = str\n  end\n  return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mj0fsfk.lua:24:\
    \ expected: nil, actual: function: 0x9f2500\nstack traceback:\n\t/tmp/tmp6mj0fsfk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  assert(type(strings) == 'table')\n  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_string = strings[1]\n  for i, string in\
    \ ipairs(strings) do\n    if string:len() > longest_string:len() then\n      longest_string\
    \ = string\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_string = nil\n    local longest_length =\
    \ 0\n    for _, string in ipairs(strings) do\n        local length = utf8.len(string)\n\
    \        if length > longest_length then\n            longest_length = length\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max = 0\n    local longest = nil\n    for _,s in\
    \ ipairs(strings) do\n        if #s > max then\n            max = #s\n       \
    \     longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_string\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] > #longest_string\
    \ then\n      longest_string = strings[i]\n    end\n  end\n  return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local m = 0\n  local result = nil\n  for _, s in ipairs(strings)\
    \ do\n    if #s > m then\n      m = #s\n      result = s\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_string\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] > #longest_string\
    \ then\n      longest_string = strings[i]\n    end\n  end\n  return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_string\n    local longest_string_length\
    \ = 0\n    for i, s in ipairs(strings) do\n        if s:len() > longest_string_length\
    \ then\n            longest_string = s\n            longest_string_length = s:len()\n\
    \        end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local result = nil\n    local maxLen = 0\n    for _, s\
    \ in ipairs(strings) do\n        if string.len(s) > maxLen then\n            result\
    \ = s\n            maxLen = string.len(s)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  for _, s in ipairs(strings) do\n\
    \    if longest == nil or #s > #longest then\n      longest = s\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return None\n    end\n\
    \    local l = strings[1]\n    for i, e in ipairs(strings) do\n        if #e >\
    \ #l then\n            l = e\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_string = nil\n  local max_length = 0\n  for\
    \ _, str in ipairs(strings) do\n    if #str > max_length then\n      max_length\
    \ = #str\n      longest_string = str\n    end\n  end\n  return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if strings == nil or #strings == 0 then\n        return\
    \ nil\n    end\n    local longest = strings[1]\n    for _, str in ipairs(strings)\
    \ do\n        if #str > #longest then\n            longest = str\n        end\n\
    \    end\n    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest_idx = 1\n    for i = 2, #strings do\n        if #strings[i]\
    \ > #strings[longest_idx] then\n            longest_idx = i\n        end\n   \
    \ end\n    return strings[longest_idx]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest = strings[1]\n    for _, word in ipairs(strings) do\n      \
    \  if #word > #longest then\n            longest = word\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local max\
    \ = strings[1]\n  for _, s in ipairs(strings) do\n    if #s > #max then\n    \
    \  max = s\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings or #strings == 0 then\n        return nil\n\
    \    end\n    local ret = strings[1]\n    for _, s in ipairs(strings) do\n   \
    \     if #s > #ret then\n            ret = s\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max = {}\n    for _, v in ipairs(strings) do\n \
    \       if #v > #max then\n            max = v\n        end\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9ohd4hn.lua:22:\
    \ expected: nil, actual: {}\nstack traceback:\n\t/tmp/tmpt9ohd4hn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_string = nil\n    local longest_length =\
    \ 0\n    for _, s in ipairs(strings) do\n        if s:len() > longest_length then\n\
    \            longest_string = s\n            longest_length = s:len()\n      \
    \  end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return None\n    end\n\
    \    local longest_string = strings[1]\n    for _, string in ipairs(strings) do\n\
    \        if #string > #longest_string then\n            longest_string = string\n\
    \        end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for _, s in ipairs(strings) do\n    if #s > #longest then\n\
    \      longest = s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local max_len = 0\n  local max_str = nil\n  for _, str in\
    \ ipairs(strings) do\n    if str:len() > max_len then\n      max_len = str:len()\n\
    \      max_str = str\n    end\n  end\n  return max_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local ret = None\n    local maxlen = 0\n    for _, s in\
    \ ipairs(strings) do\n        if #s > maxlen then\n            ret = s\n     \
    \       maxlen = #s\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  --if #strings == 0 then return 'None' end\n  local longest\
    \ = strings[1]\n  for i, s in ipairs(strings) do\n    if #s > #longest then longest\
    \ = s end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local max_len = 0\n  local longest_string\n  for _, str\
    \ in ipairs(strings) do\n    if #str > max_len then\n      max_len = #str\n  \
    \    longest_string = str\n    end\n  end\n  return longest_string\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local l = strings[1]\n    for _, e in ipairs(strings) do\n        if #e >\
    \ #l then\n            l = e\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tlocal long = nil\n\tfor _, s in ipairs(strings) do\n\t\t\
    if long == nil or #s > #long then\n\t\t\tlong = s\n\t\tend\n\tend\n\treturn long\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max = 0\n    local max_s = nil\n    for _,s in ipairs(strings)\
    \ do\n        if string.len(s) > max then\n            max = string.len(s)\n \
    \           max_s = s\n        end\n    end\n    return max_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  assert(type(strings) == 'table')\n  if next(strings) ==\
    \ nil then\n    return nil\n  end\n  local result = next(strings)\n  for _, s\
    \ in pairs(strings) do\n    if #s > #result then\n      result = s\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpipxeie2h.lua:16:\
    \ attempt to get length of a number value (local 'result')\nstack traceback:\n\
    \t/tmp/tmpipxeie2h.lua:16: in local 'candidate'\n\t/tmp/tmpipxeie2h.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local len, longest_string\n    for _, string in ipairs(strings)\
    \ do\n        if not len or #string > len then\n            len = #string\n  \
    \          longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings then\n        return nil\n    end\n   \
    \ local longest = nil\n    for _, string in ipairs(strings) do\n        if not\
    \ longest or #string > #longest then\n            longest = string\n        end\n\
    \    end\n    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max_length = 0\n    local longest_string = nil\n\
    \    for _, s in ipairs(strings) do\n        if #s > max_length then\n       \
    \     max_length = #s\n            longest_string = s\n        end\n    end\n\
    \    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings then\n        return nil\n    end\n   \
    \ local max_len = 0\n    local longest_str = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > max_len then\n            max_len = #s\n            longest_str\
    \ = s\n        end\n    end\n    return longest_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local l = 0\n    local res = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > l then\n            l = #s\n            res = s\n      \
    \  end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local max\n  for k,v in pairs(strings) do\n    if not max\
    \ or #v > #max then\n      max = v\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local max_len = 0\n    local pos = 1\n    for i, s in ipairs(strings) do\n\
    \        if #s > max_len then\n            max_len = #s\n            pos = i\n\
    \        end\n    end\n    return strings[pos]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings or #strings == 0 then\n        return nil\n\
    \    end\n    local longest = strings[1]\n    for _, s in ipairs(strings) do\n\
    \        if #s > #longest then\n            longest = s\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local best = nil\n    local best_len = -1\n    for _,\
    \ word in ipairs(strings) do\n        local len = #word\n        if len > best_len\
    \ then\n            best = word\n            best_len = len\n        end\n   \
    \ end\n    return best\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  -- Sort them by descending length, then return the first\
    \ one\n  local strs = table.map(strings, function(s) return {s, #s} end)\n  table.sort(strs,\
    \ function(s1, s2) return s1[2] > s2[2] end)\n  if #strs == 0 then\n    return\
    \ nil\n  else\n    return strs[1][1]\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpinlnzdef.lua:11:\
    \ attempt to call a nil value (field 'map')\nstack traceback:\n\t/tmp/tmpinlnzdef.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpinlnzdef.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if type(strings) ~= 'table' then\n    error('Table of strings\
    \ expected', 2)\n  end\n  local longest_string = nil\n  local longest_length =\
    \ 0\n  for _, string in ipairs(strings) do\n    if type(string) ~= 'string' then\n\
    \      error('Table of strings expected', 2)\n    end\n    local length = string.len(string)\n\
    \    if length > longest_length then\n      longest_string = string\n      longest_length\
    \ = length\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_str\n\
    \  local longest_len = 0\n  for _, str in ipairs(strings) do\n    if #str > longest_len\
    \ then\n      longest_len = #str\n      longest_str = str\n    end\n  end\n  return\
    \ longest_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local max_length = 0\n    local result = strings[1]\n    for _, str in ipairs(strings)\
    \ do\n        if str:len() > max_length then\n            max_length = str:len()\n\
    \            result = str\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = None\n  for i, str in ipairs(strings) do\n\
    \    if longest == None or #str > #longest then\n      longest = str\n    end\n\
    \  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_len = 0\n  local longest_str\n  for _, str\
    \ in ipairs(strings) do\n    if #str > longest_len then\n      longest_len = #str\n\
    \      longest_str = str\n    end\n  end\n  return longest_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local max\
    \ = 0\n  local max_string = nil\n  for _, s in ipairs(strings) do\n    if #s >\
    \ max then\n      max = #s\n      max_string = s\n    end\n  end\n  return max_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_string = nil\n  local longest_len = 0\n  for\
    \ _, s in ipairs(strings) do\n    if s and s:len() > longest_len then\n      longest_string\
    \ = s\n      longest_len = s:len()\n    end\n  end\n  return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if table.getn(strings) == 0 then\n        return None\n\
    \    end\n    table.sort(strings, function(a, b) return string.len(a) > string.len(b)\
    \ end)\n    return strings[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr0eon264.lua:10:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpr0eon264.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpr0eon264.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest = None\n    for _, string in ipairs(strings)\
    \ do\n        if longest == None or #string > #longest then\n            longest\
    \ = string\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local max\n  for _, v in ipairs(strings) do\n    if not\
    \ max or #v > #max then\n      max = v\n    end\n  end\n  return max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local keys = invert(strings)\n    local lengths = sort(keys)\n\
    \    return keys[lengths[#lengths]]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaq25q5ot.lua:10:\
    \ attempt to call a nil value (global 'invert')\nstack traceback:\n\t/tmp/tmpaq25q5ot.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpaq25q5ot.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if not strings then return None end\n  local max = 1\n \
    \ local maxIndex = 1\n  for i, str in ipairs(strings) do\n    if str and #str\
    \ > max then\n      max = #str\n      maxIndex = i\n    end\n  end\n  return strings[maxIndex]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_string = \"\"\n  for _, s in ipairs(strings)\
    \ do\n    if #s > #longest_string then\n      longest_string = s\n    end\n  end\n\
    \  return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt01q3qjo.lua:22:\
    \ expected: nil, actual: \"\"\nstack traceback:\n\t/tmp/tmpt01q3qjo.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  assert(type(strings) == 'table')\n  local longest = None\n\
    \  for _,s in ipairs(strings) do\n    assert(type(s) == 'string')\n    if longest\
    \ == None or #s > #longest then\n      longest = s\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_string\n    local longest_string_length\
    \ = 0\n    for i, v in ipairs(strings) do\n        if v:len() > longest_string_length\
    \ then\n            longest_string = v\n            longest_string_length = v:len()\n\
    \        end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_str = None\n  for _, str in ipairs(strings)\
    \ do\n    if len(str) > len(longest_str) then\n      longest_str = str\n    end\n\
    \  end\n  return longest_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptefx0d3j.lua:12:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmptefx0d3j.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmptefx0d3j.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest = strings[1]\n    for _, str in ipairs(strings) do\n       \
    \ if #str > #longest then\n            longest = str\n        end\n    end\n \
    \   return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local max_len = 0\n  local max_len_string = nil\n  for _,\
    \ s in ipairs(strings) do\n    if s:len() > max_len then\n      max_len = s:len()\n\
    \      max_len_string = s\n    end\n  end\n  return max_len_string\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_len\
    \ = 0\n  local longest_str = nil\n  for _, s in ipairs(strings) do\n    if #s\
    \ > longest_len then\n      longest_len = #s\n      longest_str = s\n    end\n\
    \  end\n  return longest_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tlocal i, v\n\tlocal l = 0\n\tlocal maxs = nil\n\tfor i,\
    \ v in ipairs(strings) do\n\t\tif #v > l then\n\t\t\tl = #v\n\t\t\tmaxs = v\n\t\
    \tend\n\tend\n\treturn maxs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest = 'None'\n    for _, v in ipairs(strings)\
    \ do\n        if #v > #longest then\n            longest = v\n        end\n  \
    \  end\n    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbnrqa7k.lua:22:\
    \ expected: nil, actual: \"None\"\nstack traceback:\n\t/tmp/tmpfbnrqa7k.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest = ''\n    for _, s in ipairs(strings) do\n\
    \        if #s > #longest then\n            longest = s\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfw5ye34.lua:22:\
    \ expected: nil, actual: \"\"\nstack traceback:\n\t/tmp/tmpyfw5ye34.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if next(strings) == nil then\n        return nil\n   \
    \ end\n    local max = table.remove(strings, 1)\n    for _, s in ipairs(strings)\
    \ do\n        if #s > #max then\n            max = s\n        end\n    end\n \
    \   return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tlocal result = { }\n\tfor i, s in ipairs(strings) do\n\t\
    \tresult[#result + 1] = {s = s, i = i}\n\tend\n\ttable.sort(result, function(a,\
    \ b) return #a.s > #b.s end)\n\tif #result == 0 then\n\t\treturn nil\n\telse\n\
    \t\treturn result[1].s\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   table.sort(strings, function(a, b) return #a > #b end)\n    return strings[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local res = strings[1]\n    for _, str in ipairs(strings)\
    \ do\n        if #str > #res then\n            res = str\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return None\n  end\n  return\
    \ max_by(length, strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz6koaas8.lua:13:\
    \ attempt to call a nil value (global 'max_by')\nstack traceback:\n\t/tmp/tmpz6koaas8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpz6koaas8.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   return reduce(strings, function(max, s)\n        if max == nil or #s > #max\
    \ then\n            return s\n        else\n            return max\n        end\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5f3_k02.lua:13:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmp_5f3_k02.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_5f3_k02.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings then\n        return nil\n    end\n   \
    \ if #strings == 0 then\n        return nil\n    end\n    local longest = ''\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return None\n    end\n\
    \    local max_string = strings[1]\n    local max_len = #max_string\n    for i\
    \ = 2, #strings do\n        local current_string = strings[i]\n        local current_len\
    \ = #current_string\n        if current_len > max_len then\n            max_string\
    \ = current_string\n            max_len = current_len\n        end\n    end\n\
    \    return max_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local sorted\
    \ = table.sort(strings, function(a, b) return #a > #b end)\n  return sorted[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy2f_9lzt.lua:14:\
    \ attempt to index a nil value (local 'sorted')\nstack traceback:\n\t/tmp/tmpy2f_9lzt.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpy2f_9lzt.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tif not strings or not next(strings) then\n\t\treturn nil\n\
    \tend\n\treturn table.max(strings, function(a, b) return #a > #b end)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhw0p6_0.lua:13:\
    \ attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmpwhw0p6_0.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpwhw0p6_0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local lengths = {}\n  for _, s in ipairs(strings) do\n \
    \   table.insert(lengths, {length = s:len(), s = s})\n  end\n  table.sort(lengths,\
    \ function(a, b) return a.length > b.length end)\n  if #lengths == 0 then\n  \
    \  return nil\n  else\n    return lengths[1].s\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local length, longest\n    for _, s in ipairs(strings)\
    \ do\n        local l = #s\n        if not length or l > length then\n       \
    \     length = l\n            longest = s\n        end\n    end\n    return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    -- your code here\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wlsqp0c.lua:18:\
    \ expected: \"x\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9wlsqp0c.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_length = 0\n    local longest_string = None\n\
    \    for _, v in ipairs(strings) do\n        if #v > longest_length then\n   \
    \         longest_length = #v\n            longest_string = v\n        end\n \
    \   end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local len = 0\n    local ret = None\n    for _, s in ipairs(strings)\
    \ do\n        if #s > len then\n            len = #s\n            ret = s\n  \
    \      end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return None\n    end\n\
    \    local res = strings[1]\n    for _, s in ipairs(strings) do\n        if #s\
    \ > #res then\n            res = s\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest_string = strings[1]\n    for _, s in ipairs(strings) do\n  \
    \      if #s > #longest_string then\n            longest_string = s\n        end\n\
    \    end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest = strings[1]\n    for _, s in ipairs(strings) do\n        if\
    \ #s > #longest then\n            longest = s\n        end\n    end\n    return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local maxLen = 0\n    local ret\n    for _, v in ipairs(strings)\
    \ do\n        if #v > maxLen then\n            maxLen = #v\n            ret =\
    \ v\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_string\
    \ = strings[1]\n  for _, string in ipairs(strings) do\n    if #string > #longest_string\
    \ then\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local result\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] > #result then\n\
    \      result = strings[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tlocal best, best_len = nil, 0\n\tfor i, str in ipairs(strings)\
    \ do\n\t\tlocal len = str:len()\n\t\tif len > best_len then\n\t\t\tbest, best_len\
    \ = str, len\n\t\tend\n\tend\n\treturn best\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return None\n  end\n  local res\
    \ = strings[1]\n  for i=2,#strings do\n    if #strings[i] > #res then\n      res\
    \ = strings[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if not strings or #strings == 0 then\n    return None\n\
    \  end\n  local max_len = 0\n  local max_str = None\n  for _, str in ipairs(strings)\
    \ do\n    if str:len() > max_len then\n      max_len = str:len()\n      max_str\
    \ = str\n    end\n  end\n  return max_str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_str = nil\n    local longest_str_length\
    \ = -1\n    for _, str in ipairs(strings) do\n        if #str > longest_str_length\
    \ then\n            longest_str = str\n            longest_str_length = #str\n\
    \        end\n    end\n    return longest_str\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest_so_far = strings[1]\n    for _, v in ipairs(strings) do\n  \
    \      if #v > #longest_so_far then\n            longest_so_far = v\n        end\n\
    \    end\n    return longest_so_far\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tif #strings == 0 then\n\t\treturn nil\n\tend\n\t\n\tlocal\
    \ longestString = strings[1]\n\tfor i = 2, #strings do\n\t\tif #strings[i] > #longestString\
    \ then\n\t\t\tlongestString = strings[i]\n\t\tend\n\tend\n\t\n\treturn longestString\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if not strings then return end\n  local longest = table.remove(strings,\
    \ 1)\n  if not longest then return end\n  for _,string in ipairs(strings) do\n\
    \    if #string > #longest then\n      longest = string\n    end\n  end\n  return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local max = 0\n  local len = 0\n  local res = nil\n  for\
    \ _, s in ipairs(strings) do\n    len = #s\n    if len > max then\n      max =\
    \ len\n      res = s\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tlocal result = nil\n\tfor _, v in ipairs(strings) do\n\t\
    \tif result == nil or #v > #result then\n\t\t\tresult = v\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local max_length\
    \ = #strings[1]\n  local longest_str = strings[1]\n  for _, str in ipairs(strings)\
    \ do\n    if #str > max_length then\n      max_length = #str\n      longest_str\
    \ = str\n    end\n  end\n  return longest_str\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  assert(type(strings) == 'table')\n  if #strings == 0 then\n\
    \    return nil\n  end\n  local current_longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] > #current_longest then\n      current_longest = strings[i]\n\
    \    end\n  end\n  return current_longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if table.getn(strings) == 0 then\n    return nil\n  end\n\
    \  local max_string = strings[1]\n  for i, v in ipairs(strings) do\n    if v:len()\
    \ > max_string:len() then\n      max_string = v\n    end\n  end\n  return max_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4z8drpoq.lua:10:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmp4z8drpoq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp4z8drpoq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local result = nil\n    local longest_length = 0\n   \
    \ for _, string in ipairs(strings) do\n        local length = string.len(string)\n\
    \        if length > longest_length then\n            result = string\n      \
    \      longest_length = length\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings or #strings == 0 then\n        return nil\n\
    \    end\n    local max_length = 0\n    local longest_string = nil\n    for _,\
    \ s in ipairs(strings) do\n        if #s > max_length then\n            max_length\
    \ = #s\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_string\n    local longest_length = 0\n \
    \   for _, string in ipairs(strings) do\n        local string_length = string.len(string)\n\
    \        if string_length > longest_length then\n            longest_length =\
    \ string_length\n            longest_string = string\n        end\n    end\n \
    \   return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tif #strings == 0 then\n\t\treturn nil\n\tend\n\t\n\tlocal\
    \ longest_string = strings[1]\n\tfor i = 2, #strings do\n\t\tif #strings[i] >\
    \ #longest_string then\n\t\t\tlongest_string = strings[i]\n\t\tend\n\tend\n\t\n\
    \treturn longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local _,\
    \ max_key = array.max(strings, function(v) return #v end)\n  return strings[max_key]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2yxe2jlf.lua:13:\
    \ attempt to index a nil value (global 'array')\nstack traceback:\n\t/tmp/tmp2yxe2jlf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2yxe2jlf.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local max_len = #strings[1]\n    local max_string = strings[1]\n    for _,\
    \ s in ipairs(strings) do\n        if #s > max_len then\n            max_len =\
    \ #s\n            max_string = s\n        end\n    end\n    return max_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if not strings or #strings == 0 then\n    return None\n\
    \  end\n  local longest_string = strings[1]\n  for _, s in ipairs(strings) do\n\
    \    if s:len() > longest_string:len() then\n      longest_string = s\n    end\n\
    \  end\n  return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if not strings then return nil end\n  if #strings == 0 then\
    \ return nil end\n  local longest_str = strings[1]\n  for _, str in ipairs(strings)\
    \ do\n    if #str > #longest_str then\n      longest_str = str\n    end\n  end\n\
    \  return longest_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local len, maxlen = 0, 0\n    local longest_string = nil\n\
    \    for _, v in ipairs(strings) do\n        len = #v\n        if len > maxlen\
    \ then\n            maxlen = len\n            longest_string = v\n        end\n\
    \    end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_string = nil\n    local longest_string_length\
    \ = 0\n    for _,string in ipairs(strings) do\n        if #string > longest_string_length\
    \ then\n            longest_string = string\n            longest_string_length\
    \ = #string\n        end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    -- @function [parent=#longest]\n    -- @param strings#table\
    \ strings\n    -- @return #string\n    if #strings == 0 then\n        return None\n\
    \    end\n    local longest_string = strings[1]\n    for i = 2, #strings do\n\
    \        if #strings[i] > #longest_string then\n            longest_string = strings[i]\n\
    \        end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local result = strings[1]\n    for _, string in ipairs(strings) do\n     \
    \   if #string > #result then\n            result = string\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if table_is_empty(strings) then\n    return nil\n  end\n\
    \  local max_len = 0\n  local max_str = ''\n  for i = 1, #strings do\n    local\
    \ str = strings[i]\n    if #str > max_len then\n      max_len = #str\n      max_str\
    \ = str\n    end\n  end\n  return max_str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5uu5hmb.lua:10:\
    \ attempt to call a nil value (global 'table_is_empty')\nstack traceback:\n\t\
    /tmp/tmp_5uu5hmb.lua:10: in local 'candidate'\n\t/tmp/tmp_5uu5hmb.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local max_length\
    \ = 0\n  local best_index = 1\n  for i = 1, #strings do\n    local length = #strings[i]\n\
    \    if length > max_length then\n      max_length = length\n      best_index\
    \ = i\n    end\n  end\n  return strings[best_index]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tlocal max_length, max_key\n\tfor key, str in pairs(strings)\
    \ do\n\t\tlocal len = str:len()\n\t\tif not max_length or len > max_length then\n\
    \t\t\tmax_length = len\n\t\t\tmax_key = key\n\t\tend\n\tend\n\treturn max_key\
    \ and strings[max_key]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings then\n        return nil\n    end\n   \
    \ local maxlen = 0\n    local longest = nil\n    for _, s in ipairs(strings) do\n\
    \        if s:len() > maxlen then\n            maxlen = s:len()\n            longest\
    \ = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local max_length\
    \ = 0\n  local longest_string = nil\n  for _, str in ipairs(strings) do\n    if\
    \ #str > max_length then\n      max_length = #str\n      longest_string = str\n\
    \    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local result\
    \ = strings[1]\n  for _, s in ipairs(strings) do\n    if #s > #result then\n \
    \     result = s\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_i\
    \ = 1\n  for i = 2, #strings do\n    if #strings[i] > #strings[longest_i] then\n\
    \      longest_i = i\n    end\n  end\n  return strings[longest_i]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max_len, max_str\n    for _, str in ipairs(strings)\
    \ do\n        local len = #str\n        if len > (max_len or 0) then\n       \
    \     max_len = len\n            max_str = str\n        end\n    end\n    return\
    \ max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max = 0\n    local max_string = nil\n    for _,\
    \ str in ipairs(strings) do\n        if #str > max then\n            max = #str\n\
    \            max_string = str\n        end\n    end\n    return max_string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tlocal longest = nil\n\tfor _, str in ipairs(strings) do\n\
    \t\tif (longest == nil) or (str:len() > longest:len()) then\n\t\t\tlongest = str\n\
    \t\tend\n\tend\n\treturn longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local max_len = 0\n  local max_str\n  for _, str in ipairs(strings)\
    \ do\n    if str:len() > max_len then\n      max_len = str:len()\n      max_str\
    \ = str\n    end\n  end\n  return max_str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local ret = luacheck.utils.array_to_set(strings)\n   \
    \ local best_length = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdkzt_02f.lua:21: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings or not strings[1] then\n        return\
    \ nil\n    end\n    local longest = strings[1]\n    for _, s in ipairs(strings)\
    \ do\n        if #s > #longest then\n            longest = s\n        end\n  \
    \  end\n    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    assert(type(strings) == 'table')\n    if #strings == 0\
    \ then\n        return nil\n    end\n    local longest_string = strings[1]\n \
    \   for _, s in ipairs(strings) do\n        if #s > #longest_string then\n   \
    \         longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = ''\n  for _,s in ipairs(strings) do\n    if #s > #longest then\n      longest\
    \ = s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_string = nil\n  local longest_string_length\
    \ = 0\n  for _, str in ipairs(strings) do\n    if #str > longest_string_length\
    \ then\n      longest_string = str\n      longest_string_length = #str\n    end\n\
    \  end\n  return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings then\n        return None\n    end\n  \
    \  local longest = None\n    for _,s in ipairs(strings) do\n        if longest\
    \ == None or #s > #longest then\n            longest = s\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   table.sort(strings, function(a, b) return #a > #b end)\n    return strings[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if not strings or next(strings) == nil then\n    return\
    \ None\n  end\n  local max_length = 0\n  local longest_string = nil\n  for _,\
    \ s in ipairs(strings) do\n    if #s > max_length then\n      max_length = #s\n\
    \      longest_string = s\n    end\n  end\n  return longest_string\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local best = None\n  for i,s in ipairs(strings) do\n   \
    \ if type(s) == 'string' then\n      if best == None or s:len() > best:len() then\n\
    \        best = s\n      end\n    end\n  end\n  return best\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   return reduce(function(acc, s) return #s > #acc and s or acc end, strings)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4sxq21y7.lua:13:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmp4sxq21y7.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4sxq21y7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local out = strings[1]\n    for _, s in ipairs(strings) do\n        if #s\
    \ > #out then\n            out = s\n        end\n    end\n    return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local max_len = 0\n  local longest = nil\n  for _, s in\
    \ ipairs(strings) do\n    if #s > max_len then\n      max_len = #s\n      longest\
    \ = s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_str = nil\n    local longest_str_length\
    \ = 0\n    for _, v in ipairs(strings) do\n        if string.len(v) > longest_str_length\
    \ then\n            longest_str = v\n            longest_str_length = string.len(v)\n\
    \        end\n    end\n    return longest_str\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest = None\n    for i,s in ipairs(strings) do\n\
    \        if len(s) > len(longest) then\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4z1zwed1.lua:12:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp4z1zwed1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4z1zwed1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return None\n  end\n  local longest_str\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] > #longest_str then\n\
    \      longest_str = strings[i]\n    end\n  end\n  return longest_str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max, index = 0, 0\n    for i, str in ipairs(strings)\
    \ do\n        if str:len() > max then\n            max, index = str:len(), i\n\
    \        end\n    end\n    return index > 0 and strings[index] or nil\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_len = 0\n  local longest_str = nil\n  for\
    \ _, str in ipairs(strings) do\n    if str:len() > longest_len then\n      longest_len\
    \ = str:len()\n      longest_str = str\n    end\n  end\n  return longest_str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if table.getn(strings) == 0 then\n        return nil\n\
    \    end\n    table.sort(strings, function(a, b) return string.len(a) > string.len(b)\
    \ end)\n    return strings[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08hkre9c.lua:10:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmp08hkre9c.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp08hkre9c.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  for _, str in ipairs(strings) do\n\
    \    if longest == nil or #str > #longest then\n      longest = str\n    end\n\
    \  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max_len, max_str = 0, nil\n    for _, str in ipairs(strings)\
    \ do\n        if #str > max_len then\n            max_len, max_str = #str, str\n\
    \        end\n    end\n    return max_str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return\n    end\n    local\
    \ max = #strings[1]\n    local longest = strings[1]\n    for _, s in ipairs(strings)\
    \ do\n        if #s > max then\n            max = #s\n            longest = s\n\
    \        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest_string = ''\n    for _, string in ipairs(strings) do\n     \
    \   if #string > #longest_string then\n            longest_string = string\n \
    \       end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_str\
    \ = strings[1]\n  for _, str in ipairs(strings) do\n    if #str > #longest_str\
    \ then\n      longest_str = str\n    end\n  end\n  return longest_str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not next(strings) then\n        return None\n    end\n\
    \    local best = strings[1]\n    for _, s in ipairs(strings) do\n        if s:len()\
    \ > best:len() then\n            best = s\n        end\n    end\n    return best\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local res = None\n    for _, s in ipairs(strings) do\n\
    \        if not res or #s > #res then\n            res = s\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  return head(sort(strings,\
    \ function(x, y) return #x > #y end))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphylu3595.lua:13:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmphylu3595.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphylu3595.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local max_length = 0\n    local max_string = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > max_length then\n            max_length = #s\n         \
    \   max_string = s\n        end\n    end\n    return max_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tlocal max = 0\n\tlocal max_index = nil\n\tfor i, s in ipairs(strings)\
    \ do\n\t\tif max < #s then\n\t\t\tmax = #s\n\t\t\tmax_index = i\n\t\tend\n\tend\n\
    \treturn max_index and strings[max_index]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max = nil\n    for i, s in ipairs(strings) do\n\
    \        if (max == nil) or (s:len() > max:len()) then\n            max = s\n\
    \        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return None\n    end\n\
    \    local max_str = strings[1]\n    local max_len = #max_str\n    for _, str\
    \ in ipairs(strings) do\n        if #str > max_len then\n            max_str =\
    \ str\n            max_len = #str\n        end\n    end\n    return max_str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings or #strings == 0 then\n        return nil\n\
    \    end\n    local max = ''\n    for _, s in ipairs(strings) do\n        if #s\
    \ > #max then\n            max = s\n        end\n    end\n    return max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longests = {strings[1]}\n    local length = #strings[1]\n    for i =\
    \ 2, #strings do\n        if #strings[i] > length then\n            longests =\
    \ {strings[i]}\n            length = #strings[i]\n        elseif #strings[i] ==\
    \ length then\n            longests[#longests + 1] = strings[i]\n        end\n\
    \    end\n    return longests[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_word\n    local max_length = 0\n    for\
    \ _, word in ipairs(strings) do\n        if max_length < #word then\n        \
    \    max_length = #word\n            longest_word = word\n        end\n    end\n\
    \    return longest_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return None\n    end\n\
    \    table.sort(strings, function(a, b) return #a > #b end)\n    return strings[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local result = nil\n  for _, v in ipairs(strings) do\n \
    \   if not result or string.len(v) > string.len(result) then\n      result = v\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local result = ''\n  for _, str in ipairs(strings) do\n\
    \    if #str > #result then\n      result = str\n    end\n  end\n  return result\
    \ == '' and nil or result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkpkjwrj.lua:22:\
    \ expected: nil, actual: \"\"\nstack traceback:\n\t/tmp/tmpmkpkjwrj.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest_length = 0\n    local longest_string = strings[1]\n    for _,\
    \ v in ipairs(strings) do\n        if string.len(v) > longest_length then\n  \
    \          longest_length = string.len(v)\n            longest_string = v\n  \
    \      end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local maxlen = 0\n    local max_candidate = nil\n    for\
    \ _, s in ipairs(strings) do\n        if #s > maxlen then\n            maxlen\
    \ = #s\n            max_candidate = s\n        end\n    end\n    return max_candidate\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then\n    return nil\n  end\n  local\
    \ longest_string = next(strings)\n  for string in pairs(strings) do\n    if string:len()\
    \ > longest_string:len() then\n      longest_string = string\n    end\n  end\n\
    \  return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzdzvhba4.lua:15:\
    \ attempt to index a number value (local 'string')\nstack traceback:\n\t/tmp/tmpzdzvhba4.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpzdzvhba4.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return None\n    end\n\
    \    local max_string = strings[1]\n    local max_string_len = #max_string\n \
    \   for i = 2, #strings do\n        local string = strings[i]\n        local string_len\
    \ = #string\n        if string_len > max_string_len then\n            max_string\
    \ = string\n            max_string_len = string_len\n        end\n    end\n  \
    \  return max_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return None\n  end\n  local result\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] > #result then\n\
    \      result = strings[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max_length = 0\n    local longest_string\n    for\
    \ _, v in ipairs(strings) do\n        if #v > max_length then\n            max_length\
    \ = #v\n            longest_string = v\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_string = nil\n    local max_length = 0\n\
    \    for _, string in ipairs(strings) do\n        if #string > max_length then\n\
    \            max_length = #string\n            longest_string = string\n     \
    \   end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return None\n  end\n  local best\n\
    \  local best_len = 0\n  for i = 1, #strings do\n    local str = strings[i]\n\
    \    local len = string.len(str)\n    if len > best_len then\n      best = str\n\
    \      best_len = len\n    end\n  end\n  return best\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_length, longest_string = 0, None\n  for _,\
    \ string in ipairs(strings) do\n    if #string > longest_length then\n      longest_length,\
    \ longest_string = #string, string\n    end\n  end\n  return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  return foldl(function(s1,\
    \ s2)\n    if #s1 > #s2 then\n      return s1\n    else\n      return s2\n   \
    \ end\n  end, strings[1], strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqzvh2wpc.lua:13:\
    \ attempt to call a nil value (global 'foldl')\nstack traceback:\n\t/tmp/tmpqzvh2wpc.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpqzvh2wpc.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for _, str in ipairs(strings) do\n    if #str > #longest then\n\
    \      longest = str\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   return reduce(strings, function(acc, val)\n        if val:len() > acc:len()\
    \ then\n            return val\n        else\n            return acc\n       \
    \ end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbhrjhsi3.lua:13:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmpbhrjhsi3.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbhrjhsi3.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_string = nil\n  local longest_string_length\
    \ = 0\n  for _, str in ipairs(strings) do\n    if str:len() > longest_string_length\
    \ then\n      longest_string = str\n      longest_string_length = str:len()\n\
    \    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tlocal longest, len = None, 0\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif #str > len then\n\t\t\tlongest, len = str, #str\n\t\tend\n\tend\n\
    \treturn longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest_string = strings[1]\n    for i = 2, #strings do\n        if\
    \ #strings[i] > #longest_string then\n            longest_string = strings[i]\n\
    \        end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local idx, maxlen = nil, 0\n  for i, str in ipairs(strings)\
    \ do\n    if str:len() > maxlen then\n      idx, maxlen = i, str:len()\n    end\n\
    \  end\n  return idx and strings[idx]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max_length = -1\n    local max_string = nil\n  \
    \  for _, v in ipairs(strings) do\n        if v:len() > max_length then\n    \
    \        max_length = v:len()\n            max_string = v\n        end\n    end\n\
    \    return max_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n\tif not strings or #strings == 0 then\n\t\treturn nil\n\t\
    end\n\tlocal s = ''\n\tfor _,v in ipairs(strings) do\n\t\tif #v > #s then\n\t\t\
    \ts = v\n\t\tend\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest_string = strings[1]\n    for i = 2, #strings do\n        if\
    \ #strings[i] > #longest_string then\n            longest_string = strings[i]\n\
    \        end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if not strings then\n        return nil\n    end\n   \
    \ local max_len = -1\n    local longest_str = nil\n    for _,str in ipairs(strings)\
    \ do\n        if str and #str > max_len then\n            max_len = #str\n   \
    \         longest_str = str\n        end\n    end\n    return longest_str\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if is_empty(strings) then\n        return NONE\n    end\n\
    \    local max_len = 0\n    local longest_string = NONE\n    for _, value in ipairs(strings)\
    \ do\n        if value:len() > max_len then\n            max_len = value:len()\n\
    \            longest_string = value\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5hmrct2t.lua:10:\
    \ attempt to call a nil value (global 'is_empty')\nstack traceback:\n\t/tmp/tmp5hmrct2t.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5hmrct2t.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local l = 0\n    local longest_str = nil\n    for i, s\
    \ in ipairs(strings) do\n        if #s > l then\n            l = #s\n        \
    \    longest_str = s\n        end\n    end\n    return longest_str\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max_size = 0\n    local max_size_str = None\n  \
    \  for _, s in ipairs(strings) do\n        if #s > max_size then\n           \
    \ max_size = #s\n            max_size_str = s\n        end\n    end\n    return\
    \ max_size_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_ = strings[1]\n    local longest_len = longest_\
    \ and #longest_ or 0\n    for i = 2, #strings do\n        local len = #strings[i]\n\
    \        if len > longest_len then\n            longest_ = strings[i]\n      \
    \      longest_len = len\n        end\n    end\n    return longest_\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_str = nil\n  local longest_str_len = 0\n \
    \ for _,str in ipairs(strings) do\n    if str:len() > longest_str_len then\n \
    \     longest_str = str\n      longest_str_len = str:len()\n    end\n  end\n \
    \ return longest_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max_length = 0\n    local best_string\n    for _,\
    \ str in ipairs(strings) do\n        if #str > max_length then\n            max_length\
    \ = #str\n            best_string = str\n        end\n    end\n    return best_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local max = 0\n    local ret = nil\n    for _, v in ipairs(strings)\
    \ do\n        if v:len() > max then\n            max = v:len()\n            ret\
    \ = v\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for _, string in ipairs(strings) do\n    if #string > #longest\
    \ then\n      longest = string\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings < 1 then\n    return nil\n  end\n  local longest_len\
    \ = #strings[1]\n  local longest_index = 1\n  for i, word in ipairs(strings) do\n\
    \    if #word > longest_len then\n      longest_len = #word\n      longest_index\
    \ = i\n    end\n  end\n  return strings[longest_index]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_string = nil\n  local max_length = 0\n  for\
    \ _, string in ipairs(strings) do\n    if #string > max_length then\n      max_length\
    \ = #string\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local l = 0\n  local longest = nil\n  for _, s in ipairs(strings)\
    \ do\n    if #s > l then\n      l = #s\n      longest = s\n    end\n  end\n  return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local ret = nil\n  local max_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if string.len(s) > max_length then\n      ret = s\n      max_length\
    \ = string.len(s)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  for _, s in ipairs(strings) do\n\
    \    if longest == nil or #s > #longest then\n      longest = s\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local result = nil\n  for i,v in ipairs(strings) do\n  \
    \  if result == nil or string.len(v) > string.len(result) then\n      result =\
    \ v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for _, v in ipairs(strings) do\n    if v:len() > longest:len()\
    \ then\n      longest = v\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if table.is_empty(strings) then\n        return None\n\
    \    end\n    local longest = strings[1]\n    for i = 2, #strings do\n       \
    \ if #strings[i] > #longest then\n            longest = strings[i]\n        end\n\
    \    end\n    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6tqm3oul.lua:10:\
    \ attempt to call a nil value (field 'is_empty')\nstack traceback:\n\t/tmp/tmp6tqm3oul.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp6tqm3oul.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_string\
    \ = strings[1]\n  for _,string in ipairs(strings) do\n    if #string > #longest_string\
    \ then\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local sorted = {}\n  for _, s in ipairs(strings) do\n  \
    \  if type(s) == 'string' then\n      sorted[#sorted + 1] = s\n    end\n  end\n\
    \  table.sort(sorted, function(a, b) return #a > #b end)\n  return sorted[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return None\n  end\n  local maxLen\
    \ = 0\n  local max = None\n  for i, s in ipairs(strings) do\n    if #s > maxLen\
    \ then\n      maxLen = #s\n      max = s\n    end\n  end\n  return max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest = \"\"\n    for _,s in ipairs(strings) do\n\
    \        if (s:len() > longest:len()) then\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxjsn6lm.lua:22:\
    \ expected: nil, actual: \"\"\nstack traceback:\n\t/tmp/tmppxjsn6lm.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if is_empty(strings) then\n        return nil\n    end\n\
    \    return nsort(strings, 'length')[1]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_t8gi974.lua:10:\
    \ attempt to call a nil value (global 'is_empty')\nstack traceback:\n\t/tmp/tmp_t8gi974.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_t8gi974.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest = nil\n    for _, s in ipairs(strings) do\n\
    \        if (not longest) or (#s > #longest) then\n            longest = s\n \
    \       end\n    end\n    return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = #strings > 0 and strings[1] or nil\n  for\
    \ i = 2, #strings do\n    if #strings[i] > #longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_string = nil\n    local longest_length =\
    \ 0\n    for _, string in ipairs(strings) do\n        local length = string.len(string)\n\
    \        if length > longest_length then\n            longest_length = length\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local longest = strings[1]\n    for _, str in ipairs(strings) do\n       \
    \ if #str > #longest then\n            longest = str\n        end\n    end\n \
    \   return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    if #strings == 0 then\n        return nil\n    end\n \
    \   local max_length = #strings[1]\n    local max_idx = 1\n    for i = 2, #strings\
    \ do\n        if #strings[i] > max_length then\n            max_length = #strings[i]\n\
    \            max_idx = i\n        end\n    end\n    return strings[max_idx]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
