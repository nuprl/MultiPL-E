name: HumanEval_100_make_a_pile
language: lua
prompt: "-- Given a positive integer n, you have to make a pile of n levels of stones.\n\
  -- The first level has n stones.\n-- The number of stones in the next level is:\n\
  -- - the next odd number if n is odd.\n-- - the next even number if n is even.\n\
  -- Return the number of stones in each level in a table, where element at index\n\
  -- i represents the number of stones in the level (i+1).\n-- Examples:\n-- >>> make_a_pile(3)\n\
  -- {3, 5, 7}\nlocal function make_a_pile(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n\
  \    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
  \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
  \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
  \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local pile = {}\n    local i = 1\n    while n > 0 do\n        pile[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n     \
    \       n = n + 2\n        end\n        i = i + 1\n    end\n    return pile\n\
    end", "  local t = {}\n  while n > 0 do\n    t[#t+1] = n\n    n = n % 2 == 0 and\
    \ n + 1 or n + 2\n  end\n  return t\nend", "  local t = {}\n  for i = 1, n do\n\
    \    table.insert(t, ((i-1)*2)+n)\n  end\n  return t\nend", "  local t = {}\n\
    \  for i = 1, n do\n    t[i] = (2 * i - 1) * n\n  end\n  return t\nend", "  local\
    \ result = {}\n  local current = n\n  for i = 1, n do\n    result[i] = current\n\
    \    if current % 2 == 0 then\n      current = current + 1\n    else\n      current\
    \ = current + 2\n    end\n  end\n  return result\nend", "  local r = {}\n  while\
    \ n > 0 do\n    r[#r+1] = n\n    n = n + (n % 2 == 0 and 2 or 1)\n  end\n  return\
    \ r\nend", "    local t = {}\n    for i = 1, n do\n        t[i] = (i * 2) - 1\n\
    \    end\n    return t\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = n\n    if (n % 2 == 0) then\n      n = n + 1\n    else\n      n = n + 2\n\
    \    end\n  end\n  return pile\nend", "    local t = {}\n    while n ~= 0 do\n\
    \        t[#t+1] = n\n        if n % 2 == 0 then\n            n = n / 2\n    \
    \    else\n            n = (n - 1) / 2\n        end\n    end\n    return t\nend",
  "  local pile = {}\n  local i = 1\n  while n > 0 do\n    pile[i] = n\n    if n %\
    \ 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n    i = i\
    \ + 1\n  end\n  return pile\nend", "    local pile = {}\n    for i = 1, n do\n\
    \        pile[i] = n + 2 * i - 1\n    end\n    return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    table.insert(pile, 2 * i - 1)\n  end\n  return\
    \ pile\nend", "    local pile = {}\n    for i = 1, n do\n        table.insert(pile,\
    \ i * 2 - 1)\n    end\n    return pile\nend", "  if n < 1 then\n    return nil\n\
    \  end\n  local result = {}\n  for i = 0, n-1 do\n    table.insert(result, n+i*2)\n\
    \  end\n  return result\nend", "  local res = {}\n  while n >= 1 do\n    res[#res+1]\
    \ = n\n    n = (n % 2 == 0) and (n + 1) or (n + 2)\n  end\n  return res\nend",
  "  local stones = {n}\n  while n > 1 do\n    n = n + ((n % 2 == 0) and 1 or 2)\n\
    \    table.insert(stones, n)\n  end\n  return stones\nend", "    -- implement\
    \ your solution here\nend", "    local t = {}\n    while n > 0 do\n        t[#t+1]\
    \ = n\n        if n % 2 == 0 then\n            n = n - 1\n        else\n     \
    \       n = n - 2\n        end\n    end\n    return t\nend", "    local res =\
    \ {}\n    for i = 1, n do\n        res[i] = n + 2 * i - 1\n    end\n    return\
    \ res\nend", "    local t = {}\n    for i = 1, n do\n        if i == 1 then\n\
    \            t[i] = n\n        elseif (t[i-1] % 2) == 0 then\n            t[i]\
    \ = t[i-1] + 1\n        else\n            t[i] = t[i-1] + 2\n        end\n   \
    \ end\n    return t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
