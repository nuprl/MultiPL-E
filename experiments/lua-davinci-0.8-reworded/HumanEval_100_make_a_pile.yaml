name: HumanEval_100_make_a_pile
language: lua
prompt: "-- Given a positive integer n, you have to make a pile of n levels of stones.\n\
  -- The first level has n stones.\n-- The number of stones in the next level is:\n\
  -- - the next odd number if n is odd.\n-- - the next even number if n is even.\n\
  -- Return the number of stones in each level in a table, where element at index\n\
  -- i represents the number of stones in the level (i+1).\n-- Examples:\n-- >>> make_a_pile(3)\n\
  -- {3, 5, 7}\nlocal function make_a_pile(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n\
  \    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
  \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
  \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
  \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local pile = {}\n    local i = 1\n    while n > 0 do\n        pile[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n     \
    \       n = n + 2\n        end\n        i = i + 1\n    end\n    return pile\n\
    end", "  local t = {}\n  while n > 0 do\n    t[#t+1] = n\n    n = n % 2 == 0 and\
    \ n + 1 or n + 2\n  end\n  return t\nend", "  local t = {}\n  for i = 1, n do\n\
    \    table.insert(t, ((i-1)*2)+n)\n  end\n  return t\nend", "  local t = {}\n\
    \  for i = 1, n do\n    t[i] = (2 * i - 1) * n\n  end\n  return t\nend", "  local\
    \ result = {}\n  local current = n\n  for i = 1, n do\n    result[i] = current\n\
    \    if current % 2 == 0 then\n      current = current + 1\n    else\n      current\
    \ = current + 2\n    end\n  end\n  return result\nend", "  local r = {}\n  while\
    \ n > 0 do\n    r[#r+1] = n\n    n = n + (n % 2 == 0 and 2 or 1)\n  end\n  return\
    \ r\nend", "    local t = {}\n    for i = 1, n do\n        t[i] = (i * 2) - 1\n\
    \    end\n    return t\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = n\n    if (n % 2 == 0) then\n      n = n + 1\n    else\n      n = n + 2\n\
    \    end\n  end\n  return pile\nend", "    local t = {}\n    while n ~= 0 do\n\
    \        t[#t+1] = n\n        if n % 2 == 0 then\n            n = n / 2\n    \
    \    else\n            n = (n - 1) / 2\n        end\n    end\n    return t\nend",
  "  local pile = {}\n  local i = 1\n  while n > 0 do\n    pile[i] = n\n    if n %\
    \ 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n    i = i\
    \ + 1\n  end\n  return pile\nend", "    local pile = {}\n    for i = 1, n do\n\
    \        pile[i] = n + 2 * i - 1\n    end\n    return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    table.insert(pile, 2 * i - 1)\n  end\n  return\
    \ pile\nend", "    local pile = {}\n    for i = 1, n do\n        table.insert(pile,\
    \ i * 2 - 1)\n    end\n    return pile\nend", "  if n < 1 then\n    return nil\n\
    \  end\n  local result = {}\n  for i = 0, n-1 do\n    table.insert(result, n+i*2)\n\
    \  end\n  return result\nend", "  local res = {}\n  while n >= 1 do\n    res[#res+1]\
    \ = n\n    n = (n % 2 == 0) and (n + 1) or (n + 2)\n  end\n  return res\nend",
  "  local stones = {n}\n  while n > 1 do\n    n = n + ((n % 2 == 0) and 1 or 2)\n\
    \    table.insert(stones, n)\n  end\n  return stones\nend", "    -- implement\
    \ your solution here\nend", "    local t = {}\n    while n > 0 do\n        t[#t+1]\
    \ = n\n        if n % 2 == 0 then\n            n = n - 1\n        else\n     \
    \       n = n - 2\n        end\n    end\n    return t\nend", "    local res =\
    \ {}\n    for i = 1, n do\n        res[i] = n + 2 * i - 1\n    end\n    return\
    \ res\nend", "    local t = {}\n    for i = 1, n do\n        if i == 1 then\n\
    \            t[i] = n\n        elseif (t[i-1] % 2) == 0 then\n            t[i]\
    \ = t[i-1] + 1\n        else\n            t[i] = t[i-1] + 2\n        end\n   \
    \ end\n    return t\nend", "    local pile = {}\n    local function iter(n)\n\
    \        pile[#pile+1] = n\n        if n > 1 then\n            if n % 2 == 0 then\n\
    \                iter(n+1)\n            else\n                iter(n+2)\n    \
    \        end\n        end\n    end\n    iter(n)\n    return pile\nend", "  --\
    \ body\nend", "  local pile = {}\n  pile[1] = n\n  while n ~= 1 do\n    if n %\
    \ 2 == 0 then\n      n = n / 2\n    else\n      n = (n - 1) / 2\n    end\n   \
    \ table.insert(pile, n)\n  end\n  return pile\nend", "    local t = {}\n    for\
    \ i = 1, n do\n        t[i] = n + 2 * i - 1\n    end\n    return t\nend", "  local\
    \ res = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      n = n + 1\n    else\n\
    \      n = n + 2\n    end\n    table.insert(res, n)\n  end\n  return res\nend",
  "    local t = {}\n    for i = 1, n do\n        t[i] = i * 2 - 1\n    end\n    return\
    \ t\nend", "    local result = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            table.insert(result, n + i)\n        else\n            table.insert(result,\
    \ n + i - 1)\n        end\n    end\n    return result\nend", "  local pile = {}\n\
    \  local stones = n\n  while stones > 0 do\n    table.insert(pile, stones)\n \
    \   stones = stones % 2 == 0 and stones + 1 or stones + 2\n  end\n  return pile\n\
    end", "  local pile = {}\n  local last_stone = n\n  for level = 1, n do\n    pile[level]\
    \ = last_stone\n    last_stone = last_stone % 2 == 0 and last_stone + 2 or last_stone\
    \ + 1\n  end\n  return pile\nend", "    assert(n > 0)\n    if n == 1 then\n  \
    \      return {1}\n    end\n    if n % 2 == 0 then\n        return make_a_pile(n\
    \ - 1):extend{n + 1}\n    else\n        return make_a_pile(n - 1):extend{n + 2}\n\
    \    end\nend", "    local pile = {}\n    for i = 1, n do\n        pile[i] = n\
    \ + 2 * i - 1\n    end\n    return pile\nend", "  local res = {}\n  for i = n,\
    \ 1, -1 do\n    res[n - i + 1] = i\n    if (i % 2 == 0) then\n      i = i - 1\n\
    \    end\n  end\n  return res\nend", "  local values = {}\n  for i = 1, n do\n\
    \    if i % 2 == 0 then\n      table.insert(values, i + 1)\n    else\n      table.insert(values,\
    \ i)\n    end\n  end\n  return values\nend", "  local t = {}\n  for i = 1, n do\n\
    \    t[i] = n + 2 * i - 1\n  end\n  return t\nend", "  local result = {}\n  local\
    \ i = 1\n  while i <= n do\n    if n%2 == 0 then\n      table.insert(result, n)\n\
    \      n = n + 1\n    else\n      table.insert(result, n)\n      n = n + 2\n \
    \   end\n    i = i + 1\n  end\n  return result\nend", "    local l = {n}\n   \
    \ while n ~= 1 do\n        if n % 2 == 0 then\n            n = n / 2\n       \
    \ else\n            n = (n + 1) / 2\n        end\n        table.insert(l, n)\n\
    \    end\n    return l\nend", "    local result = {}\n    for level = 1, n do\n\
    \        local num_stones = n + 2 * (level - 1)\n        if n % 2 == 0 then\n\
    \            num_stones = num_stones + 1\n        end\n        table.insert(result,\
    \ num_stones)\n    end\n    return result\nend", "  local ret = {}\n  for i =\
    \ 1, n do\n    if i % 2 == 1 then\n      ret[i] = n + (i + 1) * 2\n    else\n\
    \      ret[i] = n + (i + 1) * 2 - 1\n    end\n  end\n  return ret\nend", "   \
    \ local t = {}\n    for i = 1, n do\n        table.insert(t, n + 2 * i - 1)\n\
    \    end\n    return t\nend", "    local function helper(accumulator, n)\n   \
    \     if n == 0 then\n            return accumulator\n        else\n         \
    \   local next_n = n % 2 == 0 and n + 2 or n + 1\n            table.insert(accumulator,\
    \ next_n)\n            return helper(accumulator, n - 1)\n        end\n    end\n\
    \    return helper({}, n)\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = n + 2 * i - 1\n  end\n  return pile\nend", "  local res = {}\n  for i = 1,\
    \ n do\n    res[i] = n + 2 * i - 1\n  end\n  return res\nend", "    local t =\
    \ {}\n    while n ~= 0 do\n        table.insert(t, n)\n        if n % 2 == 0 then\n\
    \            n = n + 1\n        else\n            n = n + 2\n        end\n   \
    \ end\n    return t\nend", "  local stones = {n}\n  while stones[#stones] > 1\
    \ do\n    if stones[#stones] % 2 == 0 then\n      stones[#stones + 1] = stones[#stones]\
    \ / 2\n    else\n      stones[#stones + 1] = (stones[#stones] + 1) / 2\n    end\n\
    \  end\n  return stones\nend", "   local pile = {}\n   local i = 0\n   while n\
    \ > 0 do\n      pile[i] = n\n      if n % 2 == 0 then\n         n = n + 1\n  \
    \    else\n         n = n + 2\n      end\n      i = i + 1\n   end\n   return pile\n\
    end", "    if n < 0 then\n        error(\"n should be positive\")\n    end\n \
    \   local pile = {}\n    for i = 1, n do\n        pile[i] = 2 * i - 1\n    end\n\
    \    return pile\nend", "    local r = {}\n    for i = 1, n do\n        r[i] =\
    \ (2 * i) - 1\n    end\n    return r\nend", "  local pile = {}\n  local function\
    \ loop(i, n)\n    if i > n then return end\n    table.insert(pile, n)\n    return\
    \ loop(i + 1, n % 2 == 0 and n + 2 or n + 1)\n  end\n  loop(1, n)\n  return pile\n\
    end", "  local nivel = n\n  local piramide = {}\n  for i = 1, n do\n    piramide[i]\
    \ = nivel\n    if nivel % 2 == 0 then\n      nivel = nivel + 1\n    else\n   \
    \   nivel = nivel + 2\n    end\n  end\n  return piramide\nend", "  local t = {}\n\
    \  for i = 1, n do\n    table.insert(t, (i-1)*2+n)\n  end\n  return t\nend", " \
    \ local pile = {}\n  local i = 1\n  while n > 0 do\n    pile[i] = n\n    n = n\
    \ % 2 == 0 and n + 1 or n + 2\n    i = i + 1\n  end\n  return pile\nend", "  assert(n>0,\
    \ \"n>0\")\n  assert(math.floor(n)==n, \"n is an integer\")\n  local t = {}\n\
    \  for i=1,n do\n    table.insert(t,n)\n    if n%2==0 then\n      n = n+1\n  \
    \  else\n      n = n+2\n    end\n  end\n  return t\nend", "  -- your code here\n\
    end", "    local pile = {}\n    for _ = 1, n do\n        table.insert(pile, n)\n\
    \        n = n % 2 == 0 and n + 2 or n + 1\n    end\n    return pile\nend", " \
    \ assert(n > 0, \"argument must be a positive integer\")\n  local pile = {}\n\
    \  for i = 1, n do\n    pile[i] = (i % 2 == 0) and (n + i) or (n + i - 1)\n  end\n\
    \  return pile\nend", "  local retval = {}\n  for k = 1, n do\n    local val =\
    \ (k - 1) * 2 + n\n    retval[k] = val\n  end\n  return retval\nend", "    local\
    \ pile = {}\n    while n > 0 do\n        table.insert(pile, n)\n        if n %\
    \ 2 == 0 then\n            n = n + 1\n        else\n            n = n + 2\n  \
    \      end\n    end\n    return pile\nend", "    local function odd(x) return\
    \ x % 2 == 1 end\n    local function next(x) return x + (odd(x) and 2 or 1) end\n\
    \    local nxt = next\n    local r = { n }\n    for i = 1, n - 1 do\n        table.insert(r,\
    \ nxt(r[i]))\n        nxt = next(nxt)\n    end\n    return r\nend", "    local\
    \ t = {}\n    while n > 0 do\n        table.insert(t, n)\n        if n % 2 ==\
    \ 0 then\n            n = n + 1\n        else\n            n = n + 2\n       \
    \ end\n    end\n    return t\nend", "  local res = {}\n  while n ~= 0 do\n   \
    \ res[#res+1] = n\n    if n % 2 == 0 then\n      n = n + 1\n    else\n      n\
    \ = n + 2\n    end\n  end\n  return res\nend", "  local result = {}\n  for _=1,n\
    \ do\n    result[#result+1] = n\n    if n % 2 == 0 then\n      n = n + 1\n   \
    \ else\n      n = n + 2\n    end\n  end\n  return result\nend", "    local function\
    \ even(n)\n        return n % 2 == 0\n    end\n    local function next_level(n)\n\
    \        if even(n) then\n            return n + 2\n        else\n           \
    \ return n + 1\n        end\n    end\n    local pile = {}\n    for i = n, 1, -1\
    \ do\n        pile[#pile + 1] = i\n        n = next_level(n)\n    end\n    return\
    \ pile\nend", "   local t = {}\n   local sum = 0\n   for i = n, 1, -1 do\n   \
    \   local stones = n + (i % 2) * 2\n      sum = sum + stones\n      t[i] = stones\n\
    \   end\n   assert(sum == n * (n + 1))\n   return t\nend", "  local result = {}\n\
    \  for i = 1, n do\n    local prev_number = result[i - 1] or n\n    if prev_number\
    \ % 2 == 0 then\n      result[i] = prev_number + 1\n    else\n      result[i]\
    \ = prev_number + 2\n    end\n  end\n  return result\nend", "    local result\
    \ = {}\n    for _=1,n do\n        result[#result+1] = n\n        if n % 2 == 0\
    \ then\n            n = n + 1\n        else\n            n = n + 2\n        end\n\
    \    end\n    return result\nend", "   local result = {}\n   for i = 1, n do\n\
    \      if i == 1 then\n         result[i] = n\n      elseif result[i-1] % 2 ==\
    \ 0 then\n         result[i] = result[i-1] + 1\n      else\n         result[i]\
    \ = result[i-1] + 2\n      end\n   end\n   return result\nend", "  local count\
    \ = 1\n  local result = {}\n  while n > 0 do\n    result[count] = n\n    if n\
    \ % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n    count\
    \ = count + 1\n  end\n  return result\nend", "  local s = {}\n  for i = 1, n do\n\
    \    s[i] = n\n    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n\
    \ + 2\n    end\n  end\n  return s\nend", "  local answer = {}\n  for i = 1, n\
    \ do\n    answer[i] = n + 2 * i - 1\n  end\n  return answer\nend", "    local\
    \ result = {}\n    for i = 1, n do\n        result[i] = n\n        if n % 2 ==\
    \ 0 then\n            n = n + 1\n        else\n            n = n + 2\n       \
    \ end\n    end\n    return result\nend", end, "  assert(n >= 1)\n  local result\
    \ = {}\n  for i = 1, n do\n    result[i] = 2 * i - 1\n  end\n  return result\n\
    end", "    local pile = {}\n    local i = 1\n    while i <= n do\n        pile[i]\
    \ = n + 2*i - 1\n        i = i + 1\n    end\n    return pile\nend", "  -- your\
    \ code here\nend", "    assert(n > 0, 'n should be positive')\n    local result\
    \ = {}\n    local next_number\n    if n % 2 == 0 then\n        next_number = function\
    \ (level) return level + 2 end\n    else\n        next_number = function (level)\
    \ return level + 1 end\n    end\n    for i = n, 1, -1 do\n        result[n - i\
    \ + 1] = i\n        i = next_number(i)\n    end\n    return result\nend", "  local\
    \ pile = {}\n  pile[1] = n\n  while n > 1 do\n    if n % 2 == 0 then\n      n\
    \ = n / 2\n    else\n      n = (n * 3) + 1\n    end\n    table.insert(pile, n)\n\
    \  end\n  return pile\nend", "  local pile = {}\n  pile[1] = n\n  local i = 2\n\
    \  while pile[i-1] > 0 do\n    pile[i] = next_odd_even(pile[i-1])\n    i = i +\
    \ 1\n  end\n  return pile\nend", "    local result = {}\n    for i = 1, n do\n\
    \        table.insert(result, 2 * i - 1)\n    end\n    return result\nend", " \
    \   local result = {}\n    for i = 1, n do\n        table.insert(result, i * 2\
    \ + 1)\n    end\n    return result\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    if i % 2 == 0 then\n      table.insert(pile, i + 1)\n    else\n      table.insert(pile,\
    \ i)\n    end\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n\
    \ do\n    pile[i] = n + 2 * i - 1\n  end\n  return pile\nend", "  local stones\
    \ = {n}\n  for i = 2, n do\n    stones[i] = stones[i-1] + 2*(i % 2)\n  end\n \
    \ return stones\nend", "  local result = {}\n  for i = 1, n do\n    local stones\
    \ = n + i + 1\n    result[i] = ((stones % 2 == 0) and stones or stones - 1)\n\
    \  end\n  return result\nend", "  local pile = {}\n  for i = 1, n do\n    table.insert(pile,\
    \ i * 2 + (i - 1) % 2)\n  end\n  return pile\nend", "   local p = {n}\n   while\
    \ n ~= 1 do\n      if n % 2 == 0 then\n         n = n / 2\n      else\n      \
    \   n = (n + 1) / 2\n      end\n      table.insert(p, n)\n   end\n   return p\n\
    end", "  local r = {}\n  for i = 1, n do\n    r[i] = n + 2 * i - 1\n  end\n  return\
    \ r\nend", "  local pile = {}\n  if n < 1 then\n    return pile\n  end\n  pile[1]\
    \ = n\n  local i = 2\n  local flag = n % 2\n  while true do\n    n = n + flag\
    \ * 2\n    flag = 1 - flag\n    pile[i] = n\n    i = i + 1\n    if n == 1 then\n\
    \      break\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ i = 0\n  while n > 0 do\n    pile[i] = n\n    n = n - 2 + (n % 2)\n    i = i\
    \ + 1\n  end\n  return pile\nend", "    local result = {}\n    while n > 0 do\n\
    \        result[#result+1] = n\n        if n % 2 == 0 then\n            n = n\
    \ + 1\n        else\n            n = n + 2\n        end\n    end\n    return result\n\
    end", "    local pile = {}\n    for i = 1, n do\n        pile[i] = i * 2 - 1\n\
    \    end\n    return pile\nend", "  local res = {}\n  local stones = n\n  while\
    \ stones > 0 do\n    res[#res+1] = stones\n    if stones % 2 == 0 then\n     \
    \ stones = stones + 1\n    else\n      stones = stones + 2\n    end\n  end\n \
    \ return res\nend", "    if n < 1 then\n        return nil\n    end\n    local\
    \ pile = {}\n    local pile_index = 1\n    for i = n, 1, -1 do\n        pile[pile_index]\
    \ = i\n        pile_index = pile_index + 1\n    end\n    for i = n, n * n do\n\
    \        pile[pile_index] = i\n        pile_index = pile_index + 1\n        if\
    \ i % 2 == 0 then\n            i = i + 1\n        else\n            i = i + 2\n\
    \        end\n    end\n    return pile\nend", "  local pile = {}\n  for i = 1,\
    \ n do\n    pile[i] = i + 2 * i\n  end\n  return pile\nend", "    local result\
    \ = {}\n    while n > 0 do\n        table.insert(result, n)\n        if n % 2\
    \ == 0 then\n            n = n + 1\n        else\n            n = n + 2\n    \
    \    end\n    end\n    return result\nend", "    assert(n > 0, \"input must be\
    \ a positive integer\")\n    local pile = {}\n    for i = 1, n do\n        table.insert(pile,\
    \ i)\n    end\n    return pile\nend", "   local t = {}\n   for i = n, 1, -1 do\n\
    \      t[#t+1] = i*2-1\n   end\n   return t\nend", "    local T = {}\n    local\
    \ level = 1\n    while n > 0 do\n        T[level] = n\n        if n % 2 == 0 then\n\
    \            n = n + 1\n        else\n            n = n + 2\n        end\n   \
    \     level = level + 1\n    end\n    return T\nend", "   local pile = {}\n  \
    \ for i = 1, n do\n      pile[i] = 2 * i - 1\n   end\n   return pile\nend", " \
    \ local t = {}\n  while n > 0 do\n    table.insert(t, n)\n    if n % 2 == 0 then\n\
    \      n = n - 1\n    else\n      n = n - 2\n    end\n  end\n  return t\nend",
  "  local ret = {}\n  while n >= 1 do\n    ret[#ret+1] = n\n    n = n % 2 == 0 and\
    \ n + 1 or n + 2\n  end\n  return ret\nend", "    local result = {}\n    local\
    \ current = n\n    while current > 0 do\n        if current % 2 == 0 then\n  \
    \          table.insert(result, current)\n            current = current - 1\n\
    \        else\n            table.insert(result, current)\n            current\
    \ = current - 2\n        end\n    end\n    return result\nend", "  local t = {}\n\
    \  while n > 0 do\n    table.insert(t, n)\n    if n % 2 == 0 then\n      n = n\
    \ - 1\n    else\n      n = n - 2\n    end\n  end\n  return t\nend", "  local t\
    \ = {}\n  local n = n\n  while n > 0 do\n    table.insert(t, n)\n    if n % 2\
    \ == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n  end\n  return\
    \ t\nend", "    local pile = {}\n    for i = 1, n do\n        pile[i] = n + 2\
    \ * i - 1\n    end\n    return pile\nend", "  local t = {}\n  while n > 0 do\n\
    \    t[#t+1] = n\n    n = n + (n % 2 == 0 and 2 or 1)\n  end\n  return t\nend",
  "  local function make_one_level(n)\n    local level = {}\n    for i = 1, n do\n\
    \      table.insert(level, n)\n    end\n    return level\n  end", "    local t\
    \ = {}\n    for i = 1, n do\n        if i % 2 == 0 then\n            t[i] = t[i\
    \ - 1] + 2\n        else\n            t[i] = t[i - 1] + 1\n        end\n    end\n\
    \    return t\nend", "  local t = {}\n  while n > 0 do\n    table.insert(t, n)\n\
    \    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n\
    \  end\n  return t\nend", "  local result = {}\n  for i = 1, n do\n    if n %\
    \ 2 == 0 then\n      table.insert(result, n + 2)\n    else\n      table.insert(result,\
    \ n + 1)\n    end\n    n = n + 1\n  end\n  return result\nend", "  local stones\
    \ = {n}\n  while stones[#stones] ~= 1 do\n    local prev = stones[#stones]\n \
    \   local next = prev % 2 == 0 and prev + 1 or prev - 1\n    stones[#stones +\
    \ 1] = next\n  end\n  return stones\nend", "    local result = {}\n    while n\
    \ > 0 do\n        result[#result+1] = n\n        if n % 2 == 0 then\n        \
    \    n = n + 1\n        else\n            n = n + 2\n        end\n    end\n  \
    \  return result\nend", end, "    local res = {}\n    for i = 1, n do\n      \
    \  if i % 2 == 0 then\n            table.insert(res, i + 1)\n        else\n  \
    \          table.insert(res, i + 2)\n        end\n    end\n    return res\nend",
  "  assert(n > 0, \"n must be positive\")\n  local pile = {}\n  for i = 1, n do\n\
    \    pile[i] = (i-1)*2 + n\n  end\n  return pile\nend", "  local pile = {}\n \
    \ for i = 1, n do\n    if i % 2 == 0 then\n      table.insert(pile, n + 2 * i)\n\
    \    else\n      table.insert(pile, n + 2 * i - 1)\n    end\n  end\n  return pile\n\
    end", "    local r = {}\n    for i = 1, n do\n        r[i] = i + 2 * i - 1\n \
    \   end\n    return r\nend", "    local pile = {}\n    while n > 0 do\n      \
    \  pile[#pile+1] = n\n        if n % 2 == 0 then\n            n = n - 1\n    \
    \    else\n            n = n - 2\n        end\n    end\n    return pile\nend",
  "    local function next_odd(x)\n        return x % 2 == 0 and x + 1 or x + 2\n\
    \    end\n    local function next_even(x)\n        return x % 2 == 0 and x + 2\
    \ or x + 1\n    end\n    local sequence = {}\n    local total = n\n    while n\
    \ > 0 do\n        table.insert(sequence, n)\n        n = n % 2 == 0 and next_even(n)\
    \ or next_odd(n)\n    end\n    return sequence\nend", "  local function f(n,t)\n\
    \    local j = #t+1\n    t[j] = t[j-1] + (n%2==0 and 2 or 1)\n    if n > 1 then\n\
    \      f(n-1,t)\n    end\n  end\n  local t = {n}\n  f(n,t)\n  return t\nend",
  "  local pile = {}\n  local i = 1\n  while n > 0 do\n    pile[i] = n\n    if n %\
    \ 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n    i = i\
    \ + 1\n  end\n  return pile\nend", "    local ans = {}\n    while n > 0 do\n \
    \       n = n - 1\n        table.insert(ans, n)\n        n = n % 2 == 0 and n\
    \ + 1 or n + 2\n    end\n    return ans\nend", "  local result = {}\n  for i =\
    \ 1, n do\n    local v = n + 2 * (i - 1)\n    result[i] = v\n  end\n  return result\n\
    end", end, "    local pile = {}\n    while n > 0 do\n        pile[#pile+1] = n\n\
    \        if n % 2 == 0 then\n            n = n + 1\n        else\n           \
    \ n = n + 2\n        end\n    end\n    return pile\nend", "  -- your code here\n\
    end", "  local result = {}\n  while n > 0 do\n    table.insert(result, n)\n  \
    \  if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n \
    \ end\n  return result\nend", "    local result = {}\n    for i = 1, n do\n  \
    \      if i % 2 == 0 then\n            result[i] = result[i - 1] + 2\n       \
    \ else\n            result[i] = result[i - 1] + 1\n        end\n    end\n    return\
    \ result\nend", "  local function level(i)\n    return 2 * i - (n + 1) % 2\n \
    \ end\n  local n_levels = n\n  local pile = {}\n  for i = 1, n_levels do\n   \
    \ pile[i] = level(i)\n  end\n  return pile\nend", "    local res = {}\n    for\
    \ i = 1, n do\n        table.insert(res, n + 2 * i - 1)\n    end\n    return res\n\
    end", "  local stones = {n}\n  while stones[#stones] ~= 1 do\n    local next_stone\
    \ = stones[#stones] - 2\n    if next_stone < 0 then\n      next_stone = 2\n  \
    \  end\n    table.insert(stones, next_stone)\n  end\n  return stones\nend", " \
    \   -- YOUR CODE HERE\n    local result = {}\n    for i = 1, n do\n        table.insert(result,\
    \ n + 2 * i - 1)\n    end\n    return result\nend", "  local result = {}\n  for\
    \ i = 1, n do\n    result[i] = i + 2 * (i - 1)\n  end\n  return result\nend",
  "  local t = {}\n  local count = n\n  for i = 1, n do\n    t[i] = count\n    if\
    \ count % 2 == 0 then\n      count = count + 1\n    else\n      count = count\
    \ + 2\n    end\n  end\n  return t\nend", "    local res = {}\n    while n > 0\
    \ do\n        res[#res+1] = n\n        if n % 2 == 0 then\n            n = n +\
    \ 1\n        else\n            n = n + 2\n        end\n    end\n    return res\n\
    end", "  local next_level = n\n  local pile = {}\n  while next_level > 0 do\n\
    \    pile[#pile+1] = next_level\n    next_level = next_level % 2 == 0 and next_level+2\
    \ or next_level+1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1,\
    \ n do\n    pile[i] = i * 2 - 1\n  end\n  return pile\nend", "   if n == 1 then\n\
    \      return {n}\n   else\n      if n % 2 == 0 then\n         return {n, make_a_pile(n+1)}\n\
    \      else\n         return {n, make_a_pile(n+2)}\n      end\n   end\nend", " \
    \   local t = {}\n    for i = 1, n do\n        if i == 1 then\n            t[i]\
    \ = n\n        elseif n % 2 == 0 then\n            t[i] = t[i-1] + 2\n       \
    \ else\n            t[i] = t[i-1] + 1\n        end\n    end\n    return t\nend",
  "  local t = {}\n  for i = 1, n do\n    t[i] = ((i % 2 == 0) and (i + 1) or (i +\
    \ 2))\n  end\n  return t\nend", "  local a = {n}\n  local i = 2\n  while i <=\
    \ n do\n    a[i] = n + i\n    i = i + 1\n  end\n  return a\nend", "  assert(n\
    \ >= 1, \"bad argument #1 to 'make_a_pile' (positive integer expected)\")\n  local\
    \ result = {}\n  for i = 0, n-1 do\n    result[i] = n + 2*i\n  end\n  return result\n\
    end", "    local pile = {}\n    pile[1] = n\n    local n_stones = n\n    local\
    \ index = 2\n    while n_stones > 0 do\n        if n_stones % 2 == 0 then\n  \
    \          n_stones = n_stones + 1\n        else\n            n_stones = n_stones\
    \ + 2\n        end\n        pile[index] = n_stones\n        index = index + 1\n\
    \    end\n    return pile\nend", "  if n == 1 then\n    return {1}\n  end\n  local\
    \ pile = {n}\n  local current_step = n\n  while current_step > 1 do\n    current_step\
    \ = current_step % 2 == 0 and current_step + 1 or current_step + 2\n    table.insert(pile,\
    \ current_step)\n  end\n  return pile\nend", "  local result = {}\n  for i = 1,\
    \ n do\n    if (i % 2 == 0) then\n      result[i] = result[i - 1] + 2\n    else\n\
    \      result[i] = result[i - 1] + 1\n    end\n  end\n  return result\nend", " \
    \ if n < 1 then return {} end\n  local pile = {n}\n  local value = n\n  while\
    \ n > 1 do\n    n = n % 2 == 0 and n / 2 or (n + 1) / 2\n    table.insert(pile,\
    \ n)\n  end\n  return pile\nend", "    local t = {}\n    local level = n\n   \
    \ while level > 0 do\n        t[#t+1] = level\n        if level % 2 == 0 then\n\
    \            level = level - 1\n        else\n            level = level - 2\n\
    \        end\n    end\n    return t\nend", "    local stones = {n}\n    for i\
    \ = 2, n do\n        stones[i] = stones[i - 1] + (i % 2 == 0 and 2 or 1)\n   \
    \ end\n    return stones\nend", "  local res = {}\n  local next_level = 1\n  local\
    \ num_stones = n\n  while num_stones > 0 do\n    res[next_level] = num_stones\n\
    \    if num_stones % 2 == 0 then\n      num_stones = num_stones + 1\n    else\n\
    \      num_stones = num_stones + 2\n    end\n    next_level = next_level + 1\n\
    \  end\n  return res\nend", "  local pile = {}\n  while n > 0 do\n    table.insert(pile,\
    \ n)\n    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n   \
    \ end\n  end\n  return pile\nend", "  local result = {}\n  for i = 1, n do\n \
    \   table.insert(result, (i % 2 == 0) and i + 1 or i)\n  end\n  return result\n\
    end", "  if n < 1 then return {} end\n  local t = {n}\n  for i = 1, n-1 do\n \
    \   t[i+1] = t[i] + 2 * ((i % 2) + 1)\n  end\n  return t\nend", "  local a = {n}\n\
    \  while a[#a] > 0 do\n    local i = a[#a]\n    if i % 2 == 0 then\n      table.insert(a,\
    \ i - 1)\n    else\n      table.insert(a, i - 2)\n    end\n  end\n  return a\n\
    end", "  local pile = {}\n  for i = 1, n do\n    if i == 1 then\n      pile[i]\
    \ = n\n    elseif pile[i-1] % 2 == 0 then\n      pile[i] = pile[i-1] + 1\n   \
    \ else\n      pile[i] = pile[i-1] + 2\n    end\n  end\n  return pile\nend", " \
    \ local stones = {n}\n  while stones[#stones] >= 1 do\n    if stones[#stones]\
    \ % 2 == 0 then\n      stones[#stones + 1] = stones[#stones] / 2\n    else\n \
    \     stones[#stones + 1] = (stones[#stones] - 1) / 2\n    end\n  end\n  stones[#stones]\
    \ = nil\n  return stones\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = n + (n % 2 == 0 and 1 or 0) + 2 * (i - 1)\n  end\n  return pile\nend", " \
    \ local table = {}\n  while (n > 0) do\n    table[#table+1] = n\n    if (n % 2\
    \ == 0) then\n      n = n - 1\n    else\n      n = n - 2\n    end\n  end\n  return\
    \ table\nend", "  local r = {}\n  for i = 1, n do\n    table.insert(r, 1 + 2 *\
    \ (i - 1))\n  end\n  return r\nend", "  local result = {}\n  local current_num_stones\
    \ = n\n  while current_num_stones > 0 do\n    table.insert(result, current_num_stones)\n\
    \    if current_num_stones % 2 == 0 then\n      current_num_stones = current_num_stones\
    \ + 1\n    else\n      current_num_stones = current_num_stones + 2\n    end\n\
    \  end\n  return result\nend", "  local function check_number(number)\n    assert(number\
    \ > 0, \"The argument must be a positive integer\")\n    assert(number == math.floor(number),\
    \ \"The argument must be an integer\")\n  end\n  check_number(n)\n  local pile\
    \ = {}\n  for i = 1, n do\n    table.insert(pile, i + i + (i % 2 == 0 and 1 or\
    \ 0))\n  end\n  return pile\nend", "    local pile = {}\n    for i = 1, n do\n\
    \        pile[i] = 2 * i - 1\n    end\n    return pile\nend", "    assert(type(n)\
    \ == \"number\", \"n must be a number\")\n    assert(n > 0, \"n must be positive\"\
    )\n    if n == 1 then\n        return {1}\n    end\n    local v = n\n    local\
    \ ans = {v}\n    while v > 1 do\n        if v % 2 == 0 then\n            v = v\
    \ + 1\n        else\n            v = v - 1\n        end\n        table.insert(ans,\
    \ v)\n    end\n    return ans\nend", "    local t = {}\n    t[1] = n\n    for\
    \ i = 2, math.floor(n / 2) do\n        local j = i - 1\n        if j % 2 == 0\
    \ then\n            t[i] = t[j] + 2\n        else\n            t[i] = t[j] + 1\n\
    \        end\n    end\n    return t\nend", "  local result = {}\n  while n > 0\
    \ do\n    result[#result+1] = n\n    if n % 2 == 0 then\n      n = n + 1\n   \
    \ else\n      n = n + 2\n    end\n  end\n  return result\nend", "    local levels\
    \ = {}\n    for i = 1, n do\n        table.insert(levels, n)\n        if n % 2\
    \ == 0 then\n            n = n + 1\n        else\n            n = n + 2\n    \
    \    end\n    end\n    return levels\nend", "    local result = {}\n    while\
    \ n > 0 do\n        table.insert(result, n)\n        if n % 2 == 0 then\n    \
    \        n = n - 1\n        else\n            n = n - 2\n        end\n    end\n\
    \    return result\nend", "    local pile = {}\n    for i = 1, n do\n        if\
    \ i == 1 then\n            pile[#pile+1] = n\n        else\n            pile[#pile+1]\
    \ = pile[#pile] + (pile[#pile] % 2 == 0 and 2 or 1)\n        end\n    end\n  \
    \  return pile\nend", "  local result = {}\n  result[1] = n\n  while n > 1 do\n\
    \    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n\
    \    table.insert(result, n)\n  end\n  return result\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    if i == 1 then\n      pile[i] = n\n    elseif i % 2 ==\
    \ 0 then\n      pile[i] = pile[i - 1] + 2\n    else\n      pile[i] = pile[i -\
    \ 1] + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local level\
    \ = n\n  for i = 1, n do\n    pile[i] = level\n    if level % 2 == 0 then\n  \
    \    level = level + 1\n    else\n      level = level + 2\n    end\n  end\n  return\
    \ pile\nend", "  local result = {}\n  local i = 1\n  while i <= n do\n    table.insert(result,\
    \ n)\n    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n   \
    \ end\n    i = i + 1\n  end\n  return result\nend", "    local pile = {}\n   \
    \ for i = 1, n do\n        pile[i] = 2 * i - 1\n    end\n    return pile\nend",
  "  -- TODO: Implement your solution here.\n  return nil\nend", "  local pile = {}\n\
    \  local current = n\n  for i = 1, n do\n    table.insert(pile, current)\n   \
    \ if i % 2 == 0 then\n      current = current + 2\n    else\n      current = current\
    \ + 1\n    end\n  end\n  return pile\nend", "    local pile = {}\n    local l\
    \ = n\n    while n > 0 do\n        n = n - 1\n        pile[#pile+1] = l\n    \
    \    if l % 2 == 0 then\n            l = l + 1\n        else\n            l =\
    \ l + 2\n        end\n    end\n    return pile\nend", "  local t = {}\n  for i\
    \ = 1, n do\n    t[i] = 2 * i - 1\n  end\n  return t\nend", "  local result =\
    \ {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      result[i] = i + 1\n   \
    \ else\n      result[i] = i + 2\n    end\n  end\n  return result\nend", "   local\
    \ pile = {}\n   local cur_level = n\n   local level = 1\n   while cur_level >\
    \ 0 do\n      pile[level] = cur_level\n      if cur_level % 2 == 0 then\n    \
    \     cur_level = cur_level - 1\n      else\n         cur_level = cur_level -\
    \ 2\n      end\n      level = level + 1\n   end\n   return pile\nend", "  local\
    \ num = n\n  local a = {}\n  for i = 1, n do\n    a[i] = num\n    if num % 2 ==\
    \ 0 then\n      num = num + 1\n    else\n      num = num + 2\n    end\n  end\n\
    \  return a\nend", "  local t = {}\n  while n > 0 do\n    t[#t+1] = n\n    n =\
    \ n % 2 == 0 and n + 1 or n + 2\n  end\n  return t\nend", "  local result = {}\n\
    \  for i = 1, n do\n    if i == 1 then\n      result[i] = n\n    elseif result[i-1]\
    \ % 2 == 0 then\n      result[i] = result[i-1] + 1\n    else\n      result[i]\
    \ = result[i-1] + 2\n    end\n  end\n  return result\nend", "    local t = {}\n\
    \    local i = 1\n    while n > 0 do\n        t[i] = n\n        if n % 2 == 0\
    \ then\n            n = n + 1\n        else\n            n = n + 2\n        end\n\
    \        i = i + 1\n    end\n    return t\nend", "  if not n or n <= 0 then return\
    \ nil end\n  local res = {}\n  for i = 1, n do\n    table.insert(res, n + 2 *\
    \ i - 1)\n  end\n  return res\nend", "  local t = {}\n  for i = 1, n do\n    t[i]\
    \ = n\n    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n  \
    \  end\n  end\n  return t\nend", end, "    local pile = {}\n    for i = 1, n do\n\
    \        pile[i] = i\n    end\n    return pile\nend", "  local t = {}\n  t[#t+1]\
    \ = n\n  for i = 1, n-1 do\n    if n % 2 == 0 then\n      t[#t+1] = t[#t] + 2\n\
    \    else\n      t[#t+1] = t[#t] + 1\n    end\n  end\n  return t\nend", "    local\
    \ level = {}\n    while n > 0 do\n        level[#level+1] = n\n        if n %\
    \ 2 == 0 then\n            n = n - 1\n        else\n            n = n - 2\n  \
    \      end\n    end\n    return level\nend", "  assert(n > 0)\n  local pile =\
    \ {}\n  for i = 1, n do\n    pile[i] = (2 * n) - 1\n    n = n - 1\n  end\n  return\
    \ pile\nend", "    local pile = {}\n    while n > 0 do\n        table.insert(pile,\
    \ n)\n        if n % 2 == 0 then\n            n = n - 1\n        else\n      \
    \      n = n - 2\n        end\n    end\n    return pile\nend", "  local t = {}\n\
    \  for i = 1, n do\n    t[i] = n + 2 * i - 1\n  end\n  return t\nend", "  local\
    \ table = {}\n  local k = 1\n  table[k] = n\n  while n > 1 do\n    n = n % 2 ==\
    \ 0 and n / 2 or n * 3 + 1\n    k = k + 1\n    table[k] = n\n  end\n  return table\n\
    end", "   assert(n > 0)\n   local pile = {}\n   while n > 0 do\n      table.insert(pile,\
    \ n)\n      if n % 2 == 0 then\n         n = n + 1\n      else\n         n = n\
    \ + 2\n      end\n   end\n   return pile\nend", "    local res = {}\n    for i\
    \ = 1, n do\n        res[i] = n\n        if n % 2 == 0 then\n            n = n\
    \ + 1\n        else\n            n = n + 2\n        end\n    end\n    return res\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = i*2 - 1\n  end\n  return\
    \ pile\nend", "  local result = {}\n  while n > 0 do\n    result[#result+1] =\
    \ n\n    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n\
    \  end\n  return result\nend", "    if n < 1 then return nil end\n    local result\
    \ = {}\n    for i = 1, n do\n        table.insert(result, 2 * i - 1)\n    end\n\
    \    return result\nend", "    local pile = {}\n    for i = 1, n do\n        pile[i]\
    \ = n + 2 * i - 1\n    end\n    return pile\nend", "    --TODO: Implement function\
    \ here\n    local pile = {}\n    pile[1] = n\n    for i = 2, n do\n        if\
    \ n % 2 == 0 then\n            pile[i] = pile[i-1] + 2\n        else\n       \
    \     pile[i] = pile[i-1] + 1\n        end\n    end\n    return pile\nend", " \
    \ local list = {}\n  while n >= 1 do\n    table.insert(list, n)\n    if n % 2\
    \ == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n  end\n  return\
    \ list\nend", "    local odd = n % 2 == 1\n    local result = {n}\n    local counter\
    \ = 1\n    while counter < n do\n        local next_odd = odd and result[counter]\
    \ + 2 or result[counter] + 1\n        local next_even = odd and result[counter]\
    \ + 1 or result[counter] + 2\n        table.insert(result, next_odd)\n       \
    \ counter = counter + 1\n        if counter < n then\n            table.insert(result,\
    \ next_even)\n            counter = counter + 1\n        end\n    end\n    return\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
