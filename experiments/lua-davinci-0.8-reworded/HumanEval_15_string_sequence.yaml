name: HumanEval_15_string_sequence
language: lua
prompt: "-- Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n--\
  \ '0 1 2 3 4 5'\nlocal function string_sequence(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
  \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0 1\
  \ 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local output = {}\n  for i = 0, n do\n    output[#output + 1] = tostring(i)\n\
    \  end\n  return table.concat(output, ' ')\nend", "    local res = { }\n    for\
    \ i = 0, n do\n        res[#res + 1] = tostring(i)\n    end\n    return table.concat(res,\
    \ ' ')\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n\
    \    end\n    return table.concat(t, ' ')\nend", "  local t = {}\n  for i = 0,\
    \ n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\nend",
  "\treturn table.concat( map(tostring, range(n+1)), ' ')\nend", "    if n < 0 then\
    \ return '' end\n    local s = ''\n    for i = 0, n do\n        s = s .. tostring(i)\
    \ .. ' '\n    end\n    return s\nend", "    if n == 0 then\n        return '0'\n\
    \    else\n        return table.concat({string_sequence(n-1),' ',n},'')\n    end\n\
    end", "\tlocal tmp = {}\n\tfor i = 0, n do\n\t\ttmp[i+1] = tostring(i)\n\tend\n\
    \treturn table.concat(tmp, ' ')\nend", "    return table.concat(table.range(n\
    \ + 1), ' ')\nend", "\tlocal s = {}\n\tfor i = 0, n do\n\t\ts[i+1] = i\n\tend\n\
    \treturn table.concat(s, ' ')\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\t\
    t[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\nend", "\tlocal\
    \ values = {}\n\tfor i = 0, n do\n\t\tvalues[i] = i\n\tend\n\treturn table.concat(values,\
    \ ' ')\nend", "  local s = {}\n  for i = 0, n do\n    s[i + 1] = i\n  end\n  return\
    \ table.concat(s, ' ')\nend", "    local s = ''\n    for i = 0, n do\n       \
    \ s = s .. tostring(i) .. ' '\n    end\n    return s\nend", "\tlocal i, seq =\
    \ 0, {}\n\twhile i <= n do\n\t\tseq[#seq + 1] = i\n\t\ti = i + 1\n\tend\n\treturn\
    \ table.concat(seq, ' ')\nend", "\tlocal sequence = {}\n\tfor i = 0, n do\n\t\t\
    sequence[i] = tostring(i)\n\tend\n\treturn table.concat(sequence, ' ')\nend",
  "    if n > 0 then\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    else\n        return tostring(n)\n    end\nend", "    local str = {}\n  \
    \  for i = 0, n do\n        str[#str + 1] = tostring(i)\n    end\n    return table.concat(str,\
    \ ' ')\nend", "    local s = \"\"\n    for i = 0, n do\n        s = s .. i ..\
    \ \" \"\n    end\n    return s\nend", "\tlocal s = ''\n\tfor i = 0, n do\n\t\t\
    s = s .. ' ' .. i\n\tend\n\treturn s\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
