name: HumanEval_15_string_sequence
language: lua
prompt: "-- Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n--\
  \ '0 1 2 3 4 5'\nlocal function string_sequence(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
  \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0 1\
  \ 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local output = {}\n  for i = 0, n do\n    output[#output + 1] = tostring(i)\n\
    \  end\n  return table.concat(output, ' ')\nend", "    local res = { }\n    for\
    \ i = 0, n do\n        res[#res + 1] = tostring(i)\n    end\n    return table.concat(res,\
    \ ' ')\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n\
    \    end\n    return table.concat(t, ' ')\nend", "  local t = {}\n  for i = 0,\
    \ n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\nend",
  "\treturn table.concat( map(tostring, range(n+1)), ' ')\nend", "    if n < 0 then\
    \ return '' end\n    local s = ''\n    for i = 0, n do\n        s = s .. tostring(i)\
    \ .. ' '\n    end\n    return s\nend", "    if n == 0 then\n        return '0'\n\
    \    else\n        return table.concat({string_sequence(n-1),' ',n},'')\n    end\n\
    end", "\tlocal tmp = {}\n\tfor i = 0, n do\n\t\ttmp[i+1] = tostring(i)\n\tend\n\
    \treturn table.concat(tmp, ' ')\nend", "    return table.concat(table.range(n\
    \ + 1), ' ')\nend", "\tlocal s = {}\n\tfor i = 0, n do\n\t\ts[i+1] = i\n\tend\n\
    \treturn table.concat(s, ' ')\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\t\
    t[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\nend", "\tlocal\
    \ values = {}\n\tfor i = 0, n do\n\t\tvalues[i] = i\n\tend\n\treturn table.concat(values,\
    \ ' ')\nend", "  local s = {}\n  for i = 0, n do\n    s[i + 1] = i\n  end\n  return\
    \ table.concat(s, ' ')\nend", "    local s = ''\n    for i = 0, n do\n       \
    \ s = s .. tostring(i) .. ' '\n    end\n    return s\nend", "\tlocal i, seq =\
    \ 0, {}\n\twhile i <= n do\n\t\tseq[#seq + 1] = i\n\t\ti = i + 1\n\tend\n\treturn\
    \ table.concat(seq, ' ')\nend", "\tlocal sequence = {}\n\tfor i = 0, n do\n\t\t\
    sequence[i] = tostring(i)\n\tend\n\treturn table.concat(sequence, ' ')\nend",
  "    if n > 0 then\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    else\n        return tostring(n)\n    end\nend", "    local str = {}\n  \
    \  for i = 0, n do\n        str[#str + 1] = tostring(i)\n    end\n    return table.concat(str,\
    \ ' ')\nend", "    local s = \"\"\n    for i = 0, n do\n        s = s .. i ..\
    \ \" \"\n    end\n    return s\nend", "\tlocal s = ''\n\tfor i = 0, n do\n\t\t\
    s = s .. ' ' .. i\n\tend\n\treturn s\nend", "    local sequence = {}\n    for\
    \ i = 0, n do\n        table.insert(sequence, tostring(i))\n    end\n    return\
    \ table.concat(sequence, ' ')\nend", "    local s = ''\n    for i = 0, n do\n\
    \        s = s .. string.format('%d ', i)\n    end\n    return s\nend", "    local\
    \ t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return\
    \ table.concat(t, ' ')\nend", "    if n < 0 then\n        return ''\n    end\n\
    \    local ret = {}\n    for i = 0, n do\n        ret[#ret + 1] = tostring(i)\n\
    \    end\n    return table.concat(ret, ' ')\nend", "  local a = {}\n  for i =\
    \ 0, n do\n    a[i+1] = tostring(i)\n  end\n  return table.concat(a, ' ')\nend",
  "    return table.concat(table.map({math.range(n + 1)}, tostring), ' ')\nend", " \
    \   local s = ''\n    for i = 0, n do\n        s = s .. i .. ' '\n    end\n  \
    \  return s\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[#t + 1] = i\n\tend\n\
    \treturn table.concat(t, ' ')\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\t\
    t[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\nend", "\tlocal\
    \ t = {}\n\tfor i = 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ ' ')\nend", "  if n == 0 then\n    return '0'\n  else\n    return string_sequence(n-1)\
    \ .. ' ' .. tostring(n)\n  end\nend", "    local v = {}\n    for i = 0, n do\n\
    \        v[i] = i\n    end\n    return table.concat(v, ' ')\nend", "  local t\
    \ = {}\n  for i = 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t,\
    \ ' ')\nend", "  local s = {}\n  for i = 0, n do\n    s[i+1] = tostring(i)\n \
    \ end\n  return table.concat(s, ' ')\nend", "    local result = ''\n    for i\
    \ = 0, n do\n        result = result .. i .. ' '\n    end\n    return result\n\
    end", "  if n > 0 then\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \  else\n    return tostring(n)\n  end\nend", "    local tbl = {}\n    for i =\
    \ 0, n do\n        tbl[i + 1] = i\n    end\n    return join(tbl, ' ')\nend", " \
    \   if n == 0 then\n        return '0'\n    else\n        return string_sequence(n-1)\
    \ .. ' ' .. tostring(n)\n    end\nend", "    local s = ''\n    for i = 0, n do\n\
    \        s = s .. ' ' .. i\n    end\n    return s\nend", "  if n == 0 then\n \
    \   return '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \  end\nend", "\tlocal out = {}\n\tfor i = 0, n do\n\t\tout[i+1] = tostring(i)\n\
    \tend\n\treturn table.concat(out, ' ')\nend", "  local s = \"\"\n  for i = 0,\
    \ n do\n    s = s .. \" \" .. i\n  end\n  return s\nend", "    return table.concat(\n\
    \        table.map(\n            function(i) return tostring(i) end,\n       \
    \     range(n+1)),\n        ' ')\nend", "    local out = {}\n    for i = 0, n\
    \ do\n        out[#out + 1] = i\n    end\n    return table.concat(out, ' ')\n\
    end", "\tif n < 0 then\n\t\treturn ''\n\tend\n\tlocal t = {}\n\tfor i = 0, n do\n\
    \t\tt[#t + 1] = i\n\tend\n\treturn table.concat(t, ' ')\nend", "    local result\
    \ = {}\n    for i = 0, n do\n        result[i + 1] = i\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local tmp = {}\n    for i = 0, n do\n        tmp[#tmp + 1]\
    \ = tostring(i)\n    end\n    return table.concat(tmp, ' ')\nend", "\tlocal acc\
    \ = {}\n\tfor i = 0, n do\n\t\tacc[#acc + 1] = i\n\tend\n\treturn table.concat(acc,\
    \ ' ')\nend", "    local s = \"0\"\n    for i = 1, n do\n        s = s .. \" \"\
    \ .. i\n    end\n    return s\nend", "    local str = ''\n    for i = 0, n do\n\
    \        str = str .. i .. ' '\n    end\n    return str\nend", "    local result\
    \ = {}\n    for i = 0, n do\n        result[i + 1] = i\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    return table.concat(table.range(n+1), \" \")\nend", "    if\
    \ n < 0 then\n        return ''\n    end\n    local r = {}\n    for i = 0, n do\n\
    \        r[#r + 1] = tostring(i)\n    end\n    return table.concat(r, ' ')\nend",
  "  if n == 0 then\n    return '0'\n  else\n    return string_sequence(n-1) .. '\
    \ ' .. tostring(n)\n  end\nend", "    local t = {}\n    for i = 0, n do\n    \
    \    t[#t + 1] = tostring(i)\n    end\n    return table.concat(t, ' ')\nend",
  "  local ss = {}\n  for i = 0, n do\n    ss[i+1] = string.format('%d', i)\n  end\n\
    \  return table.concat(ss, ' ')\nend", "  local s = \"\"\n  for i = 0, n do\n\
    \    s = s .. \" \" .. i\n  end\n  return s\nend", "    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. tostring(i) .. ' '\n    end\n    return s\nend",
  "    local result = {}\n    for i = 0, n do\n        result[i + 1] = tostring(i)\n\
    \    end\n    return table.concat(result, ' ')\nend", "    local sequence = {}\n\
    \    for i = 0, n do\n        table.insert(sequence, i)\n    end\n    return table.concat(sequence,\
    \ ' ')\nend", "  local l = {}\n  for i = 0, n do\n    l[#l + 1] = tostring(i)\n\
    \  end\n  return table.concat(l, ' ')\nend", "    return table.concat(table.pack(string.rep('%d\
    \ ', n), '%d'), ' '):format(table.unpack(table.pack(integer_sequence(n))))\nend",
  "    local s = \"\"\n    for i = 0, n do\n        s = s .. tostring(i) .. \" \"\n\
    \    end\n    return s\nend", "  return table.concat({string.rep(\"0 \", n), n},\
    \ \" \")\nend", "  local s = {}\n  for i = 0, n do\n    s[i + 1] = tostring(i)\n\
    \  end\n  return table.concat(s, ' ')\nend", "    local t = {}\n    for i = 0,\
    \ n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t, '\
    \ ')\nend", "\tlocal retval = \"\"\n\tfor i = 0, n do\n\t\tretval = retval ..\
    \ \" \" .. i\n\tend\n\treturn retval\nend", "    return table.concat({ select(1,\
    \ string.gmatch(('%d+ '):rep(n), '(%d+) ')) }, ' ')\nend", "  local s = ''\n \
    \ for i = 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend", "  return table.concat({numeric_sequence(n)},\
    \ ' ')\nend", "\tif n < 0 then\n\t\treturn nil\n\tend\n\tlocal s = ''\n\tfor i\
    \ = 0, n do\n\t\ts = s .. i .. ' '\n\tend\n\treturn string.sub(s, 1, -2)\nend",
  "    local str = ''\n    for i = 0, n do\n        str = str .. ' ' .. i\n    end\n\
    \    return string.sub(str, 2)\nend", "    local t = {}\n    for i = 0, n do\n\
    \        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\nend", "    return\
    \ table.concat(map(tostring, range(n + 1)), ' ')\nend", "\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, '\
    \ ')\nend", "    local s = \"\"\n    for i = 0, n do\n        s = s .. tostring(i)\
    \ .. \" \"\n    end\n    return s\nend", "    local str = ''\n    for i = 0, n\
    \ do\n        str = str .. ' ' .. i\n    end\n    return str\nend", "    if n\
    \ == 0 then\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ .. \" \" .. tostring(n)\n    end\nend", "\tlocal str = ''\n\tfor i = 0, n do\n\
    \t\tstr = str .. i .. ' '\n\tend\n\treturn str\nend", "  local t = {}\n  for i\
    \ = 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end", "    local a = {}\n    for i = 0, n do\n        a[#a + 1] = tostring(i)\n\
    \    end\n    return table.concat(a, ' ')\nend", "\tlocal out = ''\n\tfor i =\
    \ 0, n do\n\t\tout = out .. i .. ' '\n\tend\n\treturn out\nend", "\tif n == 0\
    \ then\n\t\treturn '0'\n\telse\n\t\treturn range(0, n):map(tostring):concat('\
    \ ')\n\tend\nend", "  local str = ''\n  for i = 0, n do\n    str = str .. ' '\
    \ .. i\n  end\n  return str\nend", "    local s = tostring(n)\n    for i = n -\
    \ 1, 0, -1 do\n        s = tostring(i) .. ' ' .. s\n    end\n    return s\nend",
  "  local s = {}\n  for i = 0, n do\n    s[i + 1] = tostring(i)\n  end\n  return\
    \ table.concat(s, ' ')\nend", "    local s = {}\n    for i = 0, n do\n       \
    \ s[#s + 1] = i\n    end\n    return table.concat(s, ' ')\nend", "\tlocal ret\
    \ = {}\n\tfor i = 0, n do\n\t\tret[i + 1] = i\n\tend\n\treturn table.concat(ret,\
    \ ' ')\nend", "\tlocal s = \"\"\n\tfor i = 0, n do\n\t\ts = s .. i .. \" \"\n\t\
    end\n\treturn s\nend", "\tif n < 0 then return '' end\n\tlocal t = {}\n\tfor i\
    \ = 0, n do\n\t\tt[#t+1] = i\n\tend\n\treturn concat(t, ' ')\nend", "    local\
    \ s = {}\n    for i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return\
    \ table.concat(s, ' ')\nend", "    local s = ''\n    for i = 0, n do\n       \
    \ s = s .. ' ' .. i\n    end\n    return s\nend", "  local s = \"\"\n  for i =\
    \ 0, n do\n    s = s .. \" \" .. i\n  end\n  return s\nend", "  local t = {}\n\
    \  for i = 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t,\
    \ ' ')\nend", "    if n == 0 then\n        return '0'\n    else\n        return\
    \ string_sequence(n-1) .. ' ' .. tostring(n)\n    end\nend", "    if n == 0 then\n\
    \        return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend", "    local s = '0'\n    for i = 1, n do\n        s = s .. ' '\
    \ .. i\n    end\n    return s\nend", "    local str = ''\n    for i = 0, n do\n\
    \        str = str .. i .. ' '\n    end\n    return str\nend", "    local s =\
    \ {}\n    for i = 0, n do\n        s[#s + 1] = i\n    end\n    return table.concat(s,\
    \ ' ')\nend", "\tlocal res = {}\n\tfor i = 0, n do\n\t\tres[#res + 1] = tostring(i)\n\
    \tend\n\treturn table.concat(res, ' ')\nend", "    local t = {}\n    for i = 0,\
    \ n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\nend",
  "\tlocal s = ''\n\tfor i = 0, n do\n\t\ts = s .. ' ' .. i\n\tend\n\treturn s\nend",
  "    local result = {}\n    for i = 0, n do\n        result[i + 1] = tostring(i)\n\
    \    end\n    return table.concat(result, ' ')\nend", "  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end", "  local s = \"\"\n  for i = 0, n do\n    s = s .. i .. \" \"\n  end\n \
    \ return s\nend", "  return table.concat(Fold.range(0, n), ' ')\nend", "    local\
    \ t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return\
    \ table.concat(t, ' ')\nend", "  return table.concat(range(n + 1), ' ')\nend",
  "    local _, s = pcall(string.format, string.rep(\"%d \", n) .. \"%d\", unpack(table.pack(range(n\
    \ + 1))))\n    return s\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[#t +\
    \ 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\nend", "  return table.concat(range(n+1),\
    \ ' ')\nend", "\tlocal ret = ''\n\tfor i = 0, n do\n\t\tret = ret .. ' ' .. i\n\
    \tend\n\treturn ret\nend", "  return table.concat(table.map(tostring, range(n\
    \ + 1)), ' ')\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1]\
    \ = i\n    end\n    return table.concat(t, ' ')\nend", "    local s = {}\n   \
    \ for i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend", "  return table.concat(table_sequence(n), ' ')\nend", "  local s\
    \ = {'0'}\n  for i = 1, n do\n    s[i+1] = tostring(i)\n  end\n  return table.concat(s,\
    \ ' ')\nend", "  local result = {}\n  for i = 0, n do\n    result[i + 1] = i\n\
    \  end\n  return table.concat(result, ' ')\nend", "    local t = {}\n    for i\
    \ = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend", "    local res = {}\n    for i = 0, n do\n        res[#res + 1]\
    \ = tostring(i)\n    end\n    return table.concat(res, ' ')\nend", "  return table.concat(numbers(n),\
    \ ' ')\nend", "  local str = {}\n  for i = 0, n do\n    str[i+1] = tostring(i)\n\
    \  end\n  return table.concat(str, ' ')\nend", "    local arr = {}\n    for i\
    \ = 0, n do\n        arr[i + 1] = tostring(i)\n    end\n    return table.concat(arr,\
    \ ' ')\nend", "  local r = {}\n  for i = 0, n do\n    r[#r + 1] = tostring(i)\n\
    \  end\n  return table.concat(r, ' ')\nend", "  local s = {}\n  for i = 0, n do\n\
    \    s[i+1] = tostring(i)\n  end\n  return table.concat(s, ' ')\nend", "    local\
    \ s = {}\n    for i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return\
    \ table.concat(s, ' ')\nend", "  local numbers = {}\n  for i = 0, n do\n    numbers[i\
    \ + 1] = i\n  end\n  return table.concat(numbers, ' ')\nend", "  local s = \"\"\
    \n  for i = 0, n do\n    s = s .. i .. \" \"\n  end\n  return s\nend", "  local\
    \ res = { }\n  for i = 0, n do\n    res[#res + 1] = tostring(i)\n  end\n  return\
    \ table.concat(res, ' ')\nend", "    if n == 0 then\n        return '0'\n    else\n\
    \        return ((('%%s %%s'):format(n)):format(string_sequence(n-1)))\n    end\n\
    end", "  local ret = {}\n  for i = 0, n do\n    ret[i + 1] = i\n  end\n  return\
    \ table.concat(ret, ' ')\nend", "\tlocal res = {}\n\tfor i = 0, n do\n\t\tres[#res\
    \ + 1] = tostring(i)\n\tend\n\treturn table.concat(res, ' ')\nend", "    local\
    \ r = { }\n    for i = 0, n do\n        r[#r + 1] = tostring(i)\n    end\n   \
    \ return table.concat(r, ' ')\nend", "  local s = {}\n  for i = 0, n do\n    s[i+1]\
    \ = tostring(i)\n  end\n  return table.concat(s, ' ')\nend", "\tlocal t = {}\n\
    \tfor i = 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ ' ')\nend", "    local str = \"0\"\n    for i = 1, n do\n        str = str ..\
    \ \" \" .. i\n    end\n    return str\nend", "  local s = ''\n  for i = 0, n do\n\
    \    s = s .. i .. ' '\n  end\n  return s\nend", "    local t = {}\n    for i\
    \ = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend", "\tlocal space = ''\n\tlocal str = ''\n\tfor i = 0, n do\n\t\tstr\
    \ = str .. space .. i\n\t\tspace = ' '\n\tend\n\treturn str\nend", "    return\
    \ table.concat(utils.imap(tostring, utils.range(n+1)), ' ')\nend", "\tlocal sequence\
    \ = {}\n\tfor i = 0, n do\n\t\tsequence[i + 1] = i\n\tend\n\treturn table.concat(sequence,\
    \ ' ')\nend", "  local r = \"\"\n  for i = 0, n do\n    r = r .. i .. \" \"\n\
    \  end\n  return r\nend", "  local result = {}\n  for i = 0, n do\n    result[i\
    \ + 1] = i\n  end\n  return table.concat(result, ' ')\nend", "    local b = {}\n\
    \    for i = 0, n do\n        b[#b + 1] = tostring(i)\n    end\n    return table.concat(b,\
    \ ' ')\nend", "  local t = {}\n  for i = 0, n do\n    t[#t + 1] = i\n  end\n \
    \ return table.concat(t, ' ')\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\t\
    t[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\nend", "    local\
    \ out = {}\n    for i = 0, n do\n        out[#out + 1] = tostring(i)\n    end\n\
    \    return table.concat(out, ' ')\nend", "    local seq = ''\n    for i = 0,\
    \ n do\n        seq = seq .. tostring(i) .. ' '\n    end\n    return seq\nend",
  "  local sequence = {}\n  for i = 0, n do\n    table.insert(sequence, i)\n  end\n\
    \  return table.concat(sequence, ' ')\nend", "  return table.concat(map(tostring,\
    \ range(n + 1)), ' ')\nend", "    local t = {}\n    for i = 0, n do\n        t[#t\
    \ + 1] = tostring(i)\n    end\n    return table.concat(t, ' ')\nend", "  local\
    \ t = {}\n  for i = 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t,\
    \ ' ')\nend", "    local result = {}\n    for i = 0, n do\n        result[i +\
    \ 1] = i\n    end\n    return table.concat(result, ' ')\nend", "    local t =\
    \ {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return\
    \ table.concat(t, ' ')\nend", "  local s = \"\"\n  for i = 0, n do\n    s = s\
    \ .. \" \" .. i\n  end\n  return s\nend", "\tlocal result = { }\n\tfor k = 0,\
    \ n do\n\t\tresult[#result + 1] = tostring(k)\n\tend\n\treturn table.concat(result,\
    \ ' ')\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n\
    \    end\n    return table.concat(t, ' ')\nend", "    return table.concat(utility.map(range(n\
    \ + 1), tostring), ' ')\nend", "    local s = {}\n    for i = 0, n do\n      \
    \  s[#s + 1] = i\n    end\n    return table.concat(s, ' ')\nend", "  if n < 0\
    \ then\n    return ''\n  end\n  local s = {}\n  for i = 0, n do\n    s[#s + 1]\
    \ = tostring(i)\n  end\n  return table.concat(s, ' ')\nend", "\tlocal t = {}\n\
    \tfor i = 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ ' ')\nend", "  local t = {}\n  for i = 0, n do\n    t[#t + 1] = tostring(i)\n\
    \  end\n  return table.concat(t, ' ')\nend", "  local sequence = {}\n  for i =\
    \ 0, n do\n    table.insert(sequence, tostring(i))\n  end\n  return table.concat(sequence,\
    \ ' ')\nend", "    return coroutine.wrap(function ()\n        for i = 0, n do\n\
    \            coroutine.yield(i)\n        end\n    end)\nend", "  local s = ''\n\
    \  for i = 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend", "\tlocal t\
    \ = {}\n\tfor i = 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ ' ')\nend", "\tlocal s = \"\"\n\tfor i = 0, n do\n\t\ts = s .. tostring(i) ..\
    \ \" \"\n\tend\n\treturn s\nend", "    return table.concat(table.pack(table.unpack(range(n\
    \ + 1))), ' ')\nend", "  local t = {}\n  for i = 0, n do\n    t[#t + 1] = tostring(i)\n\
    \  end\n  return table.concat(t, ' ')\nend", "  local list = {}\n  for i = 0,\
    \ n do\n    list[#list + 1] = i\n  end\n  return table.concat(list, ' ')\nend",
  "    local s = ''\n    for i = 0, n do\n        s = s .. i .. ' '\n    end\n   \
    \ return s\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] =\
    \ tostring(i)\n    end\n    return table.concat(t, ' ')\nend", "    local s =\
    \ {}\n    for i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return\
    \ table.concat(s, ' ')\nend", "    if n == 0 then\n        return '0'\n    else\n\
    \        return string_sequence(n-1) .. ' ' .. tostring(n)\n    end\nend", " \
    \ local result = {};\n  for i = 0, n do\n    result[i+1] = tostring(i);\n  end\n\
    \  return table.concat(result, ' ');\nend", "    return table.concat(sequence(n),\
    \ ' ')\nend", "    local s = ''\n    for i = 0, n do\n        s = s .. ' ' ..\
    \ i\n    end\n    return s\nend", "  local s = ''\n  for i = 0, n do\n    s =\
    \ s .. i .. ' '\n  end\n  return s\nend", "    if n == 0 then\n        return\
    \ \"0\"\n    else\n        return string_sequence(n-1) .. \" \" .. tostring(n)\n\
    \    end\nend", "    local result = ''\n    for i = 0, n do\n        result =\
    \ result .. i .. ' '\n    end\n    return result\nend", "    local t = {}\n  \
    \  for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ ' ')\nend", "  return subrange(0, n):tostring(' ')\nend", "\tlocal out = {}\n\
    \tfor i = 0, n do\n\t\tout[i + 1] = tostring(i)\n\tend\n\treturn table.concat(out,\
    \ ' ')\nend", "    local r = {}\n    for i = 0, n do\n        r[#r + 1] = tostring(i)\n\
    \    end\n    return table.concat(r, ' ')\nend", "  local t = {}\n  for i = 0,\
    \ n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend", "  assert(type(n)\
    \ == 'number')\n  if n == 0 then\n    return '0'\n  else\n    return table.concat({string_sequence(n-1),\
    \ ' ', tostring(n)}, '')\n  end\nend", "\tlocal s = \"0\"\n\tfor i = 1, n do\n\
    \t\ts = s .. \" \" .. i\n\tend\n\treturn s\nend", "    local result = { n }\n\
    \    for i = n, 1, -1 do\n        result[i] = tostring(i-1)\n    end\n    return\
    \ table.concat(result, ' ')\nend", "    local s = \"\"\n    for i = 0, n do\n\
    \        s = s .. \" \" .. i\n    end\n    return s\nend", "  local retval = {}\n\
    \  for i = 0, n do\n    retval[i + 1] = i\n  end\n  return table.concat(retval,\
    \ ' ')\nend", "  local sequence = {}\n  for i = 0, n do\n    table.insert(sequence,\
    \ tostring(i))\n  end\n  return table.concat(sequence, ' ')\nend", "    local\
    \ values = {}\n    for i = 0, n do\n        values[i + 1] = tostring(i)\n    end\n\
    \    return table.concat(values, ' ')\nend", "  local s = ''\n  for i = 0, n do\n\
    \    s = s .. i .. ' '\n  end\n  return s\nend", "\tlocal t = {}\n\tfor i = 0,\
    \ n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\nend",
  "  local out = {}\n  for i = 0, n do\n    out[#out + 1] = tostring(i)\n  end\n \
    \ return table.concat(out, ' ')\nend", "  local out = {}\n  for i = 0, n do\n\
    \    out[#out + 1] = tostring(i)\n  end\n  return table.concat(out, ' ')\nend",
  "    local buffer = {}\n    for i = 0, n do\n        buffer[#buffer + 1] = tostring(i)\n\
    \    end\n    return table.concat(buffer, ' ')\nend", "\tlocal t = {}\n\tfor i\
    \ = 0, n do\n\t\tt[#t + 1] = i\n\tend\n\treturn table.concat(t, ' ')\nend", "\t\
    local r = ''\n\tfor i = 0, n do\n\t\tr = r .. i .. ' '\n\tend\n\treturn r\nend",
  "  local str = ''\n  for i = 0, n do\n    str = str .. i .. ' '\n  end\n  return\
    \ str\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
