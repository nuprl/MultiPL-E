name: HumanEval_25_factorize
language: lua
prompt: "-- Return table of prime factors of given integer in the order from smallest\
  \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
  \ to how many times it appeares in factorization.\n-- Input number should be equal\
  \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
  -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
  \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2, 2})\n\
  \    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
  \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
  \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
  \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal primeFactors = {}\n\twhile n % 2 == 0 do\n\t\ttable.insert(primeFactors,\
    \ 2)\n\t\tn = n / 2\n\tend\n\tfor i = 3, math.sqrt(n), 2 do\n\t\twhile n % i ==\
    \ 0 do\n\t\t\ttable.insert(primeFactors, i)\n\t\t\tn = n / i\n\t\tend\n\tend\n\
    \tif n > 2 then\n\t\ttable.insert(primeFactors, n)\n\tend\n\treturn primeFactors\n\
    end", "    local res = {}\n    local d = 2\n    repeat\n        while n % d ==\
    \ 0 do\n            table.insert(res, d)\n            n = n / d\n        end\n\
    \        d = d + 1\n    until n == 1\n    return res\nend", "  local function\
    \ factorizeR(n, fs)\n    if n == 1 then\n      return fs\n    else\n      local\
    \ p, e = factor(n)\n      for i = 1, e do\n        table.insert(fs, p)\n     \
    \ end\n      return factorizeR(n / p^e, fs)\n    end\n  end\n  return factorizeR(n,\
    \ {})\nend", "    local number = n\n    local divisor = 2\n    local factors =\
    \ {}\n    while number > 1 do\n        if number % divisor == 0 then\n       \
    \     table.insert(factors, divisor)\n            number = number / divisor\n\
    \        else\n            divisor = divisor + 1\n        end\n    end\n    return\
    \ factors\nend", "    local t = {}\n    for i = 2, n do\n        while n % i ==\
    \ 0 do\n            table.insert(t, i)\n            n = n / i\n        end\n \
    \   end\n    return t\nend", "    local factors = {}\n    local divisor = 2\n\
    \    while n > 1 do\n        if n % divisor == 0 then\n            table.insert(factors,\
    \ divisor)\n            n = n / divisor\n        else\n            divisor = divisor\
    \ + 1\n        end\n    end\n    return factors\nend", "    local factors = {}\n\
    \    while n % 2 == 0 do\n        n = n / 2\n        table.insert(factors, 2)\n\
    \    end\n    local factor = 3\n    while n > 1 do\n        while n % factor ==\
    \ 0 do\n            n = n / factor\n            table.insert(factors, factor)\n\
    \        end\n        factor = factor + 2\n    end\n    return factors\nend",
  "  local factors = {}\n  local i = 2\n  while n > 1 do\n    while n % i == 0 do\n\
    \      table.insert(factors, i)\n      n = n / i\n    end\n    i = i + 1\n  end\n\
    \  return factors\nend", "    local _, factors = get_divisors(n)\n    return factors\n\
    end", "    local factors = {}\n    if n < 2 then\n        return factors\n   \
    \ end\n    local n_copy = n\n    local k = 2\n    while k <= n_copy do\n     \
    \   if n_copy % k == 0 then\n            n_copy = n_copy / k\n            table.insert(factors,\
    \ k)\n        else\n            k = k + 1\n        end\n    end\n    return factors\n\
    end", "    local result = {}\n    if n <= 1 then\n        return result\n    end\n\
    \    -- 2 is a prime factor of every number\n    while n % 2 == 0 do\n       \
    \ result[#result + 1] = 2\n        n = n / 2\n    end\n    -- 3 is a prime factor\
    \ of every number except 2, so we can ignore evens and start with 3, then step\
    \ by 2s\n    for i = 3, n, 2 do\n        while n % i == 0 do\n            result[#result\
    \ + 1] = i\n            n = n / i\n        end\n    end\n    return result\nend",
  "  local function argmax(array)\n    local max = math.huge * -1\n    local max_arg\
    \ = nil\n    for i = 1, #array do\n      if array[i] > max then\n        max =\
    \ array[i]\n        max_arg = i\n      end\n    end\n    return max_arg\n  end",
  "  local factors = {}\n  while n > 1 do\n    local factor = 2\n    while n % factor\
    \ ~= 0 do\n      factor = factor + 1\n    end\n    factors[#factors + 1] = factor\n\
    \    n = n / factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ divisor = 2\n  while divisor <= n do\n    if n % divisor == 0 then\n      table.insert(factors,\
    \ divisor)\n      n = n / divisor\n    else\n      divisor = divisor + 1\n   \
    \ end\n  end\n  return factors\nend", "\tlocal res = {}\n\twhile n % 2 == 0 do\n\
    \t\tres[#res + 1] = 2\n\t\tn = n / 2\n\tend\n\tfor i = 3, math.sqrt(n), 2 do\n\
    \t\twhile n % i == 0 do\n\t\t\tres[#res + 1] = i\n\t\t\tn = n / i\n\t\tend\n\t\
    end\n\tif n > 2 then\n\t\tres[#res + 1] = n\n\tend\n\treturn res\nend", "    local\
    \ prime_factors = {}\n    local i = 2\n    while i < n do\n        if n % i ==\
    \ 0 then\n            table.insert(prime_factors, i)\n            n = n / i\n\
    \        else\n            i = i + 1\n        end\n    end\n    table.insert(prime_factors,\
    \ n)\n    return prime_factors\nend", "\tlocal res = {}\n\tif n == 1 then return\
    \ res end\n\tfor p in isqrt_primes(n) do\n\t\twhile n % p == 0 do\n\t\t\tres[#res+1]\
    \ = p\n\t\t\tn = n / p\n\t\tend\n\tend\n\treturn res\nend", "    local factors\
    \ = {}\n    for i = 2, math.floor(math.sqrt(n)) do\n        while n % i == 0 do\n\
    \            n = n / i\n            table.insert(factors, i)\n        end\n  \
    \  end\n    if n > 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend", "    local factors = {}\n    local primes = prime_numbers(n)\n\
    \    for _, v in ipairs(primes) do\n        if n == 1 then\n            break\n\
    \        end\n        local remainder = n\n        while remainder % v == 0 do\n\
    \            remainder = remainder / v\n            table.insert(factors, v)\n\
    \        end\n    end\n    return factors\nend", "    local factors = {}\n   \
    \ local d = 2\n    while n > 1 do\n        while n % d == 0 do\n            table.insert(factors,\
    \ d)\n            n = n / d\n        end\n        d = d + 1\n    end\n    return\
    \ factors\nend", "\tlocal t = {}\n\tlocal factors = { 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 }\n\t\
    for i = 1, #factors do\n\t\tlocal f = factors[i]\n\t\twhile n % f == 0 do\n\t\t\
    \tn = n / f\n\t\t\ttable.insert(t, f)\n\t\tend\n\tend\n\treturn t\nend", "  local\
    \ factorization = {}\n  local i = 2\n  while i*i <= n do\n    if n % i == 0 then\n\
    \      n = n/i\n      table.insert(factorization, i)\n    else\n      i = i +\
    \ 1\n    end\n  end\n  table.insert(factorization, n)\n  return factorization\n\
    end", "\tassert(type(n) == \"number\" and n > 0 and n == math.floor(n), \"invalid\
    \ input n\")\n\tlocal result = {}\n\twhile n % 2 == 0 do\n\t\tresult[#result +\
    \ 1] = 2\n\t\tn = n / 2\n\tend\n\tfor divisor = 3, math.sqrt(n), 2 do\n\t\twhile\
    \ n % divisor == 0 do\n\t\t\tresult[#result + 1] = divisor\n\t\t\tn = n / divisor\n\
    \t\tend\n\tend\n\tif n > 1 then\n\t\tresult[#result + 1] = n\n\tend\n\treturn\
    \ result\nend", "  local prime_factors = {}\n  local factors = {}\n  local i =\
    \ 2\n  while n ~= 1 do\n    if n % i == 0 then\n      table.insert(prime_factors,\
    \ i)\n      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  for _, v in\
    \ ipairs(prime_factors) do\n    factors[v] = (factors[v] or 0) + 1\n  end\n  return\
    \ factors\nend", "    local factors = {}\n    for i = 2, n, 1 do\n        while\
    \ n % i == 0 do\n            table.insert(factors, i)\n            n = n / i\n\
    \        end\n    end\n    return factors\nend", "    local function f(n, p)\n\
    \        while n%p == 0 do\n            n = n/p\n            table.insert(res,\
    \ p)\n        end\n        return n\n    end\n    local res = {}\n    n = f(n,\
    \ 2)\n    n = f(n, 3)\n    local p = 5\n    while n > 1 do\n        n = f(n, p)\n\
    \        p = p + 2\n        n = f(n, p)\n        p = p + 4\n    end\n    return\
    \ res\nend", "    local f = {}\n    while n % 2 == 0 do\n        f[#f + 1] = 2\n\
    \        n = n / 2\n    end\n    for i = 3, math.sqrt(n), 2 do\n        while\
    \ n % i == 0 do\n            f[#f + 1] = i\n            n = n / i\n        end\n\
    \    end\n    if n > 2 then\n        f[#f + 1] = n\n    end\n    return f\nend",
  "\tlocal a = {}\n\tif n <= 0 then\n\t\treturn {n}\n\tend\n\twhile n > 1 do\n\t\t\
    local p, r = smallest_prime_factor(n)\n\t\tif not p then\n\t\t\treturn {n}\n\t\
    \tend\n\t\ta[#a + 1] = p\n\t\tn = r\n\tend\n\treturn a\nend", "    local factors\
    \ = {}\n    local divisor = 2\n    while n > 1 do\n        while n % divisor ==\
    \ 0 do\n            n = n / divisor\n            table.insert(factors, divisor)\n\
    \        end\n        divisor = divisor + 1\n    end\n    return factors\nend",
  "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        while n % i ==\
    \ 0 do\n            n = n / i\n            table.insert(factors, i)\n        end\n\
    \    end\n    if n > 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend", "\tlocal copy = n\n\tlocal factors = {}\n\tlocal i = 2\n\twhile\
    \ (i <= copy) do\n\t\tif (copy % i == 0) then\n\t\t\tfactors[#factors + 1] = i\n\
    \t\t\tcopy = copy / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\n\
    end", "  local function factors(n, factors)\n    factors = factors or {}\n   \
    \ local p = 2\n    while (n ~= 1) do\n      while (n % p == 0) do\n        table.insert(factors,\
    \ p)\n        n = n / p\n      end\n      p = p + 1\n    end\n    return factors\n\
    \  end\n  return factors(n)\nend", "\tassert(n > 0, \"n must be positive\")\n\t\
    if n == 1 then return {} end\n\tlocal f, fin, ret = 2, 1, {}\n\twhile n > 1 do\n\
    \t\tif n % f == 0 then\n\t\t\tret[fin] = f\n\t\t\tfin = fin + 1\n\t\t\tn = n /\
    \ f\n\t\telse\n\t\t\tf = f + 1\n\t\tend\n\tend\n\treturn ret\nend", "    local\
    \ primes = {}\n    for i = 2, n do\n        if isPrime(i) then\n            primes[#primes\
    \ + 1] = i\n        end\n    end\n    local factors = {}\n    for _, p in ipairs(primes)\
    \ do\n        while n % p == 0 do\n            n = n / p\n            factors[#factors\
    \ + 1] = p\n        end\n    end\n    return factors\nend", "  local i, j = 2,\
    \ 1\n  local factors = {}\n  repeat\n    if n % i == 0 then\n      n = n / i\n\
    \      factors[j] = i\n      j = j + 1\n    else\n      i = i + 1\n    end\n \
    \ until n == 1\n  return factors\nend", "    local factors = {}\n    local lp\
    \ = 0\n    while n % 2 == 0 do\n        lp = 2\n        table.insert(factors,\
    \ 2)\n        n = n / 2\n    end\n    local l = math.sqrt(n)\n    for i = 3, l,\
    \ 2 do\n        while n % i == 0 do\n            lp = i\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 and n ~= lp then\n\
    \        table.insert(factors, n)\n    end\n    return factors\nend", "\tlocal\
    \ primeFactors = {}\n\tlocal factor = 2\n\twhile n > 1 do\n\t\twhile n % factor\
    \ == 0 do\n\t\t\tn = n / factor\n\t\t\ttable.insert(primeFactors, factor)\n\t\t\
    end\n\t\tfactor = factor + 1\n\tend\n\treturn primeFactors\nend", "  if not n\
    \ then return nil end\n  if n == 1 then return {1} end\n  local result = {}\n\
    \  for p, _ in pairs(primes(math.sqrt(n))) do\n    while n % p == 0 do\n     \
    \ n = n / p\n      table.insert(result, p)\n    end\n  end\n  return result\n\
    end", "  -- TODO: Implement this function.\n  local result = {}\n  for i = 2,\
    \ n/2 do\n    if n % i == 0 then\n      if isPrime(i) then\n        table.insert(result,\
    \ i)\n      end\n    end\n  end\n  return result\nend", "    local factors = {}\n\
    \    for i = 2, n do\n        if n%i == 0 then\n            n = n/i\n        \
    \    table.insert(factors, i)\n            if n == 1 then\n                break\n\
    \            end\n        end\n    end\n    return factors\nend", "\tlocal factors\
    \ = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\tif n % d == 0 then\n\t\t\ttable.insert(factors,\
    \ d)\n\t\t\tn = n / d\n\t\telse\n\t\t\td = d + 1\n\t\tend\n\tend\n\treturn factors\n\
    end", "  -- Divide n by smallest possible prime factor until we arrive at 1.\n\
    \  -- Then return table of all the factors we encountered.\n  local function recur(m,\
    \ factors)\n    local min_factor = factor(m)\n    if min_factor == m then\n  \
    \    return table.insert(factors, m)\n    else\n      table.insert(factors, min_factor)\n\
    \      return recur(m / min_factor, factors)\n    end\n  end\n  return recur(n,\
    \ {})\nend", "  if n <= 0 then return {} end\n  local res = {}\n  while n % 2\
    \ == 0 do\n    res[#res + 1] = 2\n    n = n / 2\n  end\n  for i = 3, math.sqrt(n),\
    \ 2 do\n    while n % i == 0 do\n      res[#res + 1] = i\n      n = n / i\n  \
    \  end\n  end\n  if n > 2 then\n    res[#res + 1] = n\n  end\n  return res\nend",
  "    assert(type(n) == \"number\" and n >= 1 and n % 1 == 0, \"invalid input\")\n\
    \    local factors = {}\n    local primeFactor = 2\n    while n ~= 1 do\n    \
    \    local exponent = 0\n        while n % primeFactor == 0 do\n            n\
    \ = n / primeFactor\n            exponent = exponent + 1\n        end\n      \
    \  if exponent > 0 then\n            for i = 1, exponent do\n                table.insert(factors,\
    \ primeFactor)\n            end\n        end\n        primeFactor = primeFactor\
    \ + 1\n    end\n    return factors\nend", '  if n < 2 then return {} end', " \
    \ local t = {}\n  local i = 2\n  local r = n\n  while i * i <= r do\n    if math.fmod(r,\
    \ i) == 0 then\n      table.insert(t, i)\n      r = r / i\n    else\n      i =\
    \ i + 1\n    end\n  end\n  if r > 1 then\n    table.insert(t, r)\n  end\n  return\
    \ t\nend", "    local factors = {}\n    local divisor = 2\n    while n > 1 do\n\
    \        while n % divisor == 0 do\n            table.insert(factors, divisor)\n\
    \            n = n / divisor\n        end\n        divisor = divisor + 1\n   \
    \ end\n    return factors\nend", "\tif n <= 1 then\n\t\treturn {}\n\tend\n\tlocal\
    \ max_factor = math.floor(math.sqrt(n))\n\tfor i = 2, max_factor do\n\t\tif n\
    \ % i == 0 then\n\t\t\tlocal factors = factorize(n/i)\n\t\t\ttable.insert(factors,\
    \ i)\n\t\t\treturn factors\n\t\tend\n\tend\n\treturn {n}\nend", "    local res\
    \ = {}\n    local d = 2\n    while n > 1 do\n        if n % d == 0 then\n    \
    \        table.insert(res, d)\n            n = n / d\n        else\n         \
    \   d = d + 1\n        end\n    end\n    return res\nend", "    local factors\
    \ = {}\n    while n % 2 == 0 do\n        table.insert(factors, 2)\n        n =\
    \ n / 2\n    end\n    for i = 3, math.sqrt(n), 2 do\n        while n % i == 0\
    \ do\n            table.insert(factors, i)\n            n = n / i\n        end\n\
    \    end\n    if n > 2 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend", "\tlocal t = {}\n\twhile n > 1 do\n\t\tlocal f = 2\n\t\twhile\
    \ f <= n do\n\t\t\tif n % f == 0 then\n\t\t\t\tn = n / f\n\t\t\t\ttable.insert(t,\
    \ f)\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tf = f + 1\n\t\tend\n\tend\n\treturn t\n\
    end", "\tlocal t = {}\n\tfor i = 2, n do\n\t\twhile n % i == 0 do\n\t\t\ttable.insert(t,\
    \ i)\n\t\t\tn = n / i\n\t\tend\n\tend\n\treturn t\nend", "    local result = {}\n\
    \    if n == 1 then\n        return result\n    end\n    local divisor = 2\n \
    \   while n > 1 do\n        while n % divisor == 0 do\n            table.insert(result,\
    \ divisor)\n            n = n / divisor\n        end\n        divisor = divisor\
    \ + 1\n    end\n    return result\nend", "  if n < 1 then\n    error(\"Invalid\
    \ argument: input number should be > 0 but it is: \" .. n)\n  end\n  if n == 1\
    \ then\n    return {}\n  end\n  local factors = {}\n  local divisor = 2\n  while\
    \ n ~= 1 do\n    local divisible = n % divisor == 0\n    if divisible then\n \
    \     table.insert(factors, divisor)\n      n = n / divisor\n    else\n      divisor\
    \ = divisor + 1\n    end\n  end\n  return factors\nend", "  local function find_next_factor(n)\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n      \
    \  return i\n      end\n    end\n    return n\n  end", "    if n == 1 then\n \
    \       return {}\n    end\n    local prime_factors = {}\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        while n % i == 0 do\n            n = n / i\n            table.insert(prime_factors,\
    \ i)\n        end\n    end\n    if n > 1 then\n        table.insert(prime_factors,\
    \ n)\n    end\n    return prime_factors\nend", "  local factors = {}\n  while\
    \ n % 2 == 0 do\n    table.insert(factors, 2)\n    n = n / 2\n  end\n  local p\
    \ = 3\n  while n > 1 do\n    while n % p == 0 do\n      table.insert(factors,\
    \ p)\n      n = n / p\n    end\n    p = p + 2\n  end\n  return factors\nend",
  "    local factors = {}\n    local original = n\n    local firstPrime = 2\n    while\
    \ n > 1 do\n        if n % firstPrime == 0 then\n            factors[#factors\
    \ + 1] = firstPrime\n            n = n / firstPrime\n        else\n          \
    \  firstPrime = nextPrime(firstPrime)\n        end\n    end\n    return factors\n\
    end", "    -- Find the prime factors of n.\n    -- First we find the smallest\
    \ prime factor of n, then call ourselves recursively\n    -- to get the prime\
    \ factors of n/p.\n    local n = n\n    local function smallest_factor(n)\n  \
    \      -- return the smallest prime factor of n.\n        for i = 2, n do\n  \
    \          if n % i == 0 then\n                return i\n            end\n   \
    \     end\n        return nil\n    end\n    local p = smallest_factor(n)\n   \
    \ if p == nil then\n        return {n}\n    else\n        return merge(factorize(n\
    \ / p), {p})\n    end\nend", "\tlocal factors = {}\n\tlocal i = 2\n\twhile n >\
    \ 1 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors, i)\n\t\t\tn = n /\
    \ i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\nend", "  local\
    \ factors = {}\n  while n > 1 do\n    local factor = get_smallest_prime_factor(n)\n\
    \    table.insert(factors, factor)\n    n = n / factor\n  end\n  return factors\n\
    end", "\tlocal factors = {}\n\tlocal prime_i = 1\n\twhile n > 1 do\n\t\tlocal\
    \ prime = primes[prime_i]\n\t\tif n % prime == 0 then\n\t\t\ttable.insert(factors,\
    \ prime)\n\t\t\tn = n / prime\n\t\telse\n\t\t\tprime_i = prime_i + 1\n\t\tend\n\
    \tend\n\treturn factors\nend", "\tlocal result = {}\n\tlocal number = n\n\tfor\
    \ i = 2, n do\n\t\twhile number % i == 0 do\n\t\t\tnumber = number / i\n\t\t\t\
    result[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend", "  assert(n >\
    \ 0)\n  local factors = {}\n  local d = 2\n  while n > 1 do\n    while n % d ==\
    \ 0 do\n      factors[#factors + 1] = d\n      n = n / d\n    end\n    d = d +\
    \ 1\n  end\n  return factors\nend", "  local factors = {}\n  local divisor = 2\n\
    \  while (n > 1) do\n    if (n % divisor == 0) then\n      table.insert(factors,\
    \ divisor)\n      n = n / divisor\n    else\n      divisor = divisor + 1\n   \
    \ end\n  end\n  return factors\nend", "    local factors = {}\n    local d = 2\n\
    \    while n > 1 do\n        while n % d == 0 do\n            table.insert(factors,\
    \ d)\n            n = n / d\n        end\n        d = d + 1\n    end\n    return\
    \ factors\nend", "\tlocal factors = {}\n\tlocal p = 2\n\twhile n > 1 do\n\t\t\
    if n % p == 0 then\n\t\t\tfactors[#factors + 1] = p\n\t\t\tn = n / p\n\t\telse\n\
    \t\t\tp = p + 1\n\t\tend\n\tend\n\treturn factors\nend", "\tlocal f = {}\n\tfor\
    \ i = 2, n do\n\t\twhile n % i == 0 do\n\t\t\ttable.insert(f, i)\n\t\t\tn = n\
    \ / i\n\t\tend\n\tend\n\treturn f\nend", "    local factors = {}\n    for i =\
    \ 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \            n = n / i\n            i = 1\n        end\n    end\n    return factors\n\
    end", "\tif n == 1 then\n\t\treturn {}\n\tend\n\tlocal p = find_prime_factor(n)\n\
    \tlocal r = factorize(n / p)\n\tr[#r + 1] = p\n\treturn r\nend", "  local m =\
    \ n\n  local factors = {}\n  local i = 2\n  while i * i <= m do\n    if m % i\
    \ == 0 then\n      table.insert(factors, i)\n      m = m / i\n    else\n     \
    \ i = i + 1\n    end\n  end\n  if m > 1 then\n    table.insert(factors, m)\n \
    \ end\n  return factors\nend", "\tlocal factors = {}\n\tlocal q = n\n\twhile q\
    \ ~= 1 do\n\t\tlocal p = smallest_prime_factor(q)\n\t\ttable.insert(factors, p)\n\
    \t\tq = q / p\n\tend\n\treturn factors\nend", "\tlocal r = {}\n\tif n == 1 then\n\
    \t\treturn r\n\tend\n\tfor i=2,n-1 do\n\t\tif n % i == 0 then\n\t\t\tr[#r+1] =\
    \ i\n\t\t\tlocal sub = factorize(n / i)\n\t\t\tfor i=1,#sub do\n\t\t\t\tr[#r+1]\
    \ = sub[i]\n\t\t\tend\n\t\t\treturn r\n\t\tend\n\tend\n\tr[#r+1] = n\n\treturn\
    \ r\nend", "  local factors = {}\n  local function loop(n)\n    for i = 2, n -\
    \ 1 do\n      if math.fmod(n, i) == 0 then\n        table.insert(factors, i)\n\
    \        loop(n / i)\n        break\n      end\n    end\n  end\n  loop(n)\n  table.insert(factors,\
    \ n)\n  return factors\nend", "    local factors = {}\n    local i = 2\n    local\
    \ limit = n\n    while i <= limit do\n        if n % i == 0 then\n           \
    \ limit = n / i\n            table.insert(factors, i)\n        else\n        \
    \    i = i + 1\n        end\n    end\n    return factors\nend", "\tlocal factors\
    \ = {}\n\twhile n > 1 do\n\t\tfor k, p in ipairs(primes) do\n\t\t\tif n % p ==\
    \ 0 then\n\t\t\t\ttable.insert(factors, p)\n\t\t\t\tn = n / p\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn factors\nend", "\tif not n or n <= 0 then\n\
    \t\treturn {}\n\tend\n\tif n == 1 then\n\t\treturn {1}\n\tend\n\tlocal factors\
    \ = {}\n\twhile n % 2 == 0 do\n\t\tfactors[#factors + 1] = 2\n\t\tn = n / 2\n\t\
    end\n\tfor f = 3, sqrt(n), 2 do\n\t\twhile n % f == 0 do\n\t\t\tfactors[#factors\
    \ + 1] = f\n\t\t\tn = n / f\n\t\tend\n\tend\n\tif n > 2 then\n\t\tfactors[#factors\
    \ + 1] = n\n\tend\n\treturn factors\nend", "    assert(type(n) == \"number\",\
    \ \"argument n should be a number\")\n    assert(n > 0, \"argument n should be\
    \ greater than 0\")\n    if n == 1 then return {} end", "  assert(n>=1, \"factorize:\
    \ input number should be >= 1\")\n  local t={}\n  while n%2==0 do\n    t[#t+1]=2\n\
    \    n=n/2\n  end\n  local d=3\n  while n>1 do\n    while n%d==0 do\n      t[#t+1]=d\n\
    \      n=n/d\n    end\n    d=d+2\n  end\n  return t\nend", "    local result =\
    \ {}\n    local factor = 2\n    while n > 1 do\n        while n % factor == 0\
    \ do\n            table.insert(result, factor)\n            n = n / factor\n \
    \       end\n        factor = factor + 1\n    end\n    return result\nend", " \
    \   local numbers = {}\n    if n == 1 then\n        return {1}\n    end\n    if\
    \ n == 2 then\n        return {2}\n    end\n    for i = 2, n do\n        if n\
    \ % i == 0 then\n            table.insert(numbers, i)\n            n = n / i\n\
    \            i = i - 1\n        end\n    end\n    return numbers\nend", "  local\
    \ factors = {}\n  for factor in primes(n) do\n    while n % factor == 0 do\n \
    \     table.insert(factors, factor)\n      n = n / factor\n    end\n  end\n  return\
    \ factors\nend", "\tassert(n > 0)\n\tlocal res = {}\n\tfor _, prime in ipairs(primes)\
    \ do\n\t\twhile n % prime == 0 do\n\t\t\tn = n / prime\n\t\t\ttable.insert(res,\
    \ prime)\n\t\tend\n\tend\n\tassert(n == 1)\n\treturn res\nend", "    assert(type(n)\
    \ == \"number\" and n >= 1 and math.floor(n) == n, \"not valid input for factorize\"\
    )\n    local factors = {}\n    while n > 1 do\n        local factor = math.min(get_prime(n),\
    \ n)\n        table.insert(factors, factor)\n        n = n / factor\n    end\n\
    \    return factors\nend", "  if n == 1 then return {1} end\n  local result =\
    \ {}\n  while n % 2 == 0 do\n    table.insert(result, 2)\n    n = n / 2\n  end\n\
    \  local i = 3\n  while i <= math.sqrt(n) do\n    while n % i == 0 do\n      table.insert(result,\
    \ i)\n      n = n / i\n    end\n    i = i + 2\n  end\n  if n > 2 then\n    table.insert(result,\
    \ n)\n  end\n  return result\nend", "    local factors = {}\n    local k = 2\n\
    \    while k * k <= n do\n        if n % k == 0 then\n            table.insert(factors,\
    \ k)\n            n = n / k\n        else\n            k = k + 1\n        end\n\
    \    end\n    table.insert(factors, n)\n    return factors\nend", "\tlocal result\
    \ = {}\n\tfor i = 2, math.sqrt(n) do\n\t\twhile n % i == 0 do\n\t\t\ttable.insert(result,\
    \ i)\n\t\t\tn = n / i\n\t\tend\n\tend\n\tif n > 1 then\n\t\ttable.insert(result,\
    \ n)\n\tend\n\treturn result\nend", "    local factors = {}\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       n = n / i\n            i = i - 1\n        end\n    end\n    return factors\n\
    end", "    local factorization = {}\n    local n_init = n\n    local i = 2\n \
    \   while n ~= 1 do\n        if n % i == 0 then\n            n = n / i\n     \
    \       table.insert(factorization, i)\n        else\n            i = i + 1\n\
    \        end\n    end\n    assert(reduce_mul(factorization) == n_init, \"Invalid\
    \ factorization\")\n    return factorization\nend", "  local factors = {}\n  local\
    \ d = 2\n  while n > 1 do\n    while n % d == 0 do\n      factors[#factors + 1]\
    \ = d\n      n = n / d\n    end\n    d = d + 1\n  end\n  return factors\nend",
  "  local _, factors = for_each_factor(n, function(cur_factor) return cur_factor\
    \ end)\n  return factors\nend", "    local t={}\n    local m=n\n    local factor=2\n\
    \    while factor <= m do\n        if m % factor == 0 then\n            m = m\
    \ / factor\n            table.insert(t, factor)\n        else\n            factor\
    \ = factor + 1\n        end\n    end\n    return t\nend", "\t-- TODO: implement\
    \ this\n\tlocal k = 2\n\tlocal factors = {}\n\tlocal powers = {}\n\twhile n ~=\
    \ 1 do\n\t\twhile n % k == 0 do\n\t\t\tn = n / k\n\t\t\ttable.insert(factors,\
    \ k)\n\t\tend\n\t\tk = k + 1\n\tend\n\tlocal result = {}\n\tfor i = 1, #factors\
    \ do\n\t\ttable.insert(result, factors[i])\n\tend\n\treturn result\nend", "  local\
    \ prime_factors = {}\n  local val = n\n  while val % 2 == 0 do\n    val = val\
    \ / 2\n    table.insert(prime_factors, 2)\n  end\n  while val % 3 == 0 do\n  \
    \  val = val / 3\n    table.insert(prime_factors, 3)\n  end\n  local i = 5\n \
    \ local inc = 2\n  while i*i <= val do\n    while val % i == 0 do\n      val =\
    \ val / i\n      table.insert(prime_factors, i)\n    end\n    i = i + inc\n  \
    \  inc = 6 - inc\n  end\n  if val > 1 then\n    table.insert(prime_factors, val)\n\
    \  end\n  return prime_factors\nend", "    local factors = {}\n    local d = 2\n\
    \    local n = n", "    local res = {}\n    for i=2,n-1 do\n        if n % i ==\
    \ 0 then\n            for j=1,math.floor(math.log(n)/math.log(i)) do\n       \
    \         res[#res+1] = i\n            end\n        end\n    end\n    return res\n\
    end", "\tlocal result = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\twhile n % i ==\
    \ 0 do\n\t\t\ttable.insert(result, i)\n\t\t\tn = n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend", "\tlocal limit = math.sqrt(n)\n\tlocal res = {}\n\
    \tlocal function helper(n, p)\n\t\tif n == 1 then\n\t\t\treturn\n\t\tend\n\t\t\
    while n % p == 0 do\n\t\t\ttable.insert(res, p)\n\t\t\tn = n / p\n\t\tend\n\t\t\
    if n > 1 then\n\t\t\thelper(n, p + 1)\n\t\tend\n\tend\n\thelper(n, 2)\n\treturn\
    \ res\nend", "\tassert(type(n) == \"number\", \"Given value is not a number\"\
    )\n\tassert(n > 0, \"Given value is less than or equal to zero\")\n\tassert(math.floor(n)\
    \ == n, \"Given value is not an integer\")\n\tlocal factors = {}\n\twhile n %\
    \ 2 == 0 do\n\t\tfactors[#factors + 1] = 2\n\t\tn = n / 2\n\tend\n\tlocal limit\
    \ = math.sqrt(n)\n\tlocal div = 3\n\twhile n > 1 and div <= limit do\n\t\twhile\
    \ n % div == 0 do\n\t\t\tfactors[#factors + 1] = div\n\t\t\tn = n / div\n\t\t\
    end\n\t\tdiv = div + 2\n\tend\n\tif n > 1 then\n\t\tfactors[#factors + 1] = n\n\
    \tend\n\treturn factors\nend", "\tlocal factors = {}\n\twhile n % 2 == 0 do\n\t\
    \ttable.insert(factors, 2)\n\t\tn = n / 2\n\tend\n\t\n\tlocal f = 3\n\twhile f\
    \ * f <= n do\n\t\tif n % f == 0 then\n\t\t\ttable.insert(factors, f)\n\t\t\t\
    n = n / f\n\t\telse\n\t\t\tf = f + 2\n\t\tend\n\tend\n\t\n\tif n > 2 then\n\t\t\
    table.insert(factors, n)\n\tend\n\t\n\treturn factors\nend", "    local factors\
    \ = {}\n    while n % 2 == 0 do\n        table.insert(factors, 2)\n        n =\
    \ n / 2\n    end\n    local p = 3\n    while n > 1 do\n        while n % p ==\
    \ 0 do\n            table.insert(factors, p)\n            n = n / p\n        end\n\
    \        p = p + 2\n    end\n    return factors\nend", "    local factors = {}\n\
    \    if n < 2 then\n        return factors\n    end\n    local d = 2\n    while\
    \ n > 1 do\n        while n % d == 0 do\n            factors[#factors + 1] = d\n\
    \            n = n / d\n        end\n        d = d + 1\n    end\n    return factors\n\
    end", "  if n <= 0 then\n    return {}\n  end\n  local factors = {}\n  local d\
    \ = 2\n  while n > 1 do\n    while n % d == 0 do\n      table.insert(factors,\
    \ d)\n      n = n / d\n    end\n    d = d + 1\n  end\n  return factors\nend",
  "\tlocal results = {}\n\tlocal factors = {}\n\tlocal d = 2\n\tlocal n = n\n\twhile\
    \ n > 1 do\n\t\tif n % d == 0 then\n\t\t\tn = n / d\n\t\t\ttable.insert(factors,\
    \ d)\n\t\telse\n\t\t\td = d + 1\n\t\tend\n\tend\n\t-- returns a table of integers,\
    \ each integer tableed number of times corresponding to how many times it appeares\
    \ in factorization\n\treturn factors\nend", "    assert(n > 0)\n    local out\
    \ = {}\n    for i = 2, n do\n        if not is_prime(i) then\n            goto\
    \ continue\n        end\n        repeat\n            n = n / i\n            table.insert(out,\
    \ i)\n        until n % i ~= 0\n        ::continue::\n    end\n    return out\n\
    end", "    local factors = {}\n    local d = 2\n    while d <= n do\n        if\
    \ n % d == 0 then\n            table.insert(factors, d)\n            n = n / d\n\
    \        else\n            d = d + 1\n        end\n    end\n    return factors\n\
    end", "    local factors = {}\n    local function add_factor(f)\n        table.insert(factors,\
    \ f)\n    end\n    local function prime_factors(n)\n        for f in primes(n),\
    \ all_factors(n) do\n            add_factor(f)\n        end\n    end\n    prime_factors(n)\n\
    \    return factors\nend", "    local _f = function(i, n)\n        if n % i ==\
    \ 0 then\n            n = n / i\n            return i, n\n        end\n    end\n\
    \    local f = {}\n    while n > 1 do\n        for i = 2, 9 do\n            local\
    \ x, y = _f(i, n)\n            if x then\n                table.insert(f, x)\n\
    \                n = y\n                break\n            end\n        end\n\
    \    end\n    return f\nend", "    local factors = {}\n    local divisor = 2\n\
    \    repeat\n        local remainder = n % divisor\n        if remainder == 0\
    \ then\n            factors[#factors + 1] = divisor\n            n = n / divisor\n\
    \        else\n            divisor = divisor + 1\n        end\n    until n ==\
    \ 1\n    return factors\nend", "\tlocal prime_factors = {}\n\tfor i = 2, math.sqrt(n)\
    \ do\n\t\tif n % i == 0 then\n\t\t\tprime_factors[#prime_factors + 1] = i\n\t\t\
    \tn = n / i\n\t\t\ti = 1\n\t\tend\n\tend\n\treturn prime_factors\nend", "\tif\
    \ type(n) ~= \"number\" then return nil end\n\tlocal prime_factors = {}\n\t--\
    \ test integer\n\tn = math.floor(n)\n\tif n < 2 then return nil end\n\t-- test\
    \ odd\n\tif n % 2 == 0 then\n\t\ttable.insert(prime_factors, 2)\n\t\twhile n %\
    \ 2 == 0 do\n\t\t\tn = n / 2\n\t\tend\n\tend\n\t-- test rest\n\tfor i = 3, math.sqrt(n),\
    \ 2 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(prime_factors, i)\n\t\t\twhile\
    \ n % i == 0 do\n\t\t\t\tn = n / i\n\t\t\tend\n\t\tend\n\tend\n\t-- insert last\n\
    \tif n > 2 then\n\t\ttable.insert(prime_factors, n)\n\tend\n\treturn prime_factors\n\
    end", "    local factors = {}\n    while n % 2 == 0 do\n        table.insert(factors,\
    \ 2)\n        n = n / 2\n    end\n    local divisor = 3\n    while n > 1 do\n\
    \        while n % divisor == 0 do\n            table.insert(factors, divisor)\n\
    \            n = n / divisor\n        end\n        divisor = divisor + 2\n   \
    \ end\n    return factors\nend", "  local factors = {}\n  local d = 2\n  while\
    \ n > 1 do\n    while n % d == 0 do\n      factors[#factors + 1] = d\n      n\
    \ = n / d\n    end\n    d = d + 1\n  end\n  return factors\nend", "\tlocal factors\
    \ = {}\n\t\n\twhile n % 2 == 0 do\n\t\tfactors[#factors + 1] = 2\n\t\tn = n /\
    \ 2\n\tend\n\t\n\tlocal i = 3\n\tlocal sqrtn = math.sqrt(n)\n\twhile i <= sqrtn\
    \ do\n\t\twhile n % i == 0 do\n\t\t\tfactors[#factors + 1] = i\n\t\t\tn = n /\
    \ i\n\t\tend\n\t\ti = i + 2\n\tend\n\t\n\tif n > 2 then\n\t\tfactors[#factors\
    \ + 1] = n\n\tend\n\t\n\treturn factors\nend", "\tlocal t = {}\n\tlocal f = 2\n\
    \trepeat\n\t\tif n % f == 0 then\n\t\t\ttable.insert(t, f)\n\t\t\tn = n/f\n\t\t\
    else\n\t\t\tf = f + 1\n\t\tend\n\tuntil n == 1\n\treturn t\nend", "\tn = math.abs(n)\n\
    \tlocal factors = {}\n\tfor k = 2, math.sqrt(n) do\n\t\twhile n % k == 0 do\n\t\
    \t\tn = n / k\n\t\t\ttable.insert(factors, k)\n\t\tend\n\tend\n\tif n > 1 then\n\
    \t\ttable.insert(factors, n)\n\tend\n\treturn factors\nend", "  assert(n > 0,\
    \ 'argument must be positive')\n  assert(n % 1 == 0, 'argument must be integer')\n\
    \  local function aux(k, n)\n    local f = primes[k]\n    if n % f == 0 then\n\
    \      n = n // f\n      if n == 1 then\n        return {f}\n      else\n    \
    \    return concat{{f}, aux(k, n)}\n      end\n    else\n      return aux(k +\
    \ 1, n)\n    end\n  end\n  return aux(1, n)\nend", "\tlocal factors = {}\n\t\n\
    \twhile n % 2 == 0 do\n\t\ttable.insert(factors, 2)\n\t\tn = n / 2\n\tend\n\t\n\
    \tfor i = 3, math.sqrt(n), 2 do\n\t\twhile n % i == 0 do\n\t\t\ttable.insert(factors,\
    \ i)\n\t\t\tn = n / i\n\t\tend\n\tend\n\t\n\tif n > 2 then\n\t\ttable.insert(factors,\
    \ n)\n\tend\n\t\n\treturn factors\nend", "\tlocal min_factor = find_min_factor(n)\n\
    \tif min_factor == n then\n\t\treturn {n}\n\telse\n\t\treturn table.insert(factorize(n/min_factor),\
    \ min_factor)\n\tend\nend", "\tlocal i, fac = 1, {}\n\twhile n % 2 == 0 do\n\t\
    \tfac[i] = 2\n\t\ti = i + 1\n\t\tn = n / 2\n\tend\n\tfor i = 3, math.sqrt(n),\
    \ 2 do\n\t\twhile n % i == 0 do\n\t\t\tfac[i] = i\n\t\t\tn = n / i\n\t\tend\n\t\
    end\n\tif n > 2 then\n\t\tfac[n] = n\n\tend\n\treturn fac\nend", "  local factors\
    \ = {}\n  local original_n = n\n  local remainder = n\n  local divisor = 2\n \
    \ while true do\n    local divided = remainder / divisor\n    local int_divided\
    \ = math.floor(divided)\n    local remainder = remainder % divisor\n    if not\
    \ remainder then\n      table.insert(factors, divisor)\n      if n == original_n\
    \ then\n        return factors\n      else\n        return factorize(n / original_n)\n\
    \      end\n    elseif divided == int_divided then\n      remainder = int_divided\n\
    \      table.insert(factors, divisor)\n    else\n      divisor = divisor + 1\n\
    \    end\n  end\nend", "    local factors = {}\n    while n % 2 == 0 do\n    \
    \    table.insert(factors, 2)\n        n = n / 2\n    end\n    local divisor =\
    \ 3\n    while n > 1 do\n        if n % divisor == 0 then\n            table.insert(factors,\
    \ divisor)\n            n = n / divisor\n        else\n            divisor = divisor\
    \ + 2\n        end\n    end\n    return factors\nend", "  -- TODO: write your\
    \ code here\nend", "\tlocal res = {}\n\twhile n % 2 == 0 do\n\t\ttable.insert(res,\
    \ 2)\n\t\tn = n / 2\n\tend\n\tlocal f = 3\n\twhile f * f <= n do\n\t\tif n % f\
    \ == 0 then\n\t\t\ttable.insert(res, f)\n\t\t\tn = n / f\n\t\telse\n\t\t\tf =\
    \ f + 2\n\t\tend\n\tend\n\tif n > 1 then\n\t\ttable.insert(res, n)\n\tend\n\t\
    return res\nend", "    if n == 1 then\n        return {}\n    end\n    local divisor\
    \ = 2\n    while n > 1 do\n        if n % divisor == 0 then\n            local\
    \ factorization = factorize(n / divisor)\n            table.insert(factorization,\
    \ divisor)\n            return factorization\n        end\n        divisor = divisor\
    \ + 1\n    end\nend", "\tlocal f\n\tlocal fs = {}\n\twhile not is_prime(n) do\n\
    \t\tfor _, p in ipairs(primes_list) do\n\t\t\tif n % p == 0 then\n\t\t\t\tf =\
    \ p\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\ttable.insert(fs, f)\n\t\tn = n / f\n\
    \tend\n\ttable.insert(fs, n)\n\treturn fs\nend", "    local p = 2\n    local factors\
    \ = {}\n    while n > 1 do\n        while n % p == 0 do\n            table.insert(factors,\
    \ p)\n            n = n / p\n        end\n        p = p + 1\n    end\n    return\
    \ factors\nend", "    -- the simplest case\n    if n <= 1 then\n        return\
    \ {}\n    end", "  local factors = {}\n  local divisor = 2\n  while n > 1 do\n\
    \    if n % divisor == 0 then\n      table.insert(factors, divisor)\n      n =\
    \ n / divisor\n    else\n      divisor = divisor + 1\n    end\n  end\n  return\
    \ factors\nend", "    local factors = {}\n    local divisor = 2\n    while n ~=\
    \ 1 do\n        if n % divisor == 0 then\n            n = n / divisor\n      \
    \      table.insert(factors, divisor)\n        else\n            divisor = divisor\
    \ + 1\n        end\n    end\n    return factors\nend", "\tlocal result = {}\n\t\
    for i = 2, math.sqrt(n) do\n\t\twhile n % i == 0 do\n\t\t\ttable.insert(result,\
    \ i)\n\t\t\tn = n / i\n\t\tend\n\tend\n\tif n > 1 then\n\t\ttable.insert(result,\
    \ n)\n\tend\n\treturn result\nend", "  local res = {}\n  local primes = {}\n \
    \ local d = 2\n  while n > 1 do\n    if n % d == 0 then\n      res[#res + 1] =\
    \ d\n      n = n / d\n    else\n      d = d + 1\n    end\n  end\n  return res\n\
    end", "\tlocal ret = {}\n\t\n\tlocal d = 1\n\tfor n, times in pairs(factorization(n))\
    \ do\n\t\tfor i = 1, times do\n\t\t\tret[d] = n\n\t\t\td = d + 1\n\t\tend\n\t\
    end\n\t\n\treturn ret\nend", "\tlocal factorization = {}\n\tfor i=2, n do\n\t\t\
    if n % i == 0 then\n\t\t\tn = n / i\n\t\t\ttable.insert(factorization, i)\n\t\t\
    \ti = i - 1\n\t\tend\n\tend\n\treturn factorization\nend", "  -- TODO: Your code\
    \ here\nend", "    local factors = {}\n    local div = 2\n    while n > 1 do\n\
    \        if n % div == 0 then\n            table.insert(factors, div)\n      \
    \      n = n / div\n        else\n            div = div + 1\n        end\n   \
    \ end\n    return factors\nend", "  local r = {}\n  local i = 2\n  while n > 1\
    \ do\n    while (n % i) == 0 do\n      table.insert(r, i)\n      n = n / i\n \
    \   end\n    i = i + 1\n  end\n  return r\nend", "  local factors = {}\n  local\
    \ divisor = 2\n  local dividend = n\n  while divisor < n do\n    if dividend %\
    \ divisor == 0 then\n      table.insert(factors, divisor)\n      dividend = dividend\
    \ / divisor\n    else\n      divisor = divisor + 1\n    end\n  end\n  table.insert(factors,\
    \ dividend)\n  return factors\nend", "    local retval = {}\n    while n % 2 ==\
    \ 0 do\n        n = n / 2\n        table.insert(retval, 2)\n    end\n    local\
    \ divisor = 3\n    while n > 1 do\n        while n % divisor == 0 do\n       \
    \     n = n / divisor\n            table.insert(retval, divisor)\n        end\n\
    \        divisor = divisor + 2\n    end\n    return retval\nend", "    if n ==\
    \ 1 then\n        return {}\n    end\n    for i = 2, math.sqrt(n) do\n       \
    \ if n % i == 0 then\n            return {i, unpack(factorize(n / i))}\n     \
    \   end\n    end\n    return {n}\nend", "    local function dfs(n, d, res)\n \
    \       if n == 1 then\n            return res\n        end\n        while n %\
    \ d == 0 do\n            table.insert(res, d)\n            n = n / d\n       \
    \ end\n        return dfs(n, d + 1, res)\n    end\n    return dfs(n, 2, {})\n\
    end", "    local factors = {}\n    local f = 2\n    while f * f <= n do\n    \
    \    if n % f == 0 then\n            table.insert(factors, f)\n            n =\
    \ n / f\n        else\n            f = f + 1\n        end\n    end\n    table.insert(factors,\
    \ n)\n    return factors\nend", "  -- TODO: Implement\nend", "    local res =\
    \ {}\n    for _, f in ipairs(primes(n)) do\n        local cnt = 0\n        while\
    \ n % f == 0 do\n            n = n / f\n            cnt = cnt + 1\n        end\n\
    \        if cnt > 0 then\n            res[#res + 1] = f\n            for i = 1,\
    \ cnt - 1 do\n                res[#res + 1] = f\n            end\n        end\n\
    \    end\n    return res\nend", "    local factors = {}\n    for f in math.prime_factors(n)\
    \ do\n        table.insert(factors, f)\n    end\n    return factors\nend", "\t\
    local f = {}\n\t-- Starting factor is always 2.\n\tfor factor = 2, n, 1 do\n\t\
    \tif n % factor == 0 then\n\t\t\ttable.insert(f, factor)\n\t\t\tn = n / factor\n\
    \t\t\t-- In each iteration we should have new N value.\n\t\t\tif n ~= 1 then\n\
    \t\t\t\tfactor = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn f\nend", "\tlocal result\
    \ = {}\n\tlocal div = 2\n\tlocal pow = 0\n\twhile n > 1 do\n\t\trepeat\n\t\t\t\
    n, pow = n / div, pow + 1\n\t\tuntil math.floor(n) ~= n\n\t\twhile pow > 0 do\n\
    \t\t\tresult[#result + 1] = div\n\t\t\tpow = pow - 1\n\t\tend\n\t\tdiv = div +\
    \ 1\n\tend\n\treturn result\nend", "    assert(type(n) == \"number\" and n > 0,\
    \ \"factorize: non-positive integer is expected\")\n    local result = {}\n  \
    \  local factor = 2\n    while n > 1 do\n        if n % factor == 0 then\n   \
    \         result[#result + 1] = factor\n            n = n / factor\n        else\n\
    \            factor = factor + 1\n        end\n    end\n    return result\nend",
  "  local x = n\n  local limit = math.sqrt(n)\n  local f = {}\n  local k = 0\n  while\
    \ x % 2 == 0 do\n    k = k + 1\n    x = x / 2\n  end\n  while x % 3 == 0 do\n\
    \    k = k + 1\n    x = x / 3\n  end\n  if k > 0 then\n    f[#f+1] = {2, 3, k}\n\
    \  end\n  local t = 5\n  local d = 2\n  while t <= limit do\n    k = 0\n    while\
    \ x % t == 0 do\n      k = k + 1\n      x = x / t\n    end\n    if k > 0 then\n\
    \      f[#f+1] = {t, d, k}\n    end\n    t = t + d\n    d = 6 - d\n  end\n  if\
    \ x > 1 then\n    f[#f+1] = {x, 1, 1}\n  end\n  return f\nend", "  local res =\
    \ {}\n  while n % 2 == 0 do\n    res[#res + 1] = 2\n    n = n / 2\n  end\n  local\
    \ p = 3\n  while n > 1 do\n    while n % p == 0 do\n      res[#res + 1] = p\n\
    \      n = n / p\n    end\n    p = p + 2\n  end\n  return res\nend", "    local\
    \ primes, powers = {}, {}\n    local d = 2\n    while n > 1 do\n        while\
    \ n % d == 0 do\n            n = n / d\n            powers[d] = (powers[d] or\
    \ 0) + 1\n        end\n        d = d + 1\n    end\n    for i, v in pairs(powers)\
    \ do\n        for j = 1, v do\n            table.insert(primes, i)\n        end\n\
    \    end\n    return primes\nend", "  local factors = {}\n  local d = 2\n  while\
    \ n > 1 do\n    while n % d == 0 do\n      factors[#factors + 1] = d\n      n\
    \ = n / d\n    end\n    d = d + 1\n  end\n  return factors\nend", "    local prime_factors\
    \ = {}\n    while n % 2 == 0 do\n        table.insert(prime_factors, 2)\n    \
    \    n = n / 2\n    end\n    local i = 3\n    while i <= math.sqrt(n) do\n   \
    \     while n % i == 0 do\n            table.insert(prime_factors, i)\n      \
    \      n = n / i\n        end\n        i = i + 2\n    end\n    if n > 2 then\n\
    \        table.insert(prime_factors, n)\n    end\n    return prime_factors\nend",
  "    local factors = {}\n    for d = 2, n do\n        while n % d == 0 do\n    \
    \        table.insert(factors, d)\n            n = n / d\n        end\n    end\n\
    \    return factors\nend", "  if n == 1 then return {} end\n  local max = math.floor(math.sqrt(n))\n\
    \  local f = 2\n  while f <= max do\n    if n % f == 0 then\n      return merge(factorize(f),\
    \ factorize(n / f))\n    end\n    f = f + 1\n  end\n  return {n}\nend", "    local\
    \ d = 2\n    local f = {}\n    while n > 1 do\n        while n % d == 0 do\n \
    \           f[#f + 1] = d\n            n = n / d\n        end\n        d = d +\
    \ 1\n    end\n    return f\nend", "  local function factor(n, factor, result)\n\
    \    if n == 1 then\n      return result\n    end\n    while n % factor == 0 do\n\
    \      n = n / factor\n      result[#result + 1] = factor\n    end\n    return\
    \ factor(n, factor + 1, result)\n  end\n  return factor(n, 2, {})\nend", "   \
    \ local d = 2\n    local factors = {}\n    while n > 1 do\n        if n % d ==\
    \ 0 then\n            table.insert(factors, d)\n            n = n / d\n      \
    \  else\n            d = d + 1\n        end\n    end\n    return factors\nend",
  "    local ret = {}\n    for i = 2, n do\n        if n % i == 0 then\n         \
    \   ret[#ret + 1] = i\n            n = n / i\n            i = i - 1\n        end\n\
    \    end\n    return ret\nend", "    local function isprime(k)\n        for i\
    \ = 2, math.floor(math.sqrt(k)) do\n            if k % i == 0 then\n         \
    \       return false\n            end\n        end\n        return true\n    end",
  "    if n == 1 then\n        return {}\n    end\n    local l = {}\n    local k =\
    \ 2\n    while n % k == 0 do\n        l[#l + 1] = k\n        n = n / k\n    end\n\
    \    if n == 1 then\n        return l\n    end\n    k = 3\n    while n > 1 do\n\
    \        if n % k == 0 then\n            l[#l + 1] = k\n            n = n / k\n\
    \        else\n            k = k + 2\n        end\n    end\n    return l\nend",
  "    assert(type(n) == \"number\", \"argument type should be number\")\n    assert(n\
    \ > 0, \"argument must be positive\")\n    assert(n % 1 == 0, \"argument must\
    \ be an integer\")", "\tlocal num = n\n\tlocal factors = {}\n\tlocal factor =\
    \ 2\n\trepeat\n\t\twhile n % factor == 0 do\n\t\t\ttable.insert(factors, factor)\n\
    \t\t\tn = n / factor\n\t\tend\n\t\tfactor = factor + 1\n\tuntil factor > n\n\t\
    assert(num == multiply(factors), \"number is not equal to product of factors\"\
    )\n\treturn factors\nend", "  local i = 2\n  local result = {}\n  while i <= n\
    \ do\n    if n % i == 0 then\n      table.insert(result, i)\n      n = n / i\n\
    \    else\n      i = i + 1\n    end\n  end\n  return result\nend", "\tlocal t\
    \ = {}\n\twhile n % 2 == 0 do\n\t\ttable.insert(t, 2)\n\t\tn = n / 2\n\tend\n\t\
    local i = 3\n\twhile i <= math.sqrt(n) do\n\t\twhile n % i == 0 do\n\t\t\ttable.insert(t,\
    \ i)\n\t\t\tn = n / i\n\t\tend\n\t\ti = i + 2\n\tend\n\tif n > 2 then\n\t\ttable.insert(t,\
    \ n)\n\tend\n\treturn t\nend", "\tlocal factors = {}\n\tlocal factor = 2\n\twhile\
    \ n > 1 do\n\t\twhile n % factor == 0 do\n\t\t\ttable.insert(factors, factor)\n\
    \t\t\tn = n / factor\n\t\tend\n\t\tfactor = factor + 1\n\tend\n\treturn factors\n\
    end", "\tlocal factors = {}\n\tfor factor in primes() do\n\t\tif n == 1 then\n\
    \t\t\tbreak\n\t\tend\n\t\twhile n % factor == 0 do\n\t\t\ttable.insert(factors,\
    \ factor)\n\t\t\tn = n / factor\n\t\tend\n\tend\n\treturn factors\nend", "   \
    \ local factors = {}\n    local v = 1\n    while v <= n do\n        if n % v ==\
    \ 0 then\n            table.insert(factors, v)\n            n = n / v\n      \
    \  else\n            v = v + 1\n        end\n    end\n    return factors\nend",
  "    if n == 1 then\n        return {}\n    end\n    local result = {}\n    for\
    \ i = 2, n do\n        if n % i == 0 then\n            local part = factorize(n\
    \ / i)\n            part[#part + 1] = i\n            return part\n        end\n\
    \    end\nend", "\tlocal result = {}\n\tfor p in primes(n) do\n\t\twhile n % p\
    \ == 0 do\n\t\t\ttable.insert(result, p)\n\t\t\tn = n / p\n\t\tend\n\tend\n\t\
    return result\nend", "    local res = {}\n    while n > 1 do\n        local p\
    \ = primes[n]\n        if p then\n            table.insert(res, p)\n         \
    \   n = n // p\n        else\n            break\n        end\n    end\n    return\
    \ res\nend", "    local f = {}\n    local p = 2\n    while p <= n do\n       \
    \ if n % p == 0 then\n            f[#f + 1] = p\n            n = n / p\n     \
    \   else\n            p = p + 1\n        end\n    end\n    return f\nend", "\t\
    local factors = {}\n\tlocal max = math.sqrt(n)\n\tfor i = 2, max do\n\t\tif n\
    \ % i == 0 then\n\t\t\ttable.insert(factors, i)\n\t\t\tn = n / i\n\t\t\tmax =\
    \ math.sqrt(n)\n\t\t\ti = i - 1\n\t\tend\n\tend\n\ttable.insert(factors, n)\n\t\
    return factors\nend", "    local t = {}\n    while n % 2 == 0 do\n        table.insert(t,\
    \ 2)\n        n = n / 2\n    end\n    for i = 3, math.sqrt(n), 2 do\n        while\
    \ n % i == 0 do\n            table.insert(t, i)\n            n = n / i\n     \
    \   end\n    end\n    if n > 2 then\n        table.insert(t, n)\n    end\n   \
    \ return t\nend", "\tlocal t = {}\n\twhile n%2 == 0 do\n\t\tt[#t+1] = 2\n\t\t\
    n = n/2\n\tend\n\tfor i = 3, math.sqrt(n), 2 do\n\t\twhile n%i == 0 do\n\t\t\t\
    t[#t+1] = i\n\t\t\tn = n/i\n\t\tend\n\tend\n\tif n > 2 then\n\t\tt[#t+1] = n\n\
    \tend\n\treturn t\nend", "    local factors = {}\n    for i = 2, n do\n      \
    \  while n % i == 0 do\n            table.insert(factors, i)\n            n =\
    \ n / i\n        end\n    end\n    return factors\nend", "\tlocal f = {}\n\tlocal\
    \ c = 1\n\trepeat\n\t\tfor i = c, n do\n\t\t\tif n % i == 0 then\n\t\t\t\ttable.insert(f,\
    \ i)\n\t\t\t\tn = n / i\n\t\t\t\tc = i\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\
    until n == 1\n\treturn f\nend", "  local factors = {}\n  while n > 1 do\n    local\
    \ p = smallest_prime_factor(n)\n    table.insert(factors, p)\n    n = n / p\n\
    \  end\n  return factors\nend", "  local r = {}\n  for i = 2, math.floor(math.sqrt(n))\
    \ do\n    while n % i == 0 do\n      table.insert(r, i)\n      n = n / i\n   \
    \ end\n  end\n  if n > 1 then\n    table.insert(r, n)\n  end\n  return r\nend",
  "  local factors = {}\n  local prime = 2\n  while (n > 1) do\n    while (n % prime\
    \ == 0) do\n      table.insert(factors, prime)\n      n = n / prime\n    end\n\
    \    prime = nextPrime(prime)\n  end\n  return factors\nend", "    return {}\n\
    end", "  local factors = {}\n  for prime, count in pairs(primes) do\n    if n\
    \ % prime == 0 then\n      n = n / prime\n      while n % prime == 0 do\n    \
    \    n = n / prime\n        table.insert(factors, prime)\n      end\n    end\n\
    \  end\n  return factors\nend", "  local factors = {}\n  for i = 2, math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      factors[#factors + 1] = i\n      n = n / i\n\
    \      i = i - 1\n    end\n  end\n  factors[#factors + 1] = n\n  return factors\n\
    end", "    local factors = {}\n    for i = 2, n do\n        while n % i == 0 do\n\
    \            table.insert(factors, i)\n            n = n / i\n        end\n  \
    \  end\n    return factors\nend", "  local i = 2\n  local factors = {}\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      table.insert(factors, i)\n    \
    \  n = n / i\n    else\n      i = i + 1\n    end\n  end\n  table.insert(factors,\
    \ n)\n  return factors\nend", "  local primes = {}\n  local p = 1\n  while n ~=\
    \ 1 do\n    if n % p == 0 then\n      table.insert(primes, p)\n      n = n / p\n\
    \    else\n      p = p + 1\n    end\n  end\n  return primes\nend", "    local\
    \ divisor = 2\n    local factors = {}\n    while n > 1 do\n        if n % divisor\
    \ == 0 then\n            table.insert(factors, divisor)\n            n = n / divisor\n\
    \        else\n            divisor = divisor + 1\n        end\n    end\n    return\
    \ factors\nend", "    local function mult(t, x)\n        for i = 1, #t do\n  \
    \          t[i] = t[i] * x\n        end\n        return t\n    end", "\tlocal\
    \ result = {}\n\tif n == 0 then\n\t\treturn result\n\tend\n\tfor i = 2, n do\n\
    \t\tif n % i == 0 then\n\t\t\ttable.insert(result, i)\n\t\t\tfor j = 1, n / i\
    \ do\n\t\t\t\tif n % (i ^ j) == 0 then\n\t\t\t\t\tn = n / (i ^ j)\n\t\t\t\telse\n\
    \t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
  "    local result = {}\n    while n % 2 == 0 do\n        n = n / 2\n        table.insert(result,\
    \ 2)\n    end\n    local i = 3\n    while i <= math.sqrt(n) do\n        while\
    \ n % i == 0 do\n            n = n / i\n            table.insert(result, i)\n\
    \        end\n        i = i + 2\n    end\n    if n > 2 then\n        table.insert(result,\
    \ n)\n    end\n    return result\nend", "\tlocal result = {}\n\tfor k,v in ipairs(primes.all(n))\
    \ do\n\t\tlocal counter = 0\n\t\twhile n % v == 0 do\n\t\t\tn = n / v\n\t\t\t\
    counter = counter + 1\n\t\tend\n\t\tfor i = 1, counter do\n\t\t\ttable.insert(result,\
    \ v)\n\t\tend\n\tend\n\treturn result\nend", "    -- Your code here\nend", " \
    \ local factors = {}\n  for p,k in pairs(factorize_as_powers(n)) do\n    for i=1,k\
    \ do table.insert(factors, p) end\n  end\n  return factors\nend", "\tif type(n)\
    \ ~= \"number\" then\n\t\treturn nil\n\tend\n\tlocal factors = {}\n\twhile n %\
    \ 2 == 0 do\n\t\ttable.insert(factors, 2)\n\t\tn = n / 2\n\tend\n\tlocal divisor\
    \ = 3\n\twhile n > 1 do\n\t\tif n % divisor == 0 then\n\t\t\ttable.insert(factors,\
    \ divisor)\n\t\t\tn = n / divisor\n\t\telse\n\t\t\tdivisor = divisor + 2\n\t\t\
    end\n\tend\n\treturn factors\nend", "    local factors = {}\n    local factor\
    \ = 2\n    local exponent = 0\n    local function append_factor(factor, exponent)\n\
    \        for i = 1, exponent do\n            table.insert(factors, factor)\n \
    \       end\n    end\n    while n > 1 do\n        if n % factor == 0 then\n  \
    \          n = n / factor\n            exponent = exponent + 1\n        else\n\
    \            append_factor(factor, exponent)\n            factor = factor + 1\n\
    \            exponent = 0\n        end\n    end\n    append_factor(factor, exponent)\n\
    \    return factors\nend", "\tlocal factors = {}\n\twhile n % 2 == 0 do\n\t\t\
    factors[#factors + 1] = 2\n\t\tn = n / 2\n\tend\n\tlocal p = 3\n\twhile n > 1\
    \ do\n\t\twhile n % p == 0 do\n\t\t\tfactors[#factors + 1] = p\n\t\t\tn = n /\
    \ p\n\t\tend\n\t\tp = p + 2\n\tend\n\treturn factors\nend", "\tif n <= 1 then\n\
    \t\treturn {}\n\tend\n\tlocal i = 2\n\tlocal result = {}\n\twhile n > 1 do\n\t\
    \tif n % i == 0 then\n\t\t\tn = n / i\n\t\t\ttable.insert(result, i)\n\t\telse\n\
    \t\t\ti = i + 1\n\t\tend\n\tend\n\treturn result\nend", "    local factors = {}\n\
    \    while n ~= 1 do\n        local d = 2\n        while n % d ~= 0 do\n     \
    \       d = d + 1\n        end\n        n = n / d\n        table.insert(factors,\
    \ d)\n    end\n    return factors\nend", "    local factors = {}\n    for p in\
    \ divisors(n) do\n        if p.divisor == n then break end\n        if n % p.divisor\
    \ == 0 then\n            factors[#factors + 1] = p.divisor\n            n = n\
    \ / p.divisor\n        end\n    end\n    return factors\nend", "    if n <= 1\
    \ then\n        return {1}\n    end\n    local factors = {}\n    while n % 2 ==\
    \ 0 do\n        factors[#factors + 1] = 2\n        n = n / 2\n    end\n    local\
    \ factor = 3\n    while n > 1 do\n        if n % factor == 0 then\n          \
    \  factors[#factors + 1] = factor\n            n = n / factor\n        else\n\
    \            factor = factor + 2\n        end\n    end\n    return factors\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
