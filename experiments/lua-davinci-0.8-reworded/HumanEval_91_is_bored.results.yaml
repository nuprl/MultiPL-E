language: lua
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in string.gmatch(S,\
    \ '[^%.%?!]+') do\n    if string.match(w, '^[Ii] ') then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uu226ck.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3uu226ck.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local is_bored = 0\n    local string = S:gsub('[.?!]',\
    \ ' ')\n    local words = {}\n    for word in string.gmatch(string, \"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    for i = 1, #words do\n      \
    \  if words[i] == 'I' then\n            is_bored = is_bored + 1\n        end\n\
    \    end\n    return is_bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvlspxxo.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpuvlspxxo.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return S:count('I')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9a2elwjk.lua:10:\
    \ attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmp9a2elwjk.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9a2elwjk.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local phrase = string.gmatch(S,\
    \ '[^%.%?%!]+')\n  for w in phrase do\n    if w:sub(1, 1) == 'I' then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxemznc5u.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxemznc5u.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    S = string.gsub(S, '[.?!]', '!')\n    local\
    \ count = 0\n    for _, v in pairs(string.split(S, '!')) do\n        local i =\
    \ string.find(v, 'I')\n        if i ~= nil and i == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaynaj0jn.lua:12:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpaynaj0jn.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpaynaj0jn.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return select(2, string.gsub(S, '[?.!]%s*I\
    \ ', ''))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp550cc_fp.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp550cc_fp.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here:\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ayl51cv.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp5ayl51cv.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return #S:gmatch(\"I \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvd8a47bl.lua:10:\
    \ attempt to get length of a function value\nstack traceback:\n\t/tmp/tmpvd8a47bl.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpvd8a47bl.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for _, word in ipairs(stringx.split(S,\
    \ \"%.|\\?|\\!\")) do\n    if word:startswith(\"I\") then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn7ho13mb.lua:11: invalid escape sequence near ''"%.|\?''

    '
  stdout: ''
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return S:match('^%s*I%s') and 1 or 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5x2zaus.lua:20:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpb5x2zaus.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for sentence in\
    \ string.gmatch(S, \"[^.!?]+\") do\n        boredoms = boredoms + (string.match(sentence,\
    \ \"^I\") and 1 or 0)\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8k2n_p1.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpp8k2n_p1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredom = 0\n    for w in S:gmatch('%S+')\
    \ do\n        if w:match('^I') then\n            boredom = boredom + 1\n     \
    \   end\n    end\n    return boredom\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuy1qbjdq.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpuy1qbjdq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98v8v4rm.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp98v8v4rm.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- TODO: implement this function.\n  local\
    \ bored = 0\n  local S_split = re.split(S, \"[.!?]\")\n  for i = 1, #S_split do\n\
    \    local each_split = S_split[i]\n    local each_word = re.split(each_split,\
    \ \"[ ]\")\n    if each_word[1] == \"I\" then\n      bored = bored + 1\n    end\n\
    \  end\n  return bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfrg31fvn.lua:12:\
    \ attempt to index a nil value (global 're')\nstack traceback:\n\t/tmp/tmpfrg31fvn.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpfrg31fvn.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- your code goes here\n    local count\
    \ = 0\n    if S:find('I') == 1 then\n        count = count + 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yw40jtx.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9yw40jtx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for bored in S:gmatch(\"\
    I.-[.?!]\") do\n        count = count + 1\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f6ifd6.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpi8f6ifd6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for _, s in ipairs(string.split(S,\
    \ \".!?\")) do\n    count = count + (s:match('^I') and 1 or 0)\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9brdwv4c.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp9brdwv4c.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp9brdwv4c.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return #string.match(S, 'I.-[.?!]')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiqsctb1q.lua:10:\
    \ attempt to get length of a nil value\nstack traceback:\n\t/tmp/tmpiqsctb1q.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpiqsctb1q.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local S = \" \" .. S .. \" \"\n  return select(2,\
    \ S:gsub(\" I \", \"  \"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyr92izm3.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpyr92izm3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for s in S:gmatch('[^%.!?]+')\
    \ do\n    if s:match('^%s*I%s') then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  --\n  -- COMPLETE THIS CODE\n  --\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k2dphd6.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp1k2dphd6.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local i = 0\n    for _ in S:gmatch(\"I\"\
    ) do\n        i = i + 1\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpns_aw0fk.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpns_aw0fk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local found, _, count = S:gsub('I', '')\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvu0i8he.lua:17:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpkvu0i8he.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local n = 0\n    local new_sentence = true\n\
    \    for word in string.gmatch(S, \"%w+\") do\n        if new_sentence and word\
    \ == \"I\" then\n            n = n + 1\n        end\n        new_sentence = string.find(word,\
    \ \"[?!.]\") ~= nil\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqr53p3o.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjqr53p3o.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- your code here\n  local count = 0\n  for\
    \ i in string.gmatch(S, \"[^.!?]+\") do\n    if string.sub(i,1,1) == \"I\" then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmomshpxg.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmomshpxg.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for sentence in S:gmatch(\"\
    [^.?!]+\") do\n    if sentence:sub(1,1) == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfye9hri.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprfye9hri.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for _, word in ipairs(S:split('[.?!]'))\
    \ do\n    if word:find('I') then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwup7yquy.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpwup7yquy.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwup7yquy.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    local words = split(S)\n\
    \    for i, word in ipairs(words) do\n        if word == 'I' then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1knvfe7s.lua:11:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp1knvfe7s.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp1knvfe7s.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- write your code here\n    return 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptylxbcvy.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmptylxbcvy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return select(2, string.gsub(S, \"^[Ii]%s\"\
    , \"\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu27vze_p.lua:20:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpu27vze_p.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for word in string.gmatch(S,\
    \ \"%a+\") do\n    if word == \"I\" then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bxrs8yr.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5bxrs8yr.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 0
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal count = 0\n\tfor t in string.gmatch(S,\
    \ '[^.?!]+') do\n\t\tif string.find(t, '^%s*I%s') then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    local i = 1\n  \
    \  while i <= #S do\n        local j = i\n        while j <= #S and S:sub(j, j)\
    \ ~= '.' and S:sub(j, j) ~= '?' and S:sub(j, j) ~= '!' do\n            j = j +\
    \ 1\n        end\n        local sub_str = S:sub(i, j - 1)\n        if sub_str:match('^%s*I')\
    \ then\n            boredoms = boredoms + 1\n        end\n        i = j + 1\n\
    \    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryzsey22.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpryzsey22.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    local last_c = 0\n\
    \    for c in S:gmatch('.') do\n        if c == '.' or c == '?' or c == '!' then\n\
    \            count = count + 1\n            last_c = c\n        end\n    end\n\
    \    if count == 0 then return 0 end\n    if last_c == '!' or last_c == '?' then\n\
    \        count = count - 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxshnqgt.lua:30:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfxshnqgt.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\t-- TODO: write your code here\n\tlocal count=0\n\
    \tlocal i=1\n\twhile i<=string.len(S) do\n\t\tif S:sub(i,i)==\"I\" then\n\t\t\t\
    count=count+1\n\t\t\twhile S:sub(i,i)~=\".\" and S:sub(i,i)~=\"?\" and S:sub(i,i)~=\"\
    !\" do\n\t\t\t\ti=i+1\n\t\t\tend\n\t\tend\n\t\ti=i+1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg9649z4.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdg9649z4.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local pattern = \"^I\"\n    local num =\
    \ 0\n    for sentence in S:gmatch(\"[^.!?]+\") do\n        if sentence:match(pattern)\
    \ then\n            num = num + 1\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwa0v1r_y.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwa0v1r_y.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return S:gsub(\"I%s[^!.?%s]*[!.?%s]\", \"\
    \"):len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70kgpirk.lua:16:\
    \ expected: 0, actual: 11\nstack traceback:\n\t/tmp/tmp70kgpirk.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- A sentence is bored if it starts with \"\
    I\" followed by any number of\n  -- spaces.\n  local i = S:find('I[%s]+')\n  if\
    \ i then\n    return 1\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1l_dh_.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzk1l_dh_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    local i = 1\n  \
    \  while i <= #S do\n        local word, advance = next_word(S, i)\n        if\
    \ word == 'I' then\n            boredoms = boredoms + 1\n        end\n       \
    \ i = i + advance\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsfkhs7xm.lua:13:\
    \ attempt to call a nil value (global 'next_word')\nstack traceback:\n\t/tmp/tmpsfkhs7xm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpsfkhs7xm.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local i = 1\n  while\
    \ i <= #S do\n    -- Check for the start of a new sentence\n    if is_separator(S,\
    \ i) then\n      i = i + 1\n      if is_I(S, i) then\n        -- We have a boredom\n\
    \        boredoms = boredoms + 1\n      end\n    end\n    i = i + 1\n  end\n \
    \ return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1hk0tei.lua:14:\
    \ attempt to call a nil value (global 'is_separator')\nstack traceback:\n\t/tmp/tmpc1hk0tei.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpc1hk0tei.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for sentence in\
    \ string.gmatch(S, '[^%.!?]+') do\n        if string.sub(sentence, 1, 2) == 'I\
    \ ' then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwv7_gmd.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphwv7_gmd.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   -- Your code here\n   local res = 0\n   for\
    \ i in string.gmatch(S,'%S+') do\n      if i == 'I' then\n         res = res +\
    \ 1\n      end\n   end\n   return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsni0flp4.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsni0flp4.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- TODO: Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsyclfs4.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpgsyclfs4.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj9uw3bg.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpgj9uw3bg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  if S:find('I') then\n    return S:gsub('[^I]+',\
    \ ''):len()\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_c6k232y.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_c6k232y.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for w in string.gmatch(S,\
    \ '[^%p]+') do\n    if w == 'I' then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahibuyb8.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpahibuyb8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98v8v4rm.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp98v8v4rm.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- TODO: Implement this function\n  local\
    \ bored = 0\n  S = string.gsub(S, \"I\", \"\")\n  if string.find(S, \"I\") then\n\
    \    bored = 1\n  end\n  return bored\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppem_o3_q.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppem_o3_q.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return string.gsub(S, 'I', '')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze2xkedh.lua:16:\
    \ expected: 0, actual: \"Hello world\"\nstack traceback:\n\t/tmp/tmpze2xkedh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for i in string.gmatch(S,\
    \ 'I[^%.%?%!]+') do\n        boredoms = boredoms + 1\n    end\n    return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1gll801.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy1gll801.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal count = 0\n\tfor w in string.gmatch(S,\
    \ '([^.?!]+)') do\n\t\tif w:sub(1,1) == 'I' then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjinwx2q.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgjinwx2q.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local words = split(S, '%s')\n    local\
    \ count = 0\n    for _, word in ipairs(words) do\n        if word == 'I' then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxg84nx9r.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpxg84nx9r.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpxg84nx9r.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  count = 0\n  S = S .. \".\" -- add a full\
    \ stop to the end of S to catch final sentence\n  local _, num_sentences = string.gsub(S,\
    \ \"%.\", \".\")\n  local _, num_questions = string.gsub(S, \"%?\", \"?\")\n \
    \ local _, num_exclamations = string.gsub(S, \"%!\", \"!\")\n  local _, num_boreds\
    \ = string.gsub(S, \"I%s\", \"I \")\n  return num_boreds\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqz6iaewj.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqz6iaewj.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- YOUR CODE HERE\n  -- Count the number of\
    \ boredoms in the given sentence.\n  -- You may need to use gmatch and match.\n\
    \  local boredoms = 0\n  for word in string.gmatch(S, \"%a+\") do\n    if string.match(word,\
    \ \"^I\") then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst8tvwfk.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpst8tvwfk.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for w in S:gmatch(\"[^.?!]+\"\
    ) do\n    if w:match(\"^I \") then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqayxspz.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvqayxspz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local words = utils.split(S, '[.?!]')\n  local\
    \ boredoms = 0\n  for _, word in ipairs(words) do\n    if word:match('^I') then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptm1ozuuy.lua:10:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmptm1ozuuy.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmptm1ozuuy.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98v8v4rm.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp98v8v4rm.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\t-- split sentences by .?!.\n\tlocal sentences\
    \ = stringx.split(S, '[%.?!]')\n\t-- filter out sentences that start with 'I'\n\
    \tlocal boredoms = List.filter(function(s) return stringx.startswith(s, 'I') end,\
    \ sentences)\n\t-- return the number of boredoms.\n\treturn List.length(boredoms)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphkct6w8f.lua:11:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmphkct6w8f.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphkct6w8f.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978019
- exit_code: 0
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for sentence in\
    \ S:gmatch(\"[^!.?]+\") do\n        if sentence:match(\"^%s*I%s+\") then\n   \
    \         boredoms = boredoms + 1\n        end\n    end\n    return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local n = 0\n    for i, word in S:gmatch('[^%s!?.]+')\
    \ do\n        if i == 1 and word:lower() == 'i' then\n            n = n + 1\n\
    \        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfnqk4fa.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpgfnqk4fa.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    local i = 1\n    while\
    \ (i < #S) do\n        if (string.sub(S, i, i) == 'I') then\n            count\
    \ = count + 1\n        end\n        i = i + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfovywtrd.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfovywtrd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return #S:gmatch(\"I\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgompuig4.lua:10:\
    \ attempt to get length of a function value\nstack traceback:\n\t/tmp/tmpgompuig4.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpgompuig4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return S:gsub('I[^!%?%.]*[!%?%.]?', ''):len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwa2kvahi.lua:16:\
    \ expected: 0, actual: 11\nstack traceback:\n\t/tmp/tmpwa2kvahi.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\treturn count_words(S, \"I\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyljm9pji.lua:10:\
    \ attempt to call a nil value (global 'count_words')\nstack traceback:\n\t/tmp/tmpyljm9pji.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpyljm9pji.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978019
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal nbored = 0\n\tlocal bored = false\n\t\
    for w in S:gmatch(\"[^?.!]+\") do\n\t\tif bored then\n\t\t\tbored = false\n\t\t\
    elseif w:match(\"^%s*I%s*\") then\n\t\t\tnbored = nbored + 1\n\t\t\tbored = true\n\
    \t\tend\n\tend\n\treturn nbored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgcao9c5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpjgcao9c5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978019
- exit_code: 0
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local nboredoms = 0\n    -- count the number\
    \ of boredoms.\n    -- Write your code here!\n    local stpos, enpos = 1, 1\n\
    \    while stpos <= #S do\n        enpos = string.find(S, '[!.?]', stpos)\n  \
    \      if enpos == nil then\n            enpos = #S\n        end\n        local\
    \ word = string.match(S, '[a-zA-Z]+', stpos)\n        if word == \"I\" then\n\
    \            nboredoms = nboredoms + 1\n        end\n        stpos = enpos + 1\n\
    \    end\n    return nboredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local cnt = 0\n  S = S:gsub('[^%a%s]', '')\n\
    \  for w in S:gmatch('%w+') do\n    if w == 'I' then\n      cnt = cnt + 1\n  \
    \  end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7wdoc_i.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpw7wdoc_i.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    local start_index\
    \ = 1\n    local end_index = 1\n    while start_index <= #S do\n        end_index\
    \ = start_index\n        while end_index <= #S and S:sub(end_index, end_index)\
    \ ~= '.' and S:sub(end_index, end_index) ~= '?' and S:sub(end_index, end_index)\
    \ ~= '!' do\n            end_index = end_index + 1\n        end\n        if start_index\
    \ < end_index and S:sub(start_index, start_index + 1) == 'I ' then\n         \
    \   boredoms = boredoms + 1\n        end\n        start_index = end_index + 1\n\
    \    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1r8dfthb.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1r8dfthb.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return select(2, S:gsub('I', ''))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe12hv1m5.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpe12hv1m5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return #string.gsub(S, \"I\", \"\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxykdyhb.lua:16:\
    \ expected: 0, actual: 11\nstack traceback:\n\t/tmp/tmpjxykdyhb.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for token in string.gmatch(S,\
    \ \"[^%s%.?!]+\") do\n        if token == \"I\" then\n            boredoms = boredoms\
    \ + 1\n        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq1s7xvf.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsq1s7xvf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local first_word\n \
    \ for word in string.gmatch(S, \"%w+\") do\n    if first_word == nil then\n  \
    \    first_word = word\n    else\n      if first_word == \"I\" then\n        boredoms\
    \ = boredoms + 1\n      end\n      first_word = word\n    end\n  end\n  return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmom4xeb3.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmom4xeb3.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  local array = split(S,\
    \ '[.!?]')\n  for i, v in ipairs(array) do\n    local temp = split(v, ' ')\n \
    \   if temp[1] == 'I' then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqrwm5nt.lua:11:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpvqrwm5nt.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpvqrwm5nt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return S:gsub('^I%s.*[%.!?]', ''):gsub('^I%s.*$',\
    \ ''):gsub('[%?%.!]', ''):len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzqpr0mi.lua:16:\
    \ expected: 0, actual: 11\nstack traceback:\n\t/tmp/tmpjzqpr0mi.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return S:gsub('^I', 'BORED')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpft2hl4no.lua:16:\
    \ expected: 0, actual: \"Hello world\"\nstack traceback:\n\t/tmp/tmpft2hl4no.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for _, word in ipairs(utils.split(S,\
    \ \"%.?!\", true)) do\n    if word:sub(1, 1) == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaaez8dua.lua:11:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpaaez8dua.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpaaez8dua.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- TODO: implement the function\n  local is_bored\
    \ = 0\n  for word in string.gmatch(S, '%S+') do\n    if word == 'I' then\n   \
    \   is_bored = is_bored + 1\n    end\n  end\n  return is_bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bc023i7.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8bc023i7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   -- FILL HERE\n   local s = 0\n   for _, x\
    \ in ipairs(S:split(\".?!\")) do\n      if x:sub(1, 1) == \"I\" then\n       \
    \  s = s + 1\n      end\n   end\n   return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp87bubes1.lua:12:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp87bubes1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp87bubes1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for i in string.gmatch(S,\
    \ 'I%f[%s,.]') do\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9b_4kffi.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9b_4kffi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for _, w in pairs(S:split('%p+'))\
    \ do\n        if w:lower() == 'i' then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxihh2_kv.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpxihh2_kv.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpxihh2_kv.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local boredoms = 0\n   local after_i = false\n\
    \   for word in S:gmatch('[^%s]+') do\n      if after_i and word:sub(1,1) ~= '.'\
    \ then\n         boredoms = boredoms + 1\n         after_i = false\n      end\n\
    \      if word == 'I' then\n         after_i = true\n      end\n   end\n   return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vzc3d21.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0vzc3d21.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 0
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for sentence in string.gmatch(S,\
    \ \"[^%.!?]+\") do\n    local word = string.match(sentence, '^%s*([^%s]+)')\n\
    \    if word == 'I' then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   -- Your code here\n   local n = 0\n   local\
    \ s = string.find(S, 'I')\n   while s do\n      if s ~= 1 then\n         if S:sub(s-1,\
    \ s-1) == '.' or S:sub(s-1, s-1) == '?' or S:sub(s-1, s-1) == '!' then\n     \
    \       n = n + 1\n         end\n      else\n         n = n + 1\n      end\n \
    \     s = string.find(S, 'I', s+1)\n   end\n   return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c9n9m43.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9c9n9m43.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for _, w in ipairs(S:lower():split())\
    \ do\n        if w == 'i' then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_zozi4a.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpy_zozi4a.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpy_zozi4a.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for sentence in\
    \ S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^I%s\") then\n      \
    \      boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdiuczelg.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpdiuczelg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- your code here\n    return 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8wij6hu.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpf8wij6hu.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local str = string.match(S, \"(%w+)%p*\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm87eviqz.lua:23: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for word in S:gmatch('%a+')\
    \ do\n        if word == 'I' then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkk2h30tx.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkk2h30tx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local function count_words(w)\n    if w ==\
    \ 'I' then\n      return 1\n    else\n      return 0\n    end\n  end\n  local\
    \ n = 0\n  for w in S:gmatch('(%a+)') do\n    n = n + count_words(w)\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe33eldz.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpbe33eldz.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for word in string.gmatch(S,\
    \ '%w+') do\n        if word == 'I' then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w6opszf.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_w6opszf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local n = 0\n    for _, s in ipairs(string.split(S,\
    \ '.!?')) do\n        if s:match('^ I') then\n            n = n + 1\n        end\n\
    \    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvz_4zyb3.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpvz_4zyb3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpvz_4zyb3.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- remove . , ? and !\n    S = S:gsub('[.?!]',\
    \ '')\n    local _, count = S:gsub('I', '')\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko0bilkn.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpko0bilkn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local sentence = S:split(\"[!?.]\")\n  local\
    \ c = 0\n  for i=1,#sentence do\n    local word = sentence[i]:split(\" \")\n \
    \   if word[1] == \"I\" then\n      c = c + 1\n    end\n  end\n  return c\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5l0nxalf.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp5l0nxalf.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5l0nxalf.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal n = 0\n\tfor line in S:gmatch'[^.!?]+'\
    \ do\n\t\tif line:match'^I%s' then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtgeoaqu.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpbtgeoaqu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\t-- TODO: Implement it\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_63z30zt.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_63z30zt.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for i in S:gmatch(\"\
    [^%?%.!]+\") do\n        if i:sub(1,1) == \"I\" then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_iabhjt.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa_iabhjt.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return select(2, S:gsub('^I%s', ''))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0h_qi6i.lua:20:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn0h_qi6i.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local sum = 0\n    local i = 1\n    while\
    \ i <= #S do\n        if S:sub(i, i) == 'I' then\n            sum = sum + 1\n\
    \            while i <= #S and S:sub(i, i) ~= '.' and S:sub(i, i) ~= '?' and S:sub(i,\
    \ i) ~= '!' do\n                i = i + 1\n            end\n        end\n    \
    \    i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphe36_wsf.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphe36_wsf.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local cnt = 0\n    local first_letter =\
    \ string.sub(S, 1, 1)\n    if string.lower(first_letter) == 'i' then\n       \
    \ cnt = cnt + 1\n    end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5wx_m38.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy5wx_m38.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    local sentences = string.gmatch(S,\
    \ '[^%.!?]+')\n    for sentence in sentences do\n        if string.sub(sentence,\
    \ 1, 1) == 'I' then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnvgu46f.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpbnvgu46f.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    count = 0\n    for s in string.gmatch(S,\
    \ '[^%.!?]+') do\n        if string.sub(s, 1, 2) == 'I ' then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wgfsozr.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6wgfsozr.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return #S:gmatch('I')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5p16cxww.lua:10:\
    \ attempt to get length of a function value\nstack traceback:\n\t/tmp/tmp5p16cxww.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5p16cxww.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for _, w in ipairs(S:split(\"\
    %s\")) do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n \
    \       end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbaqidueg.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpbaqidueg.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbaqidueg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\n  --[[\n    local words\
    \ = stringx.split(S)\n    local boredoms = 0\n    for k, v in pairs(words) do\n\
    \      if v == \"I\" then\n        boredoms = boredoms + 1\n      end\n    end\n\
    \    return boredoms\n  ]]\n  --[[\n    local sentences = stringx.split(S, '[.?!]')\n\
    \    local boredoms = 0\n    for k, v in pairs(sentences) do\n      if stringx.strip(v)\
    \ == \"I\" then\n        boredoms = boredoms + 1\n      end\n    end\n    return\
    \ boredoms\n  ]]\n  --[[\n    local sentences = stringx.split(S, '[.?!]')\n  \
    \  local boredoms = 0\n    for k, v in pairs(sentences) do\n      local words\
    \ = stringx.split(v)\n      if words[1] == \"I\" then\n        boredoms = boredoms\
    \ + 1\n      end\n    end\n    return boredoms\n  ]]\n  --[[\n    local sentences\
    \ = stringx.split(S, '[.?!]')\n    local boredoms = 0\n    for k, v in pairs(sentences)\
    \ do\n      local words = stringx.split(v)\n      if words[1] == \"I\" then\n\
    \        boredoms = boredoms + 1\n      end\n    end\n    return boredoms\n  ]]\n\
    \  --[[\n    local sentences = stringx.split(S, '[.?!]')\n    local boredoms =\
    \ 0\n    for k, v in pairs(sentences) do\n      local words = stringx.split(v)\n\
    \      if words[1] == \"I\" then\n        boredoms = boredoms + 1\n      end\n\
    \    end\n    return boredoms\n  ]]\n  --[[\n    local sentences = stringx.split(S,\
    \ '[.?!]')\n    local boredoms = 0\n    for k, v in pairs(sentences) do\n    \
    \  local words = stringx.split(v)\n      if words[1] == \"I\" then\n        boredoms\
    \ = boredoms + 1\n      end\n    end\n    return boredoms\n  ]]\n \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpos_knwcw.lua:88: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    local i = 1\n  \
    \  while i <= #S do\n        local c = S:sub(i, i)\n        if c == 'I' then\n\
    \            while i <= #S do\n                i = i + 1\n                c =\
    \ S:sub(i, i)\n                if c == '.' or c == '?' or c == '!' then\n    \
    \                break\n                end\n            end\n            boredoms\
    \ = boredoms + 1\n        end\n        i = i + 1\n    end\n    return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_wnegox.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpz_wnegox.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local sentence = 0\n  for word in S:gmatch(\"\
    %S+\") do\n    if word == \"I\" then\n      sentence = sentence + 1\n    end\n\
    \  end\n  return sentence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcgm0tfsc.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcgm0tfsc.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    S = S:lower()\n    local num = 0\n    for\
    \ w in S:gmatch(\"%S+\") do\n        if w == \"i\" then\n            num = num\
    \ + 1\n        end\n    end\n    return num\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxxeb_61.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvxxeb_61.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local sentences = split(S, '!')\n  for i,\
    \ s in ipairs(sentences) do\n    sentences[i] = split(s, '.')\n  end\n  sentences\
    \ = flatten(sentences)\n  for i, s in ipairs(sentences) do\n    sentences[i] =\
    \ split(s, '?')\n  end\n  sentences = flatten(sentences)\n  local num_boredoms\
    \ = 0\n  for _, sentence in ipairs(sentences) do\n    local first_word = split(sentence,\
    \ ' ')[1]\n    if first_word == 'I' then\n      num_boredoms = num_boredoms +\
    \ 1\n    end\n  end\n  return num_boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp266bbenc.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp266bbenc.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp266bbenc.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local sentences = split(S, '[.?!]')\n  local\
    \ boredoms = 0\n  for _, sentence in ipairs(sentences) do\n    if string.sub(sentence,\
    \ 1, 2) == 'I ' then\n      boredoms = boredoms + 1\n    end\n  end\n  return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprk_9qn2l.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmprk_9qn2l.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmprk_9qn2l.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local _, count = string.gsub(S, \"^I[%s]+\"\
    , \"\")\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zrsd76s.lua:21:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0zrsd76s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal boredoms = 0\n\tlocal tokens = stringx.split(S,\
    \ \"%.|%?|!\")\n\tfor _,s in pairs(tokens) do\n\t\tif (stringx.startswith(s, \"\
    I\")) then\n\t\t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\treturn boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1stjcu7g.lua:11:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmp1stjcu7g.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp1stjcu7g.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for sentence in string.gmatch(S,\
    \ '[^.?!]+') do\n    if string.sub(sentence, 1, 1) == 'I' then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpns8ykbyd.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpns8ykbyd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  if not S then return 0 end\n  local num_boredoms\
    \ = 0\n  -- Give me the '.', '!' or '?' in S. If there's no such character,\n\
    \  -- then return\n  local start, finish = S:find('[%.?!]')\n  if not start then\
    \ return 0 end\n  -- Give me the substring that starts at the first character\
    \ and ends\n  -- at the first '.', '?' or '!'\n  local sub = S:sub(1, finish)\n\
    \  -- If the substring starts with 'I', add one boredom\n  if sub:find('^I') then\
    \ num_boredoms = num_boredoms + 1 end\n  -- Give me the rest of the string from\
    \ the first '.', '?' or '!' onward\n  local rest = S:sub(finish + 1)\n  -- Now\
    \ count the boredoms in the rest of the string.\n  return num_boredoms + is_bored(rest)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplup_e30p.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplup_e30p.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local total,i,w = 0\n   local function words()\n\
    \      return function(S,i)\n         return S:match('(%w+)',i)\n      end\n \
    \  end\n   for w in words(S,i) do\n      if w:find'^I' then\n         total =\
    \ total + 1\n      end\n   end\n   return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjz6z1477.lua:13:\
    \ attempt to index a nil value (local 'S')\nstack traceback:\n\t/tmp/tmpjz6z1477.lua:13:\
    \ in for iterator 'for iterator'\n\t/tmp/tmpjz6z1477.lua:16: in local 'candidate'\n\
    \t/tmp/tmpjz6z1477.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Should return the number of boredoms in\
    \ S.\n  if not S:find(\"I\") then\n    return 0\n  end\n  local boredoms = 0\n\
    \  local pos = 1\n  while true do\n    local first, last = S:find(\"I\", pos)\n\
    \    if not first then\n      break\n    end\n    pos = last + 1\n    while true\
    \ do\n      local c = S:sub(pos, pos)\n      if c == \".\" or c == \"?\" or c\
    \ == \"!\" then\n        break\n      end\n      pos = pos + 1\n    end\n    boredoms\
    \ = boredoms + 1\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyqv34xy.lua:38:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsyqv34xy.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local i = 0\n  for w in S:gmatch(\"[^%s]+\"\
    ) do\n    if w == \"I\" then\n      i = i + 1\n    end\n  end\n  return i\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdn3048t.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkdn3048t.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    local word = nil\n\
    \    for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n       \
    \     boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfup289u.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplfup289u.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for word in string.gmatch(S,\
    \ \"%S+\") do\n    if string.find(word, \"^I\") ~= nil then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkrau__j.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmkrau__j.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for _,sentence in ipairs(S:split('[.?!]'))\
    \ do\n    if sentence:match('^%s*I%s') then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwggwxous.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpwggwxous.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwggwxous.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local is_bored = false\n  local boredoms =\
    \ 0\n  local len = string.len(S)\n  for i = 1, len do\n    if is_bored then\n\
    \      if S:sub(i, i) == '.' or S:sub(i, i) == '?' or S:sub(i, i) == '!' then\n\
    \        is_bored = false\n      end\n    else\n      if S:sub(i, i) == ' ' then\n\
    \        if i + 1 <= len and S:sub(i + 1, i + 1) == 'I' then\n          is_bored\
    \ = true\n          boredoms = boredoms + 1\n        end\n      end\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6v25q47.lua:38:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpo6v25q47.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local total = 0\n  local sentences = string.gmatch(S,\
    \ \"[^%.?!]+\")\n  for sentence in sentences do\n    if (string.match(sentence,\
    \ \"^I\")) then\n      total = total + 1\n    end\n  end\n  return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vjgxfk7.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3vjgxfk7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return select(2, string.gsub(S, \"%aI%a\"\
    , \"\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76q0sh90.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp76q0sh90.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tS = string.lower(S)\n\tS = string.gsub(S,\
    \ \"^%s*(.-)%s*$\", \"%1\")\n\tlocal boredoms = 0\n\tfor _, v in pairs(split(S,\
    \ '%.')) do\n\t\tif v:find('^%s*i%s+') then\n\t\t\tboredoms = boredoms + 1\n\t\
    \tend\n\tend\n\treturn boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpskx73pw2.lua:13:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpskx73pw2.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpskx73pw2.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local len = #S\n  local i = 1\n  local count\
    \ = 0\n  local delim = { '!', '.', '?' }\n  local delim_map = {}\n  for k, v in\
    \ pairs(delim) do\n    delim_map[v] = true\n  end\n  while i <= len do\n    local\
    \ j = i\n    while j <= len and not delim_map[S:sub(j, j)] do\n      j = j + 1\n\
    \    end\n    if S:sub(i, i + 1) == 'I ' then\n      count = count + 1\n    end\n\
    \    i = j + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsosom8h4.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpsosom8h4.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal boredoms = 0\n\tfor sentence in string.gmatch(S,\
    \ '%S+') do\n\t\tif string.lower(sentence) == 'i' then\n\t\t\tboredoms = boredoms\
    \ + 1\n\t\tend\n\tend\n\treturn boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupeoyr68.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpupeoyr68.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for match in string.gmatch(S,\
    \ \"%a[%a ]*%.\") do\n        if match:sub(1,2) == \"I \" then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4p0xzas.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpb4p0xzas.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local n = 0\n    for word in S:gmatch('[^.!?]+')\
    \ do\n        n = n + (word:match('^I') and 1 or 0)\n    end\n    return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18ek2a0d.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp18ek2a0d.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local i = 0\n  local n = 0\n  while i do\n\
    \    i = string.find(S, '%.', i)\n    if i then\n      if string.find(S, '^I%s+',\
    \ i - 1) then\n        n = n + 1\n      end\n      i = i + 1\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuoc3m_7i.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpuoc3m_7i.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 0
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    local _, end_index\
    \ = string.find(S, '.')\n    for sentence in string.gmatch(S, '[^.!?]+') do\n\
    \        local word, __ = string.match(sentence, '%s*(%w+)')\n        if word\
    \ == 'I' then\n            boredoms = boredoms + 1\n        end\n    end\n   \
    \ return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for word in string.gmatch(S,\
    \ \"[^%w]+\") do\n    if word == \"I\" then\n      boredoms = boredoms + 1\n \
    \   end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42banfn4.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp42banfn4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local b = 0\n    for _, v in ipairs(string.split(S,\
    \ '.')) do\n        v = string.trim(v)\n        if v:startswith('I') then\n  \
    \          b = b + 1\n        end\n    end\n    return b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyo7vahwx.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpyo7vahwx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpyo7vahwx.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local words = {}\n  local i = 1\n  for word\
    \ in string.gmatch(S, '%w+') do\n    words[i] = word\n    i = i + 1\n  end\n \
    \ local sentence_count = 0\n  for k, word in pairs(words) do\n    if word == 'I'\
    \ then\n      sentence_count = sentence_count + 1\n    end\n  end\n  return sentence_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5auo6yx.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy5auo6yx.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return S:gsub(\"%.?[^I]+\", \"\"):len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6m8kesk.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpz6m8kesk.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local delimiter = '(\\.|\\?|\\!)'\n    local\
    \ sentences = split(S, delimiter)\n    local count = 0\n    for i, v in ipairs(sentences)\
    \ do\n        if starts_with(v, ' I') then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaodqgywh.lua:10: invalid escape sequence near ''''(\.''

    '
  stdout: ''
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local s = string.gsub(S, '[!?.]', '\\1')\n\
    \    local count = 0\n    for word in string.gmatch(s, '[^\\1]+') do\n       \
    \ if (string.find(word, '^I[%s]*')) then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplorcm935.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplorcm935.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for sentence in string.gmatch(S,\
    \ \"([^%.!?]+)\") do\n    if string.find(sentence, \"^I\") then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb1b75uy.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvb1b75uy.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return select(2, S:gsub('^[Ii]', ''))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdn6fwdd.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxdn6fwdd.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return string.gsub(S,'^I%s+','')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxjj_tcp.lua:16:\
    \ expected: 0, actual: \"Hello world\"\nstack traceback:\n\t/tmp/tmppxjj_tcp.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local out = 0\n   local words = split(S,\
    \ ' ')\n   for i = 1, #words do\n      if words[i] == 'I' then\n         out =\
    \ out + 1\n      end\n   end\n   return out\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9k23wync.lua:11:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp9k23wync.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp9k23wync.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    %S+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n \
    \       end\n    end\n    return boredoms\nend\nassert(is_bored('The sky is blue.\
    \ The sun is shining. I love this weather') == 1)\nassert(is_bored('Hello world')\
    \ == 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnc5nene.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfnc5nene.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  local I = string.byte('I')\n\
    \  for i=1,#S do\n    if string.byte(S,i) == I then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhfllk4i.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwhfllk4i.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local sentence = string.match(S, \"[^%?%!%.]+\"\
    )\n    local i = 1\n    local bored = 0\n    for word in string.gmatch(sentence,\
    \ \"%S+\") do\n        if word == \"I\" and i == 1 then\n            bored = bored\
    \ + 1\n        end\n        i = i + 1\n    end\n    return bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjyxdr8_e.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjyxdr8_e.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal temp = S:gsub(\"[!?.]\", function(w)\
    \ return w .. \" \" end)\n\tlocal words = {}\n\tfor w in temp:gmatch(\"%S+\")\
    \ do\n\t\ttable.insert(words, w)\n\tend\n\tlocal boredoms = 0\n\tfor i, w in ipairs(words)\
    \ do\n\t\tif w == \"I\" then\n\t\t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\t\
    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0gv4hg2.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpi0gv4hg2.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return string.gsub(S, 'I', '')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc62lvh3c.lua:16:\
    \ expected: 0, actual: \"Hello world\"\nstack traceback:\n\t/tmp/tmpc62lvh3c.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local sum = 0\n    for _, s in ipairs(string.split(S,\
    \ '.')) do\n        if s:match('^ I ') then\n            sum = sum + 1\n     \
    \   end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp37tt5vl5.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp37tt5vl5.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp37tt5vl5.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- your code here\n    return 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8wij6hu.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpf8wij6hu.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for word in string.gmatch(S,\
    \ \"%w+\") do\n    if word == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68hctylh.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp68hctylh.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- iterate through the sentences.\n  local\
    \ boredoms = 0\n  for sentence in S:gmatch('[^%.!%?]+') do\n    -- start with\
    \ the count as 0.\n    local boredoms_in_sentence = 0\n    -- iterate through\
    \ the words of a sentence.\n    for word in sentence:gmatch('%w+') do\n      --\
    \ increment the count if the word is 'I'.\n      if word == 'I' then\n       \
    \ boredoms_in_sentence = boredoms_in_sentence + 1\n      end\n    end\n    --\
    \ if we count at least one 'I' in a sentence, we've found a boredom.\n    if boredoms_in_sentence\
    \ > 0 then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr0813v1.lua:38:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxr0813v1.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local result = 0\n  for word in S:gmatch(\"\
    %a+\") do\n    if word == \"I\" then\n      result = result + 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8zcjh3k.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpu8zcjh3k.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local num_boredoms = 0\n    -- Split on\
    \ the delimiters.\n    local sentences = string.gmatch(S, '[^.!?]+')\n    for\
    \ sentence in sentences do\n        -- Split on spaces.\n        local words =\
    \ string.gmatch(sentence, '%S+')\n        for word in words do\n            if\
    \ word == 'I' then\n                num_boredoms = num_boredoms + 1\n        \
    \        break\n            end\n        end\n    end\n    return num_boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkg7wtkdw.lua:34:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkg7wtkdw.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\t-- Don't forget to check for the empty string.\n\
    \tif S == '' then\n\t\treturn 0\n\tend\n\tlocal i = 0\n\tfor word in S:gmatch(\"\
    %w+\") do\n\t\tif word == 'I' then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aks6erc.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8aks6erc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local boredoms = 0\n   local i = 1\n   local\
    \ N = #S\n   while i <= N do\n      while i <= N and S:sub(i,i) ~= 'I' do\n  \
    \       i = i + 1\n      end\n      while i <= N and S:sub(i,i) ~= '!' and S:sub(i,i)\
    \ ~= '.' and S:sub(i,i) ~= '?' do\n         i = i + 1\n      end\n      i = i\
    \ + 1\n      boredoms = boredoms + 1\n   end\n   return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ks90p.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsb9ks90p.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    local pos = 1\n   \
    \ while pos <= #S do\n        local ch = S:sub(pos, pos)\n        if ch == 'I'\
    \ then\n            local sentence = S:sub(pos, S:find('%.[%?!]', pos))\n    \
    \        local words = sentence:split(' ')\n            if #words > 0 and words[1]\
    \ == 'I' then\n                count = count + 1\n            end\n          \
    \  pos = pos + #sentence\n        end\n        pos = pos + 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgids21ta.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpgids21ta.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpgids21ta.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local pattern = 'I'\n    local count = 0\n\
    \    for word in string.gmatch(S, pattern) do\n        count = count + 1\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyr2rtcas.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpyr2rtcas.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    if not S then return 0 end\n    local count\
    \ = 0\n    local i = 1\n    while i <= #S do\n        if S:sub(i, i+1) == 'I '\
    \ then\n            count = count + 1\n        end\n        if S:sub(i, i) ==\
    \ '.' or S:sub(i, i) == '?' or S:sub(i, i) == '!' then\n            i = i + 1\n\
    \        end\n        i = i + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepcbqme7.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpepcbqme7.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    local new_str =\
    \ ''\n    -- The while loop is used to check each sentence one by one\n    while\
    \ S:len() > 0 do\n        new_str = S:match('[^.!?]+') -- remove punctuation\n\
    \        -- if first word starts with I, then it's a boredom\n        if new_str:match('^[Ii]\
    \ ') then\n            boredoms = boredoms + 1\n        end\n        S = S:sub(new_str:len()\
    \ + 2) -- remove from original string\n    end\n    return boredoms\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplje6sxs5.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplje6sxs5.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\treturn string.gsub(S, \"(%a)%s*I%s*(%a)\"\
    , \"%1 %2\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiubiuk13.lua:16:\
    \ expected: 0, actual: \"Hello world\"\nstack traceback:\n\t/tmp/tmpiubiuk13.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return S:lower():gsub('%?', '.'):gsub('!',\
    \ '.'):gsub('^I ', ''):gsub('\\n', ' '):gsub('%.', '\\n.'):gsub('^I ', ''):gsub('%.',\
    \ '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\\
    n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I\
    \ ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I\
    \ ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.',\
    \ '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\\
    n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I\
    \ ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I\
    \ ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.',\
    \ '\\n.'):gsub('\\n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\\
    n', ' '):gsub('^I ', ''):gsub('I ', ''):gsub('%.', '\\n.'):gsub('\\n', ' '):gsub('^I\
    \ ', ''):gsub('I\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8wjdoemo.lua:10: unfinished string near ''''I''

    '
  stdout: ''
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for _, word in ipairs(S:split('\
    \ ')) do\n        if word:lower() == 'i' then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwb_2ys13.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpwb_2ys13.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwb_2ys13.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for line in S:gmatch(\"\
    [^.!?]+\") do\n    if line:match(\"^%s*I%s*\") then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_ibpcoq.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpb_ibpcoq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  count = 0\n  for s in S:gmatch(\"[^%.!?]+\"\
    ) do\n    for word in s:gmatch(\"%S+\") do\n      if word == \"I\" then\n    \
    \    count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59gv1yvv.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp59gv1yvv.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- TODO\n    num = 0\n    for word in string.gmatch(S,\
    \ \"[^%.!?]+\") do\n        for i, w in ipairs(word:split(\" \")) do\n       \
    \     if w == \"I\" then\n                num = num + 1\n            end\n   \
    \     end\n    end\n    return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2qlelxei.lua:13:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2qlelxei.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2qlelxei.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local n = 0\n  local p = 0\n  while p < #S\
    \ do\n    p = S:find('I', p)\n    if p == nil then break end\n    if p == 1 or\
    \ S:sub(p-1, p-1) == '.' or S:sub(p-1, p-1) == '?' or S:sub(p-1, p-1) == '!' then\n\
    \      n = n + 1\n    end\n    p = p + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzq5rglht.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzq5rglht.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal function first_word(s)\n\t\treturn s:match(\"\
    ^(.-)%s\")\n\tend\n\tlocal sentences = string.split(S, \".\")\n\tlocal boredoms\
    \ = 0\n\tfor i = 1, #sentences do\n\t\tif first_word(sentences[i]) == \"I\" then\n\
    \t\t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\treturn boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphq6q5yja.lua:13:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmphq6q5yja.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphq6q5yja.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\n  --%w is a shorthand pattern\
    \ class that matches all the letters\n  -- %W is the inverse of %w\n  -- so only\
    \ 'I' will be matched, then return the length of the table\n  return #S:gmatch(\"\
    I\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu_q96sm6.lua:14:\
    \ attempt to get length of a function value\nstack traceback:\n\t/tmp/tmpu_q96sm6.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpu_q96sm6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  S = S:gsub('I[^!?.]+', function(s) return\
    \ s:sub(2) end)\n  return S:gsub('I', ''):gsub('!%S+', ''):gsub('%?%S+', ''):gsub('%.%S+',\
    \ ''):gsub('.', ''):len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpfw0zp6.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmpfw0zp6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return is_bored_as(S, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt03bps4i.lua:10:\
    \ attempt to call a nil value (global 'is_bored_as')\nstack traceback:\n\t/tmp/tmpt03bps4i.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpt03bps4i.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local first_char_i =\
    \ 0\n  local second_char_i = 0\n  while first_char_i <= #S do\n    second_char_i\
    \ = S:find(\"!\", first_char_i, true)\n    if not second_char_i then\n      second_char_i\
    \ = S:find(\".\", first_char_i, true)\n    end\n    if not second_char_i then\n\
    \      second_char_i = S:find(\"?\", first_char_i, true)\n    end\n    if not\
    \ second_char_i then\n      second_char_i = #S + 1\n    end\n    if S:sub(first_char_i,\
    \ first_char_i):upper() == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \    first_char_i = second_char_i + 1\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_l458df.lua:37:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa_l458df.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local words = split(S,\
    \ '%s+')\n  local found_end = false\n  for i = 1, #words do\n    if not found_end\
    \ then\n      if words[i] == 'I' then\n        boredoms = boredoms + 1\n     \
    \ end\n      for j = 1, #words[i] do\n        if words[i]:sub(j, j) == '.' or\
    \ words[i]:sub(j, j) == '?' or words[i]:sub(j, j) == '!' then\n          found_end\
    \ = true\n        end\n      end\n    else\n      if words[i] == 'I' then\n  \
    \      boredoms = boredoms + 1\n        found_end = false\n      end\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm3wafx3y.lua:11:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpm3wafx3y.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpm3wafx3y.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for sentence in S:gmatch('[^%.!?]+')\
    \ do\n    local tokens = mylib.tokenize(sentence)\n    if #tokens > 0 and tokens[1]:lower()\
    \ == 'i' then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvhoxu1gt.lua:12:\
    \ attempt to index a nil value (global 'mylib')\nstack traceback:\n\t/tmp/tmpvhoxu1gt.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpvhoxu1gt.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local count = 0\n   for str in string.gmatch(S,\
    \ \"([^.!?]+)\") do\n      local s = string.match(str, \"I%s\")\n      if s then\n\
    \         count = count + 1\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52w2m566.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp52w2m566.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    local token = {}\n\
    \    for word in string.gmatch(S, '%w+') do\n        table.insert(token, word)\n\
    \    end\n    for i, v in ipairs(token) do\n        if v == 'I' then\n       \
    \     boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjuzi0ot.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprjuzi0ot.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local count = 0\n   local s = S .. '.'\n\
    \   local s_start = 1\n   local s_stop = nil\n   repeat\n      s_stop = string.find(s,\
    \ '[.?!]', s_start)\n      if s_stop ~= nil then\n         local sentence = string.sub(s,\
    \ s_start, s_stop-1)\n         if string.find(sentence, '^I') ~= nil then\n  \
    \          count = count + 1\n         end\n         s_start = s_stop + 1\n  \
    \    end\n   until s_stop == nil\n   return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfm46lr4.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgfm46lr4.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- TODO: Implement the function\n  -- Hint:\
    \ string.gmatch(), string.find(), string.match()\n  local count = 0\n  local sentences\
    \ = string.gmatch(S, '[^%!%.%?]+')\n  for line in sentences do\n    if string.find(line,\
    \ '^I') then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoadvn4fb.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpoadvn4fb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- CODE HERE\n    return nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1m8dqvq5.lua:17:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp1m8dqvq5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local boredoms = 0\n   for sentence in string.gmatch(S,\
    \ '%S[^!.?]+[!.?]') do\n      -- A sentence is a boredom iff it starts with \"\
    I\"\n      if string.find(sentence, '^I') then\n         boredoms = boredoms +\
    \ 1\n      end\n   end\n   return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8izmc5f.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpt8izmc5f.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    if S == \"\" then\n        return 0\n  \
    \  end\n    local s, e = string.find(S, \"I\")\n    if s == nil then\n       \
    \ return 0\n    end\n    local delimiters = \"[%!%?%.]\"\n    local ds, de = string.find(S,\
    \ delimiters)\n    if ds == nil then\n        return 1\n    end\n    if ds > s\
    \ then\n        return 1 + is_bored(string.sub(S, de + 1))\n    else\n       \
    \ return is_bored(string.sub(S, e + 1))\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp728xw18a.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp728xw18a.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal sum = 0\n\tfor word in string.gmatch(S,\
    \ '%w+') do\n\t\tif word == 'I' then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\t\
    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yfbmveo.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3yfbmveo.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 0
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local n = 0\n  for s in S:gmatch('[^!.?]+')\
    \ do\n    local word = s:match('%S+')\n    if word == 'I' then\n      n = n +\
    \ 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local _, count = string.gsub(S, 'I', 'I')\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r84vbkh.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8r84vbkh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Start with 0 boredoms\n  local n = 0\n\
    \  -- Make the string lowercase\n  S = S:lower()\n  -- Remove leading and trailing\
    \ whitespace\n  S = S:gsub('^%s*', ''):gsub('%s*$', '')\n  -- Replace any run\
    \ of whitespace with a single space\n  S = S:gsub('%s+', ' ')\n  -- Split the\
    \ string into sentences\n  for s in S:gmatch('[^!.?]+') do\n    -- If the sentence\
    \ starts with 'i ' then we have a boredom\n    if s:sub(1, 2) == 'i ' then\n \
    \     n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0htbgks.lua:35:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_0htbgks.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for w in string.gmatch(S,\
    \ '[^%s]+') do\n        if w == 'I' then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0hp6t89.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpr0hp6t89.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local sentences = split(S, '.')\n    local\
    \ boredoms = 0\n    for _, sentence in ipairs(sentences) do\n        local words\
    \ = split(sentence, ' ')\n        if words[1] == 'I' then\n            boredoms\
    \ = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxdthgdt.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpgxdthgdt.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpgxdthgdt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local i = 0\n    local b = 0\n    while\
    \ i < #S do\n        while i < #S and S:sub(i, i) ~= '.' and S:sub(i, i) ~= '?'\
    \ and S:sub(i, i) ~= '!' do\n            i = i + 1\n        end\n        i = i\
    \ + 1\n        local w, p = S:match('(%w+)(%W*)', i)\n        if w and p and w:lower()\
    \ == 'i' then\n            b = b + 1\n        end\n        i = i + #w + #p\n \
    \   end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_jnlkwzz.lua:21:\
    \ attempt to get length of a nil value (local 'w')\nstack traceback:\n\t/tmp/tmp_jnlkwzz.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp_jnlkwzz.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local tokens = split(S, '[.?!]')\n    local\
    \ boredoms = 0\n    for _, token in ipairs(tokens) do\n        local words = split(token,\
    \ '%s+')\n        if words[1] == 'I' then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7q1xp8w.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpk7q1xp8w.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpk7q1xp8w.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return S:gsub('I.-[!?.]', ''):len()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeajvniqp.lua:16:\
    \ expected: 0, actual: 11\nstack traceback:\n\t/tmp/tmpeajvniqp.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Split the string into sentences, then count\
    \ the I's\n  local _, count = string.gsub(S, 'I', '')\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj948w3k0.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj948w3k0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for sentence in string.gmatch(S,\
    \ '[^.?!]+') do\n        if string.sub(sentence,1,1) == 'I' then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nprint(is_bored('Hello\
    \ world'))\nprint(is_bored('The sky is blue. The sun is shining. I love this weather'))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "0\n0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xqt5y5g.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9xqt5y5g.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Remove all delimiters\n  local str = string.gsub(S,\
    \ '[.?!]', '')\n  -- Split the string into words and remove the first one\n  local\
    \ words = string.split(str, ' ')\n  local count = 0\n  for _, v in ipairs(words)\
    \ do\n    if v == 'I' then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaciiixb0.lua:13:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpaciiixb0.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpaciiixb0.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    --\n    -- YOUR CODE GOES HERE\n    --\n\
    \    local pos = 1\n    local cnt = 0\n    local len = S:len()\n    for i = 1,\
    \ len do\n        if (S:sub(i, i) == '.' or S:sub(i, i) == '?' or S:sub(i, i)\
    \ == '!') then\n            if (S:sub(pos, pos + 1) == 'I ') then\n          \
    \      cnt = cnt + 1\n            end\n            pos = i + 1\n        end\n\
    \    end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50et7qs0.lua:34:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp50et7qs0.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\treturn S:gsub('^I', ''):gsub('%.', ''):gsub('%?',\
    \ ''):gsub('!', ''):len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nee7jph.lua:16:\
    \ expected: 0, actual: 11\nstack traceback:\n\t/tmp/tmp6nee7jph.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local words = split(S, \" \", true)\n  \
    \  local count = 0\n    for i, w in ipairs(words) do\n        if w == \"I\" and\
    \ i == 1 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpivpxp0f_.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpivpxp0f_.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpivpxp0f_.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal boredoms = 0\n\tlocal i = 0\n\twhile\
    \ true do\n\t\ti = string.find(S, \"I\", i + 1)\n\t\tif i == nil then break end\n\
    \t\tlocal start = i\n\t\tlocal stop = i\n\t\twhile string.find(S, \"[.?!]\", stop\
    \ + 1) == stop + 1 do\n\t\t\tstop = stop + 1\n\t\tend\n\t\tlocal sent = string.sub(S,\
    \ start, stop)\n\t\tlocal len = string.len(sent)\n\t\tif len > 1 then\n\t\t\t\
    if string.find(sent, \"I%s+\") ~= nil or string.find(sent, \"I$\") ~= nil then\n\
    \t\t\t\tboredoms = boredoms + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncawysao.lua:36:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpncawysao.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local m = 0\n    for word in S:gmatch('%w+')\
    \ do\n        if word == 'I' then\n            m = m + 1\n        end\n    end\n\
    \    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozue75fv.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpozue75fv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- your code goes here!\n  local count = 0\n\
    \  local index = 1\n  while index <= #S do\n    local index1 = string.find(S,\
    \ \".\", index)\n    local index2 = string.find(S, \"?\", index)\n    local index3\
    \ = string.find(S, \"!\", index)\n    local index4 = math.min(index1 or math.maxinteger,\
    \ index2 or math.maxinteger, index3 or math.maxinteger)\n    local sub = string.sub(S,\
    \ index, index4-1)\n    if string.find(sub, \"I\") == 1 then\n      count = count\
    \ + 1\n    end\n    index = index4 + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2z3bfos4.lua:32:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2z3bfos4.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- your code here\n  local boredoms = 0\n\
    \  local isword = false\n  for i = 1, #S do\n    local c = S:sub(i, i)\n    if\
    \ c == 'I' then\n      isword = true\n    elseif isword and c == ' ' then\n  \
    \    isword = false\n    elseif not isword and c == 'I' then\n      boredoms =\
    \ boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnzum9_a.lua:31:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmptnzum9_a.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    -- write your code\
    \ here\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo82whbsl.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpo82whbsl.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    if not S then return 0 end\n    local cnt\
    \ = 0\n    local t = string.split(S, {'.', '?', '!'})\n    for _, v in ipairs(t)\
    \ do\n        local t = string.split(v, ' ')\n        if t[1] == 'I' then\n  \
    \          cnt = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjc3put8x.lua:12:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpjc3put8x.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpjc3put8x.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local count = 0\n   local i = 0\n   while\
    \ i < #S do\n      i = i + 1\n      while (i <= #S) and (S:sub(i, i) ~= '!') and\
    \ (S:sub(i, i) ~= '.') and (S:sub(i, i) ~= '?') do\n         i = i + 1\n     \
    \ end\n      if i > #S then\n         break\n      end\n      local j = i - 1\n\
    \      while (j > 0) and (S:sub(j, j) ~= ' ') do\n         j = j - 1\n      end\n\
    \      if (j > 0) and (S:sub(j, j) == ' ') then\n         j = j + 1\n      end\n\
    \      if (j >= 1) and (S:sub(j, j + 1) == 'I ') then\n         count = count\
    \ + 1\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53m6raa3.lua:39:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp53m6raa3.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978020
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- your code goes here\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4b29lbdi.lua:23: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978020
