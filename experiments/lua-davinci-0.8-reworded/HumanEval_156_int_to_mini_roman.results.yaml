name: HumanEval_156_int_to_mini_roman
language: lua
results:
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    assert(number > 0, \"number must be positive\")\n    assert(number <= 1000,\
    \ \"number too large\")\n    local result = \"\"\n    local i = 1\n    while number\
    \ > 0 do\n        local v = number % 10\n        local roman = integer_to_roman_digit[v]\n\
    \        local factor = roman_digit_factor[i]\n        result = roman .. result\n\
    \        i = i + 1\n        number = (number - v) / 10\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1uei27j6.lua:18:\
    \ attempt to index a nil value (global 'integer_to_roman_digit')\nstack traceback:\n\
    \t/tmp/tmp1uei27j6.lua:18: in local 'candidate'\n\t/tmp/tmp1uei27j6.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \t-- TODO: implement.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy82neaeb.lua:18:\
    \ expected: \"xix\"\nactual: nil\nstack traceback:\n\t/tmp/tmpy82neaeb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  assert(number > 0, \"Number must be positive\")\n  assert(number <= 1000, \"\
    Number must be <= 1000\")\n  local result = \"\"\n  local digit = math.floor(number\
    \ / 100)\n  number = number % 100\n  if digit == 9 then\n    result = result ..\
    \ \"cm\"\n  elseif digit >= 5 then\n    result = result .. \"d\"\n    while digit\
    \ > 5 do\n      result = result .. \"c\"\n      digit = digit - 1\n    end\n \
    \ elseif digit == 4 then\n    result = result .. \"cd\"\n  else\n    while digit\
    \ > 0 do\n      result = result .. \"c\"\n      digit = digit - 1\n    end\n \
    \ end\n  digit = math.floor(number / 10)\n  number = number % 10\n  if digit ==\
    \ 9 then\n    result = result .. \"xc\"\n  elseif digit >= 5 then\n    result\
    \ = result .. \"l\"\n    while digit > 5 do\n      result = result .. \"x\"\n\
    \      digit = digit - 1\n    end\n  elseif digit == 4 then\n    result = result\
    \ .. \"xl\"\n  else\n    while digit > 0 do\n      result = result .. \"x\"\n\
    \      digit = digit - 1\n    end\n  end\n  digit = number\n  if digit == 9 then\n\
    \    result = result .. \"ix\"\n  elseif digit >= 5 then\n    result = result\
    \ .. \"v\"\n    while digit > 5 do\n      result = result .. \"i\"\n      digit\
    \ = digit - 1\n    end\n  elseif digit == 4 then\n    result = result .. \"iv\"\
    \n  else\n    while digit > 0 do\n      result = result .. \"i\"\n      digit\
    \ = digit - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3skszmqo.lua:87:\
    \ expected: \"m\"\nactual: \"dccccc\"\nstack traceback:\n\t/tmp/tmp3skszmqo.lua:87:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  -- Validate input number\n  if number <= 0 or number > 1000 then\n    error('number\
    \ must be between 1 and 1000')\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf3pz5qng.lua:36: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_map = {\n    M = 1000,\n    CM = 900,\n    D = 500,\n    CD = 400,\n\
    \    C = 100,\n    XC = 90,\n    L = 50,\n    XL = 40,\n    X = 10,\n    IX =\
    \ 9,\n    V = 5,\n    IV = 4,\n    I = 1\n  }\n  local roman_numerals = {}\n \
    \ local remainder = number\n  for roman, int in pairs(roman_map) do\n    while\
    \ remainder >= int do\n      table.insert(roman_numerals, roman)\n      remainder\
    \ = remainder - int\n    end\n  end\n  return table.concat(roman_numerals)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8tsx_ib.lua:41:\
    \ expected: \"xix\"\nactual: \"XIIIIIIIII\"\nstack traceback:\n\t/tmp/tmpd8tsx_ib.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local result = \"\"\n  for n, f in pairs(ones) do\n    if number >= n then\n\
    \      result = result .. string.rep(f, number / n)\n      number = number % n\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf82toyf.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpdf82toyf.lua:13: in local 'candidate'\n\t/tmp/tmpdf82toyf.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local remainder = number\n  local results = {}\n  for _, roman_numeral in ipairs(ROMAN_NUMERALS)\
    \ do\n    local count = math.floor(remainder / roman_numeral.value)\n    if count\
    \ > 0 then\n      remainder = remainder - (count * roman_numeral.value)\n    \
    \  for i = 1, count do\n        table.insert(results, roman_numeral.letter)\n\
    \      end\n    end\n  end\n  return table.concat(results)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a nil value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local map = {\n        { 'm', 1000, 0 },\n        { 'cm', 900,  1 },\n  \
    \      { 'd',  500,  0 },\n        { 'cd', 400,  1 },\n        { 'c',  100,  0\
    \ },\n        { 'xc',  90,  1 },\n        { 'l',   50,  0 },\n        { 'xl',\
    \  40,  1 },\n        { 'x',   10,  0 },\n        { 'ix',   9,  1 },\n       \
    \ { 'v',    5,  0 },\n        { 'iv',   4,  1 },\n        { 'i',    1,  0 },\n\
    \    }\n    if number < 1 or number > 1000 then\n        error(\"number should\
    \ be 1-1000\")\n    end\n    local result = \"\"\n    local pos = 1\n    while\
    \ number > 0 do\n        local item = map[pos]\n        local value = item[2]\n\
    \        local four = item[3]\n        if number >= value then\n            if\
    \ four == 1 then\n                result = result .. item[1]\n               \
    \ pos = pos + 1\n            end\n            result = result .. item[1]\n   \
    \         number = number - value\n        else\n            pos = pos + 1\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckt7o2qp.lua:53:\
    \ expected: \"xix\"\nactual: \"xixix\"\nstack traceback:\n\t/tmp/tmpckt7o2qp.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local table = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n    {400,\
    \ 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40, 'xl'},\n\
    \    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1, 'i'}\n\
    \  }\n  local roman = ''\n  for _, t in ipairs(table) do\n    local num, str =\
    \ t[1], t[2]\n    while number >= num do\n      roman = roman .. str\n      number\
    \ = number - num\n    end\n  end\n  return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local ROMAN_SYMBOLS = {'i', 'v', 'x', 'l', 'c', 'd', 'm'}\n  local parts =\
    \ {}\n  local left = number\n  local repeat_count = 0\n  for base=7, 1, -2 do\n\
    \    repeat_count = left % 10\n    local lookahead = (left % 100) - repeat_count\n\
    \    if repeat_count == 9 then\n      table.insert(parts, 1, ROMAN_SYMBOLS[base+2])\n\
    \      table.insert(parts, 1, ROMAN_SYMBOLS[base])\n    elseif repeat_count >=\
    \ 5 then\n      table.insert(parts, 1, ROMAN_SYMBOLS[base+1])\n      repeat_count\
    \ = repeat_count - 5\n      while repeat_count > 0 do\n        table.insert(parts,\
    \ 1, ROMAN_SYMBOLS[base])\n        repeat_count = repeat_count - 1\n      end\n\
    \    elseif repeat_count == 4 then\n      table.insert(parts, 1, ROMAN_SYMBOLS[base+2])\n\
    \      table.insert(parts, 1, ROMAN_SYMBOLS[base+1])\n    else\n      while repeat_count\
    \ > 0 do\n        table.insert(parts, 1, ROMAN_SYMBOLS[base])\n        repeat_count\
    \ = repeat_count - 1\n      end\n    end\n    left = math.floor(left / 10)\n \
    \ end\n  return table.concat(parts)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bd4f_qe.lua:46:\
    \ expected: \"xix\"\nactual: \"cm\"\nstack traceback:\n\t/tmp/tmp_bd4f_qe.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  return int_to_roman(number):lower()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpytjlpmkm.lua:12:\
    \ attempt to call a nil value (global 'int_to_roman')\nstack traceback:\n\t/tmp/tmpytjlpmkm.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpytjlpmkm.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local number = tostring(number)\n    local result = ''\n    local digit_map\
    \ = {\n        ['0'] = '',\n        ['1'] = 'i',\n        ['2'] = 'ii',\n    \
    \    ['3'] = 'iii',\n        ['4'] = 'iv',\n        ['5'] = 'v',\n        ['6']\
    \ = 'vi',\n        ['7'] = 'vii',\n        ['8'] = 'viii',\n        ['9'] = 'ix',\n\
    \    }\n    local power_map = {\n        [0] = '',\n        [1] = 'x',\n     \
    \   [2] = 'c',\n        [3] = 'm',\n    }\n    for index = 1, #number do\n   \
    \     local digit = string.sub(number, index, index)\n        local power = #number\
    \ - index\n        result = result .. string.rep(power_map[power], digit) .. digit_map[digit]\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizgnua8e.lua:43:\
    \ expected: \"xix\"\nactual: \"xiix\"\nstack traceback:\n\t/tmp/tmpizgnua8e.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    return convert_to_roman(number, roman_digits)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbudbi08.lua:12:\
    \ attempt to call a nil value (global 'convert_to_roman')\nstack traceback:\n\t\
    /tmp/tmpsbudbi08.lua:12: in local 'candidate'\n\t/tmp/tmpsbudbi08.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_number_table = {\n    {'', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii',\
    \ 'viii', 'ix'},\n    {'', 'x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx', 'xc'},\n\
    \    {'', 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc', 'dccc', 'cm'},\n    {'', 'm',\
    \ 'mm', 'mmm'}\n  }\n  local roman_string = ''\n  local digit = 0\n  while number\
    \ > 0 do\n    roman_string = roman_number_table[#roman_number_table][number %\
    \ 10] .. roman_string\n    number = math.floor(number / 10)\n    digit = digit\
    \ + 1\n  end\n  return roman_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy1s3caik.lua:21:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpy1s3caik.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpy1s3caik.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local symbols = {'m', 'd', 'c', 'l', 'x', 'v', 'i'}\n    local result = ''\n\
    \    local i = 1\n    local d = 1000\n    while d > 0 do\n        local m = number\
    \ % 10\n        number = math.floor(number / 10)\n        if m ~= 0 then\n   \
    \         local q = m * d\n            if q == 900 then\n                result\
    \ = result .. symbols[i] .. symbols[i - 2]\n            elseif q == 400 then\n\
    \                result = result .. symbols[i] .. symbols[i - 1]\n           \
    \ elseif q >= 500 then\n                result = result .. symbols[i - 1] .. string.rep(symbols[i],\
    \ q / 500)\n            elseif q >= 100 then\n                result = result\
    \ .. string.rep(symbols[i], q / 100)\n            elseif q == 90 then\n      \
    \          result = result .. symbols[i + 1] .. symbols[i - 2]\n            elseif\
    \ q == 40 then\n                result = result .. symbols[i + 1] .. symbols[i\
    \ - 1]\n            elseif q >= 50 then\n                result = result .. symbols[i\
    \ - 1] .. string.rep(symbols[i + 1], q / 50)\n            elseif q >= 10 then\n\
    \                result = result .. string.rep(symbols[i + 1], q / 10)\n     \
    \       elseif q == 9 then\n                result = result .. symbols[i + 2]\
    \ .. symbols[i - 2]\n            elseif q == 4 then\n                result =\
    \ result .. symbols[i + 2] .. symbols[i - 1]\n            elseif q >= 5 then\n\
    \                result = result .. symbols[i - 1] .. string.rep(symbols[i + 2],\
    \ q / 5)\n            else\n                result = result .. string.rep(symbols[i\
    \ + 2], q)\n            end\n        end\n        i = i + 2\n        d = d / 10\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpucaof8_p.lua:26:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpucaof8_p.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpucaof8_p.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \t-- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq1im78a.lua:18:\
    \ expected: \"xix\"\nactual: nil\nstack traceback:\n\t/tmp/tmpfq1im78a.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local romans = {\n        ['M'] = 1000,\n        ['CM'] = 900,\n        ['D']\
    \ = 500,\n        ['CD'] = 400,\n        ['C'] = 100,\n        ['XC'] = 90,\n\
    \        ['L'] = 50,\n        ['XL'] = 40,\n        ['X'] = 10,\n        ['IX']\
    \ = 9,\n        ['V'] = 5,\n        ['IV'] = 4,\n        ['I'] = 1\n    }\n  \
    \  local num = number\n    local roman = ''\n    for ch, arabic in pairs(romans)\
    \ do\n        local repeats = math.floor(num / arabic)\n        roman = roman\
    \ .. string.rep(ch, repeats)\n        num = num - repeats * arabic\n    end\n\
    \    return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot58luhl.lua:40:\
    \ expected: \"xix\"\nactual: \"IVIVIVIVIII\"\nstack traceback:\n\t/tmp/tmpot58luhl.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = {}\n    local i = 1\n    while number > 0 do\n        if number\
    \ >= 10 then\n            if number >= 100 then\n                if number >=\
    \ 1000 then\n                    result[i] = 'm'\n                    number =\
    \ number - 1000\n                else\n                    result[i] = 'c'\n \
    \                   number = number - 100\n                end\n            else\n\
    \                result[i] = 'x'\n                number = number - 10\n     \
    \       end\n        else\n            if number >= 5 then\n                result[i]\
    \ = 'v'\n                number = number - 5\n            else\n             \
    \   result[i] = 'i'\n                number = number - 1\n            end\n  \
    \      end\n        i = i + 1\n    end\n    return concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy5793gpf.lua:39:\
    \ attempt to call a nil value (global 'concat')\nstack traceback:\n\t/tmp/tmpy5793gpf.lua:39:\
    \ in local 'candidate'\n\t/tmp/tmpy5793gpf.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  -- returns the roman numeral of a given number\n  local int_to_roman = {\n\
    \    [1]='i', [2]='ii', [3]='iii', [4]='iv', [5]='v', [6]='vi', [7]='vii', [8]='viii',\
    \ [9]='ix',\n    [10]='x', [20]='xx', [30]='xxx', [40]='xl', [50]='l', [60]='lx',\
    \ [70]='lxx', [80]='lxxx', [90]='xc',\n    [100]='c', [200]='cc', [300]='ccc',\
    \ [400]='cd', [500]='d', [600]='dc', [700]='dcc', [800]='dccc', [900]='cm',\n\
    \    [1000]='m', [2000]='mm', [3000]='mmm', [4000]='mv', [5000]='v', [6000]='vm',\
    \ [7000]='vmm', [8000]='vmmm', [9000]='mx',\n  }\n  if number > 1000 then\n  \
    \  return 'm' .. ('x'):rep(number-1000)\n  else\n    local _, remainder = number:floor(1000)\n\
    \    if remainder == 0 then\n      return int_to_roman[number]\n    else\n   \
    \   local thousands, hundreds = remainder:floor(100)\n      local units = remainder\
    \ - hundreds * 100\n      return (int_to_roman[thousands*1000] or '') .. (int_to_roman[hundreds*100]\
    \ or '') .. (int_to_roman[units] or '')\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp579na0td.lua:22:\
    \ attempt to index a number value (local 'number')\nstack traceback:\n\t/tmp/tmp579na0td.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp579na0td.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  if number < 1 or number > 1000 then\n    return \"\"\n  end\n  local result\
    \ = \"\"\n  if number >= 1000 then\n    result = \"m\"\n    number = number -\
    \ 1000\n  end\n  if number >= 900 then\n    result = result .. \"cm\"\n    number\
    \ = number - 900\n  end\n  if number >= 500 then\n    result = result .. \"d\"\
    \n    number = number - 500\n  end\n  if number >= 400 then\n    result = result\
    \ .. \"cd\"\n    number = number - 400\n  end\n  if number >= 100 then\n    result\
    \ = result .. (\"c\"):rep(math.floor(number / 100))\n    number = number % 100\n\
    \  end\n  if number >= 90 then\n    result = result .. \"xc\"\n    number = number\
    \ - 90\n  end\n  if number >= 50 then\n    result = result .. \"l\"\n    number\
    \ = number - 50\n  end\n  if number >= 40 then\n    result = result .. \"xl\"\n\
    \    number = number - 40\n  end\n  if number >= 10 then\n    result = result\
    \ .. (\"x\"):rep(math.floor(number / 10))\n    number = number % 10\n  end\n \
    \ if number >= 9 then\n    result = result .. \"ix\"\n    number = number - 9\n\
    \  end\n  if number >= 5 then\n    result = result .. \"v\"\n    number = number\
    \ - 5\n  end\n  if number >= 4 then\n    result = result .. \"iv\"\n    number\
    \ = number - 4\n  end\n  if number >= 1 then\n    result = result .. (\"i\"):rep(number)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
