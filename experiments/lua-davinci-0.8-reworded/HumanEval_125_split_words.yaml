name: HumanEval_125_split_words
language: lua
prompt: "-- Given a string of words, return a table of words split on whitespace,\
  \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
  -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
  -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
  \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
  \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
  \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
  \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
  \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local words = {}\n    local commas = true\n    local punct = true\n\
    \    local i = 1\n    local string_start = nil\n    while i <= #txt do\n     \
    \   local c = txt:sub(i, i)\n        local code = c:byte()\n        if code ==\
    \ 34 then -- \"\n            if string_start then\n                string_start\
    \ = nil\n            else\n                string_start = i\n            end\n\
    \        elseif string_start and code == 44 then -- ,\n            table.insert(words,\
    \ txt:sub(string_start + 1, i - 1))\n            string_start = nil\n        elseif\
    \ not string_start and code == 44 then -- ,\n            commas = false\n    \
    \    elseif not string_start and (code == 33 or code == 46 or code == 63) then\
    \ -- !.?\n            punct = false\n        end\n        i = i + 1\n    end\n\
    \    if string_start then\n        table.insert(words, txt:sub(string_start +\
    \ 1, #txt))\n    end\n    if #words == 0 then\n        if commas then\n      \
    \      i = 1\n            local num_odd = 0\n            while i <= #txt do\n\
    \                local code = txt:sub(i, i):byte()\n                if code >=\
    \ 97 and code <= 122 then\n                    num_odd = num_odd + (1 - (code\
    \ - 96) % 2)\n                end\n                i = i + 1\n            end\n\
    \            return num_odd\n        elseif punct then\n            return {txt}\n\
    \        end\n    end\n    return words\nend", "  return {}\nend", "    -- TODO\n\
    end", "  local function split_words_by_whitespace(txt)\n    local words = {}\n\
    \    local word_start = 1\n    for i = 1, #txt do\n      if string.find(txt, '%s',\
    \ i) then\n        words[#words + 1] = string.sub(txt, word_start, i - 1)\n  \
    \      word_start = i + 1\n      end\n    end\n    words[#words + 1] = string.sub(txt,\
    \ word_start, #txt)\n    return words\n  end", "    return {}\nend", "  local\
    \ words = {}\n  if txt:find(\" \") then\n    for word in txt:gmatch(\"%S+\") do\n\
    \      table.insert(words, word)\n    end\n  elseif txt:find(\",\") then\n   \
    \ for word in txt:gmatch(\"[^,]+\") do\n      table.insert(words, word)\n    end\n\
    \  else\n    local odd, even = 0, 0\n    for i = 1, txt:len() do\n      local\
    \ n = string.byte(txt, i) - 96\n      if n % 2 == 0 then\n        even = even\
    \ + 1\n      else\n        odd = odd + 1\n      end\n    end\n    return odd >\
    \ even and odd or even\n  end\n  return words\nend", "    local words = {}\n \
    \   local del = txt:find(' ') and ' ' or (txt:find(',') and ',' or nil)\n    if\
    \ del then\n        for w in txt:gmatch('[^'..del..']+') do\n            table.insert(words,\
    \ w)\n        end\n    else\n        local _, i = 0, 1\n        for m in txt:gmatch('[a-z]')\
    \ do\n            _ = _ + (i % 2 == 0 and ord(m) or -ord(m))\n            i =\
    \ i + 1\n        end\n        words = _\n    end\n    return words\nend", "  --\
    \ TODO: implement me\nend", "  -- your code here\nend", "    local ws = tostring(txt):find(\"\
    [%s]\")\n    if ws then\n        local words = {}\n        for w in tostring(txt):gmatch(\"\
    %w+\") do\n            table.insert(words, w)\n        end\n        return words\n\
    \    else\n        local comma = tostring(txt):find(\",\")\n        if comma then\n\
    \            local words = {}\n            for w in tostring(txt):gmatch(\"%w+\"\
    ) do\n                table.insert(words, w)\n            end\n            return\
    \ words\n        else\n            local num = 0\n            for c in tostring(txt):gmatch(\"\
    %a\") do\n                local code = string.byte(c)\n                if code\
    \ % 2 == 1 then\n                    num = num + 1\n                end\n    \
    \        end\n            return num\n        end\n    end\nend", "\tif not txt\
    \ then\n\t\treturn {}\n\tend\n\ttxt = txt:gsub(\"^%s*(.-)%s*$\", \"%1\")\n\tlocal\
    \ s = {}\n\tlocal i = 1\n\twhile true do\n\t\tlocal j = string.find(txt, \"[%s,]\"\
    , i)\n\t\tif not j then\n\t\t\ts[#s + 1] = txt:sub(i)\n\t\t\tbreak\n\t\tend\n\t\
    \ts[#s + 1] = txt:sub(i, j - 1)\n\t\ti = j + 1\n\tend\n\tif #s == 0 then\n\t\t\
    local n = 0\n\t\tfor i = 1, #txt do\n\t\t\tif (i % 2 == 1) and (txt:byte(i) >=\
    \ string.byte('a')) and (txt:byte(i) <= string.byte('z')) then\n\t\t\t\tn = n\
    \ + 1\n\t\t\tend\n\t\tend\n\t\treturn n\n\tend\n\treturn s\nend", "  local split_array\
    \ = {}\n  local has_comma = false\n  local has_space = false\n  for char in txt:gmatch(\"\
    .\") do\n    if char == ',' then\n      has_comma = true\n    elseif char == '\
    \ ' then\n      has_space = true\n    end\n  end\n  if has_space then\n    split_array\
    \ = txt:split(\" \")\n  elseif has_comma then\n    split_array = txt:split(\"\
    ,\")\n  else\n    local count = 0\n    for _, letter in ipairs(txt:lower():to_array())\
    \ do\n      if (letter:byte() - 97) % 2 == 1 then\n        count = count + 1\n\
    \      end\n    end\n    return count\n  end\n  return split_array\nend", "  \
    \  if txt:find('%S') then\n        return txt:find('%S')\n    elseif txt:find(',')\
    \ then\n        return txt:find(',')\n    else\n        return txt:find('%s')\n\
    \    end\nend", "    if txt:find('%s') then\n        local t = {}\n        for\
    \ word in txt:gmatch('%w+') do\n            table.insert(t, word)\n        end\n\
    \        return t\n    elseif txt:find(',') then\n        local t = {}\n     \
    \   for word in txt:gmatch('%w+') do\n            table.insert(t, word)\n    \
    \    end\n        return t\n    else\n        local odds = 0\n        for i =\
    \ 1, #txt do\n            local c = txt:sub(i, i)\n            if c:byte() % 2\
    \ == 1 then\n                odds = odds + 1\n            end\n        end\n \
    \       return odds\n    end\nend", "  -- your code here\nend", "    local splits\
    \ = split(txt, ' ')\n    if #splits > 1 then\n        return splits\n    end\n\
    \    splits = split(txt, ',')\n    if #splits > 1 then\n        return splits\n\
    \    end\n    local res = 0\n    for i = 1, #txt do\n        local ord = byte(txt,\
    \ i) - byte('a')\n        if ord % 2 == 1 then\n            res = res + 1\n  \
    \      end\n    end\n    return res\nend", "\tlocal t = {}\n\tif txt:find(\" \"\
    ) then\n\t\tfor k in txt:gmatch(\"%w+\") do\n\t\t\ttable.insert(t, k)\n\t\tend\n\
    \telseif txt:find(\",\") then\n\t\tfor k in txt:gmatch(\"%w+\") do\n\t\t\ttable.insert(t,\
    \ k)\n\t\tend\n\telse\n\t\tlocal count = 0\n\t\tfor i = 1, #txt do\n\t\t\tif txt:sub(i,\
    \ i):lower():byte() % 2 == 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\
    end\n\t\treturn count\n\tend\n\treturn t\nend", end, "    local w = {}\n    for\
    \ word in txt:gmatch('%w+') do\n        table.insert(w, word)\n    end\n    if\
    \ #w == 0 then\n        local count = 0\n        for i=1,#txt do\n           \
    \ local x = string.byte(txt, i) - string.byte('a')\n            if x % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\n    return w\nend", "    -- Split on whitespace\n\
    \    local tbl = {}\n    for v in txt:gmatch('%S+') do\n        tbl[#tbl+1] =\
    \ v\n    end\n    if #tbl == 0 then\n        -- Split on commas\n        for v\
    \ in txt:gmatch('[^,]+') do\n            tbl[#tbl+1] = v\n        end\n      \
    \  if #tbl == 0 then\n            -- Return number of lower-case letters with\
    \ odd order in the alphabet\n            local count = 0\n            for c in\
    \ txt:gmatch('%a') do\n                if (string.byte(c) - 97) % 2 == 1 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \            return count\n        end\n    end\n    return tbl\nend", "    local\
    \ words = split(txt, ' ')\n    if #words > 1 then\n        return words\n    end\n\
    \    words = split(txt, ',')\n    if #words > 1 then\n        return words\n \
    \   end\n    local odd = 0\n    for i = 1, #txt do\n        local c = txt:sub(i,\
    \ i)\n        local c = txt:sub(i, i)\n        local n = c:byte() - 97\n     \
    \   if n < 0 or n > 25 then\n            return nil\n        end\n        if n\
    \ % 2 == 1 then\n            odd = odd + 1\n        end\n    end\n    return odd\n\
    end", "    if txt == nil then\n        return nil\n    end\n    if string.find(txt,\
    \ \",\") then\n        return txt:split(\",\")\n    elseif string.find(txt, \"\
    \ \") then\n        return txt:split(\" \")\n    else\n        local sum = 0\n\
    \        for i = 1, #txt do\n            local num = txt:byte(i) - string.byte(\"\
    a\")\n            if num % 2 == 1 then\n                sum = sum + 1\n      \
    \      end\n        end\n        return sum\n    end\nend", "    return {}\nend",
  "    if not txt:find(\"%s\") then\n        if not txt:find(\",\") then\n       \
    \     local count = 0\n            for i=1, #txt do\n                local char\
    \ = txt:sub(i,i)\n                if string.byte(char) - 97 % 2 == 1 then\n  \
    \                  count = count + 1\n                end\n            end\n \
    \           return count\n        else\n            local strs = {}\n        \
    \    for str in string.gmatch(txt, \"([^,]+)\") do\n                table.insert(strs,\
    \ str)\n            end\n            return strs\n        end\n    else\n    \
    \    local strs = {}\n        for str in string.gmatch(txt, \"([^%s]+)\") do\n\
    \            table.insert(strs, str)\n        end\n        return strs\n    end\n\
    end", "\tlocal w = {}\n\tlocal c = 0\n\tfor word in txt:gmatch('%S+') do\n\t\t\
    table.insert(w, word)\n\tend\n\tif #w == 0 then\n\t\tfor i=1,#txt do\n\t\t\tif\
    \ (txt:byte(i) - 97) % 2 == 1 then\n\t\t\t\tc = c + 1\n\t\t\tend\n\t\tend\n\t\t\
    return c\n\tend\n\treturn w\nend", "\tfor i = 1,#txt do\n\t\tif txt:sub(i,i) ==\
    \ ' ' then\n\t\t\treturn {txt:sub(1,i-1), txt:sub(i+1)}\n\t\tend\n\tend\n\tfor\
    \ i = 1,#txt do\n\t\tif txt:sub(i,i) == ',' then\n\t\t\treturn {txt:sub(1,i-1),\
    \ txt:sub(i+1)}\n\t\tend\n\tend\n\tlocal i = 0\n\tfor j = 1,#txt do\n\t\tif txt:sub(j,j)\
    \ == string.char(97+j-1) then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn i\nend",
  "  local sep_chars = ' ,'\n  local idx_1 = 1\n  local idx_2 = 1\n  local res = {}\n\
    \  local words = 0\n  for i = 1, #txt do\n    local cur_char = txt:sub(i, i)\n\
    \    local char_code = cur_char:byte()\n    if char_code >= 97 and char_code <=\
    \ 122 then\n      words = words + 1\n    end\n    if i == 1 then\n      if sep_chars:find(cur_char,\
    \ 1, true) then\n        idx_1 = 2\n      end\n    elseif i == #txt then\n   \
    \   if sep_chars:find(cur_char, 1, true) then\n        idx_2 = i - 1\n      else\n\
    \        idx_2 = i\n      end\n    else\n      if sep_chars:find(cur_char, 1,\
    \ true) then\n        if idx_1 < idx_2 then\n          res[#res + 1] = txt:sub(idx_1,\
    \ idx_2)\n        end\n        idx_1 = i + 1\n      end\n    end\n  end\n  if\
    \ #res > 0 then\n    return res\n  else\n    return words\n  end\nend", "    --\
    \ Your code here\nend", "    local words = {}\n    for word in string.gmatch(txt,\
    \ '%S+') do\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n\
    \        for word in string.gmatch(txt, '[%a]') do\n            words[#words +\
    \ 1] = word\n        end\n        if #words == 0 then\n            return string.len(txt)\n\
    \        end\n    end\n    return words\nend", "\t-- cut words by whitespace\n\
    \tlocal words = {}\n\tfor word in txt:gmatch('%S+') do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\tif #words > 0 then\n\t\treturn words\n\tend\n\t-- cut words\
    \ by commas\n\tfor word in txt:gmatch('[^,]+') do\n\t\ttable.insert(words, word)\n\
    \tend\n\tif #words > 0 then\n\t\treturn words\n\tend\n\t-- count lower-case letters\
    \ with odd order in the alphabet\n\tlocal count = 0\n\tfor c in txt:gmatch('[a-z]')\
    \ do\n\t\tif c:byte() % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", end, "    local words = {}\n    local ret = {}\n    local\
    \ i = 1\n    for w in txt:gmatch('%S+') do\n        words[i] = w\n        i =\
    \ i + 1\n    end\n    if not next(words) then\n        for c in txt:gmatch('%S')\
    \ do\n            words[i] = c\n            i = i + 1\n        end\n    end\n\
    \    if not next(words) then\n        local count = 0\n        for c in txt:gmatch('%a')\
    \ do\n            if ((c:byte() - ord('a')) % 2) == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   for k, v in pairs(words) do\n        ret[k] = v\n    end\n    return ret\n\
    end", "\tlocal words = {}\n\tlocal function iter(i, state)\n\t\tif state > 0 then\n\
    \t\t\tlocal word = string.sub(txt, i, state)\n\t\t\ti = state + 1\n\t\t\tstate\
    \ = 0\n\t\t\treturn i, word\n\t\tend\n\t\tstate = state + 1\n\t\tif i > #txt then\n\
    \t\t\treturn nil\n\t\tend\n\t\tlocal char = string.sub(txt, i, i)\n\t\tif char\
    \ == ' ' then\n\t\t\treturn iter(i + 1, state)\n\t\telseif char == ',' then\n\t\
    \t\tif state == 1 then\n\t\t\t\treturn iter(i + 1, state)\n\t\t\telse\n\t\t\t\t\
    return i, string.sub(txt, i - state + 1, i - 1)\n\t\t\tend\n\t\telse\n\t\t\treturn\
    \ iter(i + 1, state)\n\t\tend\n\tend\n\tlocal i, word = iter(1, 0)\n\twhile i\
    \ do\n\t\twords[#words + 1] = word\n\t\ti, word = iter(i, 0)\n\tend\n\tif #words\
    \ == 0 then\n\t\tlocal ans = 0\n\t\tfor i = 1, #txt do\n\t\t\tlocal ch = string.sub(txt,\
    \ i, i)\n\t\t\tlocal ord = string.byte(ch) - 97\n\t\t\tif ord % 2 == 1 then\n\t\
    \t\t\tans = ans + 1\n\t\t\tend\n\t\tend\n\t\treturn ans\n\tend\n\treturn words\n\
    end", "  -- YOUR CODE HERE\nend", "    -- Write your code here\n    return nil\n\
    end", end, "    if txt:find(' ') then\n        return txt:split(' ')\n    elseif\
    \ txt:find(',') then\n        return txt:split(',')\n    else\n        local ret\
    \ = 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n     \
    \       if (c:byte() - 0x61) % 2 == 1 then\n                ret = ret + 1\n  \
    \          end\n        end\n        return ret\n    end\nend", "    local rt\
    \ = {}\n    if txt == nil then\n        return 0\n    end\n    local idx = txt:find('%s')\n\
    \    if idx == nil then\n        idx = txt:find(',')\n    end\n    if idx == nil\
    \ then\n        local odd = 0\n        for i = 1, #txt do\n            local ord\
    \ = txt:byte(i)\n            if ord < 97 or ord > 122 then\n                --\
    \ not a lower-case letter\n                return nil\n            end\n     \
    \       if (ord - 96) % 2 == 1 then\n                odd = odd + 1\n         \
    \   end\n        end\n        return odd\n    end\n    local left = txt:sub(1,\
    \ idx - 1)\n    local right = txt:sub(idx + 1)\n    table.insert(rt, left)\n \
    \   table.insert(rt, right)\n    return rt\nend", "  -- TODO\nend", "  local tmp\
    \ = txt:match(',*')\n  if tmp then\n    local words = {}\n    for word in txt:gmatch('%S+')\
    \ do\n      table.insert(words, word)\n    end\n    return words\n  else\n   \
    \ local count = 0\n    for i=1,#txt do\n      local c = txt:sub(i,i)\n      local\
    \ a = c:byte()\n      if a % 2 == 1 then\n        count = count + 1\n      end\n\
    \    end\n    return count\n  end\nend", "  -- we can use the lua pattern matching\
    \ capabilities to split on whitespace or comma\n  local tokens = {}\n  for token\
    \ in txt:gmatch('[^%s,]+') do\n    table.insert(tokens, token)\n  end\n  if #tokens\
    \ == 0 then\n    -- no whitespace or commas so we should use the 'odd-letters'\
    \ logic\n    local count = 0\n    for c in txt:gmatch('.') do\n      -- ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\n      if string.byte(c) >= 97 and string.byte(c)\
    \ <= 122 then\n        count = count + 1\n      end\n    end\n    return count\
    \ % 2\n  end\n  return tokens\nend", end, "    local words = {}\n    local w =\
    \ 0\n    local ch = nil\n    local splitter = nil\n    local i = 0\n    local\
    \ len = #txt\n    while i < len do\n        ch = txt:sub(i, i)\n        if splitter\
    \ == nil then\n            if ch == ' ' then\n                splitter = ' '\n\
    \            elseif ch == ',' then\n                splitter = ','\n         \
    \   else\n                w = w + 1\n            end\n        elseif splitter\
    \ == ' ' then\n            if ch ~= ' ' then\n                words[w] = words[w]\
    \ or ''\n                words[w] = words[w] .. ch\n            end\n        elseif\
    \ splitter == ',' then\n            if ch ~= ',' then\n                words[w]\
    \ = words[w] or ''\n                words[w] = words[w] .. ch\n            end\n\
    \        end\n        i = i + 1\n    end\n    if splitter == nil then\n      \
    \  return w\n    end\n    return words\nend", "    local result = {}\n    local\
    \ number = 0\n    local cnt = 0\n    local len = #txt\n    for i = 1, len do\n\
    \        local ch = string.sub(txt, i, i)\n        if ch == ' ' then\n       \
    \     if cnt > 0 then\n                table.insert(result, string.sub(txt, i\
    \ - cnt, i - 1))\n                cnt = 0\n            end\n        elseif ch\
    \ == ',' then\n            if cnt > 0 then\n                table.insert(result,\
    \ string.sub(txt, i - cnt, i - 1))\n                cnt = 0\n            end\n\
    \            local t = string.sub(txt, i + 1, len)\n            local num = 0\n\
    \            for j = 1, #t do\n                local x = string.sub(t, j, j)\n\
    \                if x >= 'a' and x <= 'z' then\n                    num = num\
    \ + 1\n                end\n            end\n            number = num\n      \
    \      break\n        else\n            cnt = cnt + 1\n        end\n    end\n\
    \    if cnt > 0 then\n        table.insert(result, string.sub(txt, len - cnt +\
    \ 1, len))\n    end\n    if number > 0 then\n        return number\n    else\n\
    \        return result\n    end\nend", "    return (txt:match('%a+') or txt:match('%a+,%a+')\
    \ or txt:match('%a+[,%s]%a+') or (#txt:match('[aeiou]') % 2) + 1)\nend", "   \
    \ -- write your code here\n    --return 'replace this line'\n    local l = string.gmatch(txt,\
    \ '%a+')\n    local r = {}\n    for w in l do\n        table.insert(r, w)\n  \
    \  end\n    if #r == 0 then\n        local num = 0\n        for i = 1, string.len(txt)\
    \ do\n            if (string.byte(txt, i) - 96) % 2 == 1 then\n              \
    \  num = num + 1\n            end\n        end\n        return num\n    end\n\
    \    return r\nend", "    local r = {}\n    local i = 0\n    for w in txt:gmatch('%S+')\
    \ do\n        i = i + 1\n        r[i] = w\n    end\n    if i > 0 then\n      \
    \  return r\n    end\n    i = 0\n    for w in txt:gmatch('[^,]+') do\n       \
    \ i = i + 1\n        r[i] = w\n    end\n    if i > 0 then\n        return r\n\
    \    end\n    local n = 0\n    for l in txt:gmatch('.') do\n        if ('a' <=\
    \ l) and (l <= 'z') then\n            if ord(l) % 2 == 1 then\n              \
    \  n = n + 1\n            end\n        end\n    end\n    return n\nend", "   \
    \ local res = {}\n    if txt:find('%s') then\n        for w in txt:gmatch('%S+')\
    \ do\n            res[#res + 1] = w\n        end\n    elseif txt:find(',') then\n\
    \        for w in txt:gmatch('[^,]+') do\n            res[#res + 1] = w\n    \
    \    end\n    else\n        local n = 0\n        for c in txt:gmatch('[a-z]')\
    \ do\n            if string.byte(c) % 2 == 1 then\n                n = n + 1\n\
    \            end\n        end\n        return n\n    end\n    return res\nend",
  "    if txt:find(\"%s\") then\n        t = {}\n        for w in txt:gmatch(\"%S+\"\
    ) do\n            table.insert(t, w)\n        end\n        return t\n    elseif\
    \ txt:find(\",\") then\n        t = {}\n        for w in txt:gmatch(\"[^,]+\"\
    ) do\n            table.insert(t, w)\n        end\n        return t\n    else\n\
    \        sum = 0\n        for i=1, #txt do\n            c = txt:sub(i,i)\n   \
    \         v = string.byte(c) - 97\n            if v % 2 == 1 then\n          \
    \      sum = sum + 1\n            end\n        end\n        return sum\n    end\n\
    end", "    -- TODO: Implement this function\n    if string.find(txt, '%s') ~=\
    \ nil then\n        return txt:split('%s')\n    elseif string.find(txt, ',') ~=\
    \ nil then\n        return txt:split(',')\n    else\n        return txt:gsub('[^a-z]',\
    \ ''):len()\n    end\nend", "  local ws = txt:find('%s')\n  if ws then\n    return\
    \ txt:split('%s')\n  end\n  local cm = txt:find(',')\n  if cm then\n    return\
    \ txt:split(',')\n  end\n  local c = 0\n  for i = 1, #txt do\n    local n = txt:sub(i,\
    \ i):byte() - string.byte('a')\n    if (n % 2) == 1 then\n      c = c + 1\n  \
    \  end\n  end\n  return c\nend", "    if txt:find(\"%S\") ~= nil then\n      \
    \  if txt:find(\",\") ~= nil then\n            local split = txt:split(\",\")\n\
    \            return split\n        else\n            local split = txt:split(\"\
    \ \")\n            return split\n        end\n    else\n        local sum = 0\n\
    \        for i=1,#txt do\n            local char = txt:sub(i,i)\n            local\
    \ n = string.byte(char) - string.byte(\"a\")\n            if n % 2 == 1 then\n\
    \                sum = sum + 1\n            end\n        end\n        return sum\n\
    \    end\nend", "    -- code here\nend", "\tlocal words = {}\n\tlocal i = 1\n\t\
    for w in txt:gmatch('[^%s,]+') do\n\t\twords[i] = w\n\t\ti = i + 1\n\tend\n\t\
    if #words == 0 then\n\t\tlocal cnt = 0\n\t\tfor c in txt:gmatch('[^%s,]+') do\n\
    \t\t\tif 'abcdefghijklmnopqrstuvwxyz':find(c, 1, true) then\n\t\t\t\tlocal i =\
    \ 'abcdefghijklmnopqrstuvwxyz':find(c, 1, true)\n\t\t\t\tif i % 2 == 1 then\n\t\
    \t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn cnt\n\tend\n\
    \treturn words\nend", "    local words = {}\n    local word = ''\n    local result\
    \ = {}\n    for c in txt:gmatch('.') do\n        if c == ' ' or c == ',' then\n\
    \            table.insert(words, word)\n            word = ''\n        else\n\
    \            word = word .. c\n        end\n    end\n    table.insert(words, word)\n\
    \    if #words == 1 then\n        local n = 0\n        for i, c in ipairs(words[1])\
    \ do\n            if string.byte(c) % 2 == 1 then\n                n = n + 1\n\
    \            end\n        end\n        return n\n    else\n        return words\n\
    \    end\nend", "    local words = {}\n    local word = ''\n    local sum = 0\n\
    \    for i=1,string.len(txt) do\n        local char = string.sub(txt, i, i)\n\
    \        if char == ' ' or char == ',' then\n            table.insert(words, word)\n\
    \            word = ''\n        else\n            word = word .. char\n      \
    \      if string.byte(char) >= string.byte('a') and string.byte(char) <= string.byte('z')\
    \ then\n                if i % 2 == 1 then\n                    sum = sum + (string.byte(char)\
    \ - string.byte('a'))\n                end\n            end\n        end\n   \
    \ end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n   \
    \ if #words > 0 then\n        return words\n    else\n        return sum\n   \
    \ end\nend", "    return {}\nend", "\tlocal t = {}\n\tfor w in txt:gmatch'[^%s]+'\
    \ do\n\t\ttable.insert(t, w)\n\tend\n\tif #t == 0 then\n\t\tfor w in txt:gmatch'[^,]+'\
    \ do\n\t\t\ttable.insert(t, w)\n\t\tend\n\tend\n\tif #t == 0 then\n\t\tlocal function\
    \ sum_alphabet(t)\n\t\t\tlocal sum = 0\n\t\t\tfor i = 0, 25 do\n\t\t\t\tsum =\
    \ sum + (string.match(t, string.char(i + 97)) and i or 0)\n\t\t\tend\n\t\t\treturn\
    \ sum\n\t\tend\n\t\treturn sum_alphabet(txt)\n\tend\n\treturn t\nend", "    if\
    \ type(txt) ~= 'string' then\n        return error('Expected a string')\n    end\n\
    \    local words = {}\n    for word in txt:gmatch('[^%s]+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        words = {}\n        for word\
    \ in txt:gmatch('[^,]+') do\n            table.insert(words, word)\n        end\n\
    \        if #words == 0 then\n            local sum = 0\n            for i = 1,\
    \ #txt do\n                local ch = txt:sub(i, i)\n                local ord\
    \ = string.byte(ch) - string.byte('a')\n                if ord % 2 == 1 then\n\
    \                    sum = sum + 1\n                end\n            end\n   \
    \         return sum\n        end\n    end\n    return words\nend", "    -- TODO:\
    \ your code here\nend", "\tlocal t = {}\n\tfor word in txt:gmatch('%S+') do\n\t\
    \ttable.insert(t, word)\n\tend\n\tif #t > 0 then\n\t\treturn t\n\tend\n\tt = {}\n\
    \tfor word in txt:gmatch('[^,]+') do\n\t\ttable.insert(t, word)\n\tend\n\tif #t\
    \ > 0 then\n\t\treturn t\n\tend\n\tlocal c = 0\n\tfor i = 1, #txt do\n\t\tif i\
    \ % 2 == 1 and txt:sub(i, i):match('%l') then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\
    \treturn c\nend", "    -- SOLUTION GOES HERE\n    error('Not implemented')\nend",
  "  local function is_whitespace(c)\n    return c == ' ' or c == '\\t' or c == '\\\
    n' or c == '\\r'\n  end\n  local function is_comma(c)\n    return c == ','\n \
    \ end\n  local t = {}\n  local prev_ws = true\n  local prev_comma = true\n  local\
    \ words = 0\n  local odd_letters = 0\n  for c in txt:gmatch('.') do\n    if is_whitespace(c)\
    \ then\n      prev_ws = true\n      prev_comma = false\n    elseif is_comma(c)\
    \ then\n      prev_ws = false\n      prev_comma = true\n    else\n      if prev_ws\
    \ then\n        words = words + 1\n        t[words] = c\n      elseif prev_comma\
    \ then\n        words = words + 1\n        t[words] = c\n      else\n        t[words]\
    \ = t[words] .. c\n      end\n      prev_ws = false\n      prev_comma = false\n\
    \      local odd = not math.fmod(string.byte(c) - string.byte('a'), 2) == 0\n\
    \      if odd then\n        odd_letters = odd_letters + 1\n      end\n    end\n\
    \  end\n  if words == 0 then\n    return odd_letters\n  else\n    return t\n \
    \ end\nend", "\tlocal t = {}\n\tlocal c = 0\n\tfor w in txt:gmatch(\"[%w]+\")\
    \ do\n\t\tt[#t+1] = w\n\tend\n\tif #t == 0 then\n\t\tfor w in txt:gmatch(\"[%l]+\"\
    ) do\n\t\t\tfor i=1,#w do\n\t\t\t\tif string.byte(w,i)%2 == 1 then\n\t\t\t\t\t\
    c = c + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn c\n\tend\n\treturn t\n\
    end", "    local words = {}\n    local i = 1\n    local j = 1\n    local c = txt:sub(i,\
    \ i)\n    while c do\n        if c == ' ' or c == ',' then\n            if j >\
    \ i then\n                table.insert(words, txt:sub(i, j - 1))\n           \
    \ end\n            i = j + 1\n        end\n        j = j + 1\n        c = txt:sub(j,\
    \ j)\n    end\n    if j > i then\n        table.insert(words, txt:sub(i, j - 1))\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            if (i % 2) == 1 and txt:sub(i, i):match('[a-z]') then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    return words\nend", "  local words = {}\n  if txt:find('\
    \ ') then\n    for w in txt:gmatch('%S+') do\n      table.insert(words, w)\n \
    \   end\n  elseif txt:find(',') then\n    for w in txt:gmatch('[^,]+') do\n  \
    \    table.insert(words, w)\n    end\n  else\n    local sum = 0\n    for c in\
    \ txt:gmatch('%a') do\n      local n = string.byte(c) - string.byte('a')\n   \
    \   if n % 2 == 1 then\n        sum = sum + 1\n      end\n    end\n    return\
    \ sum\n  end\n  return words\nend", end, "    local has_comma = false\n    local\
    \ i = 1\n    local res = {}\n    local word = {}\n    for c in txt:gmatch(\".\"\
    ) do\n        if c:byte() > 127 then\n            return {}\n        end\n   \
    \     if c == ',' then\n            has_comma = true\n            if #word > 0\
    \ then\n                res[i] = table.concat(word)\n                i = i + 1\n\
    \                word = {}\n            end\n        elseif c == ' ' then\n  \
    \          if has_comma then\n                if #word > 0 then\n            \
    \        res[i] = table.concat(word)\n                    i = i + 1\n        \
    \            word = {}\n                end\n            else\n              \
    \  if #word > 0 then\n                    word[#word + 1] = c\n              \
    \  end\n            end\n        else\n            word[#word + 1] = c\n     \
    \   end\n    end\n    if #word > 0 then\n        res[i] = table.concat(word)\n\
    \    end\n    if #res == 0 then\n        local count = 0\n        for i, c in\
    \ ipairs(txt:lower():split(\"\")) do\n            if i % 2 == 1 then\n       \
    \         count = count + (c:byte() - ord('a'))\n            end\n        end\n\
    \        return count\n    end\n    return res\nend", "    txt = tostring(txt)\n\
    \    if txt:find('%s') then\n        return split(txt, '%s')\n    elseif txt:find(',')\
    \ then\n        return split(txt, ',')\n    else\n        local count = 0\n  \
    \      for i = 1, #txt do\n            local c = txt:sub(i, i)\n            local\
    \ n = c:byte() - 97\n            if n % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\nend", "  \
    \  error(\"TODO split_words\")\nend", "  local words = {}\n  local pattern = '%s'\n\
    \  if not txt:find(pattern) then\n    pattern = ','\n    if not txt:find(pattern)\
    \ then\n      local count = 0\n      for i=1,#txt do\n        local letter = txt:sub(i,i)\n\
    \        local char_value = letter:byte() - 97\n        if char_value % 2 == 1\
    \ then\n          count = count + 1\n        end\n      end\n      return count\n\
    \    end\n  end\n  for word in txt:gmatch('[^'..pattern..']+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "\treturn {}\nend", "    local words = {}\n\
    \    if not txt:find('%s') then\n        if not txt:find(',') then\n         \
    \   local odds = 0\n            for i = 1, #txt do\n                local char\
    \ = txt:sub(i, i)\n                if string.byte(char) % 2 == 1 then\n      \
    \              odds = odds + 1\n                end\n            end\n       \
    \     return odds\n        else\n            local s, e = txt:find(',')\n    \
    \        words[1] = txt:sub(1, s - 1)\n            words[2] = txt:sub(e + 1, #txt)\n\
    \            return words\n        end\n    else\n        local s, e = txt:find('%s')\n\
    \        words[1] = txt:sub(1, s - 1)\n        words[2] = txt:sub(e + 1, #txt)\n\
    \        return words\n    end\nend", "  -- TODO: Your code here\nend", "    local\
    \ words = {}\n    local len = #txt\n    local word = ''\n    local num = 0\n \
    \   for i = 1, len do\n        local letter = txt:sub(i, i)\n        if letter\
    \ == ' ' or letter == ',' then\n            if #word > 0 then\n              \
    \  words[#words + 1] = word\n                word = ''\n            end\n    \
    \    else\n            word = word .. letter\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        for i = 1, len do\n            local\
    \ letter = txt:sub(i, i)\n            local order = letter:byte() - 97\n     \
    \       if order % 2 == 1 then\n                num = num + 1\n            end\n\
    \        end\n        return num\n    end\nend", "    if txt:find(' ') then\n\
    \        local t = {}\n        for s in txt:gmatch('[^%s]+') do\n            table.insert(t,\
    \ s)\n        end\n        return t\n    elseif txt:find(',') then\n        local\
    \ t = {}\n        for s in txt:gmatch('[^,]+') do\n            table.insert(t,\
    \ s)\n        end\n        return t\n    else\n        local c = 0\n        for\
    \ w in txt:gmatch('.') do\n            if w:byte() - 0x61 > 26 then\n        \
    \        return 0\n            end\n            if (w:byte() - 0x61) % 2 == 1\
    \ then\n                c = c + 1\n            end\n        end\n        return\
    \ c\n    end\nend", "    local t = {}\n    if txt:find('%s') then\n        for\
    \ token in txt:gmatch('%S+') do\n            table.insert(t, token)\n        end\n\
    \    elseif txt:find(',') then\n        for token in txt:gmatch('[^,]+') do\n\
    \            table.insert(t, token)\n        end\n    else\n        local cnt\
    \ = 0\n        for i = 1, #txt do\n            if i%2 == 1 and txt:byte(i) >=\
    \ 97 and txt:byte(i) <= 122 then\n                cnt = cnt + 1\n            end\n\
    \        end\n        return cnt\n    end\n    return t\nend", "    local result\
    \ = {}\n    for w in txt:gmatch('%S+') do\n        result[#result + 1] = w\n \
    \   end\n    if #result > 0 then\n        return result\n    end\n    local found_comma\
    \ = false\n    for c in txt:gmatch(',') do\n        found_comma = true\n    end\n\
    \    if found_comma then\n        return split_words(txt:gsub(',', ' '))\n   \
    \ end\n    local count = 0\n    for c in txt:gmatch('[a-z]') do\n        local\
    \ o = string.byte(c) - string.byte('a')\n        if o % 2 == 1 then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend", "  -- return\
    \ {txt} -- FIXME\n  return nil\nend", "\t--TODO: Implement this function\nend",
  "    local out = {}\n    local w = txt:match('^[a-zA-Z ]+')\n    if w then\n   \
    \     for w in w:gmatch('%w+') do\n            table.insert(out, w)\n        end\n\
    \    else\n        w = txt:match('^[a-zA-Z,]+')\n        if w then\n         \
    \   for w in w:gmatch('[^,]+') do\n                table.insert(out, w)\n    \
    \        end\n        else\n            w = txt:match('^[a-z]+')\n           \
    \ local c = 0\n            for i = 1, #w do\n                local c = w:sub(i,\
    \ i)\n                if i % 2 == 1 then\n                    c = c:lower()\n\
    \                else\n                    c = c:upper()\n                end\n\
    \                out[c] = w:lower():byte(i) - 96\n            end\n        end\n\
    \    end\n    return out\nend", "    -- todo: implement function\nend", "    if\
    \ not txt then return nil end\n    local words = txt:split('[%s,]+')\n    if #words\
    \ == 1 then\n        words = txt:split('([^a-z])')\n        local num = 0\n  \
    \      for i = 1, #words do\n            local w = words[i]\n            if w\
    \ and w:match('[a-z]') then\n                num = num + 1\n            end\n\
    \        end\n        return num\n    end\n    return words\nend", "    if string.find(txt,\
    \ ' ') then\n        return split(txt, ' ')\n    elseif string.find(txt, ',')\
    \ then\n        return split(txt, ',')\n    else\n        local num_odd = 0\n\
    \        for i=1,#txt do\n            local c = string.byte(txt, i)\n        \
    \    if c >= string.byte('a') and c <= string.byte('z') then\n               \
    \ local pos = c - string.byte('a')\n                if pos % 2 == 1 then\n   \
    \                 num_odd = num_odd + 1\n                end\n            end\n\
    \        end\n        return num_odd\n    end\nend", "    local words = {}\n \
    \   local comma = false\n    local splitter = ' '\n    if not txt:find(' ') then\n\
    \        comma = true\n        splitter = ','\n    end\n    for word in txt:gmatch('([^'\
    \ .. splitter .. ']+)') do\n        words[#words + 1] = word\n    end\n    if\
    \ comma and not txt:find(',') then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local num = string.byte(txt, i) - string.byte('a')\n  \
    \          if num % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend", " \
    \   local words = {}\n    for w in string.gmatch(txt, '%S+') do\n        words[#words\
    \ + 1] = w\n    end\n    if #words > 0 then\n        return words\n    end\n \
    \   local count = 0\n    for c in string.gmatch(txt, '.') do\n        if string.byte(c)\
    \ - 97 < 0 or string.byte(c) - 97 > 25 then\n            return nil\n        end\n\
    \        if (string.byte(c) - 97) % 2 == 1 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local res = {}\n    local\
    \ num = 0\n    if string.find(txt, ' ') then\n        for _, word in ipairs(string.split(txt,\
    \ ' ')) do\n            table.insert(res, word)\n        end\n    elseif string.find(txt,\
    \ ',') then\n        for _, word in ipairs(string.split(txt, ',')) do\n      \
    \      table.insert(res, word)\n        end\n    else\n        for _, letter in\
    \ ipairs(string.split(txt, '')) do\n            if string.byte(letter) % 2 ==\
    \ 1 then\n                num = num + 1\n            end\n        end\n    end\n\
    \    return num == 0 and res or num\nend", "    if txt == nil then return nil\
    \ end\n    local words = {}\n    local delimiter = nil\n    if txt:find(' ') then\n\
    \        delimiter = ' '\n    elseif txt:find(',') then\n        delimiter = ','\n\
    \    else\n        local ans = 0\n        for i = 1, #txt do\n            if txt:sub(i,\
    \ i):find('[a-z]') and i % 2 == 1 then\n                ans = ans + 1\n      \
    \      end\n        end\n        return ans\n    end\n    for word in txt:gmatch('[^'\
    \ .. delimiter .. ']+') do\n        table.insert(words, word)\n    end\n    return\
    \ words\nend", "  local words = {}\n  local count = 0\n  for word in txt:gmatch('%w+')\
    \ do\n    table.insert(words, word)\n  end\n  if #words == 0 then\n    count =\
    \ txt:lower():gsub('[^a-z]', ''):gsub('([a-z])', function(c) return count + (c:byte()\
    \ % 2) end)\n  end\n  return #words > 0 and words or count\nend", "    if txt:find(\"\
    %S\") ~= nil then\n        if txt:find(\",\") ~= nil then\n            return\
    \ {txt:match(\"(.-)%s*,%s*(.-)$\")}\n        else\n            return txt:split(\"\
    %s+\")\n        end\n    else\n        local count = 0\n        for i = 1, #txt\
    \ do\n            if txt:sub(i, i):lower():byte() % 2 == 1 then\n            \
    \    count = count + 1\n            end\n        end\n        return count\n \
    \   end\nend", "    --your code here\n    return {}\nend", "    local chars =\
    \ {}\n    local result = {}\n    for i = 1, txt:len() do\n        table.insert(chars,\
    \ txt:sub(i, i))\n    end\n    for i = 1, txt:len() do\n        if chars[i] ==\
    \ ' ' then\n            table.insert(result, table.concat(chars, '', 1, i - 1))\n\
    \            table.remove(chars, 1, i)\n            i = 0\n        elseif chars[i]\
    \ == ',' then\n            table.insert(result, table.concat(chars, '', 1, i -\
    \ 1))\n            table.remove(chars, 1, i)\n            i = 0\n        end\n\
    \    end\n    table.insert(result, table.concat(chars, ''))\n    return result\n\
    end", "  if string.find(txt, \"%s\") then\n    return string.split(txt, \"%s\"\
    )\n  elseif string.find(txt, \",\") then\n    return string.split(txt, \",\")\n\
    \  else\n    return #txt\n  end\nend", "\tlocal res\n\tif txt:find(' ') then\n\
    \t\tres = txt:split(' ')\n\telseif txt:find(',') then\n\t\tres = txt:split(',')\n\
    \telse\n\t\tlocal cnt = 0\n\t\tfor i = 1, #txt do\n\t\t\tlocal v = txt:sub(i,\
    \ i)\n\t\t\tlocal c = v:byte()\n\t\t\tif c >= 97 and c <= 122 and i % 2 == 1 then\n\
    \t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\tend\n\t\tres = cnt\n\tend\n\treturn res\n\
    end", end, "\t-- TODO: implement this function\nend", "\tlocal split = {}\n\t\
    local delimiter = \" \"\n\tlocal pattern = \"[^\"..delimiter..\"]+\"\n\tfor word\
    \ in txt:gmatch(pattern) do\n\t\ttable.insert(split, word)\n\tend\n\t\n\tif #split\
    \ == 0 then\n\t\tdelimiter = \",\"\n\t\tpattern = \"[^\"..delimiter..\"]+\"\n\t\
    \tfor word in txt:gmatch(pattern) do\n\t\t\ttable.insert(split, word)\n\t\tend\n\
    \tend\n\t\n\tif #split == 0 then\n\t\tlocal count = 0\n\t\tfor _, c in ipairs(txt:lower():split(\"\
    \")) do\n\t\t\tif string.byte(c) % 2 == 1 then\n\t\t\t\tcount = count + 1\n\t\t\
    \tend\n\t\tend\n\t\treturn count\n\tend\n\t\n\treturn split\nend", end, "    --\
    \ TODO: Implement me\nend", "  local words = txt:match('^%s*(%S+)')\n  if not\
    \ words then\n    return nil\n  end\n  words = {}\n  for w in txt:gmatch('[^%s,]+')\
    \ do\n    table.insert(words, w)\n  end\n  if #words > 0 then\n    return words\n\
    \  end\n  local num_odd = 0\n  for ch in txt:gmatch('.') do\n    if ch:byte()\
    \ % 2 == 1 then\n      num_odd = num_odd + 1\n    end\n  end\n  return num_odd\n\
    end", end, "    return split(txt, '%s+', ',+')\nend", end, "    -- FIXME\n   \
    \ local words = {}\n    local count = 0\n    local prev = 0\n    local length\
    \ = string.len(txt)\n    for i = 1, length do\n        local s = string.sub(txt,\
    \ i, i)\n        if (s == ' ' or s == ',') then\n            if (i - prev > 1)\
    \ then\n                table.insert(words, string.sub(txt, prev, i - 1))\n  \
    \          end\n            prev = i + 1\n        end\n    end\n    if (length\
    \ - prev > 0) then\n        table.insert(words, string.sub(txt, prev, length))\n\
    \    end\n    if (#words == 0) then\n        for i = 1, length do\n          \
    \  local c = string.byte(txt, i)\n            if (c >= 97 and c <= 122) then\n\
    \                if (i % 2 == 1) then\n                    count = count + 1\n\
    \                end\n            end\n        end\n        return count\n   \
    \ end\n    return words\nend", "\t\n\treturn nil\nend", "    local words = {}\n\
    \    for word in txt:gmatch('%S+') do\n        table.insert(words, word)\n   \
    \ end\n    if #words == 0 then\n        local odds = 0\n        for char in txt:gmatch('.')\
    \ do\n            if char:byte() % 2 == 1 then\n                odds = odds +\
    \ 1\n            end\n        end\n        return odds\n    end\n    return words\n\
    end", "\treturn {txt}\nend", "    if txt:find('%s') then\n        local w = {}\n\
    \        for w in txt:gmatch('[^%s]+') do\n            table.insert(w, w)\n  \
    \      end\n        return w\n    elseif txt:find(',') then\n        local w =\
    \ {}\n        for w in txt:gmatch('[^,]+') do\n            table.insert(w, w)\n\
    \        end\n        return w\n    else\n        local cnt = 0\n        for c\
    \ in txt:gmatch('[a-z]') do\n            if (string.byte(c) - string.byte('a'))\
    \ % 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n\
    \        return cnt\n    end\nend", "    -- Iterate over each character in the\
    \ string, if we see a whitespace or comma, we can split the string at that\n \
    \   -- character, otherwise we'll just keep counting the lower-case letters with\
    \ odd order in the alphabet\n    local words = {}\n    local count = 0\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c ==\
    \ ',' then\n            table.insert(words, txt:sub(1, i - 1))\n            txt\
    \ = txt:sub(i + 1)\n            i = 0\n        elseif c:match('%l') then\n   \
    \         count = count + (ord(c) % 2)\n        end\n    end\n    -- If we get\
    \ here and we haven't seen any whitespace or commas, we'll just return the count\n\
    \    if #words == 0 then\n        return count\n    else\n        -- Otherwise\
    \ we'll return the split string\n        table.insert(words, txt)\n        return\
    \ words\n    end\nend", "\tlocal result = {}\n\tfor s in txt:gmatch('%w+') do\n\
    \t\ttable.insert(result, s)\n\tend\n\tif #result == 0 then\n\t\tresult = {}\n\t\
    \tfor s in txt:gmatch('[a-z]+') do\n\t\t\ttable.insert(result, s)\n\t\tend\n\t\
    \tif #result == 0 then\n\t\t\tlocal number = 0\n\t\t\tfor c in txt:gmatch('.')\
    \ do\n\t\t\t\tlocal idx = c:byte() - string.byte('a')\n\t\t\t\tif idx >= 0 and\
    \ idx < 26 then\n\t\t\t\t\tnumber = number + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\t\
    return number\n\t\tend\n\tend\n\treturn result\nend", "    if #txt == 0 then\n\
    \        return {}\n    end\n    local whitespace = txt:find('%s')\n    local\
    \ comma = txt:find(',')\n    if whitespace then\n        return split_words(txt:sub(1,\
    \ whitespace - 1))\n        + split_words(txt:sub(whitespace + 1))\n    elseif\
    \ comma then\n        return split_words(txt:sub(1, comma - 1))\n        + split_words(txt:sub(comma\
    \ + 1))\n    else\n        local t = 0\n        for i = 1, #txt do\n         \
    \   local c = txt:sub(i, i)\n            local o = c:byte() - 97\n           \
    \ if o % 2 == 1 then\n                t = t + 1\n            end\n        end\n\
    \        return t\n    end\nend\nassert(split_words('Hello world!') == {'Hello',\
    \ 'world!'})\nassert(split_words('Hello,world!') == {'Hello', 'world!'})\nassert(split_words('abcdef')\
    \ == 3)", "    local t = {}\n    local i = 1\n    local e = 1\n    local l = string.len(txt)\n\
    \    while i <= l do\n        if txt:sub(i, i) == ' ' then\n            if i -\
    \ e > 0 then\n                table.insert(t, txt:sub(e, i - 1))\n           \
    \ end\n            e = i + 1\n        elseif txt:sub(i, i) == ',' then\n     \
    \       if i - e > 0 then\n                table.insert(t, txt:sub(e, i - 1))\n\
    \            end\n            e = i + 1\n        end\n        i = i + 1\n    end\n\
    \    if e <= l then\n        table.insert(t, txt:sub(e, l))\n    end\n    if #t\
    \ == 0 then\n        local total = 0\n        for i = 1, l do\n            local\
    \ c = txt:sub(i, i)\n            if c >= 'a' and c <= 'z' then\n             \
    \   if i % 2 == 1 then\n                    total = total + string.byte(c) - 96\n\
    \                end\n            end\n        end\n        return total\n   \
    \ end\n    return t\nend", "  local function split_words_helper(txt, n)\n    if\
    \ string.find(txt, \" \") then\n      local space = string.find(txt, \" \")\n\
    \      return string.sub(txt, 1, space - 1), split_words_helper(string.sub(txt,\
    \ space + 1), n)\n    elseif string.find(txt, \",\") then\n      local comma =\
    \ string.find(txt, \",\")\n      return string.sub(txt, 1, comma - 1), split_words_helper(string.sub(txt,\
    \ comma + 1), n)\n    else\n      local len = string.len(txt)\n      if len ==\
    \ 1 then\n        local char = string.sub(txt, 1, 1)\n        if string.find(alphabet,\
    \ char) == n then\n          return char\n        else\n          return \"\"\n\
    \        end\n      else\n        local char = string.sub(txt, 1, 1)\n       \
    \ if string.find(alphabet, char) == n then\n          return char, split_words_helper(string.sub(txt,\
    \ 2), n + 2)\n        else\n          return split_words_helper(string.sub(txt,\
    \ 2), n + 2)\n        end\n      end\n    end\n  end\n  return split_words_helper(txt,\
    \ 1)\nend", "\tlocal words = {}\n\tlocal sep = txt:find(' ') or txt:find(',')\n\
    \tif sep then\n\t\tfor word in txt:gmatch('[^, ]+') do\n\t\t\ttable.insert(words,\
    \ word)\n\t\tend\n\telse\n\t\tlocal num = 0\n\t\tfor i = 1, #txt do\n\t\t\tif\
    \ txt:byte(i) % 2 == 1 then\n\t\t\t\tnum = num + 1\n\t\t\tend\n\t\tend\n\t\treturn\
    \ num\n\tend\n\treturn words\nend", "    local ret = {}\n    local found = false\n\
    \    for w in string.gmatch(txt, \"%S+\") do\n        table.insert(ret, w)\n \
    \       found = true\n    end\n    if not found then\n        for w in string.gmatch(txt,\
    \ \"%s+\") do\n            table.insert(ret, w)\n            found = true\n  \
    \      end\n    end\n    if not found then\n        local n = 0\n        for i\
    \ = 1,#txt do\n            local c = string.byte(txt, i)\n            if c >=\
    \ string.byte('a') and c <= string.byte('z') and i % 2 == 1 then\n           \
    \     n = n + 1\n            end\n        end\n        return n\n    end\n   \
    \ return ret\nend", "    local words = {}\n    for m in string.gmatch(txt, '[^%s]+')\
    \ do\n        table.insert(words, m)\n    end\n    if #words == 0 then\n     \
    \   for m in string.gmatch(txt, '[^,]+') do\n            table.insert(words, m)\n\
    \        end\n    end\n    if #words == 0 then\n        local cnt = 0\n      \
    \  for i = 1, #txt do\n            local ch = string.byte(txt, i)\n          \
    \  local idx = ch - string.byte('a')\n            if idx % 2 == 1 then\n     \
    \           cnt = cnt + 1\n            end\n        end\n        return cnt\n\
    \    end\n    return words\nend", "  -- YOUR CODE HERE\nend", "  if type(txt)\
    \ ~= 'string' then\n    error('bad argument #1 to split_words (string expected,\
    \ got ' .. type(txt) .. ')', 2)\n  end\n  local result = {}\n  local count = 0\n\
    \  local prev_char = ''\n  for char in txt:gmatch('.') do\n    local ord = (char:byte()\
    \ or 0) - 97\n    if prev_char == '' then\n      if ord >= 0 and ord <= 25 then\n\
    \        count = count + 1\n      end\n    elseif ord >= 0 and ord <= 25 then\n\
    \      if prev_char:byte() ~= char:byte() - 1 then\n        count = count + 1\n\
    \      end\n    elseif prev_char:byte() == 32 then\n      table.insert(result,\
    \ txt:sub(1, prev_char:len()))\n      txt = txt:sub(prev_char:len() + 1)\n   \
    \ elseif prev_char:byte() == 44 then\n      table.insert(result, txt:sub(1, prev_char:len()))\n\
    \      txt = txt:sub(prev_char:len() + 1)\n    end\n    prev_char = char\n  end\n\
    \  if count % 2 == 1 then\n    return count\n  elseif #result > 0 then\n    return\
    \ result\n  else\n    return {txt}\n  end\nend", "  return { txt }\nend", "  local\
    \ res = {}\n  local words = txt:split('[%s,]+')\n  if #words > 1 then\n    for\
    \ _, word in ipairs(words) do\n      table.insert(res, word)\n    end\n  else\n\
    \    for i = 1, #txt do\n      if (txt:byte(i) - ord('a')) % 2 == 1 then\n   \
    \     table.insert(res, txt:byte(i) - ord('a'))\n      end\n    end\n  end\n \
    \ return res\nend", "\tlocal words = {}\n\tif not txt:find('%s') then\n\t\tif\
    \ not txt:find(',') then\n\t\t\treturn (#txt + 1) % 2\n\t\telse\n\t\t\tfor w in\
    \ txt:gmatch('[^,]+') do\n\t\t\t\ttable.insert(words, w)\n\t\t\tend\n\t\tend\n\
    \telse\n\t\tfor w in txt:gmatch('[^%s]+') do\n\t\t\ttable.insert(words, w)\n\t\
    \tend\n\tend\n\treturn words\nend", "    local ret = {}\n    for word in txt:gmatch('%S+')\
    \ do\n        table.insert(ret, word)\n    end\n    if #ret == 0 then\n      \
    \  for word in txt:gmatch('%w+') do\n            table.insert(ret, word)\n   \
    \     end\n        if #ret == 0 then\n            local count = 0\n          \
    \  for char in txt:gmatch('.') do\n                if string.byte(char) - 96 &\
    \ 1 == 1 then\n                    count = count + 1\n                end\n  \
    \          end\n            return count\n        end\n    end\n    return ret\n\
    end", "    return {txt:gmatch('%w+')}\nend", "\t-- Check for whitespace first\n\
    \tlocal whitespace_split = string.split(txt, ' ')\n\tif whitespace_split[2] then\n\
    \t\treturn whitespace_split\n\tend", "    local whitespace = txt:find('%s')\n\
    \    local comma = txt:find(',')\n    if whitespace then\n        local t = {}\n\
    \        for w in txt:gmatch('%S+') do\n            table.insert(t, w)\n     \
    \   end\n        return t\n    elseif comma then\n        local t = {}\n     \
    \   for w in txt:gmatch('[^,]+') do\n            table.insert(t, w)\n        end\n\
    \        return t\n    else\n        local cnt = 0\n        for ch in txt:gmatch('[a-z]')\
    \ do\n            if (string.byte(ch) - string.byte('a')) % 2 == 1 then\n    \
    \            cnt = cnt + 1\n            end\n        end\n        return cnt\n\
    \    end\nend", "  local t = {}\n  local c = 0\n  local m = false\n  for c in\
    \ txt:gmatch\".\" do\n    if c == ' ' or c == ',' then\n      m = true\n    else\n\
    \      t[#t+1] = c\n    end\n  end\n  if m then\n    return t\n  else\n    for\
    \ i, c in ipairs(t) do\n      if i % 2 == 1 then\n        if c:byte() >= 97 and\
    \ c:byte() <= 122 then\n          c = c:byte() - 97\n          if c % 2 == 1 then\n\
    \            c = c + 1\n          end\n          c = c + 1\n        end\n    \
    \  end\n    end\n    return c\n  end\nend", "  if txt:find(\"%s\") then\n    return\
    \ txt:split(\"%s\")\n  elseif txt:find(\",\") then\n    return txt:split(\",\"\
    )\n  else\n    local i, c = 0, 0\n    for k in string.gmatch(txt, '.') do\n  \
    \    if string.byte(k) % 2 == 1 then\n        c = c + 1\n      end\n      i =\
    \ i + 1\n    end\n    return c\n  end\nend", "    -- TODO\nend", end, "    local\
    \ t = {}\n    for w in string.gmatch(txt, \"[^,%s]+\") do\n        t[#t+1] = w\n\
    \    end\n    if #t == 0 then\n        for w in string.gmatch(txt, \"[^%s]+\"\
    ) do\n            t[#t+1] = w\n        end\n    end\n    if #t == 0 then\n   \
    \     local n = 0\n        for c in string.gmatch(txt, \"[a-z]\") do\n       \
    \     local o = string.byte(c) - string.byte('a')\n            if (o % 2) == 1\
    \ then\n                n = n + 1\n            end\n        end\n        return\
    \ n\n    end\n    return t\nend", "  return table.concat(split(txt, ',;%s'), ',')\n\
    end", "    local t = {}\n    local idx = 1\n    local word\n    -- take the word\
    \ up to the next space, if the length of the word is odd, then increment idx\n\
    \    for word in txt:gmatch('%S+') do\n        if #word % 2 == 1 then\n      \
    \      idx = idx + 1\n        end\n        t[#t + 1] = word\n    end\n    if #t\
    \ == 0 then\n        -- no whitespace, check for commas\n        local txt = txt:gsub(',',\
    \ ' ')\n        for word in txt:gmatch('%S+') do\n            if #word % 2 ==\
    \ 1 then\n                idx = idx + 1\n            end\n            t[#t + 1]\
    \ = word\n        end\n    end\n    if #t == 0 then\n        -- no commas or whitespace,\
    \ get the number of lower-case letters with odd order in the alphabet\n      \
    \  for c in txt:gmatch('%l') do\n            if c:byte() % 2 == 1 then\n     \
    \           idx = idx + 1\n            end\n        end\n    end\n    if #t ==\
    \ 0 then\n        return idx\n    else\n        return t\n    end\nend\nassert(split_words('abcdef')\
    \ == 3)\nassert(table_equal(split_words('Hello world!'), {'Hello', 'world!'}))\n\
    assert(table_equal(split_words('Hello,world!'), {'Hello', 'world!'}))", "    local\
    \ space_re = re.compile(',')\n    local words = space_re:match(txt)\n    if words\
    \ then\n        return words\n    end\n    local comma_re = re.compile('\\\\s+')\n\
    \    words = comma_re:match(txt)\n    if words then\n        return words\n  \
    \  end\n    local letters = {}\n    for c in txt:gmatch('.') do\n        if c:isalpha()\
    \ then\n            table.insert(letters, c)\n        end\n    end\n    local\
    \ count = 0\n    for i, letter in ipairs(letters) do\n        if i % 2 == 1 and\
    \ letter:lower() == letter then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "\t-- split on whitespace\n\tlocal tbl = {}\n\
    \tfor word in txt:gmatch('%S+') do\n\t\ttbl[#tbl+1] = word\n\tend\n\tif #tbl ==\
    \ 0 then\n\t\t-- no whitespace\n\t\t-- split on commas\n\t\ttbl = {}\n\t\tfor\
    \ word in txt:gmatch('[^,]+') do\n\t\t\ttbl[#tbl+1] = word\n\t\tend\n\t\tif #tbl\
    \ == 0 then\n\t\t\t-- no commas\n\t\t\t-- return odd lower-case letters in alphabetical\
    \ order\n\t\t\tlocal s = txt:lower()\n\t\t\tlocal cnt = 0\n\t\t\tfor i = 1, #s\
    \ do\n\t\t\t\tlocal char = s:sub(i,i)\n\t\t\t\tlocal ord = string.byte(char) -\
    \ string.byte('a')\n\t\t\t\tif ord >= 0 and ord <= 25 and ord % 2 == 0 then\n\t\
    \t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn cnt\n\t\tend\n\tend\n\
    \treturn tbl\nend", "    if not txt then\n        return nil\n    end\n    local\
    \ whitespace = txt:find('%s')\n    local commas = txt:find(',')\n    if whitespace\
    \ then\n        return txt:split_words()\n    elseif commas then\n        return\
    \ txt:split(',')\n    else\n        local odd_count = 0\n        for ch in txt:gmatch('.')\
    \ do\n            local n = ch:lower():byte() - 97\n            if (n % 2) ==\
    \ 1 then\n                odd_count = odd_count + 1\n            end\n       \
    \ end\n        return odd_count\n    end\nend", "    local words = {}\n    if\
    \ (string.find(txt, ' ')) then\n        for w in string.gmatch(txt, '%S+') do\n\
    \            table.insert(words, w)\n        end\n    elseif (string.find(txt,\
    \ ',')) then\n        for w in string.gmatch(txt, '[^,]+') do\n            table.insert(words,\
    \ w)\n        end\n    else\n        local odd_count = 0\n        for i=1,string.len(txt)\
    \ do\n            if (i % 2 == 1) then\n                odd_count = odd_count\
    \ + 1\n            end\n        end\n        return odd_count\n    end\n    return\
    \ words\nend", "  local s = string.find(txt, \" \")\n  local c = string.find(txt,\
    \ \",\")\n  if s then\n    local t = {}\n    for k in string.gmatch(txt, \"%S+\"\
    ) do\n      table.insert(t, k)\n    end\n    return t\n  elseif c then\n    local\
    \ t = {}\n    for k in string.gmatch(txt, \"%S+\") do\n      table.insert(t, k)\n\
    \    end\n    return t\n  else\n    local odd = 0\n    for k in string.gmatch(txt,\
    \ \"%a\") do\n      if string.byte(k) % 2 == 1 then\n        odd = odd + 1\n \
    \     end\n    end\n    return odd\n  end\nend", "    return {}\nend", "\tif txt:find(\"\
    \ \") then\n\t\treturn parse_message(txt)\n\telseif txt:find(\",\") then\n\t\t\
    return txt:gmatch(\"([^,]+)\")\n\telseif #txt <= 25 then\n\t\tlocal letters =\
    \ {}\n\t\tlocal count = 0\n\t\tfor i=1,#txt do\n\t\t\tif txt:byte(i) < 123 and\
    \ txt:byte(i) > 96 then\n\t\t\t\tif letters[txt:byte(i)] == nil then\n\t\t\t\t\
    \tletters[txt:byte(i)] = 0\n\t\t\t\tend\n\t\t\t\tletters[txt:byte(i)] = letters[txt:byte(i)]\
    \ + 1\n\t\t\tend\n\t\tend\n\t\tfor i=1,#letters do\n\t\t\tif letters[i] ~= nil\
    \ and letters[i] % 2 == 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\
    \t\treturn count\n\tend\nend", "\tif txt:find('%s') then\n\t\treturn txt:split('%s')\n\
    \telseif txt:find(',') then\n\t\treturn txt:split(',')\n\telse\n\t\tlocal count\
    \ = 0\n\t\tfor i = 1, #txt do\n\t\t\tlocal ch = txt:sub(i, i)\n\t\t\tlocal n =\
    \ ch:byte() - string.byte('a')\n\t\t\tif n % 2 == 1 then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\nend", end, "    local ret\
    \ = {}\n    local len = string.len(txt)\n    local cnt = 0\n    local last = nil\n\
    \    for i = 1, len do\n        local ch = string.sub(txt, i, i)\n        if ch\
    \ == ' ' or ch == ',' then\n            if last then\n                ret[#ret\
    \ + 1] = last\n                last = nil\n            end\n        else\n   \
    \         local val = ord(ch)\n            if val % 2 == 1 then\n            \
    \    cnt = cnt + 1\n            end\n            if not last then\n          \
    \      last = ch\n            else\n                last = last .. ch\n      \
    \      end\n        end\n    end\n    if last then\n        ret[#ret + 1] = last\n\
    \    end\n    if #ret > 0 then\n        return ret\n    else\n        return cnt\n\
    \    end\nend", "  local function odd(x)\n    return x % 2 == 1\n  end\n  local\
    \ function f(x)\n    return string.char(x + string.byte('a'))\n  end\n  local\
    \ function idx(x)\n    return string.byte(x) - string.byte('a')\n  end\n  -- print(string.len(txt))\n\
    \  local words = {}\n  local word_count = 0\n  for word in string.gmatch(txt,\
    \ '%w+') do\n    table.insert(words, word)\n    word_count = word_count + 1\n\
    \  end\n  if word_count == 0 then\n    local odd_letters = 0\n    for c in string.gmatch(txt,\
    \ '%a') do\n      if odd(idx(c)) then\n        odd_letters = odd_letters + 1\n\
    \      end\n    end\n    return odd_letters\n  end\n  return words\nend", "  \
    \  local words = {}\n    local index = 1\n    while index < txt:len() do\n   \
    \     local word = ''\n        while index < txt:len() and not txt:sub(index,\
    \ index):match('%s') and not txt:sub(index, index):match(',') do\n           \
    \ word = word .. txt:sub(index, index)\n            index = index + 1\n      \
    \  end\n        words[#words + 1] = word\n        index = index + 1\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        return 0\n  \
    \  end\nend", "  local words = {}\n  for word in txt:gmatch('%S+') do\n    words[#words\
    \ + 1] = word\n  end\n  if #words == 0 then\n    for word in txt:gmatch('%w+')\
    \ do\n      words[#words + 1] = word\n    end\n  end\n  if #words == 0 then\n\
    \    local sum = 0\n    for char in txt:gmatch('%a') do\n      sum = sum + string.byte(char,\
    \ 1) - string.byte('a', 1)\n    end\n    return sum % 2 == 1 and sum or -sum\n\
    \  end\n  return words\nend", "    local ret = {}\n    if string.find(txt, ' ')\
    \ then\n        return txt:split(' ')\n    elseif string.find(txt, ',') then\n\
    \        return txt:split(',')\n    else\n        local len = string.len(txt)\n\
    \        for i = 1, len do\n            local ch = string.sub(txt, i, i)\n   \
    \         if string.byte(ch) >= 97 and string.byte(ch) <= 122 then\n         \
    \       local ch_code = string.byte(ch) - 97\n                if ch_code % 2 ==\
    \ 1 then\n                    ret[#ret + 1] = ch\n                end\n      \
    \      end\n        end\n        return #ret\n    end\nend", "  local letters\
    \ = {}\n  for i = 1, #txt do\n    local ch = txt:sub(i, i)\n    if (ch >= 'a'\
    \ and ch <= 'z') then\n      letters[#letters + 1] = ch\n    end\n  end\n  if\
    \ (#letters == 0) then\n    return txt:match('%d+')\n  end\n  local count = 0\n\
    \  for i = 1, #letters do\n    if ((i % 2) == 1) then\n      local ch = letters[i]\n\
    \      local ord = string.byte(ch) - string.byte('a')\n      if ((ord % 2) ==\
    \ 1) then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "\tif txt:find('%s') then\n\t\treturn txt:match('%s*(.-)%s*$')\n\telseif\
    \ txt:find(',') then\n\t\treturn txt:match('%s*(.-)%s*$')\n\telse\n\t\t-- This\
    \ gets the number of letters with odd ords, which should be the same as the number\
    \ of letters with even ords\n\t\tlocal count = 0\n\t\tfor i = 1, #txt do\n\t\t\
    \tif txt:sub(i, i):lower():byte() % 2 == 1 then\n\t\t\t\tcount = count + 1\n\t\
    \t\tend\n\t\tend\n\t\treturn count\n\tend\nend", "\tlocal txt = tostring(txt)\n\
    \tlocal i = 1\n\tlocal ws = {}\n\twhile true do\n\t\tlocal j = txt:find(' ', i)\n\
    \t\tif not j then break end\n\t\tws[#ws+1] = txt:sub(i, j-1)\n\t\ti = j+1\n\t\
    end\n\tif #ws == 0 then\n\t\ti = 1\n\t\twhile true do\n\t\t\tlocal j = txt:find(',',\
    \ i)\n\t\t\tif not j then break end\n\t\t\tws[#ws+1] = txt:sub(i, j-1)\n\t\t\t\
    i = j+1\n\t\tend\n\t\tif #ws == 0 then\n\t\t\tlocal n = 0\n\t\t\tfor i = 1, #txt\
    \ do\n\t\t\t\tif (string.byte(txt, i) - string.byte('a')) % 2 == 1 then\n\t\t\t\
    \t\tn = n + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn n\n\t\tend\n\tend\n\treturn\
    \ ws\nend", "    -- TODO: complete this function.\n    local words = string.match(txt,\
    \ '%a+%s*%a+')\n    if words then\n        return string.split(words, '%s+')\n\
    \    end\n    local words = string.match(txt, '%a+,%a+')\n    if words then\n\
    \        return string.split(words, ',')\n    end\n    local letters = string.match(txt,\
    \ '%a+')\n    if letters then\n        local sum = 0\n        for i = 1, string.len(letters)\
    \ do\n            local ascii = string.byte(letters, i)\n            if ascii\
    \ % 2 == 1 then\n                sum = sum + 1\n            end\n        end\n\
    \        return sum\n    end\nend", "    local words = {}\n    for i in txt:gmatch('%S+')\
    \ do\n        words[#words + 1] = i\n    end\n    return words\nend", "\tlocal\
    \ ret = {}\n\tfor w in txt:gmatch(\"%S+\") do\n\t\tret[#ret+1] = w\n\tend\n\t\
    if #ret > 0 then\n\t\treturn ret\n\tend\n\tlocal count = 0\n\tfor i=1,#txt do\n\
    \t\tlocal c = txt:sub(i,i)\n\t\tif string.find(c, '%a') then\n\t\t\tif i % 2 ==\
    \ 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "    local t = {}\n    local c = 0\n    for i = 1, #txt do\n        local\
    \ b = txt:byte(i)\n        if b == 32 then\n            c = c + 1\n          \
    \  t[c] = ''\n        elseif b == 44 then\n            c = c + 1\n           \
    \ t[c] = ''\n        else\n            t[c] = t[c] .. string.char(b)\n       \
    \ end\n    end\n    local r\n    if t[1] then\n        if tonumber(t[1]) then\n\
    \            r = tonumber(t[1])\n        else\n            r = {}\n          \
    \  for i = 1, #t do\n                r[i] = t[i]\n            end\n        end\n\
    \    else\n        local n = 0\n        for i = 1, #txt do\n            local\
    \ b = txt:byte(i)\n            if b >= 97 and b <= 122 then\n                n\
    \ = n + (b - 96)\n            end\n        end\n        r = n % 2\n    end\n \
    \   return r\nend", "\tif string.find(txt, \"%s\") then\n\t\treturn string.split(txt,\
    \ \" \")\n\telseif string.find(txt, \",\") then\n\t\treturn string.split(txt,\
    \ \",\")\n\telse\n\t\tlocal num = 0\n\t\tfor i = 1, string.len(txt) do\n\t\t\t\
    if string.byte(txt, i) % 2 == 1 then\n\t\t\t\tnum = num + 1\n\t\t\tend\n\t\tend\n\
    \t\treturn num\n\tend\nend", "    local splitter = txt:find('%s')\n    if splitter\
    \ then\n        return txt:split('%s')\n    end\n    splitter = txt:find(',')\n\
    \    if splitter then\n        return txt:split(',')\n    end\n    local odd_count\
    \ = 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        if string.byte(c)\
    \ - string.byte('a') % 2 == 1 then\n            odd_count = odd_count + 1\n  \
    \      end\n    end\n    return odd_count\nend", "    -- your code goes here\n\
    \    return nil\nend", "    if txt:find(\" \") then\n        return txt:split(\"\
    \ \")\n    elseif txt:find(\",\") then\n        return txt:split(\",\")\n    else\n\
    \        local count = 0\n        for letter in txt:gmatch(\"%a\") do\n      \
    \      if (letter:byte() % 2) == 1 then\n                count = count + 1\n \
    \           end\n        end\n        return count\n    end\nend", "    local\
    \ split = {}\n    local n = 0\n    local function insert(text)\n        split[#split\
    \ + 1] = text\n    end\n    if txt:find(' ') then\n        for word in txt:gmatch('%S+')\
    \ do\n            insert(word)\n        end\n    elseif txt:find(',') then\n \
    \       for word in txt:gmatch('[^,]+') do\n            insert(word)\n       \
    \ end\n    else\n        for _, c in ipairs(txt:lower():to_table()) do\n     \
    \       if c:byte() % 2 == 1 then\n                n = n + 1\n            end\n\
    \        end\n        return n\n    end\n    return split\nend", "    local parts\
    \ = {}\n    local sep = txt:find(' ') or txt:find(',')\n    if sep then\n    \
    \    local i = 1\n        while i <= #txt do\n            local j = txt:find(sep,\
    \ i)\n            table.insert(parts, txt:sub(i, j - 1))\n            i = j +\
    \ 1\n        end\n    else\n        local count = 0\n        for i = 1, #txt do\n\
    \            local ord = txt:byte(i) - string.byte('a')\n            if ord %\
    \ 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        parts = count\n    end\n    return parts\nend", "  if txt:find('%s')\
    \ then\n    local words = {}\n    for word in txt:gmatch('%S+') do table.insert(words,\
    \ word) end\n    return words\n  elseif txt:find(',') then\n    local words =\
    \ {}\n    for word in txt:gmatch('[^,]+') do table.insert(words, word) end\n \
    \   return words\n  else\n    local cnt = 0\n    for i = 1, txt:len() do\n   \
    \   local c = txt:sub(i, i)\n      if c:byte() >= 97 and c:byte() <= 122 and i\
    \ % 2 == 1 then\n        cnt = cnt + 1\n      end\n    end\n    return cnt\n \
    \ end\nend", "    -- Your code here\nend", "    local function is_valid_char(c)\n\
    \        return c:match('%w') or c:match('%s') or c:match(',')\n    end\n    if\
    \ not is_valid_char(txt) then\n        return 0\n    end\n    local words = {}\n\
    \    local current_word = ''\n    for i = 1, #txt do\n        local c = txt:sub(i,\
    \ i)\n        if c:match('%s') or c:match(',') then\n            if current_word\
    \ ~= '' then\n                table.insert(words, current_word)\n            \
    \    current_word = ''\n            end\n        else\n            current_word\
    \ = current_word .. c\n        end\n    end\n    if current_word ~= '' then\n\
    \        table.insert(words, current_word)\n    end\n    if #words > 0 then\n\
    \        return words\n    end\n    local sum = 0\n    for i = 1, #txt do\n  \
    \      local c = txt:sub(i, i)\n        if string.byte(c) - string.byte('a') %\
    \ 2 == 1 then\n            sum = sum + 1\n        end\n    end\n    return sum\n\
    end", "\tlocal delim = ' '\n\tif txt:find(delim) == nil then\n\t\tdelim = ','\n\
    \t\tif txt:find(delim) == nil then\n\t\t\treturn #txt % 2\n\t\tend\n\tend\n\t\
    local f = {}\n\tfor w in txt:gmatch('[^' .. delim .. ']+') do\n\t\ttable.insert(f,\
    \ w)\n\tend\n\treturn f\nend", "\tif string.find(txt, ' ') then\n\t\tlocal words\
    \ = {}\n\t\tfor word in string.gmatch(txt, \"%w+\") do\n\t\t\ttable.insert(words,\
    \ word)\n\t\tend\n\t\treturn words\n\telseif string.find(txt, ',') then\n\t\t\
    local words = {}\n\t\tfor word in string.gmatch(txt, \"%w+\") do\n\t\t\ttable.insert(words,\
    \ word)\n\t\tend\n\t\treturn words\n\telse\n\t\tlocal count = 0\n\t\tfor i=1,\
    \ #txt do\n\t\t\tlocal ascii = string.byte(txt, i)\n\t\t\tif ascii % 2 == 1 then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\nend",
  "\tif not txt:find(\"%s\") then\n\t\tif not txt:find(\",\") then\n\t\t\tlocal sum\
    \ = 0\n\t\t\tfor w in txt:gmatch(\"%w\") do\n\t\t\t\tsum = sum + math.fmod(string.byte(w),\
    \ 2)\n\t\t\tend\n\t\t\treturn sum\n\t\telse\n\t\t\treturn txt:gmatch(\"([^,]+)\"\
    )\n\t\tend\n\telse\n\t\treturn txt:gmatch(\"([^%s]+)\")\n\tend\nend", "  local\
    \ t = {}\n  for w in string.gmatch(txt, '[^%s,]+') do\n    table.insert(t, w)\n\
    \  end\n  if table.getn(t) == 0 then\n    local count = 0\n    for i = 1, #txt\
    \ do\n      local v = string.byte(txt, i) - string.byte('a')\n      if v % 2 ==\
    \ 1 then\n        count = count + 1\n      end\n    end\n    return count\n  end\n\
    \  return t\nend", "    local t = {}\n    local c = 0\n    local i = 0\n    local\
    \ n = 0\n    if #txt == 0 then\n        return 0\n    end\n    for word in string.gmatch(txt,\
    \ '%w+') do\n        t[c] = word\n        c = c + 1\n    end\n    if c > 0 then\n\
    \        return t\n    end\n    for word in string.gmatch(txt, '%w+,%w+') do\n\
    \        t[i] = word\n        i = i + 1\n    end\n    if i > 0 then\n        return\
    \ t\n    end\n    for word in string.gmatch(txt, '[a-z]+') do\n        local n1\
    \ = #word\n        for i = 1, n1 do\n            if (i % 2) ~= 0 then\n      \
    \          n = n + 1\n            end\n        end\n    end\n    return n\nend",
  "    assert(type(txt) == 'string')\n    local words = {}\n    if not txt:find('%s')\
    \ then\n        if not txt:find(',') then\n            return #txt / 2\n     \
    \   else\n            words = string.split(txt, ',')\n        end\n    else\n\
    \        words = string.split(txt, '%s')\n    end\n    return words\nend", "\t\
    --\n\treturn txt\nend", "    -- ...\nend", "  if string.find(txt, \",\") then\n\
    \    return string.split(txt, \",\")\n  elseif string.find(txt, \" \") then\n\
    \    return string.split(txt, \" \")\n  else\n    local count = 0\n    for i =\
    \ 1, #txt do\n      local letter = string.sub(txt, i, i)\n      local ord = string.byte(letter)\
    \ - string.byte(\"a\")\n      if ord % 2 == 1 then\n        count = count + 1\n\
    \      end\n    end\n    return count\n  end\nend", "\tlocal words = {}\n\tfor\
    \ word in txt:gmatch('%S+') do\n\t\twords[#words + 1] = word\n\tend\n\tif #words\
    \ > 0 then\n\t\treturn words\n\tend\n\t\n\tlocal numbers = {}\n\tfor number in\
    \ txt:gmatch('%d+') do\n\t\tnumbers[#numbers + 1] = tonumber(number)\n\tend\n\t\
    if #numbers > 0 then\n\t\treturn numbers\n\tend\n\t\n\tlocal count = 0\n\tfor\
    \ c in txt:gmatch('%a') do\n\t\tlocal n = c:byte() - string.byte('a')\n\t\tif\
    \ n % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
  "    local tokens = {}\n    for token in txt:gmatch('%S+') do\n        table.insert(tokens,\
    \ token)\n    end\n    if #tokens == 0 then\n        local sum = 0\n        for\
    \ i = 1, #txt do\n            if (i % 2 == 1) and txt:sub(i, i):match('%l') then\n\
    \                sum = sum + (txt:byte(i) - 97)\n            end\n        end\n\
    \        return sum\n    end\n    return tokens\nend", "\tlocal spl = {}\n\tlocal\
    \ txt2 = txt:gsub('%s*%p%s*', ',')\n\tif txt2:find(',') then\n\t\tspl = txt2:split(',')\n\
    \telse\n\t\tlocal n = 0\n\t\tfor i=1,#txt do\n\t\t\tif txt:sub(i,i):lower():byte()\
    \ % 2 == 1 then\n\t\t\t\tn = n + 1\n\t\t\tend\n\t\tend\n\t\tspl = {n}\n\tend\n\
    \treturn spl\nend", "    -- TODO: Implement!\nend", "    local s_txt = string.gsub(txt,\
    \ ' ', ',')\n    local s_txt = string.gsub(s_txt, '!', '')\n    if s_txt:find(',')\
    \ then\n        local words = {}\n        for word in s_txt:gmatch('[^,]+') do\n\
    \            words[#words + 1] = word\n        end\n        return words\n   \
    \ else\n        local res = 0\n        for i = 1, string.len(s_txt) do\n     \
    \       if (ord(s_txt:sub(i, i)) - ord('a')) % 2 == 1 then\n                res\
    \ = res + 1\n            end\n        end\n        return res\n    end\nend",
  "  local split_words = table.new(0, 1)\n  local result = {}\n  local i = 1\n  while\
    \ i <= #txt do\n    local start, finish = string.find(txt, '[%s,]', i)\n    if\
    \ start then\n      local substr = string.sub(txt, i, start - 1)\n      if #substr\
    \ > 0 then\n        table.insert(split_words, substr)\n      end\n      i = finish\
    \ + 1\n    else\n      local substr = string.sub(txt, i)\n      if #substr > 0\
    \ then\n        table.insert(split_words, substr)\n      end\n      i = #txt +\
    \ 1\n    end\n  end\n  if #split_words > 0 then\n    local result = table.new(#split_words,\
    \ 0)\n    for i, v in ipairs(split_words) do\n      result[i] = v\n    end\n \
    \   return result\n  else\n    local result = 0\n    for i = 1, #txt do\n    \
    \  if txt:byte(i) - ord('a') % 2 == 1 then\n        result = result + 1\n    \
    \  end\n    end\n    return result\n  end\nend", "  -- return a table of words\
    \ split on whitespace\n  local words = {}\n  if txt:find(' ') then\n    for v\
    \ in txt:gmatch('%S+') do\n      table.insert(words, v)\n    end\n  elseif txt:find(',')\
    \ then\n    for v in txt:gmatch('[^,]+') do\n      table.insert(words, v)\n  \
    \  end\n  else\n    return string.len(txt) % 2 == 0 and 0 or 1\n  end\n  return\
    \ words\nend", "    local res = {}\n    local found = false\n    if txt:find('[\
    \ ,]') then\n        for w in txt:gmatch('[^ ,]+') do\n            table.insert(res,\
    \ w)\n        end\n        found = true\n    end\n    if not found then\n    \
    \    local cnt = 0\n        for s in txt:gmatch('.') do\n            if (s:byte()-96)\
    \ % 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n\
    \        return cnt\n    end\n    return res\nend", "  local result = {}\n  if\
    \ txt:find(\"%s\") then\n    for w in txt:gmatch(\"%S+\") do\n      table.insert(result,\
    \ w)\n    end\n  elseif txt:find(\",\") then\n    for w in txt:gmatch(\"[^,]+\"\
    ) do\n      table.insert(result, w)\n    end\n  else\n    local count = 0\n  \
    \  for c in txt:gmatch(\".\") do\n      local idx = string.byte(c) - 97\n    \
    \  if idx % 2 == 0 then\n        count = count + 1\n      end\n    end\n    return\
    \ count\n  end\n  return result\nend", "\tlocal words, commas, lowercase = {},\
    \ 0, 0\n\tfor w in string.gmatch(txt, '%S+') do\n\t\ttable.insert(words, w)\n\t\
    end\n\tif #words == 0 then\n\t\tfor i = 1, #txt do\n\t\t\tif string.byte(txt,\
    \ i) == string.byte(',') then\n\t\t\t\tcommas = commas + 1\n\t\t\telseif string.byte(txt,\
    \ i) >= string.byte('a') and string.byte(txt, i) <= string.byte('z') then\n\t\t\
    \t\tif (string.byte(txt, i) - string.byte('a')) % 2 == 1 then\n\t\t\t\t\tlowercase\
    \ = lowercase + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif commas == 0 then\n\t\
    \t\treturn lowercase\n\t\telse\n\t\t\treturn lowercase, commas\n\t\tend\n\tend\n\
    \treturn words\nend", "    error(\"Not implemented\")\nend", "    -- your code\
    \ here\n    return {}\nend", "    -- TODO: implement\n    local t={}\n    local\
    \ k\n    local count=0\n    if txt:find(\"%s\") then\n        for v in txt:gmatch(\"\
    %S+\") do\n            table.insert(t,v)\n        end\n        return t\n    elseif\
    \ txt:find(\",\") then\n        for v in txt:gmatch(\"%S+\") do\n            table.insert(t,v)\n\
    \        end\n        return t\n    elseif not txt:find(\"%s\") and not txt:find(\"\
    ,\") then\n        for i=1,txt:len() do\n            k=txt:sub(i,i)\n        \
    \    if (k:byte()-96)%2==1 then\n                count=count+1\n            end\n\
    \        end\n        return count\n    end\nend", "    return {}\nend", "   \
    \ if not txt then return {} end\n    local t = {}\n    for v in string.gmatch(txt,\
    \ \"[^%s,]+\") do\n        table.insert(t, v)\n    end\n    if #t == 0 then\n\
    \        local cnt = 0\n        for i = 1, string.len(txt) do\n            local\
    \ v = string.byte(txt, i)\n            if v >= 97 and v <= 122 and (v - 96) %\
    \ 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n \
    \       return cnt\n    end\n    return t\nend", end, "    local words = {}\n\
    \    for word in txt:gmatch('%w+') do\n        table.insert(words, word)\n   \
    \ end\n    if #words > 0 then\n        return words\n    end\n    local count\
    \ = 0\n    for c in txt:gmatch('%a') do\n        local n = string.byte(c) - ord('a')\n\
    \        if n % 2 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    return {'Hello', 'world!'}\nend", "    -- Your code\
    \ here\nend", "\t-- TODO\nend", "    if txt:find(' ') then\n        return txt:split('\
    \ ')\n    elseif txt:find(',') then\n        return txt:split(',')\n    else\n\
    \        return sum_odd(txt:lower())\n    end\nend", "    -- if no white spaces\n\
    \    if not txt:find(' ') then\n        -- if no commas\n        if not txt:find(',')\
    \ then\n            local result = 0\n            for i = 1, #txt do\n       \
    \         local c = txt:sub(i, i)\n                local v = ord(c)\n        \
    \        if (v % 2) == 1 then\n                    result = result + 1\n     \
    \           end\n            end\n            return result\n        else\n  \
    \          local result = {}\n            for str in txt:gmatch('([^,]+)') do\n\
    \                table.insert(result, str)\n            end\n            return\
    \ result\n        end\n    else\n        local result = {}\n        for str in\
    \ txt:gmatch('([^ ]+)') do\n            table.insert(result, str)\n        end\n\
    \        return result\n    end\nend", "    assert(type(txt) == 'string')\n  \
    \  return M.split_words(txt)\nend", "    if txt:find(\"%s\") then return txt:split()\n\
    \    elseif txt:find(\",\") then return txt:split(\",\")\n    else return #filter(function(ch)\
    \ return ch:byte() - ord('a') % 2 == 1 end, txt)\n    end\nend", end, "    local\
    \ function split(txt, delim)\n        local words = {}\n        for word in txt:gmatch(\"\
    [^\" .. delim .. \"]+\") do\n            table.insert(words, word)\n        end\n\
    \        return words\n    end", "    local words = {}\n    if txt:find(\" \"\
    ) then\n        for k in txt:gmatch(\"[^%s]+\") do\n            table.insert(words,\
    \ k)\n        end\n    elseif txt:find(\",\") then\n        for k in txt:gmatch(\"\
    [^,]+\") do\n            table.insert(words, k)\n        end\n    else\n     \
    \   words = 0\n        for i = 1, txt:len() do\n            if txt:sub(i, i):find(\"\
    [a-z]\") and i % 2 == 1 then\n                words = words + 1\n            end\n\
    \        end\n    end\n    return words\nend", "\t--[=[\n\tlocal delimiters =\
    \ {[' '] = true, [','] = true}\n\tlocal words = {}\n\tlocal i = 1\n\tlocal j =\
    \ 1\n\tfor i = 1, #txt do\n\t\tlocal delimiter = delimiters[txt:sub(i, i)]\n\t\
    \tif delimiter then\n\t\t\tif i ~= j then\n\t\t\t\twords[#words + 1] = txt:sub(j,\
    \ i - 1)\n\t\t\tend\n\t\t\tj = i + 1\n\t\tend\n\tend\n\tif j ~= i then\n\t\twords[#words\
    \ + 1] = txt:sub(j, i)\n\tend\n\tif #words > 0 then\n\t\treturn words\n\tend\n\
    \t--]=]\n\tif not txt:find('[%s,]') then\n\t\tlocal n = 0\n\t\tfor i = 1, #txt\
    \ do\n\t\t\tif txt:byte(i) % 2 == 1 then\n\t\t\t\tn = n + 1\n\t\t\tend\n\t\tend\n\
    \t\treturn n\n\tend\n\tlocal words = {}\n\tfor word in txt:gmatch('[^%s,]+') do\n\
    \t\twords[#words + 1] = word\n\tend\n\treturn words\nend", "    return 1\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
