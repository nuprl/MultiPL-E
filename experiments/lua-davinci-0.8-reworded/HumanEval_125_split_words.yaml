name: HumanEval_125_split_words
language: lua
prompt: "-- Given a string of words, return a table of words split on whitespace,\
  \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
  -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
  -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
  \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
  \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
  \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
  \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
  \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local words = {}\n    local commas = true\n    local punct = true\n\
    \    local i = 1\n    local string_start = nil\n    while i <= #txt do\n     \
    \   local c = txt:sub(i, i)\n        local code = c:byte()\n        if code ==\
    \ 34 then -- \"\n            if string_start then\n                string_start\
    \ = nil\n            else\n                string_start = i\n            end\n\
    \        elseif string_start and code == 44 then -- ,\n            table.insert(words,\
    \ txt:sub(string_start + 1, i - 1))\n            string_start = nil\n        elseif\
    \ not string_start and code == 44 then -- ,\n            commas = false\n    \
    \    elseif not string_start and (code == 33 or code == 46 or code == 63) then\
    \ -- !.?\n            punct = false\n        end\n        i = i + 1\n    end\n\
    \    if string_start then\n        table.insert(words, txt:sub(string_start +\
    \ 1, #txt))\n    end\n    if #words == 0 then\n        if commas then\n      \
    \      i = 1\n            local num_odd = 0\n            while i <= #txt do\n\
    \                local code = txt:sub(i, i):byte()\n                if code >=\
    \ 97 and code <= 122 then\n                    num_odd = num_odd + (1 - (code\
    \ - 96) % 2)\n                end\n                i = i + 1\n            end\n\
    \            return num_odd\n        elseif punct then\n            return {txt}\n\
    \        end\n    end\n    return words\nend", "  return {}\nend", "    -- TODO\n\
    end", "  local function split_words_by_whitespace(txt)\n    local words = {}\n\
    \    local word_start = 1\n    for i = 1, #txt do\n      if string.find(txt, '%s',\
    \ i) then\n        words[#words + 1] = string.sub(txt, word_start, i - 1)\n  \
    \      word_start = i + 1\n      end\n    end\n    words[#words + 1] = string.sub(txt,\
    \ word_start, #txt)\n    return words\n  end", "    return {}\nend", "  local\
    \ words = {}\n  if txt:find(\" \") then\n    for word in txt:gmatch(\"%S+\") do\n\
    \      table.insert(words, word)\n    end\n  elseif txt:find(\",\") then\n   \
    \ for word in txt:gmatch(\"[^,]+\") do\n      table.insert(words, word)\n    end\n\
    \  else\n    local odd, even = 0, 0\n    for i = 1, txt:len() do\n      local\
    \ n = string.byte(txt, i) - 96\n      if n % 2 == 0 then\n        even = even\
    \ + 1\n      else\n        odd = odd + 1\n      end\n    end\n    return odd >\
    \ even and odd or even\n  end\n  return words\nend", "    local words = {}\n \
    \   local del = txt:find(' ') and ' ' or (txt:find(',') and ',' or nil)\n    if\
    \ del then\n        for w in txt:gmatch('[^'..del..']+') do\n            table.insert(words,\
    \ w)\n        end\n    else\n        local _, i = 0, 1\n        for m in txt:gmatch('[a-z]')\
    \ do\n            _ = _ + (i % 2 == 0 and ord(m) or -ord(m))\n            i =\
    \ i + 1\n        end\n        words = _\n    end\n    return words\nend", "  --\
    \ TODO: implement me\nend", "  -- your code here\nend", "    local ws = tostring(txt):find(\"\
    [%s]\")\n    if ws then\n        local words = {}\n        for w in tostring(txt):gmatch(\"\
    %w+\") do\n            table.insert(words, w)\n        end\n        return words\n\
    \    else\n        local comma = tostring(txt):find(\",\")\n        if comma then\n\
    \            local words = {}\n            for w in tostring(txt):gmatch(\"%w+\"\
    ) do\n                table.insert(words, w)\n            end\n            return\
    \ words\n        else\n            local num = 0\n            for c in tostring(txt):gmatch(\"\
    %a\") do\n                local code = string.byte(c)\n                if code\
    \ % 2 == 1 then\n                    num = num + 1\n                end\n    \
    \        end\n            return num\n        end\n    end\nend", "\tif not txt\
    \ then\n\t\treturn {}\n\tend\n\ttxt = txt:gsub(\"^%s*(.-)%s*$\", \"%1\")\n\tlocal\
    \ s = {}\n\tlocal i = 1\n\twhile true do\n\t\tlocal j = string.find(txt, \"[%s,]\"\
    , i)\n\t\tif not j then\n\t\t\ts[#s + 1] = txt:sub(i)\n\t\t\tbreak\n\t\tend\n\t\
    \ts[#s + 1] = txt:sub(i, j - 1)\n\t\ti = j + 1\n\tend\n\tif #s == 0 then\n\t\t\
    local n = 0\n\t\tfor i = 1, #txt do\n\t\t\tif (i % 2 == 1) and (txt:byte(i) >=\
    \ string.byte('a')) and (txt:byte(i) <= string.byte('z')) then\n\t\t\t\tn = n\
    \ + 1\n\t\t\tend\n\t\tend\n\t\treturn n\n\tend\n\treturn s\nend", "  local split_array\
    \ = {}\n  local has_comma = false\n  local has_space = false\n  for char in txt:gmatch(\"\
    .\") do\n    if char == ',' then\n      has_comma = true\n    elseif char == '\
    \ ' then\n      has_space = true\n    end\n  end\n  if has_space then\n    split_array\
    \ = txt:split(\" \")\n  elseif has_comma then\n    split_array = txt:split(\"\
    ,\")\n  else\n    local count = 0\n    for _, letter in ipairs(txt:lower():to_array())\
    \ do\n      if (letter:byte() - 97) % 2 == 1 then\n        count = count + 1\n\
    \      end\n    end\n    return count\n  end\n  return split_array\nend", "  \
    \  if txt:find('%S') then\n        return txt:find('%S')\n    elseif txt:find(',')\
    \ then\n        return txt:find(',')\n    else\n        return txt:find('%s')\n\
    \    end\nend", "    if txt:find('%s') then\n        local t = {}\n        for\
    \ word in txt:gmatch('%w+') do\n            table.insert(t, word)\n        end\n\
    \        return t\n    elseif txt:find(',') then\n        local t = {}\n     \
    \   for word in txt:gmatch('%w+') do\n            table.insert(t, word)\n    \
    \    end\n        return t\n    else\n        local odds = 0\n        for i =\
    \ 1, #txt do\n            local c = txt:sub(i, i)\n            if c:byte() % 2\
    \ == 1 then\n                odds = odds + 1\n            end\n        end\n \
    \       return odds\n    end\nend", "  -- your code here\nend", "    local splits\
    \ = split(txt, ' ')\n    if #splits > 1 then\n        return splits\n    end\n\
    \    splits = split(txt, ',')\n    if #splits > 1 then\n        return splits\n\
    \    end\n    local res = 0\n    for i = 1, #txt do\n        local ord = byte(txt,\
    \ i) - byte('a')\n        if ord % 2 == 1 then\n            res = res + 1\n  \
    \      end\n    end\n    return res\nend", "\tlocal t = {}\n\tif txt:find(\" \"\
    ) then\n\t\tfor k in txt:gmatch(\"%w+\") do\n\t\t\ttable.insert(t, k)\n\t\tend\n\
    \telseif txt:find(\",\") then\n\t\tfor k in txt:gmatch(\"%w+\") do\n\t\t\ttable.insert(t,\
    \ k)\n\t\tend\n\telse\n\t\tlocal count = 0\n\t\tfor i = 1, #txt do\n\t\t\tif txt:sub(i,\
    \ i):lower():byte() % 2 == 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\
    end\n\t\treturn count\n\tend\n\treturn t\nend", end, "    local w = {}\n    for\
    \ word in txt:gmatch('%w+') do\n        table.insert(w, word)\n    end\n    if\
    \ #w == 0 then\n        local count = 0\n        for i=1,#txt do\n           \
    \ local x = string.byte(txt, i) - string.byte('a')\n            if x % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\n    return w\nend", "    -- Split on whitespace\n\
    \    local tbl = {}\n    for v in txt:gmatch('%S+') do\n        tbl[#tbl+1] =\
    \ v\n    end\n    if #tbl == 0 then\n        -- Split on commas\n        for v\
    \ in txt:gmatch('[^,]+') do\n            tbl[#tbl+1] = v\n        end\n      \
    \  if #tbl == 0 then\n            -- Return number of lower-case letters with\
    \ odd order in the alphabet\n            local count = 0\n            for c in\
    \ txt:gmatch('%a') do\n                if (string.byte(c) - 97) % 2 == 1 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \            return count\n        end\n    end\n    return tbl\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
