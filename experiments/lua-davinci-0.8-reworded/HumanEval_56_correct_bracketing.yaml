name: HumanEval_56_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
  -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
  -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
  \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
  \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
  \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
  \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local left_brackets = {}\n  for i = 1, #brackets do\n    local bracket\
    \ = brackets:sub(i, i)\n    if bracket == '<' then\n      table.insert(left_brackets,\
    \ bracket)\n    elseif bracket == '>' then\n      local left_bracket = table.remove(left_brackets)\n\
    \      if not left_bracket then\n        return false\n      end\n    end\n  end\n\
    \  return #left_brackets == 0\nend", "  -- TODO\n  -- return false\n  -- You can\
    \ write this function in about 4 lines of code. (Feel free to remove\n  -- this\
    \ comment when you do.)\n  count=0\n  for i in brackets:gmatch(\".\") do\n   \
    \ if(i=='<')then\n      count=count+1\n    elseif(i=='>')then\n      count=count-1\n\
    \    end\n    if(count<0)then\n      return false\n    end\n  end\n  if(count~=0)then\n\
    \    return false\n  end\n  return true\nend", "    local depth = 0\n    for i=1,#brackets\
    \ do\n        if brackets:sub(i,i) == '<' then\n            depth = depth + 1\n\
    \        elseif brackets:sub(i,i) == '>' then\n            depth = depth - 1\n\
    \        end\n        if depth < 0 then\n            return false\n        end\n\
    \    end\n    return depth == 0\nend", "    local bracket_count = 0\n    for i\
    \ = 1, #brackets do\n        if brackets:sub(i, i) == '<' then\n            bracket_count\
    \ = bracket_count + 1\n        elseif brackets:sub(i, i) == '>' then\n       \
    \     bracket_count = bracket_count - 1\n        end\n        if bracket_count\
    \ < 0 then\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend", "\tlocal state = 0\n\tfor bracket in brackets:gmatch('.') do\n\t\
    \tif bracket == '<' then\n\t\t\tstate = state + 1\n\t\telseif bracket == '>' then\n\
    \t\t\tstate = state - 1\n\t\t\tif state < 0 then\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn state == 0\nend", "    local depth = 0\n    for\
    \ i = 1, string.len(brackets) do\n        local b = string.sub(brackets, i, i)\n\
    \        if b == '<' then\n            depth = depth + 1\n        elseif b ==\
    \ '>' then\n            depth = depth - 1\n        end\n        if depth < 0 then\n\
    \            return false\n        end\n    end\n    return depth == 0\nend",
  "  local n = 0\n  for c in brackets:gmatch(\".\") do\n    if c == \"<\" then\n \
    \     n = n + 1\n    elseif c == \">\" then\n      n = n - 1\n    end\n    if\
    \ n < 0 then\n      return false\n    end\n  end\n  return n == 0\nend", "\tlocal\
    \ open, close = 0, 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) ==\
    \ '<' then\n\t\t\topen = open + 1\n\t\telse\n\t\t\tclose = close + 1\n\t\tend\n\
    \t\tif close > open then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn open ==\
    \ close\nend", "  local level = 0\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == '<' then\n      level = level + 1\n    elseif brackets:sub(i, i) == '>'\
    \ then\n      level = level - 1\n    end\n    if level < 0 then\n      return\
    \ false\n    end\n  end\n  return level == 0\nend", "    local bracket_count =\
    \ 0\n    for char in brackets:gmatch\".\" do\n        if char == '<' then\n  \
    \          bracket_count = bracket_count + 1\n        elseif char == '>' then\n\
    \            bracket_count = bracket_count - 1\n        end\n        if bracket_count\
    \ < 0 then\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend", "  local floor = 0\n  for char in brackets:gmatch('.') do\n    if\
    \ char == '<' then\n      floor = floor + 1\n    elseif char == '>' then\n   \
    \   floor = floor - 1\n    end\n    if floor < 0 then\n      return false\n  \
    \  end\n  end\n  return floor == 0\nend", "    local n = 0\n    for b in brackets:gmatch('.')\
    \ do\n        if b == '<' then\n            n = n + 1\n        elseif b == '>'\
    \ then\n            n = n - 1\n        end\n        if n < 0 then\n          \
    \  return false\n        end\n    end\n    return n == 0\nend", "  -- check if\
    \ the string has even length\n  if brackets:len() % 2 ~= 0 then\n    return false\n\
    \  end", "\tlocal stack = {}\n\tfor i=1,#brackets do\n\t\tlocal b = brackets:sub(i,i)\n\
    \t\tif b == '<' then\n\t\t\ttable.insert(stack,b)\n\t\telseif b == '>' then\n\t\
    \t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\ttable.remove(stack)\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend", "    -- check for the easy\
    \ cases first\n    if brackets == '<' or brackets == '>' then\n        return\
    \ false\n    end\n    -- count how many opening and closing brackets we've seen\n\
    \    local opened = 0\n    local closed = 0\n    -- loop through the characters\
    \ in brackets\n    for c in brackets:gmatch\".\" do\n        -- keep track of\
    \ how many opening and closing brackets we've seen\n        if c == '<' then\n\
    \            opened = opened + 1\n        elseif c == '>' then\n            closed\
    \ = closed + 1\n        end\n        -- if we've seen more closing brackets than\
    \ opening ones,\n        -- we can never have enough, so return false\n      \
    \  if closed > opened then\n            return false\n        end\n    end\n \
    \   -- if we made it here, we have enough closing brackets and\n    -- we don't\
    \ have too many\n    return true\nend", "    local bracket_counter = 0\n    for\
    \ i = 1, #brackets do\n        if brackets:sub(i, i) == '<' then\n           \
    \ bracket_counter = bracket_counter + 1\n        elseif brackets:sub(i, i) ==\
    \ '>' then\n            bracket_counter = bracket_counter - 1\n        end\n \
    \       if bracket_counter < 0 then\n            return false\n        end\n \
    \   end\n    return bracket_counter == 0\nend", "  local num_open = 0\n  for c\
    \ in brackets:gmatch(\".\") do\n    if c == \"<\" then\n      num_open = num_open\
    \ + 1\n    elseif c == \">\" then\n      num_open = num_open - 1\n    end\n  \
    \  if num_open < 0 then\n      return false\n    end\n  end\n  return num_open\
    \ == 0\nend", "    local opened = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '<' then\n            opened = opened + 1\n        else\n            opened\
    \ = opened - 1\n        end\n        if opened < 0 then\n            return false\n\
    \        end\n    end\n    return opened == 0\nend", "  local paren_count = 0\n\
    \  for i = 1, string.len(brackets) do\n    local bracket = string.sub(brackets,\
    \ i, i)\n    if bracket == '<' then\n      paren_count = paren_count + 1\n   \
    \ elseif bracket == '>' then\n      paren_count = paren_count - 1\n    end\n \
    \   if paren_count < 0 then\n      return false\n    end\n  end\n  return paren_count\
    \ == 0\nend", "  -- TODO\n  local count = 0\n  for i=1,string.len(brackets) do\n\
    \    if brackets:sub(i,i) == '<' then\n      count = count + 1\n    elseif brackets:sub(i,i)\
    \ == '>' then\n      count = count - 1\n    end\n    if count < 0 then\n     \
    \ return false\n    end\n  end\n  if count == 0 then\n    return true\n  else\n\
    \    return false\n  end\nend", "    local stack = { 0 }\n    for i=1,#brackets\
    \ do\n        local c = brackets:sub(i,i)\n        if c == '<' then\n        \
    \    table.insert(stack,1)\n        elseif c == '>' then\n            if stack[1]\
    \ > 0 then\n                table.remove(stack,1)\n            else\n        \
    \        return false\n            end\n        end\n    end\n    return stack[1]\
    \ == 0\nend", "\tlocal level = 0\n\tfor i = 1, #brackets do\n\t\tlocal char =\
    \ brackets:sub(i, i)\n\t\tif char == '<' then\n\t\t\tlevel = level + 1\n\t\telseif\
    \ char == '>' then\n\t\t\tlevel = level - 1\n\t\t\tif level < 0 then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\tend\n\tend\n\treturn level == 0\nend", "  local stack\
    \ = Stack()\n  for i = 1, #brackets do\n    local bracket = brackets:sub(i, i)\n\
    \    if bracket == '<' then\n      stack:push(bracket)\n    elseif bracket ==\
    \ '>' then\n      if stack:is_empty() then\n        return false\n      else\n\
    \        stack:pop()\n      end\n    end\n  end\n  return stack:is_empty()\nend",
  "    return brackets:gsub('[^<>]', ''):match('^(<*>)$') ~= nil\nend", "\tlocal stack\
    \ = {}\n\tfor i = 1, string.len(brackets) do\n\t\tif brackets:sub(i, i) == '<'\
    \ then\n\t\t\ttable.insert(stack, 1, '<')\n\t\telseif brackets:sub(i, i) == '>'\
    \ then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\t\
    table.remove(stack, 1)\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend",
  "    local stack = Stack:new()\n    for i = 1, string.len(brackets) do\n       \
    \ local b = string.sub(brackets, i, i)\n        if b == '<' then\n           \
    \ stack:push(b)\n        else\n            if stack:is_empty() then\n        \
    \        return false\n            else\n                stack:pop()\n       \
    \     end\n        end\n    end\n    return stack:is_empty()\nend", "    assert(type(brackets)\
    \ == 'string')\n    local n = 0\n    for i = 1, #brackets do\n        local b\
    \ = brackets:sub(i, i)\n        if b == '<' then\n            n = n + 1\n    \
    \    elseif b == '>' then\n            n = n - 1\n        else\n            error(\"\
    Invalid bracket: \" .. b)\n        end\n        if n < 0 then\n            return\
    \ false\n        end\n    end\n    return n == 0\nend", "    local stack = {}\n\
    \    for i = 1, #brackets do\n        local bracket = brackets:sub(i, i)\n   \
    \     if bracket == '<' then\n            table.insert(stack, '<')\n        elseif\
    \ bracket == '>' then\n            if #stack == 0 then\n                return\
    \ false\n            else\n                table.remove(stack)\n            end\n\
    \        end\n    end\n    return #stack == 0\nend", "    local open = '<'\n \
    \   local close = '>'\n    local n_open = brackets:match('^<+') or ''\n    local\
    \ n_close = brackets:match('>+$') or ''\n    brackets = brackets:sub(#n_open +\
    \ 1, -#n_close - 1)\n    local pos = brackets:find(open)\n    while pos do\n \
    \       local pos2 = brackets:find(close, pos + 1)\n        if not pos2 then\n\
    \            return false\n        end\n        brackets = brackets:sub(pos2 +\
    \ 1)\n        pos = brackets:find(open)\n    end\n    return true\nend", "   \
    \ local closing_brackets = brackets:gsub('[^>]', '')\n    local opening_brackets\
    \ = brackets:gsub('[^<]', '')\n    return #closing_brackets == #opening_brackets\n\
    end", "    local stack = {}\n    for i = 1, brackets:len() do\n        local c\
    \ = brackets:sub(i, i)\n        if c == '<' then\n            table.insert(stack,\
    \ '<')\n        elseif c == '>' then\n            if #stack == 0 then\n      \
    \          return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "    --\
    \ TODO\n    local stack_brackets = Stack:new()\n    for char in brackets:gmatch('.')\
    \ do\n        if char == '<' then\n            stack_brackets:push(char)\n   \
    \     elseif char == '>' then\n            if stack_brackets:empty() then\n  \
    \              return false\n            else\n                stack_brackets:pop()\n\
    \            end\n        end\n    end\n    return stack_brackets:empty()\nend",
  "    local stack = {}\n    for i = 1, #brackets do\n        local char = brackets:sub(i,\
    \ i)\n        if char == '<' then\n            table.insert(stack, 1, char)\n\
    \        elseif char == '>' then\n            local top = table.remove(stack,\
    \ 1)\n            if top ~= '<' then\n                return false\n         \
    \   end\n        end\n    end\n    return not stack[1]\nend", "    local counter\
    \ = 0\n    for k in brackets:gmatch(\".\") do\n        if k == \"<\" then\n  \
    \          counter = counter + 1\n        elseif k == \">\" then\n           \
    \ counter = counter - 1\n        end\n        if counter < 0 then\n          \
    \  return false\n        end\n    end\n    return counter == 0\nend", "  local\
    \ stack = Stack()\n  for bracket in brackets:gmatch('.') do\n    if bracket ==\
    \ '<' then\n      stack:push(bracket)\n    elseif bracket == '>' then\n      if\
    \ stack:is_empty() then\n        return false\n      else\n        stack:pop()\n\
    \      end\n    end\n  end\n  return stack:is_empty()\nend", "    local open =\
    \ {}\n    for c in brackets:gmatch\".\" do\n        if c == \"<\" then\n     \
    \       open[#open+1] = \"<\"\n        elseif c == \">\" then\n            if\
    \ #open == 0 then\n                return false\n            else\n          \
    \      open[#open] = nil\n            end\n        end\n    end\n    return #open\
    \ == 0\nend", "    local depth = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '<' then\n            depth = depth + 1\n        elseif brackets:sub(i,\
    \ i) == '>' then\n            depth = depth - 1\n        end\n        if depth\
    \ < 0 then\n            return false\n        end\n    end\n    return depth ==\
    \ 0\nend", "  local count = 0\n  for i = 1, #brackets do\n    local b = brackets:sub(i,\
    \ i)\n    if b == '<' then\n      count = count + 1\n    elseif b == '>' then\n\
    \      count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend", "\tlocal stack = {}\n\tfor c in brackets:gmatch('.')\
    \ do\n\t\tif c == '<' then\n\t\t\ttable.insert(stack, 1, c)\n\t\telseif c == '>'\
    \ then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.remove(stack,\
    \ 1)\n\t\tend\n\tend\n\treturn #stack == 0\nend", "  -- Check whether every opening\
    \ bracket has a corresponding closing bracket.\n  -- Put closing brackets from\
    \ the back in a stack, but throw away any\n  -- non-closing brackets.  After all\
    \ the opening brackets have been\n  -- encountered, check whether the stack is\
    \ empty.\n  local closing_brackets = {}\n  for i=1,#brackets do\n    if brackets:sub(i,i)\
    \ == '<' then\n      -- Nothing to do.\n    elseif brackets:sub(i,i) == '>' then\n\
    \      table.insert(closing_brackets, 1, '>')\n    end\n  end\n  if #closing_brackets\
    \ == 0 then\n    return false\n  end\n  for i=1,#brackets do\n    if brackets:sub(i,i)\
    \ == '<' then\n      table.remove(closing_brackets, 1)\n      if #closing_brackets\
    \ == 0 then\n        return false\n      end\n    end\n  end\n  return true\n\
    end", "  -- TODO: Implement this function.\n  -- Hint: the stack data structure\
    \ is the answer.\n  local stack = Stack:new()\n  for i=1, #brackets do\n    if\
    \ brackets:sub(i,i) == '<' then\n      stack:push('<')\n    elseif brackets:sub(i,i)\
    \ == '>' then\n      if stack:top() == '<' then\n        stack:pop()\n      else\n\
    \        return false\n      end\n    end\n  end\n  if stack:empty() then\n  \
    \  return true\n  else\n    return false\n  end\nend", "    if type(brackets)\
    \ ~= 'string' then\n        error(\"bad argument #1 to 'correct_bracketing' (string\
    \ expected, got \" .. type(brackets) .. \")\", 2)\n    end\n    local open_brackets\
    \ = 0\n    for c in brackets:gmatch('.') do\n        if c == '<' then\n      \
    \      open_brackets = open_brackets + 1\n        elseif c == '>' then\n     \
    \       open_brackets = open_brackets - 1\n        else\n            error(\"\
    bad argument #1 to 'correct_bracketing' (found invalid character \" .. c .. \"\
    )\", 2)\n        end\n        if open_brackets < 0 then\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    local count =\
    \ 0\n    for ch in brackets:gmatch(\".\") do\n        if ch == \"<\" then\n  \
    \          count = count + 1\n        elseif ch == \">\" then\n            count\
    \ = count - 1\n        end\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "  local function match(left,\
    \ right)\n    if left == '<' and right == '>' then\n      return true\n    else\n\
    \      return false\n    end\n  end\n  local stack = Stack:new()\n  for i = 1,\
    \ #brackets do\n    if brackets:sub(i, i) == '<' then\n      stack:push(brackets:sub(i,\
    \ i))\n    elseif brackets:sub(i, i) == '>' then\n      if stack:top() and match(stack:top(),\
    \ brackets:sub(i, i)) then\n        stack:pop()\n      else\n        return false\n\
    \      end\n    end\n  end\n  if stack:isempty() then\n    return true\n  else\n\
    \    return false\n  end\nend", "    local count = 0\n    for c in brackets:gmatch'.'\
    \ do\n        if c == '<' then\n            count = count + 1\n        elseif\
    \ c == '>' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "  --TODO: implement function\n  return false\nend", "\tlocal stack\
    \ = {}\n\tlocal i = 1\n\twhile i <= #brackets do\n\t\tlocal bracket = brackets:sub(i,\
    \ i)\n\t\tif bracket == '<' then\n\t\t\ttable.insert(stack, bracket)\n\t\telseif\
    \ bracket == '>' then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\t\
    else\n\t\t\t\ttable.remove(stack)\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    return #stack == 0\nend", "    local open  = 0\n    local close = 0\n    for i\
    \ = 1, #brackets do\n        if brackets:sub(i, i) == '<' then\n            open\
    \ = open + 1\n        elseif brackets:sub(i, i) == '>' then\n            close\
    \ = close + 1\n        end\n    end\n    return open == close\nend", "  -- YOUR\
    \ CODE HERE\n  local stack = Stack:new()\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == '<' then\n      stack:push('<')\n    elseif brackets:sub(i, i) == '>'\
    \ then\n      if stack:size() == 0 then\n        return false\n      else\n  \
    \      stack:pop()\n      end\n    end\n  end\n  if stack:size() == 0 then\n \
    \   return true\n  else\n    return false\n  end\nend", "\tlocal stack = Stack:new()\n\
    \tfor _, bracket in pairs(brackets:split('')) do\n\t\tif bracket == '<' then\n\
    \t\t\tstack:push(bracket)\n\t\telseif bracket == '>' then\n\t\t\tstack:pop()\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn stack:size() == 0\nend",
  "    local n = 0\n    for c in brackets:gmatch('.') do\n        if c == '<' then\n\
    \            n = n + 1\n        elseif c == '>' then\n            n = n - 1\n\
    \        end\n        if n < 0 then\n            return false\n        end\n \
    \   end\n    return n == 0\nend", "    local length = #brackets\n    local count\
    \ = 0\n    for i = 1, length do\n        local char = brackets:sub(i, i)\n   \
    \     if char == '<' then\n            count = count + 1\n        elseif char\
    \ == '>' then\n            count = count - 1\n        end\n        if count <\
    \ 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "    local count = 0\n    for i = 1, #brackets do\n        local char\
    \ = brackets:sub(i, i)\n        if char == '<' then\n            count = count\
    \ + 1\n        elseif char == '>' then\n            count = count - 1\n      \
    \  end\n        if count < 0 then\n            return false\n        end\n   \
    \ end\n    return count == 0\nend", "  -- TODO: implement me\n  local L = 0\n\
    \  local R = 0\n  local result = false\n  for i = 1, string.len(brackets) do\n\
    \    if (string.sub(brackets, i, i) == '<') then\n      L = L + 1\n    elseif\
    \ (string.sub(brackets, i, i) == '>') then\n      R = R + 1\n    end\n  end\n\
    \  if (L == R) then\n    result = true\n  end\n  return result\nend", "  local\
    \ counter = 0\n  for char in brackets:gmatch(\".\") do\n    if char == \"<\" then\n\
    \      counter = counter + 1\n    elseif char == \">\" then\n      counter = counter\
    \ - 1\n    end\n    if counter < 0 then\n      return false\n    end\n  end\n\
    \  return counter == 0\nend", "  local stack = {}\n  for i=1,#brackets do\n  \
    \  local c = brackets:sub(i,i)\n    if c == '<' then\n      table.insert(stack,\
    \ c)\n    elseif c == '>' then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend", "    -- invariant: brackets opened minus brackets closed\
    \ is 0\n    local n_opened = 0\n    for b in brackets:gmatch(\".\") do\n     \
    \   if b == \"<\" then\n            n_opened = n_opened + 1\n        elseif b\
    \ == \">\" then\n            n_opened = n_opened - 1\n        else\n         \
    \   error(\"unexpected bracket: \" .. b)\n        end\n        if n_opened < 0\
    \ then\n            return false\n        end\n    end\n    return n_opened ==\
    \ 0\nend", "  -- If a given string is empty, it is considered \"correct\".\n \
    \ if brackets == '' then\n    return true\n  else\n    -- else, we pick the first\
    \ character and compare it with the last.\n    local head = brackets:sub(1, 1)\n\
    \    local tail = brackets:sub(-1)\n    -- If the first character is \">\" and\
    \ the last one is \"<\",\n    -- return false (not correct).\n    if head == '>'\
    \ and tail == '<' then\n      return false\n    else\n      -- Otherwise, return\
    \ the result for the string without the\n      -- first and last characters.\n\
    \      return correct_bracketing(brackets:sub(2, -2))\n    end\n  end\nend", " \
    \   local count = 0\n    for c in brackets:gmatch('.') do\n        if c == '<'\
    \ then\n            count = count + 1\n        elseif c == '>' then\n        \
    \    count = count - 1\n        end\n        if count < 0 then\n            return\
    \ false\n        end\n    end\n    return count == 0\nend", "  local bracket_stack\
    \ = {}\n  for b in brackets:gmatch('.') do\n    if b == '<' then\n      table.insert(bracket_stack,\
    \ b)\n    else\n      if #bracket_stack == 0 then\n        return false\n    \
    \  end\n      table.remove(bracket_stack)\n    end\n  end\n  return #bracket_stack\
    \ == 0\nend", "  local remaining = 0\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == '<' then\n      remaining = remaining + 1\n    else\n      remaining =\
    \ remaining - 1\n    end\n    if remaining < 0 then\n      return false\n    end\n\
    \  end\n  return remaining == 0\nend", "    local open = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == '<' then\n            open = open + 1\n\
    \        else\n            open = open - 1\n        end\n        if open < 0 then\n\
    \            return false\n        end\n    end\n    return open == 0\nend", " \
    \   return brackets:gsub('>+', ''):len() == 0\nend", "    local idx = 1\n    local\
    \ delta = 0\n    while idx <= #brackets do\n        if brackets:sub(idx, idx)\
    \ == '<' then\n            delta = delta + 1\n        else\n            delta\
    \ = delta - 1\n        end\n        if delta < 0 then\n            return false\n\
    \        end\n        idx = idx + 1\n    end\n    return delta == 0\nend", " \
    \   while brackets:find('<>') do\n        brackets = brackets:gsub('<>', '')\n\
    \    end\n    return brackets == ''\nend", "\tlocal count = 0\n\tfor i=1, #brackets\
    \ do\n\t\tif brackets:sub(i,i) == '<' then\n\t\t\tcount = count + 1\n\t\telseif\
    \ brackets:sub(i,i) == '>' then\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count\
    \ < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn count == 0\nend", " \
    \ local inner_count = 0\n  for i = 1, string.len(brackets) do\n    local b = string.sub(brackets,\
    \ i, i)\n    if b == '<' then\n      inner_count = inner_count + 1\n    elseif\
    \ b == '>' then\n      inner_count = inner_count - 1\n    end\n    if inner_count\
    \ < 0 then\n      return false\n    end\n  end\n  return inner_count == 0\nend",
  "  local counter = 0\n  for char in brackets:gmatch('.') do\n    if char == '<'\
    \ then\n      counter = counter + 1\n    elseif char == '>' then\n      counter\
    \ = counter - 1\n    end\n    if counter < 0 then\n      return false\n    end\n\
    \  end\n  return counter == 0\nend", "  local open_brackets = 0\n  for i = 1,\
    \ #brackets do\n    if brackets:sub(i, i) == '<' then\n      open_brackets = open_brackets\
    \ + 1\n    else\n      open_brackets = open_brackets - 1\n    end\n    if open_brackets\
    \ < 0 then\n      return false\n    end\n  end\n  return open_brackets == 0\n\
    end", "\tlocal par_depth = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i,\
    \ i) == '<' then\n\t\t\tpar_depth = par_depth + 1\n\t\telseif brackets:sub(i,\
    \ i) == '>' then\n\t\t\tpar_depth = par_depth - 1\n\t\t\tif par_depth < 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn par_depth == 0\nend",
  "  local count = 0\n  for c in brackets:gmatch('.') do\n    if c == '<' then\n \
    \     count = count + 1\n    elseif c == '>' then\n      count = count - 1\n \
    \   end\n    if count < 0 then\n      return false\n    end\n  end\n  return count\
    \ == 0\nend", "    local function helper(brackets, count)\n        if string.len(brackets)\
    \ == 0 then\n            return count == 0\n        elseif string.sub(brackets,\
    \ 1, 1) == '<' then\n            return helper(string.sub(brackets, 2), count\
    \ + 1)\n        elseif string.sub(brackets, 1, 1) == '>' then\n            return\
    \ count > 0 and helper(string.sub(brackets, 2), count - 1)\n        else\n   \
    \         error('unknown character: ' .. brackets)\n        end\n    end\n   \
    \ return helper(brackets, 0)\nend", "    local open = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == '<' then\n            open = open + 1\n\
    \        else\n            open = open - 1\n        end\n        if open < 0 then\n\
    \            return false\n        end\n    end\n    return open == 0\nend", "\t\
    local count = 0\n\tfor _, bracket in ipairs(brackets) do\n\t\tif bracket == '<'\
    \ then\n\t\t\tcount = count + 1\n\t\telseif bracket == '>' then\n\t\t\tcount =\
    \ count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn count == 0\nend", "  -- TODO\n  local count = 0\n  for i = 1,#brackets\
    \ do\n    if string.sub(brackets,i,i) == '<' then\n      count = count + 1\n \
    \   elseif string.sub(brackets,i,i) == '>' then\n      count = count - 1\n   \
    \ end\n    if count < 0 then\n      return false\n    end\n  end\n  if count ~=\
    \ 0 then\n    return false\n  end\n  return true\nend", "\tlocal open_count =\
    \ 0\n\tfor b in brackets:gmatch'.' do\n\t\tif b == '<' then\n\t\t\topen_count\
    \ = open_count + 1\n\t\telseif b == '>' then\n\t\t\topen_count = open_count -\
    \ 1\n\t\tend\n\t\tif open_count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn open_count == 0\nend", "\tlocal n = 0\n\tfor i = 1, #brackets do\n\t\t\
    local b = brackets:sub(i, i)\n\t\tif b == '<' then\n\t\t\tn = n + 1\n\t\telseif\
    \ b == '>' then\n\t\t\tn = n - 1\n\t\tend\n\t\tif n < 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn n == 0\nend", "  local lbrace = brackets:match('^<')\n\
    \  local rbrace = brackets:match('>$')\n  if not lbrace and not rbrace then\n\
    \    return true\n  elseif lbrace and rbrace then\n    return correct_bracketing(brackets:sub(2,\
    \ -2))\n  else\n    return false\n  end\nend", "  local count = 0\n  for i = 1,\
    \ #brackets do\n    if brackets:sub(i, i) == '<' then\n      count = count + 1\n\
    \    else\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  return count == 0\nend", "    local n_left = 0\n  \
    \  for c in brackets:gmatch('.') do\n        if c == '<' then\n            n_left\
    \ = n_left + 1\n        elseif c == '>' then\n            n_left = n_left - 1\n\
    \            if n_left < 0 then\n                return false\n            end\n\
    \        end\n    end\n    return n_left == 0\nend", "    if brackets == '' then\n\
    \        return true\n    elseif brackets:sub(1,1) == '<' then\n        -- find\
    \ corresponding closing bracket\n        local close = brackets:find('>')\n  \
    \      if close then\n            return correct_bracketing(brackets:sub(2,close-1))\
    \ and correct_bracketing(brackets:sub(close+1))\n        else\n            return\
    \ false\n        end\n    else\n        return false\n    end\nend", "  return\
    \ brackets:gsub('<>', '') == ''\nend", "    local valid_brackets = {'<', '>'}\n\
    \    local stack = Stack()\n    for c in brackets:gmatch(\".\") do\n        if\
    \ not is_in(c, valid_brackets) then\n            return false\n        end\n \
    \       if c == '<' then\n            stack:push(c)\n        elseif c == '>' then\n\
    \            if stack:is_empty() then\n                return false\n        \
    \    else\n                stack:pop()\n            end\n        end\n    end\n\
    \    return stack:is_empty()\nend", "    local count = 0\n    for c in brackets:gmatch('.')\
    \ do\n        if c == '<' then\n            count = count + 1\n        elseif\
    \ c == '>' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "  local number_of_opening_brackets = 0\n  for i = 1, #brackets do\n\
    \    local b = brackets:sub(i, i)\n    if b == '<' then\n      number_of_opening_brackets\
    \ = number_of_opening_brackets + 1\n    elseif b == '>' then\n      number_of_opening_brackets\
    \ = number_of_opening_brackets - 1\n      if number_of_opening_brackets < 0 then\n\
    \        return false\n      end\n    end\n  end\n  return number_of_opening_brackets\
    \ == 0\nend", "    local floor = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '<' then\n            floor = floor + 1\n        elseif brackets:sub(i,\
    \ i) == '>' then\n            floor = floor - 1\n        end\n        if floor\
    \ < 0 then\n            return false\n        end\n    end\n    return floor ==\
    \ 0\nend", "    local open_brackets = 0\n    for _, bracket in pairs(brackets)\
    \ do\n        if bracket == '<' then\n            open_brackets = open_brackets\
    \ + 1\n        elseif bracket == '>' then\n            open_brackets = open_brackets\
    \ - 1\n        end\n        if open_brackets < 0 then\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "\tlocal counter =\
    \ 0\n\tfor i=1,#brackets do\n\t\tif brackets:sub(i,i) == '<' then\n\t\t\tcounter\
    \ = counter + 1\n\t\telseif brackets:sub(i,i) == '>' then\n\t\t\tcounter = counter\
    \ - 1\n\t\tend\n\t\tif counter < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return counter == 0\nend", "  local mismatched_count = 0\n  for bracket in brackets:gmatch\"\
    .\" do\n    if bracket == '<' then\n      mismatched_count = mismatched_count\
    \ + 1\n    elseif bracket == '>' then\n      mismatched_count = mismatched_count\
    \ - 1\n    end\n    if mismatched_count < 0 then\n      return false\n    end\n\
    \  end\n  return mismatched_count == 0\nend", "    -- TODO: your code here\nend",
  "    -- YOUR CODE HERE\nend", "  return brackets:gsub('>', ''):len() == 0\nend",
  "\tlocal level = 0\n\tfor i = 1, string.len(brackets) do\n\t\tlocal char = string.sub(brackets,\
    \ i, i)\n\t\tif char == '<' then\n\t\t\tlevel = level + 1\n\t\telseif char ==\
    \ '>' then\n\t\t\tlevel = level - 1\n\t\t\tif level < 0 then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn level == 0\nend", "    local open = 0\n  \
    \  for char in brackets:gmatch(\".\") do\n        if char == \"<\" then\n    \
    \        open = open + 1\n        elseif char == \">\" then\n            open\
    \ = open - 1\n        end\n        if open < 0 then\n            return false\n\
    \        end\n    end\n    return open == 0\nend", "  -- replace this with your\
    \ implementation\n  local stack = Stack:new()\n  for c in brackets:gmatch('.')\
    \ do\n    if c == '<' then\n      stack:push(c)\n    elseif c == '>' then\n  \
    \    if stack:is_empty() then\n        return false\n      else\n        stack:pop()\n\
    \      end\n    end\n  end\n  return stack:is_empty()\nend", "  local open = 0\n\
    \  for char in brackets:gmatch('.') do\n    if char == '<' then\n      open =\
    \ open + 1\n    elseif char == '>' then\n      open = open - 1\n    end\n    if\
    \ open < 0 then\n      return false\n    end\n  end\n  return open == 0\nend",
  "  local res, _ = correct_bracketing_iter(brackets, nil, 0)\n  return res\nend",
  "    local count = 0\n    for i = 1, #brackets do\n        local br = brackets:sub(i,\
    \ i)\n        if br == '<' then\n            count = count + 1\n        elseif\
    \ br == '>' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "    -- *** insert your code here ***\n    local bracketed = {}\n \
    \   local max = 1\n    for i = 1, #brackets do\n        bracketed[i] = string.sub(brackets,\
    \ i, i)\n        if bracketed[i] == '<' then\n            max = max + 1\n    \
    \    elseif bracketed[i] == '>' then\n            max = max - 1\n        end\n\
    \        if max == 0 then\n            return false\n        end\n    end\n  \
    \  if max ~= 1 then\n        return false\n    end\n    return true\nend", " \
    \ return #brackets%2 == 0\nend", "    local stack = Stack()\n    for char in brackets:gmatch('.')\
    \ do\n        if char == '<' then\n            stack:push(char)\n        elseif\
    \ char == '>' then\n            if stack:is_empty() then\n                return\
    \ false\n            else\n                stack:pop()\n            end\n    \
    \    end\n    end\n    return stack:is_empty()\nend", "  return brackets:count('<')\
    \ == brackets:count('>')\nend", "    local stack = {}\n    for bracket in brackets:gmatch(\"\
    .\") do\n        if bracket == \"<\" then\n            table.insert(stack, \"\
    <\")\n        elseif bracket == \">\" then\n            if #stack == 0 then\n\
    \                return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", '    local
    i = 1', "  local stack = {}\n  for i = 1, #brackets do\n    local b = brackets:sub(i,\
    \ i)\n    if b == '<' then\n      table.insert(stack, b)\n    elseif b == '>'\
    \ then\n      local x = table.remove(stack)\n      if not x then return false\
    \ end\n    end\n  end\n  return #stack == 0\nend", "  local found_end = false\n\
    \  local brackets_count = 0\n  for i=1, #brackets do\n    local b = brackets:sub(i,i)\n\
    \    if b == '<' then\n      brackets_count = brackets_count + 1\n    elseif b\
    \ == '>' then\n      brackets_count = brackets_count - 1\n      if brackets_count\
    \ < 0 then\n        return false\n      end\n      found_end = true\n    end\n\
    \  end\n  return found_end and brackets_count == 0\nend", "    local counter =\
    \ 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == '<' then\n\
    \            counter = counter + 1\n        elseif brackets:sub(i, i) == '>' then\n\
    \            counter = counter - 1\n        end\n        if counter < 0 then\n\
    \            return false\n        end\n    end\n    return counter == 0\nend",
  "    local counts = {[\">\"] = 0, [\"<\"] = 0}\n    for i = 1, #brackets do\n  \
    \      counts[brackets:sub(i, i)] = counts[brackets:sub(i, i)] + 1\n    end\n\
    \    return counts[\">\"] == counts[\"<\"]\nend", "  local left = 0\n  for bracket\
    \ in brackets:gmatch('.') do\n    if bracket == '<' then\n      left = left +\
    \ 1\n    elseif bracket == '>' then\n      left = left - 1\n    end\n    if left\
    \ < 0 then\n      return false\n    end\n  end\n  return left == 0\nend", "\t\
    local count = 0\n\tfor c in brackets:gmatch\".\" do\n\t\tif c == '<' then\n\t\t\
    \tcount = count + 1\n\t\telseif c == '>' then\n\t\t\tcount = count - 1\n\t\t\t\
    if count < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn count\
    \ == 0\nend", "  local n,m = 0,0\n  for char in brackets:gmatch(\".\") do\n  \
    \  if char == '<' then\n      n = n + 1\n    elseif char == '>' then\n      m\
    \ = m + 1\n    end\n  end\n  return n == m\nend", "    local i = 0\n    for k\
    \ = 1, brackets:len() do\n        if brackets:sub(k, k) == '<' then\n        \
    \    i = i + 1\n        else\n            i = i - 1\n        end\n        if i\
    \ < 0 then\n            return false\n        end\n    end\n    return i == 0\n\
    end", "  local stack = List.new()\n  for x in brackets:gmatch('.') do\n    if\
    \ x == '<' then\n      stack:push(x)\n    elseif x == '>' then\n      if stack:pop()\
    \ == nil then\n        return false\n      end\n    end\n  end\n  return stack:length()\
    \ == 0\nend", "  local stack = Stack:new()\n  for _, bracket in ipairs(split(brackets))\
    \ do\n    if bracket == '<' then\n      stack:push(bracket)\n    elseif bracket\
    \ == '>' then\n      if stack:pop() == nil then\n        return false\n      end\n\
    \    end\n  end\n  return stack:is_empty()\nend", "  local count = 0\n  for i\
    \ = 1, string.len(brackets) do\n    local c = string.sub(brackets, i, i)\n   \
    \ if c == '<' then\n      count = count + 1\n    elseif c == '>' then\n      count\
    \ = count - 1\n    end\n    if count < 0 then\n      return false\n    end\n \
    \ end\n  return count == 0\nend", "\tlocal function helper(brackets, bracket_count)\n\
    \t\tlocal first_char = brackets:sub(1, 1)\n\t\tlocal rest = brackets:sub(2)\n\t\
    \tif first_char == '<' then\n\t\t\treturn helper(rest, bracket_count + 1)\n\t\t\
    elseif first_char == '>' then\n\t\t\tif bracket_count == 0 then\n\t\t\t\treturn\
    \ false\n\t\t\telse\n\t\t\t\treturn helper(rest, bracket_count - 1)\n\t\t\tend\n\
    \t\telse\n\t\t\treturn bracket_count == 0\n\t\tend\n\tend\n\treturn helper(brackets,\
    \ 0)\nend", "    local bracket_stack = {}\n    for i = 1, #brackets do\n     \
    \   local bracket = brackets:sub(i, i)\n        if bracket == '<' then\n     \
    \       bracket_stack[#bracket_stack + 1] = bracket\n        elseif bracket ==\
    \ '>' then\n            if #bracket_stack == 0 then\n                return false\n\
    \            end\n            bracket_stack[#bracket_stack] = nil\n        end\n\
    \    end\n    return #bracket_stack == 0\nend", "\tlocal unclosed_open_count =\
    \ 0\n\tfor bracket in brackets:gmatch('.') do\n\t\tif bracket == '<' then\n\t\t\
    \tunclosed_open_count = unclosed_open_count + 1\n\t\telseif bracket == '>' then\n\
    \t\t\tunclosed_open_count = unclosed_open_count - 1\n\t\t\tif unclosed_open_count\
    \ < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn unclosed_open_count\
    \ == 0\nend", "  -- If a string contains any '<' or '>' characters, it must contain\
    \ an equal\n  -- number of each, and that number must be even.\n  return not brackets:find('[<>]')\
    \ or brackets:count('<') == brackets:count('>') and brackets:count('<') % 2 ==\
    \ 0\nend", "  return brackets:count('<') == brackets:count('>')\nend", "\tlocal\
    \ count = 0\n\tfor i = 1, string.len(brackets) do\n\t\tif string.sub(brackets,\
    \ i, i) == '<' then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\tcount = count -\
    \ 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ count == 0\nend", "  local nbrack = 0\n  for b in brackets:gmatch('.') do\n\
    \    if b == '<' then\n      nbrack = nbrack + 1\n    elseif b == '>' then\n \
    \     nbrack = nbrack - 1\n    end\n    if nbrack < 0 then\n      return false\n\
    \    end\n  end\n  return nbrack == 0\nend", "  return string.find(brackets, \"\
    ^<+>*$\") and true or false\nend", "    local count = 0\n    for c in brackets:gmatch('.')\
    \ do\n        if c == '<' then\n            count = count + 1\n        elseif\
    \ c == '>' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "    assert(type(brackets) == 'string')\n    local stack = {}\n   \
    \ for i=1, #brackets do\n        local current = brackets:sub(i,i)\n        if\
    \ current == '<' then\n            table.insert(stack, i)\n        elseif current\
    \ == '>' then\n            if #stack == 0 then\n                return false\n\
    \            else\n                table.remove(stack)\n            end\n    \
    \    else\n            assert(false)\n        end\n    end\n    return #stack\
    \ == 0\nend", "\tlocal n = 0\n\tfor c in brackets:gmatch(\".\") do\n\t\tif c ==\
    \ \"<\" then\n\t\t\tn = n + 1\n\t\telseif c == \">\" then\n\t\t\tn = n - 1\n\t\
    \tend\n\t\tif n < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn n == 0\n\
    end", "\tlocal opening_brackets = 0\n\tfor c in brackets:gmatch('.') do\n\t\t\
    if c == '<' then\n\t\t\topening_brackets = opening_brackets + 1\n\t\telseif c\
    \ == '>' then\n\t\t\topening_brackets = opening_brackets - 1\n\t\tend\n\t\tif\
    \ opening_brackets < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn opening_brackets\
    \ == 0\nend", "    local open = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '<' then\n            open = open + 1\n        else\n            open\
    \ = open - 1\n        end\n        if open < 0 then\n            return false\n\
    \        end\n    end\n    return open == 0\nend", "  local stack = Stack()\n\
    \  for i=1,#brackets do\n    local b = brackets:sub(i,i)\n    if b == '<' then\n\
    \      stack:push(b)\n    elseif b == '>' then\n      if stack:pop() == nil then\n\
    \        return false\n      end\n    end\n  end\n  return stack:is_empty()\n\
    end", "\tlocal n = 0\n\tfor ch in brackets:gmatch(\".\") do\n\t\tif ch == \"<\"\
    \ then\n\t\t\tn = n + 1\n\t\telseif ch == \">\" then\n\t\t\tn = n - 1\n\t\tend\n\
    \t\tif n < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn n == 0\nend",
  "\tlocal depth = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) == '<'\
    \ then\n\t\t\tdepth = depth + 1\n\t\telseif brackets:sub(i, i) == '>' then\n\t\
    \t\tdepth = depth - 1\n\t\tend\n\t\tif depth < 0 then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn depth == 0\nend", "  local count = 0\n  for i = 1, #brackets\
    \ do\n    local char = brackets:sub(i, i)\n    if char == '<' then\n      count\
    \ = count + 1\n    elseif char == '>' then\n      count = count - 1\n    end\n\
    \    if count < 0 then\n      return false\n    end\n  end\n  return count ==\
    \ 0\nend", "  local open_brackets = 0\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == '<' then\n      open_brackets = open_brackets + 1\n    else\n      open_brackets\
    \ = open_brackets - 1\n    end\n    if open_brackets < 0 then\n      return false\n\
    \    end\n  end\n  return open_brackets == 0\nend", "    local stack = {}\n  \
    \  for i = 1, #brackets do\n        local bracket = brackets:sub(i, i)\n     \
    \   if bracket == '<' then\n            table.insert(stack, bracket)\n       \
    \ elseif bracket == '>' then\n            if #stack == 0 then\n              \
    \  return false\n            else\n                table.remove(stack)\n     \
    \       end\n        end\n    end\n    return #stack == 0\nend", "  local depth\
    \ = 0\n  for c in brackets:gmatch(\".\") do\n    if c == \"<\" then\n      depth\
    \ = depth + 1\n    elseif c == \">\" then\n      depth = depth - 1\n    end\n\
    \    if depth < 0 then\n      return false\n    end\n  end\n  return depth ==\
    \ 0\nend", "    -- TODO\n    local index = 0\n    for i = 1, string.len(brackets)\
    \ do\n        if string.sub(brackets, i, i) == '<' then\n            index = index\
    \ + 1\n        else\n            index = index - 1\n        end\n        if index\
    \ < 0 then\n            return false\n        end\n    end\n    if index ~= 0\
    \ then\n        return false\n    end\n    return true\nend", "  local function\
    \ correct_bracketing_helper(chars, count)\n    -- chars is the string of brackets\
    \ we have left to check.\n    -- count is the number of unmatched opening brackets\
    \ seen so far.\n    if count < 0 then\n      -- We've seen too many closing brackets.\n\
    \      return false\n    elseif string.len(chars) == 0 then\n      -- We're done\
    \ checking.  Are there any unmatched opening brackets?\n      return count ==\
    \ 0\n    else\n      -- Check the next bracket.\n      local char = string.sub(chars,\
    \ 1, 1)\n      if char == '<' then\n        return correct_bracketing_helper(string.sub(chars,\
    \ 2), count + 1)\n      elseif char == '>' then\n        return correct_bracketing_helper(string.sub(chars,\
    \ 2), count - 1)\n      else\n        error('Bad bracket: ' .. char)\n      end\n\
    \    end\n  end\n  return correct_bracketing_helper(brackets, 0)\nend", "    return\
    \ #brackets % 2 == 0 and brackets:gsub('<>', '') == ''\nend", "\tlocal open =\
    \ 0\n\tfor c in brackets:gmatch('.') do\n\t\tif c == '<' then\n\t\t\topen = open\
    \ + 1\n\t\telseif c == '>' then\n\t\t\topen = open - 1\n\t\t\tif open < 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn open == 0\nend", " \
    \ local stack = Stack()\n  local result = true\n  for i = 1, #brackets do\n  \
    \  local bracket = brackets:sub(i, i)\n    if bracket == '<' then\n      stack:push(bracket)\n\
    \    else\n      if stack:is_empty() then\n        result = false\n        break\n\
    \      else\n        stack:pop()\n      end\n    end\n  end\n  return result and\
    \ stack:is_empty()\nend", "    local bracket_stack = Stack()\n    for c in brackets:gmatch('.')\
    \ do\n        if c == '<' then\n            bracket_stack:push(c)\n        elseif\
    \ c == '>' then\n            if bracket_stack:is_empty() then\n              \
    \  return false\n            else\n                bracket_stack:pop()\n     \
    \       end\n        end\n    end\n    return bracket_stack:is_empty()\nend",
  "    local s = stack()\n    for i = 1, #brackets do\n        local b = brackets:sub(i,\
    \ i)\n        if b == '<' then\n            s:push(b)\n        elseif b == '>'\
    \ then\n            if s:is_empty() then\n                return false\n     \
    \       else\n                s:pop()\n            end\n        end\n    end\n\
    \    return s:is_empty()\nend", "    local stack = {}\n    for c in brackets:gmatch'.'\
    \ do\n        if c == '<' then\n            stack[#stack+1] = c\n        elseif\
    \ c == '>' then\n            if #stack == 0 then\n                return false\n\
    \            end\n            stack[#stack] = nil\n        end\n    end\n    return\
    \ #stack == 0\nend", "  local n = 0\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == '<' then\n      n = n + 1\n    else\n      n = n - 1\n    end\n    if\
    \ n < 0 then\n      return false\n    end\n  end\n  return n == 0\nend", "\tlocal\
    \ stack = \"\"\n\tfor i = 1, brackets:len() do\n\t\tif brackets:sub(i, i) == \"\
    <\" then\n\t\t\tstack = stack .. \"<\"\n\t\telseif brackets:sub(i, i) == \">\"\
    \ then\n\t\t\tif stack:len() == 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\
    \t\tstack = stack:sub(1, stack:len() - 1)\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ stack:len() == 0\nend", "  local bs = {}\n  for c in brackets:gmatch('.') do\n\
    \    local bc = table.remove(bs)\n    if c == '<' then\n      table.insert(bs,\
    \ c)\n    elseif c == '>' then\n      if bc ~= '<' then\n        return false\n\
    \      end\n    end\n  end\n  return #bs == 0\nend", "    local stack = Stack:new()\n\
    \    for i = 1, #brackets do\n        local ch = brackets:sub(i, i)\n        if\
    \ ch == '<' then\n            stack:push(ch)\n        elseif ch == '>' then\n\
    \            if stack:empty() then\n                return false\n           \
    \ else\n                stack:pop()\n            end\n        end\n    end\n \
    \   return stack:empty()\nend", "\tlocal open = 0\n\tfor b in brackets:gmatch(\"\
    .\") do\n\t\tif b == \"<\" then\n\t\t\topen = open + 1\n\t\telseif b == \">\"\
    \ then\n\t\t\topen = open - 1\n\t\t\tif open < 0 then\n\t\t\t\treturn false\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn open == 0\nend", "    if #brackets % 2 ~= 0\
    \ then return false end\n    local current_bracket = ''\n    for i = 1, #brackets\
    \ do\n        local b = brackets:sub(i, i)\n        if b == '<' then\n       \
    \     current_bracket = current_bracket .. b\n        elseif b == '>' then\n \
    \           if current_bracket == '' then return false end\n            current_bracket\
    \ = current_bracket:sub(1, #current_bracket - 1)\n        end\n    end\n    return\
    \ current_bracket == ''\nend", "\tbrackets = brackets:gsub('<>', '')\n\twhile\
    \ brackets:find('><') do\n\t\tbrackets = brackets:gsub('><', '')\n\tend\n\treturn\
    \ brackets == ''\nend", "  local count = 0\n  for i = 1, #brackets do\n    if\
    \ brackets:sub(i, i) == '<' then\n      count = count + 1\n    else\n      count\
    \ = count - 1\n    end\n    if count < 0 then\n      return false\n    end\n \
    \ end\n  return count == 0\nend", "  local stack = Stack:new()\n  for i=1,string.len(brackets)\
    \ do\n    local b = string.sub(brackets, i, i)\n    if b == '<' then\n      stack:push(b)\n\
    \    elseif b == '>' then\n      if stack:is_empty() then\n        return false\n\
    \      else\n        stack:pop()\n      end\n    end\n  end\n  return stack:is_empty()\n\
    end", "  local function helper(open, close, i)\n    if i > #brackets then\n  \
    \    return close == open\n    elseif brackets:sub(i, i) == '<' then\n      return\
    \ helper(open + 1, close, i + 1)\n    elseif brackets:sub(i, i) == '>' then\n\
    \      return close < open and helper(open, close + 1, i + 1)\n    end\n  end\n\
    \  return helper(0, 0, 1)\nend", "    local len = brackets:len()\n    if len %\
    \ 2 ~= 0 then\n        return false\n    end\n    local stack = Stack()\n    for\
    \ idx = 1, len do\n        local ch = brackets:sub(idx, idx)\n        if ch ==\
    \ '<' then\n            stack:push(ch)\n        elseif ch == '>' then\n      \
    \      if stack:empty() then\n                return false\n            end\n\
    \            stack:pop()\n        end\n    end\n    return stack:empty()\nend",
  "    -- transform the input string into a list with only \"(\" and \")\"\n    local\
    \ stack = {}\n    for bracket in brackets:gmatch('.') do\n        if bracket ==\
    \ '<' then\n            table.insert(stack, '(')\n        elseif bracket == '>'\
    \ then\n            if #stack == 0 then\n                return false\n      \
    \      end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend", "\tlocal count = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i,\
    \ i) == '<' then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\tcount = count - 1\n\
    \t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn count\
    \ == 0\nend", "    if brackets == '' then\n        return true\n    elseif brackets:sub(1,1)\
    \ == '<' then\n        local end_pos = brackets:find('>')\n        if end_pos\
    \ == nil then\n            return false\n        else\n            return correct_bracketing(brackets:sub(end_pos+1))\n\
    \        end\n    else\n        return false\n    end\nend", "  if brackets:match('^[<>]+$')\
    \ == nil then\n    error(string.format('\"%s\" is not a string of brackets', brackets))\n\
    \  end\n  local left = 0\n  for c in brackets:gmatch('.') do\n    if c == '<'\
    \ then\n      left = left + 1\n    else\n      left = left - 1\n    end\n    if\
    \ left < 0 then\n      return false\n    end\n  end\n  return left == 0\nend",
  "  local level = 0\n  for bracket in brackets:gmatch('.') do\n    if bracket ==\
    \ '<' then\n      level = level + 1\n    elseif bracket == '>' then\n      level\
    \ = level - 1\n    end\n    if level < 0 then\n      return false\n    end\n \
    \ end\n  return level == 0\nend", "  local open_count = 0\n  for char in brackets:gmatch('.')\
    \ do\n    if char == '<' then\n      open_count = open_count + 1\n    elseif char\
    \ == '>' then\n      open_count = open_count - 1\n    end\n    if open_count <\
    \ 0 then\n      return false\n    end\n  end\n  return open_count == 0\nend",
  "\tlocal count = 0\n\tfor c in brackets:gmatch(\".\") do\n\t\tif c == \"<\" then\n\
    \t\t\tcount = count + 1\n\t\telseif c == \">\" then\n\t\t\tcount = count - 1\n\
    \t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn count\
    \ == 0\nend", "    -- need to track the number of unclosed brackets.\n    -- when\
    \ '<' then increase.\n    -- when '>' then decrease.\n    -- if negative then\
    \ too many closing brackets.\n    -- if positive then too many opening brackets.\n\
    \    local opened = 0\n    for b in brackets:gmatch(\".\") do\n        if b ==\
    \ '<' then\n            opened = opened + 1\n        elseif b == '>' then\n  \
    \          opened = opened - 1\n        end\n        if opened < 0 then\n    \
    \        return false\n        end\n    end\n    return opened == 0\nend", " \
    \ local b = 0\n  for c in brackets:gmatch\".\" do\n    if c == '<' then\n    \
    \  b = b + 1\n    elseif c == '>' then\n      b = b - 1\n    end\n    if b < 0\
    \ then\n      return false\n    end\n  end\n  return b == 0\nend", "    local\
    \ count = 0\n    for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n\
    \        if c == '<' then\n            count = count + 1\n        elseif c ==\
    \ '>' then\n            count = count - 1\n        end\n        if count < 0 then\n\
    \            return false\n        end\n    end\n    return count == 0\nend",
  "  local stack = {}\n  for i=1, #brackets do\n    local bracket = brackets:sub(i,i)\n\
    \    if bracket == '<' then\n      stack[#stack+1] = '<'\n    elseif bracket ==\
    \ '>' then\n      if #stack == 0 then\n        return false\n      else\n    \
    \    stack[#stack] = nil\n      end\n    end\n  end\n  return #stack == 0\nend",
  "    local stack = Stack:new()\n    for _, bracket in ipairs(brackets:split(\"\"\
    )) do\n        if bracket == \"<\" then\n            stack:push(\"<\")\n     \
    \   elseif bracket == \">\" then\n            if stack:empty() then\n        \
    \        return false\n            else\n                stack:pop()\n       \
    \     end\n        end\n    end\n    return stack:empty()\nend", "\tlocal count\
    \ = 0\n\tfor i=1, #brackets do\n\t\tif brackets:sub(i,i) == '<' then\n\t\t\tcount\
    \ = count + 1\n\t\telseif brackets:sub(i,i) == '>' then\n\t\t\tcount = count -\
    \ 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ count == 0\nend", "    local count = 0\n    for i = 1, #brackets do\n      \
    \  local ch = brackets:sub(i, i)\n        if ch == '<' then\n            count\
    \ = count + 1\n        elseif ch == '>' then\n            count = count - 1\n\
    \        end\n        if count < 0 then\n            return false\n        end\n\
    \    end\n    return count == 0\nend", "  local level = 0\n  for b in brackets:gmatch\"\
    .\" do\n    if b == \"<\" then\n      level = level + 1\n    elseif b == \">\"\
    \ then\n      level = level - 1\n    end\n    if level < 0 then\n      return\
    \ false\n    end\n  end\n  return level == 0\nend", "  local parens = 0\n  for\
    \ i = 1, #brackets do\n    local bracket = brackets:sub(i, i)\n    if bracket\
    \ == '<' then\n      parens = parens + 1\n    elseif bracket == '>' then\n   \
    \   parens = parens - 1\n    end\n    if parens < 0 then\n      return false\n\
    \    end\n  end\n  return parens == 0\nend", "    local depth = 0\n    for c in\
    \ brackets:gmatch('.') do\n        if c == '<' then\n            depth = depth\
    \ + 1\n        elseif c == '>' then\n            depth = depth - 1\n        end\n\
    \        if depth < 0 then\n            return false\n        end\n    end\n \
    \   return depth == 0\nend", "    -- TODO: Write a recursive function to check\
    \ if the brackets are correct.\n    -- Check if the string has no opening brackets.\n\
    \    if brackets:len() == 0 then\n        return true\n    end\n    -- Check if\
    \ the first bracket is an opening bracket.\n    if string.sub(brackets, 1, 1)\
    \ == '<' then\n        -- Check if the rest of the string is a closing bracket.\n\
    \        if string.sub(brackets, 2, 2) == '>' then\n            -- Check if the\
    \ rest of the string has correct bracketing.\n            return correct_bracketing(string.sub(brackets,\
    \ 3))\n        else\n            -- Otherwise, the string isn't correctly bracketed.\n\
    \            return false\n        end\n    else\n        -- The string isn't\
    \ correctly bracketed.\n        return false\n    end\nend", "  local j, num_brackets\
    \ = 0, 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i) == '<' then\n \
    \     num_brackets = num_brackets + 1\n    elseif brackets:sub(i, i) == '>' then\n\
    \      num_brackets = num_brackets - 1\n    end\n    if num_brackets < 0 then\
    \ return false end\n  end\n  return num_brackets == 0\nend", "  local stack =\
    \ Stack()\n  for i=1,#brackets do\n    local ch = brackets:sub(i,i)\n    if ch\
    \ == '<' then\n      stack:push(ch)\n    else\n      if stack:top() == '<' then\n\
    \        stack:pop()\n      else\n        return false\n      end\n    end\n \
    \ end\n  return stack:is_empty()\nend", "    local open = 0\n    for bracket in\
    \ brackets:gmatch(\".\") do\n        if bracket == \"<\" then\n            open\
    \ = open + 1\n        elseif bracket == \">\" then\n            open = open -\
    \ 1\n        end\n        if open < 0 then\n            return false\n       \
    \ end\n    end\n    return open == 0\nend", "  return brackets:gsub('[<>]','')\
    \ == ''\nend", "    local count = 0\n    for i = 1, #brackets do\n        local\
    \ c = brackets:sub(i, i)\n        if c == '<' then\n            count = count\
    \ + 1\n        elseif c == '>' then\n            count = count - 1\n        end\n\
    \        if count < 0 then\n            return false\n        end\n    end\n \
    \   return count == 0\nend", "  brackets = brackets:gsub('<<', '<')\n  brackets\
    \ = brackets:gsub('>>', '>')\n  brackets = brackets:gsub('><', '')\n  return brackets\
    \ == ''\nend", "    local stack = Stack()\n    for c in brackets:gmatch(\".\"\
    ) do\n        if c == \"<\" then\n            stack:push(c)\n        elseif c\
    \ == \">\" then\n            if stack:is_empty() then\n                return\
    \ false\n            else\n                stack:pop()\n            end\n    \
    \    end\n    end\n    return stack:is_empty()\nend", "  local open_brackets =\
    \ 0\n  for i=1,#brackets do\n    if brackets:sub(i,i) == '<' then\n      open_brackets\
    \ = open_brackets + 1\n    elseif brackets:sub(i,i) == '>' then\n      open_brackets\
    \ = open_brackets - 1\n    end\n    if open_brackets < 0 then\n      return false\n\
    \    end\n  end\n  return open_brackets == 0\nend", "  local count = 0\n  for\
    \ i = 1, #brackets do\n    if brackets:sub(i, i) == '<' then\n      count = count\
    \ + 1\n    else\n      count = count - 1\n    end\n    if count < 0 then\n   \
    \   return false\n    end\n  end\n  return count == 0\nend", '  local balance
    = 0', '    local open = 0', "\tlocal function get_closing_bracket(index)\n\t\t\
    if brackets:sub(index, index) == '<' then\n\t\t\treturn '>'\n\t\telse\n\t\t\t\
    return '<'\n\t\tend\n\tend", "    local level = 0\n    for i = 1, #brackets do\n\
    \        if brackets:sub(i, i) == '<' then\n            level = level + 1\n  \
    \      elseif brackets:sub(i, i) == '>' then\n            level = level - 1\n\
    \        end\n        if level < 0 then\n            return false\n        end\n\
    \    end\n    return level == 0\nend", "  local count = 0\n  for c in brackets:gmatch'.'\
    \ do\n    if c == '<' then\n      count = count + 1\n    elseif c == '>' then\n\
    \      count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend", "\tlocal count = 0\n\tfor i = 1, #brackets\
    \ do\n\t\tif brackets:sub(i, i) == '<' then\n\t\t\tcount = count + 1\n\t\telse\n\
    \t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\
    \tend\n\tend\n\treturn count == 0\nend", "  local bracket_count = 0\n  for i =\
    \ 1, #brackets do\n    local bracket = brackets:sub(i, i)\n    if bracket == '<'\
    \ then\n      bracket_count = bracket_count + 1\n    elseif bracket == '>' then\n\
    \      bracket_count = bracket_count - 1\n    end\n    if bracket_count < 0 then\n\
    \      return false\n    end\n  end\n  return bracket_count == 0\nend", "  local\
    \ brackets_open = 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i) == '<'\
    \ then\n      brackets_open = brackets_open + 1\n    else\n      brackets_open\
    \ = brackets_open - 1\n    end\n    if brackets_open < 0 then\n      return false\n\
    \    end\n  end\n  return brackets_open == 0\nend", "    local counter = 0\n \
    \   for c in brackets:gmatch('.') do\n        if c == '<' then\n            counter\
    \ = counter + 1\n        elseif c == '>' then\n            counter = counter -\
    \ 1\n        end\n        if counter < 0 then\n            return false\n    \
    \    end\n    end\n    return counter == 0\nend", "  local n_open = 0 -- the number\
    \ of open brackets\n  for i = 1, #brackets do\n    if brackets:sub(i, i) == '<'\
    \ then\n      n_open = n_open + 1\n    elseif brackets:sub(i, i) == '>' then\n\
    \      n_open = n_open - 1\n    end\n    if n_open < 0 then\n      return false\n\
    \    end\n  end\n  return n_open == 0\nend", "\tlocal count = 0\n\tfor i = 1,\
    \ #brackets do\n\t\tif brackets:sub(i, i) == '<' then\n\t\t\tcount = count + 1\n\
    \t\telse\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn count == 0\nend", "  local stack = {}\n  for\
    \ c in brackets:gmatch('.') do\n    if c == '<' then\n      table.insert(stack,\
    \ c)\n    elseif c == '>' then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend", "    local count = 0\n    for i=1, #brackets do\n       \
    \ if brackets:sub(i,i) == '<' then\n            count = count + 1\n        else\n\
    \            count = count - 1\n        end\n        if count < 0 then\n     \
    \       return false\n        end\n    end\n    return count == 0\nend", "   \
    \ local bracket_stack = Stack()\n    for bracket in brackets:gmatch(\".\") do\n\
    \        if bracket == \"<\" then\n            bracket_stack:push(bracket)\n \
    \       elseif bracket == \">\" then\n            local popped = bracket_stack:pop()\n\
    \            if popped == nil then\n                return false\n           \
    \ end\n        end\n    end\n    return bracket_stack:is_empty()\nend", "\tlocal\
    \ count = 0\n\tfor c in brackets:gmatch('.') do\n\t\tif c == '<' then\n\t\t\t\
    count = count + 1\n\t\telseif c == '>' then\n\t\t\tcount = count - 1\n\t\tend\n\
    \t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn count == 0\n\
    end", "  return nil\nend", "  local stack = {}\n  for char in brackets:gmatch('.')\
    \ do\n    if char == '<' then\n      stack[#stack + 1] = char\n    elseif char\
    \ == '>' then\n      if #stack > 0 then\n        table.remove(stack)\n      else\n\
    \        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
  "    local c\n    local b = 0\n    for i = 1, #brackets do\n        c = brackets:sub(i,\
    \ i)\n        if c == '<' then\n            b = b + 1\n        elseif c == '>'\
    \ then\n            b = b - 1\n        end\n        if b < 0 then\n          \
    \  return false\n        end\n    end\n    return b == 0\nend", "\tlocal left_brackets\
    \ = {}\n\tfor bracket in brackets:gmatch(\".\") do\n\t\tif bracket == \"<\" then\n\
    \t\t\ttable.insert(left_brackets, 1, bracket)\n\t\telseif bracket == \">\" then\n\
    \t\t\ttable.remove(left_brackets, 1)\n\t\tend\n\tend\n\treturn #left_brackets\
    \ == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
