name: HumanEval_56_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
  -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
  -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
  \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
  \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
  \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
  \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local left_brackets = {}\n  for i = 1, #brackets do\n    local bracket\
    \ = brackets:sub(i, i)\n    if bracket == '<' then\n      table.insert(left_brackets,\
    \ bracket)\n    elseif bracket == '>' then\n      local left_bracket = table.remove(left_brackets)\n\
    \      if not left_bracket then\n        return false\n      end\n    end\n  end\n\
    \  return #left_brackets == 0\nend", "  -- TODO\n  -- return false\n  -- You can\
    \ write this function in about 4 lines of code. (Feel free to remove\n  -- this\
    \ comment when you do.)\n  count=0\n  for i in brackets:gmatch(\".\") do\n   \
    \ if(i=='<')then\n      count=count+1\n    elseif(i=='>')then\n      count=count-1\n\
    \    end\n    if(count<0)then\n      return false\n    end\n  end\n  if(count~=0)then\n\
    \    return false\n  end\n  return true\nend", "    local depth = 0\n    for i=1,#brackets\
    \ do\n        if brackets:sub(i,i) == '<' then\n            depth = depth + 1\n\
    \        elseif brackets:sub(i,i) == '>' then\n            depth = depth - 1\n\
    \        end\n        if depth < 0 then\n            return false\n        end\n\
    \    end\n    return depth == 0\nend", "    local bracket_count = 0\n    for i\
    \ = 1, #brackets do\n        if brackets:sub(i, i) == '<' then\n            bracket_count\
    \ = bracket_count + 1\n        elseif brackets:sub(i, i) == '>' then\n       \
    \     bracket_count = bracket_count - 1\n        end\n        if bracket_count\
    \ < 0 then\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend", "\tlocal state = 0\n\tfor bracket in brackets:gmatch('.') do\n\t\
    \tif bracket == '<' then\n\t\t\tstate = state + 1\n\t\telseif bracket == '>' then\n\
    \t\t\tstate = state - 1\n\t\t\tif state < 0 then\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn state == 0\nend", "    local depth = 0\n    for\
    \ i = 1, string.len(brackets) do\n        local b = string.sub(brackets, i, i)\n\
    \        if b == '<' then\n            depth = depth + 1\n        elseif b ==\
    \ '>' then\n            depth = depth - 1\n        end\n        if depth < 0 then\n\
    \            return false\n        end\n    end\n    return depth == 0\nend",
  "  local n = 0\n  for c in brackets:gmatch(\".\") do\n    if c == \"<\" then\n \
    \     n = n + 1\n    elseif c == \">\" then\n      n = n - 1\n    end\n    if\
    \ n < 0 then\n      return false\n    end\n  end\n  return n == 0\nend", "\tlocal\
    \ open, close = 0, 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) ==\
    \ '<' then\n\t\t\topen = open + 1\n\t\telse\n\t\t\tclose = close + 1\n\t\tend\n\
    \t\tif close > open then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn open ==\
    \ close\nend", "  local level = 0\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == '<' then\n      level = level + 1\n    elseif brackets:sub(i, i) == '>'\
    \ then\n      level = level - 1\n    end\n    if level < 0 then\n      return\
    \ false\n    end\n  end\n  return level == 0\nend", "    local bracket_count =\
    \ 0\n    for char in brackets:gmatch\".\" do\n        if char == '<' then\n  \
    \          bracket_count = bracket_count + 1\n        elseif char == '>' then\n\
    \            bracket_count = bracket_count - 1\n        end\n        if bracket_count\
    \ < 0 then\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend", "  local floor = 0\n  for char in brackets:gmatch('.') do\n    if\
    \ char == '<' then\n      floor = floor + 1\n    elseif char == '>' then\n   \
    \   floor = floor - 1\n    end\n    if floor < 0 then\n      return false\n  \
    \  end\n  end\n  return floor == 0\nend", "    local n = 0\n    for b in brackets:gmatch('.')\
    \ do\n        if b == '<' then\n            n = n + 1\n        elseif b == '>'\
    \ then\n            n = n - 1\n        end\n        if n < 0 then\n          \
    \  return false\n        end\n    end\n    return n == 0\nend", "  -- check if\
    \ the string has even length\n  if brackets:len() % 2 ~= 0 then\n    return false\n\
    \  end", "\tlocal stack = {}\n\tfor i=1,#brackets do\n\t\tlocal b = brackets:sub(i,i)\n\
    \t\tif b == '<' then\n\t\t\ttable.insert(stack,b)\n\t\telseif b == '>' then\n\t\
    \t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\ttable.remove(stack)\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend", "    -- check for the easy\
    \ cases first\n    if brackets == '<' or brackets == '>' then\n        return\
    \ false\n    end\n    -- count how many opening and closing brackets we've seen\n\
    \    local opened = 0\n    local closed = 0\n    -- loop through the characters\
    \ in brackets\n    for c in brackets:gmatch\".\" do\n        -- keep track of\
    \ how many opening and closing brackets we've seen\n        if c == '<' then\n\
    \            opened = opened + 1\n        elseif c == '>' then\n            closed\
    \ = closed + 1\n        end\n        -- if we've seen more closing brackets than\
    \ opening ones,\n        -- we can never have enough, so return false\n      \
    \  if closed > opened then\n            return false\n        end\n    end\n \
    \   -- if we made it here, we have enough closing brackets and\n    -- we don't\
    \ have too many\n    return true\nend", "    local bracket_counter = 0\n    for\
    \ i = 1, #brackets do\n        if brackets:sub(i, i) == '<' then\n           \
    \ bracket_counter = bracket_counter + 1\n        elseif brackets:sub(i, i) ==\
    \ '>' then\n            bracket_counter = bracket_counter - 1\n        end\n \
    \       if bracket_counter < 0 then\n            return false\n        end\n \
    \   end\n    return bracket_counter == 0\nend", "  local num_open = 0\n  for c\
    \ in brackets:gmatch(\".\") do\n    if c == \"<\" then\n      num_open = num_open\
    \ + 1\n    elseif c == \">\" then\n      num_open = num_open - 1\n    end\n  \
    \  if num_open < 0 then\n      return false\n    end\n  end\n  return num_open\
    \ == 0\nend", "    local opened = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '<' then\n            opened = opened + 1\n        else\n            opened\
    \ = opened - 1\n        end\n        if opened < 0 then\n            return false\n\
    \        end\n    end\n    return opened == 0\nend", "  local paren_count = 0\n\
    \  for i = 1, string.len(brackets) do\n    local bracket = string.sub(brackets,\
    \ i, i)\n    if bracket == '<' then\n      paren_count = paren_count + 1\n   \
    \ elseif bracket == '>' then\n      paren_count = paren_count - 1\n    end\n \
    \   if paren_count < 0 then\n      return false\n    end\n  end\n  return paren_count\
    \ == 0\nend", "  -- TODO\n  local count = 0\n  for i=1,string.len(brackets) do\n\
    \    if brackets:sub(i,i) == '<' then\n      count = count + 1\n    elseif brackets:sub(i,i)\
    \ == '>' then\n      count = count - 1\n    end\n    if count < 0 then\n     \
    \ return false\n    end\n  end\n  if count == 0 then\n    return true\n  else\n\
    \    return false\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
