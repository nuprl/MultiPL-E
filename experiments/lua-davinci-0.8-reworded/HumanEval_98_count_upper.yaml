name: HumanEval_98_count_upper
language: lua
prompt: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
  -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
  -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
  \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
  \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
  \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local count = 0\n    for i=1, string.len(s) do\n        if s:sub(i,i):find('[AEIOU]')\
    \ and i % 2 == 0 then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "   local i = 0\n   for c in s:gmatch('.') do\n      if\
    \ c:match('[AEIOU]') and i % 2 == 0 then\n         i = i + 1\n      end\n   end\n\
    \   return i\nend", "    local count = 0\n    for i=1, #s do\n        local char\
    \ = s:sub(i, i)\n        if (i % 2 == 0) and (char == char:upper()) then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", " \
    \   local n = 0\n    for i = 1, #s, 2 do\n        if s:sub(i, i):match '%u' then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend", "    local i\
    \ = 0\n    local count = 0\n    for c in s:gmatch\".\" do\n        if i % 2 ==\
    \ 0 and c:find(\"[AEIOU]\") then\n            count = count + 1\n        end\n\
    \        i = i + 1\n    end\n    return count\nend", "    local result = 0\n \
    \   for i=1,string.len(s) do\n        if s:sub(i,i)==string.upper(s:sub(i,i))\
    \ and (i%2)==0 then\n            result = result + 1\n        end\n    end\n \
    \   return result\nend", "    local uppers = 0\n    for i, v in ipairs(s) do\n\
    \        if is_upper(v) and i % 2 == 0 then\n            uppers = uppers + 1\n\
    \        end\n    end\n    return uppers\nend", "    local n = 0\n    for i =\
    \ 1, #s, 2 do\n        if s:find('[AEIOU]', i, true) then\n            n = n +\
    \ 1\n        end\n    end\n    return n\nend", "  return -1\nend", "  local char_count\
    \ = 0\n  for i = 1, #s do\n    if s:sub(i, i):match('[AEIOU]') and (i % 2 == 0)\
    \ then\n      char_count = char_count + 1\n    end\n  end\n  return char_count\n\
    end", "   return -1\nend", "    local count = 0\n    for i = 1, #s do\n      \
    \  if (i % 2 == 0) and s:sub(i, i):match('[AEIOU]') then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend", "  local count = 0\n\
    \  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):upper() == s:sub(i, i)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ function is_upper(s)\n        return s == s:upper()\n    end\n    local function\
    \ is_vowel(s)\n        return string.find('aeiou', s)\n    end\n    local cnt\
    \ = 0\n    for i = 1, #s do\n        if (i % 2) == 0 and is_upper(s:sub(i, i))\
    \ and is_vowel(s:sub(i, i)) then\n            cnt = cnt + 1\n        end\n   \
    \ end\n    return cnt\nend", "  return 0\nend", "    local function not_upper(s)\n\
    \        return not s:find('%u')\n    end\n    return not_upper:pred() ^ s:gmatch('%u')\n\
    end", "    local n = 0\n    for i = 1, #s, 2 do\n        if s:sub(i, i):match('^[AEIOU]$')\
    \ then\n            n = n + 1\n        end\n    end\n    return n\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and is_upper(s, i)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local cnt = 0\n  for k,v in ipairs(s:gmatch('%a')) do\n    if v:find('[AEIOU]')\
    \ and k % 2 == 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
