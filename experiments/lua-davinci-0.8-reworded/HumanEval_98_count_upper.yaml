name: HumanEval_98_count_upper
language: lua
prompt: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
  -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
  -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
  \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
  \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
  \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local count = 0\n    for i=1, string.len(s) do\n        if s:sub(i,i):find('[AEIOU]')\
    \ and i % 2 == 0 then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "   local i = 0\n   for c in s:gmatch('.') do\n      if\
    \ c:match('[AEIOU]') and i % 2 == 0 then\n         i = i + 1\n      end\n   end\n\
    \   return i\nend", "    local count = 0\n    for i=1, #s do\n        local char\
    \ = s:sub(i, i)\n        if (i % 2 == 0) and (char == char:upper()) then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", " \
    \   local n = 0\n    for i = 1, #s, 2 do\n        if s:sub(i, i):match '%u' then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend", "    local i\
    \ = 0\n    local count = 0\n    for c in s:gmatch\".\" do\n        if i % 2 ==\
    \ 0 and c:find(\"[AEIOU]\") then\n            count = count + 1\n        end\n\
    \        i = i + 1\n    end\n    return count\nend", "    local result = 0\n \
    \   for i=1,string.len(s) do\n        if s:sub(i,i)==string.upper(s:sub(i,i))\
    \ and (i%2)==0 then\n            result = result + 1\n        end\n    end\n \
    \   return result\nend", "    local uppers = 0\n    for i, v in ipairs(s) do\n\
    \        if is_upper(v) and i % 2 == 0 then\n            uppers = uppers + 1\n\
    \        end\n    end\n    return uppers\nend", "    local n = 0\n    for i =\
    \ 1, #s, 2 do\n        if s:find('[AEIOU]', i, true) then\n            n = n +\
    \ 1\n        end\n    end\n    return n\nend", "  return -1\nend", "  local char_count\
    \ = 0\n  for i = 1, #s do\n    if s:sub(i, i):match('[AEIOU]') and (i % 2 == 0)\
    \ then\n      char_count = char_count + 1\n    end\n  end\n  return char_count\n\
    end", "   return -1\nend", "    local count = 0\n    for i = 1, #s do\n      \
    \  if (i % 2 == 0) and s:sub(i, i):match('[AEIOU]') then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend", "  local count = 0\n\
    \  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):upper() == s:sub(i, i)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ function is_upper(s)\n        return s == s:upper()\n    end\n    local function\
    \ is_vowel(s)\n        return string.find('aeiou', s)\n    end\n    local cnt\
    \ = 0\n    for i = 1, #s do\n        if (i % 2) == 0 and is_upper(s:sub(i, i))\
    \ and is_vowel(s:sub(i, i)) then\n            cnt = cnt + 1\n        end\n   \
    \ end\n    return cnt\nend", "  return 0\nend", "    local function not_upper(s)\n\
    \        return not s:find('%u')\n    end\n    return not_upper:pred() ^ s:gmatch('%u')\n\
    end", "    local n = 0\n    for i = 1, #s, 2 do\n        if s:sub(i, i):match('^[AEIOU]$')\
    \ then\n            n = n + 1\n        end\n    end\n    return n\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and is_upper(s, i)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local cnt = 0\n  for k,v in ipairs(s:gmatch('%a')) do\n    if v:find('[AEIOU]')\
    \ and k % 2 == 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend",
  "    local i, n = 0, 0\n    for c in s:gmatch'%a' do\n        if math.fmod(i, 2)\
    \ == 0 and c:upper() == c then\n            n = n + 1\n        end\n        i\
    \ = i + 1\n    end\n    return n\nend\nassert(count_upper('aBCdEf') == 1)\nassert(count_upper('abcdefg')\
    \ == 0)\nassert(count_upper('dBBE') == 0)", "    local count = 0\n    for i=1,#s\
    \ do\n        if (s:sub(i,i):match(\"[AEIOU]\") and i%2 == 0) then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s, i) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:match(\"^%u\") then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend", "  -- TODO: implement the\
    \ method\n  -- Please rename the variable s\n  local uppers = 0\n  for i = 2,\
    \ #s, 2 do\n    if string.match(s:sub(i, i), \"[AEIOU]\") then\n      uppers =\
    \ uppers + 1\n    end\n  end\n  return uppers\nend", "    local c = 0\n    for\
    \ i=1,#s,2 do\n        local letter = s:sub(i,i)\n        if is_upper(letter)\
    \ and is_vowel(letter) then\n            c = c + 1\n        end\n    end\n   \
    \ return c\nend", "    local count = 0\n    for i = 1, s:len() do\n        local\
    \ c = s:sub(i, i)\n        if i % 2 == 0 and c:match('[AEIOU]') then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if is_vowel(s:sub(i, i)) and i % 2\
    \ == 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local n = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if is_upper(c)\
    \ and is_even(i) then\n      n = n + 1\n    end\n  end\n  return n\nend\nassert(count_upper('aBCdEf')\
    \ == 1)\nassert(count_upper('abcdefg') == 0)\nassert(count_upper('dBBE') == 0)",
  "    return #s:gsub(\"[aeiou]\", \"\"):gsub(\"[AEIOU]\", \"\")\nend", "  return\
    \ #s:gsub('([AEIOU])([^AEIOU])', '%2'):gsub('(.[AEIOU])', '%1')\nend", "  if not\
    \ is_string(s) then\n    return nil, 'incorrect argument type'\n  end\n  local\
    \ count = 0\n  for i = 1, #s, 2 do\n    if s:sub(i, i):find('%u') then\n     \
    \ count = count + 1\n    end\n  end\n  return count\nend", "    local count =\
    \ 0\n    for i=1,#s do\n        if (i % 2 == 0) and s:sub(i,i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "\tlocal count = 0\n\tfor i = 1,#s do\n\t\tif i % 2 == 0 and s:sub(i,i):match('[AEIOU]')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local\
    \ n = 0\n  local i = 1\n  while i <= #s do\n    local c = s:sub(i, i)\n    if\
    \ is_vowel(c) and c == c:upper() then\n      n = n + 1\n    end\n    i = i + 2\n\
    \  end\n  return n\nend", "    local vowels = \"AEIOU\"\n    local even_vowels\
    \ = 0\n    for i = 1, s:len() do\n        local c = s:sub(i, i)\n        if i\
    \ % 2 == 0 and vowels:find(c) then\n            even_vowels = even_vowels + 1\n\
    \        end\n    end\n    return even_vowels\nend", "  local c = 0\n  for i =\
    \ 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n      c =\
    \ c + 1\n    end\n  end\n  return c\nend", "    local vowels = {a = true, e =\
    \ true, i = true, o = true, u = true}\n    local count = 0\n    for i = 1, #s,\
    \ 2 do\n        if vowels[s:sub(i, i):lower()] then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i = 1, s:len() do\n        local c = s:sub(i, i)\n        if is_upper(c)\
    \ and is_even(i) then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "    local count = 0\n    for i=1,#s do\n        if string.find(\"\
    AEIOU\", string.sub(s, i, i), 1, true) ~= nil and i % 2 == 0 then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend", "  local uppers\
    \ = 'AEIOU'\n  local num_uppers = 0\n  for i=1, #s do\n    if uppers:find(s:sub(i,i))\
    \ then\n      if math.fmod(i, 2) == 0 then\n        num_uppers = num_uppers +\
    \ 1\n      end\n    end\n  end\n  return num_uppers\nend", "    return 0\nend",
  "  s = s:lower()\n  local c = 0\n  for i = 2, #s, 2 do\n    if s:sub(i, i) == 'a'\
    \ or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i,\
    \ i) == 'u' then\n      c = c + 1\n    end\n  end\n  return c\nend", "    local\
    \ count = 0\n    local vowel_set = {['A'] = true, ['E'] = true, ['I'] = true,\
    \ ['O'] = true, ['U'] = true}\n    for i = 1, #s do\n        if i % 2 == 0 and\
    \ vowel_set[s:sub(i, i)] then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend", "  local num_upper = 0\n  for i=1, #s do\n   \
    \ if i % 2 == 0 and (s:sub(i,i) == 'A' or s:sub(i,i) == 'E' or s:sub(i,i) == 'I'\
    \ or s:sub(i,i) == 'O' or s:sub(i,i) == 'U') then\n      num_upper = num_upper\
    \ + 1\n    end\n  end\n  return num_upper\nend", "    -- body\n    local vowel\
    \ = \"AEIOU\"\n    local count = 0\n    for i=1,#s do\n        if i%2 == 0 and\
    \ vowel:find(s:sub(i,i)) then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend", "    local num = 0\n    for i = 1, #s do\n   \
    \     if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n            num = num\
    \ + 1\n        end\n    end\n    return num\nend", "    local even = string.gmatch(s,\
    \ \"%a\")\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n\
    \    for l in even do\n        if l == string.upper(l) then\n            for i,\
    \ v in ipairs(vowels) do\n                if l == v then\n                   \
    \ count = count + 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend", "    local n = 0\n    for i = 1, #s, 2 do\n        if\
    \ 'AEIOU'[s:sub(i, i)] then\n            n = n + 1\n        end\n    end\n   \
    \ return n\nend", "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and\
    \ s:sub(i, i):find('[AEIOU]') then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "   local n = 0\n   for i = 1, #s do\n      if i % 2 ==\
    \ 0 and is_upper(s, i) then\n         n = n + 1\n      end\n   end\n   return\
    \ n\nend", "    return s:gsub('[AEIOU]', ''):len()\nend", "  local cnt = 0\n \
    \ s:gsub(\".\", function(c)\n    if c:match(\"[AEIOU]\") and #c % 2 == 0 then\n\
    \      cnt = cnt + 1\n    end\n  end)\n  return cnt\nend", "\tlocal cnt = 0\n\t\
    local v = { a = true, e = true, i = true, o = true, u = true }\n\tfor i = 1, string.len(s),\
    \ 2 do\n\t\tlocal c = string.sub(s, i, i)\n\t\tif v[c] and string.upper(c) ==\
    \ c then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\nend", "  -- YOUR\
    \ CODE HERE\n  local num = 0\n  for i = 1, #s do\n    if s:sub(i,i) == 'A' or\
    \ s:sub(i,i) == 'E' or s:sub(i,i) == 'I' or s:sub(i,i) == 'O' or s:sub(i,i) ==\
    \ 'U' and i % 2 == 0 then\n      num = num + 1\n    end\n  end\n  return num\n\
    end", "    local upper = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_vowel(s:sub(i,\
    \ i)) and s:sub(i, i):isupper() then\n            upper = upper + 1\n        end\n\
    \    end\n    return upper\nend", "    local count = 0\n    for i = 1, string.len(s)\
    \ do\n        if i % 2 == 0 and string.match(s, \"[AEIOU]\", i) then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend", "    return\
    \ #(s:gsub('[^A-Ea-e]', ''))\nend", "   local count = 0\n   for i = 1, #s do\n\
    \      if ((i % 2 == 0) and (s:sub(i, i):match(\"[AEIOU]\"))) then\n         count\
    \ = count + 1\n      end\n   end\n   return count\nend", "    return 0\nend",
  "    local count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and (s:sub(i,\
    \ i):match('[AEIOU]')) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local a = 0\n    for i=1,#s do\n        if s:sub(i,i):upper()\
    \ == s:sub(i,i) and i%2==0 then\n            a = a + 1\n        end\n    end\n\
    \    return a\nend", "  local counter = 0\n  for i = 1, #s do\n    if (i % 2)\
    \ == 0 and (s:sub(i, i) == 'A' or s:sub(i, i) == 'E' or s:sub(i, i) == 'I' or\
    \ s:sub(i, i) == 'O' or s:sub(i, i) == 'U') then\n      counter = counter + 1\n\
    \    end\n  end\n  return counter\nend", "  local count = 0\n  local len = #s\n\
    \  for i = 1, len, 2 do\n    if string.match(s:sub(i, i), '[AEIOU]') then\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend", "    local result\
    \ = 0\n    local i = 0\n    while i < #s do\n        if is_vowel(s:sub(i, i))\
    \ and is_upper(s:sub(i, i)) then\n            result = result + 1\n        end\n\
    \        i = i + 2\n    end\n    return result\nend", "    local function is_vowel(c)\n\
    \        return c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U'\n   \
    \ end\n    local vowels = 0\n    for i = 1, #s, 2 do\n        if is_vowel(s:sub(i,\
    \ i)) then\n            vowels = vowels + 1\n        end\n    end\n    return\
    \ vowels\nend\nassert(count_upper('aBCdEf') == 1)\nassert(count_upper('abcdefg')\
    \ == 0)\nassert(count_upper('dBBE') == 0)", "   return string.gsub(s, \"[AEIOU]\"\
    , \"\"):gsub(\"%a\", \"\"):len()\nend", "   local count = 0\n   for i = 1, #s\
    \ do\n      if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n         count\
    \ = count + 1\n      end\n   end\n   return count\nend", "    return #s:gsub('[AEIOU]',\
    \ '')\nend", "  local count = 0\n  for i = 1, string.len(s) do\n    local char\
    \ = string.sub(s, i, i)\n    if string.find(upper_vowels, char) and (i % 2 ==\
    \ 0) then\n      count = count + 1\n    end\n  end\n  return count\nend", "  \
    \  local count = 0\n    for i = 1, #s do\n        if s:sub(i, i):find('[AEIOU]')\
    \ and (i % 2 == 0) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local vowels = 'AEIOU'\n  local counter = 0\n  for\
    \ i = 1, #s do\n    if i % 2 == 0 and vowels:find(s:sub(i, i), 1, true) then\n\
    \      counter = counter + 1\n    end\n  end\n  return counter\nend", "  return\
    \ count_if(s, is_upper_vowel)\nend", "    local count = 0\n    local s = s:upper()\n\
    \    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i) == 'A' then\n   \
    \         count = count + 1\n        elseif i % 2 == 0 and s:sub(i, i) == 'E'\
    \ then\n            count = count + 1\n        elseif i % 2 == 0 and s:sub(i,\
    \ i) == 'I' then\n            count = count + 1\n        elseif i % 2 == 0 and\
    \ s:sub(i, i) == 'O' then\n            count = count + 1\n        elseif i % 2\
    \ == 0 and s:sub(i, i) == 'U' then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  return string.gsub(s, '[AEIOUaeiou]', '')\n\
    end", "  -- TODO: Write your code here\n  -- hints:\n  -- 1. use s:lower() to\
    \ convert s to lowercase\n  -- 2. use string.byte('A') to get the byte value of\
    \ 'A'\n  -- 3. use string.byte(c) to get the byte value of character c\n  -- 4.\
    \ use string.char(b) to get the character of byte value b\n  -- 5. use string.len(s)\
    \ to get the length of a string\n  -- 6. use string.sub(s, i, j) to get a substring\
    \ of s\n  --    * Note that for this case, you should use string.sub(s, i, i)\
    \ \n  --      to get the character at index i.\n  -- 7. use string.find(s, c)\
    \ to find the first position of the character c\n  --    * Note that for this\
    \ case, you should use string.find(s, c, 1, true)\n  --      to get the case-insensitive\
    \ searching result\n  local t = s:lower()\n  local count = 0\n  for i = 1, string.len(s)\
    \ do\n    if i % 2 == 0 then\n      if string.byte(string.sub(s, i, i)) >= string.byte('A')\
    \ and\n         string.byte(string.sub(s, i, i)) <= string.byte('Z') then\n  \
    \      count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \ local n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):upper() ==\
    \ s:sub(i, i) then\n      n = n + 1\n    end\n  end\n  return n\nend", "  local\
    \ num_upper = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and (s:sub(i, i):find('[AEIOU]')\
    \ ~= nil) then\n      num_upper = num_upper + 1\n    end\n  end\n  return num_upper\n\
    end", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "\tlocal\
    \ vowel_upper_indices = {}\n\tfor i = 1, #s do\n\t\tif math.fmod(i, 2) == 0 and\
    \ is_vowel(s:sub(i, i)) then\n\t\t\ttable.insert(vowel_upper_indices, s:sub(i,\
    \ i))\n\t\tend\n\tend\n\treturn #vowel_upper_indices\nend", "\tlocal count = 0\n\
    \tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):find('[AEIOU]') then\n\t\
    \t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "\tlocal count =\
    \ 0\n\tfor i=1, #s do\n\t\tif(is_even(i) and is_vowel(s:sub(i,i)) and is_upper(s:sub(i,i)))\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and is_upper(s, i)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i=1,#s do\n    if is_upper(s, i) and is_even(i)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    return\
    \ reduce(\n        function(acc, c)\n            if (acc % 2 == 0) and c:match('^[AEIOU]$')\
    \ then\n                return acc + 1\n            else\n                return\
    \ acc\n            end\n        end,\n        0,\n        s:gmatch('.')\n    )\n\
    end", "  local count = 0\n  for i=1,#s do\n    if i % 2 == 0 and s:sub(i,i):upper()\
    \ == s:sub(i,i) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and s:match('[AEIOU]',\
    \ i) then\n      count = count + 1\n    end\n  end\n  return count\nend", "  \
    \  local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "\tlocal vowels = {['A'] = true, ['E'] = true, ['I'] = true, ['O'] = true,\
    \ ['U'] = true}\n\tlocal count = 0\n\tfor i = 1, #s, 2 do\n\t\tif vowels[s:sub(i,\
    \ i)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", " \
    \   -- TODO\nend", "  local count = 0\n  for i = 1, string.len(s) do\n    if i\
    \ % 2 == 0 and string.find(s:sub(i, i), '[AEIOU]') then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend", "    return string.gsub(s, \"[aeiou]\"\
    , \"\")\nend", "\tif s:match(\"[AEIOU]\") == nil then return 0 end\n\treturn s:gsub(\"\
    [AEIOU]\", \"\"):len()\nend", "  local a, i = s:gmatch('[AEIOU]')\n  local c =\
    \ 0\n  while true do\n    local v = a(i)\n    if not v then\n      break\n   \
    \ end\n    if #v % 2 == 0 then\n      c = c + 1\n    end\n  end\n  return c\n\
    end", "    local count = 0\n    for i = 1, #s do\n        if not i % 2 == 0 and\
    \ s:sub(i, i):match('[aeiouAEIOU]') then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend", "    local count = 0\n    for i = 1,\
    \ #s do\n        if is_vowel(s:sub(i, i)) and is_upper(s:sub(i, i)) and i % 2\
    \ == 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    return 0\nend", "  local vowels = {a = true, e = true, i = true, o\
    \ = true, u = true}\n  local n = 0\n  for i = 1, #s, 2 do\n    local c = s:sub(i,\
    \ i)\n    if vowels[c:lower()] and c == c:upper() then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend", "  local counter = 0\n  local vowels = {a = true, e\
    \ = true, i = true, o = true, u = true}\n  for i=1, string.len(s) do\n    if i\
    \ % 2 == 0 and vowels[string.lower(s:sub(i, i))] then\n      counter = counter\
    \ + 1\n    end\n  end\n  return counter\nend", "  return len(gsub(s, \"[AEIOU]\"\
    , ''))\nend", "  return count(s, function(c) return is_upper(c) and is_even(c)\
    \ end)\nend", "  local count = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and\
    \ (s:byte(i) >= 65) and (s:byte(i) <= 90) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local vowels = {['A'] = 1, ['E'] = 1, ['I']\
    \ = 1, ['O'] = 1, ['U'] = 1}\n    local count = 0\n    for i, char in ipairs(s)\
    \ do\n        if (i % 2 == 0) and vowels[char] then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local count = 0\n  for\
    \ i = 1, string.len(s) do\n    if (i % 2 == 0) and (s:sub(i, i) == string.upper(s:sub(i,\
    \ i))) then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ local n = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if is_upper(c)\
    \ and is_even(i) then\n      n = n + 1\n    end\n  end\n  return n\nend", "  \
    \  local n = #s\n    if n < 2 then\n        return 0\n    end\n    local num =\
    \ 0\n    local c\n    for i = 2, n, 2 do\n        c = string.byte(s, i)\n    \
    \    if c >= 65 and c <= 90 then\n            num = num + 1\n        end\n   \
    \ end\n    return num\nend", "    local count = 0\n    for i = 1, #s do\n    \
    \    if i % 2 == 0 and is_vowel(s:sub(i, i)) and is_upper(s:sub(i, i)) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local n = #s\n    local count = 0\n    for i = 1, n, 2 do\n        if is_upper(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  if type(s) ~= 'string' then return nil end\n  if s == '' then return\
    \ 0 end\n  return string.gsub(s, '[aeiouAEIOU]', '')\nend", '    return ', " \
    \ -- YOUR CODE HERE\n  -- This should just be a few lines. If you need more, revisit\
    \ your solution\n  -- to problem 1.\n  local count = 0\n  local vowel = {[\"A\"\
    ] = 1, [\"E\"] = 1, [\"I\"] = 1, [\"O\"] = 1, [\"U\"] = 1}\n  for i = 1, #s do\n\
    \    if (vowel[s:sub(i, i)]) then\n      if (i % 2 == 0) then\n        count =\
    \ count + 1\n      end\n    end\n  end\n  return count\nend", "  -- your solution\
    \ here\nend", "    local count = 0\n    for i = 1, #s do\n        if ((i % 2)\
    \ == 0) and s:match('[A-Z]') then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local n = 0\n  for i = 1, #s do\n    if i\
    \ % 2 == 0 and s:sub(i, i):upper() == s:sub(i, i) then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend", "\t-- YOUR CODE HERE\n\tcount = 0\n\tif s == \"\" then\n\
    \t\treturn 0\n\telse\n\t\tif string.sub(s, 1, 1) == string.upper(string.sub(s,\
    \ 1, 1)) and\n\t\t   string.sub(s, 1, 1) == \"A\" or\n\t\t   string.sub(s, 1,\
    \ 1) == \"E\" or\n\t\t   string.sub(s, 1, 1) == \"I\" or\n\t\t   string.sub(s,\
    \ 1, 1) == \"O\" or\n\t\t   string.sub(s, 1, 1) == \"U\" then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\t\treturn count + count_upper(string.sub(s, 2))\n\tend\nend",
  "    local n = 0\n    for i = 1, #s, 2 do\n        if s:sub(i, i):match('[AEIOU]')\
    \ then\n            n = n + 1\n        end\n    end\n    return n\nend", "   \
    \ local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and upper_vowels[s:sub(i,\
    \ i)] then\n      n = n + 1\n    end\n  end\n  return n\nend", "  local count\
    \ = 0\n  local c, i = string.sub(s, 1, 1), 1\n  while c do\n    if i % 2 == 0\
    \ and vowel(c) and c == string.upper(c) then\n      count = count + 1\n    end\n\
    \    i = i + 1\n    c = string.sub(s, i, i)\n  end\n  return count\nend", "  \
    \  return len(filter(lambda x: x.isupper(), s[1::2]))\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if not (i % 2 == 0) and string.match(s:sub(i,\
    \ i), '[AEIOU]') then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "    local i = 1\n    local count = 0\n    for i = 1,\
    \ #s do\n        if s:sub(i, i):upper() == 'A' or s:sub(i, i):upper() == 'E' or\
    \ s:sub(i, i):upper() == 'I' or s:sub(i, i):upper() == 'O' or s:sub(i, i):upper()\
    \ == 'U' then\n            if i % 2 == 0 then\n                count = count +\
    \ 1\n            end\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  -- your code here\n  local i = 0\n  local count = 0\n  while i < #s do\n\
    \    if string.find(s:sub(i,i),\"[AEIOU]\") and i % 2 == 0 then\n      count =\
    \ count + 1\n    end\n    i = i + 1\n  end\n  return count\nend", "\tlocal count\
    \ = 0\n\tfor i = 1, #s do\n\t\tif (i % 2 == 0) and s:match('[AEIOU]', i) then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local count\
    \ = 0\n  for i=1, #s do\n    if (i % 2) == 0 and s:sub(i,i):match('[AEIOU]') then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local i, n\
    \ = 0, 0\n  s:gsub('.', function(x)\n    if i % 2 == 0 and x:find('[AEIOU]') then\n\
    \      n = n + 1\n    end\n    i = i + 1\n  end)\n  return n\nend", "    if type(s)\
    \ ~= 'string' then\n        error('arg \"s\" must be string')\n    end\n    local\
    \ count = 0\n    local vowels = {'A', 'E', 'I', 'O', 'U'}\n    for i = 1, #s do\n\
    \        if i % 2 == 0 then\n            for j = 1, #vowels do\n             \
    \   if s:sub(i, i) == vowels[j] then\n                    count = count + 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i=1,#s do\n        if i % 2 == 0 and s:sub(i,i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local function test_upper(s)\n        return (s == string.upper(s))\n\
    \    end\n    local sum = 0\n    s:gsub('.', function(c)\n        if (test_upper(c)\
    \ and (s:find(c) % 2 == 0)) then\n            sum = sum + 1\n        end\n   \
    \ end)\n    return sum\nend", "\tlocal n = 0\n\tfor i = 1, #s, 2 do\n\t\tlocal\
    \ c = string.sub(s, i, i)\n\t\tif is_upper(c) then\n\t\t\tn = n + 1\n\t\tend\n\
    \tend\n\treturn n\nend", "   -- TODO\nend", "    --     num = 0\n    --     for\
    \ i = 2, #s, 2 do\n    --         if (string.match(s[i], \"[AEIOU]\")) then\n\
    \    --             num = num + 1\n    --         end\n    --     end\n    --\
    \     return num\n    -- end\n    --\n    -- Shorter version:\n    return select(2,\
    \ s:gsub(\"[AEIOU]([^AEIOU]*)\", \"%1\"))\nend", "    local count = 0\n    s:gsub('[AEIOU]',\
    \ function(c)\n        if #c % 2 == 0 then\n            count = count + 1\n  \
    \      end\n    end)\n    return count\nend", "  -- [[ YOUR CODE HERE ]]\nend",
  "    local sum = 0\n    for k, v in pairs(s:sub(2, #s):gmatch(\"%a\")) do\n    \
    \    if upper_vowels[v] then\n            sum = sum + 1\n        end\n    end\n\
    \    return sum\nend", "  local count = 0\n  for i=1, #s do\n    local c = s:sub(i,i)\n\
    \    if is_upper(c) and is_even(i) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local count = 0\n  for i = 1, #s do\n    if i % 2 ==\
    \ 0 and s:sub(i, i):find('[AEIOU]') then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend", "  local upper_count = 0\n  local prev_upper = false\n\
    \  for i = 1, #s do\n    local char = s:sub(i, i)\n    if char:match('%A') then\n\
    \      local prev_upper = char:match('%u')\n      if prev_upper then\n       \
    \ upper_count = upper_count + 1\n      end\n    end\n  end\n  return upper_count\n\
    end", "    local count = 0\n    for i=1,#s do\n        if i % 2 == 0 and s:sub(i,i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  return s:gsub('([AEIOUY])', ''):len()\nend", "   local cnt = 0\n   local\
    \ even = true\n   for i = 1, #s do\n      if even and is_upper_vowel(s:sub(i,\
    \ i)) then\n         cnt = cnt + 1\n      end\n      even = not even\n   end\n\
    \   return cnt\nend", "    local num = 0\n    for i = 1, string.len(s) do\n  \
    \      if i % 2 == 0 and s:sub(i, i) == s:sub(i, i):upper() then\n           \
    \ num = num + 1\n        end\n    end\n    return num\nend", "\tlocal count =\
    \ 0\n\tfor i=1, #s do\n\t\tif s:sub(i,i):find('[AEIOU]') then\n\t\t\tif i % 2\
    \ == 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "  return s:gsub(\"[aAiIuUeEoO]\", \"\")\nend", "    if #s < 2 then\n  \
    \      return 0\n    end\n    local count = 0\n    for i = 2, #s, 2 do\n     \
    \   if string.find(s:sub(i, i), '[AEIOU]') then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local vowel_pattern = \"[aeiouAEIOU]\"\
    \n  local count = 0\n  for i=1,#s do\n    local c = s:sub(i,i)\n    if c:match(vowel_pattern)\
    \ and i % 2 == 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  return #s:gsub('[AEIOU]', '')\nend", "\tlocal c = 0\n\tfor i=1,#s,2 do\n\
    \t\tlocal c = s:sub(i,i)\n\t\tif c == c:upper() and is_vowel(c) then\n\t\t\tc\
    \ = c + 1\n\t\tend\n\tend\n\treturn c\nend", "  -- TODO: implement count_upper.\n\
    \  local count = 0\n  for i = 1, #s do\n    local cur = s:sub(i, i)\n    if cur\
    \ == 'A' or cur == 'E' or cur == 'I' or cur == 'O' or cur == 'U' then\n      if\
    \ i % 2 == 0 then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend", "    local count = 0\n    for i = 1, #s do\n        if i % 2 ==\
    \ 0 and s:sub(i, i):match('[AEIOU]') then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "    local count = 0\n    for i =\
    \ 1, #s do\n        if i % 2 == 0 and string.match(s, string.char(string.byte(s,\
    \ i))) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and\
    \ (string.upper(s[i]) == s[i]) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    for i = 1, #s do\n\
    \        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if s:sub(i, i):match('[AEIOU]')\
    \ and i % 2 == 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]')\
    \ and i % 2 == 0 then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "    local vowels = 'aeiouAEIOU'\n    local count = 0\n\
    \    for i = 1, string.len(s) do\n        if vowels:find(s:sub(i, i)) and i %\
    \ 2 == 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  local i = 0\n  local r = 0\n  for c in s:gmatch('.') do\n  \
    \  if c:match('[AEIOU]') and i % 2 == 0 then\n      r = r + 1\n    end\n    i\
    \ = i + 1\n  end\n  return r\nend", "  local count = 0\n  for i = 1, #s do\n \
    \   if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for i = 1, #s\
    \ do\n    if i % 2 == 0 and s:sub(i, i):upper() == s:sub(i, i) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ i = 1, #s do\n    if i % 2 == 0 and is_upper(s, i) then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local vowels = 'aeiouAEIOU'\n\
    \    local count = 0\n    local chars = {s:byte(1, -1)}\n    for i = 1, #chars,\
    \ 2 do\n        if vowels:find(chars[i], 1, true) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local count = 0\n  for\
    \ i=1, #s do\n    if i % 2 == 0 and string.match(s, '[AEIOU]') then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    if #s > 0 then\n   \
    \     if s:sub(1, 1):match('%A') then\n            return 0 + count_upper(s:sub(2))\n\
    \        else\n            return (s:sub(2, 2):match('%A') and 1 or 0) + count_upper(s:sub(3))\n\
    \        end\n    else\n        return 0\n    end\nend", "    local count = 0\n\
    \    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]') then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and is_upper(s, i) then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend", "    local vowels = 'aeiouAEIOU'\n\
    \    local ct = 0\n    for i=1,string.len(s),2 do\n        if string.find(vowels,\
    \ string.sub(s, i, i)) then\n            ct = ct + 1\n        end\n    end\n \
    \   return ct\nend", "\tlocal count = 0\n\tfor i=1,string.len(s),2 do\n\t\tif\
    \ string.find(\"AEIOU\", string.sub(s, i, i)) then\n\t\t\tcount = count + 1\n\t\
    \tend\n\tend\n\treturn count\nend", "  local n = 0\n  for i = 1, #s do\n    if\
    \ (i % 2 == 0) and s:sub(i, i):match('[AEIOU]') then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend", "    local count = 0\n    local index = 0\n    local\
    \ vowels = {'A', 'E', 'I', 'O', 'U'}\n    for i in s:gmatch(\".\") do\n      \
    \  if index % 2 == 0 then\n            if i == vowels[1] or i == vowels[2] or\
    \ i == vowels[3] or i == vowels[4] or i == vowels[5] then\n                count\
    \ = count + 1\n            end\n        end\n        index = index + 1\n    end\n\
    \    return count\nend", "    local n = 0\n    for i = 1, string.len(s), 2 do\n\
    \        if s:sub(i, i) == string.upper(s:sub(i, i)) then\n            n = n +\
    \ 1\n        end\n    end\n    return n\nend", "   local num = 0\n   for i = 1,\
    \ #s do\n      if (i % 2 == 0) and s:sub(i, i):match('[AEIOU]') then\n       \
    \  num = num + 1\n      end\n   end\n   return num\nend", "  return\nend", " \
    \  local count = 0\n   for i = 1, #s do\n      if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and is_vowel(s:sub(i,\
    \ i):upper()) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  local vowels = {['A'] = true, ['E'] = true, ['I']\
    \ = true, ['O'] = true, ['U'] = true}\n  for i = 1, string.len(s) do\n    if i\
    \ % 2 == 0 and vowels[string.sub(s, i, i)] then\n      count = count + 1\n   \
    \ end\n  end\n  return count\nend", "    local _, count = string.gsub(s, '[AEIOU][AEIOU]',\
    \ '')\n    return count\nend", "    local i = 1\n    local count = 0\n    for\
    \ c in s:gmatch(\".\") do\n        if i % 2 == 0 and c:match(\"[AEIOU]\") then\n\
    \            count = count + 1\n        end\n        i = i + 1\n    end\n    return\
    \ count\nend", "    local count = 0\n    s:gsub('([AEIOU])', function (c)\n  \
    \      if c == c:upper() then\n            count = count + 1\n        end\n  \
    \  end)\n    return count\nend", "    local count = 0\n    for i = 1, #s do\n\
    \        if s:sub(i, i):match('[AEIOU]') and i % 2 == 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if i % 2 == 0 and (string.sub(s, i, i) ==\
    \ 'A' or string.sub(s, i, i) == 'E' or string.sub(s, i, i) == 'I' or string.sub(s,\
    \ i, i) == 'O' or string.sub(s, i, i) == 'U') then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local num = 0\n    for\
    \ i = 1, #s do\n        if i % 2 == 0 and is_vowel(s:sub(i, i)) and s:sub(i, i):upper()\
    \ == s:sub(i, i) then\n            num = num + 1\n        end\n    end\n    return\
    \ num\nend", "  local count = 0\n  for i = 1, s:len() do\n    if i % 2 == 0 and\
    \ is_upper(s, i) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    local count = 0\n    local n = #s\n    for i = 1, n, 2 do\n       \
    \ if s:sub(i, i):match('[AEIOU]') then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend", "  local count = 0\n  for i = 1, #s do\n\
    \    if (i % 2 == 0) and (s:sub(i, i):match('[AEIOU]')) then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "\tlocal n = 0\n\tfor i = 1, #s,\
    \ 2 do\n\t\tlocal c = s:sub(i, i)\n\t\tif c:match('[AEIOU]') then\n\t\t\tn = n\
    \ + 1\n\t\tend\n\tend\n\treturn n\nend", "    return 0\nend", "  return #s:gsub('[AEIOU]',\
    \ '')\nend", "    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]')\
    \ and i % 2 == 0 then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "  local sum = 0\n  local len = string.len(s)\n  for i\
    \ = 1, len do\n    if i % 2 == 0 then\n      if s:sub(i, i) == 'A' or s:sub(i,\
    \ i) == 'E' or s:sub(i, i) == 'I' or s:sub(i, i) == 'O' or s:sub(i, i) == 'U'\
    \ then\n        sum = sum + 1\n      end\n    end\n  end\n  return sum\nend",
  "    local count = 0\n    for i = 1, string.len(s) do\n        if i % 2 == 0 and\
    \ string.match(s:sub(i, i), \"[AEIOU]\") then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "\tlocal count = 0\n\tfor i = 1,\
    \ #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match('^[AEIOU]$') then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local n = 0\n  for i =\
    \ 1, #s do\n    if i % 2 == 0 and s:sub(i, i):upper() == s:sub(i, i) then\n  \
    \    n = n + 1\n    end\n  end\n  return n\nend", "  return count_where(s, function(c)\n\
    \    return is_upper(c) and not (c_index(s, c) % 2 == 0)\n  end)\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "\tlocal n = 0\n\tfor i = 1, #s, 2 do\n\t\tif uppercase_vowels[s:sub(i,\
    \ i)] then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend", "    s = s:lower()\n\
    \    local len = #s\n    local count = 0\n    for i = 1, len do\n        if i\
    \ % 2 == 0 and s:sub(i, i) == 'a' then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
