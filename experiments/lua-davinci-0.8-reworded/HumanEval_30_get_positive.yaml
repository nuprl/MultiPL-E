name: HumanEval_30_get_positive
language: lua
prompt: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1, 2,\
  \ -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
  \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
  \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return filter(l, function(x) return x > 0 end)\nend", "  local result\
    \ = {}\n  for key, value in pairs(l) do\n    if value > 0 then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend", "    local ret = {}\n    for\
    \ i, v in ipairs(l) do\n        if v > 0 then\n            table.insert(ret, v)\n\
    \        end\n    end\n    return ret\nend", "  local new_list = {}\n  for i,\
    \ num in ipairs(l) do\n    if num > 0 then\n      table.insert(new_list, num)\n\
    \    end\n  end\n  return new_list\nend", "    local new_l = {}\n    for k, v\
    \ in pairs(l) do\n        if v > 0 then table.insert(new_l, v) end\n    end\n\
    \    return new_l\nend", "    local new_l = {}\n    for k, v in pairs(l) do\n\
    \        if v > 0 then table.insert(new_l, v) end\n    end\n    return new_l\n\
    end", "  local r = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      r[#r +\
    \ 1] = l[i]\n    end\n  end\n  return r\nend", "\tlocal positive_list = {}\n\t\
    for i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(positive_list,\
    \ v)\n\t\tend\n\tend\n\treturn positive_list\nend", "    local r = {}\n    for\
    \ _,v in ipairs(l) do\n        if v > 0 then\n            table.insert(r, v)\n\
    \        end\n    end\n    return r\nend", "  local table = {}\n  for i, v in\
    \ ipairs(l) do\n    if v > 0 then\n      table[#table + 1] = v\n    end\n  end\n\
    \  return table\nend", "\tlocal nl = {}\n\tfor _, v in ipairs(l) do\n\t\tif v\
    \ > 0 then table.insert(nl, v) end\n\tend\n\treturn nl\nend", "  local t = {}\n\
    \  for _, x in ipairs(l) do\n    if x > 0 then t[#t+1] = x end\n  end\n  return\
    \ t\nend", "  local t = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n   \
    \   table.insert(t, v)\n    end\n  end\n  return t\nend", "\tlocal res = {}\n\t\
    for i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tres[#res + 1] = l[i]\n\t\tend\n\t\
    end\n\treturn res\nend", "    local result = {}\n    for _,v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(result, v)\n        end\n   \
    \ end\n    return result\nend\nM.get_positive = get_positive", "    local result\
    \ = {}\n    for k, v in pairs(l) do\n        if (v > 0) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(out, v)\n    end\n\
    \  end\n  return out\nend", "  local i, r = 1, {}\n  for k, v in ipairs(l) do\n\
    \    if v > 0 then\n      r[i] = v\n      i = i + 1\n    end\n  end\n  return\
    \ r\nend", "    local t = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(t, v)\n        end\n    end\n    return t\nend", " \
    \ local ret = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      ret[#ret\
    \ + 1] = v\n    end\n  end\n  return ret\nend", "\tlocal positive = {}\n\tfor\
    \ i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(positive, v)\n\t\
    \tend\n\tend\n\treturn positive\nend", "  local r = {}\n  for i,v in ipairs(l)\
    \ do\n    if v >= 0 then\n      r[#r+1] = v\n    end\n  end\n  return r\nend",
  "  return map(\n    function(e)\n      if e > 0 then\n        return e\n      end\n\
    \    end,\n    l\n  )\nend", "    local ret = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(ret, v)\n        end\n    end\n\
    \    return ret\nend", "\tlocal res = {}\n\tfor i, x in ipairs(l) do\n\t\tif x\
    \ > 0 then\n\t\t\tres[#res + 1] = x\n\t\tend\n\tend\n\treturn res\nend", "   \
    \ local ret = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n      \
    \      table.insert(ret, v)\n        end\n    end\n    return ret\nend", "  --\
    \ Add your code here\nend", "\treturn filter(l, function(el) return el > 0 end)\n\
    end", "    local out = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(out, v)\n        end\n    end\n    return out\nend",
  "    local res = {}\n    for _, i in ipairs(l) do\n        if i > 0 then table.insert(res,\
    \ i) end\n    end\n    return res\nend", "    local ret = {}\n    for i, e in\
    \ ipairs(l) do\n        if e > 0 then\n            table.insert(ret, e)\n    \
    \    end\n    end\n    return ret\nend", "    local ret = {}\n    for _, v in\
    \ ipairs(l) do\n        if v > 0 then\n            ret[#ret + 1] = v\n       \
    \ end\n    end\n    return ret\nend", "    local m = {}\n    for k, v in pairs(l)\
    \ do\n        if v > 0 then\n            m[#m + 1] = v\n        end\n    end\n\
    \    return m\nend", "\tlocal out = {}\n\tfor k, v in pairs(l) do\n\t\tif v >\
    \ 0 then\n\t\t\ttable.insert(out, v)\n\t\tend\n\tend\n\treturn out\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if v > 0 then r[#r+1] = v end\n  end\n\
    \  return r\nend", "  local result = {}\n  for _, item in ipairs(l) do\n    if\
    \ item > 0 then\n      table.insert(result, item)\n    end\n  end\n  return result\n\
    end", "    local ret = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend",
  "\tlocal positives = {}\n\tfor k, v in pairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(positives,\
    \ v)\n\t\tend\n\tend\n\treturn positives\nend", "    -- TODO: Remove the two lines\
    \ below and replace with your code.\n    return nil\nend", "    local ret = {}\n\
    \    for k, v in pairs(l) do\n        if v > 0 then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend", "\tlocal res = {}\n\tfor _,\
    \ v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(res, v)\n\t\tend\n\t\
    end\n\treturn res\nend", "    local l1 = {}\n    for i, v in ipairs(l) do\n  \
    \      if v > 0 then\n            l1[#l1 + 1] = v\n        end\n    end\n    return\
    \ l1\nend", "\tlocal ret = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\
    \t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend", "    local n =\
    \ {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(n,\
    \ v)\n        end\n    end\n    return n\nend", "  local res = {}\n  for k, v\
    \ in pairs(l) do\n    if v > 0 then\n      res[#res + 1] = v\n    end\n  end\n\
    \  return res\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0\
    \ then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\treturn t\nend", "    local\
    \ l_p = {}\n    for k, v in pairs(l) do\n        if v > 0 then\n            table.insert(l_p,\
    \ v)\n        end\n    end\n    return l_p\nend", "    local new_tbl = {}\n  \
    \  for i, num in ipairs(l) do\n        if num > 0 then\n            table.insert(new_tbl,\
    \ num)\n        end\n    end\n    return new_tbl\nend", "  local result = {}\n\
    \  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(result, v)\n\
    \    end\n  end\n  return result\nend", "    return map(function(v) return v >\
    \ 0 and v or nil end, l)\nend", "    local positive = {}\n    for _, num in ipairs(l)\
    \ do\n        if num > 0 then\n            table.insert(positive, num)\n     \
    \   end\n    end\n    return positive\nend", "\tlocal new_l = {}\n\tfor i,v in\
    \ ipairs(l) do\n\t\tif v > 0 then table.insert(new_l, v) end\n\tend\n\treturn\
    \ new_l\nend", "\tlocal l1 = {}\n\tfor i,v in ipairs(l) do\n\t\tif v > 0 then\n\
    \t\t\ttable.insert(l1, v)\n\t\tend\n\tend\n\treturn l1\nend", "  local new_l =\
    \ {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(new_l,\
    \ v)\n    end\n  end\n  return new_l\nend", "\treturn (filter(l, function(n) return\
    \ n > 0 end))\nend", "  local r = {}\n  for i, v in ipairs(l) do\n    if v > 0\
    \ then r[#r+1] = v end\n  end\n  return r\nend", "  local result = {}\n  for i,v\
    \ in ipairs(l) do\n    if v > 0 then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "    local result = {}\n    for i, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend", "\tlocal res = {}\n\tfor _, i in ipairs(l)\
    \ do\n\t\tif i > 0 then\n\t\t\ttable.insert(res, i)\n\t\tend\n\tend\n\treturn\
    \ res\nend", "    -- Initialize an empty table for the output\n    local output\
    \ = {}\n    -- Iterate through the table\n    for i = 1, #l do\n        -- If\
    \ the value is positive, append it to the output table\n        if l[i] > 0 then\n\
    \            table.insert(output, l[i])\n        end\n    end\n    -- Return the\
    \ output table\n    return output\nend", "    local newl = {}\n    for k, v in\
    \ pairs(l) do\n        if v > 0 then\n            table.insert(newl, v)\n    \
    \    end\n    end\n    return newl\nend", "\treturn fold(l, nil, function(a, b)\n\
    \t\tif b > 0 then\n\t\t\treturn cons(b, a)\n\t\telse\n\t\t\treturn a\n\t\tend\n\
    \tend)\nend", "    local ret = {}\n    for _,v in ipairs(l) do\n        if v >\
    \ 0 then\n            ret[#ret+1] = v\n        end\n    end\n    return ret\n\
    end", "\tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\t\
    table.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend", "  if #l == 0 then\n\
    \    return {}\n  else\n    local a = l[1]\n    if a > 0 then\n      return {a}\
    \ + get_positive(l[2 .. -1])\n    else\n      return get_positive(l[2 .. -1])\n\
    \    end\n  end\nend", "    local result = {}\n    for k, v in pairs(l) do\n \
    \       if (v > 0) then\n            table.insert(result, v)\n        end\n  \
    \  end\n    return result\nend", "\tlocal pos = {}\n\tfor i, n in ipairs(l) do\n\
    \t\tif n > 0 then\n\t\t\ttable.insert(pos, n)\n\t\tend\n\tend\n\treturn pos\n\
    end", "  local result = {}\n  for i, v in ipairs(l) do\n    if v > 0 then table.insert(result,\
    \ v) end\n  end\n  return result\nend", "    local res = {}\n    for _, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(res, v)\n        end\n \
    \   end\n    return res\nend", "    if not l then\n        return {}\n    end\n\
    \    local p = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n     \
    \       table.insert(p, v)\n        end\n    end\n    return p\nend", "\tlocal\
    \ c = {}\n\tlocal j = 1\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\t\
    c[j] = v\n\t\t\tj = j + 1\n\t\tend\n\tend\n\treturn c\nend", "    local result\
    \ = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local res = {}\n   \
    \ for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "    local res = {}\n    for\
    \ i, v in ipairs(l) do\n        if v > 0 then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "  local res = {}\n  for _, v in\
    \ ipairs(l) do\n    if v > 0 then\n      table.insert(res, v)\n    end\n  end\n\
    \  return res\nend", "  local pl = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n\
    \      pl[#pl + 1] = l[i]\n    end\n  end\n  return pl\nend", "  local res = {}\n\
    \  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res, v)\n \
    \   end\n  end\n  return res\nend", "  return filter(l, function(e) return e >\
    \ 0 end)\nend", "  local res = {}\n  for k, v in pairs(l) do\n    if v > 0 then\n\
    \      res[#res + 1] = v\n    end\n  end\n  return res\nend", "  local result\
    \ = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  local r = {}\n  for _, i in ipairs(l)\
    \ do\n    if i > 0 then r[#r+1] = i end\n  end\n  return r\nend", "    local pos\
    \ = {}\n    for _, x in ipairs(l) do\n        if x > 0 then table.insert(pos,\
    \ x) end\n    end\n    return pos\nend", "  local r = {}\n  for _,v in ipairs(l)\
    \ do\n    if v > 0 then\n      r[#r+1] = v\n    end\n  end\n  return r\nend",
  "    local result = {}\n    for _, i in ipairs(l) do\n        if i > 0 then\n  \
    \          table.insert(result, i)\n        end\n    end\n    return result\n\
    end", "    if #l == 0 then\n        return {}\n    else\n        if l[1] < 0 then\n\
    \            return get_positive(tail(l))\n        else\n            return {l[1],\
    \ unpack(get_positive(tail(l)))}\n        end\n    end\nend", "    local result\
    \ = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    -- TODO: implement this\
    \ function\nend", "  return filter(l, function(x) return x > 0 end)\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n      \
    \      r[#r + 1] = v\n        end\n    end\n    return r\nend", "  local t = {}\n\
    \  for i,v in ipairs(l) do\n    if v > 0 then\n      table.insert(t, v)\n    end\n\
    \  end\n  return t\nend", "    return select(lambda 'x: x > 0', l)\nend", "\t\
    return filter(function(v) return v > 0 end, l)\nend", "  local t = {}\n  for _,\
    \ v in ipairs(l) do\n    if v > 0 then\n      table.insert(t, v)\n    end\n  end\n\
    \  return t\nend", "  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0\
    \ then\n      table.insert(res, v)\n    end\n  end\n  return res\nend", "    local\
    \ res = {}\n    for _, elem in ipairs(l) do\n        if elem > 0 then\n      \
    \      table.insert(res, elem)\n        end\n    end\n    return res\nend", " \
    \ local res = {}\n  for _, val in ipairs(l) do\n    if val > 0 then table.insert(res,\
    \ val) end\n  end\n  return res\nend", "    local s = {}\n    for _, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(s, v)\n        end\n   \
    \ end\n    return s\nend", "    local res = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(res, v)\n        end\n    end\n\
    \    return res\nend", "    local ret = {}\n    for _, v in ipairs(l) do\n   \
    \     if v > 0 then\n            table.insert(ret, v)\n        end\n    end\n\
    \    return ret\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    if v >\
    \ 0 then\n      table.insert(t, v)\n    end\n  end\n  return t\nend", "    local\
    \ new_list = {}\n    for k,v in pairs(l) do\n        if v >= 0 then\n        \
    \    table.insert(new_list, v)\n        end\n    end\n    return new_list\nend",
  "    local ret = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n      \
    \      table.insert(ret, v)\n        end\n    end\n    return ret\nend", "  --\
    \ TODO: Implementation\n  -- Implement this function using comprehensions", " \
    \ local r = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      r[#r + 1]\
    \ = v\n    end\n  end\n  return r\nend", "    assert(l, \"table cannot be nil\"\
    )\n    local r = {}\n    for _, n in ipairs(l) do\n        if n > 0 then\n   \
    \         table.insert(r, n)\n        end\n    end\n    return r\nend", "    local\
    \ res = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n            res[#res\
    \ + 1] = l[i]\n        end\n    end\n    return res\nend", "    local output =\
    \ {}\n    for key,value in pairs(l) do\n        if value > 0 then\n          \
    \  table.insert(output, value)\n        end\n    end\n    return output\nend",
  "  return list_filter(l, is_positive)\nend", "    local r = {}\n    for _,v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(r, v)\n        end\n   \
    \ end\n    return r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(res, v)\n        end\n    end\n\
    \    return res\nend", "    local retval = {}\n    for i, num in ipairs(l) do\n\
    \        if num > 0 then\n            table.insert(retval, num)\n        end\n\
    \    end\n    return retval\nend", "\tlocal answer = {}\n\tfor i = 1, #l do\n\t\
    \tif l[i] > 0 then\n\t\t\ttable.insert(answer, l[i])\n\t\tend\n\tend\n\treturn\
    \ answer\nend", "    local r = {}\n    for _,v in ipairs(l) do\n        if v >\
    \ 0 then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "    local t = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n    \
    \        t[#t + 1] = l[i]\n        end\n    end\n    return t\nend", "\tlocal\
    \ o = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(o,\
    \ v)\n\t\tend\n\tend\n\treturn o\nend", "    if l == nil then return {} end\n\
    \    local new = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n        \
    \    new[#new + 1] = l[i]\n        end\n    end\n    return new\nend", "  local\
    \ res = {}\n  for k, v in pairs(l) do\n    if v > 0 then\n      res[#res + 1]\
    \ = v\n    end\n  end\n  return res\nend", "  local lnew = {}\n  for k, v in pairs(l)\
    \ do\n    if v > 0 then\n      lnew[#lnew + 1] = v\n    end\n  end\n  return lnew\n\
    end", "    local l2 = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n   \
    \         l2[#l2 + 1] = l[i]\n        end\n    end\n    return l2\nend", "  local\
    \ ret = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend", "  local ret = {}\n  for _,v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(ret, v)\n    end\n  end\n  return\
    \ ret\nend", "  return filter(l, function(v) return v > 0 end)\nend", "  local\
    \ l2 = {}\n  for k, v in pairs(l) do\n    if v > 0 then\n      l2[#l2 + 1] = v\n\
    \    end\n  end\n  return l2\nend", "  local r = {}\n  for i, v in ipairs(l) do\n\
    \    if v > 0 then r[#r+1] = v end\n  end\n  return r\nend", "    return filter(l,\
    \ function(e) return e > 0 end)\nend", "    -- Your code here.\n    return {}\n\
    end", "\tlocal ret = {}\n\tfor k, v in pairs(l) do\n\t\tif v > 0 then\n\t\t\t\
    table.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend", "    local r = {}\n\
    \    for i, v in ipairs(l) do\n        if v > 0 then\n            r[#r + 1] =\
    \ v\n        end\n    end\n    return r\nend", "  local result = {}\n  for i =\
    \ 1, #l do\n    if l[i] > 0 then\n      result[#result + 1] = l[i]\n    end\n\
    \  end\n  return result\nend", "\tlocal m = {}\n\tfor _, v in ipairs(l) do\n\t\
    \tif v > 0 then\n\t\t\ttable.insert(m, v)\n\t\tend\n\tend\n\treturn m\nend", " \
    \   local t = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n           \
    \ t[#t + 1] = l[i]\n        end\n    end\n    return t\nend", "    -- TODO(Stanciu):\
    \ Use luafun.\n    local out = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n\
    \            out[#out + 1] = l[i]\n        end\n    end\n    return out\nend",
  "    local res = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n          \
    \  res[#res + 1] = l[i]\n        end\n    end\n    return res\nend", "    local\
    \ ret = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend", "  local result = {}\n  for\
    \ _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(result, v)\n   \
    \ end\n  end\n  return result\nend", "    local ret = {}\n    for _, v in ipairs(l)\
    \ do\n        if v > 0 then\n            ret[#ret + 1] = v\n        end\n    end\n\
    \    return ret\nend", "    local result = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then table.insert(result, v) end\n    end\n    return result\n\
    end", "  local ret = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n     \
    \ table.insert(ret, v)\n    end\n  end\n  return ret\nend", "  local t = {}\n\
    \  for i,v in ipairs(l) do\n    if v > 0 then\n      t[#t+1] = v\n    end\n  end\n\
    \  return t\nend", "    local new_table = {}\n    for _, v in ipairs(l) do\n \
    \       if v > 0 then\n            table.insert(new_table, v)\n        end\n \
    \   end\n    return new_table\nend", "    local ret = {}\n    for _,v in ipairs(l)\
    \ do\n        if v > 0 then table.insert(ret, v) end\n    end\n    return ret\n\
    end", "  local result = {}\n  for _, v in ipairs(l) do\n    if v > 0 then table.insert(result,\
    \ v) end\n  end\n  return result\nend", "  local new = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(new, v)\n    end\n  end\n  return\
    \ new\nend", "    local function is_positive(num)\n        return num > 0\n  \
    \  end\n    return filter(is_positive, l)\nend", "\tlocal ret = {}\n\tfor i =\
    \ 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tret[#ret + 1] = l[i]\n\t\tend\n\tend\n\
    \treturn ret\nend", "    local res = {}\n    for _, v in ipairs(l) do\n      \
    \  if v > 0 then\n            table.insert(res, v)\n        end\n    end\n   \
    \ return res\nend", "\tlocal new_l = {}\n\tfor _, v in ipairs(l) do\n\t\tif v\
    \ > 0 then\n\t\t\ttable.insert(new_l, v)\n\t\tend\n\tend\n\treturn new_l\nend",
  "    return Table.filter(l, function(x) return x > 0 end)\nend", "    local result\
    \ = {}\n    for k, v in pairs(l) do\n        if v > 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local out = {}\n   \
    \ for _,v in ipairs(l) do\n        if v >= 0 then\n            out[#out+1] = v\n\
    \        end\n    end\n    return out\nend", "\tlocal o = {}\n\tfor _, e in ipairs(l)\
    \ do\n\t\tif e > 0 then table.insert(o, e) end\n\tend\n\treturn o\nend", "   \
    \ local res = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n           \
    \ res[#res + 1] = l[i]\n        end\n    end\n    return res\nend", "  local t\
    \ = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      t[#t+1] = v\n    end\n\
    \  end\n  return t\nend", "    local t = {}\n    for i = 1, #l do\n        if\
    \ l[i] > 0 then\n            t[#t + 1] = l[i]\n        end\n    end\n    return\
    \ t\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n  \
    \    r[#r + 1] = v\n    end\n  end\n  return r\nend", "    local r = {}\n    for\
    \ i = 1, #l do\n        if l[i] > 0 then\n            r[#r + 1] = l[i]\n     \
    \   end\n    end\n    return r\nend", "    local res = {}\n    for _, i in ipairs(l)\
    \ do\n        if i > 0 then\n            table.insert(res, i)\n        end\n \
    \   end\n    return res\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\
    \tif v > 0 then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", " \
    \ local t = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      t[#t + 1] = l[i]\n\
    \    end\n  end\n  return t\nend", "\tlocal ret = {}\n\tfor k, v in pairs(l) do\n\
    \t\tif v > 0 then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\n\
    end", "    local new_l = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(new_l, v)\n        end\n    end\n    return new_l\n\
    end", "    local nl = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(nl, v)\n        end\n    end\n    return nl\nend", " \
    \   local ans = {}\n    for _, x in ipairs(l) do\n        if x > 0 then\n    \
    \        table.insert(ans, x)\n        end\n    end\n    return ans\nend", " \
    \   local new_list = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(new_list, v)\n        end\n    end\n    return new_list\n\
    end", "  local result = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n  \
    \    table.insert(result, v)\n    end\n  end\n  return result\nend", "\tlocal\
    \ nl = {}\n\tfor _, i in ipairs(l) do\n\t\tif i > 0 then\n\t\t\ttable.insert(nl,\
    \ i)\n\t\tend\n\tend\n\treturn nl\nend", "\tlocal res = {}\n\tfor _, n in ipairs(l)\
    \ do\n\t\tif n > 0 then\n\t\t\ttable.insert(res, n)\n\t\tend\n\tend\n\treturn\
    \ res\nend", "    local res = {}\n    for i, v in ipairs(l) do\n        if v >\
    \ 0 then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end", "    local l2 = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(l2, v)\n        end\n    end\n    return l2\nend", " \
    \ local t = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend", "\treturn List.filter(function(x) return\
    \ x > 0 end, l)\nend", "    local result = {}\n    for i, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(result, v)\n        end\n   \
    \ end\n    return result\nend", "    local pos = {}\n    for _, x in ipairs(l)\
    \ do\n        if x > 0 then\n            table.insert(pos, x)\n        end\n \
    \   end\n    return pos\nend", "\tlocal new_list = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif v > 0 then\n\t\t\ttable.insert(new_list, v)\n\t\tend\n\tend\n\treturn\
    \ new_list\nend", "    local t = {}\n    for i, v in ipairs(l) do\n        if\
    \ v > 0 then\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend", "  local n = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n  \
    \    n[#n + 1] = v\n    end\n  end\n  return n\nend", "  return filter(l, function(val)\
    \ return val > 0 end)\nend", "    local positive_numbers = {}\n    for _, v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(positive_numbers,\
    \ v)\n        end\n    end\n    return positive_numbers\nend", "    local res\
    \ = {}\n    for i, n in ipairs(l) do\n        if n > 0 then\n            table.insert(res,\
    \ n)\n        end\n    end\n    return res\nend", "  return array_filter(l, function(x)\
    \ return x >= 0 end)\nend", "    local res = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(res, v)\n        end\n    end\n\
    \    return res\nend", "    -- Check if l has no elements.\n    if #l == 0 then\n\
    \        return l\n    end", "    local result = {}\n    for i = 1, #l do\n  \
    \      if l[i] > 0 then\n            result[#result + 1] = l[i]\n        end\n\
    \    end\n    return result\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\
    \t\tif v > 0 then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend",
  "    if type(l) ~= \"table\" then return nil end\n    if #l < 1 then return nil\
    \ end\n    local p = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n    \
    \        p[#p + 1] = l[i]\n        end\n    end\n    return p\nend", "  local\
    \ p = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      p[#p + 1] = l[i]\n \
    \   end\n  end\n  return p\nend", "    local nl = {}\n    for i, x in ipairs(l)\
    \ do\n        if x > 0 then\n            nl[#nl + 1] = x\n        end\n    end\n\
    \    return nl\nend", "  local res = {}\n  for _, v in ipairs(l) do\n    if v\
    \ > 0 then\n      table.insert(res, v)\n    end\n  end\n  return res\nend", "\t\
    local res = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(res,\
    \ v)\n\t\tend\n\tend\n\treturn res\nend", "  local result = {}\n  for k, v in\
    \ pairs(l) do\n    if v > 0 then table.insert(result, v) end\n  end\n  return\
    \ result\nend", "    return filter(l, function(x) return x > 0 end)\nend", " \
    \ local r = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      r[#r+1] =\
    \ v\n    end\n  end\n  return r\nend", "\tlocal r = {}\n\tfor i = 1, #l do\n\t\
    \tif l[i] > 0 then\n\t\t\tr[#r + 1] = l[i]\n\t\tend\n\tend\n\treturn r\nend",
  "    local newlist = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n      \
    \      newlist[#newlist + 1] = l[i]\n        end\n    end\n    return newlist\n\
    end", "    local result = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n     \
    \ table.insert(res, v)\n    end\n  end\n  return res\nend", "    local result\
    \ = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local out = {}\n   \
    \ for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(out,\
    \ v)\n        end\n    end\n    return out\nend", "\tlocal r = {}\n\tfor i, v\
    \ in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\
    \treturn r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        if\
    \ v > 0 then\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
