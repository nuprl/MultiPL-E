name: HumanEval_30_get_positive
language: lua
prompt: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1, 2,\
  \ -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
  \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
  \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return filter(l, function(x) return x > 0 end)\nend", "  local result\
    \ = {}\n  for key, value in pairs(l) do\n    if value > 0 then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend", "    local ret = {}\n    for\
    \ i, v in ipairs(l) do\n        if v > 0 then\n            table.insert(ret, v)\n\
    \        end\n    end\n    return ret\nend", "  local new_list = {}\n  for i,\
    \ num in ipairs(l) do\n    if num > 0 then\n      table.insert(new_list, num)\n\
    \    end\n  end\n  return new_list\nend", "    local new_l = {}\n    for k, v\
    \ in pairs(l) do\n        if v > 0 then table.insert(new_l, v) end\n    end\n\
    \    return new_l\nend", "    local new_l = {}\n    for k, v in pairs(l) do\n\
    \        if v > 0 then table.insert(new_l, v) end\n    end\n    return new_l\n\
    end", "  local r = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      r[#r +\
    \ 1] = l[i]\n    end\n  end\n  return r\nend", "\tlocal positive_list = {}\n\t\
    for i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(positive_list,\
    \ v)\n\t\tend\n\tend\n\treturn positive_list\nend", "    local r = {}\n    for\
    \ _,v in ipairs(l) do\n        if v > 0 then\n            table.insert(r, v)\n\
    \        end\n    end\n    return r\nend", "  local table = {}\n  for i, v in\
    \ ipairs(l) do\n    if v > 0 then\n      table[#table + 1] = v\n    end\n  end\n\
    \  return table\nend", "\tlocal nl = {}\n\tfor _, v in ipairs(l) do\n\t\tif v\
    \ > 0 then table.insert(nl, v) end\n\tend\n\treturn nl\nend", "  local t = {}\n\
    \  for _, x in ipairs(l) do\n    if x > 0 then t[#t+1] = x end\n  end\n  return\
    \ t\nend", "  local t = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n   \
    \   table.insert(t, v)\n    end\n  end\n  return t\nend", "\tlocal res = {}\n\t\
    for i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tres[#res + 1] = l[i]\n\t\tend\n\t\
    end\n\treturn res\nend", "    local result = {}\n    for _,v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(result, v)\n        end\n   \
    \ end\n    return result\nend\nM.get_positive = get_positive", "    local result\
    \ = {}\n    for k, v in pairs(l) do\n        if (v > 0) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(out, v)\n    end\n\
    \  end\n  return out\nend", "  local i, r = 1, {}\n  for k, v in ipairs(l) do\n\
    \    if v > 0 then\n      r[i] = v\n      i = i + 1\n    end\n  end\n  return\
    \ r\nend", "    local t = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(t, v)\n        end\n    end\n    return t\nend", " \
    \ local ret = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      ret[#ret\
    \ + 1] = v\n    end\n  end\n  return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
