name: HumanEval_76_is_simple_power
language: lua
results:
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 0\n    while n ^ i < x do\n        i = i + 1\n    end\n    return\
    \ n ^ i == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxhthp_9.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjxhthp_9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    return x > 0 and (math.floor(math.log(x) / math.log(n)) == (math.log(x) /\
    \ math.log(n)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfowspbv.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvfowspbv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local function helper(x, n, acc)\n    if x == 1 then\n      return true\n \
    \   elseif n > x then\n      return false\n    elseif n == x then\n      return\
    \ true\n    else\n      return helper(x / n, n, n * acc)\n    end\n  end\n  return\
    \ helper(x, n, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    return x ~= 0 and x % n ^ math.floor(math.log(x) / math.log(n)) == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_w28s0x.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi_w28s0x.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1icq11sy.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1icq11sy.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 0 then\n    return false\n  end\n  if n == 0 then\n    return false\n\
    \  end\n  local m = math.log(x) / math.log(n)\n  if m ~= math.floor(m) then\n\
    \    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qpxvn82.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8qpxvn82.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local exp, y = 1, n\n  while y < x do\n    y = y * n\n    exp = exp + 1\n \
    \ end\n  return y == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmepqy8k.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvmepqy8k.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if math.log(x) / math.log(n) % 1 == 0 then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr180653y.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr180653y.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local a = math.log(x)/math.log(n)\n    if a - math.floor(a) == 0 then\n \
    \       return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi34n7si.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzi34n7si.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i ^ n == x then\n      return true\n\
    \    end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0rk00x8.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt0rk00x8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.030 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\t\
    local result = false\n\tfor i = 0, x, 1 do\n\t\tif n ^ i == x then\n\t\t\tresult\
    \ = true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.030 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9r3tm15.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe9r3tm15.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- calculate n^2, n^3, n^4, n^5, n^6 ... as long as it is <=x\n  local int\
    \ = 1\n  local n_int = n\n  while n_int <= x do\n    if n_int == x then\n    \
    \  return true\n    end\n    int = int + 1\n    n_int = n * n_int\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9k_3yw0p.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9k_3yw0p.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local x, n = tonumber(x), tonumber(n)\n  if n <= 0 or x <= 0 then return false\
    \ end\n  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local result = false\n    local num = 0\n    for i = 1, x do\n        num\
    \ = n ^ i\n        if num == x then\n            result = true\n            break\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz03qzzb1.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz03qzzb1.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    for i = 1, 10 do\n        if x == n ^ i then\n            return true\n \
    \       end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjytpffte.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjytpffte.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while math.pow(n, i) <= x do\n        if math.pow(n, i)\
    \ == x then\n            return true\n        end\n        i = i + 1\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_jutv7a.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp_jutv7a.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local k = 1\n  for i = 1, 100 do\n    if n ^ i == x then return true end\n\
    \    if n ^ i > x then return false end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e9ih8bg.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7e9ih8bg.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return math.log(x, n) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuj9rpj7u.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuj9rpj7u.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
