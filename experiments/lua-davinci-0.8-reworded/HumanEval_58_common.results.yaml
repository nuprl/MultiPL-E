language: lua
name: HumanEval_58_common
results:
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local r, h =\
    \ {}, {}\n  for _, v in ipairs(l1) do\n    h[v] = true\n  end\n  for _, v in ipairs(l2)\
    \ do\n    if h[v] then\n      table.insert(r, v)\n    end\n  end\n  return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6abqif6.lua:22:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmpn6abqif6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local lookup\
    \ = {}\n  for _, v in ipairs(l1) do\n    lookup[v] = true\n  end\n  local res\
    \ = {}\n  for _, v in ipairs(l2) do\n    if lookup[v] then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4tg49d5.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpn4tg49d5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local s = {}\n\
    \  for k in pairs(l1) do s[k] = true end\n  for k in pairs(l2) do\n    if s[k]\
    \ then s[k] = nil end\n  end\n  local keys = {}\n  for k in pairs(s) do table.insert(keys,\
    \ k) end\n  table.sort(keys)\n  return keys\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4lzpu9p.lua:21:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmpr4lzpu9p.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for _, v in ipairs(l1) do\n        if mem(l2, v) then\n            insert(t,\
    \ v)\n        end\n    end\n    return sort(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpamx16p42.lua:9:\
    \ attempt to call a nil value (global 'mem')\nstack traceback:\n\t/tmp/tmpamx16p42.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpamx16p42.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ { }\n    if #l1 == 0 or #l2 == 0 then\n        return ret\n    end\n    local\
    \ h = { }\n    for _, v in ipairs(l1) do\n        h[v] = true\n    end\n    for\
    \ _, v in ipairs(l2) do\n        if h[v] then\n            ret[#ret + 1] = v\n\
    \        end\n    end\n    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvu7e65tz.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpvu7e65tz.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local lookup\
    \ = {}\n    for _, v in ipairs(l1) do\n        lookup[v] = true\n    end\n   \
    \ local out = {}\n    for _, v in ipairs(l2) do\n        if lookup[v] then\n \
    \           out[#out + 1] = v\n        end\n    end\n    return sort(out)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ddst2w3.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp0ddst2w3.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp0ddst2w3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local r = {}\n\
    \    local t = {}\n    for _, v in ipairs(l1) do\n        t[v] = true\n    end\n\
    \    for _, v in ipairs(l2) do\n        if t[v] then\n            table.insert(r,\
    \ v)\n        end\n    end\n    table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_nh11i0.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpp_nh11i0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    for _, v in ipairs(l1) do\n        for _, v2 in ipairs(l2) do\n    \
    \        if v == v2 then\n                table.insert(res, v)\n            end\n\
    \        end\n    end\n    table.sort(res)\n    return uniq(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps5waxizz.lua:16:\
    \ attempt to call a nil value (global 'uniq')\nstack traceback:\n\t/tmp/tmps5waxizz.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmps5waxizz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    for _, v in ipairs(l1) do\n        for _, v2 in ipairs(l2) do\n    \
    \        if v == v2 then\n                table.insert(ret, v)\n            end\n\
    \        end\n    end\n    return table.unpack(table.sort(ret))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to get length of a nil value

    stack traceback:


    Ran 1 tests in 0.010 seconds, 0 successes, 1 error

    '
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal common\
    \ = {}\n\tfor _, e in ipairs(l1) do\n\t\tif has(l2, e) then\n\t\t\tcommon[#common\
    \ + 1] = e\n\t\tend\n\tend\n\treturn uniq(common)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjpzl6tei.lua:9:\
    \ attempt to call a nil value (global 'has')\nstack traceback:\n\t/tmp/tmpjpzl6tei.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjpzl6tei.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal common_tbl\
    \ = {}\n\tfor i = 1, #l1 do\n\t\tfor j = 1, #l2 do\n\t\t\tif l1[i] == l2[j] then\n\
    \t\t\t\ttable.insert(common_tbl, l1[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn unique(common_tbl)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk3q9dgcn.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpk3q9dgcn.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpk3q9dgcn.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local c = {}\n\
    \  for i = 1, #l1 do\n    local v = l1[i]\n    if sorted_index(l2, v) then\n \
    \     table.insert(c, v)\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1yuzr6ra.lua:10:\
    \ attempt to call a nil value (global 'sorted_index')\nstack traceback:\n\t/tmp/tmp1yuzr6ra.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp1yuzr6ra.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tif l1 and l2\
    \ then\n\t\tlocal a, b, c = {}, {}, {}\n\t\tfor k, v in pairs(l1) do a[v] = true\
    \ end\n\t\tfor k, v in pairs(l2) do b[v] = true end\n\t\tfor k, v in pairs(a)\
    \ do if b[k] then c[#c+1] = k end end\n\t\tsort(c)\n\t\treturn c\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1o7nceyn.lua:12:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp1o7nceyn.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp1o7nceyn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    return sortedkeys(keyfilter(l1,\
    \ l2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn79agr3t.lua:7:\
    \ attempt to call a nil value (global 'keyfilter')\nstack traceback:\n\t/tmp/tmpn79agr3t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn79agr3t.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for k, v in pairs(l1) do\n    if l2[v] then\n      common[v] = true\n\
    \    end\n  end\n  local list = {}\n  for k, v in pairs(common) do\n    table.insert(list,\
    \ k)\n  end\n  table.sort(list)\n  return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp573trife.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp573trife.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if not l1 or\
    \ not l2 then return end\n  local t, c = {}, {}\n  for i, v in ipairs(l1) do t[v]\
    \ = true end\n  for i, v in ipairs(l2) do if t[v] then table.insert(c, v) end\
    \ end\n  table.sort(c)\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rbns0ws.lua:18:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmp7rbns0ws.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local u = {}\n\
    \  for _, v in ipairs(l1) do\n    if elem(v, l2) then\n      u[#u + 1] = v\n \
    \   end\n  end\n  return sorted(u)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42j_6g_e.lua:9:\
    \ attempt to call a nil value (global 'elem')\nstack traceback:\n\t/tmp/tmp42j_6g_e.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp42j_6g_e.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local result\
    \ = {}\n  local hash = {}\n  for _, v in ipairs(l1) do\n    hash[v] = true\n \
    \ end\n  for _, v in ipairs(l2) do\n    if hash[v] then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgprpppk.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmprgprpppk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local c = {}\n\
    \    for _, e in ipairs(l1) do\n        if contains(l2, e) then\n            table.insert(c,\
    \ e)\n        end\n    end\n    return unique(c)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeqwifq9i.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpeqwifq9i.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpeqwifq9i.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local ret = {}\n\
    \  for i = 1, #l1 do\n    for j = 1, #l2 do\n      if l1[i] == l2[j] then\n  \
    \      table.insert(ret, l1[i])\n      end\n    end\n  end\n  return unique(ret)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpva5rs9up.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpva5rs9up.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpva5rs9up.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local x = {}\n\
    \    local a = {}\n    for i, v in ipairs(l1) do\n        a[v] = true\n    end\n\
    \    for i, v in ipairs(l2) do\n        if a[v] then\n            table.insert(x,\
    \ v)\n        end\n    end\n    table.sort(x)\n    return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9z784cf.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpx9z784cf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  assert(l1 and\
    \ l2, 'Two tables are expected')\n  local t = {}\n  for _, v in ipairs(l1) do\n\
    \    if contains(l2, v) then\n      if not contains(t, v) then\n        t[#t +\
    \ 1] = v\n      end\n    end\n  end\n  sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphqw3w02r.lua:10:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmphqw3w02r.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphqw3w02r.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local lookup\
    \ = {}\n  for _, v in ipairs(l1) do\n    lookup[v] = true\n  end\n  local ret\
    \ = {}\n  for _, v in ipairs(l2) do\n    if lookup[v] then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu91cvces.lua:23:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmpu91cvces.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978444
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for i = 1, #l1 do\n        local val = l1[i]\n        for j = 1, #l2 do\n\
    \            if val == l2[j] then\n                t[#t + 1] = val\n         \
    \       break\n            end\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local d1, d2\
    \ = {}, {}\n    for _, v in ipairs(l1) do d1[v] = true end\n    for _, v in ipairs(l2)\
    \ do d2[v] = true end\n    local l3 = {}\n    for k, _ in pairs(d1) do\n     \
    \   if d2[k] then table.insert(l3, k) end\n    end\n    return l3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4docm0ef.lua:21:\
    \ expected: {2, 3}\nactual: {3, 2}\nstack traceback:\n\t/tmp/tmp4docm0ef.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    for k, v in pairs(l1) do\n        if l2[v] then\n            result[#result\
    \ + 1] = v\n        end\n    end\n    table.sort(result)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl52qxfg2.lua:20:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpl52qxfg2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local seen\
    \ = {}\n    local ret = {}\n    for _, v in ipairs(l1) do\n        if not seen[v]\
    \ then\n            seen[v] = true\n            table.insert(ret, v)\n       \
    \ end\n    end\n    for _, v in ipairs(l2) do\n        if seen[v] then\n     \
    \       table.insert(ret, v)\n        end\n    end\n    return sort(ret)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp128q1psi.lua:20:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp128q1psi.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp128q1psi.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local res = {}\n\
    \  local lookup = {}\n  for i = 1, #l1 do\n    lookup[l1[i]] = true\n  end\n \
    \ for i = 1, #l2 do\n    if lookup[l2[i]] then\n      table.insert(res, l2[i])\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_gj06n1.lua:23:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmpk_gj06n1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _,v in ipairs(l1) do\n    if contains(l2, v) then\n      t[#t+1] = v\n\
    \    end\n  end\n  return uniq(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9_w89jso.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp9_w89jso.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9_w89jso.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    if utils.contains(l2, v) then\n      table.insert(l3,\
    \ v)\n    end\n  end\n  return utils.unique(l3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplw6lvbsi.lua:9:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmplw6lvbsi.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplw6lvbsi.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local ret = {}\n\
    \  local set = {}\n  local iter = pairs(l1)\n  for value in iter do\n    if set[value]\
    \ == nil then\n      set[value] = true\n    end\n  end\n  iter = pairs(l2)\n \
    \ for value in iter do\n    if set[value] == true then\n      ret[#ret + 1] =\
    \ value\n    end\n  end\n  return sorted(ret)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgz69n_ph.lua:10:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpgz69n_ph.lua:10: in local 'candidate'\n\t/tmp/tmpgz69n_ph.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local r = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        table.insert(r, v)\n      end\n    end\n  end\n  return unique(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpunnw8vwu.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpunnw8vwu.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpunnw8vwu.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t, k =\
    \ {}, 1\n  for _,v in ipairs(l1) do\n    if contains(l2, v) then\n      t[k] =\
    \ v\n      k = k + 1\n    end\n  end\n  sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprr9w64d6.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmprr9w64d6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprr9w64d6.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local hash =\
    \ {}\n  local common = {}\n  for _, v in ipairs(l1) do\n    hash[v] = v\n  end\n\
    \  for _, v in ipairs(l2) do\n    if hash[v] then\n      table.insert(common,\
    \ v)\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f6iyz8g.lua:23:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmp6f6iyz8g.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978444
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    if l1 and l2 then\n        for _,v in ipairs(l1) do\n            for\
    \ _,v2 in ipairs(l2) do\n                if v == v2 then\n                   \
    \ table.insert(ret, v)\n                    break\n                end\n     \
    \       end\n        end\n    end\n    table.sort(ret)\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t1 = unique(l1)\n\
    \  local t2 = unique(l2)\n  local t = {}\n  for _,v in ipairs(t1) do\n    if lookup(t2,\
    \ v) then t[#t+1] = v end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu5eq8lts.lua:7:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpu5eq8lts.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpu5eq8lts.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local res = {}\n\
    \  for i = 1, #l1 do\n    for j = 1, #l2 do\n      if l1[i] == l2[j] then\n  \
    \      table.insert(res, l1[i])\n      end\n    end\n  end\n  return unique(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyqip78qk.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpyqip78qk.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpyqip78qk.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978444
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for _, v in ipairs(l1) do\n        if elem(v, l2) then\n            t[#t\
    \ + 1] = v\n        end\n    end\n    return sort(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf1vqmp1r.lua:9:\
    \ attempt to call a nil value (global 'elem')\nstack traceback:\n\t/tmp/tmpf1vqmp1r.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpf1vqmp1r.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    local m = {}\n    for _, v in ipairs(l1) do\n        m[v] = (m[v] or\
    \ 0) + 1\n    end\n    for _, v in ipairs(l2) do\n        if m[v] and m[v] > 0\
    \ then\n            table.insert(ret, v)\n            m[v] = m[v] - 1\n      \
    \  end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbceu9vf.lua:24:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 653}\nstack traceback:\n\t/tmp/tmpzbceu9vf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local seen\
    \ = {}\n    local res = {}\n    for _, v in ipairs(l1) do\n        if not seen[v]\
    \ then\n            table.insert(res, v)\n            seen[v] = true\n       \
    \ end\n    end\n    local seen = {}\n    local res2 = {}\n    for _, v in ipairs(l2)\
    \ do\n        if seen[v] then\n            table.insert(res2, v)\n        end\n\
    \        seen[v] = true\n    end\n    local seen = {}\n    local result = {}\n\
    \    for _, v in ipairs(res) do\n        if not seen[v] then\n            table.insert(result,\
    \ v)\n            seen[v] = true\n        end\n    end\n    for _, v in ipairs(res2)\
    \ do\n        if not seen[v] then\n            table.insert(result, v)\n     \
    \       seen[v] = true\n        end\n    end\n    table.sort(result)\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb5zmnze.lua:44:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5, 34, 653}\nstack traceback:\n\t\
    /tmp/tmpeb5zmnze.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal res = {}\n\
    \tlocal found = {}\n\tfor i = 1, #l1 do\n\t\tlocal n = l1[i]\n\t\tif not found[n]\
    \ then\n\t\t\tfound[n] = true\n\t\t\tfor j = 1, #l2 do\n\t\t\t\tif n == l2[j]\
    \ then\n\t\t\t\t\tres[#res + 1] = n\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\tsort(res)\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu5g_8am6.lua:21:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpu5g_8am6.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpu5g_8am6.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal r = {}\n\
    \tfor i=1, #l1 do\n\t\tfor j=1, #l2 do\n\t\t\tif l1[i] == l2[j] then\n\t\t\t\t\
    r[#r+1] = l1[i]\n\t\t\tend\n\t\tend\n\tend\n\treturn sort(r)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnhrg_us.lua:15:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpnnhrg_us.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpnnhrg_us.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local result\
    \ = {}\n  local seen = {}\n  for _, v in ipairs(l1) do\n    seen[v] = true\n \
    \ end\n  for _, v in ipairs(l2) do\n    if seen[v] then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjotgoxj2.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpjotgoxj2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    return utils.dictionary_values(intersect(utils.dictionary_of(l1),\
    \ utils.dictionary_of(l2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvxsdezl7.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpvxsdezl7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvxsdezl7.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local s = {}\n\
    \    local r = {}\n    for _, v in ipairs(l1) do\n        s[v] = true\n    end\n\
    \    for _, v in ipairs(l2) do\n        if s[v] then\n            table.insert(r,\
    \ v)\n        end\n    end\n    table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatapmo3d.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpatapmo3d.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for i = 1, #l1 do\n        for j = 1, #l2 do\n            if l1[i] == l2[j]\
    \ then\n                table.insert(t, l1[i])\n            end\n        end\n\
    \    end\n    return unique(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0tpgumfb.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmp0tpgumfb.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp0tpgumfb.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local u1 =\
    \ unique(l1)\n    local u2 = unique(l2)\n    local t = {}\n    for i, x in ipairs(u1)\
    \ do\n        for j, y in ipairs(u2) do\n            if x == y then\n        \
    \        t[#t + 1] = x\n            end\n        end\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvo4cfru.lua:7:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpmvo4cfru.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmvo4cfru.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    return {unique(sort(l1,\
    \ l2))}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg_q952_w.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpg_q952_w.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpg_q952_w.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal l12 = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tif contains(l2, v) then\n\t\t\tl12[#l12 + 1]\
    \ = v\n\t\tend\n\tend\n\treturn sort(unique(l12))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdib_wmlf.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpdib_wmlf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdib_wmlf.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if not l1 or\
    \ not l2 then return {} end\n  local l1key = l1.key or key or 'k'\n  local l2key\
    \ = l2.key or key or 'k'\n  if type(l1) == 'table' and type(l2) == 'table' then\n\
    \    local t = {}\n    for _, v in pairs(l1) do\n      if type(v) == 'table' and\
    \ v[l1key] and t[v[l1key]] == nil then\n        for _, v2 in pairs(l2) do\n  \
    \        if type(v2) == 'table' and v2[l2key] and v2[l2key] == v[l1key] then\n\
    \            t[v[l1key]] = v[l1key]\n          end\n        end\n      end\n \
    \   end\n    return s(t)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppo4fztgi.lua:21:\
    \ attempt to call a nil value (global 's')\nstack traceback:\n\t/tmp/tmppo4fztgi.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmppo4fztgi.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal result\
    \ = {}\n\tlocal s1 = set(l1)\n\tlocal s2 = set(l2)\n\tlocal size1 = #s1\n\tlocal\
    \ size2 = #s2\n\tfor i = 1, size1 do\n\t\tlocal v1 = s1[i]\n\t\tfor j = 1, size2\
    \ do\n\t\t\tlocal v2 = s2[j]\n\t\t\tif v1 == v2 then\n\t\t\t\tresult[#result +\
    \ 1] = v1\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp44g60h8x.lua:8:\
    \ attempt to call a nil value (global 'set')\nstack traceback:\n\t/tmp/tmp44g60h8x.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp44g60h8x.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if not l1 or\
    \ not l2 then return {} end\n    local r = {}\n    for k1, v1 in pairs(l1) do\n\
    \        for k2, v2 in pairs(l2) do\n            if v1 == v2 then\n          \
    \      r[#r + 1] = v1\n            end\n        end\n    end\n    return unique(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupzvjksl.lua:16:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpupzvjksl.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpupzvjksl.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  return map(l1,\
    \ function(e)\n    if contains(l2, e) then\n      return e\n    end\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp570umn_f.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp570umn_f.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp570umn_f.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  assert(type(l1)\
    \ == 'table', 'Incorrect first argument type')\n  assert(type(l2) == 'table',\
    \ 'Incorrect second argument type')\n  local c = {}\n  for _, v in ipairs(l1)\
    \ do\n    for _, x in ipairs(l2) do\n      if v == x then\n        c[#c + 1] =\
    \ v\n      end\n    end\n  end\n  local function compare(a, b)\n    return a <\
    \ b\n  end\n  table.sort(c, compare)\n  local k = 1\n  while k < #c do\n    if\
    \ c[k] == c[k + 1] then\n      table.remove(c, k)\n    else\n      k = k + 1\n\
    \    end\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for _,v in ipairs(l1) do\n        for _,v2 in ipairs(l2) do\n           \
    \ if v == v2 then\n                t[#t+1] = v\n            end\n        end\n\
    \    end\n    return unique(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ftvn8aq.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmp6ftvn8aq.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp6ftvn8aq.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local r = {}\n\
    \    if l1 and l2 then\n        for _, v in ipairs(l1) do\n            for _,\
    \ v2 in ipairs(l2) do\n                if v == v2 then\n                    r[#r\
    \ + 1] = v\n                    break\n                end\n            end\n\
    \        end\n    end\n    return unique(r)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zn9hhyl.lua:18:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmp4zn9hhyl.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp4zn9hhyl.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local res = {}\n\
    \  local a1 = {}\n  local a2 = {}\n  for _, v in ipairs(l1) do\n    a1[v] = true\n\
    \  end\n  for _, v in ipairs(l2) do\n    a2[v] = true\n  end\n  for k, _ in pairs(a1)\
    \ do\n    if a2[k] then\n      table.insert(res, k)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local x = {}\n\
    \    local y = {}\n    local ret = {}\n    for _, i in ipairs(l1) do\n       \
    \ x[i] = true\n    end\n    for _, i in ipairs(l2) do\n        if x[i] then\n\
    \            y[i] = true\n        end\n    end\n    for i in pairs(y) do\n   \
    \     ret[#ret + 1] = i\n    end\n    table.sort(ret)\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal result\
    \ = {}\n\tfor _, v in ipairs(l1) do\n\t\tif inTable(l2, v) then\n\t\t\tresult[#result\
    \ + 1] = v\n\t\tend\n\tend\n\tsort(result)\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6li0bmf8.lua:9:\
    \ attempt to call a nil value (global 'inTable')\nstack traceback:\n\t/tmp/tmp6li0bmf8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6li0bmf8.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local common_set\
    \ = {}\n    local sorted_set = {}\n    for _, v in ipairs(l1) do\n        if check_in(v,\
    \ l2) then\n            common_set[v] = true\n        end\n    end\n    for k\
    \ in pairs(common_set) do\n        table.insert(sorted_set, k)\n    end\n    table.sort(sorted_set)\n\
    \    return sorted_set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfqbjwmlo.lua:10:\
    \ attempt to call a nil value (global 'check_in')\nstack traceback:\n\t/tmp/tmpfqbjwmlo.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfqbjwmlo.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local r = {}\n\
    \  for _,v in ipairs(l1) do\n    if is_in(v, l2) then\n      r[#r+1] = v\n   \
    \ end\n  end\n  if #r > 0 then\n    return sort(r)\n  end\nend\nM.common = common\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpd3io5qpg.lua:17: attempt to index a nil value (global 'M')\n\
    stack traceback:\n\t/tmp/tmpd3io5qpg.lua:17: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  local s  = {}\n  for _, e in ipairs(l1) do\n    if l3[e] == nil then\n    \
    \  table.insert(s, e)\n      l3[e] = true\n    end\n  end\n  for _, e in ipairs(l2)\
    \ do\n    if l3[e] == nil then\n      table.insert(s, e)\n      l3[e] = true\n\
    \    end\n  end\n  return setmetatable(s, Set)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmput6omw_3.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 7, 9, 121}\nstack traceback:\n\
    \t/tmp/tmput6omw_3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local uv =\
    \ {}\n    local c = {}\n    for _, v in ipairs(l1) do\n        uv[v] = true\n\
    \    end\n    for _, v in ipairs(l2) do\n        if uv[v] then\n            uv[v]\
    \ = nil\n            table.insert(c, v)\n        end\n    end\n    return c\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96oh4y6y.lua:24:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 653}\nstack traceback:\n\t/tmp/tmp96oh4y6y.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, x in ipairs(l1) do\n    for _, y in ipairs(l2) do\n      if x\
    \ == y then\n        common[#common + 1] = x\n      end\n    end\n  end\n  local\
    \ sorted = {}\n  for _, x in ipairs(common) do\n    if not sorted[x] then\n  \
    \    sorted[#sorted + 1] = x\n      sorted[x] = true\n    end\n  end\n  return\
    \ sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pynlcks.lua:28:\
    \ expected: {1, 5, 653}\nactual: {true, 653, 5, 5=true, 653=true}\nstack traceback:\n\
    \t/tmp/tmp8pynlcks.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local u = unique(insert_all(copy(l1),\
    \ l2))\n  local r = {}\n  for _, v in ipairs(u) do\n    if contains(l1, v) and\
    \ contains(l2, v) then\n      table.insert(r, v)\n    end\n  end\n  return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2ul88ou.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpi2ul88ou.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpi2ul88ou.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal tab = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tif contains(l2, v) then\n\t\t\ttab[#tab + 1]\
    \ = v\n\t\tend\n\tend\n\tsort(tab)\n\treturn tab\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6oamhc1r.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp6oamhc1r.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6oamhc1r.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for i, v in ipairs(l1) do\n    if contains(l2, v) then\n      table.insert(l3,\
    \ v)\n    end\n  end\n  table.sort(l3)\n  return l3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5vj6d908.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp5vj6d908.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5vj6d908.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t1 = type(l1)\n\
    \  local t2 = type(l2)\n  assert(t1 == \"table\" and t2 == \"table\",\n    \"\
    common(): both arguments must be tables.\")\n  assert(#l1 >= 1 and #l2 >= 1,\n\
    \    \"common(): both arguments must have at least one element.\")\n  local out\
    \ = {}\n  for i = 1, #l1 do\n    for j = 1, #l2 do\n      if l1[i] == l2[j] then\n\
    \        t_insert(out, l1[i])\n      end\n    end\n  end\n  sort(out)\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp87ey83so.lua:17:\
    \ attempt to call a nil value (global 't_insert')\nstack traceback:\n\t/tmp/tmp87ey83so.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp87ey83so.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local set1 =\
    \ {}\n  local set2 = {}\n  for _, value in ipairs(l1) do\n    set1[value] = true\n\
    \  end\n  for _, value in ipairs(l2) do\n    set2[value] = true\n  end\n  local\
    \ result = {}\n  for value in pairs(set1) do\n    if set2[value] then\n      table.insert(result,\
    \ value)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local res = {}\n\
    \  for i = 1, #l1 do\n    for j = 1, #l2 do\n      if l1[i] == l2[j] then\n  \
    \      table.insert(res, l1[i])\n      end\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzlc45ek.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpkzlc45ek.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local r = {}\n\
    \  for k, v in pairs(l1) do\n    if l2[v] then r[v] = true end\n  end\n  local\
    \ rr = {}\n  for k, v in pairs(r) do\n    rr[#rr+1] = k\n  end\n  return rr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9xim7lh.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpz9xim7lh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal t1 = {}\n\
    \tlocal t2 = {}\n\tfor _, v in ipairs(l1) do\n\t\tt1[v] = true\n\tend\n\tfor _,\
    \ v in ipairs(l2) do\n\t\tt2[v] = true\n\tend\n\tlocal t = {}\n\tfor k, _ in pairs(t1)\
    \ do\n\t\tif t2[k] then\n\t\t\tt[#t + 1] = k\n\t\tend\n\tend\n\ttable.sort(t)\n\
    \treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local d1, d2\
    \ = {}, {}\n    for _, v in ipairs(l1) do d1[v] = true end\n    for _, v in ipairs(l2)\
    \ do d2[v] = true end\n    local res = {}\n    for v in pairs(d1) do\n       \
    \ if d2[v] then table.insert(res, v) end\n    end\n    table.sort(res)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    local i = 1\n    local j = 1\n    local last = math.max(#l1, #l2)\n\
    \    while i <= #l1 and j <= #l2 do\n        if l1[i] == l2[j] then\n        \
    \    ret[#ret + 1] = l1[i]\n            i = i + 1\n            j = j + 1\n   \
    \     elseif l1[i] < l2[j] then\n            i = i + 1\n        else\n       \
    \     j = j + 1\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpliim0jfs.lua:28:\
    \ expected: {1, 5, 653}\nactual: {653}\nstack traceback:\n\t/tmp/tmpliim0jfs.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local m = {}\n\
    \    local r = {}\n    local max, min\n    if #l1 < #l2 then\n        min = l1\n\
    \        max = l2\n    else\n        min = l2\n        max = l1\n    end\n   \
    \ for i, v in ipairs(min) do\n        m[v] = true\n    end\n    for i, v in ipairs(max)\
    \ do\n        if m[v] == true then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4wdz8f6.lua:31:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmpx4wdz8f6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local list =\
    \ {}\n  local count = 0\n  local i1, i2 = 1, 1\n  while i1 <= #l1 and i2 <= #l2\
    \ do\n    if l1[i1] == l2[i2] then\n      count = count + 1\n      list[count]\
    \ = l1[i1]\n      i1 = i1 + 1\n      i2 = i2 + 1\n    elseif l1[i1] < l2[i2] then\n\
    \      i1 = i1 + 1\n    else\n      i2 = i2 + 1\n    end\n  end\n  return list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_4i7jpw.lua:28:\
    \ expected: {1, 5, 653}\nactual: {653}\nstack traceback:\n\t/tmp/tmp8_4i7jpw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for i = 1, #l1 do\n        for j = 1, #l2 do\n            if l1[i] == l2[j]\
    \ then\n                t[#t + 1] = l1[i]\n            end\n        end\n    end\n\
    \    return sorted_unique(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdo0spf8c.lua:15:\
    \ attempt to call a nil value (global 'sorted_unique')\nstack traceback:\n\t/tmp/tmpdo0spf8c.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpdo0spf8c.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i, j, result\
    \ = 1, 1, {}\n  l1, l2 = sorted(l1), sorted(l2)\n  while i <= #l1 and j <= #l2\
    \ do\n    if l1[i] == l2[j] then\n      result[#result + 1] = l1[i]\n      i,\
    \ j = i + 1, j + 1\n    elseif l1[i] < l2[j] then\n      i = i + 1\n    else\n\
    \      j = j + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwx213bx.lua:8:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmpdwx213bx.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpdwx213bx.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local keys =\
    \ {}\n  local res = {}\n  for _, v in ipairs(l1) do\n    keys[v] = true\n  end\n\
    \  for _, v in ipairs(l2) do\n    if keys[v] then\n      table.insert(res, v)\n\
    \    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3j8k34u.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpw3j8k34u.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local a, b\
    \ = {}, {}\n    for k in pairs(l1) do a[k] = true end\n    for k in pairs(l2)\
    \ do b[k] = true end\n    local r = {}\n    for k in pairs(a) do\n        if b[k]\
    \ then r[#r+1] = k end\n    end\n    sort(r)\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaed1pyqj.lua:14:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpaed1pyqj.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpaed1pyqj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    -- This function\
    \ is implemented using a linked list, so the length of\n    -- the result is the\
    \ length of the shorter list.\n    local list = setmetatable({}, {__index = {\n\
    \        n = 0,\n        nxt = nil,\n        val = nil,\n    }})\n    local ptr\
    \ = list\n    for _, i in ipairs(l1) do\n        -- Insert value into sorted position\
    \ in linked list.\n        local val = i\n        local prev = nil\n        while\
    \ ptr ~= nil and ptr.val < val do\n            prev = ptr\n            ptr = ptr.nxt\n\
    \        end\n        if ptr == nil or ptr.val ~= val then\n            -- Don't\
    \ insert duplicate values.\n            if prev == nil then\n                --\
    \ Insert value at head of list.\n                local new = {\n             \
    \       n = 1,\n                    nxt = list,\n                    val = val,\n\
    \                }\n                setmetatable(new, {__index = list})\n    \
    \            list = new\n            else\n                -- Insert value after\
    \ previous element.\n                local new = {\n                    n = prev.n\
    \ + 1,\n                    nxt = prev.nxt,\n                    val = val,\n\
    \                }\n                prev.nxt = new\n            end\n        end\n\
    \    end\n    local res = {}\n    local ptr = list\n    for _, i in ipairs(l2)\
    \ do\n        -- Iterate through list, checking for values less than i.\n    \
    \    while ptr ~= nil and ptr.val < i do\n            ptr = ptr.nxt\n        end\n\
    \        if ptr ~= nil and ptr.val == i then\n            -- Only include values\
    \ for which i == ptr.val.\n            table.insert(res, i)\n        end\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl2v1m37g.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpl2v1m37g.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpl2v1m37g.lua:63: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local r, s\
    \ = {}, {}\n    for _, v in ipairs(l1) do if not s[v] then s[v] = true; r[#r+1]\
    \ = v end end\n    for _, v in ipairs(l2) do if s[v] then s[v] = nil; r[#r+1]\
    \ = v end end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx8206f5.lua:16:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 5, 1, 653}\nstack traceback:\n\
    \t/tmp/tmpqx8206f5.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local r = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        r[#r + 1] = v\n      end\n    end\n  end\n  table.sort(r)\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp517ql8qm.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmp517ql8qm.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _, k in ipairs(l1) do\n    if contains(l2, k) then\n      table.insert(t,\
    \ k)\n    end\n  end\n  return sort(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkczwlvou.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpkczwlvou.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkczwlvou.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if #l1 == 0 or\
    \ #l2 == 0 then return {} end\n  local uniq1 = unique(l1)\n  local uniq2 = unique(l2)\n\
    \  local common = {}\n  for i = 1, #uniq1 do\n    local val = uniq1[i]\n    for\
    \ j = 1, #uniq2 do\n      if val == uniq2[j] then table.insert(common, val) end\n\
    \    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwc985z8e.lua:8:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpwc985z8e.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwc985z8e.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for k, v in pairs(l1) do\n    t[v] = true\n  end\n  for k, v in pairs(l2) do\n\
    \    if t[v] then\n      t[v] = nil\n      t[#t + 1] = v\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local result\
    \ = {}\n  for _, v in ipairs(l1) do\n    if contains(l2, v) then\n      insert(result,\
    \ v)\n    end\n  end\n  return sort(unique(result))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptkkdphgi.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmptkkdphgi.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptkkdphgi.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local r = {}\n\
    \  for _, v in ipairs(l1) do\n    if find(l2, v) then\n      r[#r + 1] = v\n \
    \   end\n  end\n  table.sort(r)\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvxfw5b_x.lua:9:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmpvxfw5b_x.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvxfw5b_x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    for _, v in ipairs(l1) do\n        if indexOf(l2, v) ~= -1 then\n  \
    \          append(res, v)\n        end\n    end\n    return sort(res)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkbac8k6l.lua:9:\
    \ attempt to call a nil value (global 'indexOf')\nstack traceback:\n\t/tmp/tmpkbac8k6l.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkbac8k6l.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n            insert(t,\
    \ v)\n        end\n    end\n    return unique(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp66z3n8vs.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp66z3n8vs.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp66z3n8vs.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\treturn sorted_set(intersect(keys(l1),\
    \ keys(l2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk62otj6k.lua:7:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpk62otj6k.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpk62otj6k.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    for k, v in pairs(l1) do\n        if l2[v] then\n            ret[v]\
    \ = true\n        end\n    end\n    return to_array(ret)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpub7uvp6e.lua:13:\
    \ attempt to call a nil value (global 'to_array')\nstack traceback:\n\t/tmp/tmpub7uvp6e.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpub7uvp6e.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    return remove_duplicates(intersect(l1,\
    \ l2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2ost5j_.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmpi2ost5j_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpi2ost5j_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    for _, v in ipairs(l1) do\n        for _, v2 in ipairs(l2) do\n    \
    \        if v == v2 then\n                table.insert(ret, v)\n            end\n\
    \        end\n    end\n    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwloh8_am.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpwloh8_am.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  assert(type(l1)\
    \ == 'table' and type(l2) == 'table', 'common: must be invoked with two tables')\n\
    \  local t = {}\n  for i=1,#l1 do\n    t[l1[i]] = true\n  end\n  local res = {}\n\
    \  for i=1,#l2 do\n    if t[l2[i]] then\n      res[#res+1] = l2[i]\n    end\n\
    \  end\n  sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpguaukzo9.lua:18:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpguaukzo9.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpguaukzo9.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local r = {}\n\
    \  local seen = {}\n  for _, v in ipairs(l1) do seen[v] = v end\n  for _, v in\
    \ ipairs(l2) do\n    if seen[v] then r[#r+1] = v end\n  end\n  return sort(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6afsj9f.lua:13:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpf6afsj9f.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpf6afsj9f.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  local f = {}\n  for _, v in ipairs(l1) do\n    t[v] = true\n  end\n  for _,\
    \ v in ipairs(l2) do\n    if t[v] then f[#f+1] = v end\n  end\n  sort(f)\n  return\
    \ f\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmposmw51cv.lua:15:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmposmw51cv.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmposmw51cv.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _, v in ipairs(l1) do\n    if v ~= nil and l2[v] then\n      t[#t+1] =\
    \ v\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsd_9q950.lua:19:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 2, 5}\nstack traceback:\n\t/tmp/tmpsd_9q950.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    local found = {}\n    for _, v in ipairs(l1) do\n        if not found[v]\
    \ then\n            for _, v2 in ipairs(l2) do\n                if v == v2 then\n\
    \                    ret[#ret + 1] = v\n                    found[v] = true\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal result\
    \ = {}\n\tfor i = 1, #l1 do\n\t\tfor j = 1, #l2 do\n\t\t\tif l1[i] == l2[j] then\n\
    \t\t\t\tif not contains(result, l1[i]) then\n\t\t\t\t\ttable.insert(result, l1[i])\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvupx0g8.lua:11:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpcvupx0g8.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpcvupx0g8.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  assert(type(l1)\
    \ == 'table', 'Tried to find common elements in a non-table')\n  assert(type(l2)\
    \ == 'table', 'Tried to find common elements in a non-table')\n  local ret = {}\n\
    \  local s = {}\n  for _,v in ipairs(l1) do\n    if not s[v] then\n      s[v]\
    \ = true\n      table.insert(ret, v)\n    end\n  end\n  for _,v in ipairs(l2)\
    \ do\n    if s[v] then\n      s[v] = nil\n      table.insert(ret, v)\n    end\n\
    \  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmre3nswf.lua:30:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 2, 3, 4, 5, 5, 34, 653, 653}\nstack traceback:\n\
    \t/tmp/tmpmre3nswf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local l = {}\n\
    \    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n            l[#l\
    \ + 1] = v\n        end\n    end\n    return sort(l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx151v6_2.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpx151v6_2.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpx151v6_2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal l = {}\n\
    \tlocal all = #l1 > #l2 and l1 or l2\n\tlocal min = #l1 > #l2 and l2 or l1\n\t\
    for _, v in ipairs(min) do\n\t\tif table.find(all, v) then\n\t\t\ttable.insert(l,\
    \ v)\n\t\tend\n\tend\n\ttable.sort(l)\n\treturn l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp58cja4p9.lua:11:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmp58cja4p9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp58cja4p9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal t1 = {}\n\
    \tlocal t2 = {}\n\tlocal result = {}\n\tfor _, x in ipairs(l1) do\n\t\tt1[x] =\
    \ true\n\tend\n\tfor _, x in ipairs(l2) do\n\t\tt2[x] = true\n\tend\n\tfor k,\
    \ _ in pairs(t1) do\n\t\tif t2[k] then\n\t\t\ttable.insert(result, k)\n\t\tend\n\
    \tend\n\ttable.sort(result)\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    return set_index(l1)\
    \ * set_index(l2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp48ltsz5_.lua:7:\
    \ attempt to call a nil value (global 'set_index')\nstack traceback:\n\t/tmp/tmp48ltsz5_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp48ltsz5_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local r = {}\n\
    \  for i,v in ipairs(l1) do\n    if not is_in(r, v) and is_in(l2, v) then\n  \
    \    table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjtw48cjw.lua:9:\
    \ attempt to call a nil value (global 'is_in')\nstack traceback:\n\t/tmp/tmpjtw48cjw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjtw48cjw.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n       \
    \     res[#res + 1] = v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpazscsm0y.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpazscsm0y.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpazscsm0y.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local ret = {}\n\
    \  local uniq = {}\n  for _, v in ipairs(l1) do\n    if not uniq[v] then\n   \
    \   uniq[v] = true\n      ret[#ret + 1] = v\n    end\n  end\n  for _, v in ipairs(l2)\
    \ do\n    if uniq[v] then\n      uniq[v] = nil\n      ret[#ret + 1] = v\n    end\n\
    \  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0b5ku2kv.lua:28:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 2, 3, 4, 5, 5, 34, 653, 653}\nstack traceback:\n\
    \t/tmp/tmp0b5ku2kv.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local d1, d2\
    \ = {}, {}\n    for _, v in ipairs(l1) do d1[v] = true end\n    for _, v in ipairs(l2)\
    \ do d2[v] = true end\n    local d3 = {}\n    for i, v in pairs(d1) do\n     \
    \   if d2[i] then d3[#d3 + 1] = i end\n    end\n    return utils.sort(d3)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpawboesfn.lua:14:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpawboesfn.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpawboesfn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    for k, v in pairs(l1) do\n        if l2[v] then\n            result[v]\
    \ = v\n        end\n    end\n    local keys = {}\n    for k, _ in pairs(result)\
    \ do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local\
    \ values = {}\n    for _, k in ipairs(keys) do\n        table.insert(values, result[k])\n\
    \    end\n    return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx3p4sl_.lua:28:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpgx3p4sl_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local ret = {}\n\
    \  local map = {}\n  for _, v in ipairs(l1) do\n    if not map[v] then\n     \
    \ map[v] = true\n      table.insert(ret, v)\n    end\n  end\n  for _, v in ipairs(l2)\
    \ do\n    if map[v] then\n      map[v] = nil\n      table.insert(ret, v)\n   \
    \ end\n  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1tcaft3.lua:28:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 2, 3, 4, 5, 5, 34, 653, 653}\nstack traceback:\n\
    \t/tmp/tmp_1tcaft3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local function\
    \ cmp_value(v1, v2)\n        return v1 < v2\n    end\n    local function common_list(list)\n\
    \        local values = {}\n        for _, v in ipairs(list) do\n            if\
    \ values[v] then\n                values[v] = values[v] + 1\n            else\n\
    \                values[v] = 1\n            end\n        end\n        local common\
    \ = {}\n        for value, count in pairs(values) do\n            if count > 1\
    \ then\n                table.insert(common, value)\n            end\n       \
    \ end\n        table.sort(common, cmp_value)\n        return common\n    end\n\
    \    return common_list(l1) + common_list(l2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp881a_yoq.lua:28:\
    \ attempt to perform arithmetic on a table value\nstack traceback:\n\t/tmp/tmp881a_yoq.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp881a_yoq.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for i,v in ipairs(l1) do\n        for j,w in ipairs(l2) do\n            if\
    \ v == w then\n                table.insert(t, v)\n            end\n        end\n\
    \    end\n    return unique(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe214var.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpbe214var.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpbe214var.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    local c = {}\n    for _,v in ipairs(l1) do\n        t[v] = true\n    end\n\
    \    for _,v in ipairs(l2) do\n        if t[v] then\n            table.insert(c,\
    \ v)\n        end\n    end\n    table.sort(c)\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkckwb_1q.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpkckwb_1q.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    return setmetatable(\n\
    \        d.uniq(l1) & d.uniq(l2),\n        d.readonly_mt\n    )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphx2j0ajy.lua:8:\
    \ attempt to index a nil value (global 'd')\nstack traceback:\n\t/tmp/tmphx2j0ajy.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmphx2j0ajy.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal r = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tif index(l2, v) then\n\t\t\tr[#r + 1] = v\n\t\
    \tend\n\tend\n\treturn sort(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprlc2c7p8.lua:9:\
    \ attempt to call a nil value (global 'index')\nstack traceback:\n\t/tmp/tmprlc2c7p8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprlc2c7p8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  return sort(unique(intersect(l1,\
    \ l2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp031962kf.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmp031962kf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp031962kf.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal s = set()\n\
    \tfor _, l in ipairs({l1, l2}) do\n\t\tfor _, v in ipairs(l) do\n\t\t\ts[v] =\
    \ true\n\t\tend\n\tend\n\tlocal r = {}\n\tfor k in pairs(s) do\n\t\tr[#r+1] =\
    \ k\n\tend\n\ttable.sort(r)\n\treturn r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdmko3yub.lua:7:\
    \ attempt to call a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpdmko3yub.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdmko3yub.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t1 =\
    \ {}\n    local t2 = {}\n    local result = {}\n    local has_value\n    for _,\
    \ v in ipairs(l1) do t1[v] = true end\n    for _, v in ipairs(l2) do t2[v] = true\
    \ end\n    for k in pairs(t1) do\n        has_value = false\n        for k2 in\
    \ pairs(t2) do\n            if k == k2 then\n                has_value = true\n\
    \                break\n            end\n        end\n        if has_value then\n\
    \            table.insert(result, k)\n        end\n    end\n    return sorted(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_ahani4.lua:25:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmpx_ahani4.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpx_ahani4.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local out = {}\n\
    \  local h = {}\n  local i = 1\n  for _, n in pairs(l1) do\n    if i > #l2 then\
    \ break end\n    if n == l2[i] then\n      out[#out + 1] = n\n      i = i + 1\n\
    \    elseif n > l2[i] then\n      i = i + 1\n    end\n  end\n  return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmypn7vdt.lua:25:\
    \ expected: {1, 5, 653}\nactual: {5}\nstack traceback:\n\t/tmp/tmpmypn7vdt.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  return keys(intersect(l1,\
    \ l2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpix5alm3h.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmpix5alm3h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpix5alm3h.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  return iter(l1)\n\
    \    :map(function(v) return _contains(l2, v) and v end)\n    :filter(id)\n  \
    \  :sort()\n    :uniq()\n    :totable()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhumitha.lua:7:\
    \ attempt to call a nil value (global 'iter')\nstack traceback:\n\t/tmp/tmpwhumitha.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwhumitha.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local list\
    \ = {}\n    for _, v in ipairs(l1) do\n        list[v] = true\n    end\n    for\
    \ _, v in ipairs(l2) do\n        if list[v] then\n            list[v] = nil\n\
    \            list[#list + 1] = v\n        end\n    end\n    sort(list)\n    return\
    \ list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1vbc4klg.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp1vbc4klg.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp1vbc4klg.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for k, v in pairs(l1) do t[v] = true end\n  for k, v in pairs(l2) do if t[v]\
    \ then t[v] = nil end end\n  local r = {}\n  for k, v in pairs(t) do r[#r + 1]\
    \ = k end\n  sort(r)\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9_fihgy.lua:12:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpz9_fihgy.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpz9_fihgy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  assertTable(l1)\n\
    \  assertTable(l2)\n  local hash = {}\n  local res = {}\n  for _, v in ipairs(l1)\
    \ do\n    hash[v] = true\n  end\n  for _, v in ipairs(l2) do\n    if hash[v] then\n\
    \      res[#res + 1] = v\n    end\n  end\n  return sort(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps97uuzkp.lua:7:\
    \ attempt to call a nil value (global 'assertTable')\nstack traceback:\n\t/tmp/tmps97uuzkp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps97uuzkp.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal ret = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tfor _, v2 in ipairs(l2) do\n\t\t\tif v == v2\
    \ then\n\t\t\t\tret[#ret + 1] = v\n\t\t\tend\n\t\tend\n\tend\n\treturn table.sort(table.unique(ret))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw364k8e9.lua:15:\
    \ attempt to call a nil value (field 'unique')\nstack traceback:\n\t/tmp/tmpw364k8e9.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpw364k8e9.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t1 = map(l1,\
    \ true)\n  local t2 = map(l2, true)\n  local t = {}\n  for key, val in pairs(t1)\
    \ do\n    if t2[key] then\n      t[#t + 1] = key\n    end\n  end\n  sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpen227v3c.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpen227v3c.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpen227v3c.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 > #l2\
    \ then\n        l1, l2 = l2, l1\n    end\n    local r = {}\n    for _, v in ipairs(l1)\
    \ do\n        if table_util.contains(l2, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    table.sort(r)\n    return set(r)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwkhq7hhu.lua:12:\
    \ attempt to index a nil value (global 'table_util')\nstack traceback:\n\t/tmp/tmpwkhq7hhu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpwkhq7hhu.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for i, v in ipairs(l1) do\n    if l2[v] then t[#t+1] = v end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lqvifo3.lua:18:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp9lqvifo3.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local all =\
    \ {}\n    for _, v in ipairs(l1) do\n        all[v] = true\n    end\n    for _,\
    \ v in ipairs(l2) do\n        if all[v] then\n            all[v] = v\n       \
    \ end\n    end\n    local res = {}\n    for _, v in pairs(all) do\n        if\
    \ v then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare boolean with number

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local r = {}\n\
    \    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n            r[#r\
    \ + 1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsy89mjg9.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpsy89mjg9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsy89mjg9.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  return set(l1):intersection(l2):values()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3f3v3ymx.lua:7:\
    \ attempt to call a nil value (global 'set')\nstack traceback:\n\t/tmp/tmp3f3v3ymx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3f3v3ymx.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  return set(l1):intersection(l2):totable()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpveazs92y.lua:7:\
    \ attempt to call a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpveazs92y.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpveazs92y.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local set =\
    \ {}\n    local r = {}\n    local n = 1\n    for _, v in ipairs(l1) do\n     \
    \   if not set[v] then\n            set[v] = true\n            r[n] = v\n    \
    \        n = n + 1\n        end\n    end\n    local n = 1\n    for _, v in ipairs(l2)\
    \ do\n        if set[v] then\n            r[n] = v\n            n = n + 1\n  \
    \      end\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqgioz6b.lua:30:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653, 653, 2, 5}\nstack traceback:\n\
    \t/tmp/tmpdqgioz6b.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    local result_map = {}\n    local n1 = #l1\n    local n2 = #l2\n  \
    \  local i1 = 1\n    local i2 = 1\n    while i1 <= n1 and i2 <= n2 do\n      \
    \  local v1 = l1[i1]\n        local v2 = l2[i2]\n        if v1 == v2 then\n  \
    \          result_map[v1] = true\n            i1 = i1 + 1\n            i2 = i2\
    \ + 1\n        elseif v1 < v2 then\n            i1 = i1 + 1\n        else\n  \
    \          i2 = i2 + 1\n        end\n    end\n    for v in pairs(result_map) do\n\
    \        result[#result + 1] = v\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_1dzptj.lua:35:\
    \ expected: {1, 5, 653}\nactual: {653}\nstack traceback:\n\t/tmp/tmpu_1dzptj.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l = {}\n\
    \  for v in items(l1) do\n    l[v] = true\n  end\n  for k,v in pairs(l2) do\n\
    \    if l[v] then\n      l[v] = nil\n      l[#l+1] = v\n    end\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiyhqsib3.lua:8:\
    \ attempt to call a nil value (global 'items')\nstack traceback:\n\t/tmp/tmpiyhqsib3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpiyhqsib3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal c = {}\n\
    \tfor k, v in pairs(l1) do\n\t\tif contains(l2, v) then\n\t\t\tc[k] = v\n\t\t\
    end\n\tend\n\treturn uniq(c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxaes0r2d.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpxaes0r2d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxaes0r2d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local a, b\
    \ = {}, {}\n    for _, k in ipairs(l1) do\n        a[k] = true\n    end\n    for\
    \ _, k in ipairs(l2) do\n        if a[k] then\n            b[#b + 1] = k\n   \
    \     end\n    end\n    sort(b)\n    return b\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2v5fqsmb.lua:16:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp2v5fqsmb.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp2v5fqsmb.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal common\
    \ = {}\n\tlocal index = {}\n\tfor _, v in ipairs(l1) do\n\t\tif not index[v] then\n\
    \t\t\tcommon[#common + 1] = v\n\t\t\tindex[v] = true\n\t\tend\n\tend\n\tfor _,\
    \ v in ipairs(l2) do\n\t\tif index[v] then\n\t\t\tcommon[#common + 1] = v\n\t\t\
    \tindex[v] = nil\n\t\tend\n\tend\n\treturn sort(common)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt218893j.lua:21:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpt218893j.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpt218893j.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    for k, v in pairs(l1) do\n        if l2[v] then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2j_u9gn.lua:19:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 2, 5}\nstack traceback:\n\t/tmp/tmpk2j_u9gn.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  return table.keys(set(l1,\
    \ l2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmuc_r2xv.lua:7:\
    \ attempt to call a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpmuc_r2xv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmuc_r2xv.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t1 =\
    \ unique(l1)\n    local t2 = unique(l2)\n    local res = {}\n    local i1, i2\
    \ = 1, 1\n    while t1[i1] and t2[i2] do\n        if t1[i1] == t2[i2] then\n \
    \           table.insert(res, t1[i1])\n            i1 = i1 + 1\n            i2\
    \ = i2 + 1\n        elseif t1[i1] < t2[i2] then\n            i1 = i1 + 1\n   \
    \     else\n            i2 = i2 + 1\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm873y90h.lua:7:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpm873y90h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpm873y90h.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if #l1 == 0\
    \ or #l2 == 0 then\n        return {}\n    end\n    local t1 = {}\n    local t2\
    \ = {}\n    local result = {}\n    for _, v in ipairs(l1) do\n        t1[v] =\
    \ v\n    end\n    for _, v in ipairs(l2) do\n        t2[v] = v\n    end\n    for\
    \ k, _ in pairs(t1) do\n        if t2[k] then\n            table.insert(result,\
    \ k)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if (not l1)\
    \ or (not l2) then\n        return {}\n    end\n    local res = {}\n    for _,\
    \ e in ipairs(l1) do\n        for _, f in ipairs(l2) do\n            if (e ==\
    \ f) and (not table.contains(res, e)) then\n                table.insert(res,\
    \ e)\n            end\n        end\n    end\n    table.sort(res)\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfdn3d5n.lua:13:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcfdn3d5n.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpcfdn3d5n.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal set = {}\n\
    \tfor i = 1, #l1 do\n\t\tset[l1[i]] = true\n\tend\n\tlocal res = {}\n\tfor i =\
    \ 1, #l2 do\n\t\tif set[l2[i]] then\n\t\t\tres[#res + 1] = l2[i]\n\t\tend\n\t\
    end\n\treturn sort(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcss2w1yn.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpcss2w1yn.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpcss2w1yn.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  if type(l1) ~=\
    \ 'table' or type(l2) ~= 'table' then return {} end\n  local common = {}\n  for\
    \ _, v in ipairs(l1) do\n    if contains(l2, v) then\n      common[#common + 1]\
    \ = v\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvb530a9.lua:10:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpfvb530a9.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfvb530a9.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  return sorted(unique(l1))\
    \ * sorted(unique(l2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9n81w9or.lua:7:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmp9n81w9or.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9n81w9or.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local h = {}\n\
    \    for _, v in ipairs(l1) do\n        h[v] = true\n    end\n    local result\
    \ = {}\n    for _, v in ipairs(l2) do\n        if h[v] then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_5a9k2b.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmp5_5a9k2b.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    for _, v in ipairs(l1) do\n        if in_table(v, l2) then\n       \
    \     res[#res + 1] = v\n        end\n    end\n    table.sort(res)\n    return\
    \ uniq(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrftro23.lua:9:\
    \ attempt to call a nil value (global 'in_table')\nstack traceback:\n\t/tmp/tmpmrftro23.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmrftro23.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal t = {}\n\
    \tfor v in values(l1) do\n\t\tif find(l2, v) then t[#t+1] = v end\n\tend\n\tsort(t)\n\
    \treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4lohyd_q.lua:8:\
    \ attempt to call a nil value (global 'values')\nstack traceback:\n\t/tmp/tmp4lohyd_q.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp4lohyd_q.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    for _, x in ipairs(l1) do\n        for _, y in ipairs(l2) do\n     \
    \       if x == y then\n                table.insert(ret, x)\n            end\n\
    \        end\n    end\n    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wnwj7ov.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmp6wnwj7ov.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local h = {}\n\
    \  for _, v in ipairs(l1) do\n    h[v] = true\n  end\n  local r = {}\n  for _,\
    \ v in ipairs(l2) do\n    if h[v] then\n      r[#r + 1] = v\n    end\n  end\n\
    \  return sort(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0smhovia.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp0smhovia.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp0smhovia.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local r = {}\n\
    \    for i = 1, #l1 do\n        for j = 1, #l2 do\n            if l1[i] == l2[j]\
    \ then\n                r[#r + 1] = l1[i]\n            end\n        end\n    end\n\
    \    table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1gob5rj.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpm1gob5rj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local c = {}\n\
    \  local seen = {}\n  for i, v in ipairs(l1) do\n    seen[v] = true\n  end\n \
    \ for i, v in ipairs(l2) do\n    if seen[v] then\n      table.insert(c, v)\n \
    \   end\n  end\n  table.sort(c)\n  return c\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqgx_t03.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpdqgx_t03.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _, x in ipairs(l1) do\n    if find(l2, x) then t[#t+1] = x end\n  end\n\
    \  return sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsycncar3.lua:9:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmpsycncar3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsycncar3.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local s = {}\n\
    \  local res = {}\n  for _, v in ipairs(l1) do\n    s[v] = true\n  end\n  for\
    \ _, v in ipairs(l2) do\n    if s[v] then\n      res[#res+1] = v\n    end\n  end\n\
    \  return sort_unique(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzkv0ulne.lua:17:\
    \ attempt to call a nil value (global 'sort_unique')\nstack traceback:\n\t/tmp/tmpzkv0ulne.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpzkv0ulne.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local res = {}\n\
    \  for _, v in ipairs(l1) do\n    if indexOf(l2, v) then\n      res[#res + 1]\
    \ = v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77xbtopz.lua:9:\
    \ attempt to call a nil value (global 'indexOf')\nstack traceback:\n\t/tmp/tmp77xbtopz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp77xbtopz.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local ret = {}\n\
    \  local hash = {}\n  for i = 1, #l1 do\n    hash[l1[i]] = true\n  end\n  for\
    \ i = 1, #l2 do\n    if hash[l2[i]] then\n      ret[#ret + 1] = l2[i]\n    end\n\
    \  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5v1_iwz.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpt5v1_iwz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for i = 1, #l1 do\n        local v = l1[i]\n        for j = 1, #l2 do\n \
    \           if v == l2[j] then\n                t[#t + 1] = v\n              \
    \  break\n            end\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  local ts = {}\n  local a = 0\n  local u1 = unique(l1)\n  local u2 = unique(l2)\n\
    \  for _, v in ipairs(u1) do\n    for _, v2 in ipairs(u2) do\n      if v == v2\
    \ then\n        t[a] = v\n        a = a + 1\n      end\n    end\n  end\n  for\
    \ _, v in ipairs(t) do\n    if #ts == 0 then\n      ts[0] = v\n    else\n    \
    \  local i = 0\n      while i < #ts do\n        if v < ts[i] then\n          insert(ts,\
    \ i, v)\n          break\n        elseif i == #ts - 1 then\n          ts[#ts]\
    \ = v\n          break\n        end\n        i = i + 1\n      end\n    end\n \
    \ end\n  return ts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7jpwri83.lua:10:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmp7jpwri83.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp7jpwri83.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local set =\
    \ {}\n    for _, v in ipairs(l1) do\n        set[v] = true\n    end\n    local\
    \ intersection = {}\n    for _, v in ipairs(l2) do\n        if set[v] then\n \
    \           intersection[#intersection + 1] = v\n        end\n    end\n    table.sort(intersection)\n\
    \    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx7_rojd.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpwx7_rojd.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal result\
    \ = {}\n\tlocal i = 0\n\tfor x in pairs(l1) do\n\t\tif l2[x] then\n\t\t\ti = i\
    \ + 1\n\t\t\tresult[i] = x\n\t\tend\n\tend\n\tsort(result)\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8ozrp7.lua:15:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmplf8ozrp7.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplf8ozrp7.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        table.insert(l3, v)\n      end\n    end\n  end\n  return unique(l3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7yakkpb.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpq7yakkpb.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpq7yakkpb.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t1 = {}\n\
    \  local t2 = {}\n  for _, v in ipairs(l1) do\n    t1[v] = true\n  end\n  for\
    \ _, v in ipairs(l2) do\n    t2[v] = true\n  end\n  local t = {}\n  for k, _ in\
    \ pairs(t1) do\n    if t2[k] then\n      t[#t + 1] = k\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqicp_uz.lua:28:\
    \ expected: {2, 3}\nactual: {3, 2}\nstack traceback:\n\t/tmp/tmpnqicp_uz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local result\
    \ = {}\n  local t1 = type(l1)\n  local t2 = type(l2)\n  if t1 ~= 'table' or t2\
    \ ~= 'table' then\n    error('Common: Expected two tables, but got ' .. t1 ..\
    \ ' and ' .. t2)\n  end\n  if t1 == 'table' and t2 == 'table' then\n    for _,\
    \ v in ipairs(l1) do\n      if find(l2, v) then\n        insert(result, v)\n \
    \     end\n    end\n  end\n  sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5wc66mlj.lua:15:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmp5wc66mlj.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp5wc66mlj.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  local i, v\n  for i, v in ipairs(l1) do\n    if contains(l2, v) then t[#t+1]\
    \ = v end\n  end\n  return sorted(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjfhejo4t.lua:10:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpjfhejo4t.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjfhejo4t.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    for _, v in ipairs(l1) do\n        if index_of(l2, v) then\n       \
    \     tinsert(ret, v)\n        end\n    end\n    return reverse(sort(ret))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6evejilo.lua:9:\
    \ attempt to call a nil value (global 'index_of')\nstack traceback:\n\t/tmp/tmp6evejilo.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6evejilo.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if type(l1)\
    \ ~= 'table' or type(l2) ~= 'table' then\n        return {}\n    end\n    local\
    \ t = {}\n    for _, v in ipairs(l1) do\n        if ipairs(l2)[v] ~= nil then\n\
    \            t[#t + 1] = v\n        end\n    end\n    return unique(t)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzbrqax4b.lua:12:\
    \ attempt to index a function value\nstack traceback:\n\t/tmp/tmpzbrqax4b.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzbrqax4b.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local s = {}\n\
    \    for _, v in ipairs(l1) do\n        if in_table(v, l2) then\n            s[#s\
    \ + 1] = v\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbi9bmjyo.lua:9:\
    \ attempt to call a nil value (global 'in_table')\nstack traceback:\n\t/tmp/tmpbi9bmjyo.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbi9bmjyo.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    local r = {}\n    for _, v in ipairs(l1) do\n        t[v] = v\n    end\n\
    \    for _, v in ipairs(l2) do\n        if t[v] then\n            r[#r+1] = v\n\
    \        end\n    end\n    table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrvtvxbf.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpcrvtvxbf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 0
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for i = 1, #l1 do\n    t[l1[i]] = 1\n  end\n  for i = 1, #l2 do\n    if t[l2[i]]\
    \ then\n      t[l2[i]] = t[l2[i]] + 1\n    else\n      t[l2[i]] = 1\n    end\n\
    \  end\n  local res = {}\n  for k, v in pairs(t) do\n    if v > 1 then\n     \
    \ res[#res + 1] = k\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local ret = {}\n\
    \  local c = 0\n  local i = 1\n  while i <= #l1 do\n    local j = 1\n    while\
    \ j <= #l2 do\n      if l1[i] == l2[j] then\n        if c == 0 then\n        \
    \  ret[1] = l1[i]\n          c = 1\n        else\n          local m = 1\n    \
    \      while m <= c do\n            if ret[m] > l1[i] then\n              break\n\
    \            end\n            m = m + 1\n          end\n          if ret[m] ~=\
    \ l1[i] then\n            c = c + 1\n            for n = c, m + 1, -1 do\n   \
    \           ret[n] = ret[n - 1]\n            end\n            ret[m] = l1[i]\n\
    \          end\n        end\n      end\n      j = j + 1\n    end\n    i = i +\
    \ 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkowp9xb.lua:44:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpjkowp9xb.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  local ret = {}\n  if (#l1 == 0 or #l2 == 0) then return {} end\n  for _, v\
    \ in ipairs(l1) do\n    t[v] = 1\n  end\n  for _, v in ipairs(l2) do\n    if t[v]\
    \ then\n      ret[#ret + 1] = v\n    end\n  end\n  table.sort(ret)\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68l890ea.lua:25:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmp68l890ea.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local ids = {}\n\
    \  for _, v in ipairs(l1) do\n    ids[v] = true\n  end\n  local result = {}\n\
    \  for _, v in ipairs(l2) do\n    if ids[v] then\n      table.insert(result, v)\n\
    \    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2y_ko_3.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpl2y_ko_3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    for _,v in ipairs(l1) do\n        for _,v2 in ipairs(l2) do\n    \
    \        if v == v2 then\n                table.insert(result, v)\n          \
    \  end\n        end\n    end\n    table.sort(result)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotcln7a_.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpotcln7a_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal out = {}\n\
    \tfor k, _ in pairs(l1) do\n\t\tif l2[k] then out[k] = true end\n\tend\n\tlocal\
    \ out_list = {}\n\tfor k, _ in pairs(out) do out_list[#out_list + 1] = k end\n\
    \ttable.sort(out_list)\n\treturn out_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt171to03.lua:20:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5, 6, 7}\nstack traceback:\n\t/tmp/tmpt171to03.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local r = {}\n\
    \  for _, v in ipairs(l1) do\n    if not not_common[v] and not unique_check[v]\
    \ then\n      unique_check[v] = true\n      for _, v2 in ipairs(l2) do\n     \
    \   if v == v2 then\n          r[#r + 1] = v\n          break\n        end\n \
    \     end\n    end\n  end\n  for _, v in ipairs(r) do\n    unique_check[v] = nil\n\
    \  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7xyqhtg5.lua:9:\
    \ attempt to index a nil value (global 'not_common')\nstack traceback:\n\t/tmp/tmp7xyqhtg5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7xyqhtg5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local common\
    \ = {}\n    for k, v in pairs(l1) do\n        if l2[v] then\n            common[#common\
    \ + 1] = v\n        end\n    end\n    return sort(common)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp92wk2vpl.lua:13:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp92wk2vpl.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp92wk2vpl.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n            if\
    \ not contains(t, v) then\n                t[#t + 1] = v\n            end\n  \
    \      end\n    end\n    sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwh3of59d.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpwh3of59d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwh3of59d.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tif not l1 or\
    \ not l2 then return {} end\n\tlocal res = {}\n\tfor _, v in ipairs(l1) do\n\t\
    \tif util.contains(l2, v) then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\t\
    return util.numsort(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnj8_1f18.lua:10:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpnj8_1f18.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnj8_1f18.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    for _, v in ipairs(l1) do\n        if find(l2, v) then\n           \
    \ res[#res + 1] = v\n        end\n    end\n    return sort(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdtbjl7t_.lua:9:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmpdtbjl7t_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdtbjl7t_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local ret = {}\n\
    \  for k,v in pairs(l1) do\n    if type(v) == 'table' then\n      if l2[k] and\
    \ #v > 0 and #l2[k] > 0 then\n        local common_table = common(v, l2[k])\n\
    \        if #common_table > 0 then\n          ret[k] = common_table\n        end\n\
    \      end\n    else\n      if l2[k] and l2[k] == v then\n        ret[k] = v\n\
    \      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wh1hwo4.lua:28:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp4wh1hwo4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local c = {}\n\
    \  local map = {}\n  for _, v in ipairs(l1) do\n    map[v] = true\n  end\n  for\
    \ _, v in ipairs(l2) do\n    if map[v] then\n      c[#c + 1] = v\n    end\n  end\n\
    \  table.sort(c)\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1sir4rfs.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmp1sir4rfs.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local c = {}\n\
    \  local seen = {}\n  for _, v in ipairs(l1) do\n    if list.contains(l2, v) and\
    \ not seen[v] then\n      c[#c+1] = v\n      seen[v] = true\n    end\n  end\n\
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7bowpvwk.lua:10:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmp7bowpvwk.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp7bowpvwk.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for k, v in pairs(l1) do\n        if l2[v] then\n            t[v] = v\n \
    \       end\n    end\n    local r = {}\n    for k, v in pairs(t) do\n        r[#r\
    \ + 1] = v\n    end\n    table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmyllrwy.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpvmyllrwy.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    for _, v in ipairs(l1) do\n        for _, vv in ipairs(l2) do\n  \
    \          if v == vv then table.insert(result, v) end\n        end\n    end\n\
    \    return sort_unique(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4_rdgbq.lua:13:\
    \ attempt to call a nil value (global 'sort_unique')\nstack traceback:\n\t/tmp/tmpz4_rdgbq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpz4_rdgbq.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local a = {}\n\
    \    local b = {}\n    for k,v in pairs(l1) do\n        a[v] = true\n    end\n\
    \    for k,v in pairs(l2) do\n        if a[v] then\n            b[v] = true\n\
    \        end\n    end\n    return sorted_keys(b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kn48in7.lua:17:\
    \ attempt to call a nil value (global 'sorted_keys')\nstack traceback:\n\t/tmp/tmp7kn48in7.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp7kn48in7.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local lut =\
    \ {}\n    for _, v in ipairs(l1) do\n        lut[v] = true\n    end\n    local\
    \ ret = {}\n    for _, v in ipairs(l2) do\n        if lut[v] then\n          \
    \  table.insert(ret, v)\n        end\n    end\n    table.sort(ret)\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3e45l15.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpi3e45l15.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _, v in ipairs(l1) do\n    t[v] = true\n  end\n  local r = {}\n  for _,\
    \ v in ipairs(l2) do\n    if t[v] then\n      r[#r + 1] = v\n    end\n  end\n\
    \  sort(r)\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ks8zmy8.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp5ks8zmy8.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp5ks8zmy8.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local out =\
    \ {}\n    for i, e in ipairs(l1) do\n        for j, f in ipairs(l2) do\n     \
    \       if e == f then\n                tinsert(out, e)\n                break\n\
    \            end\n        end\n    end\n    return table.sort(out)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgoxdjde1.lua:11:\
    \ attempt to call a nil value (global 'tinsert')\nstack traceback:\n\t/tmp/tmpgoxdjde1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpgoxdjde1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal r = {}\n\
    \tfor i, v in ipairs(l1) do\n\t\tfor j, w in ipairs(l2) do\n\t\t\tif v == w then\n\
    \t\t\t\tinsert(r, v)\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn unique(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3f0snto1.lua:11:\
    \ attempt to call a nil value (global 'insert')\nstack traceback:\n\t/tmp/tmp3f0snto1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp3f0snto1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local found\
    \ = {}\n    for i, a in ipairs(l1) do\n        for j, b in ipairs(l2) do\n   \
    \         if a == b and not found[a] then\n                found[a] = true\n \
    \           end\n        end\n    end\n    local res = {}\n    for k, v in pairs(found)\
    \ do\n        table.insert(res, k)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwpreynf.lua:25:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmpxwpreynf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n\tlocal r = {}\n\
    \tl1 = l1 or {}\n\tl2 = l2 or {}\n\tfor _, v in ipairs(l1) do\n\t\tif match(l2,\
    \ v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\tsort(r)\n\treturn r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphpia316z.lua:11:\
    \ attempt to call a nil value (global 'match')\nstack traceback:\n\t/tmp/tmphpia316z.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphpia316z.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local copy\
    \ = {}\n    for _, v in ipairs(l1) do copy[v] = true end\n    for _, v in ipairs(l2)\
    \ do\n        if copy[v] then\n            copy[v] = nil\n            copy[#copy+1]\
    \ = v\n        end\n    end\n    return copy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynyeowge.lua:21:\
    \ expected: {1, 5, 653}\nactual: {2=true, 3=true, 4=true, 6=1, 7=5, 8=653, 34=true}\n\
    stack traceback:\n\t/tmp/tmpynyeowge.lua:21: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local c = {}\n\
    \    local map = {}\n    for _,v in ipairs(l1) do\n        map[v] = true\n   \
    \ end\n    for _,v in ipairs(l2) do\n        if map[v] then\n            c[#c+1]\
    \ = v\n        end\n    end\n    sort(c)\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt4ak0z10.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpt4ak0z10.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpt4ak0z10.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local common\
    \ = {}\n    local seen = {}\n    for _, v in ipairs(l1) do\n        seen[v] =\
    \ true\n    end\n    for _, v in ipairs(l2) do\n        if seen[v] then\n    \
    \        table.insert(common, v)\n        end\n    end\n    return common\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplk4x6gz2.lua:23:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmplk4x6gz2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    if type(l1)\
    \ ~= 'table' or type(l2) ~= 'table' then\n        error(\"Table expected\")\n\
    \    end\n    local l3 = {}\n    for _, e in ipairs(l1) do\n        if contains(l2,\
    \ e) then\n            append(l3, e)\n        end\n    end\n    return sort(l3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpon8v9yg1.lua:12:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpon8v9yg1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpon8v9yg1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local s = {}\n\
    \    for _, v in ipairs(l1) do\n        if contains(l2, v) then s[#s+1] = v end\n\
    \    end\n    return sort_uniq(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsje0d5x0.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpsje0d5x0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsje0d5x0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local c = {}\n\
    \  for k, v in pairs(l1) do c[v] = true end\n  for k, v in pairs(l2) do c[v] =\
    \ (c[v] and true or nil) end\n  local a = {}\n  for k, v in pairs(c) do a[#a+1]\
    \ = k end\n  table.sort(a)\n  return a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0u9elh4.lua:19:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5, 34, 653}\nstack traceback:\n\t\
    /tmp/tmpw0u9elh4.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978445
- exit_code: 1
  program: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n    local r = {}\n\
    \    local ri = 1\n    local l1i, l2i = 1, 1\n    while l1i <= #l1 and l2i <=\
    \ #l2 do\n        if l1[l1i] == l2[l2i] then\n            r[ri] = l1[l1i]\n  \
    \          ri = ri + 1\n            l1i = l1i + 1\n            l2i = l2i + 1\n\
    \        elseif l1[l1i] < l2[l2i] then\n            l1i = l1i + 1\n        else\n\
    \            l2i = l2i + 1\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq22avoaw.lua:28:\
    \ expected: {1, 5, 653}\nactual: {653}\nstack traceback:\n\t/tmp/tmpq22avoaw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978445
