language: lua
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local t = {}\n    for char in string:gmatch(\".\") do\n\
    \        if not t[char:lower()] then\n            t[char:lower()] = 1\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- lowercase string\n  string = string:lower()\n  local chars = {}\n  for char\
    \ in string:gmatch('.') do\n    chars[char] = true\n  end\n  return table_size(chars)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsk5z451t.lua:13:\
    \ attempt to call a nil value (global 'table_size')\nstack traceback:\n\t/tmp/tmpsk5z451t.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpsk5z451t.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_set = {}\n    local uppercase_string = string:upper()\n    for\
    \ char in uppercase_string:gmatch('.') do\n        char_set[char] = true\n   \
    \ end\n    return utils.table_size(char_set)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxpa7hs6m.lua:12:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpxpa7hs6m.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxpa7hs6m.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  local count = 0\n  local length = string.len(string)\n\
    \  for index = 1, length do\n    local character = string.sub(string, index, index)\n\
    \    if not characters[character] then\n      characters[character] = true\n \
    \     count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg76vg9mu.lua:25:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpg76vg9mu.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local string = string:lower()\n    local index = 1\n    local chars = {}\n\
    \    local found = false\n    while index <= #string do\n        for i,c in ipairs(chars)\
    \ do\n            if c == string:sub(index, index) then\n                found\
    \ = true\n                break\n            end\n        end\n        if not\
    \ found then\n            table.insert(chars, string:sub(index, index))\n    \
    \    end\n        index = index + 1\n        found = false\n    end\n    return\
    \ #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    local index = string:len()\n\
    \    while index > 0 do\n        if not characters[string:sub(index, index)] then\n\
    \            count = count + 1\n            characters[string:sub(index, index)]\
    \ = true\n        end\n        index = index - 1\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5rc7xt6.lua:25:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpd5rc7xt6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        characters[char:lower()] = true\n    end\n    return #characters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_0hsmda.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp0_0hsmda.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local charSet = {}\n    local count = 0\n    local len = #string\n    local\
    \ lower_string = string:lower()\n    for i = 1, len do\n        local c = lower_string:sub(i,\
    \ i)\n        if charSet[c] == nil then\n            charSet[c] = true\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- You write this part\n    local dict = {}\n    local count = 0\n    for\
    \ i = 1, #string do\n        local char = string:sub(i, i)\n        local upper_char\
    \ = char:upper()\n        if dict[upper_char] == nil then\n            dict[upper_char]\
    \ = 1\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return utils.string_to_set(string):size()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzyetgyj_.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpzyetgyj_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzyetgyj_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for char in string:gmatch('.') do\n    if not chars[char:lower()]\
    \ then\n      chars[char:lower()] = true\n    end\n  end\n  return table.length(chars)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplmbwq75a.lua:13:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmplmbwq75a.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplmbwq75a.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local result = {}\n    for char in string:gmatch('%a') do\n        if not\
    \ result[char:lower()] then\n            result[char:lower()] = true\n       \
    \ end\n    end\n    return count_table(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnbxa9o8s.lua:13:\
    \ attempt to call a nil value (global 'count_table')\nstack traceback:\n\t/tmp/tmpnbxa9o8s.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpnbxa9o8s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #unique_characters(string)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf10t2oc7.lua:7:\
    \ attempt to call a nil value (global 'unique_characters')\nstack traceback:\n\
    \t/tmp/tmpf10t2oc7.lua:7: in local 'candidate'\n\t/tmp/tmpf10t2oc7.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct = {}\n    local str = string:lower()\n    for i = 1, #str\
    \ do\n        distinct[str:sub(i, i)] = 1\n    end\n    return #distinct\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm108u_1.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpmm108u_1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return len(set(list(string.lower(string))))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphqmrdm5p.lua:7:\
    \ attempt to call a nil value (global 'list')\nstack traceback:\n\t/tmp/tmphqmrdm5p.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphqmrdm5p.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal characters = {}\n\tfor character in string:gmatch(\".\") do\n\t\tcharacters[character:lower()]\
    \ = true\n\tend\n\treturn #table.keys(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8a3watue.lua:11:\
    \ attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp8a3watue.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8a3watue.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal characters = {}\n\tfor c in string:gmatch('.') do\n\t\tcharacters[c:lower()]\
    \ = true\n\tend\n\treturn #characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ggkes7e.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp9ggkes7e.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tstring = string:lower()\n\tlocal character_list = {}\n\tfor i = 1, #string do\n\
    \t\tcharacter_list[string:sub(i, i)] = 1\n\tend\n\treturn table.getn(character_list)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpesckohk2.lua:12:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpesckohk2.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpesckohk2.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local seen = {}\n    local count = 0\n    for character in string:gmatch('.')\
    \ do\n        if not seen[character:lower()] then\n            seen[character:lower()]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \t-- TODO: IMPLEMENT ME\n\treturn 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iai90au.lua:15:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp_iai90au.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local dic = {}\n    for k, v in string.gmatch(string, \"([%w%s])\") do\n\
    \        if dic[k] == nil then\n            dic[k] = 1\n        end\n    end\n\
    \    return #dic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqqpg95c.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpjqqpg95c.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local length = string:len()\n    local last_char = string:sub(length, length)\n\
    \    local counts = {[last_char] = 1}\n    for i = 1, length - 1 do\n        local\
    \ char = string:sub(i, i)\n        counts[char] = (counts[char] or 0) + 1\n  \
    \  end\n    return get_count(counts)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr54p_j2w.lua:14:\
    \ attempt to call a nil value (global 'get_count')\nstack traceback:\n\t/tmp/tmpr54p_j2w.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpr54p_j2w.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local str = string.lower(string)\n  local tbl = {}\n  for i = 1, #str do\n\
    \    tbl[str:sub(i, i)] = true\n  end\n  return #tbl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10oosy09.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp10oosy09.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local unique = ''\n  for i = 1, string.len(string) do\n    local char = string.sub(string,\
    \ i, i)\n    if string.find(unique, char, 1, true) == nil then\n      unique =\
    \ unique .. char\n    end\n  end\n  return string.len(unique)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesksdxby.lua:22:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpesksdxby.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local tbl = {}\n    for char in string:gmatch(\".\") do\n        tbl[char:lower()]\
    \ = true\n    end\n    return #tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzz8_17sa.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpzz8_17sa.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_set = {}\n    local count = 0\n    local string_lower = string:lower()\n\
    \    for i = 1, #string_lower do\n        if char_set[string_lower:sub(i, i)]\
    \ == nil then\n            char_set[string_lower:sub(i, i)] = true\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009655
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local s = string:lower()\n    local seen = {}\n    local count = 0\n    for\
    \ c in s:gmatch('.') do\n        if not seen[c] then\n            seen[c] = true\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009655
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local string_lower = string:lower()\n    local count = 0\n    local characters\
    \ = {}\n    for i=1, string.len(string_lower) do\n        local character = string_lower:sub(i,\
    \ i)\n        if characters[character] == nil then\n            count = count\
    \ + 1\n            characters[character] = true\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    local count = 0\n    for i = 1, #string do\n \
    \       local character = string:sub(i, i)\n        if not characters[character]\
    \ then\n            characters[character] = true\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyhtqdo5.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmphyhtqdo5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_used = {}\n    local num_of_char = 0\n    for char in string:gmatch'.'\
    \ do\n        if not char_used[char:lower()] then\n            char_used[char:lower()]\
    \ = true\n            num_of_char = num_of_char + 1\n        end\n    end\n  \
    \  return num_of_char\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  string = string:lower()\n  local chars = {}\n  for c in string:gmatch('.')\
    \ do\n    chars[c] = true\n  end\n  return #chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6zekodq.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpv6zekodq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local all_chars = {}\n    for i = 1, #string do\n  \
    \      local current_char = string:sub(i, i)\n        if all_chars[current_char]\
    \ == nil then\n            count = count + 1\n            all_chars[current_char]\
    \ = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy7agj0a.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpyy7agj0a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal lower = string:lower()\n\tlocal count = 0\n\tfor i = 1, #lower do\n\t\t\
    local c = lower:sub(i, i)\n\t\tif not count_distinct_characters[c] then\n\t\t\t\
    count_distinct_characters[c] = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjztldykt.lua:11:\
    \ attempt to index a function value (upvalue 'count_distinct_characters')\nstack\
    \ traceback:\n\t/tmp/tmpjztldykt.lua:11: in local 'candidate'\n\t/tmp/tmpjztldykt.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local tmp = {}\n    for i=1, #string do\n        local\
    \ c = string:sub(i,i)\n        if not tmp[c] then\n            tmp[c] = true\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9o87cyg.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpp9o87cyg.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string:gmatch('.') do\n        if not chars[c:lower()]\
    \ then\n            chars[c:lower()] = true\n        end\n    end\n    return\
    \ (#chars)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlgkhrzr.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpvlgkhrzr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #utils.remove_duplicates(string:lower():gmatch(\"%a\"))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0egmsujv.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmp0egmsujv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0egmsujv.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7dwd7ckb.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp7dwd7ckb.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    --return count(list(set(list(string.lower(string)))))\n    return count(list(set(list(string))))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdy2w_ikh.lua:8:\
    \ attempt to call a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpdy2w_ikh.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpdy2w_ikh.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local dic = {}\n  for _, c in ipairs(string) do\n    dic[c] = true\n  end\n\
    \  return #dic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjfsbpr7.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpqjfsbpr7.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct = {}\n    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        if not distinct[string.lower(string:sub(i, i))] then\n         \
    \   distinct[string.lower(string:sub(i, i))] = true\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lhzpkep.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp6lhzpkep.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local unique = {}\n  local string = lower_case(string)\n  for i = 1, string.len(string)\
    \ do\n    unique[string.sub(string, i, i)] = true\n  end\n  return table.getn(unique)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpykg5z998.lua:8:\
    \ attempt to call a nil value (global 'lower_case')\nstack traceback:\n\t/tmp/tmpykg5z998.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpykg5z998.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for c in string:gmatch('.') do\n        characters[c:lower()]\
    \ = true\n    end\n    return table.getn(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpihja3ph1.lua:11:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpihja3ph1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpihja3ph1.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local used = {}\n  local count = 0\n  for k, v in string.gmatch(string, '.')\
    \ do\n    if not used[v:lower()] then\n      used[v:lower()] = true\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfi0jczs_.lua:10:\
    \ attempt to index a nil value (local 'v')\nstack traceback:\n\t/tmp/tmpfi0jczs_.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfi0jczs_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if #string == 0 then\n    return 0\n  end\n  string = string:lower()\n  local\
    \ seen = {}\n  local distinct_count = 0\n  for i=1,#string do\n    if not seen[string:sub(i,i)]\
    \ then\n      distinct_count = distinct_count + 1\n      seen[string:sub(i,i)]\
    \ = true\n    end\n  end\n  return distinct_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local unique = {}\n    for c in string:gmatch('.') do\n        unique[c:lower()]\
    \ = true\n    end\n    return h.len(unique)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphukyuvau.lua:11:\
    \ attempt to index a nil value (global 'h')\nstack traceback:\n\t/tmp/tmphukyuvau.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphukyuvau.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return utils.uniq(utils.to_lower(string):gmatch(\"%a\")).n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp03salknm.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmp03salknm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp03salknm.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lhzpkep.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp6lhzpkep.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string:gmatch('.') do\n        local key =\
    \ c:lower()\n        if not chars[key] then\n            chars[key] = true\n \
    \       end\n    end\n    return table.count(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvvl41ixe.lua:14:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpvvl41ixe.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpvvl41ixe.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return string:upper():gsub('[^%w]', ''):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cnypksr.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp0cnypksr.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for i = 1, #string do\n    local c = string:sub(i, i)\n\
    \    if not chars[c] then\n      chars[c] = true\n    end\n  end\n  return count_table_entries(chars)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8t_e522u.lua:14:\
    \ attempt to call a nil value (global 'count_table_entries')\nstack traceback:\n\
    \t/tmp/tmp8t_e522u.lua:14: in local 'candidate'\n\t/tmp/tmp8t_e522u.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #set.new(string:lower()):totable()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkl74kh1t.lua:7:\
    \ attempt to index a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpkl74kh1t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkl74kh1t.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars_table = {}\n    for c in string:gmatch('%w') do\n        local\
    \ uppercase_c = c:upper()\n        if not chars_table[uppercase_c] then\n    \
    \        chars_table[uppercase_c] = true\n        end\n    end\n    return #chars_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5zelxh2.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpe5zelxh2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if not string then return 0 end\n    local result = {}\n    for i = 1, #string\
    \ do\n        local c = string:sub(i, i)\n        local lc = c:lower()\n     \
    \   if not result[lc] then\n            result[lc] = true\n        end\n    end\n\
    \    return #result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchw7116u.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpchw7116u.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local found = {}\n  local count = 0\n  for i = 1, #string do\n    local char\
    \ = string:sub(i, i)\n    local lower_char = char:lower()\n    if found[lower_char]\
    \ == nil then\n      found[lower_char] = true\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal t={}\n\tlocal count=0\n\tfor i=1,#string do\n\t\tlocal char=string:sub(i,i)\n\
    \t\tif not t[char] then\n\t\t\tt[char]=1\n\t\t\tcount=count+1\n\t\tend\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug2kf5qf.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpug2kf5qf.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- Turn all the letters in the string into lowercase, so we only need to\
    \ count one of each letter\n    -- The gsub function can replace a match with\
    \ a string\n    -- gsub(string, match_pattern, replace_string)\n    -- In our\
    \ case, the match pattern is '[A-Z]' meaning any capital letter, and the replace_string\
    \ is '[A-Z]' transformed to lowercase\n    -- We could have used '[A-Z]' -> '[a-z]'\
    \ instead, but that would not have taught us anything\n    local lowercase_string\
    \ = string:gsub('[A-Z]',\n                                         function(c)\n\
    \                                             return c:lower()\n             \
    \                            end)\n    -- Now we can get the length of the string,\
    \ but taking the length of a table instead\n    -- We make a table by inserting\
    \ each character into a table\n    -- If we insert each character into a table\
    \ using table.insert, then we'll be sure that each character only appears once\
    \ in the table\n    local character_set = {}\n    for c in lowercase_string:gmatch('.')\
    \ do\n        table.insert(character_set, c)\n    end\n    return #character_set\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzcv1wdh.lua:31:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpjzcv1wdh.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \treturn #(string:lower()):gsub('[^%a]', '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7wos_gq.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpu7wos_gq.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local character_array = {}\n    for i=1, #string do\n        local character\
    \ = string:sub(i,i)\n        if not character_array[character] then\n        \
    \    character_array[character] = true\n        end\n    end\n    return #character_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzcf42xz.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmplzcf42xz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for char in string:gmatch('.') do\n        characters[char:lower()]\
    \ = true\n    end\n    return table.length(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8u7elgsk.lua:11:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmp8u7elgsk.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8u7elgsk.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local char_map = {}\n  for c in string:gmatch('%a') do\n    char_map[c:lower()]\
    \ = true\n  end\n  return tlen(char_map)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvdoq5a71.lua:11:\
    \ attempt to call a nil value (global 'tlen')\nstack traceback:\n\t/tmp/tmpvdoq5a71.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpvdoq5a71.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct = {}\n    local characters = to_lower_case(string)\n    for\
    \ i = 1, #characters do\n        distinct[characters:sub(i, i)] = true\n    end\n\
    \    return #keys(distinct)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzpw0vdb0.lua:8:\
    \ attempt to call a nil value (global 'to_lower_case')\nstack traceback:\n\t/tmp/tmpzpw0vdb0.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzpw0vdb0.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return count_distinct(string:lower():split())\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnxwnztb8.lua:7:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpnxwnztb8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnxwnztb8.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local set = {}\n  local i = 1\n  while i <= #string do\n    set[string:sub(i,\
    \ i)] = true\n    i = i + 1\n  end\n  return #set\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph87lh0zo.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmph87lh0zo.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal set = {}\n\tlocal case_insensitive_string = string:lower()\n\tfor char\
    \ in case_insensitive_string:gmatch('.') do\n\t\tset[char] = true\n\tend\n\treturn\
    \ #set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpak5u0f96.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpak5u0f96.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local dictionary = {}\n    for i = 1, #string do\n        local character\
    \ = string:sub(i, i)\n        if not dictionary[character] then\n            dictionary[character]\
    \ = true\n        end\n    end\n    return #dictionary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajoxrrru.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpajoxrrru.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local lowercase = string:lower()\n    local lookup = {}\n    for i = 1, #lowercase\
    \ do\n        lookup[lowercase:sub(i, i)] = true\n    end\n    return #lowercase,\
    \ #lowercase ~= table.length(lookup)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_cyxdqos.lua:12:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmp_cyxdqos.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_cyxdqos.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, string.len(string) do\n        local char\
    \ = string.sub(string, i, i)\n        chars[char] = true\n    end\n    return\
    \ table.size(chars)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphpxn75qb.lua:12:\
    \ attempt to call a nil value (field 'size')\nstack traceback:\n\t/tmp/tmphpxn75qb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphpxn75qb.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for i = 1, #string do\n        local n = string.sub(string,\
    \ i, i)\n        local found = false\n        for j = 0, count - 1 do\n      \
    \      if n == string.sub(string, j + 1, j + 1) then\n                found =\
    \ true\n                break\n            end\n        end\n        if not found\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe93f4emz.lua:29:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpe93f4emz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- TODO: implement this\n    local set = {}\n    local count = 0\n    for\
    \ i = 1, string.len(string) do\n        if set[string.sub(string, i, i)] == nil\
    \ then\n            set[string.sub(string, i, i)] = 1\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysj4_jhz.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpysj4_jhz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local exists = {}\n    for i = 1, #string do\n     \
    \   local c = string:sub(i, i)\n        local c_lower = c:lower()\n        if\
    \ not exists[c_lower] then\n            count = count + 1\n            exists[c_lower]\
    \ = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal chars = {}\n\tlocal count = 0\n\tfor char in string:gmatch('.') do\n\t\
    \tif not chars[char:lower()] then\n\t\t\tchars[char:lower()] = 1\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local t = {}\n    for _, c in ipairs(string:lower():split('')) do\n     \
    \   t[c] = true\n    end\n    return table.size(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptd2tnut3.lua:8:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmptd2tnut3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmptd2tnut3.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return len(distinct_characters(string))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo169ik_y.lua:7:\
    \ attempt to call a nil value (global 'distinct_characters')\nstack traceback:\n\
    \t/tmp/tmpo169ik_y.lua:7: in local 'candidate'\n\t/tmp/tmpo169ik_y.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local str = {}\n  for i=1,#string do\n    str[string.lower(string:sub(i,i))]\
    \ = true\n  end\n  return #str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblg3176g.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpblg3176g.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local table_of_distinct_characters = {}\n    for character in string:gmatch('.')\
    \ do\n        table_of_distinct_characters[character:lower()] = true\n    end\n\
    \    return table_size(table_of_distinct_characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5xihgero.lua:11:\
    \ attempt to call a nil value (global 'table_size')\nstack traceback:\n\t/tmp/tmp5xihgero.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5xihgero.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- Create an empty set for unique characters\n  local unique_characters = {}\n\
    \  -- Transform each character from the string to an appropriate lowercase character\n\
    \  -- and add it to the set\n  for character in string:gmatch('%w') do\n    unique_characters[character:lower()]\
    \ = true\n  end\n  -- Return the number of unique characters in the set\n  return\
    \ #unique_characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9ehwxvu.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpa9ehwxvu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    string = string:lower()\n    local char_table = {}\n    for i = 1, #string\
    \ do\n        char_table[string:sub(i, i)] = true\n    end\n    return #char_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp092sgs52.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp092sgs52.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for i = 1, string.len(string) do\n    if not characters[string.lower(string.sub(string,\
    \ i, i))] then\n      characters[string.lower(string.sub(string, i, i))] = 1\n\
    \    end\n  end\n  return table.count(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcyqs4im.lua:13:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmphcyqs4im.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphcyqs4im.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local set = {}\n  for s in string:gmatch(\"[%a]\") do\n    set[s:lower()] =\
    \ true\n  end\n  return table_size(set)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm8xnsquk.lua:11:\
    \ attempt to call a nil value (global 'table_size')\nstack traceback:\n\t/tmp/tmpm8xnsquk.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpm8xnsquk.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local t = { }\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        t[c] = true\n    end\n    return #t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppn_1nvvs.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmppn_1nvvs.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    local distinct_chars = 0\n    local lower_string =\
    \ string:lower()\n    for i = 1, #lower_string do\n        local char = lower_string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \      distinct_chars = distinct_chars + 1\n        end\n    end\n    return distinct_chars\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    --[[\n        We'll use a dictionary to count how many times each character\
    \ has occurred\n        If a character has occurred 0 times, it doesn't exist\
    \ in the string\n    ]]\n    local count = {}\n    local total = 0\n    -- Loop\
    \ through the string\n    for i=1, #string do\n        -- Set the current character\
    \ as the key in the dictionary\n        -- If the key already exists, add 1 to\
    \ the value\n        -- If the key doesn't exist, set the value to 1\n       \
    \ count[string:sub(i,i)] = (count[string:sub(i,i)] or 0) + 1\n    end\n    --\
    \ Loop through the dictionary of characters\n    for key, value in pairs(count)\
    \ do\n        -- If a character has occurred at least once\n        if value >\
    \ 0 then\n            -- Add 1 to the total\n            total = total + 1\n \
    \       end\n    end\n    -- Return the total\n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzo7q3ivy.lua:37:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpzo7q3ivy.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local table_of_characters = {};\n  local distinct_characters = 0;\n  for character\
    \ in string:gmatch(\"%a\") do\n    table_of_characters[character:lower()] = true;\n\
    \  end\n  for _ in pairs(table_of_characters) do\n    distinct_characters = distinct_characters\
    \ + 1;\n  end\n  return distinct_characters;\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2l9t3e2d.lua:25:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmp2l9t3e2d.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for c in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\\
    191]*\") do\n    if not characters[c] then\n      characters[c] = true\n     \
    \ count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72sgbhe7.lua:9:\
    \ attempt to index a nil value (global 'characters')\nstack traceback:\n\t/tmp/tmp72sgbhe7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp72sgbhe7.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local index = string.lower(string:sub(i,\
    \ i))\n        if not characters[index] then\n            characters[index] =\
    \ 1\n        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxgkbhmy.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpnxgkbhmy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local list = chars_array(string)\n    local set = Set(list)\n    return #set\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfm4n9fdt.lua:7:\
    \ attempt to call a nil value (global 'chars_array')\nstack traceback:\n\t/tmp/tmpfm4n9fdt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfm4n9fdt.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return count_occurrences(string:lower())\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbdrak_c0.lua:7:\
    \ attempt to call a nil value (global 'count_occurrences')\nstack traceback:\n\
    \t/tmp/tmpbdrak_c0.lua:7: in local 'candidate'\n\t/tmp/tmpbdrak_c0.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return count_unique(string:upper():gmatch('%a'))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbw3w2000.lua:7:\
    \ attempt to call a nil value (global 'count_unique')\nstack traceback:\n\t/tmp/tmpbw3w2000.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbw3w2000.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- TODO: Implement this function\n  -- This is an example of how to use a set\n\
    \  local s = set.new()\n  for c in string:gmatch(\".\") do\n    s:add(c:lower())\n\
    \  end\n  return s:length()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc18rb6_c.lua:9:\
    \ attempt to index a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpc18rb6_c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpc18rb6_c.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- Turn string into a set, omitting duplicates.\n    local set = {}\n   \
    \ for character in string:gmatch('%w') do\n        set[character:lower()] = true\n\
    \    end\n    -- Return size of the set.\n    return #set\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vqm29iu.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp4vqm29iu.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- TODO: implement\n    return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyh4b8zh.lua:15:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpsyh4b8zh.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for i = 1, #string do\n    local letter = string:sub(i,\
    \ i)\n    if not string.find(string:sub(1, i - 1), letter) then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdyy_hjd.lua:22:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpjdyy_hjd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return count_distinct(string:upper():to_chars())\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2ogguz4.lua:7:\
    \ attempt to call a nil value (method 'to_chars')\nstack traceback:\n\t/tmp/tmps2ogguz4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps2ogguz4.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1,#string do\n  \
    \      local char = string:sub(i,i)\n        char = char:lower()\n        if characters[char]\
    \ == nil then\n            count = count + 1\n            characters[char] = true\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct_characters = {}\n    local count = 0\n    for i = 1, #string\
    \ do\n        local c = string:sub(i, i)\n        if not distinct_characters[c]\
    \ then\n            distinct_characters[c] = 1\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07sx0dkk.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp07sx0dkk.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for char in string:gmatch(\".\") do\n    count = count +\
    \ 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf_idky9.lua:19:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpaf_idky9.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return string:lower():gsub('[^%a]', ''):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp069ptojb.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp069ptojb.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_map = {}\n    local count = 0\n    for char in string:gmatch('.')\
    \ do\n        if char_map[char] == nil then\n            char_map[char] = 1\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbegqi355.lua:23:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpbegqi355.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #(string:lower():gsub('%a', ''))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv7eds9a.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpjv7eds9a.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local charmap = {}\n    for i = 1, #string do\n        charmap[string:sub(i,\
    \ i)] = 1\n    end\n    return #charmap\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg5aesvb.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpxg5aesvb.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local dist_chars = {}\n  local count = 0\n  for i = 1, #string do\n    if not\
    \ dist_chars[string:sub(i, i)] then\n      dist_chars[string:sub(i, i)] = true\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dem3ae1.lua:23:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp0dem3ae1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal characters = {}\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i,\
    \ i)\n\t\tcharacters[char:lower()] = true\n\tend\n\treturn table_length(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphj4v_vmw.lua:12:\
    \ attempt to call a nil value (global 'table_length')\nstack traceback:\n\t/tmp/tmphj4v_vmw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphj4v_vmw.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local hash = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    hash[char:lower()] = 1\n  end\n  return len(hash)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt7xxnw9v.lua:12:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpt7xxnw9v.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpt7xxnw9v.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #table.unique(table.keys(table.create_table_from_string(string)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvk4uad6j.lua:7:\
    \ attempt to call a nil value (field 'create_table_from_string')\nstack traceback:\n\
    \t/tmp/tmpvk4uad6j.lua:7: in local 'candidate'\n\t/tmp/tmpvk4uad6j.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_set = {}\n    for char in string:gmatch(\"%w\") do\n        char_set[char:lower()]\
    \ = true\n    end\n    return table.length(char_set)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwaszwnsi.lua:11:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpwaszwnsi.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwaszwnsi.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct_characters = {}\n    for i = 1, string.len(string) do\n  \
    \      local c = string.sub(string, i, i)\n        distinct_characters[c] = true\n\
    \    end\n    return table.getn(distinct_characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu8_mqaee.lua:12:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpu8_mqaee.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpu8_mqaee.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal character_set = {}\n\tfor char in string:gmatch('.') do\n\t\tcharacter_set[char:lower()]\
    \ = true\n\tend\n\treturn character_set:len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubgziwyz.lua:11:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpubgziwyz.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpubgziwyz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal dict = {}\n\tfor i = 1, string.len(string) do\n\t\tlocal char = string.sub(string,\
    \ i, i)\n\t\tif not dict[char] then\n\t\t\tdict[char] = true\n\t\tend\n\tend\n\
    \treturn table.length(dict)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8g5kb79v.lua:14:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmp8g5kb79v.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp8g5kb79v.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lhzpkep.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp6lhzpkep.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local hash = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    if not hash[char] then\n      hash[char] = true\n    end\n  end\n  return\
    \ count_table_keys(hash)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyczf_y6r.lua:14:\
    \ attempt to call a nil value (global 'count_table_keys')\nstack traceback:\n\t\
    /tmp/tmpyczf_y6r.lua:14: in local 'candidate'\n\t/tmp/tmpyczf_y6r.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local t = {}\n  for c in string:gmatch(\".\") do\n    t[c:lower()] = true\n\
    \  end\n  return utils.len(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzsv3o31i.lua:11:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpzsv3o31i.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzsv3o31i.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local character_table = {}\n    for char in string:gmatch('%a') do\n    \
    \    character_table[char:lower()] = true\n    end\n    return #character_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9e6lqm5e.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp9e6lqm5e.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \treturn #string -- to be replaced with real implementation\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp73su8z.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpnp73su8z.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal set = {}\n\tlocal length = 0\n\tlocal string_lower = string:lower()\n\t\
    for i = 1, #string_lower do\n\t\tlocal character = string_lower:sub(i, i)\n\t\t\
    if not set[character] then\n\t\t\tset[character] = true\n\t\t\tlength = length\
    \ + 1\n\t\tend\n\tend\n\treturn length\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal distinct = {}\n\tfor char in string:gmatch('.') do\n\t\tdistinct[char:lower()]\
    \ = true\n\tend\n\treturn table.length(distinct)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpar1zacty.lua:11:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpar1zacty.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpar1zacty.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #(string:lower()):gsub('%a', '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbi4ds_25.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpbi4ds_25.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #set.new(string:lower():gmatch('.'))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpznby8xsn.lua:7:\
    \ attempt to index a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpznby8xsn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpznby8xsn.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if string == '' then\n        return 0\n    end\n    local seen = {}\n  \
    \  local count = 0\n    local first_char = string.sub(string, 1, 1)\n    local\
    \ lower_first_char = string.lower(first_char)\n    seen[lower_first_char] = true\n\
    \    count = count + 1\n    for i = 2, string.len(string) do\n        char = string.sub(string,\
    \ i, i)\n        lower_char = string.lower(char)\n        if not seen[lower_char]\
    \ then\n            seen[lower_char] = true\n            count = count + 1\n \
    \       end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local t = {}\n  local count = 0\n  for _, v in utf8.codes(string) do\n    if\
    \ t[v] == nil then\n      t[v] = 1\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtiyojzi.lua:23:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpwtiyojzi.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #(mw.ustring.gsub(mw.ustring.lower(string), \"[^%a]\", \"\"))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkf_9mm7f.lua:7:\
    \ attempt to index a nil value (global 'mw')\nstack traceback:\n\t/tmp/tmpkf_9mm7f.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkf_9mm7f.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local set = {}\n  local length = 0\n  for char in utf8.gmatch(string, \".\"\
    ) do\n    if not set[char] then\n      set[char] = true\n      length = length\
    \ + 1\n    end\n  end\n  return length\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp94388ij_.lua:9:\
    \ attempt to call a nil value (field 'gmatch')\nstack traceback:\n\t/tmp/tmp94388ij_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp94388ij_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- Return the correct result\n  -- hints: \n  --     use the string:lower()\
    \ method to map the string to all lower case\n  --     use the # operator to get\
    \ the size of a table\n  --     use the table:insert() method to insert a new\
    \ value into a table\n  --     use the table:remove() method to remove an existing\
    \ value from a table\n  --     use the table:sort() method to sort a table\n \
    \ --     use the pairs() method to visit all key-value pairs in a table\n  --\
    \     use the string:sub() method to return a substring\n  local result = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1l45twbe.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    if #string == 0 then\n        return 0\n    end\n    local str = string.lower(string)\n\
    \    local unique_chars = ''\n    for _, char in ipairs({string.byte(str, 1, #str)})\
    \ do\n        local char_str = string.char(char)\n        if string.find(unique_chars,\
    \ char_str) == nil then\n            unique_chars = unique_chars .. char_str\n\
    \        end\n    end\n    return #unique_chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct = {}\n    for i=1,#string do\n        if not distinct[string:sub(i,i):lower()]\
    \ then\n            distinct[string:sub(i,i):lower()] = true\n        end\n  \
    \  end\n    return #distinct\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ua05ksy.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp0ua05ksy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal str = {}\n\tfor i = 1, string.len(string) do\n\t\tstr[string.sub(string,\
    \ i, i)] = 1\n\tend\n\treturn table.getn(str)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgxa4scv.lua:11:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpdgxa4scv.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpdgxa4scv.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local counter = 0\n    local characters = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            counter = counter + 1\n            characters[char] = true\n    \
    \    end\n    end\n    return counter\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8x_kd501.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp8x_kd501.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    local count = 0\n    local len = #string\n   \
    \ for i = 1, len do\n        local c = string:sub(i, i)\n        if not characters[c]\
    \ then\n            characters[c] = true\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpreyu6nxh.lua:25:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpreyu6nxh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #tostring(string):gsub('[^A-Za-z]', ''):gsub('(.)(.*)%1', '%2'):gsub('(.)(.*)%1',\
    \ '%2')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp824u_vxm.lua:15:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp824u_vxm.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for character in string:gmatch('.')\
    \ do\n        if not characters[character:lower()] then\n            count = count\
    \ + 1\n            characters[character:lower()] = true\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return table.len(string:lower():split(''))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw299ismi.lua:7:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpw299ismi.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpw299ismi.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local cs = {}\n  for i = 1, #string do\n    cs[string:sub(i, i):lower()] =\
    \ true\n  end\n  return #cs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqqy6n7c.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpiqqy6n7c.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \t--[[ TODO: refactor (minimize) ]]\n\tlocal count = 0\n\tlocal s = {}\n\tlocal\
    \ function helper(c)\n\t\tif not s[c] then\n\t\t\ts[c] = true\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\tforEachChar(string, helper)\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5su9lt4x.lua:16:\
    \ attempt to call a nil value (global 'forEachChar')\nstack traceback:\n\t/tmp/tmp5su9lt4x.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp5su9lt4x.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local set = {}\n  for i=1, #string do\n    set[lower(string:sub(i,i))] = true\n\
    \  end\n  return len(set)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmcyjoosx.lua:11:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpmcyjoosx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmcyjoosx.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local len = string.len(string)\n  local seen = {}\n  local count = 0\n  for\
    \ i = 1, len do\n    if not seen[string.sub(string, i, i)] then\n      seen[string.sub(string,\
    \ i, i)] = true\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32q5ezxm.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp32q5ezxm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct_characters = {}\n    local n = 0\n    for char in string:gmatch('.')\
    \ do\n        if not distinct_characters[char:lower()] then\n            distinct_characters[char:lower()]\
    \ = true\n            n = n + 1\n        end\n    end\n    return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local index = string.sub(string,\
    \ i, i)\n        if not characters[index] then\n            characters[index]\
    \ = index\n        end\n    end\n    return count_table_keys(characters)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacx9wbx1.lua:14:\
    \ attempt to call a nil value (global 'count_table_keys')\nstack traceback:\n\t\
    /tmp/tmpacx9wbx1.lua:14: in local 'candidate'\n\t/tmp/tmpacx9wbx1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local t = {}\n  for i = 1, #string do\n    local c = string:sub(i, i)\n   \
    \ t[c:lower()] = c\n  end\n  return #t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu33cr_w.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpgu33cr_w.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #(string:lower():gsub('[^%a]', ''))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hr3qm89.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp7hr3qm89.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch(\".\") do\n   \
    \     characters[character:lower()] = true\n    end\n    return table.count(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8j_j16t8.lua:11:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmp8j_j16t8.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8j_j16t8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  local existed = {}\n  for _, c in ipairs(string) do\n  \
    \  if existed[c] == nil then\n      count = count + 1\n      existed[c] = true\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdafs6vix.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpdafs6vix.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local char_hash = {\n    upper_case = {},\n    lower_case = {}\n  }\n  for\
    \ i = 1, #string do\n    local char = string:sub(i, i)\n    if char:match('%u')\
    \ then\n      char_hash.upper_case[char] = true\n    elseif char:match('%l') then\n\
    \      char_hash.lower_case[char] = true\n    end\n  end\n  return #char_hash.upper_case\
    \ + #char_hash.lower_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcz9r_kx0.lua:26:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpcz9r_kx0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local unique = {}\n    local count = 0\n    for i = 1, #string do\n     \
    \   if unique[string:sub(i, i):lower()] == nil then\n            unique[string:sub(i,\
    \ i):lower()] = true\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local s = string:lower()\n    local d = {}\n    for c in s:gmatch'.' do\n\
    \        d[c] = true\n    end\n    return #d\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfg66a9um.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpfg66a9um.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \tlocal result = {}\n\tlocal count = 0\n\tfor character in string:gmatch('.')\
    \ do\n\t\tif not result[character:lower()] then\n\t\t\tresult[character:lower()]\
    \ = 1\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local hash = {}\n    local count = 0\n    for i = 1, string.len(string) do\n\
    \        local char = string.sub(string, i, i)\n        if (hash[char] == nil)\
    \ then\n            hash[char] = 1\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95n5mbfw.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp95n5mbfw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local letters = {}\n    for char in string:gmatch('%a')\
    \ do\n        if not letters[char:lower()] then\n            letters[char:lower()]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv94e8j_f.lua:25:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmpv94e8j_f.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    string = string:lower()\n    local hash = {}\n    for c in string:gmatch('.')\
    \ do\n        hash[c] = true\n    end\n    return #hash\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpih72jd2h.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpih72jd2h.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local out = 0\n    local seen = {}\n    for c in string:gmatch(\".\") do\n\
    \        if not seen[c:lower()] then\n            out = out + 1\n            seen[c:lower()]\
    \ = true\n        end\n    end\n    return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return count_distinct(split(string))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiv9xyfcj.lua:7:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpiv9xyfcj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpiv9xyfcj.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for c in string:gmatch('%l') do\n        characters[c:lower()]\
    \ = true\n    end\n    return #tablex.keys(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfar_6g33.lua:11:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmpfar_6g33.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpfar_6g33.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return table.length(table.unique(string:explode('')))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnbhbckln.lua:7:\
    \ attempt to call a nil value (method 'explode')\nstack traceback:\n\t/tmp/tmpnbhbckln.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnbhbckln.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local char_map = {}\n  for _, char in ipairs(string) do\n    char_map[char]\
    \ = true\n  end\n  return count_keys(char_map)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmporik6m_w.lua:11:\
    \ attempt to call a nil value (global 'count_keys')\nstack traceback:\n\t/tmp/tmporik6m_w.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmporik6m_w.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- FIXME: Implement\n    -- FIXME: or just use this one: return #set.new(string:upper():gmatch('.'))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ssgw3ft.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp0ssgw3ft.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return count_distinct(sorted_characters(string))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_fxx_466.lua:7:\
    \ attempt to call a nil value (global 'sorted_characters')\nstack traceback:\n\
    \t/tmp/tmp_fxx_466.lua:7: in local 'candidate'\n\t/tmp/tmp_fxx_466.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i=1,string.len(string) do\n        chars[string.sub(string,\
    \ i, i)] = true\n    end\n    return chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5mwsiut.lua:17:\
    \ expected: 0, actual: {}\nstack traceback:\n\t/tmp/tmpd5mwsiut.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return table.length(count_characters(string))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqzmsp1jx.lua:7:\
    \ attempt to call a nil value (global 'count_characters')\nstack traceback:\n\t\
    /tmp/tmpqzmsp1jx.lua:7: in local 'candidate'\n\t/tmp/tmpqzmsp1jx.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- Create a dictionary of every character that exists in the string\n   \
    \ local char_hash = {}\n    for i = 1, #string do\n        char_hash[string:sub(i,\
    \ i)] = true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1hqlnp41.lua:23: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = string:lower():gsub('[^%a]', '')\n  return #chars\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxfwuocm.lua:16:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmprxfwuocm.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local total = 0\n  local char_list = {}\n  for char in string:gmatch('.') do\n\
    \    if not char_list[char:lower()] then\n      total = total + 1\n      char_list[char:lower()]\
    \ = true\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        if not chars[string.lower(string.sub(string, i, i))] then\n    \
    \        chars[string.lower(string.sub(string, i, i))] = 1\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local total = 0\n    local char_map = {}\n    for i = 1, string.len(string)\
    \ do\n        local c = string.sub(string, i, i)\n        local has_seen = false\n\
    \        for _, seen_c in pairs(char_map) do\n            if string.lower(c) ==\
    \ string.lower(seen_c) then\n                has_seen = true\n               \
    \ break\n            end\n        end\n        if not has_seen then\n        \
    \    char_map[i] = c\n            total = total + 1\n        end\n    end\n  \
    \  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local uniq = {}\n    local lower = string:lower()\n    for c in lower:gmatch('.')\
    \ do\n        uniq[c] = true\n    end\n    return table.getn(uniq)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfc25kqb.lua:12:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpcfc25kqb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpcfc25kqb.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch('.') do\n     \
    \   local uppercase_character = character:upper()\n        if not characters[uppercase_character]\
    \ then\n            characters[uppercase_character] = true\n        end\n    end\n\
    \    return #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacpcdfww.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpacpcdfww.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local processed = {}\n    for i = 1, #string do\n  \
    \      local c = string:sub(i, i)\n        if not processed[c] then\n        \
    \    count = count + 1\n            processed[c] = true\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9delx5i.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpx9delx5i.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local set = {}\n    for i = 1, #string do\n        local ch = string:sub(i,\
    \ i)\n        set[ch:lower()] = true\n    end\n    return #set\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej0xzbhc.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpej0xzbhc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if not char_info[c] then\n            char_info[c] = true\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpac4o1xi9.lua:10:\
    \ attempt to index a nil value (global 'char_info')\nstack traceback:\n\t/tmp/tmpac4o1xi9.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpac4o1xi9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local counts = {}\n    local lower_string = string:lower()\n    for char\
    \ in lower_string:gmatch('.') do\n        if counts[char] == nil then\n      \
    \      counts[char] = 0\n        end\n        counts[char] = counts[char] + 1\n\
    \    end\n    return table.getn(counts)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpir988npt.lua:15:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpir988npt.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpir988npt.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local used = {}\n    local count = 0\n    for i = 1, #string do\n       \
    \ local char = string:sub(i, i)\n        if not used[char] then\n            used[char]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotr0s612.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpotr0s612.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  local count = 0\n  for c in string:gmatch('.') do\n   \
    \ c = c:lower()\n    if not chars[c] then\n      chars[c] = true\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return #string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lhzpkep.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp6lhzpkep.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009655
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  -- Body goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaez_9uhw.lua:13:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpaez_9uhw.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct_characters = {}\n    for character in string:gmatch('.') do\n\
    \        local uppercase_character = character:upper()\n        if distinct_characters[uppercase_character]\
    \ == nil then\n            distinct_characters[uppercase_character] = true\n \
    \       end\n    end\n    return table.length(distinct_characters)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul063g1s.lua:14:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpul063g1s.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpul063g1s.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local character_counts = {}\n    for char in string:gmatch(\".\") do\n  \
    \      character_counts[char:lower()] = true\n    end\n    return #character_counts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zqe859c.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp6zqe859c.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- convert to lower case first\n    string = string:lower()\n    local characters\
    \ = {}\n    local count = 0\n    for i = 1, #string do\n        if not characters[string:sub(i,\
    \ i)] then\n            count = count + 1\n            characters[string:sub(i,\
    \ i)] = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local lower = string:lower()\n  local count = 0\n  for i = 1, #lower do\n \
    \   local c = lower:sub(i, i)\n    if not _distinct_characters[c] then\n     \
    \ _distinct_characters[c] = 1\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph6804dl0.lua:11:\
    \ attempt to index a nil value (global '_distinct_characters')\nstack traceback:\n\
    \t/tmp/tmph6804dl0.lua:11: in local 'candidate'\n\t/tmp/tmph6804dl0.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local unicode = require('unicode')\n    local utf8 = require('utf8')\n  \
    \  local h = {}\n    local index = 1\n    while index <= #string do\n        local\
    \ lower = unicode.lower(utf8.char(string:byte(index)))\n        h[lower] = true\n\
    \        index = index + 1\n    end\n    return #h\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprkw9vv5g.lua:7:\
    \ module 'unicode' not found:\n\tno field package.preload['unicode']\n\tno file\
    \ '/home/a.guha/.conda/envs/polyglot/share/lua/5.4/unicode.lua'\n\tno file '/home/a.guha/.conda/envs/polyglot/share/lua/5.4/unicode/init.lua'\n\
    \tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/unicode.lua'\n\tno file\
    \ '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/unicode/init.lua'\n\tno file\
    \ './unicode.lua'\n\tno file './unicode/init.lua'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/unicode.so'\n\
    \tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/loadall.so'\n\tno file\
    \ './unicode.so'\nstack traceback:\n\t/tmp/tmprkw9vv5g.lua:7: in local 'candidate'\n\
    \t/tmp/tmprkw9vv5g.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local unique_characters = {}\n    for character in string:gmatch('.') do\n\
    \        unique_characters[character:lower()] = true\n    end\n    return count_table_keys(unique_characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt0y1xfj0.lua:11:\
    \ attempt to call a nil value (global 'count_table_keys')\nstack traceback:\n\t\
    /tmp/tmpt0y1xfj0.lua:11: in local 'candidate'\n\t/tmp/tmpt0y1xfj0.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    string = string:lower()\n    local seen = {}\n    local distinct_chars =\
    \ 0\n    for i = 1, #string do\n        local char = string:sub(i, i)\n      \
    \  if not seen[char] then\n            distinct_chars = distinct_chars + 1\n \
    \           seen[char] = true\n        end\n    end\n    return distinct_chars\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchz14jnc.lua:13:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpchz14jnc.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for c in string:gmatch('.') do\n    chars[c:lower()] =\
    \ true\n  end\n  return table.length(chars)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvtaeoj8b.lua:11:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpvtaeoj8b.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpvtaeoj8b.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    -- lower case all characters in the string\n    string = string:lower()\n\
    \    local count = 0\n    local exists = {}\n    -- loop through the string\n\
    \    for i = 1, #string do\n        local char = string:sub(i, i)\n        --\
    \ if it doesn't exist in the hash yet, it's a distinct char\n        if exists[char]\
    \ == nil then\n            count = count + 1\n            exists[char] = true\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_set = {}\n    for char in string:gmatch(\".\") do\n        if\
    \ not char_set[char:lower()] then\n            char_set[char:lower()] = true\n\
    \        end\n    end\n    return table.size(char_set)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2g8z2mv1.lua:13:\
    \ attempt to call a nil value (field 'size')\nstack traceback:\n\t/tmp/tmp2g8z2mv1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2g8z2mv1.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars_set = {}\n    local chars_count = 0\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        local lower_char = char:lower()\n\
    \        if not chars_set[lower_char] then\n            chars_set[lower_char]\
    \ = true\n            chars_count = chars_count + 1\n        end\n    end\n  \
    \  return chars_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  if string == '' then\n    return 0\n  end\n  local s = string:lower()\n  local\
    \ found = {}\n  for i = 1, s:len() do\n    found[s:sub(i, i)] = true\n  end\n\
    \  return #found\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15__obi3.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp15__obi3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local set = {}\n    for i=1,string.len(string) do\n        if set[string.lower(string:sub(i,i))]\
    \ == nil then\n            set[string.lower(string:sub(i,i))] = true\n       \
    \ end\n    end\n    return table.getn(set)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgd38e9qy.lua:13:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpgd38e9qy.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpgd38e9qy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if not characters[char] then\n      characters[char] = true\n    end\n\
    \  end\n  return #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmpyttva.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpzmpyttva.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for char in string:gmatch('.') do\n        characters[char:lower()]\
    \ = true\n    end\n    return #characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9kv1gcf5.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp9kv1gcf5.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local hash = {}\n    local count = 0\n    for i = 1, #string do\n       \
    \ local char = string:sub(i, i)\n        if not hash[char] then\n            hash[char]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1h5gcd1.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpl1h5gcd1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local function aux(string, chars, result)\n        if string == '' then\n\
    \            return result\n        else\n            if not chars[string:sub(1,\
    \ 1)] then\n                chars[string:sub(1, 1)] = true\n                return\
    \ aux(string:sub(2), chars, result + 1)\n            else\n                return\
    \ aux(string:sub(2), chars, result)\n            end\n        end\n    end\n \
    \   return aux(string, {}, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmwy3fqy.lua:27:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmplmwy3fqy.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local counted = {}\n  for c in string:gmatch(\".\") do\n    counted[c:lower()]\
    \ = true\n  end\n  return #counted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwthzkrxc.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpwthzkrxc.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    return set.size(set.create(string:lower()))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpumyqvjii.lua:7:\
    \ attempt to index a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpumyqvjii.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpumyqvjii.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        chars[char:lower()] = true\n    end\n    return #chars\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmosaf49s.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpmosaf49s.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return len(set(string.lower(string)))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa1fsg3h2.lua:7:\
    \ attempt to call a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpa1fsg3h2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpa1fsg3h2.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_map = {}\n    for _, char in ipairs(convert_string_to_character_list(string))\
    \ do\n        char_map[char] = true\n    end\n    return num_items(char_map)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotbf9_ze.lua:8:\
    \ attempt to call a nil value (global 'convert_string_to_character_list')\nstack\
    \ traceback:\n\t/tmp/tmpotbf9_ze.lua:8: in local 'candidate'\n\t/tmp/tmpotbf9_ze.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local set = {}\n  for i = 1, #string do\n    set[string:sub(i, i)] = true\n\
    \  end\n  return #set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio9sadua.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpio9sadua.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local checker = {}\n  local count = 0\n  for i = 1, #string do\n    local ch\
    \ = string:sub(i, i)\n    if not checker[ch] then\n      checker[ch] = true\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92_bd9yj.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp92_bd9yj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for c in string:gmatch(\".\") do\n    characters[c:lower()]\
    \ = true\n  end\n  return table.size(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplb37wj6s.lua:11:\
    \ attempt to call a nil value (field 'size')\nstack traceback:\n\t/tmp/tmplb37wj6s.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmplb37wj6s.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009656
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  return #string:lower():gsub('[^%a]', '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputw5zj5l.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmputw5zj5l.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009656
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    local count = 0\n    for s in string:gmatch('.') do\n\
    \        local char = s:lower()\n        if chars[char] == nil then\n        \
    \    chars[char] = true\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009656
