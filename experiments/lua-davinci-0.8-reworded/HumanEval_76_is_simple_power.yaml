name: HumanEval_76_is_simple_power
language: lua
prompt: "-- Your task is to write a function that returns true if a number x is a\
  \ simple\n-- power of n and false in other cases.\n-- x is a simple power of n if\
  \ n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>> is_simple_power(2,\
  \ 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>> is_simple_power(3,\
  \ 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n-- >>> is_simple_power(5,\
  \ 3)\n-- false\nlocal function is_simple_power(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
  \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
  \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
  \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
  \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
  \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
  \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local i = 0\n    while n ^ i < x do\n        i = i + 1\n    end\n\
    \    return n ^ i == x\nend", "    -- your code goes here\nend", "    return x\
    \ > 0 and (math.floor(math.log(x) / math.log(n)) == (math.log(x) / math.log(n)))\n\
    end", "  local function helper(x, n, acc)\n    if x == 1 then\n      return true\n\
    \    elseif n > x then\n      return false\n    elseif n == x then\n      return\
    \ true\n    else\n      return helper(x / n, n, n * acc)\n    end\n  end\n  return\
    \ helper(x, n, 1)\nend", "    return x ~= 0 and x % n ^ math.floor(math.log(x)\
    \ / math.log(n)) == 0\nend", "  -- your code here\nend", "  if x == 0 then\n \
    \   return false\n  end\n  if n == 0 then\n    return false\n  end\n  local m\
    \ = math.log(x) / math.log(n)\n  if m ~= math.floor(m) then\n    return false\n\
    \  end\n  return true\nend", "  local exp, y = 1, n\n  while y < x do\n    y =\
    \ y * n\n    exp = exp + 1\n  end\n  return y == x\nend", "  if math.log(x) /\
    \ math.log(n) % 1 == 0 then\n    return true\n  else\n    return false\n  end\n\
    end", "    local a = math.log(x)/math.log(n)\n    if a - math.floor(a) == 0 then\n\
    \        return true\n    else\n        return false\n    end\nend", "  local\
    \ i = 1\n  while i <= x do\n    if i ^ n == x then\n      return true\n    end\n\
    \    i = i + 1\n  end\n  return false\nend", "\tlocal result = false\n\tfor i\
    \ = 0, x, 1 do\n\t\tif n ^ i == x then\n\t\t\tresult = true\n\t\tend\n\tend\n\t\
    return result\nend", "  return false\nend", "  -- calculate n^2, n^3, n^4, n^5,\
    \ n^6 ... as long as it is <=x\n  local int = 1\n  local n_int = n\n  while n_int\
    \ <= x do\n    if n_int == x then\n      return true\n    end\n    int = int +\
    \ 1\n    n_int = n * n_int\n  end\n  return false\nend", "  local x, n = tonumber(x),\
    \ tonumber(n)\n  if n <= 0 or x <= 0 then return false end\n  return x == n ^\
    \ math.floor(math.log(x) / math.log(n))\nend", "    local result = false\n   \
    \ local num = 0\n    for i = 1, x do\n        num = n ^ i\n        if num == x\
    \ then\n            result = true\n            break\n        end\n    end\n \
    \   return result\nend", "    for i = 1, 10 do\n        if x == n ^ i then\n \
    \           return true\n        end\n    end\n    return false\nend", "    local\
    \ i = 1\n    while math.pow(n, i) <= x do\n        if math.pow(n, i) == x then\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend", "  local k = 1\n  for i = 1, 100 do\n    if n ^ i == x then return\
    \ true end\n    if n ^ i > x then return false end\n  end\nend", "  return math.log(x,\
    \ n) % 1 == 0\nend", "  -- your code here\nend", "    for i = 0, x do\n      \
    \  if n^i == x then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    return n == 1 and x == 1 or n > 1 and x % n == 0 and is_simple_power(x\
    \ / n, n)\nend", end, "  return true\nend", "  local power = 1\n  while power\
    \ < x do\n    power = power * n\n  end\n  return power == x\nend", "  if x ==\
    \ 1 then return true end\n  local y = x\n  while y % n == 0 do\n    y = y / n\n\
    \  end\n  return y == 1\nend", "    local result = false\n    local i = 1\n  \
    \  while (n^i) < x do\n        i = i + 1\n    end\n    if n^i == x then\n    \
    \    result = true\n    end\n    return result\nend", "    local result = x\n\
    \    while result > 1 do\n        result = result / n\n    end\n    return result\
    \ == 1\nend", "  return n^math.floor(math.log(x)/math.log(n)) == x\nend", "  --\
    \ your code here\nend", "\tif x == 1 then\n\t\treturn true\n\tend\n\tlocal pow\
    \ = n\n\twhile pow < x do\n\t\tpow = pow * n\n\tend\n\treturn pow == x\nend",
  "    local i = 1\n    while n^i < x do\n        i = i + 1\n    end\n    return x\
    \ == n^i\nend", "    -- your code here\nend", "    return x ^ (1 / n) % 1 == 0\n\
    end", "    -- your code here\nend", "  if n == 1 then\n    return x == 1\n  end\n\
    \  if n == x then\n    return true\n  end\n  return x > n and math.mod(x, n) ==\
    \ 0 and is_simple_power(x / n, n)\nend", "    return math.log(x, n) % 1 == 0\n\
    end", "    -- your code here\nend", "  -- your solution here\nend", "    -- body\n\
    end", "\tlocal r, ri = math.frexp(x)\n\tif ri == 1 then\n\t\treturn false\n\t\
    end\n\tif r == 0 then\n\t\treturn true\n\tend\n\tif ri == 2 then\n\t\tlocal ri2\
    \ = math.floor(math.log(math.abs(r)) / math.log(n))\n\t\treturn ri2 == math.log(math.abs(r))\
    \ / math.log(n)\n\tend\n\treturn false\nend", "    return (math.log(x)/math.log(n))%1\
    \ == 0\nend", "  if x == 1 then return true end\n  for i = 2, (x/2) do\n    if\
    \ n^i == x then return true end\n  end\n  return false\nend", "  return math.floor(math.log(x,\
    \ n)) == math.log(x, n)\nend", "  return math.pow(n, math.floor(math.log(x)/math.log(n)))\
    \ == x\nend", "    return (x^(1/n)) % 1 == 0\nend", "  -- yay, math!\n  return\
    \ math.log(x, n) % 1 == 0\nend", "\treturn x == math.pow(n, math.floor(math.log(x)\
    \ / math.log(n)))\nend", "  if x < 1 or n < 1 then\n    return false\n  end\n\
    \  local log_result = math.log(x, n)\n  if log_result - math.floor(log_result)\
    \ == 0 then\n    return true\n  end\n  return false\nend", "    local b = math.floor(math.log(x)\
    \ / math.log(n))\n    return n^b == x\nend", "  return math.pow(n, math.floor(math.log(x)/math.log(n)))\
    \ == x\nend", "    if x == 1 then\n        return true\n    end\n    if x == n\
    \ then\n        return true\n    end\n    local pow = 1\n    while pow <= x do\n\
    \        if pow == x then\n            return true\n        end\n        pow =\
    \ pow * n\n    end\n    return false\nend", "    local int = math.log(x) / math.log(n)\n\
    \    return math.floor(int) == int\nend", "  -- body\nend", "  -- your code here\n\
    end", "  if x == 1 and n ~= 1 then\n    return false\n  end\n  local result =\
    \ x\n  local power = 1\n  while result >= n do\n    result = result / n\n    power\
    \ = power + 1\n  end\n  if result == 1 then\n    return true\n  else\n    return\
    \ false\n  end\nend", "end\n```", "\tlocal i = 1\n\twhile i*i <= x do\n\t\tif\
    \ i*i == x then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\n\
    end", "  if x == 1 then return true end\n  if x < 1 or n < 1 then return false\
    \ end\n  local current = 1\n  for i = 1, x do\n    current = current * n\n   \
    \ if current == x then return true end\n    if current > x then return false end\n\
    \  end\nend", "  return x == 1 or n^(math.log(x)/math.log(n)) == x\nend", "  local\
    \ function helper(x, n, prev_n)\n    if n > prev_n then\n      if x % n == 0 then\n\
    \        return helper(x/n, n, n)\n      else\n        return false\n      end\n\
    \    else\n      return x == 1\n    end\n  end\n  return helper(x, n, 1)\nend",
  "    return n ~= 1 and math.log(x, n) == math.floor(math.log(x, n))\nend", "  if\
    \ x == 1 and n ~= 1 then\n    return false\n  end\n  local i = 0\n  while n^i\
    \ < x do\n    i = i + 1\n  end\n  return n^i == x\nend", "    for i = 1, 10 do\n\
    \        if n^i == x then\n            return true\n        end\n    end\n   \
    \ return false\nend", "  if x == 1 then return true end\n  local i = 1\n  while\
    \ i * i <= x do\n    if i * i == x then return true end\n    i = i + 1\n  end\n\
    \  return false\nend", "    -- your code here\nend", "    for i = 1, x do\n  \
    \      if n^i == x then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    if (x == 1) then\n        return true\n    end\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\nend", "  --your code here\nend", " \
    \ if n == 1 then\n    return x == 1\n  end\n  if n < 1 or x < 1 then\n    return\
    \ false\n  end\n  local tmp = math.floor(math.log(x) / math.log(n))\n  return\
    \ n ^ tmp == x\nend", "    while true do\n        if x == 1 then\n           \
    \ return true\n        elseif x % n ~= 0 then\n            return false\n    \
    \    else\n            x = x / n\n        end\n    end\nend", "    local result\
    \ = false\n    for i = 0,x do\n        if x == math.pow(n,i) then\n          \
    \  result = true\n        end\n    end\n    return result\nend", "    local r\
    \ = 1\n    while true do\n        if r == x then\n            return true\n  \
    \      elseif r > x then\n            return false\n        end\n        r = r\
    \ * n\n    end\nend", "    if x == 1 then\n        return true\n    end\n    local\
    \ power = n\n    while power < x do\n        power = power * n\n    end\n    return\
    \ power == x\nend", "  if n == 1 then\n    return false\n  end\n  local power\
    \ = 0\n  local count = 1\n  local number = n\n  while number < x do\n    count\
    \ = count + 1\n    number = number * n\n  end\n  if number == x then\n    return\
    \ true\n  else\n    return false\n  end\nend", "    if x == 1 then\n        return\
    \ true\n    end\n    local p = math.floor(math.log(x, n))\n    return x == n ^\
    \ p\nend", "    local res = x\n    if n == 0 then\n        return x == 1\n   \
    \ end\n    if x == 1 then\n        return true\n    end\n    while res ~= 1 do\n\
    \        if res % n ~= 0 then\n            return false\n        end\n       \
    \ res = res / n\n    end\n    return true\nend", "  return true\nend", "  local\
    \ root = math.sqrt(x)\n  local power = root / n\n  return power == math.floor(power)\n\
    end", "    -- your code here\nend", "  -- your code here\nend", "  -- your code\
    \ here\nend", "    return is_simple_power(x, n)\nend", "    for i = 0, x do\n\
    \        if x == n ^ i then\n            return true\n        end\n    end\n \
    \   return false\nend", "  for i = 0, x do\n    if x == math.pow(n, i) then\n\
    \      return true\n    end\n  end\n  return false\nend", "    for i = 0, x do\n\
    \        if n ^ i == x then\n            return true\n        end\n    end\n \
    \   return false\nend", "  return x > 0 and x == math.floor(x) and n ^ math.log(x)\
    \ / math.log(n) == x\nend", "    -- insert your code here\nend", "\tif x < 1 or\
    \ n < 1 then\n\t\treturn false\n\tend\n\tlocal i = 1\n\twhile i < math.huge do\n\
    \t\tlocal t = n ^ i\n\t\tif t == x then\n\t\t\treturn true\n\t\telseif t > x then\n\
    \t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\nend", "  return x == 1 or (math.modf(math.log(x,\
    \ n)) == 0)\nend", "  -- your code here\nend", "  -- your code here\nend", " \
    \ -- YOUR CODE HERE\nend", "  local power = 1\n  while true do\n    if power ==\
    \ x then\n      return true\n    elseif power > x then\n      return false\n \
    \   end\n    power = power * n\n  end\nend", "    local root = math.floor(math.sqrt(x))\n\
    \    return n ~= 1 and (root ^ 2 == x and root == n or root ^ 2 ~= x and n ^ root\
    \ == x)\nend", "  -- body\nend", "    -- Write your code here\nend", "  return\
    \ x == n^math.floor(math.log(x)/math.log(n))\nend", "  local res = 1\n  for i\
    \ = 1, n - 1 do\n    res = res * n\n    if res == x then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local power = math.log(x) / math.log(n)\n\
    \  if math.floor(power) == power then\n    return true\n  else\n    return false\n\
    \  end\nend", "  if n == 1 then\n    return x == 1\n  end\n  if x == 1 then\n\
    \    return false\n  end\n  local i = n\n  while n <= x do\n    n = n * i\n  \
    \  if n == x then\n      return true\n    end\n  end\n  return false\nend", " \
    \ if x == 1 then return true end\n  if x < 1 or n < 1 then return false end\n\
    \  if x%n == 0 then\n    return is_simple_power(x/n, n)\n  else\n    return false\n\
    \  end\nend", "  if x == 1 then return true end\n  local res = 1\n  while res\
    \ < x do\n    res = res * n\n  end\n  return res == x\nend", end, "  -- your code\
    \ here\nend", "  if x < 0 or n < 0 then\n    return false\n  end\n  local function\
    \ is_pow(x, n)\n    local nn = n * n\n    if nn > x then\n      return false\n\
    \    elseif nn == x then\n      return true\n    else\n      return is_pow(x,\
    \ nn)\n    end\n  end\n  return is_pow(x, n)\nend", "  local y = 1\n  while y\
    \ < x do\n    y = y * n\n  end\n  return y == x\nend", "  for i = 0, 100 do\n\
    \    if x == n ^ i then\n      return true\n    end\n  end\n  return false\nend",
  "    if x == 1 then\n        return true\n    end\n    local count = 1\n    while\
    \ x > 1 do\n        x = x / n\n        if x == 1 then\n            return true\n\
    \        end\n        if x < 1 then\n            return false\n        end\n \
    \       count = count + 1\n    end\nend\nassert(is_simple_power(1, 4) == true)\n\
    assert(is_simple_power(2, 2) == true)\nassert(is_simple_power(8, 2) == true)\n\
    assert(is_simple_power(3, 2) == false)\nassert(is_simple_power(3, 1) == false)\n\
    assert(is_simple_power(5, 3) == false)", "  return (x == 1) or ((n ~= 1) and (x\
    \ % n == 0) and is_simple_power(x / n, n))\nend", "    for i = 0, x do\n     \
    \   if n^i == x then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    if x == 1 then\n        return true\n    end\n    local flag\
    \ = false\n    local q = 1\n    while q < x do\n        q = q * n\n        if\
    \ q == x then\n            flag = true\n        end\n    end\n    return flag\n\
    end", "  return math.pow(n, math.floor(math.log(x)/math.log(n))) == x\nend", " \
    \   local power = n\n    while power < x do\n        power = power * n\n    end\n\
    \    return power == x\nend", "  local power = math.log(x) / math.log(n)\n  if\
    \ math.floor(power) == power then\n    return true\n  else\n    return false\n\
    \  end\nend", "    if x == 1 then\n        return true\n    end\n    local i =\
    \ 2\n    while n ^ i <= x do\n        if n ^ i == x then\n            return true\n\
    \        end\n        i = i + 1\n    end\n    return false\nend", "  local p =\
    \ 0\n  for i = 0, x do\n    p = n^i\n    if p == x then\n      return true\n \
    \   end\n  end\n  return false\nend", "    return math.floor(math.log(x, n)) ==\
    \ math.log(x, n)\nend", "  return x == 1 or x == n\nend", "  return (x % n^(math.floor(math.log(x)/math.log(n)))\
    \ == 0)\nend", "  local power = 1\n  local count = 0\n  if x == 1 then\n    return\
    \ true\n  end\n  while power < x do\n    count = count + 1\n    power = n ^ count\n\
    \  end\n  if power == x then\n    return true\n  else\n    return false\n  end\n\
    end", "  return (x == 1 and n > 0) or (n > 0 and x % n == 0 and is_simple_power(x\
    \ / n, n))\nend", "  return not (x < 1 or n < 1) and x % n == 0 and x % (n ^ 2)\
    \ ~= 0\nend", "  if x == 1 then return true end\n  if x == 0 then return false\
    \ end\n  if x == n then return true end\n  if x % n == 0 then\n    return is_simple_power(x\
    \ / n, n)\n  end\n  return false\nend", "\treturn x % n == 0 and n % x == 0\n\
    end", "    local i = 1\n    while i < x do\n        i = i * n\n    end\n    return\
    \ i == x\nend", "  local power = 0\n  while x >= n do\n    x = x / n\n    power\
    \ = power + 1\n  end\n  return x == 1\nend", "    if x <= 0 or n <= 0 then\n \
    \       return false\n    end\n    return math.log(x, n) % 1 == 0\nend", "  --\
    \ calculate n**m\n  local n2m = n\n  while n2m < x do\n    n2m = n2m * n\n  end\n\
    \  -- check whether x == n**m\n  return n2m == x\nend", "  return x == 1 and n\
    \ == 1 or n ^ math.floor(math.log(x) / math.log(n)) == x\nend", "  local int =\
    \ 0\n  while true do\n    local temp = math.pow(n, int)\n    if temp == x then\n\
    \      return true\n    elseif temp > x then\n      return false\n    end\n  \
    \  int = int + 1\n  end\nend", "  local exp = math.log(x) / math.log(n)\n  return\
    \ math.floor(exp) == exp\nend", "    return n^(math.log(x) / math.log(n)) == x\n\
    end", "    if math.log(x) / math.log(n) == math.floor(math.log(x) / math.log(n))\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \ local x = x\n  local y = n\n  local z = y\n  while y < x do\n    z = y\n   \
    \ y = y * n\n  end\n  return x == z\nend", "  return math.log(x, n) == math.floor(math.log(x,\
    \ n))\nend", "  if x < 1 or n < 1 then\n    return false\n  end\n  local result\
    \ = 1\n  for i = 1, math.floor(math.log(x) / math.log(n)) do\n    result = result\
    \ * n\n  end\n  return result == x\nend", "  -- your code here\nend", "  -- your\
    \ code here\nend", "  -- your code here\nend", "    return x == 1 or (math.modf(math.log(x,\
    \ n)) == math.log(x, n))\nend", "  if n == 1 then\n    return false\n  end\n \
    \ local p = n\n  while p <= x do\n    if p == x then\n      return true\n    end\n\
    \    p = p * n\n  end\n  return false\nend", "  if x == 1 then return true end\n\
    \  local power = math.log(x) / math.log(n)\n  return math.floor(power) == power\n\
    end", "    -- your code here\nend", "  return math.log(x, n) % 1 == 0\nend", " \
    \ if x == 1 then return true end\n  if x < 1 or n == 1 then return false end\n\
    \  return (math.log(x)/math.log(n) % 1) == 0\nend", "  local p = 0\n  local pow\
    \ = 1\n  if x < 0 or n < 0 then\n    return false\n  end\n  while pow <= x do\n\
    \    pow = n ^ p\n    if pow == x then\n      return true\n    end\n    p = p\
    \ + 1\n  end\n  return false\nend", "  return x == math.floor(x / n) * n\nend",
  "    -- return x == math.floor(math.pow(n, math.floor(math.log(x) / math.log(n))))\n\
    \    return math.floor(math.log(x) / math.log(n)) == math.log(x) / math.log(n)\n\
    end", "    if x == 1 then\n        return true\n    end\n    for i = 2, x do\n\
    \        if n ^ i == x then\n            return true\n        end\n    end\n \
    \   return false\nend", "    if x == 1 then\n        return true\n    end\n  \
    \  local sqrt = math.sqrt(x)\n    return math.modf(sqrt) == sqrt and math.modf(math.log(x)\
    \ / math.log(n)) == math.log(x) / math.log(n)\nend", "  -- your code here\nend",
  "    for i = 1, 100000 do\n        if n ** i == x then\n            return true\n\
    \        end\n    end\n    return false\nend", "  for i = 0, x do\n    if n ^\
    \ i == x then\n      return true\n    end\n  end\n  return false\nend", "    return\
    \ x % math.pow(n, math.floor(math.log(x) / math.log(n))) == 0\nend", "  if x ==\
    \ 1 then return true end\n  local mul = 1\n  while mul < x do\n    mul = mul *\
    \ n\n    if mul == x then return true end\n  end\n  return false\nend", "  local\
    \ a = x / n\n  local b = math.log(a) / math.log(n)\n  return b - math.floor(b)\
    \ == 0\nend", "  if x == 1 then return true end\n  local p = 1\n  for i = 1, x\
    \ do\n    p = p * n\n    if p == x then return true end\n  end\n  return false\n\
    end", "    if x == 1 and n == 1 then\n        return true\n    end\n    if x ==\
    \ 1 and n ~= 1 then\n        return false\n    end\n    if x == n then\n     \
    \   return true\n    end\n    for i = 2, x, 1 do\n        if math.pow(n, i) ==\
    \ x then\n            return true\n        end\n    end\n    return false\nend\n\
    print(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8,\
    \ 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5,\
    \ 3))", "    local p = 1\n    while p <= x do\n        if p == x then\n      \
    \      return true\n        end\n        p = p * n\n    end\n    return false\n\
    end", "    -- check if x is integer and n is a positive integer\n    if x % 1\
    \ ~= 0 or n % 1 ~= 0 or n <= 0 then\n        return false\n    end", "    if x\
    \ == 1 then\n        return true\n    end\n    local i = 1\n    local res = n\n\
    \    while res < x do\n        res = res * n\n        i = i + 1\n    end\n   \
    \ if res == x then\n        return true\n    end\n    return false\nend", "  \
    \  return x ~= 0 and x % (n ^ (math.floor(math.log(x) / math.log(n)))) == 0\n\
    end", "  local result = false\n  if n > 1 then\n    local i = 0\n    local pow\
    \ = n ^ i\n    while pow <= x do\n      if pow == x then\n        result = true\n\
    \        break\n      end\n      i = i + 1\n      pow = n ^ i\n    end\n  end\n\
    \  return result\nend", "    if n == 1 then\n        return x == 1\n    end\n\
    \    local i = 1\n    while i <= x do\n        if i == x then\n            return\
    \ true\n        end\n        i = i * n\n    end\n    return false\nend\nassert(is_simple_power(1,\
    \ 4))\nassert(is_simple_power(2, 2))\nassert(is_simple_power(8, 2))\nassert(not\
    \ is_simple_power(3, 2))\nassert(not is_simple_power(3, 1))\nassert(not is_simple_power(5,\
    \ 3))", "  local result = 0\n  local i = 0\n  while result < x do\n    i = i +\
    \ 1\n    result = n ^ i\n  end\n  if result == x then\n    return true\n  else\n\
    \    return false\n  end\nend", "  -- your code here\nend", "    if x==1 then\
    \ return true end\n    if n==1 then return false end\n    for i=1,1000000 do\n\
    \        if n^i==x then return true end\n        if n^i>x then return false end\n\
    \    end\nend", "    local power = 1\n    while true do\n        if x == power\
    \ then\n            return true\n        elseif x < power then\n            return\
    \ false\n        end\n        power = power * n\n    end\nend", "    local power\
    \ = 0\n    for i = 0, x do\n        if n ^ i == x then\n            power = power\
    \ + 1\n        end\n    end\n    if power == 1 then\n        return true\n   \
    \ else\n        return false\n    end\nend", "    if n == 0 then\n        return\
    \ x == 1\n    end\n    if x == 0 then\n        return false\n    end\n    if n\
    \ == 1 then\n        return x == 1\n    end\n    if n == x then\n        return\
    \ true\n    end\n    if n > x then\n        return false\n    end\n    local nn\
    \ = n\n    while nn <= x do\n        if nn == x then\n            return true\n\
    \        end\n        nn = nn * n\n    end\n    return false\nend", "    if math.log(x,\
    \ n) % 1 == 0 then\n        return true\n    else\n        return false\n    end\n\
    end", "    local pow = n ^ 1\n    while pow < x do\n        pow = pow * n\n  \
    \  end\n    return pow == x\nend", "    local count = 0\n    while x % n == 0\
    \ do\n        x = x / n\n        count = count + 1\n    end\n    return count\
    \ > 0 and x == 1 or false\nend", "    -- calculate x = n**i\n    -- x = 2, n =\
    \ 2, i = 2\n    local i = 1\n    local tmp = n\n    while tmp < x do\n       \
    \ tmp = tmp * n\n        i = i + 1\n    end\n    if tmp == x then\n        return\
    \ true\n    else\n        return false\n    end\nend\nprint(is_simple_power(2,\
    \ 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(2, 3))\nprint(is_simple_power(5,\
    \ 3))\nprint(is_simple_power(1, 3))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(1,\
    \ 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3,\
    \ 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))", "    if x\
    \ == 0 then\n        return false\n    end\n    local int = 0\n    local nint\
    \ = 1\n    while nint < x do\n        nint = nint * n\n        int = int + 1\n\
    \    end\n    return nint == x\nend", "    if x == 0 then\n        return false\n\
    \    end\n    local power = math.log(x) / math.log(n)\n    return power == math.floor(power)\n\
    end", "    -- your code here\nend", "  if x < 0 or n < 0 then\n    return false\n\
    \  end\n  local c, p = 0, 0\n  while x >= 1 do\n    c = math.fmod(x, n)\n    if\
    \ c ~= 0 then\n      return false\n    end\n    p = p + 1\n    x = math.floor(x\
    \ / n)\n  end\n  return p == 1\nend", "  return (x == 1) or (n == 1) and (x ==\
    \ 1) or (x == n) and (x ~= 1) or (x % n == 0) and is_simple_power(x / n, n)\n\
    end", "    -- your code here\nend", "  local i = 1\n  while math.pow(n, i) < x\
    \ do\n    i = i + 1\n  end\n  return math.pow(n, i) == x\nend", "    --\nend",
  "  if x == 1 then return true end\n  local i = 1\n  while i * i <= x do\n    if\
    \ n ** i == x then return true end\n    i = i + 1\n  end\n  return false\nend",
  "    if (x == 1) then\n        return true\n    end\n    local result = 1\n    local\
    \ i = 0\n    while result < x do\n        i = i + 1\n        result = n^i\n  \
    \  end\n    if result == x then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    if x == 1 then\n        return true\n    end\n  \
    \  if x == 0 then\n        return false\n    end\n    local _n = n\n    while\
    \ _n < x do\n        _n = _n * n\n    end\n    return _n == x\nend", "    return\
    \ math.abs(x) == 1 or math.abs(n) == 1 or x % n == 0 and math.abs(math.log(x)\
    \ / math.log(n)) % 1 == 0\nend", "    -- your code here\nend", "  if x == 0 then\n\
    \    return false\n  end\n  local a = math.log(x, n)\n  return math.floor(a) ==\
    \ a\nend", "    return x == math.pow(n, math.floor(math.log(x)/math.log(n)))\n\
    end", "  local pow = n\n  while pow < x do\n    pow = pow * n\n  end\n  return\
    \ pow == x\nend", "  if n == 0 then\n    return x == 1\n  end\n  if x == 0 then\n\
    \    return false\n  end\n  local p = 1\n  local i = 1\n  while p <= x do\n  \
    \  if p == x then\n      return true\n    end\n    p = n * p\n    i = i + 1\n\
    \  end\n  return false\nend", "    return x ^ (1 / n) % 1 == 0\nend", "\tlocal\
    \ is = false\n\tfor i = 1, x do\n\t\tif math.pow(n, i) == x then\n\t\t\tis = true\n\
    \t\tend\n\tend\n\treturn is\nend", "    return math.log(x, n) % 1 == 0\nend",
  "  return n ^ math.floor(math.log(x) / math.log(n)) == x\nend", "  if x <= 0 or\
    \ n <= 0 then\n    return false\n  end\n  while x > 1 do\n    if x % n ~= 0 then\n\
    \      return false\n    end\n    x = x / n\n  end\n  return true\nend", "   \
    \ -- your code here\nend", "    -- your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
