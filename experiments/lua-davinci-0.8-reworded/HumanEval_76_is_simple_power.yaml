name: HumanEval_76_is_simple_power
language: lua
prompt: "-- Your task is to write a function that returns true if a number x is a\
  \ simple\n-- power of n and false in other cases.\n-- x is a simple power of n if\
  \ n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>> is_simple_power(2,\
  \ 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>> is_simple_power(3,\
  \ 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n-- >>> is_simple_power(5,\
  \ 3)\n-- false\nlocal function is_simple_power(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
  \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
  \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
  \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
  \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
  \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
  \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local i = 0\n    while n ^ i < x do\n        i = i + 1\n    end\n\
    \    return n ^ i == x\nend", "    -- your code goes here\nend", "    return x\
    \ > 0 and (math.floor(math.log(x) / math.log(n)) == (math.log(x) / math.log(n)))\n\
    end", "  local function helper(x, n, acc)\n    if x == 1 then\n      return true\n\
    \    elseif n > x then\n      return false\n    elseif n == x then\n      return\
    \ true\n    else\n      return helper(x / n, n, n * acc)\n    end\n  end\n  return\
    \ helper(x, n, 1)\nend", "    return x ~= 0 and x % n ^ math.floor(math.log(x)\
    \ / math.log(n)) == 0\nend", "  -- your code here\nend", "  if x == 0 then\n \
    \   return false\n  end\n  if n == 0 then\n    return false\n  end\n  local m\
    \ = math.log(x) / math.log(n)\n  if m ~= math.floor(m) then\n    return false\n\
    \  end\n  return true\nend", "  local exp, y = 1, n\n  while y < x do\n    y =\
    \ y * n\n    exp = exp + 1\n  end\n  return y == x\nend", "  if math.log(x) /\
    \ math.log(n) % 1 == 0 then\n    return true\n  else\n    return false\n  end\n\
    end", "    local a = math.log(x)/math.log(n)\n    if a - math.floor(a) == 0 then\n\
    \        return true\n    else\n        return false\n    end\nend", "  local\
    \ i = 1\n  while i <= x do\n    if i ^ n == x then\n      return true\n    end\n\
    \    i = i + 1\n  end\n  return false\nend", "\tlocal result = false\n\tfor i\
    \ = 0, x, 1 do\n\t\tif n ^ i == x then\n\t\t\tresult = true\n\t\tend\n\tend\n\t\
    return result\nend", "  return false\nend", "  -- calculate n^2, n^3, n^4, n^5,\
    \ n^6 ... as long as it is <=x\n  local int = 1\n  local n_int = n\n  while n_int\
    \ <= x do\n    if n_int == x then\n      return true\n    end\n    int = int +\
    \ 1\n    n_int = n * n_int\n  end\n  return false\nend", "  local x, n = tonumber(x),\
    \ tonumber(n)\n  if n <= 0 or x <= 0 then return false end\n  return x == n ^\
    \ math.floor(math.log(x) / math.log(n))\nend", "    local result = false\n   \
    \ local num = 0\n    for i = 1, x do\n        num = n ^ i\n        if num == x\
    \ then\n            result = true\n            break\n        end\n    end\n \
    \   return result\nend", "    for i = 1, 10 do\n        if x == n ^ i then\n \
    \           return true\n        end\n    end\n    return false\nend", "    local\
    \ i = 1\n    while math.pow(n, i) <= x do\n        if math.pow(n, i) == x then\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend", "  local k = 1\n  for i = 1, 100 do\n    if n ^ i == x then return\
    \ true end\n    if n ^ i > x then return false end\n  end\nend", "  return math.log(x,\
    \ n) % 1 == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
