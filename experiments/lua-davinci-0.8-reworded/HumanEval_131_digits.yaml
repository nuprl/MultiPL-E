name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n--\
  \ >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prod = 1\n  local digits = tostring(n)\n  for i = 1, #digits\
    \ do\n    local digit = tonumber(digits:sub(i, i))\n    if digit % 2 == 1 then\n\
    \      prod = prod * digit\n    end\n  end\n  return prod\nend", "\tlocal odd\
    \ = 1\n\tfor i = 1, #tostring(n) do\n\t\tlocal x = tonumber(tostring(n):sub(i,\
    \ i))\n\t\tif x % 2 == 1 then\n\t\t\todd = odd * x\n\t\tend\n\tend\n\treturn odd\n\
    end", "    local result = 1\n    while n > 0 do\n        if n % 2 == 1 then\n\
    \            result = result * (n % 10)\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return result\nend", "  local product = 1\n  for digit in\
    \ tostring(n):gmatch('.') do\n    local value = tonumber(digit)\n    if value\
    \ % 2 == 1 then\n      product = product * value\n    end\n  end\n  return product\n\
    end", "    if not (n > 0) then\n        return 0\n    end\n    local sum = 1\n\
    \    local prod = 1\n    while n > 0 do\n        sum = n % 10\n        if sum\
    \ % 2 ~= 0 then\n            prod = prod * sum\n        end\n        n = (n -\
    \ sum) / 10\n    end\n    return prod\nend\nassert(digits(1) == 1)\nassert(digits(4)\
    \ == 0)\nassert(digits(235) == 15)", "  -- print('digits:', n)\n  local prod =\
    \ 1\n  while n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n      prod\
    \ = prod * r\n    end\n    n = n // 10\n  end\n  return prod\nend", "  if n ==\
    \ 0 then return 0 end\n  local sum = 1\n  for i = 1, #tostring(n) do\n    local\
    \ digit = n % 10\n    if digit % 2 == 1 then\n      sum = sum * digit\n    end\n\
    \    n = (n - digit) / 10\n  end\n  return sum\nend", "  local function product(digit)\n\
    \    local product = 1\n    for i = 1, #digit do\n      if digit[i] % 2 ~= 0 then\n\
    \        product = product * digit[i]\n      end\n    end\n    return product\n\
    \  end\n  local digit = {}\n  while n > 0 do\n    local d = n % 10\n    digit[#digit\
    \ + 1] = d\n    n = (n - d) / 10\n  end\n  return product(digit)\nend", "  local\
    \ prod = 1\n  for d in string.gmatch(tostring(n), \"%d\") do\n    d = tonumber(d)\n\
    \    if d % 2 == 1 then\n      prod = prod * d\n    end\n  end\n  return prod\n\
    end", "    local product = 1\n    while n > 0 do\n        local r = n % 10\n \
    \       if r % 2 == 1 then\n            product = product * r\n        end\n \
    \       n = (n - r) / 10\n    end\n    return product\nend", "  -- YOUR CODE HERE\n\
    end", "\tlocal str = tostring(n)\n\tlocal sum = 1\n\tfor i = 1, #str do\n\t\t\
    local dig = tonumber(str:sub(i, i))\n\t\tif dig % 2 == 1 then\n\t\t\tsum = sum\
    \ * dig\n\t\tend\n\tend\n\treturn sum\nend", "  local res = 1\n  while n > 0 do\n\
    \    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n    end\n\
    \    n = (n - d) / 10\n  end\n  return res\nend", "    if n == 0 then\n      \
    \  return 0\n    else\n        local digit = n % 10\n        if digit % 2 == 1\
    \ then\n            return digit * digits(math.floor(n / 10))\n        else\n\
    \            return digits(math.floor(n / 10))\n        end\n    end\nend", " \
    \   -- ...\nend", "    local total = 1\n    while n > 0 do\n        local d =\
    \ n % 10\n        if d % 2 == 1 then\n            total = total * d\n        end\n\
    \        n = math.floor(n / 10)\n    end\n    return total\nend", "  local res\
    \ = 1\n  while n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n      res\
    \ = res * r\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nprint(digits(1))\n\
    print(digits(4))\nprint(digits(235))", "  local p = 1\n  while n > 0 do\n    local\
    \ d = n % 10\n    if d % 2 == 1 then\n      p = p * d\n    end\n    n = (n - d)\
    \ / 10\n  end\n  return p\nend", "    if n < 10 then\n        return (n % 2) *\
    \ n\n    else\n        local d = n % 10\n        return (d % 2) * d * digits(math.floor(n\
    \ / 10))\n    end\nend", "\tlocal sum = 1\n\twhile n > 0 do\n\t\tlocal d = n %\
    \ 10\n\t\tif d % 2 == 1 then\n\t\t\tsum = sum * d\n\t\tend\n\t\tn = (n - d) /\
    \ 10\n\tend\n\treturn sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
