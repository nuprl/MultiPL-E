name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n--\
  \ >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prod = 1\n  local digits = tostring(n)\n  for i = 1, #digits\
    \ do\n    local digit = tonumber(digits:sub(i, i))\n    if digit % 2 == 1 then\n\
    \      prod = prod * digit\n    end\n  end\n  return prod\nend", "\tlocal odd\
    \ = 1\n\tfor i = 1, #tostring(n) do\n\t\tlocal x = tonumber(tostring(n):sub(i,\
    \ i))\n\t\tif x % 2 == 1 then\n\t\t\todd = odd * x\n\t\tend\n\tend\n\treturn odd\n\
    end", "    local result = 1\n    while n > 0 do\n        if n % 2 == 1 then\n\
    \            result = result * (n % 10)\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return result\nend", "  local product = 1\n  for digit in\
    \ tostring(n):gmatch('.') do\n    local value = tonumber(digit)\n    if value\
    \ % 2 == 1 then\n      product = product * value\n    end\n  end\n  return product\n\
    end", "    if not (n > 0) then\n        return 0\n    end\n    local sum = 1\n\
    \    local prod = 1\n    while n > 0 do\n        sum = n % 10\n        if sum\
    \ % 2 ~= 0 then\n            prod = prod * sum\n        end\n        n = (n -\
    \ sum) / 10\n    end\n    return prod\nend\nassert(digits(1) == 1)\nassert(digits(4)\
    \ == 0)\nassert(digits(235) == 15)", "  -- print('digits:', n)\n  local prod =\
    \ 1\n  while n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n      prod\
    \ = prod * r\n    end\n    n = n // 10\n  end\n  return prod\nend", "  if n ==\
    \ 0 then return 0 end\n  local sum = 1\n  for i = 1, #tostring(n) do\n    local\
    \ digit = n % 10\n    if digit % 2 == 1 then\n      sum = sum * digit\n    end\n\
    \    n = (n - digit) / 10\n  end\n  return sum\nend", "  local function product(digit)\n\
    \    local product = 1\n    for i = 1, #digit do\n      if digit[i] % 2 ~= 0 then\n\
    \        product = product * digit[i]\n      end\n    end\n    return product\n\
    \  end\n  local digit = {}\n  while n > 0 do\n    local d = n % 10\n    digit[#digit\
    \ + 1] = d\n    n = (n - d) / 10\n  end\n  return product(digit)\nend", "  local\
    \ prod = 1\n  for d in string.gmatch(tostring(n), \"%d\") do\n    d = tonumber(d)\n\
    \    if d % 2 == 1 then\n      prod = prod * d\n    end\n  end\n  return prod\n\
    end", "    local product = 1\n    while n > 0 do\n        local r = n % 10\n \
    \       if r % 2 == 1 then\n            product = product * r\n        end\n \
    \       n = (n - r) / 10\n    end\n    return product\nend", "  -- YOUR CODE HERE\n\
    end", "\tlocal str = tostring(n)\n\tlocal sum = 1\n\tfor i = 1, #str do\n\t\t\
    local dig = tonumber(str:sub(i, i))\n\t\tif dig % 2 == 1 then\n\t\t\tsum = sum\
    \ * dig\n\t\tend\n\tend\n\treturn sum\nend", "  local res = 1\n  while n > 0 do\n\
    \    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n    end\n\
    \    n = (n - d) / 10\n  end\n  return res\nend", "    if n == 0 then\n      \
    \  return 0\n    else\n        local digit = n % 10\n        if digit % 2 == 1\
    \ then\n            return digit * digits(math.floor(n / 10))\n        else\n\
    \            return digits(math.floor(n / 10))\n        end\n    end\nend", " \
    \   -- ...\nend", "    local total = 1\n    while n > 0 do\n        local d =\
    \ n % 10\n        if d % 2 == 1 then\n            total = total * d\n        end\n\
    \        n = math.floor(n / 10)\n    end\n    return total\nend", "  local res\
    \ = 1\n  while n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n      res\
    \ = res * r\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nprint(digits(1))\n\
    print(digits(4))\nprint(digits(235))", "  local p = 1\n  while n > 0 do\n    local\
    \ d = n % 10\n    if d % 2 == 1 then\n      p = p * d\n    end\n    n = (n - d)\
    \ / 10\n  end\n  return p\nend", "    if n < 10 then\n        return (n % 2) *\
    \ n\n    else\n        local d = n % 10\n        return (d % 2) * d * digits(math.floor(n\
    \ / 10))\n    end\nend", "\tlocal sum = 1\n\twhile n > 0 do\n\t\tlocal d = n %\
    \ 10\n\t\tif d % 2 == 1 then\n\t\t\tsum = sum * d\n\t\tend\n\t\tn = (n - d) /\
    \ 10\n\tend\n\treturn sum\nend", "    local function recur(n, acc)\n        local\
    \ digit = n % 10\n        if digit % 2 == 1 then\n            return recur(math.floor(n\
    \ / 10), acc * digit)\n        elseif n < 10 then\n            return acc\n  \
    \      else\n            return recur(math.floor(n / 10), acc)\n        end\n\
    \    end\n    return recur(n, 1)\nend", "    -- return math.floor(n/10)%10\n \
    \   -- your code goes here\n    --l = {1,2,3,4,5,6,7,8,9}\n    --local a = n %\
    \ 10\n    --local b = math.floor(n/10)%10\n    --local c = math.floor(n/100)%10\n\
    \    --local d = math.floor(n/1000)%10\n    --local e = math.floor(n/10000)%10\n\
    \    --local f = math.floor(n/100000)%10\n    --local g = math.floor(n/1000000)%10\n\
    \    --local h = math.floor(n/10000000)%10\n    --local i = math.floor(n/100000000)%10\n\
    \    --local j = math.floor(n/1000000000)%10\n    local x = 0\n    local y = 1\n\
    \    for i = 1, 10 do\n        x = math.floor(n/10^(i-1))%10\n        if x % 2\
    \ ~= 0 then\n            y = y * x\n        end\n    end\n    if y == 1 then\n\
    \        return 0\n    else\n        return y\n    end\nend", "    if n < 10 then\n\
    \        return n % 2 > 0 and n or 0\n    end\n    local r = digits(n % 10)\n\
    \    return r > 0 and r * digits(math.floor(n / 10)) or digits(math.floor(n /\
    \ 10))\nend", "\tlocal prod = 1\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\t\
    if d % 2 == 1 then\n\t\t\tprod = prod * d\n\t\tend\n\t\tn = (n - d) / 10\n\tend\n\
    \treturn prod\nend", "  local prod = 1\n  while n > 0 do\n    local digit = n\
    \ % 10\n    if digit % 2 == 1 then\n      prod = prod * digit\n    end\n    n\
    \ = (n - digit) / 10\n  end\n  return prod\nend", "  local d, result = 0, 1\n\
    \  for i = 1, math.floor(math.log10(n)) + 1 do\n    d = n % 10\n    if d % 2 ==\
    \ 1 then\n      result = result * d\n    end\n    n = math.floor(n / 10)\n  end\n\
    \  return result\nend", "  local result = 1\n  while n > 0 do\n    local digit\
    \ = n % 10\n    if digit % 2 == 1 then\n      result = result * digit\n    end\n\
    \    n = math.floor(n / 10)\n  end\n  return result\nend", "    local result =\
    \ 1\n    while n > 0 do\n        local digit = n % 10\n        if digit % 2 ==\
    \ 1 then\n            result = result * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return result\nend", "  -- TODO: Implementation\nend", " \
    \ local prod = 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n\
    \      prod = prod * d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\n\
    end", "    local result = 1\n    while n > 0 do\n        local digit = n % 10\n\
    \        if digit % 2 == 1 then\n            result = result * digit\n       \
    \ end\n        n = (n - digit) / 10\n    end\n    return result\nend", "  local\
    \ product = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2 ==\
    \ 1 then\n      product = product * digit\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend", "  local product = 1\n  while n > 0 do\n    local\
    \ digit = n % 10\n    if digit % 2 == 1 then\n      product = product * digit\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return product\nend", "    local\
    \ sum = 1\n    for i = 1, #tostring(n) do\n        if math.fmod(n % 10, 2) ~=\
    \ 0 then\n            sum = sum * n % 10\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return sum\nend", "  return n % 10 + digits(n // 10)\nend",
  "  local res = 1\n  while n ~= 0 do\n    local digit = n % 10\n    if digit % 2\
    \ == 1 then\n      res = res * digit\n    end\n    n = math.floor(n / 10)\n  end\n\
    \  return res\nend", "  local prod = 1\n  while n > 0 do\n    local r = n % 10\n\
    \    if r % 2 == 1 then\n      prod = prod * r\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return prod\nend", "    local result = 1\n    while n > 0 do\n\
    \        local digit = n % 10\n        if digit % 2 == 1 then\n            result\
    \ = result * digit\n        end\n        n = math.floor(n / 10)\n    end\n   \
    \ return result\nend", "    local p = 1\n    while n > 0 do\n        local d =\
    \ n % 10\n        if d % 2 == 1 then\n            p = p * d\n        end\n   \
    \     n = (n - d) / 10\n    end\n    return p\nend", "  local accum = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      accum = accum\
    \ * d\n    end\n    n = (n - d) / 10\n  end\n  return accum\nend", "  if n < 1\
    \ then\n    return 0\n  end\n  local prod = 1\n  while n > 0 do\n    local r =\
    \ n % 10\n    if r % 2 == 1 then\n      prod = prod * r\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return prod\nend", "    local pro = 1\n    while n > 0 do\n\
    \        local dig = n % 10\n        if dig % 2 == 1 then\n            pro = pro\
    \ * dig\n        end\n        n = n // 10\n    end\n    return pro\nend", "  if\
    \ n < 10 then\n    return n % 2 == 1 and n or 0\n  else\n    return (n % 10 %\
    \ 2 == 1 and n % 10 or 1) * digits(math.floor(n / 10))\n  end\nend", "  local\
    \ prod = 1\n  while n > 0 do\n    local digit = n % 10\n    if (digit % 2) ~=\
    \ 0 then\n      prod = prod * digit\n    end\n    n = math.floor(n / 10)\n  end\n\
    \  return prod\nend", "    if n < 10 then\n        return n % 2 == 1 and n or\
    \ 0\n    else\n        return (n % 10 % 2 == 1 and n % 10 or 1) * digits(math.floor(n\
    \ / 10))\n    end\nend", "  local result = 1\n  for c in tostring(n):gmatch(\"\
    %d\") do\n    c = tonumber(c)\n    if c % 2 == 1 then\n      result = result *\
    \ c\n    end\n  end\n  return result\nend", "  local d = 0\n  while n > 0 do\n\
    \    local d = n % 10\n    if d % 2 ~= 0 then\n      d = d * digits(n // 10)\n\
    \    end\n    n = n // 10\n  end\n  return d\nend", "  local last = n % 10\n \
    \ local remaining = math.floor(n / 10)\n  if remaining == 0 then\n    return last\
    \ % 2 == 1 and last or 0\n  else\n    return (last % 2 == 1 and last or 1) * digits(remaining)\n\
    \  end\nend", "  local p = 1\n  while n > 0 do\n    local d = n % 10\n    if d\
    \ % 2 == 1 then\n      p = p * d\n    end\n    n = math.floor(n / 10)\n  end\n\
    \  return p\nend", "    if n < 10 then\n        return n\n    end\n    local p\
    \ = digits(math.floor(n / 10))\n    n = n % 10\n    if n % 2 == 1 then\n     \
    \   return p * n\n    end\n    return p\nend", "  local product = 1\n  for i in\
    \ tostring(n):gmatch\"%d\" do\n    local n = tonumber(i)\n    if n % 2 == 1 then\n\
    \      product = product * n\n    end\n  end\n  return product\nend", "    if\
    \ n == 0 then\n        return 0\n    else\n        local digit = n % 10\n    \
    \    if digit % 2 == 1 then\n            return digit * digits(math.floor(n /\
    \ 10))\n        else\n            return digits(math.floor(n / 10))\n        end\n\
    \    end\nend", "    local function helper(m, acc)\n        if m == 0 then\n \
    \           return acc\n        else\n            local d = m % 10\n         \
    \   if d % 2 == 1 then\n                return helper(math.floor(m / 10), acc\
    \ * d)\n            else\n                return helper(math.floor(m / 10), acc)\n\
    \            end\n        end\n    end\n    return helper(n, 1)\nend", "  local\
    \ product = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2 ==\
    \ 1 then\n      product = product * digit\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend", "    local product = 1\n    while n > 0 do\n \
    \       local digit = n % 10\n        if digit % 2 == 1 then\n            product\
    \ = product * digit\n        end\n        n = math.floor(n / 10)\n    end\n  \
    \  return product\nend", "  -- TODO\nend", "    local n = n\n    local t = {}\n\
    \    local i = 1\n    while (n > 0) do\n        table.insert(t, n % 10)\n    \
    \    n = math.floor(n / 10)\n    end\n    local p = 1\n    for i = 1, #t do\n\
    \        if t[i] % 2 == 1 then\n            p = p * t[i]\n        end\n    end\n\
    \    return p\nend", "\tif not n then return 0 end\n\tlocal result = 1\n\tfor\
    \ m in n:gmatch(\"%d\") do\n\t\tlocal d = tonumber(m)\n\t\tif d % 2 == 1 then\n\
    \t\t\tresult = result * d\n\t\tend\n\tend\n\treturn result\nend", "    local pr\
    \ = 1\n    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n\
    \            pr = pr * d\n        end\n        n = (n - d) / 10\n    end\n   \
    \ return pr\nend", "\tlocal prod = 1\n\twhile n > 0 do\n\t\tlocal x = n % 10\n\
    \t\tif x % 2 == 1 then\n\t\t\tprod = prod * x\n\t\tend\n\t\tn = (n - x) / 10\n\
    \tend\n\treturn prod\nend", "    local p = 1\n    for d in tostring(n):gmatch(\"\
    %d\") do\n        local i = tonumber(d)\n        if i % 2 == 1 then\n        \
    \    p = p * i\n        end\n    end\n    return p\nend", "    n = n:gsub(\"[02468]\"\
    , \"\")\n    return #n == 0 and 0 or n:product()\nend", "    local product = 1\n\
    \    for c in tostring(n):gmatch'.' do\n        local x = tonumber(c)\n      \
    \  if x % 2 == 1 then\n            product = product * x\n        end\n    end\n\
    \    return product\nend", "  local sum = 1\n  local num = math.abs(n)\n  while\
    \ num > 0 do\n    local digit = num % 10\n    if digit % 2 == 1 then\n      sum\
    \ = sum * digit\n    end\n    num = math.floor(num / 10)\n  end\n  return sum\n\
    end", "    local product = 1\n    if n == 0 then\n        return 0\n    end\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = (n - digit) /\
    \ 10\n    end\n    return product\nend", "    -- TODO: Implement this function.\n\
    \    -- Hint: the operator % might be useful for the last digit.\n    -- Hint:\
    \ n//10 will be helpful for the rest of the digits.\n    local product = 1\n \
    \   while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = n // 10\n   \
    \ end\n    return product\nend", "  local result = 1\n  local isZero = true\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 ~= 0 then\n    \
    \  result = result * digit\n      isZero = false\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  if isZero then\n    return 0\n  else\n    return result\n  end\n\
    end", "    local total = 1\n    while n > 0 do\n        local digit = n % 10\n\
    \        if digit % 2 == 1 then\n            total = total * digit\n        end\n\
    \        n = (n - digit) / 10\n    end\n    return total\nend", "  local m = 1\n\
    \  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      m = m *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return m\nend", "    n = math.abs(n)\n\
    \    local product = 1\n    while n > 0 do\n        local digit = n % 10\n   \
    \     if digit % 2 == 1 then\n            product = product * digit\n        end\n\
    \        n = math.floor(n / 10)\n    end\n    return product\nend", "    local\
    \ product = 1\n    while n > 0 do\n        local digit = n % 10\n        if digit\
    \ % 2 == 1 then\n            product = product * digit\n        end\n        n\
    \ = (n - digit) / 10\n    end\n    return product\nend", "    if n == 0 then\n\
    \        return 0\n    else\n        return digits(math.floor(n / 10)) + (n %\
    \ 2 == 1 and n % 10 or 0)\n    end\nend", "  local prod = 1\n  for c in (tostring(n)):gmatch(\"\
    .\") do\n    local i = tonumber(c)\n    if i % 2 == 1 then\n      prod = prod\
    \ * i\n    end\n  end\n  return prod\nend", "    if n == 0 then\n        return\
    \ 0\n    else\n        local r = n % 10\n        if r % 2 == 1 then\n        \
    \    return r * digits(math.floor(n / 10))\n        else\n            return digits(math.floor(n\
    \ / 10))\n        end\n    end\nend", "  local product = 1\n  while n ~= 0 do\n\
    \    local digit = n % 10\n    if digit % 2 == 1 then\n      product = product\
    \ * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return product\nend",
  "    if n == 0 then\n        return 0\n    else\n        local m = n % 10\n    \
    \    if m % 2 == 0 then\n            return digits(n // 10)\n        else\n  \
    \          return m * digits(n // 10)\n        end\n    end\nend", "    -- This\
    \ function should accept a positive integer as its only argument.\n    -- There\
    \ are many ways to accomplish this task, but we are going to\n    -- do it the\
    \ hard way and calculate the answer by hand.\n    --", "\tlocal product = 1\n\t\
    while n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tproduct =\
    \ product * d\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn product\n\
    end", "  local result = 1\n  while n > 0 do\n    local d = n % 10\n    if d %\
    \ 2 == 1 then\n      result = result * d\n    end\n    n = (n - d) / 10\n  end\n\
    \  return result\nend", "    local ds = {}\n    for d in string.gmatch(tostring(n),\
    \ '(%d)') do\n        ds[#ds + 1] = tonumber(d)\n    end\n    local result = 1\n\
    \    for _, d in ipairs(ds) do\n        if d % 2 == 1 then\n            result\
    \ = result * d\n        end\n    end\n    return result\nend", "    -- Your code\
    \ here\nend", "    local product = 1\n    while n > 0 do\n        local digit\
    \ = n % 10\n        if digit % 2 == 1 then\n            product = product * digit\n\
    \        end\n        n = (n - digit) / 10\n    end\n    return product\nend",
  "  local sum = 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n\
    \      sum = sum * d\n    end\n    n = (n - d) / 10\n  end\n  return sum\nend",
  "    if n < 10 then\n        return n % 2 == 1 and n or 0\n    else\n        return\
    \ (n % 10 % 2 == 1 and n % 10 or 1) * digits(math.floor(n / 10))\n    end\nend",
  "  -- your code here\nend", "  local product = 1\n  while n > 0 do\n    local r\
    \ = n % 10\n    if r % 2 == 1 then\n      product = product * r\n    end\n   \
    \ n = math.floor(n / 10)\n  end\n  return product\nend", "  -- base case\n  if\
    \ n == 0 then\n    return 1\n  end\n  -- recursive case\n  local last_digit =\
    \ n % 10\n  if last_digit % 2 == 1 then\n    return last_digit * digits(n // 10)\n\
    \  else\n    return digits(n // 10)\n  end\nend", "  local product = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      product\
    \ = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return product\n\
    end", "    local mult = 1\n    while n > 0 do\n        local d = n % 10\n    \
    \    if d % 2 == 1 then\n            mult = mult * d\n        end\n        n =\
    \ math.floor(n / 10)\n    end\n    return mult\nend", "    local k = 1\n    local\
    \ p = 0\n    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n\
    \            p = p + d * k\n            k = k * 10\n        end\n        n = n\
    \ // 10\n    end\n    return p\nend", "  local r = 1\n  for c in string.gmatch(tostring(n),\
    \ \"%d\") do\n    local d = tonumber(c)\n    if d % 2 == 1 then\n      r = r *\
    \ d\n    end\n  end\n  return r\nend", "  local odd_digits = {}\n  for digit in\
    \ tostring(n):gmatch(\"%d\") do\n    digit = tonumber(digit)\n    if digit % 2\
    \ == 1 then\n      table.insert(odd_digits, digit)\n    end\n  end\n  if #odd_digits\
    \ == 0 then\n    return 0\n  end\n  return table.reduce(odd_digits, function(a,\
    \ b) return a * b end)\nend", "    local result = 1\n    for _, v in utf8.codes(tostring(n))\
    \ do\n        if v % 2 == 1 then\n            result = result * (v - 48)\n   \
    \     end\n    end\n    return result\nend", "    local d = n % 10\n    local\
    \ p = n / 10\n    if p > 0 then\n        return (d % 2 == 1) and (d * digits(p))\
    \ or digits(p)\n    else\n        return (d % 2 == 1) and d or 0\n    end\nend\n\
    print(digits(1))\nprint(digits(4))\nprint(digits(235))", "  local t = {}\n  local\
    \ function check(n)\n    if n%2 == 1 then\n      table.insert(t, n)\n    end\n\
    \  end\n  local function split(n)\n    if n < 10 then\n      check(n)\n    else\n\
    \      split(math.floor(n/10))\n      check(n%10)\n    end\n  end\n  split(n)\n\
    \  local res = 1\n  for i, v in ipairs(t) do\n    res = res * v\n  end\n  return\
    \ res\nend", "    if n == 0 then\n        return 0\n    else\n        local d\
    \ = n % 10\n        if d % 2 == 1 then\n            return d * digits(math.floor(n\
    \ / 10))\n        else\n            return digits(math.floor(n / 10))\n      \
    \  end\n    end\nend", "    local s = 0\n    while n > 0 do\n        local m =\
    \ n % 10\n        if m % 2 == 1 then\n            s = s * 10 + m\n        end\n\
    \        n = (n - m) / 10\n    end\n    return s\nend", "    local sum = 1\n \
    \   while n > 0 do\n        local mod = n % 10\n        if mod % 2 == 1 then\n\
    \            sum = sum * mod\n        end\n        n = (n - mod) / 10\n    end\n\
    \    return sum\nend", "\tif n < 1 then\n\t\treturn 0\n\tend\n\tlocal product\
    \ = 1\n\tlocal dig = 0\n\twhile n > 0 do\n\t\tdig = n % 10\n\t\tif dig % 2 ~=\
    \ 0 then\n\t\t\tproduct = product * dig\n\t\tend\n\t\tn = math.floor(n / 10)\n\
    \tend\n\treturn product\nend", "    n = n .. \"\"\n    local res = 1\n    for\
    \ digit in n:gmatch(\"%d\") do\n        digit = tonumber(digit)\n        if digit\
    \ % 2 == 1 then\n            res = res * digit\n        end\n    end\n    return\
    \ res\nend\nassert(digits(1) == 1)\nassert(digits(4) == 0)\nassert(digits(235)\
    \ == 15)", "  local product = 1\n  for i = 1, #tostring(n) do\n    local digit\
    \ = n % 10\n    if digit % 2 == 1 then\n      product = product * digit\n    end\n\
    \    n = math.floor(n / 10)\n  end\n  return product\nend", "    -- TODO: Implement\
    \ this function.\n    -- This function returns the total of the odd digits in\
    \ a number.\n    local odd_digits = 0\n    while n > 0 do\n        local digit\
    \ = n % 10\n        if digit % 2 == 1 then\n            odd_digits = odd_digits\
    \ + digit\n        end\n        n = math.floor(n / 10)\n    end\n    return odd_digits\n\
    end", "  -- Fill this in.\nend", "  local product = 1\n  for d in tostring(n):gmatch('%d')\
    \ do\n    local num = tonumber(d)\n    if num % 2 == 1 then\n      product = product\
    \ * num\n    end\n  end\n  return product\nend", "    local product = 1\n    while\
    \ n > 0 do\n        local last_digit = n % 10\n        if last_digit % 2 == 1\
    \ then\n            product = product * last_digit\n        end\n        n = (n\
    \ - last_digit) / 10\n    end\n    return product\nend", "\tlocal s = tostring(n)\n\
    \tlocal ans = 1\n\tfor i = 1, #s do\n\t\tlocal c = tonumber(s:sub(i, i))\n\t\t\
    if c % 2 == 1 then\n\t\t\tans = ans * c\n\t\tend\n\tend\n\treturn ans\nend", " \
    \   if n == 0 then\n        return 0\n    else\n        local d = n % 10\n   \
    \     if d % 2 == 1 then\n            return d * digits(n // 10)\n        else\n\
    \            return digits(n // 10)\n        end\n    end\nend", "    -- your\
    \ code here\nend", "\tlocal result = 1", "    local result = 1\n    while n >\
    \ 0 do\n        if n % 2 == 1 then\n            result = result * (n % 10)\n \
    \       end\n        n = math.floor(n / 10)\n    end\n    return result\nend",
  "  if n < 1 then\n    return 0\n  end\n  local digit = n % 10\n  if digit % 2 ==\
    \ 0 then\n    return digits(n // 10)\n  end\n  return digit * digits(n // 10)\n\
    end", "    local result = 1\n    while n > 0 do\n        local digit = n % 10\n\
    \        if digit % 2 == 1 then\n            result = result * digit\n       \
    \ end\n        n = (n - digit) / 10\n    end\n    return result\nend", "    local\
    \ res = 1\n    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1\
    \ then\n            res = res * d\n        end\n        n = (n - d) / 10\n   \
    \ end\n    return res\nend", "  local total = 1\n  while n > 0 do\n    local d\
    \ = n % 10\n    if d % 2 == 1 then\n      total = total * d\n    end\n    n =\
    \ math.floor(n / 10)\n  end\n  return total\nend", "    local r = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n           \
    \ r = r * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ r\nend", "    if n == 0 then\n        return 0\n    else\n        local m =\
    \ n % 10\n        if m % 2 == 0 then\n            return digits(n//10)\n     \
    \   else\n            return m * digits(n//10)\n        end\n    end\nend", "\t\
    local res=1\n\tif n<10 then\n\t\tif n%2~=0 then\n\t\t\treturn n\n\t\telse\n\t\t\
    \treturn 0\n\t\tend\n\telse\n\t\twhile n~=0 do\n\t\t\tlocal nn=n%10\n\t\t\tif\
    \ nn%2~=0 then\n\t\t\t\tres=res*nn\n\t\t\tend\n\t\t\tn=math.floor(n/10)\n\t\t\
    end\n\t\treturn res\n\tend\nend", "  local prod = 1\n  while n > 0 do\n    local\
    \ d = n % 10\n    if d % 2 == 1 then\n      prod = prod * d\n    end\n    n =\
    \ (n - d) / 10\n  end\n  return prod\nend", "  local acc = 1\n  while n > 0 do\n\
    \    local d = n % 10\n    if d % 2 == 1 then\n      acc = acc * d\n    end\n\
    \    n = (n - d) / 10\n  end\n  return acc\nend", "  local sum = 1\n  while n\
    \ > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      sum = sum * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend", "  --[[\n  This\
    \ is the solution I came up with and I think it's the best because it's\n  short\
    \ and neat, but it doesn't pass the tests.\n  return n:gsub(\"%d\", function(d)\n\
    \    return d % 2 == 1 and d or 0\n  end):reduce(function(a, b)\n    return a\
    \ * b\n  end)\n  ]]", "  local result = 1\n  while n > 0 do\n    local digit =\
    \ n % 10\n    if digit % 2 == 1 then\n      result = result * digit\n    end\n\
    \    n = (n - digit) / 10\n  end\n  return result\nend", "    local result = 1\n\
    \    for d in tostring(n):gmatch('%d') do\n        local i = tonumber(d)\n   \
    \     if i % 2 == 1 then\n            result = result * i\n        end\n    end\n\
    \    return result\nend", "  local p = 1\n  for _, c in utf8.codes(tostring(n))\
    \ do\n    local d = c - 48\n    if d % 2 == 1 then\n      p = p * d\n    end\n\
    \  end\n  return p\nend", "    local r = 1\n    while n > 0 do\n        local\
    \ d = n % 10\n        if d % 2 == 1 then\n            r = r * d\n        end\n\
    \        n = (n - d) / 10\n    end\n    return r\nend", "    local product = 1\n\
    \    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n  \
    \          product = product * d\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return product\nend", "  local odd = 0\n  while n > 0 do\n    local\
    \ d = n % 10\n    if d % 2 == 1 then\n      odd = odd * 10 + d\n    end\n    n\
    \ = (n - d) / 10\n  end\n  return odd\nend", "    if n <= 0 then\n        return\
    \ 0\n    end\n    local a = n % 10\n    if a % 2 == 0 then\n        return digits(n\
    \ // 10)\n    else\n        return a * digits(n // 10)\n    end\nend", "    result\
    \ = 1\n    for i = 0, n do\n        local char = string.sub(n, i, i)\n       \
    \ if char % 2 == 1 then\n            result = result * char\n        end\n   \
    \ end\n    return result\nend", "    local odd_digits = 1\n    while n > 0 do\n\
    \        local digit = n % 10\n        if digit % 2 == 1 then\n            odd_digits\
    \ = odd_digits * digit\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return odd_digits\nend", "    local p = 1\n    while n > 0 do\n        local\
    \ d = n % 10\n        if d % 2 == 1 then\n            p = p * d\n        end\n\
    \        n = (n - d) / 10\n    end\n    return p\nend", "  local prod = 1\n  for\
    \ d in tostring(n):gmatch('.') do\n    local digit = tonumber(d)\n    if digit\
    \ % 2 == 1 then\n      prod = prod * digit\n    end\n  end\n  return prod\nend",
  "  n = n or 0\n  local odd_product = 1\n  for m in tostring(n):gmatch('%d') do\n\
    \    local digit = tonumber(m)\n    if digit % 2 == 1 then\n      odd_product\
    \ = odd_product * digit\n    end\n  end\n  return odd_product\nend", "    if n\
    \ == 0 then\n        return 0\n    else\n        local digit = n % 10\n      \
    \  if digit % 2 == 1 then\n            return digit * digits(math.floor(n / 10))\n\
    \        else\n            return digits(math.floor(n / 10))\n        end\n  \
    \  end\nend", "    local k = 1\n    local c = n % 10\n    n = (n - c) / 10\n \
    \   while n > 0 do\n        c = n % 10\n        if c % 2 ~= 0 then\n         \
    \   k = k * c\n        end\n        n = (n - c) / 10\n    end\n    return k\n\
    end", "  local res = 1\n  for _, ch in utf8.codes(tostring(n)) do\n    if tonumber(ch)\
    \ % 2 == 1 then\n      res = res * tonumber(ch)\n    end\n  end\n  return res\n\
    end", "  -- TODO: your code here\nend", "  local s = tostring(n)\n  local result\
    \ = 1\n  for i = 1, #s do\n    local digit = tonumber(s:sub(i, i))\n    if digit\
    \ % 2 == 1 then\n      result = result * digit\n    end\n  end\n  return result\n\
    end", "    local product = 1\n    for digit in tostring(n):gmatch(\"%d\") do\n\
    \        digit = tonumber(digit)\n        if digit % 2 == 1 then\n           \
    \ product = product * digit\n        end\n    end\n    return product\nend", " \
    \ local res = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2\
    \ == 1 then\n      res = res * digit\n    end\n    n = (n - digit) / 10\n  end\n\
    \  return res\nend", "    local sum = 1\n    local str = tostring(n)\n    for\
    \ i = 1, string.len(str) do\n        local num = tonumber(string.sub(str, i, i))\n\
    \        if num % 2 ~= 0 then\n            sum = sum * num\n        end\n    end\n\
    \    return sum\nend", "\tif n < 10 then\n\t\treturn n\n\tend\n\tlocal m = n %\
    \ 10\n\tlocal odd = m % 2 == 1 and m or 0\n\treturn odd * digits(math.floor(n\
    \ / 10))\nend", "  local res = 1\n  for digit in tostring(n):gmatch(\"%d\") do\n\
    \    digit = tonumber(digit)\n    if digit % 2 == 1 then\n      res = res * digit\n\
    \    end\n  end\n  return res\nend", "    local product = 1\n    while n > 0 do\n\
    \        local digit = n % 10\n        if digit % 2 == 1 then\n            product\
    \ = product * digit\n        end\n        n = math.floor(n / 10)\n    end\n  \
    \  return product\nend", "  local product = 1\n  while n > 0 do\n    local digit\
    \ = n % 10\n    if digit % 2 == 1 then\n      product = product * digit\n    end\n\
    \    n = (n - digit) / 10\n  end\n  return product\nend", "    local prod = 1\n\
    \    for d in tostring(n):gmatch('%d') do\n        d = tonumber(d)\n        if\
    \ d % 2 == 1 then\n            prod = prod * d\n        end\n    end\n    return\
    \ prod\nend", "    if n == 0 then\n        return 0\n    else\n        local d\
    \ = n % 10\n        if d % 2 == 0 then\n            return digits(n // 10)\n \
    \       else\n            return d * digits(n // 10)\n        end\n    end\nend",
  "    local prod = 1\n    while n > 0 do\n        local d = n % 10\n        if d\
    \ % 2 == 1 then\n            prod = prod * d\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return prod\nend", "  local product = 1\n  for c in tostring(n):gmatch\"\
    %d\" do\n    c = tonumber(c)\n    if c % 2 == 1 then\n      product = product\
    \ * c\n    end\n  end\n  return product\nend", "    local r = 1\n    while n >\
    \ 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n            r =\
    \ r * d\n        end\n        n = (n - d) / 10\n    end\n    return r\nend", "\t\
    -- if n is 0, then it is even.\n\tif n == 0 then\n\t\treturn 0\n\t-- if n is 1,\
    \ then it is odd.\n\telseif n == 1 then\n\t\treturn 1\n\telse\n\t\t-- if n is\
    \ even, return 0.\n\t\tif n % 2 == 0 then\n\t\t\treturn 0\n\t\telse\n\t\t\t--\
    \ if n is odd, return n * n/10\n\t\t\treturn n * digits(math.floor(n/10))\n\t\t\
    end\n\tend\nend", "    local prod = 1\n    if n < 10 then\n        if n % 2 ==\
    \ 1 then\n            return n\n        else\n            return 0\n        end\n\
    \    else\n        local k = n % 10\n        if k % 2 == 1 then\n            prod\
    \ = k\n        end\n        n = math.floor(n / 10)\n        return prod * digits(n)\n\
    \    end\nend", "  -- YOUR CODE HERE\n  local prod = 1\n  if n == 0 then\n   \
    \ return 0\n  end\n  for i in string.gmatch(n, \"%d\") do\n    local digit = tonumber(i)\n\
    \    if digit % 2 ~= 0 then\n      prod = prod * digit\n    end\n  end\n  return\
    \ prod\nend", "  local prod = 1\n  for char in tostring(n):gmatch('.') do\n  \
    \  local digit = tonumber(char)\n    if digit % 2 == 1 then\n      prod = prod\
    \ * digit\n    end\n  end\n  return prod\nend", "    if n == 0 then\n        return\
    \ 0\n    else\n        local r = n % 10\n        if r % 2 == 1 then\n        \
    \    return r * digits(math.floor(n / 10))\n        else\n            return digits(math.floor(n\
    \ / 10))\n        end\n    end\nend\nprint(digits(235))", "  local m = 1\n  while\
    \ n > 0 do\n    local x = n % 10\n    if x % 2 ~= 0 then\n      m = m * x\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return m\nend", "    local x = 1\n\
    \    if n < 10 then\n        if n % 2 == 1 then\n            return n\n      \
    \  else\n            return 0\n        end\n    else\n        local a = n % 10\n\
    \        if a % 2 == 1 then\n            x = a\n        end\n        return x\
    \ * digits(math.floor(n / 10))\n    end\nend", "  local p = 1\n  while n ~= 0\
    \ do\n    local d = n % 10\n    if d % 2 == 1 then\n      p = p * d\n    end\n\
    \    n = (n - d) / 10\n  end\n  return p\nend\nassert(digits(1) == 1)\nassert(digits(4)\
    \ == 0)\nassert(digits(235) == 15)", "    if n < 10 then\n        return (n %\
    \ 2 == 1) and n or 0\n    else\n        return (n % 2 == 1) and (n % 10) * digits(math.floor(n\
    \ / 10)) or digits(math.floor(n / 10))\n    end\nend", "  if n < 10 then\n   \
    \ return n % 2 == 1 and n or 0\n  else\n    return (n % 10 % 2 == 1 and n % 10\
    \ or 1) * digits(math.floor(n / 10))\n  end\nend", "  local result = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      result = result\
    \ * d\n    end\n    n = (n - d) / 10\n  end\n  return result\nend", "  local result\
    \ = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n\
    \      result = result * digit\n    end\n    n = (n - digit) / 10\n  end\n  return\
    \ result\nend", "  local p = 1\n  if n < 10 then\n    if n % 2 == 1 then\n   \
    \   return n\n    else\n      return 0\n    end\n  else\n    local d = n % 10\n\
    \    if d % 2 == 1 then\n      p = d\n    end\n    return p * digits(math.floor(n\
    \ / 10))\n  end\nend", "    n = n or 0\n    return n > 0 and math.prod {n % 10,\
    \ digits(math.floor(n / 10))} or 0\nend", "  n = math.abs(n)\n  local product\
    \ = 1\n  while n > 0 do\n    local digit = n % 10\n    if (digit % 2) == 1 then\n\
    \      product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n\
    \  return product\nend", "  local sum = 1\n  while n ~= 0 do\n    local d = n\
    \ % 10\n    if d % 2 == 1 then\n      sum = sum * d\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return sum\nend", "    n = n or 0\n    local product = 1\n \
    \   for digit in tostring(n):gmatch(\"%d\") do\n        digit = tonumber(digit)\n\
    \        if digit % 2 == 1 then\n            product = product * digit\n     \
    \   end\n    end\n    return product\nend", "  n = n % 10\n  return n % 2 ~= 0\
    \ and n or 0\nend", "  local product = 1\n  local str = tostring(n)\n  for i =\
    \ 1, #str do\n    local digit = tonumber(str:sub(i, i))\n    if (digit % 2 ==\
    \ 1) then\n      product = product * digit\n    end\n  end\n  return product\n\
    end", "\tlocal res = 1\n\tfor d in n:gmatch\"%d\" do\n\t\td = tonumber(d)\n\t\t\
    if d % 2 == 1 then\n\t\t\tres = res * d\n\t\tend\n\tend\n\treturn res\nend", " \
    \ return foldl(\n    function(acc, c) return acc * ((c % 2 == 1) and c or 1) end,\n\
    \    1,\n    map(tonumber, split(tostring(n), ''))\n  )\nend", "    local result\
    \ = 1\n    while n ~= 0 do\n        local digit = n % 10\n        if digit % 2\
    \ == 1 then\n            result = result * digit\n        end\n        n = (n\
    \ - digit) / 10\n    end\n    return result\nend", "    local mult = 1\n    while\
    \ n ~= 0 do\n        local x = n % 10\n        if x % 2 == 1 then\n          \
    \  mult = mult * x\n        end\n        n = math.floor(n / 10)\n    end\n   \
    \ return mult\nend", "  local p = 1\n  while n ~= 0 do\n    local d = n % 10\n\
    \    if d % 2 == 1 then\n      p = p * d\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return p\nend", "    local prod = 1\n    while n > 0 do\n        local\
    \ d = n % 10\n        if d % 2 == 1 then\n            prod = prod * d\n      \
    \  end\n        n = math.floor(n / 10)\n    end\n    return prod\nend", "    local\
    \ digits = 0\n    local digits_product = 1\n    if n < 0 then\n        n = -n\n\
    \    end\n    if n == 0 then\n        return 0\n    end\n    while n > 0 do\n\
    \        local digit = n % 10\n        if digit % 2 == 1 then\n            digits_product\
    \ = digits_product * digit\n        end\n        n = (n - digit) / 10\n    end\n\
    \    return digits_product\nend", "\tlocal ret = 1\n\twhile n > 0 do\n\t\tlocal\
    \ d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tret = ret * d\n\t\tend\n\t\tn = (n\
    \ - d) / 10\n\tend\n\treturn ret\nend", "  if n < 1 then return 0 end\n  local\
    \ digit = n % 10\n  local product = digit % 2 == 1 and digit or 0\n  return product\
    \ * digits(math.floor(n / 10))\nend", "    local d = n % 10\n    if d % 2 == 0\
    \ then\n        return 0\n    else\n        local nn = math.floor(n / 10)\n  \
    \      if nn == 0 then\n            return d\n        else\n            return\
    \ d * digits(nn)\n        end\n    end\nend", "    if n == 0 then\n        return\
    \ 0\n    else\n        local d = n % 10\n        if d % 2 == 1 then\n        \
    \    return d * digits(math.floor(n / 10))\n        else\n            return digits(math.floor(n\
    \ / 10))\n        end\n    end\nend", "\tlocal r = 1\n\twhile n > 0 do\n\t\tlocal\
    \ t = n % 10\n\t\tif t % 2 == 1 then\n\t\t\tr = r * t\n\t\tend\n\t\tn = math.floor(n\
    \ / 10)\n\tend\n\treturn r\nend", "\tlocal prod = 1\n\twhile n > 0 do\n\t\tlocal\
    \ digit = n % 10\n\t\tif digit % 2 == 1 then\n\t\t\tprod = prod * digit\n\t\t\
    end\n\t\tn = n // 10\n\tend\n\treturn prod\nend", "    local r = 1\n    for i\
    \ = 1, #tostring(n) do\n        local d = tonumber(tostring(n):sub(i, i))\n  \
    \      if d % 2 == 1 then\n            r = r * d\n        end\n    end\n    return\
    \ r\nend", "    local result = 1\n    for i = 1, #tostring(n) do\n        local\
    \ digit = tonumber(tostring(n):sub(i, i))\n        if digit % 2 == 1 then\n  \
    \          result = result * digit\n        end\n    end\n    return result\n\
    end", "  local result = 1\n  while n > 0 do\n    local d = n % 10\n    if d %\
    \ 2 == 1 then\n      result = result * d\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return result\nend", "  if n < 10 then\n    return n % 2 == 1 and n\
    \ or 0\n  else\n    return (n % 10 % 2 == 1 and n % 10 or 1) * digits(math.floor(n\
    \ / 10))\n  end\nend", "  local product = 1\n  for d in n:gmatch(\"%d\") do\n\
    \    d = tonumber(d)\n    if d % 2 == 1 then\n      product = product * d\n  \
    \  end\n  end\n  return product\nend", "  local result = 1\n  while n > 0 do\n\
    \    local digit = n % 10\n    if digit % 2 == 1 then\n      result = result *\
    \ digit\n    end\n    n = math.floor(n / 10)\n  end\n  return result\nend", " \
    \   local result = 1\n    while n > 0 do\n        if n % 2 ~= 0 then\n       \
    \     result = result * (n % 10)\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return result\nend", "    local product = 1\n    while n > 0 do\n\
    \        local r = n % 10\n        if r % 2 == 1 then\n            product = product\
    \ * r\n        end\n        n = math.floor(n / 10)\n    end\n    return product\n\
    end", "  local res = 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2 ==\
    \ 1 then\n      res = res * d\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ res\nend", "    local product = 1\n    while n > 0 do\n        local digit =\
    \ n % 10\n        if digit % 2 == 1 then\n            product = product * digit\n\
    \        end\n        n = (n - digit) / 10\n    end\n    return product\nend",
  "  local product = 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1\
    \ then\n      product = product * d\n    end\n    n = (n - d) / 10\n  end\n  return\
    \ product\nend", "    local p = 1\n    for d in string.gmatch(tostring(n), \"\
    %d\") do\n        if (tonumber(d) % 2) ~= 0 then\n            p = p * tonumber(d)\n\
    \        end\n    end\n    return p\nend", "    local product = 1\n    for i in\
    \ tostring(n):gmatch('%d') do\n        local digit = tonumber(i)\n        if digit\
    \ % 2 == 1 then\n            product = product * digit\n        end\n    end\n\
    \    return product\nend", "  return 0\nend", "  local sum = 1\n  while n ~= 0\
    \ do\n    local d = n % 10\n    if d % 2 == 1 then\n      sum = sum * d\n    end\n\
    \    n = math.floor(n / 10)\n  end\n  return sum\nend", "  local result = 1\n\
    \  while n > 0 do\n    local last = n % 10\n    if last % 2 ~= 0 then\n      result\
    \ = result * last\n    end\n    n = (n - last) / 10\n  end\n  return result\n\
    end", "    local prod = 1\n    while n > 0 do\n        local d = n % 10\n    \
    \    if d % 2 == 1 then\n            prod = prod * d\n        end\n        n =\
    \ (n - d) / 10\n    end\n    return prod\nend", "\tlocal result = 1\n\trepeat\n\
    \t\tlocal digit = n % 10\n\t\tif digit % 2 == 1 then\n\t\t\tresult = result *\
    \ digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\tuntil n == 0\n\treturn result\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
