name: HumanEval_73_smallest_change
language: lua
results:
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \  if #arr <= 1 then return 0 end\n  local n = #arr\n  local sum = 0\n  for i=1,\
    \ math.floor(n/2) do\n    sum = sum + arr[i]\n  end\n  local sum_rev = 0\n  for\
    \ i=math.ceil(n/2), n do\n    sum_rev = sum_rev + arr[i]\n  end\n  local min_sum\
    \ = math.min(sum, sum_rev)\n  local max_sum = math.max(sum, sum_rev)\n  return\
    \ max_sum - min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = smallest_change\n    lu.assertEquals(candidate({1, 2, 3, 5,\
    \ 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)\n\
    \    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11as0m6r.lua:30:\
    \ expected: 4, actual: 20\nstack traceback:\n\t/tmp/tmp11as0m6r.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \    -- TODO: implement the function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = smallest_change\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2,\
    \ 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiadrd_zc.lua:18:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmpiadrd_zc.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = smallest_change\n    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7,\
    \ 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3, 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}),\
    \ 0)\n    lu.assertEquals(candidate({0, 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlf3x_mi.lua:18:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpvlf3x_mi.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n\
    \    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9x8rrw7q.lua:17:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmp9x8rrw7q.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \tlocal changed_count = 0\n\tlocal left_idx = 1\n\tlocal right_idx = #arr\n\t\
    while left_idx < right_idx do\n\t\tif arr[left_idx] ~= arr[right_idx] then\n\t\
    \t\tchanged_count = changed_count + 1\n\t\tend\n\t\tleft_idx = left_idx + 1\n\t\
    \tright_idx = right_idx - 1\n\tend\n\treturn changed_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = smallest_change\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2,\
    \ 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \    local function find_palindrome(a, b)\n        if b <= a then\n          \
    \  return 0\n        end\n        local mid = (a + b) // 2\n        if arr[mid]\
    \ == arr[mid + 1] then\n            return find_palindrome(a, mid - 1) + find_palindrome(mid\
    \ + 2, b)\n        else\n            return find_palindrome(a, mid - 1) + find_palindrome(mid\
    \ + 1, b) + 1\n        end\n    end\n    return find_palindrome(1, #arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n\
    \    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8_ws38z.lua:30:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpl8_ws38z.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = smallest_change\n    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7,\
    \ 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3, 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}),\
    \ 0)\n    lu.assertEquals(candidate({0, 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zb_wm04.lua:18:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmp6zb_wm04.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \    if #arr <= 1 then\n        return 0\n    end\n    local left = 1\n    local\
    \ right = #arr\n    local change = 0\n    while left < right do\n        if arr[left]\
    \ ~= arr[right] then\n            change = change + 1\n        end\n        left\
    \ = left + 1\n        right = right - 1\n    end\n    return change\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n\
    \    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \tlocal min_changes = 0\n\tlocal left_idx = 1\n\tlocal right_idx = #arr\n\twhile\
    \ left_idx < right_idx do\n\t\tif arr[left_idx] ~= arr[right_idx] then\n\t\t\t\
    min_changes = min_changes + 1\n\t\tend\n\t\tleft_idx = left_idx + 1\n\t\tright_idx\
    \ = right_idx - 1\n\tend\n\treturn min_changes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = smallest_change\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2,\
    \ 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \    local l, r = 1, #arr\n    local count = 0\n    while l < r do\n        if\
    \ arr[l] ~= arr[r] then\n            count = count + 1\n        end\n        l\
    \ = l + 1\n        r = r - 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = smallest_change\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2,\
    \ 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \tlocal min_diff = -1\n\tlocal pair = nil\n\tfor i = 1, #arr / 2 do\n\t\tif arr[i]\
    \ ~= arr[#arr - i + 1] then\n\t\t\tlocal diff = math.abs(arr[i] - arr[#arr - i\
    \ + 1])\n\t\t\tif min_diff == -1 or diff < min_diff then\n\t\t\t\tmin_diff = diff\n\
    \t\t\t\tpair = {i, #arr - i + 1}\n\t\t\tend\n\t\tend\n\tend\n\tif min_diff ==\
    \ -1 then\n\t\treturn 0\n\telse\n\t\treturn min_diff + smallest_change(table.filter(arr,\
    \ function(k, v)\n\t\t\treturn k ~= pair[1] and k ~= pair[2]\n\t\tend))\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n\
    \    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2e5ig6o6.lua:26:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp2e5ig6o6.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp2e5ig6o6.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \    local count = 0\n    local first = 1\n    local last = #arr\n    while first\
    \ < last do\n        if arr[first] ~= arr[last] then\n            count = count\
    \ + 1\n        end\n        first = first + 1\n        last = last - 1\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = smallest_change\n    lu.assertEquals(candidate({1, 2, 3, 5,\
    \ 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)\n\
    \    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \  local n = #arr\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for\
    \ j = 1, n do\n      dp[i][j] = math.huge\n    end\n  end\n  for i = 1, n do\n\
    \    dp[i][i] = 0\n  end\n  for i = 1, n - 1 do\n    dp[i][i + 1] = 1\n  end\n\
    \  for i = n - 1, 1, -1 do\n    for j = i + 2, n do\n      if arr[i] == arr[j]\
    \ then\n        dp[i][j] = dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.min(dp[i\
    \ + 1][j], dp[i][j - 1]) + 1\n      end\n    end\n  end\n  return dp[1][n]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n\
    \    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya8kak_6.lua:41:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmpya8kak_6.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \  local middle = math.floor(#arr / 2)\n  local count = 0\n  for i = 1, middle\
    \ do\n    if arr[i] ~= arr[#arr - i + 1] then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = smallest_change\n    lu.assertEquals(candidate({1, 2, 3, 5,\
    \ 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)\n\
    \    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \  local reversed = {}\n  for i, v in ipairs(arr) do\n    reversed[#arr-i+1] =\
    \ v\n  end\n  local to_change = 0\n  for i = 1, #arr do\n    if arr[i] ~= reversed[i]\
    \ then\n      to_change = to_change + 1\n    end\n  end\n  return to_change /\
    \ 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = smallest_change\n    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}),\
    \ 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3, 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}),\
    \ 0)\n    lu.assertEquals(candidate({0, 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \  local size = #arr\n  if size < 2 then\n    return 0\n  end\n  local i = 1\n\
    \  local j = size\n  local min_change = 0\n  while i < j do\n    if arr[i] ~=\
    \ arr[j] then\n      min_change = min_change + 1\n    end\n    i = i + 1\n   \
    \ j = j - 1\n  end\n  return min_change\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = smallest_change\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2,\
    \ 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n\
    \    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphadwhpmv.lua:17:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmphadwhpmv.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n\
    \    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4z9x9f5.lua:17:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmpc4z9x9f5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n\
    \    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n2uqlmu.lua:17:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmp7n2uqlmu.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table arr of integers, find the minimum number of elements\
    \ that\n-- need to be changed to make the table palindromic. A palindromic table\
    \ is a table that\n-- is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n-- For example:\n-- >>> smallest_change({1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n-- 4\n-- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})\n\
    -- 1\n-- >>> smallest_change({1, 2, 3, 2, 1})\n-- 0\nlocal function smallest_change(arr)\n\
    \    -- write your solution here\n    local n = #arr\n    local dp = {}\n    for\
    \ i = 0, n do\n        dp[i] = {}\n        for j = 0, n do\n            dp[i][j]\
    \ = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 0\n    end\n\
    \    for i = 1, n - 1 do\n        dp[i][i + 1] = math.abs(arr[i] - arr[i + 1])\n\
    \    end\n    for i = n - 1, 1, -1 do\n        for j = i + 2, n do\n         \
    \   dp[i][j] = math.min(dp[i + 1][j] + math.abs(arr[i] - arr[i + 1]), dp[i][j\
    \ - 1] + math.abs(arr[j] - arr[j - 1]))\n        end\n    end\n    return dp[1][n]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_change\n\
    \    lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 3, 2, 2}), 1)\n    lu.assertEquals(candidate({1, 4, 2}), 1)\n    lu.assertEquals(candidate({1,\
    \ 4, 4, 2}), 1)\n    lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)\n    lu.assertEquals(candidate({3,\
    \ 1, 1, 3}), 0)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma20r34o.lua:38:\
    \ expected: 4, actual: 13\nstack traceback:\n\t/tmp/tmpma20r34o.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
