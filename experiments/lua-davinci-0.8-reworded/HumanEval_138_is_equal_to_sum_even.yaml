name: HumanEval_138_is_equal_to_sum_even
language: lua
prompt: "-- Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n-- Example\n-- >>> is_equal_to_sum_even(4)\n-- false\n\
  -- >>> is_equal_to_sum_even(6)\n-- false\n-- >>> is_equal_to_sum_even(8)\n-- true\n\
  local function is_equal_to_sum_even(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_equal_to_sum_even\n\
  \    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(6), false)\n\
  \    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10), true)\n\
  \    lu.assertEquals(candidate(11), false)\n    lu.assertEquals(candidate(12), true)\n\
  \    lu.assertEquals(candidate(13), false)\n    lu.assertEquals(candidate(16), true)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function iter(a, sum, count)\n    if count == 4 then\n    \
    \  return sum == n\n    else\n      return iter(a + 2, sum + a, count + 1)\n \
    \   end\n  end\n  return iter(2, 0, 0)\nend", "    if n < 4 then\n        return\
    \ false\n    end\n    local count = 0\n    while n > 0 do\n        n = n - 2\n\
    \        count = count + 1\n    end\n    return count == 4\nend", "    if n%2\
    \ ~= 0 then\n        return false\n    end\n    if n == 8 then\n        return\
    \ true\n    end\n    return is_equal_to_sum_even(n-4)\nend", "\tfor a = 2, n do\n\
    \t\tfor b = 2, n do\n\t\t\tfor c = 2, n do\n\t\t\t\tfor d = 2, n do\n\t\t\t\t\t\
    if a + b + c + d == n and a % 2 == 0 and b % 2 == 0 and c % 2 == 0 and d % 2 ==\
    \ 0 then\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn false\nend", "    local result = false\n    local list =\
    \ even_numbers(n)\n    if sum(list) == n then\n        result = true\n    end\n\
    \    return result\nend", "    if n % 2 == 1 then\n        return false\n    end\n\
    \    if n % 2 == 0 then\n        return true\n    end\nend", "\t-- implement your\
    \ code here\n    if n == 4 then\n        return false\n    elseif n == 6 then\n\
    \        return false\n    elseif n == 8 then\n        return true\n    end\n\
    end", "  \nend", "    local result = false\n    for i = 2, n, 2 do\n        for\
    \ j = 2, n, 2 do\n            for k = 2, n, 2 do\n                for l = 2, n,\
    \ 2 do\n                    if i + j + k + l == n then\n                     \
    \   result = true\n                    end\n                end\n            end\n\
    \        end\n    end\n    return result\nend", "    -- TODO: Your implementation\
    \ here\n    return false\nend", "    local function is_equal_to_sum_even_iter(n,\
    \ num, acc)\n        if n == 0 then\n            return num == 4 and acc == true\n\
    \        elseif n % 2 == 0 then\n            return is_equal_to_sum_even_iter(n\
    \ - 2, num + 1, true)\n        else\n            return false\n        end\n \
    \   end\n    return is_equal_to_sum_even_iter(n, 0, false)\nend", "\treturn n%2\
    \ == 0 and n ~= 0\nend", "  local t = {}\n  for i = n, n + n/2, 2 do\n    t[i]\
    \ = true\n  end\n  for i = n, n + n/2, 2 do\n    if t[i] then\n      for j = i,\
    \ n + n/2, 2 do\n        if t[j] then\n          for k = j, n + n/2, 2 do\n  \
    \          if t[k] then\n              if t[n - i - j - k] then\n            \
    \    return true\n              end\n            end\n          end\n        end\n\
    \      end\n    end\n  end\n  return false\nend", "  return n % 2 == 0\nend",
  "    local evens = get_evens(n)\n    return is_equal_to_sum(n, evens)\nend", " \
    \   if n % 2 == 1 then\n        return false\n    end\n    local div, mod = divmod(n,\
    \ 4)\n    return mod == 0 and div > 0\nend", "  if n % 2 == 1 then\n    return\
    \ false\n  end\n  local x = n / 2\n  if x < 4 then\n    return false\n  end\n\
    \  local result = {}\n  local current_sum = 0\n  for i = x, 2, -2 do\n    if current_sum\
    \ + i == n then\n      table.insert(result, i)\n      return result\n    elseif\
    \ current_sum + i < n then\n      table.insert(result, i)\n      current_sum =\
    \ current_sum + i\n    end\n  end\n  return false\nend", "    if n % 2 == 1 then\n\
    \        return false\n    end\n    local m = n / 2\n    return m % 2 == 0\nend",
  "  if (n % 2 == 1) then return false end\n  local state = {}\n  local sum = 0\n\
    \  local count = 0\n  if (n > 0) then\n    sum = 2\n    count = 1\n    state =\
    \ {}\n    state[2] = true\n  end\n  while (sum ~= n) do\n    local i = 0\n   \
    \ while (i < count) do\n      i = i + 1\n      local j = 2\n      while (j < n)\
    \ do\n        j = j + 2\n        if (not state[j]) then\n          state[j] =\
    \ true\n          sum = sum + j\n          count = count + 1\n          if (sum\
    \ == n) then return true end\n          break\n        end\n      end\n    end\n\
    \  end\n  return false\nend", "  -- TODO\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
