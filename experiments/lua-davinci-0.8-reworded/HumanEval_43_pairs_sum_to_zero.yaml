name: HumanEval_43_pairs_sum_to_zero
language: lua
prompt: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
  \ true if there are two distinct elements in the table that\n-- sum to zero, and\
  \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
  \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
  \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
  -- false\nlocal function pairs_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
  \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    for i = 1, #l do\n        for j = i + 1, #l do\n            if\
    \ l[i] + l[j] == 0 then\n                return true\n            end\n      \
    \  end\n    end\n    return false\nend", "  local a = {}\n  for i, e in ipairs(l)\
    \ do\n    if a[e] then\n      return true\n    end\n    a[-e] = true\n  end\n\
    \  return false\nend", "  for k, v in pairs(l) do\n    for n, m in pairs(l) do\n\
    \      if n ~= k and v + m == 0 then\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "    local seen = {}\n    for _, i in ipairs(l)\
    \ do\n        if seen[-i] then\n            return true\n        end\n       \
    \ seen[i] = true\n    end\n    return false\nend", "    -- TODO: Implement this!\n\
    \    if (#l > 1) then\n        for i = 1, (#l - 1) do\n            for j = i +\
    \ 1, #l do\n                if (l[i] + l[j] == 0) then\n                    return\
    \ true\n                end\n            end\n        end\n    end\n    return\
    \ false\nend", "  local flag = false\n  for i, x in ipairs(l) do\n    for j, y\
    \ in ipairs(l) do\n      if i ~= j and x + y == 0 then\n        flag = true\n\
    \      end\n    end\n  end\n  return flag\nend", "  table.sort(l)\n  local N =\
    \ #l\n  local i = 1\n  local j = N\n  while i <= j do\n    local v = l[i] + l[j]\n\
    \    if v == 0 then\n      return true\n    elseif v < 0 then\n      i = i + 1\n\
    \    else\n      j = j - 1\n    end\n  end\n  return false\nend", '    local s
    = {}', "    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i]\
    \ + l[j] == 0 then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    -- YOUR CODE HERE\n    error(\"not implemented\"\
    )\nend", "    for i, v in ipairs(l) do\n        for j, k in ipairs(l) do\n   \
    \         if v ~= k and v + k == 0 then\n                return true\n       \
    \     end\n        end\n    end\n    return false\nend", "  return false\nend",
  "    if table.getn(l) == 1 then\n        return false\n    end\n    for i,_ in ipairs(l)\
    \ do\n        for j,_ in ipairs(l) do\n            if l[i] + l[j] == 0 and l[i]\
    \ ~= l[j] then\n                return true\n            end\n        end\n  \
    \  end\n    return false\nend", "    for i = 1, #l do\n        for j = i + 1,\
    \ #l do\n            if l[i] + l[j] == 0 then\n                return true\n \
    \           end\n        end\n    end\n    return false\nend", "  -- replace this\
    \ line with your implementation\n  return false\nend", "   local seen = {}\n \
    \  for _, v in ipairs(l) do\n      if seen[-v] then\n         return true\n  \
    \    end\n      seen[v] = true\n   end\n   return false\nend", '  local found
    = false', "    -- We are going to loop through the list and store\n    -- what\
    \ we have seen in a dictionary. We can then check\n    -- if we have seen the\
    \ negative of the current number\n    -- (or the current number if it is negative).\n\
    \    local dict = {}\n    for i,v in ipairs(l) do\n        -- check if we have\
    \ seen the negative of the current number\n        if dict[-v] then\n        \
    \    return true\n        end\n        -- store the current number\n        dict[v]\
    \ = true\n    end\n    return false\nend", "  for i = 1, #l - 1 do\n    for j\
    \ = i + 1, #l do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "    -- your code here\n    return false\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
