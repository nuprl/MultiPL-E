name: HumanEval_69_search
language: lua
prompt: "-- You are given a non-empty table of positive integers. Return the greatest\
  \ integer that is greater than \n-- zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n-- The frequency of an integer is the number\
  \ of times it appears in the table.\n-- If no such a value exist, return -1.\n--\
  \ Examples:\n-- >>> search({4, 1, 2, 2, 3, 1})\n-- 2\n-- >>> search({1, 2, 2, 3,\
  \ 3, 3, 4, 4, 4})\n-- 3\n-- >>> search({5, 5, 4, 4, 4})\n-- -1\nlocal function search(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n\
  \    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)\n    lu.assertEquals(candidate({4,\
  \ 1, 4, 1, 4, 4}), 4)\n    lu.assertEquals(candidate({3, 3}), -1)\n    lu.assertEquals(candidate({8,\
  \ 8, 8, 8, 8, 8, 8, 8}), 8)\n    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)\n\
  \    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1}), 1)\n    lu.assertEquals(candidate({3, 2, 8, 2}), 2)\n   \
  \ lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)\n    lu.assertEquals(candidate({8,\
  \ 8, 3, 6, 5, 6, 4}), -1)\n    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1,\
  \ 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)\n    lu.assertEquals(candidate({1,\
  \ 9, 10, 1, 3}), 1)\n    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)\n    lu.assertEquals(candidate({1}),\
  \ 1)\n    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)\n    lu.assertEquals(candidate({2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)\n    lu.assertEquals(candidate({1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)\n    lu.assertEquals(candidate({9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4}), 4)\n    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)\n    lu.assertEquals(candidate({9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)\n    lu.assertEquals(candidate({5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)\n    lu.assertEquals(candidate({10}),\
  \ -1)\n    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
  \ 2)\n    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)\n \
  \   lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6}), 1)\n    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local c = {}\n    for _, v in ipairs(lst) do\n        c[v] = c[v]\
    \ and c[v] + 1 or 1\n    end\n    for _, v in ipairs(lst) do\n        if c[v]\
    \ >= v then\n            return v\n        end\n    end\n    return -1\nend",
  "  if #lst <= 1 then return -1 end\n  local m, k = 0, -1\n  for i = 1, #lst do\n\
    \    local x = lst[i]\n    local y = 0\n    for j = 1, #lst do\n      y = y +\
    \ (lst[j] == x and 1 or 0)\n    end\n    if y >= x and x > k then\n      m, k\
    \ = x, x\n    end\n  end\n  return m\nend", "    local seen = {}\n    for i, n\
    \ in ipairs(lst) do\n        seen[n] = (seen[n] or 0) + 1\n    end\n    local\
    \ max = 0\n    for i, n in ipairs(lst) do\n        if seen[n] >= n and n > max\
    \ then\n            max = n\n        end\n    end\n    return max > 0 and max\
    \ or -1\nend", "    local value_to_frequency_map = {}\n    for _, v in ipairs(lst)\
    \ do\n        value_to_frequency_map[v] = (value_to_frequency_map[v] or 0) + 1\n\
    \    end\n    local biggest_value = -1\n    for v, f in pairs(value_to_frequency_map)\
    \ do\n        if v >= f and v > biggest_value then\n            biggest_value\
    \ = v\n        end\n    end\n    return biggest_value\nend", "  -- your code here\n\
    \  return -1\nend", "    local max = 0\n    local count = {}\n    for _, x in\
    \ ipairs(lst) do\n        if not count[x] then\n            count[x] = 1\n   \
    \     else\n            count[x] = count[x] + 1\n        end\n        if x > max\
    \ then\n            max = x\n        end\n    end\n    for i = max, 1, -1 do\n\
    \        if count[i] and count[i] >= i then\n            return i\n        end\n\
    \    end\n    return -1\nend", "    local cnt = {}\n    for _, v in ipairs(lst)\
    \ do\n        cnt[v] = (cnt[v] or 0) + 1\n    end\n    local rv = -1\n    for\
    \ k, v in pairs(cnt) do\n        if v >= k and k > rv then\n            rv = k\n\
    \        end\n    end\n    return rv\nend", "    local count = {}\n    for _,\
    \ v in ipairs(lst) do\n        count[v] = (count[v] or 0) + 1\n    end\n    local\
    \ ret = -1\n    for i = #lst, 1, -1 do\n        if count[i] and count[i] >= i\
    \ then\n            ret = i\n            break\n        end\n    end\n    return\
    \ ret\nend", "  local cnt = {}\n  for _, v in ipairs(lst) do\n    cnt[v] = (cnt[v]\
    \ or 0) + 1\n  end\n  local max_k, max_v = -1, -1\n  for k, v in pairs(cnt) do\n\
    \    if v >= k and v > max_v then\n      max_k, max_v = k, v\n    end\n  end\n\
    \  return max_k\nend", "    local countTable = {}\n    for i, v in ipairs(lst)\
    \ do\n        if countTable[v] then\n            countTable[v] = countTable[v]\
    \ + 1\n        else\n            countTable[v] = 1\n        end\n    end\n   \
    \ local result = -1\n    for i, v in ipairs(lst) do\n        if v >= 1 and countTable[v]\
    \ >= v and v > result then\n            result = v\n        end\n    end\n   \
    \ return result\nend\nreturn search", "    local h = {}\n    for _, v in ipairs(lst)\
    \ do\n        h[v] = (h[v] or 0) + 1\n    end\n    local r = -1\n    for k, v\
    \ in pairs(h) do\n        if v >= k and k > r then\n            r = k\n      \
    \  end\n    end\n    return r\nend", "  local res = 0\n  local m = 0\n  for _,v\
    \ in ipairs(lst) do\n    local c = 0\n    for _,v2 in ipairs(lst) do\n      if\
    \ v == v2 then\n        c = c + 1\n      end\n    end\n    if c >= v and c > m\
    \ then\n      res = v\n      m = c\n    end\n  end\n  if res == 0 then return\
    \ -1 end\n  return res\nend", "  local t = {}\n  for _, i in ipairs(lst) do\n\
    \    if not t[i] then\n      t[i] = 1\n    else\n      t[i] = t[i] + 1\n    end\n\
    \  end\n  local m, v = -1, -1\n  for k, v in pairs(t) do\n    if k >= v and v\
    \ > m then\n      m = v\n      v = k\n    end\n  end\n  return v\nend", "  local\
    \ counts = {}\n  for _, n in ipairs(lst) do\n    counts[n] = (counts[n] or 0)\
    \ + 1\n  end\n  local best = -1\n  for n, c in pairs(counts) do\n    if n <= c\
    \ and n > best then\n      best = n\n    end\n  end\n  return best\nend", "  local\
    \ g = -1\n  local map = {}\n  for _, v in ipairs(lst) do\n    map[v] = (map[v]\
    \ or 0) + 1\n  end\n  for _, v in ipairs(lst) do\n    if map[v] >= v and v > g\
    \ then\n      g = v\n    end\n  end\n  return g\nend", "\tlocal result = -1\n\t\
    for _, v in ipairs(lst) do\n\t\tlocal found = 0\n\t\tfor _, c in ipairs(lst) do\n\
    \t\t\tif c == v then\n\t\t\t\tfound = found + 1\n\t\t\tend\n\t\tend\n\t\tif found\
    \ >= v and found > result then\n\t\t\tresult = found\n\t\tend\n\tend\n\treturn\
    \ result > 0 and result or -1\nend", "    local m = {}\n    for i = 1, #lst do\n\
    \        if m[lst[i]] then\n            m[lst[i]] = m[lst[i]] + 1\n        else\n\
    \            m[lst[i]] = 1\n        end\n    end\n    local max_f = -1\n    local\
    \ max_key = -1\n    for k, v in pairs(m) do\n        if v >= k and k > max_key\
    \ then\n            max_key = k\n            max_f = v\n        end\n    end\n\
    \    return max_key\nend", "    -- TODO: complete me\nend", "    local hist =\
    \ {}\n    for i, v in ipairs(lst) do\n        hist[v] = (hist[v] or 0) + 1\n \
    \   end\n    local max = -1\n    for i, v in ipairs(lst) do\n        if hist[v]\
    \ >= v and v > max then\n            max = v\n        end\n    end\n    return\
    \ max\nend", "    local freq, max = {}, {}\n    for i, v in ipairs(lst) do\n \
    \       if not freq[v] then freq[v] = 0 end\n        freq[v] = freq[v] + 1\n \
    \       if v > 0 and freq[v] >= v then\n            max[#max + 1] = v\n      \
    \  end\n    end\n    return #max == 0 and -1 or math.max(unpack(max))\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
