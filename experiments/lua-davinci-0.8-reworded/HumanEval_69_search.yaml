name: HumanEval_69_search
language: lua
prompt: "-- You are given a non-empty table of positive integers. Return the greatest\
  \ integer that is greater than \n-- zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n-- The frequency of an integer is the number\
  \ of times it appears in the table.\n-- If no such a value exist, return -1.\n--\
  \ Examples:\n-- >>> search({4, 1, 2, 2, 3, 1})\n-- 2\n-- >>> search({1, 2, 2, 3,\
  \ 3, 3, 4, 4, 4})\n-- 3\n-- >>> search({5, 5, 4, 4, 4})\n-- -1\nlocal function search(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n\
  \    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)\n    lu.assertEquals(candidate({4,\
  \ 1, 4, 1, 4, 4}), 4)\n    lu.assertEquals(candidate({3, 3}), -1)\n    lu.assertEquals(candidate({8,\
  \ 8, 8, 8, 8, 8, 8, 8}), 8)\n    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)\n\
  \    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1}), 1)\n    lu.assertEquals(candidate({3, 2, 8, 2}), 2)\n   \
  \ lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)\n    lu.assertEquals(candidate({8,\
  \ 8, 3, 6, 5, 6, 4}), -1)\n    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1,\
  \ 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)\n    lu.assertEquals(candidate({1,\
  \ 9, 10, 1, 3}), 1)\n    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)\n    lu.assertEquals(candidate({1}),\
  \ 1)\n    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)\n    lu.assertEquals(candidate({2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)\n    lu.assertEquals(candidate({1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)\n    lu.assertEquals(candidate({9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4}), 4)\n    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)\n    lu.assertEquals(candidate({9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)\n    lu.assertEquals(candidate({5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)\n    lu.assertEquals(candidate({10}),\
  \ -1)\n    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
  \ 2)\n    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)\n \
  \   lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6}), 1)\n    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local c = {}\n    for _, v in ipairs(lst) do\n        c[v] = c[v]\
    \ and c[v] + 1 or 1\n    end\n    for _, v in ipairs(lst) do\n        if c[v]\
    \ >= v then\n            return v\n        end\n    end\n    return -1\nend",
  "  if #lst <= 1 then return -1 end\n  local m, k = 0, -1\n  for i = 1, #lst do\n\
    \    local x = lst[i]\n    local y = 0\n    for j = 1, #lst do\n      y = y +\
    \ (lst[j] == x and 1 or 0)\n    end\n    if y >= x and x > k then\n      m, k\
    \ = x, x\n    end\n  end\n  return m\nend", "    local seen = {}\n    for i, n\
    \ in ipairs(lst) do\n        seen[n] = (seen[n] or 0) + 1\n    end\n    local\
    \ max = 0\n    for i, n in ipairs(lst) do\n        if seen[n] >= n and n > max\
    \ then\n            max = n\n        end\n    end\n    return max > 0 and max\
    \ or -1\nend", "    local value_to_frequency_map = {}\n    for _, v in ipairs(lst)\
    \ do\n        value_to_frequency_map[v] = (value_to_frequency_map[v] or 0) + 1\n\
    \    end\n    local biggest_value = -1\n    for v, f in pairs(value_to_frequency_map)\
    \ do\n        if v >= f and v > biggest_value then\n            biggest_value\
    \ = v\n        end\n    end\n    return biggest_value\nend", "  -- your code here\n\
    \  return -1\nend", "    local max = 0\n    local count = {}\n    for _, x in\
    \ ipairs(lst) do\n        if not count[x] then\n            count[x] = 1\n   \
    \     else\n            count[x] = count[x] + 1\n        end\n        if x > max\
    \ then\n            max = x\n        end\n    end\n    for i = max, 1, -1 do\n\
    \        if count[i] and count[i] >= i then\n            return i\n        end\n\
    \    end\n    return -1\nend", "    local cnt = {}\n    for _, v in ipairs(lst)\
    \ do\n        cnt[v] = (cnt[v] or 0) + 1\n    end\n    local rv = -1\n    for\
    \ k, v in pairs(cnt) do\n        if v >= k and k > rv then\n            rv = k\n\
    \        end\n    end\n    return rv\nend", "    local count = {}\n    for _,\
    \ v in ipairs(lst) do\n        count[v] = (count[v] or 0) + 1\n    end\n    local\
    \ ret = -1\n    for i = #lst, 1, -1 do\n        if count[i] and count[i] >= i\
    \ then\n            ret = i\n            break\n        end\n    end\n    return\
    \ ret\nend", "  local cnt = {}\n  for _, v in ipairs(lst) do\n    cnt[v] = (cnt[v]\
    \ or 0) + 1\n  end\n  local max_k, max_v = -1, -1\n  for k, v in pairs(cnt) do\n\
    \    if v >= k and v > max_v then\n      max_k, max_v = k, v\n    end\n  end\n\
    \  return max_k\nend", "    local countTable = {}\n    for i, v in ipairs(lst)\
    \ do\n        if countTable[v] then\n            countTable[v] = countTable[v]\
    \ + 1\n        else\n            countTable[v] = 1\n        end\n    end\n   \
    \ local result = -1\n    for i, v in ipairs(lst) do\n        if v >= 1 and countTable[v]\
    \ >= v and v > result then\n            result = v\n        end\n    end\n   \
    \ return result\nend\nreturn search", "    local h = {}\n    for _, v in ipairs(lst)\
    \ do\n        h[v] = (h[v] or 0) + 1\n    end\n    local r = -1\n    for k, v\
    \ in pairs(h) do\n        if v >= k and k > r then\n            r = k\n      \
    \  end\n    end\n    return r\nend", "  local res = 0\n  local m = 0\n  for _,v\
    \ in ipairs(lst) do\n    local c = 0\n    for _,v2 in ipairs(lst) do\n      if\
    \ v == v2 then\n        c = c + 1\n      end\n    end\n    if c >= v and c > m\
    \ then\n      res = v\n      m = c\n    end\n  end\n  if res == 0 then return\
    \ -1 end\n  return res\nend", "  local t = {}\n  for _, i in ipairs(lst) do\n\
    \    if not t[i] then\n      t[i] = 1\n    else\n      t[i] = t[i] + 1\n    end\n\
    \  end\n  local m, v = -1, -1\n  for k, v in pairs(t) do\n    if k >= v and v\
    \ > m then\n      m = v\n      v = k\n    end\n  end\n  return v\nend", "  local\
    \ counts = {}\n  for _, n in ipairs(lst) do\n    counts[n] = (counts[n] or 0)\
    \ + 1\n  end\n  local best = -1\n  for n, c in pairs(counts) do\n    if n <= c\
    \ and n > best then\n      best = n\n    end\n  end\n  return best\nend", "  local\
    \ g = -1\n  local map = {}\n  for _, v in ipairs(lst) do\n    map[v] = (map[v]\
    \ or 0) + 1\n  end\n  for _, v in ipairs(lst) do\n    if map[v] >= v and v > g\
    \ then\n      g = v\n    end\n  end\n  return g\nend", "\tlocal result = -1\n\t\
    for _, v in ipairs(lst) do\n\t\tlocal found = 0\n\t\tfor _, c in ipairs(lst) do\n\
    \t\t\tif c == v then\n\t\t\t\tfound = found + 1\n\t\t\tend\n\t\tend\n\t\tif found\
    \ >= v and found > result then\n\t\t\tresult = found\n\t\tend\n\tend\n\treturn\
    \ result > 0 and result or -1\nend", "    local m = {}\n    for i = 1, #lst do\n\
    \        if m[lst[i]] then\n            m[lst[i]] = m[lst[i]] + 1\n        else\n\
    \            m[lst[i]] = 1\n        end\n    end\n    local max_f = -1\n    local\
    \ max_key = -1\n    for k, v in pairs(m) do\n        if v >= k and k > max_key\
    \ then\n            max_key = k\n            max_f = v\n        end\n    end\n\
    \    return max_key\nend", "    -- TODO: complete me\nend", "    local hist =\
    \ {}\n    for i, v in ipairs(lst) do\n        hist[v] = (hist[v] or 0) + 1\n \
    \   end\n    local max = -1\n    for i, v in ipairs(lst) do\n        if hist[v]\
    \ >= v and v > max then\n            max = v\n        end\n    end\n    return\
    \ max\nend", "    local freq, max = {}, {}\n    for i, v in ipairs(lst) do\n \
    \       if not freq[v] then freq[v] = 0 end\n        freq[v] = freq[v] + 1\n \
    \       if v > 0 and freq[v] >= v then\n            max[#max + 1] = v\n      \
    \  end\n    end\n    return #max == 0 and -1 or math.max(unpack(max))\nend", " \
    \   local count = {}\n    for i = 1, #lst do\n        if count[lst[i]] then\n\
    \            count[lst[i]] = count[lst[i]] + 1\n        else\n            count[lst[i]]\
    \ = 1\n        end\n    end\n    local key = -1\n    for i = 1, #lst do\n    \
    \    if count[lst[i]] >= lst[i] and lst[i] > key then\n            key = lst[i]\n\
    \        end\n    end\n    return key\nend", "\tlocal f = {}\n\tfor i = 1, #lst\
    \ do\n\t\tlocal n = lst[i]\n\t\tf[n] = (f[n] or 0) + 1\n\tend\n\tfor i = #lst,\
    \ 1, -1 do\n\t\tlocal n = lst[i]\n\t\tif f[n] >= n then\n\t\t\treturn n\n\t\t\
    end\n\tend\n\treturn -1\nend", "    if not lst then\n        return -1\n    end\n\
    \    local result = -1\n    local t = { }\n    for _, val in ipairs(lst) do\n\
    \        if val > 0 then\n            t[val] = (t[val] or 0) + 1\n        end\n\
    \    end\n    for val, count in pairs(t) do\n        if val <= count and result\
    \ < val then\n            result = val\n        end\n    end\n    return result\n\
    end", "    for i = 1, #lst do\n        local f = 0\n        for j = 1, #lst do\n\
    \            if lst[i] == lst[j] then\n                f = f + 1\n           \
    \ end\n        end\n        if lst[i] == f then\n            return lst[i]\n \
    \       end\n    end\n    return -1\nend", "    local dic = {}\n    for _, n in\
    \ ipairs(lst) do\n        if dic[n] then\n            dic[n] = dic[n] + 1\n  \
    \      else\n            dic[n] = 1\n        end\n    end\n    local min_key =\
    \ nil\n    for key, n in pairs(dic) do\n        if key == n and (not min_key or\
    \ min_key < key) then\n            min_key = key\n        end\n    end\n    return\
    \ min_key or -1\nend", "    local m = {}\n    for _, v in ipairs(lst) do\n   \
    \     m[v] = (m[v] or 0) + 1\n    end\n    local k = -1\n    for k1, v1 in pairs(m)\
    \ do\n        if k1 <= v1 and k1 > k then\n            k = k1\n        end\n \
    \   end\n    return k\nend", "  local result = -1\n  local counters = {}\n  for\
    \ i, v in ipairs(lst) do\n    if counters[v] then\n      counters[v] = counters[v]\
    \ + 1\n    else\n      counters[v] = 1\n    end\n  end\n  for i, v in ipairs(lst)\
    \ do\n    if v > 0 and counters[v] >= v and v > result then\n      result = v\n\
    \    end\n  end\n  return result\nend", "    local h = {}\n    for _, v in ipairs(lst)\
    \ do\n        h[v] = h[v] and h[v] + 1 or 1\n    end\n    local max = -1\n   \
    \ for k, v in pairs(h) do\n        if k > 0 and k <= v and max < k then\n    \
    \        max = k\n        end\n    end\n    return max\nend", "  return select(2,\
    \ next(lst, select(2, next(lst, -1))))\nend", "    local counts = {}\n    for\
    \ _, v in ipairs(lst) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n\
    \    local max = 0\n    for k, v in pairs(counts) do\n        if v >= k and k\
    \ > max then\n            max = k\n        end\n    end\n    return max > 0 and\
    \ max or -1\nend", "    -- code here\nend", "  local counts = {}\n  for _,v in\
    \ ipairs(lst) do\n    if counts[v] then\n      counts[v] = counts[v] + 1\n   \
    \ else\n      counts[v] = 1\n    end\n  end\n  local res\n  for k,v in pairs(counts)\
    \ do\n    if v >= k and (not res or k > res) then\n      res = k\n    end\n  end\n\
    \  return res or -1\nend", "\tlocal dic,max_v,max_k = {},0,0\n\tfor _,v in ipairs(lst)\
    \ do\n\t\tif dic[v] == nil then dic[v] = 1 else dic[v] = dic[v] + 1 end\n\t\t\
    if v > max_v then\n\t\t\tmax_v = v\n\t\t\tmax_k = v\n\t\telseif v == max_v then\n\
    \t\t\tmax_k = max_v\n\t\tend\n\tend\n\treturn dic[max_k] >= max_k and max_k or\
    \ -1\nend", "  return lst[#lst]\nend", end, end, "    return 0\nend", "  local\
    \ mx = math.max(unpack(lst))\n  local mn = math.min(unpack(lst))\n  local freq\
    \ = {}\n  for _, v in ipairs(lst) do\n    freq[v] = freq[v] and freq[v] + 1 or\
    \ 1\n  end\n  for i = mx, mn, -1 do\n    if freq[i] and freq[i] >= i then\n  \
    \    return i\n    end\n  end\n  return -1\nend", "  local r, a = -1, {}\n  for\
    \ _, v in ipairs(lst) do a[v] = (a[v] or 0) + 1 end\n  for _, v in ipairs(lst)\
    \ do\n    if v > 0 and a[v] >= v and v > r then r = v end\n  end\n  return r\n\
    end", "    local a = {}\n    for _, v in ipairs(lst) do\n        if a[v] then\n\
    \            a[v] = a[v] + 1\n        else\n            a[v] = 1\n        end\n\
    \    end\n    local max = -1\n    for k, v in pairs(a) do\n        if k >= v and\
    \ k > max then\n            max = k\n        end\n    end\n    return max\nend",
  "    local count_lst = {}\n    for _, v in ipairs(lst) do\n        count_lst[v]\
    \ = count_lst[v] or 0\n        count_lst[v] = count_lst[v] + 1\n    end\n    local\
    \ count_lst_keys = {}\n    for k, _ in pairs(count_lst) do\n        table.insert(count_lst_keys,\
    \ k)\n    end\n    table.sort(count_lst_keys)\n    for _, k in ipairs(count_lst_keys)\
    \ do\n        if count_lst[k] >= k then\n            return k\n        end\n \
    \   end\n    return -1\nend", "    lst = table.map_values(function(x) return x\
    \ + 1 end, lst)\n    local counts = {}\n    for _, x in ipairs(lst) do\n     \
    \   counts[x] = (counts[x] or 0) + 1\n    end\n    local max = -1\n    for x,\
    \ c in pairs(counts) do\n        if x <= c and x > max then\n            max =\
    \ x\n        end\n    end\n    return max - 1\nend", "    -- Code here...\nend",
  "    local ret = -1\n    local maxNum = 0\n    local count = 0\n    local Map =\
    \ {}\n    for k, v in pairs(lst) do\n        if Map[v] == nil then\n         \
    \   Map[v] = 1\n        else\n            Map[v] = Map[v] + 1\n        end\n \
    \       if Map[v] >= v and v > maxNum then\n            ret = v\n            maxNum\
    \ = v\n        end\n    end\n    return ret\nend", "    for _,k in ipairs(lst)\
    \ do\n        local m = 0\n        for _,v in ipairs(lst) do\n            if v\
    \ == k then\n                m = m + 1\n            end\n        end\n       \
    \ if m >= k then\n            return k\n        end\n    end\n    return -1\n\
    end", "    local counts = {}\n    for _, v in ipairs(lst) do\n        counts[v]\
    \ = (counts[v] or 0) + 1\n    end\n    local high\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 and counts[v] >= v and (not high or v > high) then\n  \
    \          high = v\n        end\n    end\n    return high or -1\nend", "    local\
    \ count = {}\n    for _, v in ipairs(lst) do\n        count[v] = (count[v] or\
    \ 0) + 1\n    end\n    local max = 0\n    for k, v in pairs(count) do\n      \
    \  if v >= k and k > max then\n            max = k\n        end\n    end\n   \
    \ return max == 0 and -1 or max\nend", "  local res = -1\n  local val = -1\n \
    \ for _, v in ipairs(lst) do\n    if v > val then\n      local found = false\n\
    \      for _, k in ipairs(lst) do\n        if k == v then\n          found = true\n\
    \        end\n      end\n      if found then\n        res = v\n        val = v\n\
    \      end\n    end\n  end\n  return res\nend", "    local t = {}\n    for _,\
    \ v in ipairs(lst) do\n        if not t[v] then\n            t[v] = 1\n      \
    \  else\n            t[v] = t[v] + 1\n        end\n    end\n    local res = -1\n\
    \    for k, v in pairs(t) do\n        if v >= k and k > res then\n           \
    \ res = k\n        end\n    end\n    return res\nend", "    for _, el in ipairs(lst)\
    \ do\n        local count = 0\n        for _, el2 in ipairs(lst) do\n        \
    \    if el == el2 then\n                count = count + 1\n            end\n \
    \       end\n        if count >= el then\n            return el\n        end\n\
    \    end\n    return -1\nend", "    local t = {}\n    for _,v in ipairs(lst) do\n\
    \        t[v] = (t[v] or 0) + 1\n    end\n    local maxValue = -1\n    for k,v\
    \ in pairs(t) do\n        if v >= k and k > maxValue then\n            maxValue\
    \ = k\n        end\n    end\n    return maxValue\nend", "    local result = {}\n\
    \    for _, v in ipairs(lst) do\n        result[v] = result[v] and result[v] +\
    \ 1 or 1\n    end\n    local v, c = -1, 0\n    for k, n in pairs(result) do\n\
    \        if n >= k and n > c then\n            v, c = k, n\n        end\n    end\n\
    \    return v\nend", "  local cnt = {}\n  for _, v in ipairs(lst) do\n    cnt[v]\
    \ = (cnt[v] or 0) + 1\n  end\n  local key, value = -1, -1\n  for k, v in pairs(cnt)\
    \ do\n    if k > value and v >= k then\n      key, value = k, v\n    end\n  end\n\
    \  return key\nend", "    local hash = {}\n    for _, v in ipairs(lst) do\n  \
    \      if not hash[v] then\n            hash[v] = 1\n        else\n          \
    \  hash[v] = hash[v] + 1\n        end\n    end\n    for _, v in ipairs(lst) do\n\
    \        if hash[v] >= v then\n            return v\n        end\n    end\n  \
    \  return -1\nend", "\tlocal integer, count = 0, -1\n\tfor _, v in ipairs(lst)\
    \ do\n\t\tlocal new_count = 0\n\t\tfor _, j in ipairs(lst) do\n\t\t\tif v == j\
    \ then\n\t\t\t\tnew_count = new_count + 1\n\t\t\tend\n\t\tend\n\t\tif new_count\
    \ >= v and new_count > count then\n\t\t\tinteger, count = v, new_count\n\t\tend\n\
    \tend\n\treturn integer\nend", "\tlocal res = -1\n\tlocal maxfreq = 0\n\tfor k,v\
    \ in pairs(lst) do\n\t\tlocal count = 0\n\t\tfor k2,v2 in pairs(lst) do\n\t\t\t\
    if v == v2 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count >=\
    \ v and count > maxfreq then\n\t\t\tres = v\n\t\t\tmaxfreq = count\n\t\tend\n\t\
    end\n\treturn res\nend", "  local cnt = {}\n  for i, v in ipairs(lst) do\n   \
    \ cnt[v] = (cnt[v] or 0) + 1\n  end\n  local mx = 0\n  for i, v in ipairs(lst)\
    \ do\n    if cnt[v] >= v and v > mx then\n      mx = v\n    end\n  end\n  return\
    \ mx > 0 and mx or -1\nend", "    local max = -1\n    local counts = {}\n    for\
    \ i, v in ipairs(lst) do\n        if counts[v] == nil then\n            counts[v]\
    \ = 1\n        else\n            counts[v] = counts[v] + 1\n        end\n    \
    \    if counts[v] >= v and v > max then\n            max = v\n        end\n  \
    \  end\n    return max\nend", "    -- TODO implement your solution here\nend",
  "    local map = {}\n    for _, v in ipairs(lst) do\n        map[v] = (map[v] or\
    \ 0) + 1\n    end\n    local greatest = -1\n    for _, v in ipairs(lst) do\n \
    \       if (map[v] or 0) >= v and v > greatest then\n            greatest = v\n\
    \        end\n    end\n    return greatest\nend", "    local cnt = {}\n    for\
    \ i, v in ipairs(lst) do\n        cnt[v] = (cnt[v] or 0) + 1\n    end\n    local\
    \ max, maxv = -1, -1\n    for i, v in ipairs(lst) do\n        if v == cnt[v] and\
    \ v > max then\n            max, maxv = v, i\n        end\n    end\n    return\
    \ maxv\nend", "  local keys = {}\n  local values = {}\n  for _,v in ipairs(lst)\
    \ do\n    if keys[v] then\n      keys[v] = keys[v] + 1\n    else\n      keys[v]\
    \ = 1\n    end\n  end\n  for k,v in pairs(keys) do\n    table.insert(values, {k,\
    \ v})\n  end\n  table.sort(values, function(a, b) return a[2] > b[2] end)\n  for\
    \ i,v in ipairs(values) do\n    if v[1] <= v[2] then\n      return v[1]\n    end\n\
    \  end\n  return -1\nend", "    -- for i = 1, #lst do\n    --     local cur =\
    \ lst[i]\n    --     local sum = 0\n    --     for j = 1, #lst do\n    --    \
    \     if lst[j] == cur then\n    --             sum = sum + 1\n    --        \
    \ end\n    --     end\n    --     if sum >= cur then\n    --         return cur\n\
    \    --     end\n    -- end\n    -- return -1\n    local num = -1\n    local temp\
    \ = {}\n    for i = 1, #lst do\n        local n = lst[i]\n        if temp[n] ==\
    \ nil then\n            temp[n] = 1\n        else\n            temp[n] = temp[n]\
    \ + 1\n        end\n        if temp[n] >= n and n > num then\n            num\
    \ = n\n        end\n    end\n    return num\nend", "    local max, maxCount =\
    \ -1, -1\n    for i = 1, #lst do\n        local count = 0\n        for j = 1,\
    \ #lst do\n            if lst[j] == lst[i] then\n                count = count\
    \ + 1\n            end\n        end\n        if lst[i] <= count and count > maxCount\
    \ then\n            max = lst[i]\n            maxCount = count\n        end\n\
    \    end\n    return max\nend", "  local frequencies = {}\n  for _, v in ipairs(lst)\
    \ do\n    frequencies[v] = (frequencies[v] or 0) + 1\n  end\n  local largest,\
    \ _ = next(frequencies)\n  for i, v in pairs(frequencies) do\n    if i > largest\
    \ and i <= v then\n      largest = i\n    end\n  end\n  return largest <= 0 and\
    \ -1 or largest\nend", "    local map = {}\n    for i, v in ipairs(lst) do\n \
    \       if map[v] then\n            map[v] = map[v] + 1\n        else\n      \
    \      map[v] = 1\n        end\n    end\n    local res = -1\n    for k, v in pairs(map)\
    \ do\n        if v >= k and k > res then\n            res = k\n        end\n \
    \   end\n    return res\nend", "  local result = -1\n  local intcnt = {}\n  for\
    \ i, v in ipairs(lst) do\n    if v > 0 then\n      if intcnt[v] then\n       \
    \ intcnt[v] = intcnt[v] + 1\n      else\n        intcnt[v] = 1\n      end\n  \
    \  end\n  end\n  for i, v in ipairs(lst) do\n    if intcnt[v] and intcnt[v] >=\
    \ v then\n      result = v\n    end\n  end\n  return result\nend", "  local result\
    \ = 0\n  local count = 0\n  for i = 1, #lst do\n    if result < lst[i] then\n\
    \      result = lst[i]\n      count = 1\n    elseif result == lst[i] then\n  \
    \    count = count + 1\n    end\n  end\n  return count >= result and result or\
    \ -1\nend", "\t-- your code here\nend", "    local max, count = 1, 0\n    for\
    \ i = 1, #lst do\n        if lst[i] > max then max = lst[i] end\n    end\n   \
    \ for i = 1, max do\n        count = 0\n        for j = 1, #lst do\n         \
    \   if lst[j] == i then count = count + 1 end\n        end\n        if count >=\
    \ i then return i end\n    end\n    return -1\nend", "  local max = 0\n  local\
    \ max_count = 0\n  for _,v in ipairs(lst) do\n    local count = 0\n    for _,vv\
    \ in ipairs(lst) do\n      if v == vv then\n        count = count + 1\n      end\n\
    \    end\n    if v >= count and v > max_count then\n      max = v\n      max_count\
    \ = count\n    end\n  end\n  if max_count >= max then\n    return max\n  else\n\
    \    return -1\n  end\nend", "    local max = -1\n    local mx_cnt = 0\n    for\
    \ _, v in ipairs(lst) do\n        local cnt = 0\n        for _, v2 in ipairs(lst)\
    \ do\n            if v == v2 then\n                cnt = cnt + 1\n           \
    \ end\n        end\n        if v > 0 and cnt >= v and cnt > mx_cnt then\n    \
    \        max = v\n            mx_cnt = cnt\n        end\n    end\n    return max\n\
    end", "    local freq = {}\n    for i = 1, #lst do\n        if freq[lst[i]] ==\
    \ nil then\n            freq[lst[i]] = 1\n        else\n            freq[lst[i]]\
    \ = freq[lst[i]] + 1\n        end\n    end\n    local max = -1\n    for i = 1,\
    \ #lst do\n        if lst[i] <= freq[lst[i]] and lst[i] > max then\n         \
    \   max = lst[i]\n        end\n    end\n    return max\nend", "    local count\
    \ = {}\n    for _, v in ipairs(lst) do\n        count[v] = (count[v] or 0) + 1\n\
    \    end\n    local t = {}\n    for k, v in pairs(count) do\n        if v >= k\
    \ then\n            table.insert(t, k)\n        end\n    end\n    if #t == 0 then\n\
    \        return -1\n    end\n    return table.max(t)\nend", "    local count =\
    \ {}\n    for _, v in ipairs(lst) do\n        if count[v] then\n            count[v]\
    \ = count[v] + 1\n        else\n            count[v] = 1\n        end\n    end\n\
    \    local result\n    for k, v in pairs(count) do\n        if v >= k and (not\
    \ result or k > result) then\n            result = k\n        end\n    end\n \
    \   return result or -1\nend", "    local d = {}\n    for i = 1, #lst do\n   \
    \     if not d[lst[i]] then\n            d[lst[i]] = 1\n        else\n       \
    \     d[lst[i]] = d[lst[i]] + 1\n        end\n    end\n    local m = -1\n    for\
    \ k, v in pairs(d) do\n        if k >= v and m < k then\n            m = k\n \
    \       end\n    end\n    return m\nend", "    local count = {}\n    for _, v\
    \ in ipairs(lst) do\n        count[v] = (count[v] or 0) + 1\n    end\n    local\
    \ max = -1\n    for k, v in pairs(count) do\n        if v >= k and k > max then\n\
    \            max = k\n        end\n    end\n    return max\nend", "  local min\
    \ = {}\n  for i = 1, #lst do\n    min[lst[i]] = min[lst[i]] and min[lst[i]] +\
    \ 1 or 1\n  end\n  local minkey = {}\n  for key, val in pairs(min) do\n    if\
    \ key >= val then\n      table.insert(minkey, key)\n    end\n  end\n  table.sort(minkey)\n\
    \  return #minkey ~= 0 and minkey[#minkey] or -1\nend", "    local num = 0\n \
    \   local freq = 0\n    for _, v in ipairs(lst) do\n        if v > num and lst:count(v)\
    \ >= v then\n            num = v\n        end\n    end\n    return num > 0 and\
    \ num or -1\nend", "    local res = -1\n    local m = {}\n    for i, v in ipairs(lst)\
    \ do\n        m[v] = (m[v] or 0) + 1\n    end\n    for i, v in ipairs(lst) do\n\
    \        if v > 0 and m[v] >= v and v > res then\n            res = v\n      \
    \  end\n    end\n    return res\nend", "    local max_v = 0\n    local max_c =\
    \ 0\n    for _,v in ipairs(lst) do\n        local c = 0\n        for _,v2 in ipairs(lst)\
    \ do\n            if v == v2 then\n                c = c + 1\n            end\n\
    \        end\n        if c >= v and c > max_c then\n            max_v = v\n  \
    \          max_c = c\n        end\n    end\n    if max_v == 0 then\n        return\
    \ -1\n    else\n        return max_v\n    end\nend", "    -- YOUR CODE HERE\n\
    \    return -1\nend", "  local res, count = -1, {}\n  for i, v in ipairs(lst)\
    \ do\n    count[v] = (count[v] or 0) + 1\n    if v > 0 and count[v] >= v and v\
    \ > res then\n      res = v\n    end\n  end\n  return res\nend", "    local counts\
    \ = {}\n    for _, i in ipairs(lst) do\n        counts[i] = (counts[i] or 0) +\
    \ 1\n    end\n    local ret = -1\n    for _, i in ipairs(lst) do\n        if i\
    \ > 0 and counts[i] >= i and i > ret then\n            ret = i\n        end\n\
    \    end\n    return ret\nend", "  local m = {}\n  for i,v in ipairs(lst) do\n\
    \    m[v] = (m[v] or 0) + 1\n  end\n  local r = {}\n  for i,v in ipairs(lst) do\n\
    \    if m[v] >= v then\n      table.insert(r, v)\n    end\n  end\n  if #r == 0\
    \ then\n    return -1\n  end\n  table.sort(r)\n  return r[#r]\nend", "  local\
    \ tmp = {}\n  for i, v in ipairs(lst) do\n    if not tmp[v] then\n      tmp[v]\
    \ = 1\n    else\n      tmp[v] = tmp[v] + 1\n    end\n  end\n  local res = -1\n\
    \  for k, v in pairs(tmp) do\n    if k > v and k > res then\n      res = k\n \
    \   end\n  end\n  return res\nend", "  local mx = 0\n  local mxf = 0\n  for i,v\
    \ in ipairs(lst) do\n    local c = 0\n    for j,w in ipairs(lst) do\n      if\
    \ w == v then\n        c = c + 1\n      end\n    end\n    if c >= v and c >= mxf\
    \ then\n      mx = v\n      mxf = c\n    end\n  end\n  if mx == 0 then\n    return\
    \ -1\n  else\n    return mx\n  end\nend", "  local n = #lst\n  if n <= 0 then\
    \ return -1 end\n  -- Create a list of unique elements\n  local uniq = {}\n  for\
    \ _, v in ipairs(lst) do\n    if not uniq[v] then uniq[v] = true end\n  end\n\
    \  -- Sort the list\n  table.sort(uniq)\n  -- Get frequencies\n  local f = {}\n\
    \  for _, v in ipairs(lst) do\n    if not f[v] then f[v] = 1 else f[v] = f[v]\
    \ + 1 end\n  end\n  -- Get list of elements that greater than zero and has frequency\
    \ equal to itself\n  local res = {}\n  for k, v in pairs(f) do\n    if k > 0 and\
    \ v >= k then res[#res + 1] = k end\n  end\n  -- Sort the list\n  table.sort(res)\n\
    \  -- If the list is empty, then return -1, otherwise, return the greatest element\n\
    \  return #res == 0 and -1 or res[#res]\nend", "    -- get the frequency of each\
    \ number\n    local freq = {}\n    for _, v in ipairs(lst) do\n        if freq[v]\
    \ then\n            freq[v] = freq[v] + 1\n        else\n            freq[v] =\
    \ 1\n        end\n    end\n    -- check each possible number for frequency\n \
    \   for i = 1, #lst do\n        if freq[i] and freq[i] >= i then\n           \
    \ return i\n        end\n    end\n    return -1\nend", "    if not lst then return\
    \ nil end\n    local rez = 0\n    local count = 0\n    for k,v in pairs(lst) do\n\
    \        if count < v then\n            rez = k\n            count = v\n     \
    \   end\n    end\n    return rez > count and -1 or rez\nend", "    local dic =\
    \ {}\n    for _,v in ipairs(lst) do\n        if dic[v] == nil then\n         \
    \   dic[v] = 1\n        else\n            dic[v] = dic[v] + 1\n        end\n \
    \   end\n    local result = -1\n    for k,v in pairs(dic) do\n        if v >=\
    \ k and k > result then\n            result = k\n        end\n    end\n    return\
    \ result\nend", "\tlocal tmp = {}\n\tfor _,v in ipairs(lst) do\n\t\tif not tmp[v]\
    \ then\n\t\t\ttmp[v] = 1\n\t\telse\n\t\t\ttmp[v] = tmp[v] + 1\n\t\tend\n\tend\n\
    \tlocal value, times = -1, 0\n\tfor k,v in pairs(tmp) do\n\t\tif (v >= k) and\
    \ (v > times) then\n\t\t\tvalue, times = k, v\n\t\tend\n\tend\n\treturn value\n\
    end", "    local freq = {}\n    for _,v in ipairs(lst) do\n        freq[v] = (freq[v]\
    \ or 0) + 1\n    end\n    for _,v in ipairs(lst) do\n        if v <= freq[v] then\n\
    \            return v\n        end\n    end\n    return -1\nend", "    local freq\
    \ = {}\n    for i = 1, #lst do\n        local n = lst[i]\n        freq[n] = (freq[n]\
    \ or 0) + 1\n    end\n    for i = #lst, 1, -1 do\n        local n = lst[i]\n \
    \       if n > 0 and freq[n] >= n then\n            return n\n        end\n  \
    \  end\n    return -1\nend\nassert(search({4, 1, 2, 2, 3, 1}) == 2)\nassert(search({1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4}) == 3)\nassert(search({5, 5, 4, 4, 4}) == -1)", "  \
    \  -- Compute frequencies\n    local freq = {}\n    for _, v in ipairs(lst) do\n\
    \        if not freq[v] then\n            freq[v] = 1\n        else\n        \
    \    freq[v] = freq[v] + 1\n        end\n    end\n    -- Find greatest value where\
    \ frequency >= value\n    local maxval = -1\n    for k, v in pairs(freq) do\n\
    \        if v >= k and k > maxval then\n            maxval = k\n        end\n\
    \    end\n    return maxval\nend", "    local highest = -1\n    local frequency\
    \ = 0\n    for _, v in ipairs(lst) do\n        if v > highest then\n         \
    \   highest = v\n            frequency = 1\n        elseif v == highest then\n\
    \            frequency = frequency + 1\n        end\n    end\n    if frequency\
    \ >= highest then\n        return highest\n    else\n        return -1\n    end\n\
    end", "    local max_key, max_val = 1, -1\n    for _, v in ipairs(lst) do\n  \
    \      if v ~= max_key and count(lst, v) >= v then\n            max_key, max_val\
    \ = v, count(lst, v)\n        end\n    end\n    return max_key\nend", "  local\
    \ tmp = {}\n  for _, item in ipairs(lst) do\n    if tmp[item] == nil then\n  \
    \    tmp[item] = 1\n    else\n      tmp[item] = tmp[item] + 1\n    end\n  end\n\
    \  local max = -1\n  for key, value in pairs(tmp) do\n    if key > max and value\
    \ >= key then\n      max = key\n    end\n  end\n  return max\nend", "  local counts\
    \ = {}\n  for _,v in ipairs(lst) do\n    counts[v] = (counts[v] or 0) + 1\n  end\n\
    \  local max = -1\n  for k,v in pairs(counts) do\n    if v >= k and k > max then\n\
    \      max = k\n    end\n  end\n  return max\nend", "    local n = {}\n    for\
    \ _, v in ipairs(lst) do\n        if n[v] then\n            n[v] = n[v] + 1\n\
    \        else\n            n[v] = 1\n        end\n    end\n    local p = -1\n\
    \    for k, v in pairs(n) do\n        if k > 0 and v >= k and k > p then\n   \
    \         p = k\n        end\n    end\n    return p\nend", "    local counts =\
    \ {}\n    for i = 1, #lst do\n        counts[lst[i]] = (counts[lst[i]] or 0) +\
    \ 1\n    end\n    local max = -1\n    for k, v in pairs(counts) do\n        if\
    \ k > max and k <= v then\n            max = k\n        end\n    end\n    return\
    \ max\nend", "  local mp = {}\n  for _, v in ipairs(lst) do\n    if not mp[v]\
    \ then\n      mp[v] = 1\n    else\n      mp[v] = mp[v] + 1\n    end\n  end\n \
    \ local ans = -1\n  for k, v in pairs(mp) do\n    if v >= k and k > ans then\n\
    \      ans = k\n    end\n  end\n  return ans\nend", "  return -1\nend", "  local\
    \ min = math.huge\n  local max = -math.huge\n  for _, value in ipairs(lst) do\n\
    \    if value < min then\n      min = value\n    end\n    if value > max then\n\
    \      max = value\n    end\n  end\n  local count = {}\n  for _, value in ipairs(lst)\
    \ do\n    count[value] = (count[value] or 0) + 1\n  end\n  for i = max, min, -1\
    \ do\n    if count[i] and count[i] >= i then\n      return i\n    end\n  end\n\
    \  return -1\nend", "    local freq = {}\n    for i = 1, #lst do\n        if not\
    \ freq[lst[i]] then\n            freq[lst[i]] = 1\n        else\n            freq[lst[i]]\
    \ = freq[lst[i]] + 1\n        end\n    end\n    local res = -1\n    for k, v in\
    \ pairs(freq) do\n        if k > v and k > res then\n            res = k\n   \
    \     end\n    end\n    return res\nend", "  for i = 1, #lst do\n    local num\
    \ = lst[i]\n    local count = 0\n    for i = 1, #lst do\n      if lst[i] == num\
    \ then\n        count = count + 1\n      end\n    end\n    if count >= num then\n\
    \      return num\n    end\n  end\n  return -1\nend", "    local ans = -1\n  \
    \  local tmp = {}\n    for _, v in ipairs(lst) do\n        tmp[v] = (tmp[v] or\
    \ 0) + 1\n    end\n    for k, v in pairs(tmp) do\n        if v >= k and k > ans\
    \ then\n            ans = k\n        end\n    end\n    return ans\nend\nreturn\
    \ search", "    local max, max_freq, freq = 0, 0, {}\n    for i = 1, #lst do\n\
    \        local v = lst[i]\n        freq[v] = (freq[v] or 0) + 1\n        if freq[v]\
    \ >= v and v > max_freq then\n            max_freq = v\n            max = v\n\
    \        end\n    end\n    return max_freq == 0 and -1 or max\nend", "  local\
    \ counts = {}\n  for _, v in ipairs(lst) do\n    counts[v] = (counts[v] or 0)\
    \ + 1\n  end\n  local greatest = -1\n  for v, c in pairs(counts) do\n    if v\
    \ > 0 and c >= v and v > greatest then\n      greatest = v\n    end\n  end\n \
    \ return greatest\nend", "  local res = -1\n  local m = {}\n  for i = 1, #lst\
    \ do\n    local n = lst[i]\n    m[n] = (m[n] or 0) + 1\n  end\n  for i = 1, #lst\
    \ do\n    local n = lst[i]\n    if n > 0 and m[n] >= n and n > res then\n    \
    \  res = n\n    end\n  end\n  return res\nend", "    local function count(value,t)\n\
    \        local total = 0\n        for _,v in ipairs(t) do\n            if v ==\
    \ value then\n                total = total + 1\n            end\n        end\n\
    \        return total\n    end\n    table.sort(lst)\n    for _,v in ipairs(lst)\
    \ do\n        if count(v,lst) >= v then\n            return v\n        end\n \
    \   end\n    return -1\nend", "\tlocal max = 0\n\tlocal maxFreq = 0\n\tfor _,\
    \ val in ipairs(lst) do\n\t\tlocal freq = table.count(lst, val)\n\t\tif freq >=\
    \ val and freq >= maxFreq then\n\t\t\tmax = val\n\t\t\tmaxFreq = freq\n\t\tend\n\
    \tend\n\treturn max > 0 and max or -1\nend", "    local result, max_freq = -1,\
    \ 0\n    for _, v in ipairs(lst) do\n        local freq = 0\n        for _, val\
    \ in ipairs(lst) do\n            if v == val then\n                freq = freq\
    \ + 1\n            end\n        end\n        if v <= freq and freq > max_freq\
    \ then\n            result, max_freq = v, freq\n        end\n    end\n    return\
    \ result\nend", "  for i=1, #lst do\n    local value = lst[i]\n    local count\
    \ = 0\n    for _, v in ipairs(lst) do\n      if v == value then\n        count\
    \ = count + 1\n      end\n    end\n    if count >= value then\n      return value\n\
    \    end\n  end\n  return -1\nend", "  local freq = {}\n  for i, v in ipairs(lst)\
    \ do\n    freq[v] = freq[v] and freq[v] + 1 or 1\n  end\n  local max = 0\n  for\
    \ i, v in ipairs(lst) do\n    if (freq[v] >= v) and (v > max) then\n      max\
    \ = v\n    end\n  end\n  return max > 0 and max or -1\nend", "    local res =\
    \ -1\n    local cnts = {}\n    for i = 1, #lst do\n        local cur = lst[i]\n\
    \        cnts[cur] = (cnts[cur] or 0) + 1\n        if cur > 0 and cur <= #lst\
    \ and cnts[cur] >= cur and cur > res then\n            res = cur\n        end\n\
    \    end\n    return res\nend", "    -- your code here\n    --    local hash =\
    \ {}\n    --    for i, v in ipairs(lst) do\n    --        hash[v] = (hash[v] or\
    \ 0) + 1\n    --    end\n    --    local res = -1\n    --    for i, v in ipairs(lst)\
    \ do\n    --        if v >= hash[v] and v > res then\n    --            res =\
    \ v\n    --        end\n    --    end\n    --    return res\n    table.sort(lst)\n\
    \    local hash = {}\n    for i, v in ipairs(lst) do\n        hash[v] = (hash[v]\
    \ or 0) + 1\n    end\n    local res = -1\n    for i, v in ipairs(lst) do\n   \
    \     if v >= hash[v] and v > res then\n            res = v\n        end\n   \
    \ end\n    return res\nend", "  local flist = {}\n  for _, l in ipairs(lst) do\n\
    \    if l > 0 then\n      flist[l] = (flist[l] or 0) + 1\n    end\n  end\n  local\
    \ max = -1\n  for k, v in pairs(flist) do\n    if v >= k and k > max then\n  \
    \    max = k\n    end\n  end\n  return max\nend", "  local m = {}\n  for _, x\
    \ in ipairs(lst) do\n    m[x] = (m[x] or 0) + 1\n  end\n  for i = #lst, 1, -1\
    \ do\n    if m[i] and m[i] >= i then\n      return i\n    end\n  end\n  return\
    \ -1\nend", "  local counter = {}\n  for _, value in ipairs(lst) do\n    if not\
    \ counter[value] then\n      counter[value] = 1\n    else\n      counter[value]\
    \ = counter[value] + 1\n    end\n  end\n  local biggest, biggestNum = -1, -1\n\
    \  for i = 1, #lst do\n    if counter[i] and counter[i] >= i and i > biggestNum\
    \ then\n      biggest, biggestNum = i, i\n    end\n  end\n  return biggest\nend",
  "    local freq = {}\n    for _, v in ipairs(lst) do\n        if not freq[v] then\n\
    \            freq[v] = 1\n        else\n            freq[v] = freq[v] + 1\n  \
    \      end\n    end\n    local candidates = {}\n    for k, v in pairs(freq) do\n\
    \        if k > 0 and k <= v then\n            table.insert(candidates, k)\n \
    \       end\n    end\n    if #candidates == 0 then\n        return -1\n    end\n\
    \    table.sort(candidates, function(a, b) return a > b end)\n    return candidates[1]\n\
    end", "    local k = {}\n    for _, v in ipairs(lst) do\n        k[v] = (k[v]\
    \ or 0) + 1\n    end\n    local res = -1\n    for i = #lst, 1, -1 do\n       \
    \ if k[i] >= i then\n            res = i\n            break\n        end\n   \
    \ end\n    return res\nend", "    local result = -1\n    local freq = 0\n    for\
    \ i, v in ipairs(lst) do\n        local temp = v\n        if result == -1 then\n\
    \            freq = 0\n            for k, val in ipairs(lst) do\n            \
    \    if val == temp then\n                    freq = freq + 1\n              \
    \  end\n            end\n            if temp == freq then\n                result\
    \ = temp\n            end\n        else\n            freq = 0\n            for\
    \ k, val in ipairs(lst) do\n                if val == temp then\n            \
    \        freq = freq + 1\n                end\n            end\n            if\
    \ temp == freq and temp > result then\n                result = temp\n       \
    \     end\n        end\n    end\n    return result\nend", "    local freq = {}\n\
    \    for _, v in ipairs(lst) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n\
    \    local max = -1\n    for k, v in pairs(freq) do\n        if v >= k and k >\
    \ max then\n            max = k\n        end\n    end\n    return max\nend", " \
    \   local count = {}\n    for _, v in ipairs(lst) do\n        count[v] = (count[v]\
    \ or 0) + 1\n    end\n    local max = -1\n    for k, v in pairs(count) do\n  \
    \      if k > 0 and v >= k and k > max then\n            max = k\n        end\n\
    \    end\n    return max\nend", "    local tab = {}\n    for i = 1, #lst do\n\
    \        tab[lst[i]] = tab[lst[i]] or 0\n        tab[lst[i]] = tab[lst[i]] + 1\n\
    \    end\n    local num = 0\n    for i = 1, #lst do\n        if lst[i] > num and\
    \ lst[i] <= tab[lst[i]] then\n            num = lst[i]\n        end\n    end\n\
    \    return num > 0 and num or -1\nend", "  local counts = {}\n  for _, v in ipairs(lst)\
    \ do\n    if not counts[v] then\n      counts[v] = 1\n    else\n      counts[v]\
    \ = counts[v] + 1\n    end\n  end\n  local max_key = -1\n  local max_count = -1\n\
    \  for k, v in pairs(counts) do\n    if k > max_key and v >= k then\n      max_key\
    \ = k\n      max_count = v\n    end\n  end\n  return max_key\nend", "  local f\
    \ = {}\n  for i = 1, #lst do\n    local v = lst[i]\n    f[v] = (f[v] or 0) + 1\n\
    \  end\n  local maxv, maxf = -1, -1\n  for i = 1, #lst do\n    local v = lst[i]\n\
    \    local fv = f[v]\n    if fv >= v and fv > maxf then\n      maxv, maxf = v,\
    \ fv\n    end\n  end\n  return maxv\nend", "  local max = -1\n  local count =\
    \ 0\n  for _, v in ipairs(lst) do\n    if v > max then\n      max = v\n      count\
    \ = 1\n    elseif v == max then\n      count = count + 1\n    end\n  end\n  return\
    \ max > count and -1 or max\nend", "    -- local cnt_tbl = {}\n    -- for _, v\
    \ in ipairs(lst) do\n    --     if not cnt_tbl[v] then\n    --         cnt_tbl[v]\
    \ = 1\n    --     else\n    --         cnt_tbl[v] = cnt_tbl[v] + 1\n    --   \
    \  end\n    -- end\n    -- local r = -1\n    -- for k, v in pairs(cnt_tbl) do\n\
    \    --     if v >= k and k > r then\n    --         r = k\n    --     end\n \
    \   -- end\n    -- return r\n    local max_v = lst[1]\n    for _, v in ipairs(lst)\
    \ do\n        if v > max_v then\n            max_v = v\n        end\n    end\n\
    \    local cnt_tbl = {}\n    for _, v in ipairs(lst) do\n        if not cnt_tbl[v]\
    \ then\n            cnt_tbl[v] = 1\n        else\n            cnt_tbl[v] = cnt_tbl[v]\
    \ + 1\n        end\n    end\n    for i = max_v, 1, -1 do\n        if cnt_tbl[i]\
    \ and cnt_tbl[i] >= i then\n            return i\n        end\n    end\n    return\
    \ -1\nend", "  local freq, res = {}, -1\n  for i, v in ipairs(lst) do freq[v]\
    \ = (freq[v] or 0) + 1 end\n  for k, v in pairs(freq) do res = (v >= k and k or\
    \ res) end\n  return res\nend", "  local counts = {}\n  for _, v in ipairs(lst)\
    \ do\n    counts[v] = (counts[v] or 0) + 1\n  end\n  local max_count = 0\n  local\
    \ max_value = -1\n  for k, v in pairs(counts) do\n    if k >= v and v > max_count\
    \ then\n      max_count = v\n      max_value = k\n    end\n  end\n  return max_value\n\
    end", "    local map = {}\n    for _,x in ipairs(lst) do\n        if not map[x]\
    \ then\n            map[x] = 1\n        else\n            map[x] = map[x] + 1\n\
    \        end\n    end\n    local ret\n    for k,v in pairs(map) do\n        if\
    \ v >= k and (not ret or ret < k) then\n            ret = k\n        end\n   \
    \ end\n    return ret or -1\nend", "  local counts = {}\n  for _, i in ipairs(lst)\
    \ do\n    counts[i] = (counts[i] or 0) + 1\n  end\n  for i = #lst, 1, -1 do\n\
    \    if counts[i] and counts[i] >= i then\n      return i\n    end\n  end\n  return\
    \ -1\nend", "  local counter = {}\n  for i = 1, #lst do\n    local num = lst[i]\n\
    \    counter[num] = (counter[num] or 0) + 1\n  end\n  local candidate\n  for i\
    \ = 1, #lst do\n    local num = lst[i]\n    if num > 0 and (not candidate or num\
    \ > candidate) and num <= counter[num] then\n      candidate = num\n    end\n\
    \  end\n  return candidate or -1\nend", "  local res, cnt = -1, 0\n  for i,v in\
    \ ipairs(lst) do\n    if cnt <= v then res, cnt = v, cnt + 1 end\n  end\n  return\
    \ res\nend", "    local count = {}\n    for _, item in ipairs(lst) do\n      \
    \  count[item] = (count[item] or 0) + 1\n    end\n    local maxVal = -1\n    for\
    \ item, freq in pairs(count) do\n        if item <= freq and item > maxVal then\n\
    \            maxVal = item\n        end\n    end\n    return maxVal\nend", " \
    \   local count_map = {}\n    for _, v in ipairs(lst) do\n        if not count_map[v]\
    \ then\n            count_map[v] = 1\n        else\n            count_map[v] =\
    \ count_map[v] + 1\n        end\n    end\n    local max_val = -1\n    for _, v\
    \ in ipairs(lst) do\n        if v > 0 and count_map[v] >= v and v > max_val then\n\
    \            max_val = v\n        end\n    end\n    return max_val\nend", "  \
    \  local max = -1\n    local dict = {}\n    for _, value in ipairs(lst) do\n \
    \       if dict[value] == nil then\n            dict[value] = 1\n        else\n\
    \            dict[value] = dict[value] + 1\n        end\n    end\n    for i, value\
    \ in ipairs(lst) do\n        if dict[value] ~= nil and dict[value] >= value and\
    \ value > max then\n            max = value\n        end\n    end\n    return\
    \ max\nend", "  local k = 0\n  local n = 0\n  for i, v in ipairs(lst) do\n   \
    \ if v > n then\n      n = v\n      k = 1\n    elseif v == n then\n      k = k\
    \ + 1\n    end\n  end\n  return n == k and n or -1\nend", "  local s = {}\n  for\
    \ _, v in ipairs(lst) do\n    s[v] = (s[v] or 0) + 1\n  end\n  local max = nil\n\
    \  for k, v in pairs(s) do\n    if v >= k and (not max or k > max) then\n    \
    \  max = k\n    end\n  end\n  return max or -1\nend", "  local numbers = {}\n\
    \  for _, v in ipairs(lst) do\n    numbers[v] = (numbers[v] or 0) + 1\n  end\n\
    \  for i = #lst, 1, -1 do\n    if numbers[i] >= i then\n      return i\n    end\n\
    \  end\n  return -1\nend", "\tlocal cnt = {}\n\tfor _, n in ipairs(lst) do\n\t\
    \tif cnt[n] then\n\t\t\tcnt[n] = cnt[n] + 1\n\t\telse\n\t\t\tcnt[n] = 1\n\t\t\
    end\n\tend\n\tfor _, n in ipairs(lst) do\n\t\tif cnt[n] >= n then\n\t\t\treturn\
    \ n\n\t\tend\n\tend\n\treturn -1\nend", "  local t = {}\n  for _, v in ipairs(lst)\
    \ do\n    if not t[v] then\n      t[v] = 1\n    else\n      t[v] = t[v] + 1\n\
    \    end\n  end\n  local g = 0\n  for k, v in pairs(t) do\n    if k > g and v\
    \ >= k then\n      g = k\n    end\n  end\n  if g > 0 then\n    return g\n  else\n\
    \    return -1\n  end\nend", "  local histogram = {}\n  for i = 1, #lst do\n \
    \   histogram[lst[i]] = (histogram[lst[i]] or 0) + 1\n  end\n  local result =\
    \ -1\n  for i = 1, #lst do\n    if histogram[lst[i]] >= lst[i] and lst[i] > result\
    \ then\n      result = lst[i]\n    end\n  end\n  return result\nend", "    return\
    \ -1\nend", "  local h = {}\n  for _, v in ipairs(lst) do\n    h[v] = (h[v] or\
    \ 0) + 1\n  end\n  local m = -1\n  for i, v in ipairs(lst) do\n    if h[v] >=\
    \ v and v > m then\n      m = v\n    end\n  end\n  return m\nend", "    local\
    \ groups = {}\n    for _,v in ipairs(lst) do\n        if not groups[v] then\n\
    \            groups[v] = 1\n        else\n            groups[v] = groups[v] +\
    \ 1\n        end\n    end\n    local res = -1\n    for k,v in pairs(groups) do\n\
    \        if k > res and v >= k then\n            res = k\n        end\n    end\n\
    \    return res\nend", "    local mx = {}\n    for _, v in ipairs(lst) do\n  \
    \      if mx[v] then\n            mx[v] = mx[v] + 1\n        else\n          \
    \  mx[v] = 1\n        end\n    end\n    local c = 0\n    for k, v in pairs(mx)\
    \ do\n        if k <= v then\n            c = k\n        end\n    end\n    return\
    \ c == 0 and -1 or c\nend", "  local t = {}\n  for i, v in ipairs(lst) do\n  \
    \  if t[v] then\n      t[v] = t[v] + 1\n    else\n      t[v] = 1\n    end\n  end\n\
    \  for k, v in pairs(t) do\n    if v >= k then\n      return k\n    end\n  end\n\
    \  return -1\nend", "  local values = {}\n  for _, v in ipairs(lst) do\n    if\
    \ not values[v] then\n      values[v] = 1\n    else\n      values[v] = values[v]\
    \ + 1\n    end\n  end\n  for _, v in ipairs(lst) do\n    if values[v] >= v then\n\
    \      return v\n    end\n  end\n  return -1\nend", "  local map = {}\n  for _,\
    \ v in ipairs(lst) do\n    map[v] = (map[v] or 0) + 1\n  end\n  local max = -1\n\
    \  for i = #lst, 1, -1 do\n    if map[i] >= i then\n      max = i\n    end\n \
    \ end\n  return max\nend", "    local dic = {}\n    for _, i in ipairs(lst) do\n\
    \        dic[i] = dic[i] and dic[i] + 1 or 1\n    end\n    local result = -1\n\
    \    for k, v in pairs(dic) do\n        if k <= v and k > result then\n      \
    \      result = k\n        end\n    end\n    return result\nend", "    for i =\
    \ 1, lst[1] do\n        local count = 0\n        for _, v in ipairs(lst) do\n\
    \            if v == i then\n                count = count + 1\n            end\n\
    \        end\n        if count >= i then\n            return i\n        end\n\
    \    end\n    return -1\nend", "    local maxVal = 0\n    local res = -1\n   \
    \ for _, v in ipairs(lst) do\n        if v > 0 then\n            local cnt = 0\n\
    \            for _, val in ipairs(lst) do\n                if v == val then\n\
    \                    cnt = cnt + 1\n                end\n            end\n   \
    \         if cnt >= v and v > maxVal then\n                maxVal = v\n      \
    \          res = v\n            end\n        end\n    end\n    return res\nend",
  "    local count = {}\n    for i = 1, #lst do\n        local item = lst[i]\n   \
    \     if count[item] then\n            count[item] = count[item] + 1\n       \
    \ else\n            count[item] = 1\n        end\n    end\n    local r\n    for\
    \ i = 1, #lst do\n        local item = lst[i]\n        if item > 0 and count[item]\
    \ >= item then\n            if not r or item > r then\n                r = item\n\
    \            end\n        end\n    end\n    return r or -1\nend\nassert(search({4,\
    \ 1, 2, 2, 3, 1}) == 2)\nassert(search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3)\nassert(search({5,\
    \ 5, 4, 4, 4}) == -1)", "\tlocal max, maxNum = -1, -1\n\tfor _,v in ipairs(lst)\
    \ do\n\t\tlocal cnt = 0\n\t\tfor _,x in ipairs(lst) do\n\t\t\tif x == v then\n\
    \t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\tend\n\t\tif cnt >= v and v > maxNum then\n\
    \t\t\tmaxNum = v\n\t\tend\n\tend\n\treturn maxNum\nend", "\tlocal count = {0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0}\n\tfor _, v in ipairs(lst) do\n\t\tcount[v] = count[v]\
    \ + 1\n\tend\n\tfor i = #count, 1, -1 do\n\t\tif count[i] >= i then\n\t\t\treturn\
    \ i\n\t\tend\n\tend\n\treturn -1\nend", "  local counts = {}\n  for _, v in ipairs(lst)\
    \ do\n    if counts[v] then\n      counts[v] = counts[v] + 1\n    else\n     \
    \ counts[v] = 1\n    end\n  end\n  local m = 0\n  for k, v in pairs(counts) do\n\
    \    if v >= k and k > m then\n      m = k\n    end\n  end\n  return m > 0 and\
    \ m or -1\nend", "    for _,v in ipairs(lst) do\n        local count = 0\n   \
    \     for _, value in ipairs(lst) do\n            if value == v then\n       \
    \         count = count + 1\n            end\n        end\n        if count >=\
    \ v then\n            return v\n        end\n    end\n    return -1\nend", end,
  "\tlocal lst1 = {}\n\tfor k, v in pairs(lst) do\n\t\tlst1[v] = lst1[v] or 0\n\t\t\
    lst1[v] = lst1[v] + 1\n\tend\n\tlocal t = {}\n\tfor k, v in pairs(lst1) do\n\t\
    \tif v >= k then\n\t\t\ttable.insert(t, k)\n\t\tend\n\tend\n\ttable.sort(t)\n\t\
    return t[#t] or -1\nend", "\tlocal dic = {}\n\tfor i,v in ipairs(lst) do\n\t\t\
    dic[v] = dic[v] and dic[v] + 1 or 1\n\tend\n\tlocal max,idx = 0,0\n\tfor i,v in\
    \ ipairs(lst) do\n\t\tif dic[v] >= v and v > max then\n\t\t\tmax = v\n\t\t\tidx\
    \ = i\n\t\tend\n\tend\n\treturn max == 0 and -1 or max\nend", "\tlocal freq =\
    \ {}\n\tfor _, v in ipairs(lst) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\t\
    local res = -1\n\tfor _, v in ipairs(lst) do\n\t\tif freq[v] >= v and v > res\
    \ then\n\t\t\tres = v\n\t\tend\n\tend\n\treturn res\nend", "    local counts =\
    \ {}\n    for _,v in ipairs(lst) do\n        counts[v] = (counts[v] or 0) + 1\n\
    \    end\n    local greatest = -1\n    for k,v in pairs(counts) do\n        if\
    \ k <= v and greatest < k then\n            greatest = k\n        end\n    end\n\
    \    return greatest\nend", "  local m, f = 0, {}\n  for _, v in ipairs(lst) do\n\
    \    f[v] = f[v] and f[v] + 1 or 1\n    if f[v] >= v and v > m then m = v end\n\
    \  end\n  return m > 0 and m or -1\nend", "    local counter = {}\n    for _,\
    \ v in ipairs(lst) do\n        if counter[v] then\n            counter[v] = counter[v]\
    \ + 1\n        else\n            counter[v] = 1\n        end\n    end\n    local\
    \ res = -1\n    for k, v in pairs(counter) do\n        if k > v then\n       \
    \     if k > res then\n                res = k\n            end\n        end\n\
    \    end\n    return res\nend", "    local max = 0\n    local counts = {}\n  \
    \  for _, v in ipairs(lst) do\n        counts[v] = (counts[v] or 0) + 1\n    \
    \    if v > max then\n            max = v\n        end\n    end\n    for i = max,\
    \ 1, -1 do\n        if counts[i] and counts[i] >= i then\n            return i\n\
    \        end\n    end\n    return -1\nend", "    local count = {}\n    for _,\
    \ v in ipairs(lst) do\n        if not count[v] then\n            count[v] = 1\n\
    \        else\n            count[v] = count[v] + 1\n        end\n    end\n   \
    \ local result = -1\n    for _, v in ipairs(lst) do\n        if count[v] and count[v]\
    \ >= v and v > result then\n            result = v\n        end\n    end\n   \
    \ return result\nend", "    local num = 0\n    local cnt = 0\n    for i = 1, #lst\
    \ do\n        if lst[i] > num then\n            num = lst[i]\n            cnt\
    \ = 1\n        elseif lst[i] == num then\n            cnt = cnt + 1\n        end\n\
    \    end\n    return num > cnt and -1 or num\nend", "  local mx = 0\n  local num_mx\
    \ = 0\n  for _, n in ipairs(lst) do\n    if n > mx then\n      mx = n\n      num_mx\
    \ = 1\n    elseif n == mx then\n      num_mx = num_mx + 1\n    end\n  end\n  return\
    \ mx > num_mx and -1 or mx\nend", "    local counter = {}\n    for i,v in ipairs(lst)\
    \ do\n        if counter[v] then\n            counter[v] = counter[v] + 1\n  \
    \      else\n            counter[v] = 1\n        end\n    end\n    for i,v in\
    \ ipairs(lst) do\n        if v <= counter[v] then\n            return v\n    \
    \    end\n    end\n    return -1\nend", "    local rtn = -1\n    local count =\
    \ {}\n    for _, v in ipairs(lst) do\n        count[v] = (count[v] or 0) + 1\n\
    \    end\n    for i, v in ipairs(lst) do\n        if v > 0 and count[v] >= v and\
    \ v > rtn then\n            rtn = v\n        end\n    end\n    return rtn\nend",
  "    -- so we want the max, and the max must appear at least that many times\n \
    \   -- so can iterate through list, and track the max, and when we find a new\
    \ max,\n    -- put in a table, and keep track of how many of that number, and\
    \ if we find a\n    -- number at least that many times, return that number\n \
    \   local the_max, max_table = -1, {}\n    for i = 1, #lst do\n        -- if we\
    \ find a new max, update it\n        if lst[i] > the_max then\n            the_max\
    \ = lst[i]\n            max_table = {}\n            max_table[the_max] = 1\n \
    \       elseif lst[i] == the_max then\n            max_table[the_max] = max_table[the_max]\
    \ + 1\n        end\n    end\n    -- if we didn't find any numbers that had count\
    \ >= the_max, return -1\n    if not max_table[the_max] or max_table[the_max] <\
    \ the_max then\n        return -1\n    end\n    return the_max\nend", end, " \
    \ local count = {}\n  for _, value in ipairs(lst) do\n    count[value] = (count[value]\
    \ or 0) + 1\n  end\n  for _, value in ipairs(lst) do\n    if count[value] >= value\
    \ then\n      return value\n    end\n  end\n  return -1\nend", "    local uniques\
    \ = {}\n    for _, v in ipairs(lst) do\n        if not uniques[v] then\n     \
    \       uniques[v] = 0\n        end\n        uniques[v] = uniques[v] + 1\n   \
    \ end\n    local max, amt = -1, -1\n    for v, cnt in pairs(uniques) do\n    \
    \    if v > 0 and cnt >= v and v > max then\n            max, amt = v, cnt\n \
    \       end\n    end\n    return max\nend", "    local cnt = 0\n    local max\
    \ = 0\n    for _, v in ipairs(lst) do\n        local t = {}\n        for _, vv\
    \ in ipairs(lst) do\n            t[vv] = (t[vv] or 0) + 1\n        end\n     \
    \   if v >= t[v] then\n            cnt = cnt + 1\n            max = math.max(max,\
    \ v)\n        end\n    end\n    return cnt >= 1 and max or -1\nend", "  return\
    \ nil\nend", "    local max = 0\n    local count = 0\n    for _, v in ipairs(lst)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ for i = 1, max do\n        count = 0\n        for _, v in ipairs(lst) do\n \
    \           if v == i then\n                count = count + 1\n            end\n\
    \        end\n        if count >= i then\n            return i\n        end\n\
    \    end\n    return -1\nend\nreturn search", "  local mx, cnt = 0, 0\n  for _,\
    \ v in ipairs(lst) do\n    local n = 0\n    for _, v1 in ipairs(lst) do\n    \
    \  if v == v1 then\n        n = n + 1\n      end\n    end\n    if n >= v and n\
    \ > cnt then\n      mx, cnt = v, n\n    end\n  end\n  return mx > 0 and mx or\
    \ -1\nend", "    local map = {}\n    for _, val in ipairs(lst) do\n        if\
    \ not map[val] then\n            map[val] = 1\n        else\n            map[val]\
    \ = map[val] + 1\n        end\n    end\n    local res = -1\n    for _, val in\
    \ ipairs(lst) do\n        if val > 0 and map[val] and map[val] >= val and val\
    \ > res then\n            res = val\n        end\n    end\n    return res\nend",
  "  local max_int, max_count = 0, 0\n  for i, v in ipairs(lst) do\n    if v > max_int\
    \ then\n      max_int = v\n    end\n  end\n  local counts = {}\n  for i, v in\
    \ ipairs(lst) do\n    if counts[v] then\n      counts[v] = counts[v] + 1\n   \
    \ else\n      counts[v] = 1\n    end\n  end\n  for i = 1, max_int do\n    if counts[i]\
    \ and counts[i] >= i then\n      max_count = i\n    end\n  end\n  if max_count\
    \ == 0 then\n    return -1\n  else\n    return max_count\n  end\nend", "    local\
    \ arr = {}\n    for _,v in ipairs(lst) do\n        arr[v] = (arr[v] or 0) + 1\n\
    \    end\n    local idx = 1\n    while idx <= #lst do\n        if arr[idx] and\
    \ arr[idx] >= idx then\n            return idx\n        end\n        idx = idx\
    \ + 1\n    end\n    return -1\nend", "    for i = #lst, 1, -1 do\n        local\
    \ n = lst[i]\n        local c = 0\n        for _, x in ipairs(lst) do\n      \
    \      if x == n then\n                c = c + 1\n            end\n        end\n\
    \        if c >= n then\n            return n\n        end\n    end\n    return\
    \ -1\nend", "    local frequency = {}\n    for _, n in ipairs(lst) do\n      \
    \  frequency[n] = (frequency[n] or 0) + 1\n    end\n    local max = -1\n    for\
    \ _, n in ipairs(lst) do\n        if frequency[n] >= n and n > max then\n    \
    \        max = n\n        end\n    end\n    return max\nend", "    local counter\
    \ = {}\n    for _, v in ipairs(lst) do\n        if not counter[v] then\n     \
    \       counter[v] = 1\n        else\n            counter[v] = counter[v] + 1\n\
    \        end\n    end\n    local res = -1\n    for i, c in pairs(counter) do\n\
    \        if i > c and i > res then\n            res = i\n        end\n    end\n\
    \    return res\nend", "    local maxInt = -1\n    local maxIntFrequency = -1\n\
    \    for _, x in ipairs(lst) do\n        local frequency = 0\n        for _, z\
    \ in ipairs(lst) do\n            if z == x then\n                frequency = frequency\
    \ + 1\n            end\n        end\n        if frequency >= x and frequency >\
    \ maxIntFrequency then\n            maxInt = x\n            maxIntFrequency =\
    \ frequency\n        end\n    end\n    return maxInt\nend", "    local freq =\
    \ {}\n    for _, item in ipairs(lst) do\n        if freq[item] == nil then\n \
    \           freq[item] = 1\n        else\n            freq[item] = freq[item]\
    \ + 1\n        end\n    end\n    local max = -1\n    for k, v in pairs(freq) do\n\
    \        if v >= k and k > max then\n            max = k\n        end\n    end\n\
    \    return max\nend", "  local map = {}\n  for _, v in ipairs(lst) do\n    map[v]\
    \ = (map[v] or 0) + 1\n  end\n  local t = {}\n  for k, v in pairs(map) do\n  \
    \  t[#t + 1] = {k, v}\n  end\n  table.sort(t, function(a, b) return a[1] > b[1]\
    \ end)\n  for _, v in ipairs(t) do\n    if v[1] == v[2] then\n      return v[1]\n\
    \    end\n  end\n  return -1\nend", "    local integer_dict = {}\n    local max_integer\
    \ = 0\n    for i, element in ipairs(lst) do\n        integer_dict[element] = (integer_dict[element]\
    \ or 0) + 1\n        if element > max_integer then\n            max_integer =\
    \ element\n        end\n    end\n    for i = max_integer, 1, -1 do\n        if\
    \ integer_dict[i] and integer_dict[i] >= i then\n            return i\n      \
    \  end\n    end\n    return -1\nend", "    local res = 0\n    local count = 0\n\
    \    for i = 1, #lst do\n        local c = 0\n        for j = 1, #lst do\n   \
    \         if lst[i] == lst[j] then\n                c = c + 1\n            end\n\
    \        end\n        if lst[i] <= c and lst[i] > res then\n            res =\
    \ lst[i]\n            count = c\n        end\n    end\n    if res == 0 then\n\
    \        return -1\n    else\n        return res\n    end\nend", "    local counter,\
    \ max = {}, 0\n    for i, v in ipairs(lst) do\n        if counter[v] == nil then\n\
    \            counter[v] = 1\n        else\n            counter[v] = counter[v]\
    \ + 1\n        end\n        if counter[v] >= v and v > max then\n            max\
    \ = v\n        end\n    end\n    return max == 0 and -1 or max\nend", "    return\
    \ -1\nend", "  -- your code here\n  --[[\n    for i=1,#lst do\n        n = 0\n\
    \        for k=1,#lst do\n            if lst[i] == lst[k] then\n             \
    \   n = n + 1\n            end\n        end\n        if n == lst[i] then\n   \
    \         return lst[i]\n        end\n    end\n    return -1\n  ]]\n  table.sort(lst)\n\
    \  for i=1,#lst do\n    if lst[i] <= #lst - i then\n      if lst[i] == lst[i+lst[i]-1]\
    \ then\n        return lst[i]\n      end\n    end\n  end\n  return -1\nend", " \
    \ local freq = {}\n  for _, v in ipairs(lst) do\n    if freq[v] then\n      freq[v]\
    \ = freq[v] + 1\n    else\n      freq[v] = 1\n    end\n  end\n  local max = 0\n\
    \  for i = 1, #lst do\n    if (freq[i] or 0) >= i and i > max then\n      max\
    \ = i\n    end\n  end\n  return max > 0 and max or -1\nend", "  local counts =\
    \ {}\n  for i = 1, #lst do\n    local n = lst[i]\n    counts[n] = (counts[n] or\
    \ 0) + 1\n  end\n  for i = #lst, 1, -1 do\n    local n = lst[i]\n    if counts[n]\
    \ >= n then\n      return n\n    end\n  end\n  return -1\nend", "\tlocal count\
    \ = {}\n\tfor _, v in ipairs(lst) do\n\t\tcount[v] = (count[v] or 0) + 1\n\tend\n\
    \tfor k, v in pairs(count) do\n\t\tif v >= k and k > 0 then\n\t\t\treturn k\n\t\
    \tend\n\tend\n\treturn -1\nend", "    local tmp = {}\n    for i = 1, #lst do\n\
    \        if tmp[lst[i]] == nil then\n            tmp[lst[i]] = 1\n        else\n\
    \            tmp[lst[i]] = tmp[lst[i]] + 1\n        end\n    end\n    local res\
    \ = -1\n    for i = 1, #lst do\n        if tmp[lst[i]] >= lst[i] and lst[i] >\
    \ res then\n            res = lst[i]\n        end\n    end\n    return res\nend",
  "    local counts = {}\n    for _, v in ipairs(lst) do\n        counts[v] = (counts[v]\
    \ or 0) + 1\n    end\n    local greatest = -1\n    for v, c in pairs(counts) do\n\
    \        if c >= v and v > greatest then\n            greatest = v\n        end\n\
    \    end\n    return greatest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
