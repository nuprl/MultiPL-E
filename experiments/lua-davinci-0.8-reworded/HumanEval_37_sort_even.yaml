name: HumanEval_37_sort_even
language: lua
prompt: "-- This function takes a table l and returns a table l' such that\n-- l'\
  \ is identical to l in the odd indicies, while its values at the even indicies are\
  \ equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
  \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal function\
  \ sort_even(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_even\n\
  \    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n\
  \    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8,\
  \ 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal i = 1\n\twhile l[i] ~= nil do\n\t\tif i % 2 == 0 then\n\t\t\
    \ttable.sort(l, function(x, y) return x < y end, i, i)\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn l\nend", "  local result = {}\n  local evens = {}\n  for i, v\
    \ in ipairs(l) do\n    if i % 2 == 0 then\n      evens[#evens + 1] = v\n    else\n\
    \      result[i] = v\n    end\n  end\n  table.sort(evens)\n  for i, v in ipairs(evens)\
    \ do\n    result[i * 2] = v\n  end\n  return result\nend", "    local l1 = {}\n\
    \    local l2 = {}\n    for i, v in ipairs(l) do\n        if (i % 2 == 0) then\n\
    \            l1[#l1 + 1] = v\n        else\n            l2[#l2 + 1] = v\n    \
    \    end\n    end\n    table.sort(l1)\n    for i, v in ipairs(l2) do\n       \
    \ l1[2 * i - 1] = v\n    end\n    return l1\nend", "    local even = {}\n    local\
    \ odd = {}\n    for i, v in ipairs(l) do\n        if i % 2 == 0 then\n       \
    \     even[#even + 1] = v\n        else\n            odd[#odd + 1] = v\n     \
    \   end\n    end\n    table.sort(even)\n    local res = {}\n    for i, v in ipairs(odd)\
    \ do\n        res[#res + 1] = v\n        res[#res + 1] = even[i]\n    end\n  \
    \  return res\nend", "  local sorted = {}\n  for k, v in pairs(l) do\n    if k\
    \ % 2 == 0 then\n      table.insert(sorted, v)\n    end\n  end\n  table.sort(sorted)\n\
    \  local i = 1\n  for k, v in pairs(l) do\n    if k % 2 == 0 then\n      l[k]\
    \ = sorted[i]\n      i = i + 1\n    end\n  end\n  return l\nend", "    local l_\
    \ = {}\n    for i = 1, #l do\n        if i % 2 == 1 then\n            l_[i] =\
    \ l[i]\n        else\n            local n = {}\n            for j = 1, #l[i] do\n\
    \                n[j] = l[i][j]\n            end\n            table.sort(n)\n\
    \            l_[i] = n\n        end\n    end\n    return l_\nend", "\tlocal result\
    \ = {}\n\tlocal even = {}\n\tfor i, val in ipairs(l) do\n\t\tif i % 2 == 0 then\n\
    \t\t\teven[#even + 1] = val\n\t\t\tresult[i] = val\n\t\telse\n\t\t\tresult[i]\
    \ = val\n\t\tend\n\tend\n\ttable.sort(even)\n\tfor i, val in ipairs(even) do\n\
    \t\tresult[i * 2] = val\n\tend\n\treturn result\nend", "\tlocal ret = {}\n\tfor\
    \ i = 1, #l do\n\t\tif i % 2 == 1 then\n\t\t\tret[i] = l[i]\n\t\telse\n\t\t\t\
    local t = {}\n\t\t\tfor j = i, #l, 2 do\n\t\t\t\ttable.insert(t, l[j])\n\t\t\t\
    end\n\t\t\ttable.sort(t)\n\t\t\tfor j = i, #l, 2 do\n\t\t\t\tret[j] = t[(j + 1)\
    \ / 2 - i / 2]\n\t\t\tend\n\t\tend\n\tend\n\treturn ret\nend", "\tlocal newl =\
    \ {}\n\tfor i = 1, #l do\n\t\tif i % 2 == 1 then\n\t\t\tnewl[i] = l[i]\n\t\telse\n\
    \t\t\ttable.insert(newl, sort_even_helper(l[i]))\n\t\tend\n\tend\n\treturn newl\n\
    end", "    local l2 = {}\n    for i,v in ipairs(l) do\n        if i % 2 == 0 then\n\
    \            l2[i] = v\n        else\n            l2[i] = v\n        end\n   \
    \ end\n    return l2\nend", "    local sorted_l = {}\n    for k, v in pairs(l)\
    \ do\n        if k % 2 == 0 then\n            sorted_l[k] = v\n        else\n\
    \            table.insert(sorted_l, v)\n        end\n    end\n    for k, v in\
    \ pairs(sorted_l) do\n        if k % 2 == 0 then\n            table.sort(sorted_l[k])\n\
    \        end\n    end\n    return sorted_l\nend", "  local sorted = {}\n  for\
    \ i = 1, #l do\n    sorted[i] = l[i]\n  end\n  for i = 2, #l, 2 do\n    table.sort(sorted,\
    \ function(a, b) return a[i] < b[i] end)\n  end\n  return sorted\nend", "  local\
    \ ret = {}\n  for i = 1, #l do\n    if i % 2 == 1 then\n      ret[i] = l[i]\n\
    \    else\n      local sub_table = {}\n      for j = 1, #l[i] do\n        sub_table[j]\
    \ = l[i][j]\n      end\n      table.sort(sub_table)\n      ret[i] = sub_table\n\
    \    end\n  end\n  return ret\nend", "\tlocal output = {}\n\tlocal even = {}\n\
    \tlocal odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 2 == 0 then\n\t\t\teven[#even\
    \ + 1] = v\n\t\telse\n\t\t\todd[#odd + 1] = v\n\t\tend\n\tend\n\ttable.sort(even)\n\
    \tfor i, v in ipairs(odd) do\n\t\toutput[#output + 1] = v\n\t\toutput[#output\
    \ + 1] = even[i]\n\tend\n\treturn output\nend", "    local t = {}\n    for i,\
    \ v in ipairs(l) do\n        if i % 2 == 0 then\n            t[i] = v\n      \
    \  else\n            t[i] = v\n        end\n    end\n    local sorted = {}\n \
    \   local ordered = table.sort(t)\n    for i, v in ipairs(ordered) do\n      \
    \  if i % 2 == 0 then\n            sorted[i] = v\n        else\n            sorted[i]\
    \ = l[i]\n        end\n    end\n    return sorted\nend", "    local l_new = {}\n\
    \    for i, v in ipairs(l) do\n        if i % 2 == 0 then\n            local l_sort\
    \ = l_new[i - 1]\n            table.sort(l_sort)\n            l_new[i] = v\n \
    \       else\n            l_new[i] = v\n        end\n    end\n    return l_new\n\
    end", "  local result = {}\n  for i, v in ipairs(l) do\n    if i % 2 == 0 then\n\
    \      table.insert(result, table.unpack(sort(v)))\n    else\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "    local ret = {}\n    for i, v\
    \ in ipairs(l) do\n        if i % 2 == 0 then\n            ret[i] = table.sort(v)\n\
    \        else\n            ret[i] = v\n        end\n    end\n    return ret\n\
    end", "  local even = {}\n  local odd = {}\n  for i, v in ipairs(l) do\n    if\
    \ i % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd,\
    \ v)\n    end\n  end\n  table.sort(even)\n  local res = {}\n  for i, v in ipairs(odd)\
    \ do\n    table.insert(res, v)\n    table.insert(res, even[i])\n  end\n  return\
    \ res\nend", "  local out = {}\n  for i, v in ipairs(l) do\n    if i % 2 == 0\
    \ then\n      table.insert(out, v)\n    else\n      table.insert(out, v)\n   \
    \ end\n  end\n  table.sort(out, function(a, b) return b > a end)\n  return out\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
