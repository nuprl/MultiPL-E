name: HumanEval_46_fib4
language: lua
prompt: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) -> 2\n\
  -- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  -- Please write a function to efficiently compute the n-th element of the fib4 number\
  \ sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n-- 8\n\
  -- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
  \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
  \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local numbers = {0, 0, 2, 0}\n  for i = 4, n do\n    numbers[i %\
    \ 4 + 1] = numbers[(i - 1) % 4 + 1] + numbers[(i - 2) % 4 + 1] + numbers[(i -\
    \ 3) % 4 + 1] + numbers[(i - 4) % 4 + 1]\n  end\n  return numbers[n % 4 + 1]\n\
    end", "  assert(type(n) == \"number\", \"n must be a number\")\n  assert(n >=\
    \ 0, \"n must be >= 0\")\n  assert(math.floor(n) == n, \"n must be an integer\"\
    )\n  -- Your code here\nend", "    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 2\n  \
    \  elseif n == 3 then\n        return 0\n    else\n        local m = n\n     \
    \   local f4, f3, f2, f1 = 0, 0, 2, 0\n        while m >= 3 do\n            f4,\
    \ f3, f2, f1 = f3 + f2 + f1 + f4, f4, f3, f2\n            m = m - 1\n        end\n\
    \        return f4\n    end\nend", "  local a, b, c, d = 0, 0, 2, 0\n  for i =\
    \ 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend", " \
    \ return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  -- ... your code\
    \ here ...\nend", "  if n == 0 then return 0 end\n  if n == 1 then return 0 end\n\
    \  if n == 2 then return 2 end\n  if n == 3 then return 0 end\n  local a = 0\n\
    \  local b = 0\n  local c = 2\n  local d = 0\n  local i = 3\n  while i < n do\n\
    \    d = c + b + a\n    a = b\n    b = c\n    c = d\n    i = i + 1\n  end\n  return\
    \ d\nend", end, "    local function fib4_(n, a, b, c, d)\n        if n == 0 then\n\
    \            return a\n        elseif n == 1 then\n            return b\n    \
    \    elseif n == 2 then\n            return c\n        elseif n == 3 then\n  \
    \          return d\n        else\n            return fib4_(n-1, b, c, d, a+b+c+d)\n\
    \        end\n    end\n    return fib4_(n, 0, 0, 2, 0)\nend", "    local n1, n2,\
    \ n3, n4 = 0, 0, 2, 0\n    local n5 = 0\n    for i = 1, n do\n        n5 = n1\
    \ + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4\
    \ = n5\n    end\n    return n4\nend", "    if n == 0 then\n        return 0\n\
    \    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n        return\
    \ 2\n    elseif n == 3 then\n        return 0\n    else\n        return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    end\nend", "    local function iter(i,\
    \ f1, f2, f3, f4)\n        if i == n then\n            return f1\n        else\n\
    \            return iter(i+1, f2, f3, f4, f1+f2+f3+f4)\n        end\n    end\n\
    \    return iter(0, 0, 0, 2, 0)\nend", "  if n < 0 then\n    return nil\n  end\n\
    \  local a, b, c, d = 0, 0, 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d,\
    \ a + b + c + d\n  end\n  return d\nend", "    assert(n >= 0, \"n must be >= 0\"\
    )\n    assert(math.floor(n) == n, \"n must be an integer\")\n    if n <= 3 then\n\
    \        return n * 2\n    end\n    local a, b, c, d = 0, 0, 2, 0\n    for i =\
    \ 4, n do\n        d = a + b + c + d\n        a = b\n        b = c\n        c\
    \ = d\n    end\n    return d\nend", "  return \"TODO\"\nend", "    if n < 1 then\
    \ return 0 end\n    if n < 3 then return 2 end\n    local fib_n1 = 0\n    local\
    \ fib_n2 = 0\n    local fib_n3 = 2\n    local fib_n4 = 2\n    local i = 3\n  \
    \  while i <= n do\n        fib_n1 = fib_n2\n        fib_n2 = fib_n3\n       \
    \ fib_n3 = fib_n4\n        fib_n4 = fib_n1 + fib_n2 + fib_n3 + fib_n4\n      \
    \  i = i + 1\n    end\n    return fib_n4\nend", "  if n <= 2 then\n    return\
    \ n * 2\n  end\n  local fibs = { 0, 0, 2, 0 }\n  for i = 4, n do\n    fibs[i %\
    \ 4 + 1] = fibs[1] + fibs[2] + fibs[3] + fibs[4]\n  end\n  return fibs[(n - 1)\
    \ % 4 + 1]\nend", "  return 0\nend", "\t-- your code here\n\tlocal n1, n2, n3,\
    \ n4 = 0, 0, 2, 0\n\tif n == 0 then\n\t\treturn n1\n\telseif n == 1 then\n\t\t\
    return n2\n\telseif n == 2 then\n\t\treturn n3\n\telseif n == 3 then\n\t\treturn\
    \ n4\n\telse\n\t\tfor i = 4, n do\n\t\t\tn1, n2, n3, n4 = n2, n3, n4, n1 + n2\
    \ + n3 + n4\n\t\tend\n\t\treturn n4\n\tend\nend", "  return 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
