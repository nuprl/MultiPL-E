name: HumanEval_81_numerical_letter_grade
language: lua
prompt: "-- It is the last week of the semester and the teacher has to give the grades\n\
  -- to students. The teacher has been making her own algorithm for grading.\n-- The\
  \ only problem is, she has lost the code she used for grading.\n-- She has given\
  \ you a table of GPAs for some students and you have to write \n-- a function that\
  \ can output a table of letter grades using the following table:\n-- GPA       |\
  \    Letter grade\n-- 4.0                A+\n-- > 3.7                A \n-- > 3.3\
  \                A- \n-- > 3.0                B+\n-- > 2.7                B \n--\
  \ > 2.3                B-\n-- > 2.0                C+\n-- > 1.7                C\n\
  -- > 1.3                C-\n-- > 1.0                D+ \n-- > 0.7              \
  \  D \n-- > 0.0                D-\n-- 0.0                E\n-- Example:\n-- >>>\
  \ grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B', 'C-', 'C', 'A-'}\nlocal\
  \ function numerical_letter_grade(grades)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
  \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n\
  \    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
  \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
  \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
  \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\t-- TODO: implement this method\n    -- HINT: use a table of values\n\
    end", "    local letter_grades = {}\n    for i, grade in ipairs(grades) do\n \
    \       if grade >= 4.0 then\n            letter_grades[i] = 'A+'\n        elseif\
    \ grade >= 3.7 then\n            letter_grades[i] = 'A'\n        elseif grade\
    \ >= 3.3 then\n            letter_grades[i] = 'A-'\n        elseif grade >= 3.0\
    \ then\n            letter_grades[i] = 'B+'\n        elseif grade >= 2.7 then\n\
    \            letter_grades[i] = 'B'\n        elseif grade >= 2.3 then\n      \
    \      letter_grades[i] = 'B-'\n        elseif grade >= 2.0 then\n           \
    \ letter_grades[i] = 'C+'\n        elseif grade >= 1.7 then\n            letter_grades[i]\
    \ = 'C'\n        elseif grade >= 1.3 then\n            letter_grades[i] = 'C-'\n\
    \        elseif grade >= 1.0 then\n            letter_grades[i] = 'D+'\n     \
    \   elseif grade >= 0.7 then\n            letter_grades[i] = 'D'\n        elseif\
    \ grade >= 0.0 then\n            letter_grades[i] = 'D-'\n        else\n     \
    \       letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\n\
    end", "    return grades:map(function(x)\n        if x >= 4.0 then return 'A+'\
    \ end\n        if x >= 3.7 then return 'A' end\n        if x >= 3.3 then return\
    \ 'A-' end\n        if x >= 3.0 then return 'B+' end\n        if x >= 2.7 then\
    \ return 'B' end\n        if x >= 2.3 then return 'B-' end\n        if x >= 2.0\
    \ then return 'C+' end\n        if x >= 1.7 then return 'C' end\n        if x\
    \ >= 1.3 then return 'C-' end\n        if x >= 1.0 then return 'D+' end\n    \
    \    if x >= 0.7 then return 'D' end\n        if x >= 0.0 then return 'D-' end\n\
    \        return 'E'\n    end)\nend", "    local letter_grades = {}\n    for _,\
    \ value in ipairs(grades) do\n        if value > 4.0 then table.insert(letter_grades,\
    \ 'A+') end\n        if value <= 4.0 and value > 3.7 then table.insert(letter_grades,\
    \ 'A') end\n        if value <= 3.7 and value > 3.3 then table.insert(letter_grades,\
    \ 'A-') end\n        if value <= 3.3 and value > 3.0 then table.insert(letter_grades,\
    \ 'B+') end\n        if value <= 3.0 and value > 2.7 then table.insert(letter_grades,\
    \ 'B') end\n        if value <= 2.7 and value > 2.3 then table.insert(letter_grades,\
    \ 'B-') end\n        if value <= 2.3 and value > 2.0 then table.insert(letter_grades,\
    \ 'C+') end\n        if value <= 2.0 and value > 1.7 then table.insert(letter_grades,\
    \ 'C') end\n        if value <= 1.7 and value > 1.3 then table.insert(letter_grades,\
    \ 'C-') end\n        if value <= 1.3 and value > 1.0 then table.insert(letter_grades,\
    \ 'D+') end\n        if value <= 1.0 and value > 0.7 then table.insert(letter_grades,\
    \ 'D') end\n        if value <= 0.7 and value > 0.0 then table.insert(letter_grades,\
    \ 'D-') end\n        if value <= 0.0 then table.insert(letter_grades, 'E') end\n\
    \    end\n    return letter_grades\nend", "    local range = {\n        ['A+']\
    \ = 4.0,\n        ['A'] = 3.7,\n        ['A-'] = 3.3,\n        ['B+'] = 3.0,\n\
    \        ['B'] = 2.7,\n        ['B-'] = 2.3,\n        ['C+'] = 2.0,\n        ['C']\
    \ = 1.7,\n        ['C-'] = 1.3,\n        ['D+'] = 1.0,\n        ['D'] = 0.7,\n\
    \        ['D-'] = 0.0,\n        ['E'] = 0.0\n    }\n    local letter_grades =\
    \ {}\n    for _, grade in ipairs(grades) do\n        for letter, gpa in pairs(range)\
    \ do\n            if grade >= gpa then\n                table.insert(letter_grades,\
    \ letter)\n                break\n            end\n        end\n    end\n    return\
    \ letter_grades\nend", "  local result = {}\n  for i = 1, #grades do\n    local\
    \ grade = grades[i]\n    if grade >= 4.0 then\n      result[i] = 'A+'\n    elseif\
    \ grade >= 3.7 then\n      result[i] = 'A'\n    elseif grade >= 3.3 then\n   \
    \   result[i] = 'A-'\n    elseif grade >= 3.0 then\n      result[i] = 'B+'\n \
    \   elseif grade >= 2.7 then\n      result[i] = 'B'\n    elseif grade >= 2.3 then\n\
    \      result[i] = 'B-'\n    elseif grade >= 2.0 then\n      result[i] = 'C+'\n\
    \    elseif grade >= 1.7 then\n      result[i] = 'C'\n    elseif grade >= 1.3\
    \ then\n      result[i] = 'C-'\n    elseif grade >= 1.0 then\n      result[i]\
    \ = 'D+'\n    elseif grade >= 0.7 then\n      result[i] = 'D'\n    elseif grade\
    \ >= 0.0 then\n      result[i] = 'D-'\n    elseif grade >= 0.0 then\n      result[i]\
    \ = 'E'\n    end\n  end\n  return result\nend", "    local letter_grades = {}\n\
    \    for _, gpa in ipairs(grades) do\n        if gpa >= 4.0 then\n           \
    \ table.insert(letter_grades, 'A+')\n        elseif gpa >= 3.7 then\n        \
    \    table.insert(letter_grades, 'A')\n        elseif gpa >= 3.3 then\n      \
    \      table.insert(letter_grades, 'A-')\n        elseif gpa >= 3.0 then\n   \
    \         table.insert(letter_grades, 'B+')\n        elseif gpa >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif gpa >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif gpa >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif gpa >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif gpa >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif gpa >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif gpa >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif gpa >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend", "  local output\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      output[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      output[i] = 'A'\n    elseif grade\
    \ >= 3.3 then\n      output[i] = 'A-'\n    elseif grade >= 3.0 then\n      output[i]\
    \ = 'B+'\n    elseif grade >= 2.7 then\n      output[i] = 'B'\n    elseif grade\
    \ >= 2.3 then\n      output[i] = 'B-'\n    elseif grade >= 2.0 then\n      output[i]\
    \ = 'C+'\n    elseif grade >= 1.7 then\n      output[i] = 'C'\n    elseif grade\
    \ >= 1.3 then\n      output[i] = 'C-'\n    elseif grade >= 1.0 then\n      output[i]\
    \ = 'D+'\n    elseif grade >= 0.7 then\n      output[i] = 'D'\n    elseif grade\
    \ >= 0.0 then\n      output[i] = 'D-'\n    else\n      output[i] = 'E'\n    end\n\
    \  end\n  return output\nend", "    local letter_grades = {}\n    for _, grade\
    \ in ipairs(grades) do\n        local letter_grade = \"E\"\n        if grade ==\
    \ 4.0 then\n            letter_grade = \"A+\"\n        elseif grade > 3.7 then\n\
    \            letter_grade = \"A\"\n        elseif grade > 3.3 then\n         \
    \   letter_grade = \"A-\"\n        elseif grade > 3.0 then\n            letter_grade\
    \ = \"B+\"\n        elseif grade > 2.7 then\n            letter_grade = \"B\"\n\
    \        elseif grade > 2.3 then\n            letter_grade = \"B-\"\n        elseif\
    \ grade > 2.0 then\n            letter_grade = \"C+\"\n        elseif grade >\
    \ 1.7 then\n            letter_grade = \"C\"\n        elseif grade > 1.3 then\n\
    \            letter_grade = \"C-\"\n        elseif grade > 1.0 then\n        \
    \    letter_grade = \"D+\"\n        elseif grade > 0.7 then\n            letter_grade\
    \ = \"D\"\n        elseif grade > 0.0 then\n            letter_grade = \"D-\"\n\
    \        end\n        table.insert(letter_grades, letter_grade)\n    end\n   \
    \ return letter_grades\nend", "    local grade_table = {}\n    for k, v in pairs(grades)\
    \ do\n        if v >= 4.0 then\n            table.insert(grade_table, 'A+')\n\
    \        elseif v >= 3.7 then\n            table.insert(grade_table, 'A')\n  \
    \      elseif v >= 3.3 then\n            table.insert(grade_table, 'A-')\n   \
    \     elseif v >= 3.0 then\n            table.insert(grade_table, 'B+')\n    \
    \    elseif v >= 2.7 then\n            table.insert(grade_table, 'B')\n      \
    \  elseif v >= 2.3 then\n            table.insert(grade_table, 'B-')\n       \
    \ elseif v >= 2.0 then\n            table.insert(grade_table, 'C+')\n        elseif\
    \ v >= 1.7 then\n            table.insert(grade_table, 'C')\n        elseif v\
    \ >= 1.3 then\n            table.insert(grade_table, 'C-')\n        elseif v >=\
    \ 1.0 then\n            table.insert(grade_table, 'D+')\n        elseif v >= 0.7\
    \ then\n            table.insert(grade_table, 'D')\n        elseif v >= 0.0 then\n\
    \            table.insert(grade_table, 'D-')\n        else\n            table.insert(grade_table,\
    \ 'E')\n        end\n    end\n    return grade_table\nend", "    local letter_grades\
    \ = {}\n    for _, gpa in ipairs(grades) do\n        if gpa >= 4.0 then\n    \
    \        table.insert(letter_grades, 'A+')\n        elseif gpa >= 3.7 then\n \
    \           table.insert(letter_grades, 'A')\n        elseif gpa >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif gpa >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif gpa >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif gpa >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif gpa >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif gpa >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif gpa >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif gpa >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif gpa >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif gpa >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend", "    local letter_grades\
    \ = {}\n    for index, value in ipairs(grades) do\n        if (value == 4.0) then\n\
    \            letter_grades[index] = 'A+'\n        elseif (value > 3.7) then\n\
    \            letter_grades[index] = 'A'\n        elseif (value > 3.3) then\n \
    \           letter_grades[index] = 'A-'\n        elseif (value > 3.0) then\n \
    \           letter_grades[index] = 'B+'\n        elseif (value > 2.7) then\n \
    \           letter_grades[index] = 'B'\n        elseif (value > 2.3) then\n  \
    \          letter_grades[index] = 'B-'\n        elseif (value > 2.0) then\n  \
    \          letter_grades[index] = 'C+'\n        elseif (value > 1.7) then\n  \
    \          letter_grades[index] = 'C'\n        elseif (value > 1.3) then\n   \
    \         letter_grades[index] = 'C-'\n        elseif (value > 1.0) then\n   \
    \         letter_grades[index] = 'D+'\n        elseif (value > 0.7) then\n   \
    \         letter_grades[index] = 'D'\n        elseif (value > 0.0) then\n    \
    \        letter_grades[index] = 'D-'\n        else\n            letter_grades[index]\
    \ = 'E'\n        end\n    end\n    return letter_grades\nend", "\tassert(grades\
    \ ~= nil, \"An error has occurred! The input value is nil.\")\n\tlocal t = {}\n\
    \tfor i, v in ipairs(grades) do\n\t\tassert(v >= 0, \"An error has occurred! The\
    \ input value is less than 0.\")\n\t\tif v >= 4.0 then t[i] = 'A+'\n\t\telseif\
    \ v >= 3.7 then t[i] = 'A'\n\t\telseif v >= 3.3 then t[i] = 'A-'\n\t\telseif v\
    \ >= 3.0 then t[i] = 'B+'\n\t\telseif v >= 2.7 then t[i] = 'B'\n\t\telseif v >=\
    \ 2.3 then t[i] = 'B-'\n\t\telseif v >= 2.0 then t[i] = 'C+'\n\t\telseif v >=\
    \ 1.7 then t[i] = 'C'\n\t\telseif v >= 1.3 then t[i] = 'C-'\n\t\telseif v >= 1.0\
    \ then t[i] = 'D+'\n\t\telseif v >= 0.7 then t[i] = 'D'\n\t\telseif v >= 0.0 then\
    \ t[i] = 'D-'\n\t\telse t[i] = 'E'\n\t\tend\n\tend\n\treturn t\nend", "    local\
    \ res = {}\n    for i, g in ipairs(grades) do\n        if g >= 4.0 then\n    \
    \        res[i] = 'A+'\n        elseif g >= 3.7 then\n            res[i] = 'A'\n\
    \        elseif g >= 3.3 then\n            res[i] = 'A-'\n        elseif g >=\
    \ 3.0 then\n            res[i] = 'B+'\n        elseif g >= 2.7 then\n        \
    \    res[i] = 'B'\n        elseif g >= 2.3 then\n            res[i] = 'B-'\n \
    \       elseif g >= 2.0 then\n            res[i] = 'C+'\n        elseif g >= 1.7\
    \ then\n            res[i] = 'C'\n        elseif g >= 1.3 then\n            res[i]\
    \ = 'C-'\n        elseif g >= 1.0 then\n            res[i] = 'D+'\n        elseif\
    \ g >= 0.7 then\n            res[i] = 'D'\n        elseif g >= 0.0 then\n    \
    \        res[i] = 'D-'\n        else\n            res[i] = 'E'\n        end\n\
    \    end\n    return res\nend", "  local out = {}\n  for _,v in ipairs(grades)\
    \ do\n    local letter = 'E'\n    if v > 4.0 then\n      letter = 'A+'\n    elseif\
    \ v > 3.7 then\n      letter = 'A'\n    elseif v > 3.3 then\n      letter = 'A-'\n\
    \    elseif v > 3.0 then\n      letter = 'B+'\n    elseif v > 2.7 then\n     \
    \ letter = 'B'\n    elseif v > 2.3 then\n      letter = 'B-'\n    elseif v > 2.0\
    \ then\n      letter = 'C+'\n    elseif v > 1.7 then\n      letter = 'C'\n   \
    \ elseif v > 1.3 then\n      letter = 'C-'\n    elseif v > 1.0 then\n      letter\
    \ = 'D+'\n    elseif v > 0.7 then\n      letter = 'D'\n    elseif v > 0.0 then\n\
    \      letter = 'D-'\n    end\n    table.insert(out, letter)\n  end\n  return\
    \ out\nend", "    assert(type(grades) == \"table\",\n\t   \"Expected a table of\
    \ grades\")\n    local result = {}\n    for k, grade in ipairs(grades) do\n\t\
    if grade >= 4.0 then\n\t    result[k] = \"A+\"\n\telseif grade >= 3.7 then\n\t\
    \    result[k] = \"A\"\n\telseif grade >= 3.3 then\n\t    result[k] = \"A-\"\n\
    \telseif grade >= 3.0 then\n\t    result[k] = \"B+\"\n\telseif grade >= 2.7 then\n\
    \t    result[k] = \"B\"\n\telseif grade >= 2.3 then\n\t    result[k] = \"B-\"\n\
    \telseif grade >= 2.0 then\n\t    result[k] = \"C+\"\n\telseif grade >= 1.7 then\n\
    \t    result[k] = \"C\"\n\telseif grade >= 1.3 then\n\t    result[k] = \"C-\"\n\
    \telseif grade >= 1.0 then\n\t    result[k] = \"D+\"\n\telseif grade >= 0.7 then\n\
    \t    result[k] = \"D\"\n\telseif grade >= 0.0 then\n\t    result[k] = \"D-\"\n\
    \telse\n\t    result[k] = \"E\"\n\tend\n    end\n    return result\nend", "  \
    \  return grades:map(function(grade)\n        if grade >= 4.0 then return 'A+'\n\
    \        elseif grade >= 3.7 then return 'A'\n        elseif grade >= 3.3 then\
    \ return 'A-'\n        elseif grade >= 3.0 then return 'B+'\n        elseif grade\
    \ >= 2.7 then return 'B'\n        elseif grade >= 2.3 then return 'B-'\n     \
    \   elseif grade >= 2.0 then return 'C+'\n        elseif grade >= 1.7 then return\
    \ 'C'\n        elseif grade >= 1.3 then return 'C-'\n        elseif grade >= 1.0\
    \ then return 'D+'\n        elseif grade >= 0.7 then return 'D'\n        elseif\
    \ grade >= 0.0 then return 'D-'\n        else return 'E'\n        end\n    end)\n\
    end", end, "\tlocal letter_grades = {}\n\tfor _, v in ipairs(grades) do\n\t\t\
    if v == 4.0 then\n\t\t\ttable.insert(letter_grades, 'A+')\n\t\telseif v > 3.7\
    \ then\n\t\t\ttable.insert(letter_grades, 'A')\n\t\telseif v > 3.3 then\n\t\t\t\
    table.insert(letter_grades, 'A-')\n\t\telseif v > 3.0 then\n\t\t\ttable.insert(letter_grades,\
    \ 'B+')\n\t\telseif v > 2.7 then\n\t\t\ttable.insert(letter_grades, 'B')\n\t\t\
    elseif v > 2.3 then\n\t\t\ttable.insert(letter_grades, 'B-')\n\t\telseif v > 2.0\
    \ then\n\t\t\ttable.insert(letter_grades, 'C+')\n\t\telseif v > 1.7 then\n\t\t\
    \ttable.insert(letter_grades, 'C')\n\t\telseif v > 1.3 then\n\t\t\ttable.insert(letter_grades,\
    \ 'C-')\n\t\telseif v > 1.0 then\n\t\t\ttable.insert(letter_grades, 'D+')\n\t\t\
    elseif v > 0.7 then\n\t\t\ttable.insert(letter_grades, 'D')\n\t\telseif v > 0.0\
    \ then\n\t\t\ttable.insert(letter_grades, 'D-')\n\t\telse\n\t\t\ttable.insert(letter_grades,\
    \ 'E')\n\t\tend\n\tend\n\treturn letter_grades\nend", "    local grades_table\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            grades_table[i] = 'A+'\n        elseif grade >= 3.7 then\n      \
    \      grades_table[i] = 'A'\n        elseif grade >= 3.3 then\n            grades_table[i]\
    \ = 'A-'\n        elseif grade >= 3.0 then\n            grades_table[i] = 'B+'\n\
    \        elseif grade >= 2.7 then\n            grades_table[i] = 'B'\n       \
    \ elseif grade >= 2.3 then\n            grades_table[i] = 'B-'\n        elseif\
    \ grade >= 2.0 then\n            grades_table[i] = 'C+'\n        elseif grade\
    \ >= 1.7 then\n            grades_table[i] = 'C'\n        elseif grade >= 1.3\
    \ then\n            grades_table[i] = 'C-'\n        elseif grade >= 1.0 then\n\
    \            grades_table[i] = 'D+'\n        elseif grade >= 0.7 then\n      \
    \      grades_table[i] = 'D'\n        elseif grade >= 0.0 then\n            grades_table[i]\
    \ = 'D-'\n        else\n            grades_table[i] = 'E'\n        end\n    end\n\
    \    return grades_table\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
