language: lua
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local res\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(res, value)\n    end\n \
    \ end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for k, v in pairs(values) do\n        if type(v) == 'number' and v\
    \ % 1 == 0 then\n            table.insert(result, v)\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    return _.filter(values,\
    \ function(value)\n        return type(value) == 'number' and value % 1 == 0\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpko6oln72.lua:7:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpko6oln72.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpko6oln72.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if (type(value) == 'number')\
    \ then\n            table.insert(result, value)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_muhilgz.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp_muhilgz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal new_values\
    \ = {}\n\tfor i = 1, #values do\n\t\tlocal value = values[i]\n\t\tif (type(value)\
    \ == 'number' and value == math.floor(value)) then\n\t\t\tnew_values[#new_values\
    \ + 1] = value\n\t\tend\n\tend\n\treturn new_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal output\
    \ = {}\n\tfor _, v in ipairs(values) do\n\t\tif type(v) == 'number' and math.floor(v)\
    \ == v then\n\t\t\toutput[#output + 1] = v\n\t\tend\n\tend\n\treturn output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for k,v in pairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for key, value in pairs(values) do\n        if is_integer(value) then\n\
    \            table.insert(filtered, value)\n        end\n    end\n    return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm1lufrkx.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpm1lufrkx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpm1lufrkx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal t =\
    \ {}\n\tfor i, v in ipairs(values) do\n\t\tif type(v) == 'number' and math.floor(v)\
    \ == v then\n\t\t\tt[#t + 1] = v\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local out\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(out, value)\n        end\n\
    \    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local ret\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.type(v) == 'integer' then\n            table.insert(ret, v)\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for _, value in ipairs(values) do\n        if isint(value) then\n\
    \            integers[#integers + 1] = value\n        end\n    end\n    return\
    \ integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsuknqv63.lua:9:\
    \ attempt to call a nil value (global 'isint')\nstack traceback:\n\t/tmp/tmpsuknqv63.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsuknqv63.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for k, v in pairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(integers, v)\n        end\n    end\n   \
    \ return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local res\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v == math.floor(v)\
    \ then\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for index, value in ipairs(values) do\n    if type(value) == 'number'\
    \ and value % 1 == 0 then\n      table.insert(integers, value)\n    end\n  end\n\
    \  return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local new_values\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(new_values, value)\n   \
    \ end\n  end\n  return new_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local res\
    \ = {}\n  for k, v in pairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      res[#res + 1] = v\n    end\n  end\n  return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local filtered\
    \ = {}\n  for _,v in ipairs(values) do\n    if type(v) == 'number' and v % 1 ==\
    \ 0 then\n      table.insert(filtered, v)\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ floor(v) == v then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp911uqc6t.lua:9:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp911uqc6t.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp911uqc6t.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local ret\
    \ = {}\n  for k, v in pairs(values) do\n    if (type(v) == 'number') and (v ==\
    \ math.floor(v)) then\n      table.insert(ret, v)\n    end\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if value == math.floor(value)\
    \ then\n            table.insert(result, value)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp25erjgl5.lua:9:\
    \ bad argument #1 to 'floor' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmp25erjgl5.lua:9: in local 'candidate'\n\t/tmp/tmp25erjgl5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local function\
    \ is_integer(value)\n    return type(value) == 'number' and value % 1 == 0\n \
    \ end\n  return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9f6wcpkg.lua:10:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp9f6wcpkg.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9f6wcpkg.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local filtered\
    \ = {}\n  for _,value in ipairs(values) do\n    if not is_integer(value) then\n\
    \      table.insert(filtered, value)\n    end\n  end\n  return filtered\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxqeq_4s.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpyxqeq_4s.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpyxqeq_4s.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal result\
    \ = {}\n\tfor k, v in pairs(values) do\n\t\tif type(v) == 'number' and v % 1 ==\
    \ 0 then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for i,v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local ret\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(ret, v)\n    end\n  end\n  return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local tbl\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and (v ==\
    \ math.floor(v)) then\n      table.insert(tbl, v)\n    end\n  end\n  return tbl\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for key, value in pairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(integers, value)\n    end\n\
    \  end\n  return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local out\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(out, v)\n        end\n   \
    \ end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local output\
    \ = {}\n    for _, value in ipairs(values) do\n        if (type(value) == 'number')\
    \ then\n            table.insert(output, math.floor(value))\n        end\n   \
    \ end\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvkxnupa.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23, 9}\nstack traceback:\n\t/tmp/tmprvkxnupa.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local t =\
    \ {}\n  for i,v in ipairs(values) do\n    if type(v) == 'number' and math.modf(v)\
    \ == v then\n      table.insert(t, v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if is_integer(value) then\n\
    \            table.insert(result, value)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt6buhhzz.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpt6buhhzz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpt6buhhzz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for i, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.type(value) == 'integer' then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      result[#result + 1] = v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local filtered\
    \ = {}\n  for k,v in pairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(filtered, v)\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for k, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v == math.floor(v) then\n            table.insert(filtered, v)\n        end\n\
    \    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    return table.filter(values,\
    \ function(v)\n        return type(v) == 'number' and math.floor(v) == v\n   \
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbhdnu2j.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpsbhdnu2j.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsbhdnu2j.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local retval\
    \ = {}\n  for i, v in ipairs(values) do\n    if tonumber(v) then\n      retval[#retval\
    \ + 1] = tonumber(v)\n    end\n  end\n  return retval\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6jjhshx.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpn6jjhshx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local _values\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            _values[#_values + 1] = v\n        end\n\
    \    end\n    return _values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal t =\
    \ {}\n\tfor _, v in ipairs(values) do\n\t\tif type(v) == 'number' and v % 1 ==\
    \ 0 then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local t\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(t, v)\n        end\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for k, v in pairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  if type(values)\
    \ ~= 'table' then\n    return false\n  end\n  local table_length = #values\n \
    \ local filtered_values = {}\n  for i = 1, table_length do\n    if type(values[i])\
    \ == 'number' and values[i] % 1 == 0 then\n      table.insert(filtered_values,\
    \ values[i])\n    end\n  end\n  return filtered_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _,v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local filtered\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(filtered, value)\n    end\n\
    \  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integer_values\
    \ = {}\n  for k, v in pairs(values) do\n    if type(v) == 'number' and floor(v)\
    \ == v then\n      table.insert(integer_values, v)\n    end\n  end\n  return integer_values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe1wm4k07.lua:9:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpe1wm4k07.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpe1wm4k07.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local ret\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v == math.floor(v) then\n            table.insert(ret, v)\n        end\n   \
    \ end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for _,v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(integers, v)\n        end\n    end\n   \
    \ return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local values_int\
    \ = {}\n    for _, val in ipairs(values) do\n        if val.tag == \"INTEGER\"\
    \ then\n            values_int[#values_int + 1] = val\n        end\n    end\n\
    \    return values_int\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4h3zhrci.lua:9:\
    \ attempt to index a number value (local 'val')\nstack traceback:\n\t/tmp/tmp4h3zhrci.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4h3zhrci.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal result\
    \ = {}\n\tfor _, v in ipairs(values) do\n\t\tif type(v) == 'number' and math.floor(v)\
    \ == v then\n\t\t\tresult[#result + 1] = v\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for i = 1, #values do\n    local num = tonumber(values[i])\n    if type(num)\
    \ == 'number' and num % 1 == 0 then\n      table.insert(integers, num)\n    end\n\
    \  end\n  return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for _, v in ipairs(values) do\n    if math.type(v) == 'integer' then\n\
    \      table.insert(integers, v)\n    end\n  end\n  return integers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v == math.floor(v)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v == math.floor(v) then\n            table.insert(filtered, v)\n        end\n\
    \    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal result\
    \ = {}\n\tfor _, item in ipairs(values) do\n\t\tif item == math.floor(item) then\n\
    \t\t\tresult[#result + 1] = item\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy770vpx7.lua:9:\
    \ bad argument #1 to 'floor' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpy770vpx7.lua:9: in local 'candidate'\n\t/tmp/tmpy770vpx7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local t =\
    \ {}\n  for _, v in ipairs(values) do\n    if v ~= nil and type(v) == 'number'\
    \ and v == math.floor(v) then\n      table.insert(t, v)\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local results\
    \ = {}\n    for _, x in ipairs(values) do\n        if type(x) == 'number' and\
    \ x == math.floor(x) then\n            results[#results + 1] = x\n        end\n\
    \    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for i, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  assert(type(values)\
    \ == 'table', 'Expected table')\n  local filtered = {}\n  for _, val in ipairs(values)\
    \ do\n    if type(val) == 'number' and math.floor(val) == val then\n      filtered[#filtered\
    \ + 1] = val\n    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local t =\
    \ {}\n  for k, v in pairs(values) do\n    if tonumber(v) then\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaajo_8qk.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpaajo_8qk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(integers, value)\n    end\n\
    \  end\n  return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _,v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i = 1, #values do\n        local value = values[i]\n        if\
    \ type(value) == 'number' and value == math.floor(value) then\n            result[#result\
    \ + 1] = value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local new_table\
    \ = {}\n    for i,v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(new_table, v)\n        end\n    end\n  \
    \  return new_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for k, v in pairs(values) do\n        if type(v) == 'number' and not\
    \ is_decimal(v) then\n            table.insert(filtered, v)\n        end\n   \
    \ end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp49ce6eir.lua:9:\
    \ attempt to call a nil value (global 'is_decimal')\nstack traceback:\n\t/tmp/tmp49ce6eir.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp49ce6eir.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    return filter(values,\
    \ function(v) return type(v) == 'number' end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxrob_ap0.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpxrob_ap0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxrob_ap0.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    assert_table(values)\n\
    \    local result = {}\n    for _, value in ipairs(values) do\n        if type(value)\
    \ == 'number' and value == math.floor(value) then\n            result[#result\
    \ + 1] = value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp520mcl2g.lua:7:\
    \ attempt to call a nil value (global 'assert_table')\nstack traceback:\n\t/tmp/tmp520mcl2g.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp520mcl2g.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _,value in ipairs(values) do\n    if (type(value) == 'number') then\n\
    \      table.insert(result, value)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdot01nav.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpdot01nav.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for i,v in ipairs(values) do\n        if tonumber(v) ~= nil then\n\
    \            integers[#integers+1] = v\n        end\n    end\n    return integers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p5kfdag.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp1p5kfdag.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local ret\
    \ = {}\n    for k, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(ret, v)\n        end\n   \
    \ end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for i, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      integers[#integers + 1] = value\n    end\n  end\n\
    \  return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for i, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal integers\
    \ = {}\n\tfor _, value in ipairs(values) do\n\t\tif type(value) == 'number' and\
    \ value % 1 == 0 then\n\t\t\ttable.insert(integers, value)\n\t\tend\n\tend\n\t\
    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for key, value in pairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local ret\
    \ = {}\n  for key, value in pairs(values) do\n    if (isinteger(value)) then\n\
    \      ret[#ret + 1] = value\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptmv4r22w.lua:9:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmptmv4r22w.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptmv4r22w.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local ints\
    \ = {}\n    for _, value in ipairs(values) do\n        if (type(value) == 'number')\
    \ then\n            ints[#ints + 1] = value\n        end\n    end\n    return\
    \ ints\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98l95cs8.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp98l95cs8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal ret\
    \ = {}\n\tfor k, v in pairs(values) do\n\t\tif is_integer(v) then\n\t\t\tret[#ret\
    \ + 1] = v\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg28p6qrq.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpg28p6qrq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpg28p6qrq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if not value.__is_luathon_value\
    \ and is_integer(value) then\n      table.insert(result, value)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7anblm3h.lua:9:\
    \ attempt to index a number value (local 'value')\nstack traceback:\n\t/tmp/tmp7anblm3h.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7anblm3h.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local r =\
    \ {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v == math.floor(v)\
    \ then\n      r[#r + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    return {util.ifilter(values,\
    \ is_integer)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2r21a6jj.lua:7:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmp2r21a6jj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2r21a6jj.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local res\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(res, v)\n        end\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for k, v in pairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for index, value in ipairs(values) do\n    if is_integer(value) then\n\
    \      result[#result + 1] = value\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk37hgsad.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpk37hgsad.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpk37hgsad.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local filtered\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      filtered[#filtered + 1] = v\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local new_values\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(new_values, value)\n\
    \        end\n    end\n    return new_values\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(filtered, v)\n        end\n\
    \    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, x in ipairs(values) do\n    if type(x) == 'number' and x % 1\
    \ == 0 then\n      result[#result + 1] = x\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal t =\
    \ {}\n\tfor i, v in ipairs(values) do\n\t\tif type(v) == 'number' and v % 1 ==\
    \ 0 then\n\t\t\tt[#t + 1] = v\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local _values\
    \ = {}\n  for _, value in ipairs(values) do\n    if value % 1 == 0 then\n    \
    \  table.insert(_values, value)\n    end\n  end\n  return _values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfcfbqxq1.lua:9:\
    \ attempt to perform arithmetic on a table value (local 'value')\nstack traceback:\n\
    \t/tmp/tmpfcfbqxq1.lua:9: in local 'candidate'\n\t/tmp/tmpfcfbqxq1.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tif not values\
    \ then return nil end\n\tlocal r = {}\n\tfor i = 1, #values do\n\t\tlocal val\
    \ = values[i]\n\t\tif type(val) == 'number' and math.floor(val) == val then\n\t\
    \t\ttable.insert(r, val)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  assert(is_table(values),\
    \ \"Expected table of integers\")\n  local filtered = {}\n  for _, value in ipairs(values)\
    \ do\n    if is_integer(value) then\n      table.insert(filtered, value)\n   \
    \ end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpejzrfr22.lua:7:\
    \ attempt to call a nil value (global 'is_table')\nstack traceback:\n\t/tmp/tmpejzrfr22.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpejzrfr22.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    return filter(values,\
    \ is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1r5nhk95.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp1r5nhk95.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1r5nhk95.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for i, v in ipairs(values) do\n        if (type(v) == 'number') then\n\
    \            table.insert(filtered, v)\n        end\n    end\n    return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchj9ufq5.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpchj9ufq5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local ints\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            ints[#ints + 1] = v\n        end\n    end\n   \
    \ return ints\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local new\
    \ = {}\n  for k, v in pairs(values) do\n    if (type(v) == 'number') and (floor(v)\
    \ == v) then\n      table.insert(new, v)\n    end\n  end\n  return new\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaiz3y9do.lua:9:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpaiz3y9do.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpaiz3y9do.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local v\
    \ = {}\n    for i = 1, #values do\n        if type(values[i]) == 'number' and\n\
    \           math.floor(values[i]) == values[i] then\n            v[#v + 1] = values[i]\n\
    \        end\n    end\n    return v\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal t =\
    \ { }\n\tfor _,v in ipairs(values) do\n\t\tif type(v) == 'number' and math.floor(v)\
    \ == v then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(filtered, value)\n       \
    \ end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal t =\
    \ {}\n\tfor _,v in ipairs(values) do\n\t\tif type(v) == 'number' and v == math.floor(v)\
    \ then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  return filter(values,\
    \ function(value)\n    return type(value) == 'number' and math.floor(value) ==\
    \ value\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsg95nao.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpmsg95nao.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmsg95nao.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local res\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(res, v)\n        end\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            integers[#integers + 1] = value\n\
    \        end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            tinsert(filtered, v)\n        end\n   \
    \ end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwz07k7t.lua:10:\
    \ attempt to call a nil value (global 'tinsert')\nstack traceback:\n\t/tmp/tmppwz07k7t.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppwz07k7t.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for k, v in ipairs(values) do\n        if is_integer(v) then\n   \
    \         table.insert(filtered, v)\n        end\n    end\n    return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8f56uk2w.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp8f56uk2w.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8f56uk2w.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v == math.floor(v) then\n            table.insert(integers, v)\n        end\n\
    \    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local res\
    \ = {}\n  for i, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if is_integer(value) then\n\
    \            table.insert(result, value)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt6buhhzz.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpt6buhhzz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpt6buhhzz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for _, val in ipairs(values) do\n        if type(val) == 'number'\
    \ and math.floor(val) == val then\n            table.insert(integers, val)\n \
    \       end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for i, v in ipairs(values) do\n    if (type(v) == 'number') then\n \
    \     integers[#integers + 1] = v\n    end\n  end\n  return integers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcezf6lq7.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpcezf6lq7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local ret\
    \ = {}\n  for i = 1, #values do\n    if type(values[i]) == 'number' and (values[i]\
    \ % 1) == 0 then\n      ret[#ret + 1] = values[i]\n    end\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if v.type == 'integer' then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq3z6nffy.lua:9:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpq3z6nffy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpq3z6nffy.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local out\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            out[#out + 1] = v\n        end\n    end\n    return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      integers[#integers + 1] = value\n   \
    \ end\n  end\n  return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local filtered\
    \ = {}\n  for i, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      filtered[#filtered + 1] = v\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local res\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            res[#res + 1] = v\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            result[#result + 1] = v\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for _, val in ipairs(values) do\n        if (type(val) == 'number'\
    \ and val == math.floor(val)) then\n            table.insert(filtered, val)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal res\
    \ = {}\n\tfor _, value in ipairs(values) do\n\t\tif type(value) == 'number' and\
    \ value == math.floor(value) then\n\t\t\ttable.insert(res, value)\n\t\tend\n\t\
    end\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local t =\
    \ {}\n  for i,v in ipairs(values) do\n    if type(v) == 'number' and v == math.floor(v)\
    \ then\n      t[#t+1] = v\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            table.insert(integers, v)\n        end\n    end\n\
    \    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for i, item in ipairs(values) do\n    if type(item) == 'number' and\
    \ math.floor(item) == item then\n      table.insert(result, item)\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and floor(v)\
    \ == v then\n      table.insert(integers, v)\n    end\n  end\n  return integers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplaf_kiet.lua:9:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmplaf_kiet.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplaf_kiet.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local out\
    \ = { }\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(out, v)\n        end\n   \
    \ end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if (type(value) == 'number')\
    \ then\n            result[#result + 1] = value\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndvwlq16.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpndvwlq16.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i = 1, #values do\n        local value = values[i]\n        if\
    \ type(value) == 'number' and value % 1 == 0 then\n            result[#result\
    \ + 1] = value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local new_table\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(new_table, value)\n    end\n\
    \  end\n  return new_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for i, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local new_values\
    \ = {}\n  for _, v in ipairs(values) do\n    if tonumber(v) and math.floor(v)\
    \ == v then\n      table.insert(new_values, v)\n    end\n  end\n  return new_values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            result[#result + 1] = v\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local ints\
    \ = {}\n    for i = 1, #values do\n        local value = values[i]\n        if\
    \ value.type == 'integer' then\n            ints[#ints + 1] = value\n        end\n\
    \    end\n    return ints\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptkmujrq3.lua:10:\
    \ attempt to index a number value (local 'value')\nstack traceback:\n\t/tmp/tmptkmujrq3.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmptkmujrq3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      integers[#integers + 1] = value\n    end\n  end\n\
    \  return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for k, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(filtered, v)\n        end\n\
    \    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local res\
    \ = {}\n  for k, v in pairs(values) do\n    if type(v) == 'number' and math.tointeger(v)\
    \ == v then\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal integers\
    \ = {}\n\tfor _, value in ipairs(values) do\n\t\tif type(value) == 'number' and\
    \ math.floor(value) == value then\n\t\t\ttable.insert(integers, value)\n\t\tend\n\
    \tend\n\treturn integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local t\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(t, v)\n        end\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _,v in ipairs(values) do\n    if type(v) == 'number' and v == math.floor(v)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if (isint(value)) then\n\
    \            result[#result + 1] = value\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_fihwi6.lua:9:\
    \ attempt to call a nil value (global 'isint')\nstack traceback:\n\t/tmp/tmpt_fihwi6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpt_fihwi6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local new_values\
    \ = {}\n  for _, value in ipairs(values) do\n    if is_int(value) then\n     \
    \ table.insert(new_values, value)\n    end\n  end\n  return new_values\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppelkf9pp.lua:9:\
    \ attempt to call a nil value (global 'is_int')\nstack traceback:\n\t/tmp/tmppelkf9pp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppelkf9pp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local res\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal t =\
    \ {}\n\tfor _, v in ipairs(values) do\n\t\tif type(v) == 'number' and math.floor(v)\
    \ == v then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal ret\
    \ = {}\n\tfor k, v in pairs(values) do\n\t\tif type(v) == 'number' and math.floor(v)\
    \ == v then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local filtered\
    \ = {}\n  for _,value in ipairs(values) do\n    if type(value) == 'number' and\
    \ floor(value) == value then\n      filtered[#filtered + 1] = value\n    end\n\
    \  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk3hgxjen.lua:9:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpk3hgxjen.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpk3hgxjen.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal ret\
    \ = {}\n\tfor _,value in ipairs(values) do\n\t\tif type(value) == 'number' and\
    \ math.floor(value) == value then\n\t\t\ttable.insert(ret, value)\n\t\tend\n\t\
    end\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  return map(values,\
    \ {[type_number] = true}, function(v) return v end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmhqh8kib.lua:7:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpmhqh8kib.lua:7: in local 'candidate'\n\
    \t/tmp/tmpmhqh8kib.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local ints\
    \ = {}\n  for i = 1, #values do\n    if type(values[i]) == 'number' and math.floor(values[i])\
    \ == values[i] then\n      ints[#ints + 1] = values[i]\n    end\n  end\n  return\
    \ ints\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local retval\
    \ = {}\n  for _,v in ipairs(values) do\n    if tonumber(v) then\n      retval[#retval+1]\
    \ = tonumber(v)\n    end\n  end\n  return retval\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5ok3n9f.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpp5ok3n9f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local filtered\
    \ = {}\n    for _,v in ipairs(values) do\n        if v.type == 'integer' then\n\
    \            filtered[#filtered+1] = v\n        end\n    end\n    return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1a2wk8en.lua:9:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmp1a2wk8en.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1a2wk8en.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local new_values\
    \ = {}\n    for _, value in ipairs(values) do\n        if is_integer(value) then\n\
    \            table.insert(new_values, value)\n        end\n    end\n    return\
    \ new_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0zw5afc.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpk0zw5afc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpk0zw5afc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local ints\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(ints, v)\n    end\n  end\n  return ints\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i = 1, #values do\n        local value = values[i]\n        if\
    \ isinteger(value) then\n            result[#result + 1] = value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp089azojq.lua:10:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmp089azojq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp089azojq.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local t\
    \ = {}\n    for k, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  local n = 0\n  for k, v in ipairs(values) do\n    if is_integer(v) then\n\
    \      n = n + 1\n      result[n] = v\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkl56f0yi.lua:10:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpkl56f0yi.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpkl56f0yi.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local new_table\
    \ = {}\n    for _, val in ipairs(values) do\n        if type(val) == 'number'\
    \ and math.floor(val) == val then\n            table.insert(new_table, val)\n\
    \        end\n    end\n    return new_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local t\
    \ = {};\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(t, v);\n        end\n    end\n\
    \    return t;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local tab\
    \ = {}\n  for i = 1, #values do\n    if type(values[i]) == 'number' and values[i]\
    \ % 1 == 0 then\n      tab[#tab + 1] = values[i]\n    end\n  end\n  return tab\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    assert(type(values)\
    \ == 'table', 'Values must be in a table')\n    local result = {}\n    for k,\
    \ v in pairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            result[#result + 1] = v\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    if is_array(values)\
    \ then\n        local new_values = {}\n        for k,v in pairs(values) do\n \
    \           if is_array(v) then\n                if #v == 0 then\n           \
    \         if not contains(new_values, v) then\n                        table.insert(new_values,\
    \ v)\n                    end\n                else\n                    local\
    \ new_v = filter_integers(v)\n                    for i,element in pairs(new_v)\
    \ do\n                        if not contains(new_values, element) then\n    \
    \                        table.insert(new_values, element)\n                 \
    \       end\n                    end\n                end\n            elseif\
    \ is_number(v) then\n                if not contains(new_values, v) then\n   \
    \                 table.insert(new_values, v)\n                end\n         \
    \   end\n        end\n        return new_values\n    else\n        return values\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpud9gupj4.lua:7:\
    \ attempt to call a nil value (global 'is_array')\nstack traceback:\n\t/tmp/tmpud9gupj4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpud9gupj4.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local new_values\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      new_values[#new_values + 1] = value\n\
    \    end\n  end\n  return new_values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local ints\
    \ = {}\n    for i = 1, #values do\n        local v = values[i]\n        if isinteger(v)\
    \ then\n            tinsert(ints, v)\n        end\n    end\n    return ints\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsq__t_70.lua:10:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmpsq__t_70.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpsq__t_70.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  if type(values)\
    \ ~= 'table' then return nil end\n  return filter(values, function(x) return type(x)\
    \ == 'number' end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvzan4w2q.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpvzan4w2q.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpvzan4w2q.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for i, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local res\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local new_values\
    \ = {}\n  for i = 1, #values do\n    local v = values[i]\n    if type(v) == 'number'\
    \ and v % 1 == 0 then\n      new_values[#new_values + 1] = v\n    end\n  end\n\
    \  return new_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if is_integer(value) then\n\
    \            table.insert(result, value)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt6buhhzz.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpt6buhhzz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpt6buhhzz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    return luathon.filter(values,\
    \ luathon.is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8m2phyb.lua:7:\
    \ attempt to index a nil value (global 'luathon')\nstack traceback:\n\t/tmp/tmpz8m2phyb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpz8m2phyb.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local new_values\
    \ = {}\n    for _, value in ipairs(values) do\n        if is_integer(value) then\n\
    \            table.insert(new_values, value)\n        end\n    end\n    return\
    \ new_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0zw5afc.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpk0zw5afc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpk0zw5afc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ is_integer(value) then\n      table.insert(result, value)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozd2y9xl.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpozd2y9xl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpozd2y9xl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  return table.filter(values,\
    \ is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpawi1y6ql.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpawi1y6ql.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpawi1y6ql.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, item in ipairs(values) do\n        if type(item) == 'number'\
    \ and item % 1 == 0 then\n            table.insert(result, item)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for k, v in pairs(values) do\n    if type(v) == 'number' and floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2sxqx3ay.lua:9:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp2sxqx3ay.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2sxqx3ay.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            result[#result + 1] = value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for k,v in pairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local ints\
    \ = {}\n    for _, v in ipairs(values) do\n        if is_integer(v) then\n   \
    \         table.insert(ints, v)\n        end\n    end\n    return ints\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadi1jgaz.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpadi1jgaz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpadi1jgaz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local ret\
    \ = {}\n    for i,v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(ret, v)\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  return table.filter(values,\
    \ is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpawi1y6ql.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpawi1y6ql.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpawi1y6ql.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local new_vals\
    \ = {}\n  for i = 1, #values do\n    if type(values[i]) == 'number' and math.floor(values[i])\
    \ == values[i] then\n      new_vals[#new_vals + 1] = values[i]\n    end\n  end\n\
    \  return new_vals\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n\tlocal result\
    \ = {}\n\tfor _, v in ipairs(values) do\n\t\tif is_int(v) then\n\t\t\ttable.insert(result,\
    \ v)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj2hpqzsl.lua:9:\
    \ attempt to call a nil value (global 'is_int')\nstack traceback:\n\t/tmp/tmpj2hpqzsl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpj2hpqzsl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660013263
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local filtered\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(filtered, v)\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660013263
