name: HumanEval_126_is_sorted
language: lua
prompt: "-- Given a table of numbers, return whether or not they are sorted\n-- in\
  \ ascending order. If table has more than 1 duplicate of the same\n-- number, return\
  \ false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted({5})\n\
  -- true\n-- >>> is_sorted({1, 2, 3, 4, 5})\n-- true\n-- >>> is_sorted({1, 3, 2,\
  \ 4, 5})\n-- false\n-- >>> is_sorted({1, 2, 3, 4, 5, 6})\n-- true\n-- >>> is_sorted({1,\
  \ 2, 3, 4, 5, 6, 7})\n-- true\n-- >>> is_sorted({1, 3, 2, 4, 5, 6, 7})\n-- false\n\
  -- >>> is_sorted({1, 2, 2, 3, 3, 4})\n-- true\n-- >>> is_sorted({1, 2, 2, 2, 3,\
  \ 4})\n-- false\nlocal function is_sorted(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n\
  \    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2,\
  \ 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n   \
  \ lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}),\
  \ false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}),\
  \ true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1,\
  \ 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tfor i = 1, #lst - 1 do\n\t\tif lst[i] >= lst[i + 1] then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn true\nend", "    --[[\n    -- A lot more\
    \ manual way that I came up with first\n    if #lst == 1 then\n        return\
    \ true\n    end\n    for i = 1, #lst - 1 do\n        if lst[i] >= lst[i + 1] then\n\
    \            return false\n        end\n    end\n    return true\n    --]]\n \
    \   -- A much better way\n    local sorted = true\n    for i = 1, #lst - 1 do\n\
    \        if lst[i] >= lst[i + 1] then\n            sorted = false\n          \
    \  break\n        end\n    end\n    return sorted\nend", "    if lst[1] == nil\
    \ then\n        return true\n    end\n    for i = 2,#lst do\n        if lst[i]\
    \ < lst[i-1] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    -- your code here\n    local max_num = lst[1]\n    local index_max\
    \ = 1\n    local min_num = lst[1]\n    local index_min = 1\n    local count =\
    \ 0\n    local temp_max = 0\n    local temp_min = 0\n    local index_max_temp\
    \ = 0\n    local index_min_temp = 0\n    local temp_lst = {}\n    for i = 1, #lst\
    \ do\n        for k = 1, #lst do\n            if lst[i] == lst[k] then\n     \
    \           count = count + 1\n            end\n        end\n        if count\
    \ >= 2 then\n            return false\n        end\n        count = 0\n    end\n\
    \    for i = 1, #lst do\n        for k = 1, #lst do\n            if lst[i] > lst[k]\
    \ then\n                max_num = lst[i]\n                index_max = i\n    \
    \        end\n        end\n        if max_num > temp_max then\n            temp_max\
    \ = max_num\n            index_max_temp = index_max\n        end\n    end\n  \
    \  for i = 1, #lst do\n        for k = 1, #lst do\n            if lst[i] < lst[k]\
    \ then\n                min_num = lst[i]\n                index_min = i\n    \
    \        end\n        end\n        if min_num < temp_min then\n            temp_min\
    \ = min_num\n            index_min_temp = index_min\n        end\n    end\n  \
    \  if index_max_temp == index_min_temp then\n        return true\n    else\n \
    \       return false\n    end\nend", "  for i = 1, #lst - 1 do\n    if lst[i]\
    \ >= lst[i + 1] then\n      return false\n    end\n  end\n  return true\nend",
  "  -- TODO: remove this and return your own value\n  return nil\nend", "  local\
    \ last = nil\n  for i, v in ipairs(lst) do\n    if last ~= nil and last > v then\n\
    \      return false\n    end\n    last = v\n  end\n  return true\nend", "  for\
    \ i = 1, #lst do\n    if i < #lst and lst[i] >= lst[i + 1] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local prev = nil\n    for _,\
    \ v in ipairs(lst) do\n        if prev and prev >= v then\n            return\
    \ false\n        end\n        prev = v\n    end\n    return true\nend", "    local\
    \ prev\n    for i,v in ipairs(lst) do\n        if prev and v <= prev then\n  \
    \          return false\n        end\n        prev = v\n    end\n    return true\n\
    end", "  if #lst == 1 then\n    return true\n  end\n  for i = 1, #lst - 1 do\n\
    \    if lst[i] > lst[i + 1] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  return assert(is_sorted_c, \"is_sorted: is_sorted_c is not installed\"\
    ).is_sorted(lst)\nend", "  for i = 1, #lst - 1 do\n    if lst[i] >= lst[i + 1]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    -- use first\
    \ value as comparison and keep track of current value\n    local compare = lst[1]\n\
    \    for _, v in ipairs(lst) do\n        -- if current value less than compare\
    \ value, it is not sorted\n        if compare > v then\n            return false\n\
    \        end\n        -- set current value as comparison for next value\n    \
    \    compare = v\n    end\n    return true\nend", "    -- Enter your code here\n\
    \    local is_unique = true\n    local prev = nil\n    for i, v in ipairs(lst)\
    \ do\n        if prev ~= nil and prev == v then\n            is_unique = false\n\
    \        end\n        prev = v\n    end\n    if is_unique then\n        for i\
    \ = 1, #lst - 1 do\n            if lst[i] > lst[i + 1] then\n                return\
    \ false\n            end\n        end\n        return true\n    else\n       \
    \ return false\n    end\nend", "  local prev = nil\n  for _, curr in ipairs(lst)\
    \ do\n    if prev and prev >= curr then\n      return false\n    end\n    prev\
    \ = curr\n  end\n  return true\nend", "  local res = true\n  for i = 1, #lst -\
    \ 1 do\n    if lst[i] >= lst[i + 1] then\n      res = false\n      break\n   \
    \ end\n  end\n  return res\nend", "  if #lst == 1 then\n    return true\n  end\n\
    \  local prev = lst[1]\n  for i = 2, #lst do\n    if lst[i] < prev then\n    \
    \  return false\n    end\n    prev = lst[i]\n  end\n  return true\nend", "  for\
    \ i = 1, #lst - 1 do\n    if lst[i] >= lst[i + 1] then\n      return false\n \
    \   end\n  end\n  return true\nend", "  -- your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
