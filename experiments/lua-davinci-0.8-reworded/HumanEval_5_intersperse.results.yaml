language: lua
name: HumanEval_5_intersperse
results:
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if not is_table(numbers) then\n        return numbers\n    end\n    local\
    \ result = {}\n    local count = #numbers\n    if count < 2 then\n        return\
    \ numbers\n    end\n    for i = 1, count do\n        if i > 1 then\n         \
    \   result[#result + 1] = delimeter\n        end\n        result[#result + 1]\
    \ = numbers[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72pp8w68.lua:7:\
    \ attempt to call a nil value (global 'is_table')\nstack traceback:\n\t/tmp/tmp72pp8w68.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp72pp8w68.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local size = #numbers\n    if size == 0 then\n   \
    \     return result\n    end\n    result[1] = numbers[1]\n    for i = 2, size\
    \ do\n        table.insert(result, delimeter)\n        table.insert(result, numbers[i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    if #numbers == 1 then\n\
    \        return numbers\n    end\n    local l = {}\n    for i = 1, #numbers -\
    \ 1 do\n        l[2 * i - 1] = numbers[i]\n        l[2 * i] = delimeter\n    end\n\
    \    l[#l] = numbers[#numbers]\n    return l\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbque_c1d.lua:26:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 2}\nstack traceback:\n\
    \t/tmp/tmpbque_c1d.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tif i < #numbers then\n\t\t\tresult[#result + 1] = delimeter\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local n = #numbers\n    for i = 1, n - 1 do\n    \
    \    local number = numbers[i]\n        result[#result + 1] = number\n       \
    \ result[#result + 1] = delimeter\n    end\n    if n > 0 then\n        result[#result\
    \ + 1] = numbers[n]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local new_table = {}\n    for i, number in ipairs(numbers) do\n        table.insert(new_table,\
    \ number)\n        if i < #numbers then\n            table.insert(new_table, delimeter)\n\
    \        end\n    end\n    return new_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, number in ipairs(numbers) do\n    result[#result\
    \ + 1] = number\n    if i < #numbers then\n      result[#result + 1] = delimeter\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local out = {}\n  local n = len(numbers)\n  if n > 0 then\n    out[1] = numbers[1]\n\
    \    for i = 2, n do\n      out[2 * i - 1] = delimeter\n      out[2 * i] = numbers[i]\n\
    \    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt8x0uz_b.lua:8:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpt8x0uz_b.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpt8x0uz_b.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local out = {}\n    for i, num in ipairs(numbers) do\n        out[#out +\
    \ 1] = num\n        if i ~= #numbers then\n            out[#out + 1] = delimeter\n\
    \        end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tlocal n = #numbers\n\tfor i = 1, n - 1 do\n\t\tresult[#result\
    \ + 1] = numbers[i]\n\t\tresult[#result + 1] = delimeter\n\tend\n\tresult[#result\
    \ + 1] = numbers[n]\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    return zip(numbers, interleave({}, numbers, delimeter))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl70ggts2.lua:7:\
    \ attempt to call a nil value (global 'interleave')\nstack traceback:\n\t/tmp/tmpl70ggts2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpl70ggts2.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert_arg_tables({numbers})\n    assert_arg_number(delimeter)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl4twqxuo.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local length = #numbers\n    if length > 0 then\n\
    \        result[1] = numbers[1]\n        for i = 2, length do\n            result[#result\
    \ + 1] = delimeter\n            result[#result + 1] = numbers[i]\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local output = {}\n\
    \    for i = 1, #numbers - 1 do\n        output[#output + 1] = numbers[i]\n  \
    \      output[#output + 1] = delimeter\n    end\n    output[#output + 1] = numbers[#numbers]\n\
    \    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers <= 1 then\n    return numbers\n  end\n  local result = {}\n  for\
    \ i, number in ipairs(numbers) do\n    if i > 1 then\n      table.insert(result,\
    \ delimeter)\n    end\n    table.insert(result, number)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal res = {}\n\tfor i = 1, #numbers - 1 do\n\t\tres[#res + 1] = numbers[i]\n\
    \t\tres[#res + 1] = delimeter\n\tend\n\tres[#res + 1] = numbers[#numbers]\n\t\
    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        if i\
    \ ~= 1 then\n            table.insert(result, delimeter)\n        end\n      \
    \  table.insert(result, number)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers <= 1 then\n    return numbers\n  end\n  local interleaved = {}\n\
    \  for i = 1, #numbers - 1 do\n    local v = numbers[i]\n    table.insert(interleaved,\
    \ v)\n    table.insert(interleaved, delimeter)\n  end\n  table.insert(interleaved,\
    \ numbers[#numbers])\n  return interleaved\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tassertPositiveInteger(delimeter)\n\treturn collect(function()\n\t\tlocal first\n\
    \t\tfor _, n in ipairs(numbers) do\n\t\t\tif first ~= nil then\n\t\t\t\tyield(delimeter)\n\
    \t\t\tend\n\t\t\tyield(n)\n\t\t\tfirst = n\n\t\tend\n\tend)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_e_nb2uf.lua:7:\
    \ attempt to call a nil value (global 'assertPositiveInteger')\nstack traceback:\n\
    \t/tmp/tmp_e_nb2uf.lua:7: in local 'candidate'\n\t/tmp/tmp_e_nb2uf.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert(is_a_list(numbers), \"intersperse: input must be a table\")\n    assert(#numbers\
    \ >= 0, \"intersperse: input must be a list of numbers\")\n    assert(type(delimeter)\
    \ == \"number\", \"intersperse: delimeter must be a number\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdal2fp07.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local ret = {}\n    local len = table.getn(numbers)\n    if len == 0 then\n\
    \        return ret\n    end\n    ret[1] = numbers[1]\n    for i = 2, len do\n\
    \        ret[(i - 1) * 2] = delimeter\n        ret[(i - 1) * 2 + 1] = numbers[i]\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv988hl81.lua:8:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpv988hl81.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpv988hl81.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tassert(type(numbers) == \"table\", \"numbers must be a table\")\n\tassert(delimeter\
    \ ~= nil, \"delimeter must not be nil\")\n\tlocal t = {}\n\tfor i, v in ipairs(numbers)\
    \ do\n\t\ttable.insert(t, v)\n\t\tif i < #numbers then\n\t\t\ttable.insert(t,\
    \ delimeter)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i * 2 - 1]\
    \ = numbers[i]\n    new_numbers[i * 2] = delimeter\n  end\n  table.remove(new_numbers)\n\
    \  return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assertType(delimeter, \"number\", \"delimeter\")\n    if not numbers or #numbers\
    \ == 0 then\n        return {}\n    end\n    local result = {numbers[1]}\n   \
    \ for i = 2, #numbers do\n        table.insert(result, delimeter)\n        table.insert(result,\
    \ numbers[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgbr7cr9d.lua:7:\
    \ attempt to call a nil value (global 'assertType')\nstack traceback:\n\t/tmp/tmpgbr7cr9d.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgbr7cr9d.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tif i < #numbers then\n\t\t\tresult[#result + 1] = delimeter\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers <= 1 then\n        return numbers\n    end\n    local interspersed\
    \ = {numbers[1]}\n    for i = 2, #numbers do\n        table.insert(interspersed,\
    \ delimeter)\n        table.insert(interspersed, numbers[i])\n    end\n    return\
    \ interspersed\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  assert_table(numbers)\n  assert_number(delimeter)\n  local res = {}\n  local\
    \ i = 1\n  while i <= #numbers do\n    res[#res + 1] = numbers[i]\n    i = i +\
    \ 1\n    if i <= #numbers then\n      res[#res + 1] = delimeter\n    end\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jg5kvha.lua:7:\
    \ attempt to call a nil value (global 'assert_table')\nstack traceback:\n\t/tmp/tmp8jg5kvha.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8jg5kvha.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local count = #numbers\n    if count == 0 then\n        return {}\n    end\n\
    \    local indices = range(1, count * 2 - 1)\n    local result = {}\n    for _,\
    \ index in ipairs(indices) do\n        if index % 2 == 1 then\n            result[index]\
    \ = numbers[(index + 1) / 2]\n        else\n            result[index] = delimeter\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4a1hdeve.lua:11:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp4a1hdeve.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp4a1hdeve.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tlocal last = #numbers\n\tfor i = 1, last do\n\t\tresult[#result\
    \ + 1] = numbers[i]\n\t\tif i < last then\n\t\t\tresult[#result + 1] = delimeter\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        tinsert(result,\
    \ numbers[i])\n        tinsert(result, delimeter)\n    end\n    tinsert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_hug61vg.lua:12:\
    \ attempt to call a nil value (global 'tinsert')\nstack traceback:\n\t/tmp/tmp_hug61vg.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_hug61vg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers < 2 then\n    return numbers\n  end\n  local res = {numbers[1]}\n\
    \  for i = 2, #numbers do\n    table.insert(res, delimeter)\n    table.insert(res,\
    \ numbers[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    local len = #numbers\n    for i = 1, len do\n       \
    \ local num = numbers[i]\n        res[#res + 1] = num\n        if i < len then\n\
    \            res[#res + 1] = delimeter\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local i = 1\n  while i <= #numbers do\n    result[#result\
    \ + 1] = numbers[i]\n    if i < #numbers then\n      result[#result + 1] = delimeter\n\
    \    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    if #numbers == 1 then\n\
    \        return numbers\n    end\n    local result = {}\n    for i, number in\
    \ ipairs(numbers) do\n        table.insert(result, number)\n        if i < #numbers\
    \ then\n            table.insert(result, delimeter)\n        end\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert_arg_count(intersperse, numbers, 1)\n    local result = {}\n    for\
    \ i,n in ipairs(numbers) do\n        table.insert(result, n)\n        if i < #numbers\
    \ then\n            table.insert(result, delimeter)\n        end\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxwrv6da.lua:7:\
    \ attempt to call a nil value (global 'assert_arg_count')\nstack traceback:\n\t\
    /tmp/tmpdxwrv6da.lua:7: in local 'candidate'\n\t/tmp/tmpdxwrv6da.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for index, number in ipairs(numbers) do\n        if\
    \ index > 1 then\n            table.insert(result, delimeter)\n        end\n \
    \       table.insert(result, number)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i * 2 - 1] = numbers[i]\n\
    \    result[i * 2] = delimeter\n  end\n  result[#result] = nil\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i * 2 - 1] = numbers[i]\n\
    \    result[i * 2] = delimeter\n  end\n  result[#result] = nil\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  assertType(numbers, 'table', 'number list')\n  assertType(delimeter, 'number',\
    \ 'delimeter')\n  if #numbers == 0 then return {} end\n  local res = {numbers[1]}\n\
    \  for i = 2, #numbers do\n    table.insert(res, delimeter)\n    table.insert(res,\
    \ numbers[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2eaqvdd7.lua:7:\
    \ attempt to call a nil value (global 'assertType')\nstack traceback:\n\t/tmp/tmp2eaqvdd7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2eaqvdd7.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    for i = 1, #numbers - 1 do\n        res[#res + 1] = numbers[i]\n\
    \        res[#res + 1] = delimeter\n    end\n    res[#res + 1] = numbers[#numbers]\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    local len = #numbers\n    if len == 0 then\n        return\
    \ res\n    end\n    res[1] = numbers[1]\n    for i = 2, len do\n        res[i\
    \ * 2 - 1] = delimeter\n        res[i * 2] = numbers[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cfbu9fd.lua:24:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 3=8, 4=6, 5=8, 6=3, 7=8, 8=2}\n\
    stack traceback:\n\t/tmp/tmp3cfbu9fd.lua:24: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local ret = {}\n    for i,v in ipairs(numbers) do\n        ret[#ret+1] =\
    \ v\n        if i ~= #numbers then\n            ret[#ret+1] = delimeter\n    \
    \    end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers <= 1 then\n        return numbers\n    end\n    local result\
    \ = {}\n    for i, v in ipairs(numbers) do\n        table.insert(result, v)\n\
    \        if i < #numbers then\n            table.insert(result, delimeter)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local result = {numbers[1]}\n\
    \  for i = 2, #numbers do\n    result[#result + 1] = delimeter\n    result[#result\
    \ + 1] = numbers[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    return _.reduce(numbers, function(t, v)\n        _.push(t, v)\n        _.push(t,\
    \ delimeter)\n        return t\n    end, {})\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpibq7cc88.lua:7:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpibq7cc88.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpibq7cc88.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers <= 1 then\n        return numbers\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps895y8r3.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local sequence = {}\n    for i = 1, #numbers - 1 do\n        table.insert(sequence,\
    \ numbers[i])\n        table.insert(sequence, delimeter)\n    end\n    table.insert(sequence,\
    \ numbers[#numbers])\n    return sequence\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local acc = {}\n  for i, n in ipairs(numbers) do\n    if i > 1 then acc[#acc\
    \ + 1] = delimeter end\n    acc[#acc + 1] = n\n  end\n  return acc\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    if #numbers == 1 then\n\
    \        return numbers\n    end\n    local result = {}\n    local index = 1\n\
    \    while index <= #numbers do\n        result[#result + 1] = numbers[index]\n\
    \        if index + 1 <= #numbers then\n            result[#result + 1] = delimeter\n\
    \        end\n        index = index + 1\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local ret = {}\n  for i = 1,\
    \ #numbers - 1 do\n    table.insert(ret, numbers[i])\n    table.insert(ret, delimeter)\n\
    \  end\n  table.insert(ret, numbers[#numbers])\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local r = {}\n  for i = 1, #numbers - 1 do\n    r[#r + 1] = numbers[i]\n  \
    \  r[#r + 1] = delimeter\n  end\n  r[#r + 1] = numbers[#numbers]\n  return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tresult[#result + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if (not isArray(numbers)) then\n        error(\"Expected an array, got \"\
    \ .. type(numbers))\n    end\n    local result = {}\n    local index = 0\n   \
    \ for i = 1, #numbers - 1 do\n        index = index + 1\n        result[index]\
    \ = numbers[i]\n        index = index + 1\n        result[index] = delimeter\n\
    \    end\n    if (#numbers >= 1) then\n        index = index + 1\n        result[index]\
    \ = numbers[#numbers]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdnohkbk.lua:7:\
    \ attempt to call a nil value (global 'isArray')\nstack traceback:\n\t/tmp/tmpwdnohkbk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwdnohkbk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local res = {}\n  for i, v in ipairs(numbers) do\n    if i == 1 then\n    \
    \  table.insert(res, v)\n    else\n      table.insert(res, delimeter)\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, n in ipairs(numbers) do\n    result[#result + 1]\
    \ = n\n    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        if i\
    \ > 1 then\n            table.insert(result, delimeter)\n        end\n       \
    \ table.insert(result, number)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = {numbers[1]}\n\
    \    for index = 2, #numbers do\n        result[#result + 1] = delimeter\n   \
    \     result[#result + 1] = numbers[index]\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if numbers == nil or #numbers == 0 then\n    return {}\n  end\n  local interspersed\
    \ = {}\n  for i = 1, #numbers do\n    interspersed[i] = numbers[i]\n    if i <\
    \ #numbers then\n      interspersed[i + 1] = delimeter\n    end\n  end\n  return\
    \ interspersed\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45yutuwa.lua:24:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 6, 3, 2}\nstack traceback:\n\t\
    /tmp/tmp45yutuwa.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert(type(numbers) == \"table\", \"expected a table\")\n    assert(type(delimeter)\
    \ == \"number\", \"expected a number\")\n    if #numbers == 0 then\n        return\
    \ {}\n    end\n    local t = {}\n    for i = 1, #numbers - 1 do\n        t[i *\
    \ 2 - 1] = numbers[i]\n        t[i * 2] = delimeter\n    end\n    t[#t] = numbers[#numbers]\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vdfrmyx.lua:25:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 2}\nstack traceback:\n\
    \t/tmp/tmp_vdfrmyx.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers < 2 then\n    return numbers\n  end\n  local result = {}\n  for\
    \ i = 1, #numbers - 1 do\n    table.insert(result, numbers[i])\n    table.insert(result,\
    \ delimeter)\n  end\n  table.insert(result, numbers[#numbers])\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        table.insert(result,\
    \ v)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local interspersed = {}\n  for i = 1, #numbers do\n    interspersed[#interspersed\
    \ + 1] = numbers[i]\n    if i ~= #numbers then\n      interspersed[#interspersed\
    \ + 1] = delimeter\n    end\n  end\n  return interspersed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    return\n        empty(numbers) and {} or\n        foldr(\n            function(a,\
    \ acc)\n                return\n                    empty(acc) and\n         \
    \           {a} or\n                    {a, delimeter, unpack(acc)}\n        \
    \    end,\n            {},\n            numbers\n        )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphigc7el1.lua:8:\
    \ attempt to call a nil value (global 'empty')\nstack traceback:\n\t/tmp/tmphigc7el1.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmphigc7el1.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local out = {}\n    for i = 1, #numbers - 1 do\n        out[#out + 1] = numbers[i]\n\
    \        out[#out + 1] = delimeter\n    end\n    out[#out + 1] = numbers[#numbers]\n\
    \    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local length = #numbers\n    for i = 1, length do\n\
    \        result[i * 2 - 1] = numbers[i]\n        if i ~= length then\n       \
    \     result[i * 2] = delimeter\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, number in ipairs(numbers) do\n    table.insert(result,\
    \ number)\n    if i < #numbers then\n      table.insert(result, delimeter)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local output = {}\n    for index, number in ipairs(numbers) do\n        output[#output\
    \ + 1] = number\n        if index ~= #numbers then\n            output[#output\
    \ + 1] = delimeter\n        end\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert(type(numbers) == \"table\")\n    assert(type(delimeter) == \"number\"\
    )\n    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i, v in ipairs(numbers) do\n\t\ttable.insert(result,\
    \ v)\n\t\tif i < #numbers then\n\t\t\ttable.insert(result, delimeter)\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[#result + 1] = numbers[i]\n\
    \    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assertx.is_table(numbers)\n    assertx.is_number(delimeter)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_ern9ctp.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local t = {}\n    for i = 1, #numbers do\n        t[#t + 1] = numbers[i]\n\
    \        if i < #numbers then\n            t[#t + 1] = delimeter\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local head = numbers[1]\n  local\
    \ tail = slice(numbers, 2)\n  local result = {head}\n  for _, v in ipairs(tail)\
    \ do\n    table.insert(result, delimeter)\n    table.insert(result, v)\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzed_5a_a.lua:11:\
    \ attempt to call a nil value (global 'slice')\nstack traceback:\n\t/tmp/tmpzed_5a_a.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzed_5a_a.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local out = {}\n    for i = 1, #numbers - 1 do\n        out[#out + 1] = numbers[i]\n\
    \        out[#out + 1] = delimeter\n    end\n    out[#out + 1] = numbers[#numbers]\n\
    \    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tassert(type(numbers) == \"table\", \"bad argument #1 to 'intersperse' (expected\
    \ table)\")\n\tassert(type(delimeter) == \"number\", \"bad argument #2 to 'intersperse'\
    \ (expected number)\")\n\t\n\tlocal result = {}\n\t\n\tfor i = 1, #numbers - 1\
    \ do\n\t\ttable.insert(result, numbers[i])\n\t\ttable.insert(result, delimeter)\n\
    \tend\n\t\n\ttable.insert(result, numbers[#numbers])\n\t\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tlocal len = #numbers\n\tfor i = 1, len do\n\t\tresult[2\
    \ * i - 1] = numbers[i]\n\t\tresult[2 * i] = delimeter\n\tend\n\tresult[#result]\
    \ = nil\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\t\tresult[#result\
    \ + 1] = number\n\t\tresult[#result + 1] = delimeter\n\tend\n\ttable.remove(result)\
    \ -- remove the last delimeter\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    for i, v in ipairs(numbers) do\n        table.insert(res,\
    \ v)\n        if i < #numbers then\n            table.insert(res, delimeter)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i, number in ipairs(numbers) do\n\t\ttable.insert(result,\
    \ number)\n\t\tif i ~= #numbers then\n\t\t\ttable.insert(result, delimeter)\n\t\
    \tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tassert(isTuple(numbers), \"invalid numbers: must be a tuple\")\n\tassert(isNumber(delimeter),\
    \ \"invalid delimeter: must be a number\")\n\tif next(numbers) == nil then\n\t\
    \treturn {}\n\tend\n\tlocal result = { numbers[1] }\n\tfor i = 2, #numbers do\n\
    \t\tresult[#result + 1] = delimeter\n\t\tresult[#result + 1] = numbers[i]\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_oog4fax.lua:7:\
    \ attempt to call a nil value (global 'isTuple')\nstack traceback:\n\t/tmp/tmp_oog4fax.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_oog4fax.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\ttable.insert(result, numbers[i])\n\
    \t\ttable.insert(result, delimeter)\n\tend\n\ttable.insert(result, numbers[#numbers])\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local result = {numbers[1]}\n\
    \  for i = 2, #numbers do\n    append(result, delimeter)\n    append(result, numbers[i])\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6k93k9oe.lua:12:\
    \ attempt to call a nil value (global 'append')\nstack traceback:\n\t/tmp/tmp6k93k9oe.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6k93k9oe.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local t = {numbers[1]}\n  for\
    \ i = 2, #numbers do\n    table.insert(t, delimeter)\n    table.insert(t, numbers[i])\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local newNumbers = {}\n    for i = 1, #numbers - 1 do\n        newNumbers[#newNumbers\
    \ + 1] = numbers[i]\n        newNumbers[#newNumbers + 1] = delimeter\n    end\n\
    \    newNumbers[#newNumbers + 1] = numbers[#numbers]\n    return newNumbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if not numbers[1] then\n        return {}\n    end\n    local interspersed\
    \ = {numbers[1]}\n    for i = 2, #numbers do\n        t_insert(interspersed, delimeter)\n\
    \        t_insert(interspersed, numbers[i])\n    end\n    return interspersed\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyzl3s2aq.lua:12:\
    \ attempt to call a nil value (global 't_insert')\nstack traceback:\n\t/tmp/tmpyzl3s2aq.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpyzl3s2aq.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers < 2 then\n    return numbers\n  end\n  local new_numbers = {}\n\
    \  for i = 1, #numbers - 1 do\n    table.insert(new_numbers, numbers[i])\n   \
    \ table.insert(new_numbers, delimeter)\n  end\n  table.insert(new_numbers, numbers[#numbers])\n\
    \  return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[i * 2 -\
    \ 1] = numbers[i]\n        result[i * 2] = delimeter\n    end\n    result[#result]\
    \ = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9keefffi.lua:20:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 2}\nstack traceback:\n\
    \t/tmp/tmp9keefffi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local length = #numbers\n    for i, n in ipairs(numbers)\
    \ do\n        table.insert(result, n)\n        if i < length then\n          \
    \  table.insert(result, delimeter)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    --local result = {}\n    --local first = true\n    --for _, number in ipairs(numbers)\
    \ do\n    --    if first then\n    --        first = false\n    --    else\n \
    \   --        result[#result + 1] = delimeter\n    --    end\n    --    result[#result\
    \ + 1] = number\n    --end\n    --return result\n    local result = {}\n    for\
    \ index, number in ipairs(numbers) do\n        if index > 1 then\n           \
    \ result[#result + 1] = delimeter\n        end\n        result[#result + 1] =\
    \ number\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert(type(numbers) == \"table\", \"Expected a table, got \" .. type(numbers))\n\
    \    assert(type(delimeter) == \"number\", \"Expected a number, got \" .. type(delimeter))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpglsjxp7w.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local res = {}\n  for i = 1, #numbers do\n    res[#res + 1] = numbers[i]\n\
    \    if i < #numbers then\n      res[#res + 1] = delimeter\n    end\n  end\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal t = {}\n\tfor i = 1, #numbers - 1 do\n\t\tt[#t + 1] = numbers[i]\n\t\t\
    t[#t + 1] = delimeter\n\tend\n\tt[#t + 1] = numbers[#numbers]\n\treturn t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local new_table = {}\n    for i, v in ipairs(numbers) do\n        if i ~=\
    \ 1 then\n            table.insert(new_table, delimeter)\n        end\n      \
    \  table.insert(new_table, v)\n    end\n    return new_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local result =\
    \ {}\n    for i = 1, #numbers do\n        if i == 1 then\n            result[i]\
    \ = numbers[i]\n        else\n            table.insert(result, result[i])\n  \
    \          result[i] = delimeter\n            table.insert(result, result[i])\n\
    \            result[i] = numbers[i]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4867uy1.lua:28:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 6, 3, 2, 8, 8, 8}\nstack traceback:\n\
    \t/tmp/tmpl4867uy1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local newTable = {}\n  for index, value in ipairs(numbers) do\n    newTable[#newTable\
    \ + 1] = value\n    if (index < #numbers) then\n      newTable[#newTable + 1]\
    \ = delimeter\n    end\n  end\n  return newTable\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers <= 1 then\n        return numbers\n    end\n    local result\
    \ = {}\n    for i = 1, #numbers - 1 do\n        result[#result + 1] = numbers[i]\n\
    \        result[#result + 1] = delimeter\n    end\n    result[#result + 1] = numbers[#numbers]\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local output = {}\n    for i, number in ipairs(numbers) do\n        table.insert(output,\
    \ number)\n        if i ~= #numbers then\n            table.insert(output, delimeter)\n\
    \        end\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if not numbers or #numbers == 0 then\n        return {}\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphpat0b2l.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert(is_table(numbers), \"Intersperse: invalid input 'numbers'\")\n   \
    \ assert(type(delimeter) == \"number\", \"Intersperse: invalid input 'delimeter'\"\
    )\n    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvb5ig2rv.lua:7:\
    \ attempt to call a nil value (global 'is_table')\nstack traceback:\n\t/tmp/tmpvb5ig2rv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvb5ig2rv.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local output = {}\n  local lastIndex = #numbers\n  for i = 1, lastIndex do\n\
    \    output[#output + 1] = numbers[i]\n    if i ~= lastIndex then\n      output[#output\
    \ + 1] = delimeter\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tresult[#result + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local t = {numbers[1]}\n  for\
    \ i = 2, #numbers do\n    table.insert(t, delimeter)\n    table.insert(t, numbers[i])\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    table.insert(result, numbers[i])\n\
    \    table.insert(result, delimeter)\n  end\n  table.insert(result, numbers[#numbers])\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local i = 1\n  while i <= #numbers do\n    table.insert(result,\
    \ numbers[i])\n    if i < #numbers then\n      table.insert(result, delimeter)\n\
    \    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tresult[#result + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  return numbers:zip(numbers:slice(2))\n    :map(function(pair)\n      return\
    \ table.concat({pair[1], delimeter, pair[2]}, '')\n    end)\n    :concat({numbers[#numbers]})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg8dp_t0p.lua:7:\
    \ attempt to call a nil value (method 'slice')\nstack traceback:\n\t/tmp/tmpg8dp_t0p.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpg8dp_t0p.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for index, number in ipairs(numbers) do\n        if\
    \ index > 1 then\n            table.insert(result, delimeter)\n        end\n \
    \       table.insert(result, number)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers <= 1 then\n        return numbers\n    end\n    local ret = {}\n\
    \    for i = 1, #numbers - 1 do\n        ret[#ret + 1] = numbers[i]\n        ret[#ret\
    \ + 1] = delimeter\n    end\n    ret[#ret + 1] = numbers[#numbers]\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        if i\
    \ > 1 then\n            result[#result + 1] = delimeter\n        end\n       \
    \ result[#result + 1] = number\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tassert(type(numbers) == \"table\", \"bad argument #1 to 'intersperse' (table\
    \ expected, got \" .. type(numbers) .. \")\")\n\tassert(type(delimeter) == \"\
    number\", \"bad argument #2 to 'intersperse' (number expected, got \" .. type(delimeter)\
    \ .. \")\")\n\t\n\tlocal result = {}\n\t\n\tfor i = 1, #numbers - 1 do\n\t\tresult[2\
    \ * i - 1] = numbers[i]\n\t\tresult[2 * i] = delimeter\n\tend\n\t\n\tresult[#result\
    \ + 1] = numbers[#numbers]\n\t\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tif #numbers == 0 then\n\t\treturn {}\n\tend\n\tlocal result = {}\n\tfor i =\
    \ 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\t\tresult[#result\
    \ + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tassertarg(numbers, \"table\")\n\tassertarg(delimeter, \"number\")\n\t\n\tif\
    \ #numbers < 2 then\n\t\treturn numbers\n\tend\n\t\n\tlocal result = {}\n\tfor\
    \ i = 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\t\tresult[#result\
    \ + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31298zbf.lua:7:\
    \ attempt to call a nil value (global 'assertarg')\nstack traceback:\n\t/tmp/tmp31298zbf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp31298zbf.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local new_numbers = {}\n  for _, n in ipairs(numbers) do\n    new_numbers[#new_numbers\
    \ + 1] = n\n    new_numbers[#new_numbers + 1] = delimeter\n  end\n  new_numbers[#new_numbers]\
    \ = nil\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tif i > 1 then\n\t\t\ttable.insert(result,\
    \ delimeter)\n\t\tend\n\t\ttable.insert(result, numbers[i])\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    for i = 1, #numbers - 1 do\n        table.insert(res,\
    \ numbers[i])\n        table.insert(res, delimeter)\n    end\n    table.insert(res,\
    \ numbers[#numbers])\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local length = #numbers\n  for i = 1, length - 1 do\n\
    \    local element = numbers[i]\n    table.insert(result, element)\n    table.insert(result,\
    \ delimeter)\n  end\n  table.insert(result, numbers[length])\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local out = {}\n    for i = 1, #numbers do\n        table.insert(out, numbers[i])\n\
    \        if i < #numbers then\n            table.insert(out, delimeter)\n    \
    \    end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local out = {}\n    for i = 1, #numbers do\n        out[#out + 1] = numbers[i]\n\
    \        if i ~= #numbers then\n            out[#out + 1] = delimeter\n      \
    \  end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i, n in ipairs(numbers) do\n\t\tif i > 1 then\n\t\t\
    \ttable.insert(result, delimeter)\n\t\tend\n\t\ttable.insert(result, n)\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tassert(istable(numbers), \"numbers must be a table\")\n\tassert(delimeter ~=\
    \ nil, \"delimeter must not be nil\")\n\tlocal newt = {}\n\tlocal len = #numbers\n\
    \tif len > 0 then\n\t\tfor i, v in ipairs(numbers) do\n\t\t\tnewt[#newt + 1] =\
    \ v\n\t\t\tif i < len then\n\t\t\t\tnewt[#newt + 1] = delimeter\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn newt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpciff8ox2.lua:7:\
    \ attempt to call a nil value (global 'istable')\nstack traceback:\n\t/tmp/tmpciff8ox2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpciff8ox2.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \treturn 0 == #numbers and {} or #numbers < 2 and numbers or { numbers[1], delimeter,\
    \ unpack(intersperse(sub(numbers, 2), delimeter)) }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72j0903e.lua:7:\
    \ attempt to call a nil value (global 'sub')\nstack traceback:\n\t/tmp/tmp72j0903e.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp72j0903e.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal t = {}\n\tfor i = 1, #numbers - 1 do\n\t\tt[i * 2 - 1] = numbers[i]\n\t\
    \tt[i * 2] = delimeter\n\tend\n\tt[#t] = numbers[#numbers]\n\treturn t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5v7nslh.lua:20:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 2}\nstack traceback:\n\
    \t/tmp/tmpd5v7nslh.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        if i > 1 then\n  \
    \          result[#result + 1] = delimeter\n        end\n        result[#result\
    \ + 1] = numbers[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i,v in ipairs(numbers) do\n\t\ttable.insert(result,\
    \ v)\n\t\tif i ~= #numbers then\n\t\t\ttable.insert(result, delimeter)\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local idx = 1\n  for i = 1, #numbers do\n    result[idx]\
    \ = numbers[i]\n    if i ~= #numbers then\n      idx = idx + 1\n      result[idx]\
    \ = delimeter\n    end\n    idx = idx + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert(type(numbers) == \"table\", \"must be table\")\n    assert(type(delimeter)\
    \ == \"number\", \"must be number\")\n    local out = {}\n    for i = 1, #numbers\
    \ - 1 do\n        out[#out + 1] = numbers[i]\n        out[#out + 1] = delimeter\n\
    \    end\n    out[#out + 1] = numbers[#numbers]\n    return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local t = {}\n  local n = #numbers\n  for i = 1, n do\n    t[#t + 1] = numbers[i]\n\
    \    if i < n then\n      t[#t + 1] = delimeter\n    end\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local ret = {}\n\
    \    for i = 1, #numbers - 1 do\n        table.insert(ret, numbers[i])\n     \
    \   table.insert(ret, delimeter)\n    end\n    table.insert(ret, numbers[#numbers])\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tresult[2 * i - 1] = numbers[i]\n\
    \t\tresult[2 * i] = delimeter\n\tend\n\tresult[#result] = nil\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local result = {numbers[1]}\n\
    \  for i = 2, #numbers do\n    result[#result + 1] = delimeter\n    result[#result\
    \ + 1] = numbers[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if not numbers[1] then return {} end\n  local result = {numbers[1]}\n  for\
    \ i = 2, #numbers do\n    table.insert(result, delimeter)\n    table.insert(result,\
    \ numbers[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if not numbers[1] then\n        return {}\n    end\n    local result = {numbers[1]}\n\
    \    for i = 2, #numbers do\n        result[#result + 1] = delimeter\n       \
    \ result[#result + 1] = numbers[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal ret = {}\n\tfor i, v in ipairs(numbers) do\n\t\tret[#ret + 1] = v\n\t\t\
    if i < #numbers then\n\t\t\tret[#ret + 1] = delimeter\n\t\tend\n\tend\n\treturn\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local numbers = pack(numbers)\n  if #numbers < 2 then\n    return numbers\n\
    \  end\n  local t = {}\n  for i, v in ipairs(numbers) do\n    t[#t + 1] = v\n\
    \    if i < #numbers then\n      t[#t + 1] = delimeter\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxh1etlnu.lua:7:\
    \ attempt to call a nil value (global 'pack')\nstack traceback:\n\t/tmp/tmpxh1etlnu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxh1etlnu.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local result = {numbers[1]}\n\
    \  for i = 2, #numbers do\n    table.insert(result, delimeter)\n    table.insert(result,\
    \ numbers[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  assert_type(numbers, \"table\", 1)\n  assert_type(delimeter, \"number\", 2)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4uo3i1le.lua:7:\
    \ attempt to call a nil value (global 'assert_type')\nstack traceback:\n\t/tmp/tmp4uo3i1le.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4uo3i1le.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if getn(numbers) == 0 then\n        return {}\n    end\n    local head =\
    \ numbers[1]\n    local tail = slice(numbers, 2)\n    return concat({head}, map(function(x)\
    \ return {delimeter, x} end, tail))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpufbjxlm6.lua:7:\
    \ attempt to call a nil value (global 'getn')\nstack traceback:\n\t/tmp/tmpufbjxlm6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpufbjxlm6.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal output = {}\n\tlocal idx = 1\n\tfor i, v in ipairs(numbers) do\n\t\toutput[idx]\
    \ = v\n\t\tidx = idx + 1\n\t\tif i < #numbers then\n\t\t\toutput[idx] = delimeter\n\
    \t\t\tidx = idx + 1\n\t\tend\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local result =\
    \ {}\n    local i = 1\n    while i <= #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i ~= #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n        i = i + 1\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local t = {}\n    for i = 1, #numbers do\n        t[#t + 1] = numbers[i]\n\
    \        if i < #numbers then\n            t[#t + 1] = delimeter\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local out = {}\n  local size = #numbers\n  if size > 0 then\n    out[1] = numbers[1]\n\
    \    for i = 2, size do\n      out[i * 2 - 1] = delimeter\n      out[i * 2] =\
    \ numbers[i]\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bpu9ycy.lua:23:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 3=8, 4=6, 5=8, 6=3, 7=8, 8=2}\n\
    stack traceback:\n\t/tmp/tmp_bpu9ycy.lua:23: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local new_table = {}\n  local i = 1\n  while i <= #numbers do\n    new_table[#new_table\
    \ + 1] = numbers[i]\n    if i < #numbers then\n      new_table[#new_table + 1]\
    \ = delimeter\n    end\n    i = i + 1\n  end\n  return new_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local numbers1 = {}\n  for i = 1, #numbers do\n    numbers1[#numbers1 + 1]\
    \ = numbers[i]\n    if i < #numbers then\n      numbers1[#numbers1 + 1] = delimeter\n\
    \    end\n  end\n  return numbers1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        table.insert(result,\
    \ numbers[i])\n        if i < #numbers then\n            table.insert(result,\
    \ delimeter)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tresult[#result + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tif #numbers == 0 then\n\t\treturn {}\n\tend\n\tlocal result = {numbers[1]}\n\
    \tfor i = 2, #numbers do\n\t\ttable.insert(result, delimeter)\n\t\ttable.insert(result,\
    \ numbers[i])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local n = #numbers\n    for i = 1, n - 1 do\n    \
    \    result[#result + 1] = numbers[i]\n        result[#result + 1] = delimeter\n\
    \    end\n    if n ~= 0 then\n        result[#result + 1] = numbers[n]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tassert_table(numbers)\n\tassert_number(delimeter)\n\tlocal result = {}\n\tlocal\
    \ last_index = #numbers - 1\n\tfor i = 1, last_index do\n\t\tresult[#result +\
    \ 1] = numbers[i]\n\t\tresult[#result + 1] = delimeter\n\tend\n\tresult[#result\
    \ + 1] = numbers[last_index + 1]\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpln4jipb9.lua:7:\
    \ attempt to call a nil value (global 'assert_table')\nstack traceback:\n\t/tmp/tmpln4jipb9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpln4jipb9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local sep\n    local function separator(x)\n        return sep and {sep,\
    \ x} or {x}\n    end\n    local result = {}\n    for i = 1, #numbers do\n    \
    \    sep = delimeter\n        local v = numbers[i]\n        for _, element in\
    \ ipairs(separator(v)) do\n            result[#result + 1] = element\n       \
    \ end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqqkmwoa.lua:26:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {8, 5, 8, 6, 8, 3, 8, 2}\nstack traceback:\n\
    \t/tmp/tmpjqqkmwoa.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local count = #numbers\n  if count < 2 then\n    return numbers\n  end\n  local\
    \ result = {}\n  for i, number in ipairs(numbers) do\n    result[i * 2 - 1] =\
    \ number\n    result[i * 2] = delimeter\n  end\n  result[#result] = nil\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert_table(numbers)\n    assert_number(delimeter)\n    local result = {}\n\
    \    for index, number in ipairs(numbers) do\n        if index > 1 then\n    \
    \        result[#result + 1] = delimeter\n        end\n        result[#result\
    \ + 1] = number\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4l5elev_.lua:7:\
    \ attempt to call a nil value (global 'assert_table')\nstack traceback:\n\t/tmp/tmp4l5elev_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4l5elev_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for _, v in ipairs(numbers) do\n        table.insert(result,\
    \ v)\n        table.insert(result, delimeter)\n    end\n    table.remove(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  checkArg(1, numbers, \"table\")\n  checkArg(2, delimeter, \"number\")\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq8jvt4eg.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local last_index = #numbers\n  for i = 1, last_index do\n\
    \    table.insert(result, numbers[i])\n    if i < last_index then\n      table.insert(result,\
    \ delimeter)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local out = {}\n  for i, v in ipairs(numbers) do\n    out[#out + 1] = v\n \
    \   if i < #numbers then\n      out[#out + 1] = delimeter\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if (#numbers == 0) then\n        return numbers\n    end\n    local result\
    \ = {numbers[1]}\n    for i = 2, #numbers do\n        result[#result + 1] = delimeter\n\
    \        result[#result + 1] = numbers[i]\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if not isArray(numbers) then\n        error(\"The 1st parameter must be an\
    \ array.\", 2)\n    end\n    if not isNumber(delimeter) then\n        error(\"\
    The 2nd parameter must be a number.\", 2)\n    end\n    local list = {}\n    for\
    \ i = 1, #numbers - 1 do\n        list[#list + 1] = numbers[i]\n        list[#list\
    \ + 1] = delimeter\n    end\n    list[#list + 1] = numbers[#numbers]\n    return\
    \ list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97l33bw2.lua:7:\
    \ attempt to call a nil value (global 'isArray')\nstack traceback:\n\t/tmp/tmp97l33bw2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp97l33bw2.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal i, j = 1, 1\n\tlocal l = #numbers\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpstumdzcl.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, n in ipairs(numbers) do\n        result[#result\
    \ + 1] = n\n        if i < #numbers then\n            result[#result + 1] = delimeter\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers do\n\t\ttable.insert(result, numbers[i])\n\
    \t\tif i < #numbers then\n\t\t\ttable.insert(result, delimeter)\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local position = 1\n    local numbersLength = #numbers\n\
    \    while position <= numbersLength do\n        result[#result + 1] = numbers[position]\n\
    \        if position < numbersLength then\n            result[#result + 1] = delimeter\n\
    \        end\n        position = position + 1\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers <= 1 then\n    return numbers\n  end\n  local output = {numbers[1]}\n\
    \  for i = 2, #numbers do\n    table.insert(output, delimeter)\n    table.insert(output,\
    \ numbers[i])\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local numbersLength = #numbers\n    if numbersLength\
    \ == 0 then\n        return result\n    end\n    local lastIndex = numbersLength\
    \ - 1\n    result[1] = numbers[1]\n    for i = 1, lastIndex do\n        result[2\
    \ * i] = delimeter\n        result[2 * i + 1] = numbers[i + 1]\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    table.insert(result, numbers[i])\n\
    \    if i < #numbers then\n      table.insert(result, delimeter)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = {numbers[1]}\n\
    \    for i = 2, #numbers do\n        table.insert(result, delimeter)\n       \
    \ table.insert(result, numbers[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local n = #numbers\n  if n > 0 then\n    table.insert(result,\
    \ numbers[1])\n    for i = 2, n do\n      table.insert(result, delimeter)\n  \
    \    table.insert(result, numbers[i])\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tif #numbers == 0 then\n\t\treturn {}\n\tend\n\tlocal result = {}\n\tfor i =\
    \ 1, #numbers - 1 do\n\t\ttable.insert(result, numbers[i])\n\t\ttable.insert(result,\
    \ delimeter)\n\tend\n\ttable.insert(result, numbers[#numbers])\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local prev = nil\n  for i, num in ipairs(numbers) do\n\
    \    if i > 1 then\n      result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = num\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local new_numbers\
    \ = {}\n    for i = 1, #numbers - 1 do\n        new_numbers[#new_numbers + 1]\
    \ = numbers[i]\n        new_numbers[#new_numbers + 1] = delimeter\n    end\n \
    \   new_numbers[#new_numbers + 1] = numbers[#numbers]\n    return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if not numbers or #numbers == 0 then\n        return {}\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphpat0b2l.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local result =\
    \ {}\n    for i = 1, #numbers - 1 do\n        local v = numbers[i]\n        table.insert(result,\
    \ v)\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert_arg_length(numbers, 1)\n    assert_arg_length(delimeter, 2)\n    assert_arg_type(numbers,\
    \ 1, 'table')\n    assert_arg_type(delimeter, 2, 'number')\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplbjovy6y.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local ret = {numbers[1]}\n \
    \ for i = 2, #numbers do\n    ret[#ret + 1] = delimeter\n    ret[#ret + 1] = numbers[i]\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[i*2 - 1] = numbers[i]\n\
    \    result[i*2] = delimeter\n  end\n  result[#result + 1] = numbers[#numbers]\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tif (#numbers == 0) then\n\t\treturn numbers\n\tend\n\tlocal new_t = {numbers[1]}\n\
    \tfor i = 2, #numbers do\n\t\ttable.insert(new_t, delimeter)\n\t\ttable.insert(new_t,\
    \ numbers[i])\n\tend\n\treturn new_t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal n = #numbers\n\tif n < 2 then\n\t\treturn numbers\n\tend\n\tlocal result\
    \ = {}\n\tfor i = 1, n - 1 do\n\t\tresult[2 * i - 1] = numbers[i]\n\t\tresult[2\
    \ * i] = delimeter\n\tend\n\tresult[2 * n - 1] = numbers[n]\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    table.insert(result, numbers[i])\n\
    \    if i < #numbers then\n      table.insert(result, delimeter)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tresult[#result + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local ret = {\
    \ numbers[1] }\n    for i = 2, #numbers do\n        ret[#ret + 1] = delimeter\n\
    \        ret[#ret + 1] = numbers[i]\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 1
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  assert_arg_types('table', {'number', 'nil'}, numbers, delimeter)\n  local result\
    \ = {}\n  for i, value in ipairs(numbers) do\n    result[#result + 1] = value\n\
    \    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl50s5wkg.lua:7:\
    \ attempt to call a nil value (global 'assert_arg_types')\nstack traceback:\n\t\
    /tmp/tmpl50s5wkg.lua:7: in local 'candidate'\n\t/tmp/tmpl50s5wkg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local n = #numbers\n    if n == 0 then\n        return {}\n    elseif n ==\
    \ 1 then\n        return numbers\n    else\n        local interspersed = {numbers[1]}\n\
    \        for i = 2, n do\n            interspersed[#interspersed + 1] = delimeter\n\
    \            interspersed[#interspersed + 1] = numbers[i]\n        end\n     \
    \   return interspersed\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        table.insert(result,\
    \ numbers[i])\n        if i < #numbers then\n            table.insert(result,\
    \ delimeter)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978262
