name: HumanEval_5_intersperse
language: lua
results:
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if not is_table(numbers) then\n        return numbers\n    end\n    local\
    \ result = {}\n    local count = #numbers\n    if count < 2 then\n        return\
    \ numbers\n    end\n    for i = 1, count do\n        if i > 1 then\n         \
    \   result[#result + 1] = delimeter\n        end\n        result[#result + 1]\
    \ = numbers[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72pp8w68.lua:7:\
    \ attempt to call a nil value (global 'is_table')\nstack traceback:\n\t/tmp/tmp72pp8w68.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp72pp8w68.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local size = #numbers\n    if size == 0 then\n   \
    \     return result\n    end\n    result[1] = numbers[1]\n    for i = 2, size\
    \ do\n        table.insert(result, delimeter)\n        table.insert(result, numbers[i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    if #numbers == 1 then\n\
    \        return numbers\n    end\n    local l = {}\n    for i = 1, #numbers -\
    \ 1 do\n        l[2 * i - 1] = numbers[i]\n        l[2 * i] = delimeter\n    end\n\
    \    l[#l] = numbers[#numbers]\n    return l\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbque_c1d.lua:26:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 2}\nstack traceback:\n\
    \t/tmp/tmpbque_c1d.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tif i < #numbers then\n\t\t\tresult[#result + 1] = delimeter\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local n = #numbers\n    for i = 1, n - 1 do\n    \
    \    local number = numbers[i]\n        result[#result + 1] = number\n       \
    \ result[#result + 1] = delimeter\n    end\n    if n > 0 then\n        result[#result\
    \ + 1] = numbers[n]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local new_table = {}\n    for i, number in ipairs(numbers) do\n        table.insert(new_table,\
    \ number)\n        if i < #numbers then\n            table.insert(new_table, delimeter)\n\
    \        end\n    end\n    return new_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, number in ipairs(numbers) do\n    result[#result\
    \ + 1] = number\n    if i < #numbers then\n      result[#result + 1] = delimeter\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local out = {}\n  local n = len(numbers)\n  if n > 0 then\n    out[1] = numbers[1]\n\
    \    for i = 2, n do\n      out[2 * i - 1] = delimeter\n      out[2 * i] = numbers[i]\n\
    \    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt8x0uz_b.lua:8:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpt8x0uz_b.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpt8x0uz_b.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local out = {}\n    for i, num in ipairs(numbers) do\n        out[#out +\
    \ 1] = num\n        if i ~= #numbers then\n            out[#out + 1] = delimeter\n\
    \        end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tlocal n = #numbers\n\tfor i = 1, n - 1 do\n\t\tresult[#result\
    \ + 1] = numbers[i]\n\t\tresult[#result + 1] = delimeter\n\tend\n\tresult[#result\
    \ + 1] = numbers[n]\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    return zip(numbers, interleave({}, numbers, delimeter))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl70ggts2.lua:7:\
    \ attempt to call a nil value (global 'interleave')\nstack traceback:\n\t/tmp/tmpl70ggts2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpl70ggts2.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    assert_arg_tables({numbers})\n    assert_arg_number(delimeter)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl4twqxuo.lua:18: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local length = #numbers\n    if length > 0 then\n\
    \        result[1] = numbers[1]\n        for i = 2, length do\n            result[#result\
    \ + 1] = delimeter\n            result[#result + 1] = numbers[i]\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local output = {}\n\
    \    for i = 1, #numbers - 1 do\n        output[#output + 1] = numbers[i]\n  \
    \      output[#output + 1] = delimeter\n    end\n    output[#output + 1] = numbers[#numbers]\n\
    \    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers <= 1 then\n    return numbers\n  end\n  local result = {}\n  for\
    \ i, number in ipairs(numbers) do\n    if i > 1 then\n      table.insert(result,\
    \ delimeter)\n    end\n    table.insert(result, number)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal res = {}\n\tfor i = 1, #numbers - 1 do\n\t\tres[#res + 1] = numbers[i]\n\
    \t\tres[#res + 1] = delimeter\n\tend\n\tres[#res + 1] = numbers[#numbers]\n\t\
    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        if i\
    \ ~= 1 then\n            table.insert(result, delimeter)\n        end\n      \
    \  table.insert(result, number)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers <= 1 then\n    return numbers\n  end\n  local interleaved = {}\n\
    \  for i = 1, #numbers - 1 do\n    local v = numbers[i]\n    table.insert(interleaved,\
    \ v)\n    table.insert(interleaved, delimeter)\n  end\n  table.insert(interleaved,\
    \ numbers[#numbers])\n  return interleaved\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \tassertPositiveInteger(delimeter)\n\treturn collect(function()\n\t\tlocal first\n\
    \t\tfor _, n in ipairs(numbers) do\n\t\t\tif first ~= nil then\n\t\t\t\tyield(delimeter)\n\
    \t\t\tend\n\t\t\tyield(n)\n\t\t\tfirst = n\n\t\tend\n\tend)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_e_nb2uf.lua:7:\
    \ attempt to call a nil value (global 'assertPositiveInteger')\nstack traceback:\n\
    \t/tmp/tmp_e_nb2uf.lua:7: in local 'candidate'\n\t/tmp/tmp_e_nb2uf.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
