name: HumanEval_1_separate_paren_groups
language: lua
results:
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ result = {}\n  local last_end = 0\n  local j = 0\n  local paren_level = 0\n\
    \  while j < paren_string:len() do\n    if paren_string:sub(j, j) == '(' then\n\
    \      paren_level = paren_level + 1\n    elseif paren_string:sub(j, j) == ')'\
    \ then\n      paren_level = paren_level - 1\n    end\n    if paren_level == 0\
    \ then\n      local i = j\n      while i > last_end and paren_string:sub(i, i)\
    \ == ' ' do\n        i = i - 1\n      end\n      j = j + 1\n      while j < paren_string:len()\
    \ and paren_string:sub(j, j) == ' ' do\n        j = j + 1\n      end\n      table.insert(result,\
    \ paren_string:sub(last_end, i))\n      last_end = j\n    end\n    j = j + 1\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ldj9t64.lua:38:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"\", \"\
    (()\", \"()) ((\", \"())) () (((\", \"))(\", \")()\"}\nstack traceback:\n\t/tmp/tmp9ldj9t64.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    --\
    \ TODO: implement\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsj1vapxx.lua:15:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: nil\nstack\
    \ traceback:\n\t/tmp/tmpsj1vapxx.lua:15: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    if\
    \ not paren_string then\n        return {}\n    end\n    local groups = {}\n \
    \   local start, stop = paren_string:find('%([^%(%)]*%)')\n    while start do\n\
    \        table.insert(groups, paren_string:sub(start, stop))\n        start, stop\
    \ = paren_string:find('%([^%(%)]*%)', stop + 1)\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_8qdtjy.lua:23:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"}\nstack traceback:\n\t/tmp/tmpu_8qdtjy.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ parenthesis = S{'()', '[]', '{}'}\n  local function helper(s)\n    local found\
    \ = ''\n    local start = false\n    local groups = T{}\n    for i = 1, s:length()\
    \ do\n      local c = s:sub(i, i)\n      if c == ' ' then\n        if start then\n\
    \          found = found .. c\n        end\n      elseif c == '(' or c == '['\
    \ or c == '{' then\n        start = true\n        found = found .. c\n      elseif\
    \ c == ')' or c == ']' or c == '}' then\n        found = found .. c\n        if\
    \ parenthesis:contains(found) then\n          found = ''\n        else\n     \
    \     local op = c == ')' and '(' or c == ']' and '[' or '{'\n          local\
    \ close = found:sub(found:reverse():find(op, 1, true))\n          if close then\n\
    \            groups:append(close .. found:sub(1, found:length() - close:length()))\n\
    \            found = ''\n          end\n        end\n      end\n    end\n    return\
    \ groups\n  end\n  return helper(paren_string)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpamk_3ulu.lua:8:\
    \ attempt to call a nil value (global 'S')\nstack traceback:\n\t/tmp/tmpamk_3ulu.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpamk_3ulu.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local paren_group = ''\n    local paren_stack = {}\n    for\
    \ char in paren_string:gmatch('.') do\n        if char == '(' then\n         \
    \   table.insert(paren_stack, char)\n        elseif char == ')' then\n       \
    \     if #paren_stack == 0 then\n                return result\n            end\n\
    \            table.remove(paren_stack)\n            if #paren_stack == 0 then\n\
    \                table.insert(result, paren_group)\n                paren_group\
    \ = ''\n            end\n        elseif char ~= ' ' then\n            paren_group\
    \ = paren_group .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwb1nfrb.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"\", \"\
    \", \"\", \"\"}\nstack traceback:\n\t/tmp/tmpqwb1nfrb.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local paren_level = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph81llmzs.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ output = {}\n  local current_group = {}\n  local current_group_start = nil\n\
    \  local brackets = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i,\
    \ i)\n    if char == '(' then\n      if brackets == 0 then\n        current_group_start\
    \ = i\n      end\n      brackets = brackets + 1\n    elseif char == ')' then\n\
    \      brackets = brackets - 1\n      if brackets == 0 then\n        table.insert(output,\
    \ paren_string:sub(current_group_start, i))\n      end\n    end\n  end\n  return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqw4dpvp.lua:35:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpmqw4dpvp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ paren_table = {}\n  -- Remove all spaces from string\n  local no_spaces = string.gsub(paren_string,\
    \ ' ', '')\n  -- Logically divide string into separate groups and add to table\n\
    \  local count = 0\n  local start = 0\n  for i = 1, string.len(no_spaces) do\n\
    \    local char = string.sub(no_spaces, i, i)\n    if char == '(' then\n     \
    \ count = count + 1\n    elseif char == ')' then\n      count = count - 1\n  \
    \  end\n    if count == 0 then\n      local paren_group = string.sub(no_spaces,\
    \ start + 1, i)\n      table.insert(paren_table, paren_group)\n      start = i\n\
    \    end\n  end\n  return paren_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n\tparen_string\
    \ = paren_string:gsub(' ', '')\n\tlocal result = {}\n\tfor parens in paren_string:gmatch('%([^%)]+%)')\
    \ do\n\t\ttable.insert(result, parens)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogmo00sp.lua:19:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()\"\
    , \"((()\", \"((()\"}\nstack traceback:\n\t/tmp/tmpogmo00sp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local open_braces = 0\n  local start_index = 1\n  local end_index\
    \ = 1\n  for i = 1, #paren_string do\n    if paren_string:sub(i, i) == '(' then\n\
    \      open_braces = open_braces + 1\n    elseif paren_string:sub(i, i) == ')'\
    \ then\n      open_braces = open_braces - 1\n      if open_braces == 0 then\n\
    \        end_index = i\n        local group = paren_string:sub(start_index, end_index)\n\
    \        groups[#groups + 1] = group\n        start_index = i + 1\n      end\n\
    \    end\n  end\n  return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtzglqfc.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" ((()))\", \" ()\", \" ((())()())\"}\nstack traceback:\n\t/tmp/tmpmtzglqfc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n   --\
    \ Separate groups of nested parentheses, trim spaces\n   local groups = {}\n \
    \  for _, group in pairs(split(paren_string:gsub('%s', ''), '%((%b())%)')) do\n\
    \      if group ~= '' then\n         table.insert(groups, group)\n      end\n\
    \   end\n   return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4sd1t02.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmps4sd1t02.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmps4sd1t02.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  -- Insert code here!\n  local current_group = ''\n  local open_parens\
    \ = 0\n  for c in paren_string:gmatch('.') do\n    if c == '(' then\n      open_parens\
    \ = open_parens + 1\n      current_group = current_group .. c\n    elseif c ==\
    \ ')' then\n      open_parens = open_parens - 1\n      current_group = current_group\
    \ .. c\n      if open_parens == 0 then\n        table.insert(groups, current_group)\n\
    \        current_group = ''\n      end\n    end\n  end\n  return groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    paren_string\
    \ = paren_string:gsub('%s', '')\n    local groups = {}\n    local start_index\
    \ = 1\n    local end_index = 1\n    local open_parens = 0\n    local close_parens\
    \ = 0\n    while end_index <= #paren_string do\n        local cur_char = paren_string:sub(end_index,\
    \ end_index)\n        if cur_char == '(' then\n            open_parens = open_parens\
    \ + 1\n        elseif cur_char == ')' then\n            close_parens = close_parens\
    \ + 1\n        end\n        if open_parens == close_parens then\n            groups[#groups\
    \ + 1] = paren_string:sub(start_index, end_index)\n            start_index = end_index\
    \ + 1\n            open_parens = 0\n            close_parens = 0\n        end\n\
    \        end_index = end_index + 1\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ OPEN_PAREN = '('\n    local CLOSE_PAREN = ')'\n    local paren_table = {}\n\
    \    local current_paren_string = ''\n    local paren_stack = Stack:new()\n  \
    \  for character in paren_string:gmatch('%S') do\n        if character == OPEN_PAREN\
    \ then\n            paren_stack:push(character)\n        elseif character == CLOSE_PAREN\
    \ then\n            paren_stack:pop()\n        end\n        current_paren_string\
    \ = current_paren_string .. character\n        if paren_stack:is_empty() then\n\
    \            table.insert(paren_table, current_paren_string)\n            current_paren_string\
    \ = ''\n        end\n    end\n    return paren_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgh5r6ghr.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpgh5r6ghr.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpgh5r6ghr.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local open_count = 0\n  \
    \  for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_count = open_count + 1\n      \
    \  elseif char == ')' then\n            open_count = open_count - 1\n        end\n\
    \        if open_count > 0 then\n            paren_group = paren_group .. char\n\
    \        elseif open_count == 0 and paren_group ~= '' then\n            table.insert(paren_groups,\
    \ paren_group)\n            paren_group = ''\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmproc54e6e.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmproc54e6e.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local i = 1\n    local open_parens = 0\n    local close_parens\
    \ = 0\n    local group_start = 1\n    while i <= #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n        elseif c == ')' then\n            close_parens =\
    \ close_parens + 1\n        end\n        if open_parens == close_parens then\n\
    \            -- we have a complete group! add it to the list\n            table.insert(groups,\
    \ paren_string:sub(group_start, i))\n            group_start = i + 1\n       \
    \     open_parens = 0\n            close_parens = 0\n        end\n        i =\
    \ i + 1\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8fz_brw.lua:35:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\
    \t/tmp/tmpw8fz_brw.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    -- YOUR CODE HERE\n    -- Use a stack to keep track of the\
    \ number of \"(\" seen in the current group\n    -- Pop them off when a \")\"\
    \ is encountered\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfj3waj0i.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ seen = {}\n    local paren_string = paren_string:gsub('%s', '')\n    local i\
    \ = 1\n    local len = paren_string:len()\n    while i <= len do\n        local\
    \ j = paren_string:find('()', i)\n        if j then\n            table.insert(seen,\
    \ paren_string:sub(i, j))\n            i = j + 1\n        else\n            table.insert(seen,\
    \ paren_string:sub(i))\n            break\n        end\n    end\n    return seen\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppuu9wip3.lua:28:\
    \ expected: \n{\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: \n{\n\
    \    \"(\",\n    \"(\",\n    \")\",\n    \"(\",\n    \")\",\n    \")\",\n    \"\
    (\",\n    \"(\",\n    \"(\",\n    \")\",\n    \")\",\n    \")\",\n    \"(\",\n\
    \    \")\",\n    \"(\",\n    \"(\",\n    \"(\",\n    \")\",\n    \")\",\n    \"\
    (\",\n    \")\",\n    \"(\",\n    \")\",\n    \")\"\n}\nstack traceback:\n\t/tmp/tmppuu9wip3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ c, i, n = 0, 1, #paren_string\n  local groups = {}\n  while i <= n do\n    if\
    \ paren_string:sub(i, i) == '(' then\n      c = c + 1\n    elseif paren_string:sub(i,\
    \ i) == ')' then\n      c = c - 1\n    end\n    if c == 0 then\n      table.insert(groups,\
    \ paren_string:sub(1, i))\n      paren_string = paren_string:sub(i + 1)\n    \
    \  i, n = 1, #paren_string\n    else\n      i = i + 1\n    end\n  end\n  return\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgk9mvs0e.lua:30:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\
    \t/tmp/tmpgk9mvs0e.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the table of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_table = {}\n    local paren_count = 0\n    local current_group = {}\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    paren_count = paren_count + 1\n            table.insert(current_group, c)\n\
    \        elseif c == ')' then\n            paren_count = paren_count - 1\n   \
    \         table.insert(current_group, c)\n            if paren_count == 0 then\n\
    \                table.insert(paren_table, table.concat(current_group))\n    \
    \            current_group = {}\n            end\n        end\n    end\n    return\
    \ paren_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
