name: HumanEval_29_filter_by_prefix
language: lua
prompt: "-- Filter an input table of strings only for ones that start with a given\
  \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
  \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
  \ prefix)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal res = {}\n\tfor i, v in ipairs(strings) do\n\t\tif v:startswith(prefix)\
    \ then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend", "    local\
    \ result = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1, prefix:len())\
    \ == prefix then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:find('^' .. prefix) then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local new_table =\
    \ {}\n    for i, str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(new_table, str)\n        end\n    end\n    return\
    \ new_table\nend", "    local filtered = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "  local filtered\
    \ = {}\n  for _, str in ipairs(strings) do\n    if str:startswith(prefix) then\n\
    \      table.insert(filtered, str)\n    end\n  end\n  return filtered\nend", " \
    \   local filtered = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1,\
    \ #prefix) == prefix then\n            table.insert(filtered, str)\n        end\n\
    \    end\n    return filtered\nend", "  local result = {}\n  for i, elem in ipairs(strings)\
    \ do\n    if elem:sub(1, #prefix) == prefix then\n      table.insert(result, elem)\n\
    \    end\n  end\n  return result\nend", "    local filtered = {}\n    for _, s\
    \ in ipairs(strings) do\n        if s:starts_with(prefix) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "  local result = {}\n\
    \  for _,string in ipairs(strings) do\n    if string:sub(1, #prefix) == prefix\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end", "  local t = {}\n  for _, str in ipairs(strings) do\n    if string.sub(str,\
    \ 1, #prefix) == prefix then\n      table.insert(t, str)\n    end\n  end\n  return\
    \ t\nend", "\tlocal result = {}\n\tfor i,str in ipairs(strings) do\n\t\tif str:starts_with(prefix)\
    \ then\n\t\t\tresult[#result+1] = str\n\t\tend\n\tend\n\treturn result\nend",
  "\tlocal ret = {}\n\tfor i, str in ipairs(strings) do\n\t\tif starts_with(str, prefix)\
    \ then\n\t\t\ttable.insert(ret, str)\n\t\tend\n\tend\n\treturn ret\nend", "  local\
    \ result = {}\n  for _, str in ipairs(strings) do\n    if string.startswith(str,\
    \ prefix) then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for i, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "\treturn filter(strings, function(s)\
    \ return s:startswith(prefix) end)\nend", "  local result = {}\n  for _,s in ipairs(strings)\
    \ do\n    if string.startswith(s, prefix) then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "    local result = {}\n    for i, elem\
    \ in ipairs(strings) do\n        if (string.sub(elem, 1, string.len(prefix)) ==\
    \ prefix) then\n            table.insert(result, elem)\n        end\n    end\n\
    \    return result\nend", "  return table.filter(strings, function(s) return string.startswith(s,\
    \ prefix) end)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
