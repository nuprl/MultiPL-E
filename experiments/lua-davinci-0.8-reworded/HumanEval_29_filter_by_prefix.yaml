name: HumanEval_29_filter_by_prefix
language: lua
prompt: "-- Filter an input table of strings only for ones that start with a given\
  \ prefix.\n-- >>> filter_by_prefix({}, 'a')\n-- {}\n-- >>> filter_by_prefix({'abc',\
  \ 'bcd', 'cde', 'array'}, 'a')\n-- {'abc', 'array'}\nlocal function filter_by_prefix(strings,\
  \ prefix)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal res = {}\n\tfor i, v in ipairs(strings) do\n\t\tif v:startswith(prefix)\
    \ then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend", "    local\
    \ result = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1, prefix:len())\
    \ == prefix then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:find('^' .. prefix) then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local new_table =\
    \ {}\n    for i, str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(new_table, str)\n        end\n    end\n    return\
    \ new_table\nend", "    local filtered = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "  local filtered\
    \ = {}\n  for _, str in ipairs(strings) do\n    if str:startswith(prefix) then\n\
    \      table.insert(filtered, str)\n    end\n  end\n  return filtered\nend", " \
    \   local filtered = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1,\
    \ #prefix) == prefix then\n            table.insert(filtered, str)\n        end\n\
    \    end\n    return filtered\nend", "  local result = {}\n  for i, elem in ipairs(strings)\
    \ do\n    if elem:sub(1, #prefix) == prefix then\n      table.insert(result, elem)\n\
    \    end\n  end\n  return result\nend", "    local filtered = {}\n    for _, s\
    \ in ipairs(strings) do\n        if s:starts_with(prefix) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "  local result = {}\n\
    \  for _,string in ipairs(strings) do\n    if string:sub(1, #prefix) == prefix\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end", "  local t = {}\n  for _, str in ipairs(strings) do\n    if string.sub(str,\
    \ 1, #prefix) == prefix then\n      table.insert(t, str)\n    end\n  end\n  return\
    \ t\nend", "\tlocal result = {}\n\tfor i,str in ipairs(strings) do\n\t\tif str:starts_with(prefix)\
    \ then\n\t\t\tresult[#result+1] = str\n\t\tend\n\tend\n\treturn result\nend",
  "\tlocal ret = {}\n\tfor i, str in ipairs(strings) do\n\t\tif starts_with(str, prefix)\
    \ then\n\t\t\ttable.insert(ret, str)\n\t\tend\n\tend\n\treturn ret\nend", "  local\
    \ result = {}\n  for _, str in ipairs(strings) do\n    if string.startswith(str,\
    \ prefix) then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for i, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "\treturn filter(strings, function(s)\
    \ return s:startswith(prefix) end)\nend", "  local result = {}\n  for _,s in ipairs(strings)\
    \ do\n    if string.startswith(s, prefix) then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "    local result = {}\n    for i, elem\
    \ in ipairs(strings) do\n        if (string.sub(elem, 1, string.len(prefix)) ==\
    \ prefix) then\n            table.insert(result, elem)\n        end\n    end\n\
    \    return result\nend", "  return table.filter(strings, function(s) return string.startswith(s,\
    \ prefix) end)\nend", "\treturn map(\n\t\tfunction(s)\n\t\t\tif string.startswith(s,\
    \ prefix) then\n\t\t\t\treturn s\n\t\t\tend\n\t\tend,\n\t\tstrings\n\t)\nend",
  "    local result = {}\n    for _, str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(result, str)\n        end\n    end\n    return\
    \ result\nend", "    local matches = {}\n    for _, value in ipairs(strings) do\n\
    \        if value:startswith(prefix) then\n            table.insert(matches, value)\n\
    \        end\n    end\n    return matches\nend", "    local result = {}\n    for\
    \ i, string in ipairs(strings) do\n        if string:sub(1, prefix:len()) == prefix\
    \ then\n            table.insert(result, string)\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for _, v in ipairs(strings) do\n \
    \       if v:startswith(prefix) then\n            table.insert(result, v)\n  \
    \      end\n    end\n    return result\nend", "  local result = {}\n  for i =\
    \ 1, #strings do\n    if strings[i]:sub(1, #prefix) == prefix then\n      result[#result\
    \ + 1] = strings[i]\n    end\n  end\n  return result\nend", "    local result\
    \ = {}\n    for i = 1, #strings do\n        if string.sub(strings[i], 1, #prefix)\
    \ == prefix then\n            table.insert(result, strings[i])\n        end\n\
    \    end\n    return result\nend", "  local strings_prefixed = {}\n  for _, s\
    \ in ipairs(strings) do\n    if string.startswith(s, prefix) then\n      table.insert(strings_prefixed,\
    \ s)\n    end\n  end\n  return strings_prefixed\nend", "  local result = {}\n\
    \  for _,s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n  \
    \    table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ ret = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix)\
    \ == prefix then\n            table.insert(ret, str)\n        end\n    end\n \
    \   return ret\nend", "\tlocal ret = {}\n\tfor _, x in ipairs(strings) do\n\t\t\
    if x:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(ret, x)\n\t\tend\n\tend\n\
    \treturn ret\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n\
    \        if string.sub(s, 1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ i, s in ipairs(strings) do\n    if s:startswith(prefix) then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local filtered = {}\n    for\
    \ i, s in ipairs(strings) do\n        if string.find(s, '^' .. prefix) then\n\
    \            table.insert(filtered, s)\n        end\n    end\n    return filtered\n\
    end", "    local matches = {}\n    for i = 1, #strings do\n        if string.find(strings[i],\
    \ '^' .. prefix) then\n            table.insert(matches, strings[i])\n       \
    \ end\n    end\n    return matches\nend", "    local r = {}\n    for _, str in\
    \ ipairs(strings) do\n        if str:starts_with(prefix) then\n            table.insert(r,\
    \ str)\n        end\n    end\n    return r\nend", "\tlocal result = {}\n\tfor\
    \ _, s in ipairs(strings) do\n\t\tif s:sub(1, prefix:len()) == prefix then\n\t\
    \t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn result\nend", "    local\
    \ results = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix)\
    \ == prefix then\n            table.insert(results, str)\n        end\n    end\n\
    \    return results\nend", "\tlocal rv = {}\n\tfor i, v in ipairs(strings) do\n\
    \t\tif v:startswith(prefix) then\n\t\t\ttable.insert(rv, v)\n\t\tend\n\tend\n\t\
    return rv\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n\
    \        if s:startswith(prefix) then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend", "    assert(type(strings) == 'table',\
    \ \"Must provide a table of strings to filter.\")\n    assert(type(prefix) ==\
    \ 'string', \"Must provide a string to check for prefix.\")\n    local result\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string.sub(string,\
    \ 1, #prefix) == prefix then\n            table.insert(result, string)\n     \
    \   end\n    end\n    return result\nend", "  local r = {}\n  for k,v in pairs(strings)\
    \ do\n    if v:find('^' .. prefix) then\n      r[k] = v\n    end\n  end\n  return\
    \ r\nend", "  local filtered = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:sub(1, #prefix) == prefix then\n      table.insert(filtered, str)\n    end\n\
    \  end\n  return filtered\nend", "    local result = {}\n    for _, string in\
    \ ipairs(strings) do\n        if string:starts_with(prefix) then\n           \
    \ table.insert(result, string)\n        end\n    end\n    return result\nend",
  "    assert(type(strings) == 'table')\n    assert(type(prefix) == 'string')", " \
    \   local ret = {}\n    for _, s in ipairs(strings) do\n        if s:find('^'\
    \ .. prefix) then\n            table.insert(ret, s)\n        end\n    end\n  \
    \  return ret\nend", "    local t = {}\n    for _, v in ipairs(strings) do\n \
    \       if string.sub(v, 1, #prefix) == prefix then\n            table.insert(t,\
    \ v)\n        end\n    end\n    return t\nend", "    local result = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n  \
    \          table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "\tlocal out = {}\n\tlocal prefix_len = #prefix\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif s:sub(1, prefix_len) == prefix then\n\t\t\ttable.insert(out, s)\n\
    \t\tend\n\tend\n\treturn out\nend", "  local filtered = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:startswith(prefix) then\n      table.insert(filtered, str)\n\
    \    end\n  end\n  return filtered\nend", "  local result = {}\n  for i, s in\
    \ ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local prefixed = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:startswith(prefix) then\n         \
    \   table.insert(prefixed, s)\n        end\n    end\n    return prefixed\nend",
  "  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix)\
    \ == prefix then\n      filtered[#filtered + 1] = s\n    end\n  end\n  return\
    \ filtered\nend", "    local result = {}\n    for _,s in ipairs(strings) do\n\
    \        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "\tlocal output = {}\n\t\
    for i, str in ipairs(strings) do\n\t\tif str:sub(1, #prefix) == prefix then\n\t\
    \t\ttable.insert(output, str)\n\t\tend\n\tend\n\treturn output\nend", "\tlocal\
    \ strings_with_prefix = {}\n\tlocal strings_without_prefix = {}\n\tfor _, string\
    \ in ipairs(strings) do\n\t\tif string:find(prefix, 1, true) == 1 then\n\t\t\t\
    table.insert(strings_with_prefix, string)\n\t\telse\n\t\t\ttable.insert(strings_without_prefix,\
    \ string)\n\t\tend\n\tend\n\treturn strings_with_prefix, strings_without_prefix\n\
    end", "  local prefix_len = #prefix\n  local ret = {}\n  for _, k in ipairs(strings)\
    \ do\n    if k:sub(1, prefix_len) == prefix then\n      ret[#ret + 1] = k\n  \
    \  end\n  end\n  return ret\nend", "\tlocal pattern = '^' .. prefix\n\tlocal matched\
    \ = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:match(pattern) then\n\t\
    \t\ttable.insert(matched, str)\n\t\tend\n\tend\n\treturn matched\nend", "  if\
    \ not strings then return nil end\n  local result = {}\n  for k,v in pairs(strings)\
    \ do\n    if string.sub(v, 1, #prefix) == prefix then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "    local result = {}\n    for k,\
    \ v in pairs(strings) do\n        if string.sub(v, 1, #prefix) == prefix then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\t\
    return result\nend", "\tlocal ret = {}\n\tfor _, s in ipairs(strings) do\n\t\t\
    if s:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(ret, s)\n\t\tend\n\tend\n\
    \treturn ret\nend", "    local filtered = {}\n    for i, str in ipairs(strings)\
    \ do\n        if str:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend", "    local filtered =\
    \ {}\n    for _, s in ipairs(strings) do\n        if starts_with(s, prefix) then\n\
    \            table.insert(filtered, s)\n        end\n    end\n    return filtered\n\
    end", "  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(filtered, s)\n    end\n  end\n  return filtered\nend",
  "  return filter(function(str) return starts_with(str, prefix) end, strings)\nend",
  "    local r = {}\n    for _,str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(r, str)\n        end\n    end\n    return r\n\
    end", "\tassert(type(strings) == 'table')\n\tassert(type(prefix) == 'string')\n\
    \tlocal output = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:sub(1, #prefix)\
    \ == prefix then\n\t\t\ttable.insert(output, str)\n\t\tend\n\tend\n\treturn output\n\
    end", "  local result = {}\n  for _, k in ipairs(strings) do\n    if string.sub(k,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(result, k)\n    end\n\
    \  end\n  return result\nend", "    local filtered = {}\n    for _,s in ipairs(strings)\
    \ do\n        if string.sub(s, 1, string.len(prefix)) == prefix then\n       \
    \     table.insert(filtered, s)\n        end\n    end\n    return filtered\nend",
  "  local result = {}\n  for i, str in ipairs(strings) do\n    if str:sub(1, #prefix)\
    \ == prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end", "    local t = {}\n    for _, v in ipairs(strings) do\n        if v:find('^'\
    \ .. prefix) then\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend", "\tlocal out = {}\n\tfor _, s in ipairs(strings) do\n\t\tif str.startswith(s,\
    \ prefix) then\n\t\t\ttable.insert(out, s)\n\t\tend\n\tend\n\treturn out\nend",
  "\tlocal out = {}\n\tfor _, v in ipairs(strings) do\n\t\tif v:sub(1, #prefix) ==\
    \ prefix then\n\t\t\ttable.insert(out, v)\n\t\tend\n\tend\n\treturn out\nend",
  "    return set.filter(strings, function(string)\n        return string:startswith(prefix)\n\
    \    end)\nend", "  local result = {}\n  for _,s in ipairs(strings) do\n    if\
    \ s:starts_with(prefix) then\n      result[#result+1] = s\n    end\n  end\n  return\
    \ result\nend", "  local results = {}\n  for _, str in ipairs(strings) do\n  \
    \  if str:starts(prefix) then\n      table.insert(results, str)\n    end\n  end\n\
    \  return results\nend", "  local prefix_length = string.len(prefix)\n  local\
    \ output = {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, prefix_length)\
    \ == prefix then\n      table.insert(output, str)\n    end\n  end\n  return output\n\
    end", "    local filtered = {}\n    for _, s in ipairs(strings) do\n        if\
    \ s:find('^' .. prefix) then\n            table.insert(filtered, s)\n        end\n\
    \    end\n    return filtered\nend", "  local results = {}\n  for _, candidate\
    \ in ipairs(strings) do\n    if string.startswith(candidate, prefix) then\n  \
    \    table.insert(results, candidate)\n    end\n  end\n  return results\nend",
  "    local result = {}\n    for _, k in ipairs(strings) do\n        if k:startswith(prefix)\
    \ then\n            table.insert(result, k)\n        end\n    end\n    return\
    \ result\nend", "  local result = {}\n  for _, value in ipairs(strings) do\n \
    \   if vim.startswith(value, prefix) then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend", "  return lib.filter(strings, function(s)\
    \ return string.startswith(s, prefix) end)\nend", "    local ret = {}\n    for\
    \ _, v in ipairs(strings) do\n        if v:startswith(prefix) then\n         \
    \   table.insert(ret, v)\n        end\n    end\n    return ret\nend", "\tlocal\
    \ ret = {}\n\tfor _,str in ipairs(strings) do\n\t\tif str:sub(1, #prefix) == prefix\
    \ then\n\t\t\ttable.insert(ret, str)\n\t\tend\n\tend\n\treturn ret\nend", "  local\
    \ new_table = {}\n  for _,v in ipairs(strings) do\n    if v:find('^'..prefix)\
    \ then\n      table.insert(new_table, v)\n    end\n  end\n  return new_table\n\
    end", "    local filtered = {}\n    for _, item in ipairs(strings) do\n      \
    \  if item:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ item)\n        end\n    end\n    return filtered\nend", "    local filtered\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:startswith(prefix) then\n\
    \            table.insert(filtered, s)\n        end\n    end\n    return filtered\n\
    end", "\tlocal res = {}\n\tfor i,string in ipairs(strings) do\n\t\tif string:starts(prefix)\
    \ then\n\t\t\ttable.insert(res, string)\n\t\tend\n\tend\n\treturn res\nend", " \
    \ local new_strings = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix)\
    \ == prefix then\n      table.insert(new_strings, s)\n    end\n  end\n  return\
    \ new_strings\nend", "    local result = {}\n    for i, string in ipairs(strings)\
    \ do\n        if string.sub(string, 1, string.len(prefix)) == prefix then\n  \
    \          table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _,value in ipairs(strings) do\n    if string.sub(value,\
    \ 1, prefix:len()) == prefix then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend", "  return rspamd_util.filter_input(strings, function(s)\n\
    \    if type(s) == 'string' then\n      return s:sub(1, #prefix) == prefix\n \
    \   end\n    return false\n  end)\nend", "    local result = {}\n    for i, str\
    \ in ipairs(strings) do\n        if str:find('^' .. prefix) then\n           \
    \ table.insert(result, str)\n        end\n    end\n    return result\nend", "\t\
    local result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif string.sub(str,\
    \ 1, string.len(prefix)) == prefix then\n\t\t\ttable.insert(result, str)\n\t\t\
    end\n\tend\n\treturn result\nend", "  local filtered = {}\n  for _, string in\
    \ ipairs(strings) do\n    if string.startswith(string, prefix) then\n      table.insert(filtered,\
    \ string)\n    end\n  end\n  return filtered\nend", "    local t = {}\n    for\
    \ _, str in ipairs(strings) do\n        if string.sub(str, 1, #prefix) == prefix\
    \ then\n            table.insert(t, str)\n        end\n    end\n    return t\n\
    end", "  local match = {}\n  for _, s in ipairs(strings) do\n    if is_prefix(s,\
    \ prefix) then\n      table.insert(match, s)\n    end\n  end\n  return match\n\
    end", "    local filtered = {}\n    for _, str in ipairs(strings) do\n       \
    \ if str:starts_with(prefix) then\n            table.insert(filtered, str)\n \
    \       end\n    end\n    return filtered\nend", "    local results = {}\n   \
    \ for _, s in ipairs(strings) do\n        if string.sub(s, 1, #prefix) == prefix\
    \ then\n            table.insert(results, s)\n        end\n    end\n    return\
    \ results\nend", "    local matches = {}\n    for i, s in ipairs(strings) do\n\
    \        if s:starts_with(prefix) then\n            table.insert(matches, s)\n\
    \        end\n    end\n    return matches\nend", "  local result = {}\n  for _,\
    \ s in ipairs(strings) do\n    if s:startswith(prefix) then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "  if type(strings) ~= 'table' then\n\
    \    error('strings is not a table: ' .. tostring(strings))\n  end\n  if type(prefix)\
    \ ~= 'string' then\n    error('prefix is not a string: ' .. tostring(prefix))\n\
    \  end\n  local result = {}\n  for k, v in pairs(strings) do\n    if type(v) ==\
    \ 'string' and string.sub(v, 1, #prefix) == prefix then\n      result[k] = v\n\
    \    end\n  end\n  return result\nend", "  local filtered = {}\n  for i,string\
    \ in ipairs(strings) do\n    if string:sub(1,#prefix) == prefix then\n      table.insert(filtered,\
    \ string)\n    end\n  end\n  return filtered\nend", "    local result = {}\n \
    \   for _, str in ipairs(strings) do\n        if string.sub(str, 1, string.len(prefix))\
    \ == prefix then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "  local res = {}\n  for _, s in ipairs(strings) do\n\
    \    if s:starts_with(prefix) then\n      table.insert(res, s)\n    end\n  end\n\
    \  return res\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n\
    \        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local ret = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1,\
    \ #prefix) == prefix then\n            table.insert(ret, str)\n        end\n \
    \   end\n    return ret\nend", "    local result = {}\n    for k,v in pairs(strings)\
    \ do\n        if string.sub(v, 1, #prefix) == prefix then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _,str in ipairs(strings) do\n        if string.sub(str, 1, string.len(prefix))\
    \ == prefix then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "    local filtered = {}\n    for _, str in ipairs(strings)\
    \ do\n        if starts_with(str, prefix) then\n            filtered[#filtered\
    \ + 1] = str\n        end\n    end\n    return filtered\nend", "  if #strings\
    \ == 0 then\n    return {}\n  end\n  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if string.find(s, '^' .. prefix) then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "    local result = {}\n    for s in all(strings)\
    \ do\n        if starts_with(s, prefix) then\n            insert(result, s)\n\
    \        end\n    end\n    return result\nend", "  local result = {}\n  for string,\
    \ _ in pairs(strings) do\n    if string.startswith(string, prefix) then\n    \
    \  result[string] = true\n    end\n  end\n  return result\nend", "    local result\
    \ = {}\n    for _,v in ipairs(strings) do\n        if v:starts_with(prefix) then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "  local filtered = {}\n  for k,v in pairs(strings) do\n    if string.sub(v,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(filtered, v)\n   \
    \ end\n  end\n  return filtered\nend", "    assert(type(strings) == 'table', \"\
    expected a table\")\n    assert(type(prefix) == 'string', \"expected a string\"\
    )\n    local ret = {}\n    for _, v in ipairs(strings) do\n        if v:sub(1,\
    \ prefix:len()) == prefix then\n            table.insert(ret, v)\n        end\n\
    \    end\n    return ret\nend", "  local result = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:sub(1, #prefix) == prefix then\n      table.insert(result, str)\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for k, v in pairs(strings)\
    \ do\n    if v:sub(1, #prefix) == prefix then\n      result[k] = v\n    end\n\
    \  end\n  return result\nend", "    local filtered = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "    local filtered = {}\n\
    \    for _,s in ipairs(strings) do\n        if s:find('^' .. prefix) then\n  \
    \          table.insert(filtered, s)\n        end\n    end\n    return filtered\n\
    end", "  local result = {}\n  for i, v in ipairs(strings) do\n    if v:sub(1,\
    \ prefix:len()) == prefix then\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend", "    local result = {}\n    for k, v in pairs(strings)\
    \ do\n        if v:sub(1, prefix:len()) == prefix then\n            result[k]\
    \ = v\n        end\n    end\n    return result\nend", "    local prefix_length\
    \ = #prefix\n    local result = {}\n    for _, s in ipairs(strings) do\n     \
    \   if s:sub(1, prefix_length) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local filtered = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            filtered[#filtered + 1] = s\n        end\n    end\n    return filtered\n\
    end", "  local results = {}\n  for i, v in ipairs(strings) do\n    if str_starts_with(v,\
    \ prefix) then\n      table.insert(results, v)\n    end\n  end\n  return results\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ string.sub(str, 1, string.len(prefix)) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, v in ipairs(strings) do\n        if string.sub(v, 1, #prefix) == prefix\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "\tlocal matches = {}\n\tfor _, v in ipairs(strings) do\n\t\t\
    if v:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(matches, v)\n\t\tend\n\
    \tend\n\treturn matches\nend", "    local result = {}\n    for k, v in pairs(strings)\
    \ do\n        if (type(v) == 'string' and string.sub(v, 1, string.len(prefix))\
    \ == prefix) then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend", "\tlocal results = {}\n\tfor _, string in ipairs(strings)\
    \ do\n\t\tif string:startswith(prefix) then\n\t\t\tresults[#results + 1] = string\n\
    \t\tend\n\tend\n\treturn results\nend", "\tlocal output = {}\n\tfor _, str in\
    \ ipairs(strings) do\n\t\tif string.sub(str, 1, string.len(prefix)) == prefix\
    \ then\n\t\t\ttable.insert(output, str)\n\t\tend\n\tend\n\treturn output\nend",
  "\tlocal result = {}\n\tfor _, v in ipairs(strings) do\n\t\tif string.sub(v, 1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    local prefix_len = prefix:len()\n    local filtered = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:sub(1, prefix_len) == prefix\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "  local rtn = {}\n  for i = 1, #strings do\n    if vim.startswith(strings[i],\
    \ prefix) then\n      rtn[#rtn + 1] = strings[i]\n    end\n  end\n  return rtn\n\
    end", "  local result = {}\n  for k,v in pairs(strings) do\n    if v:starts(prefix)\
    \ then\n      result[k] = v\n    end\n  end\n  return result\nend", "  local result\
    \ = {}\n  for _, line in ipairs(strings) do\n    if line:sub(1, #prefix) == prefix\
    \ then\n      table.insert(result, line)\n    end\n  end\n  return result\nend",
  "    local ret = {}\n    for _, v in ipairs(strings) do\n        if string.sub(v,\
    \ 1, #prefix) == prefix then\n            table.insert(ret, v)\n        end\n\
    \    end\n    return ret\nend", "    local result = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.sub(string, 1, #prefix) == prefix then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend", "  local matches = {}\n\
    \  for _, name in ipairs(strings) do\n    if name:starts_with(prefix) then\n \
    \     table.insert(matches, name)\n    end\n  end\n  return matches\nend", " \
    \   local result = {}\n    for _, str in ipairs(strings) do\n        if starts_with(str,\
    \ prefix) then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "\tlocal result = {}\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif s:startswith(prefix) then\n\t\t\tresult[#result + 1] = s\n\t\tend\n\
    \tend\n\treturn result\nend", "  local length = prefix:len()\n  local filtered\
    \ = {}\n  for _,str in ipairs(strings) do\n    if str:sub(1, length) == prefix\
    \ then\n      table.insert(filtered, str)\n    end\n  end\n  return filtered\n\
    end", "\tlocal result = {}\n\tfor _, v in ipairs(strings) do\n\t\tif string.startswith(v,\
    \ prefix) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\n\
    end", "    local prefix_len = #prefix\n    local matching = {}\n    for _, v in\
    \ ipairs(strings) do\n        if v:sub(1, prefix_len) == prefix then\n       \
    \     table.insert(matching, v)\n        end\n    end\n    return matching\nend",
  "  local filtered = {}\n  for _, s in ipairs(strings) do\n    if (string.sub(s,\
    \ 1, string.len(prefix)) == prefix) then\n      table.insert(filtered, s)\n  \
    \  end\n  end\n  return filtered\nend", "  local result = {}\n  for _, string\
    \ in ipairs(strings) do\n    if string:startswith(prefix) then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "    local rv = {}\n    for\
    \ _,s in ipairs(strings) do\n        if string.sub(s, 1, #prefix) == prefix then\n\
    \            table.insert(rv, s)\n        end\n    end\n    return rv\nend", " \
    \ local results = {}\n  for _,string in ipairs(strings) do\n    if string:sub(1,\
    \ #prefix) == prefix then\n      table.insert(results, string)\n    end\n  end\n\
    \  return results\nend", "    local result = {}\n    for i, string in ipairs(strings)\
    \ do\n        if string.sub(string, 1, string.len(prefix)) == prefix then\n  \
    \          table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for _, str in ipairs(strings) do\n    if str:startswith(prefix)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend",
  "  local result = {}\n  for _, v in ipairs(strings) do\n    if string.sub(v, 1,\
    \ string.len(prefix)) == prefix then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "\tlocal prefix_len = prefix:len()\n\tlocal filtered\
    \ = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:sub(1, prefix_len) == prefix\
    \ then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\treturn filtered\nend",
  "  local prefix_len = #prefix\n  local matches = {}\n  for i = 1, #strings do\n\
    \    local string = strings[i]\n    if prefix == string:sub(1, prefix_len) then\n\
    \      matches[#matches + 1] = string\n    end\n  end\n  return matches\nend",
  "\tlocal filtered = {}\n\tfor _, s in ipairs(strings) do\n\t\tif string.startswith(s,\
    \ prefix) then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\treturn filtered\n\
    end", "    local result = {}\n    for _, entry in ipairs(strings) do\n       \
    \ if entry:find('^' .. prefix) then\n            table.insert(result, entry)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #strings do\n        if strings[i]:starts_with(prefix) then\n       \
    \     table.insert(result, strings[i])\n        end\n    end\n    return result\n\
    end", "\tlocal result = {}\n\tfor _,name in ipairs(strings) do\n\t\tif string.sub(name,\
    \ 1, #prefix) == prefix then\n\t\t\ttable.insert(result, name)\n\t\tend\n\tend\n\
    \treturn result\nend", "    local filtered = {}\n    for i, string in ipairs(strings)\
    \ do\n        if string:startswith(prefix) then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "\treturn table.filter(strings,\
    \ function(str)\n\t\treturn string.sub(str, 1, string.len(prefix)) == prefix\n\
    \tend)\nend", "\tlocal result = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "  local output = {}\n  for _,value in ipairs(strings) do\n  \
    \  if value:startswith(prefix) then\n      table.insert(output, value)\n    end\n\
    \  end\n  return output\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:startswith(prefix) then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "\tlocal output = {}\n\t\
    for _, value in ipairs(strings) do\n\t\tif value:sub(1, #prefix) == prefix then\n\
    \t\t\ttable.insert(output, value)\n\t\tend\n\tend\n\treturn output\nend", "  assert(prefix,\
    \ 'required prefix')\n  local filtered = {}\n  for _, str in ipairs(strings) do\n\
    \    if str:sub(1, #prefix) == prefix then\n      table.insert(filtered, str)\n\
    \    end\n  end\n  return filtered\nend", "\tlocal result = {}\n\tfor _,string\
    \ in ipairs(strings) do\n\t\tif string.sub(string, 1, #prefix) == prefix then\n\
    \t\t\ttable.insert(result, string)\n\t\tend\n\tend\n\treturn result\nend", " \
    \ local count = #strings\n  local result = {}\n  for index = 1, count do\n   \
    \ local name = strings[index]\n    if string.sub(name, 1, #prefix) == prefix then\n\
    \      result[#result + 1] = name\n    end\n  end\n  return result\nend", "  \
    \  local out = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1,\
    \ #prefix) == prefix then\n            table.insert(out, str)\n        end\n \
    \   end\n    return out\nend", "  local result = {}\n  for _, v in ipairs(strings)\
    \ do\n    if vim.startswith(v, prefix) then\n      table.insert(result, v)\n \
    \   end\n  end\n  return result\nend", "    return hs.fnutils.filter(strings,\
    \ function(s) return s:match(prefix) end)\nend", "    local result = {}\n    for\
    \ _, str in ipairs(strings) do\n        if str:startswith(prefix) then\n     \
    \       table.insert(result, str)\n        end\n    end\n    return result\nend",
  "  local filtered = {}\n  for i = 1, #strings do\n    if string.sub(strings[i],\
    \ 1, #prefix) == prefix then\n      table.insert(filtered, strings[i])\n    end\n\
    \  end\n  return filtered\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if prefix == '' or s:startswith(prefix) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local array = {}\n  for\
    \ i, s in ipairs(strings) do\n    if string.sub(s, 1, string.len(prefix)) == prefix\
    \ then\n      table.insert(array, s)\n    end\n  end\n  return array\nend", "\t\
    local matched = {}\n\tfor _, v in ipairs(strings) do\n\t\tif v:startswith(prefix)\
    \ then\n\t\t\ttable.insert(matched, v)\n\t\tend\n\tend\n\treturn matched\nend",
  "  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix)\
    \ == prefix then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:starts(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for _,str in ipairs(strings) do\n\
    \        if str:startswith(prefix) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "  local r = {}\n  for k, v in\
    \ pairs(strings) do\n    if v:sub(1, #prefix) == prefix then\n      r[k] = v\n\
    \    end\n  end\n  return r\nend", "  local result = {}\n  for i, s in ipairs(strings)\
    \ do\n    if string.sub(s, 1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "  local result = {}\n  for _, s\
    \ in ipairs(strings) do\n    if starts_with(s, prefix) then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local copy = {}\n    for _,\
    \ s in ipairs(strings) do\n        if s:starts_with(prefix) then\n           \
    \ table.insert(copy, s)\n        end\n    end\n    return copy\nend", "  local\
    \ result = {}\n  for _, string in ipairs(strings) do\n    if string:sub(1, #prefix)\
    \ == prefix then\n      table.insert(result, string)\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for _, item in ipairs(strings) do\n  \
    \  if startswith(item, prefix) then\n      table.insert(result, item)\n    end\n\
    \  end\n  return result\nend", "  local output = {}\n  for _,s in ipairs(strings)\
    \ do\n    if starts_with(s, prefix) then\n      table.insert(output, s)\n    end\n\
    \  end\n  return output\nend", "  assert(type(strings) == 'table', \"Expected\
    \ a table of strings, got \" .. type(strings))\n  assert(type(prefix) == 'string',\
    \ \"Expected a string, got \" .. type(prefix))\n  assert(prefix:len() == 1, \"\
    Expected a string of length 1, got \" .. prefix:len())", "\tassert(type(strings)\
    \ == 'table', 'filter_by_prefix: strings')\n\tassert(type(prefix) == 'string',\
    \ 'filter_by_prefix: prefix')\n\tlocal results = {}\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif str:starts_with(prefix) then\n\t\t\ttable.insert(results, str)\n\t\
    \tend\n\tend\n\treturn results\nend", "  local out = {}\n  for _, v in ipairs(strings)\
    \ do\n    if string.match(v, '^' .. prefix) then\n      table.insert(out, v)\n\
    \    end\n  end\n  return out\nend", "    local results = {}\n    for k, v in\
    \ pairs(strings) do\n        if v:sub(1, #prefix) == prefix then\n           \
    \ results[k] = v\n        end\n    end\n    return results\nend", "  local result\
    \ = {}\n  for i = 1, #strings do\n    if strings[i]:sub(1, #prefix) == prefix\
    \ then\n      result[#result + 1] = strings[i]\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, str in ipairs(strings) do\n    if string.sub(str,\
    \ 1, #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if (string.sub(str, 1, string.len(prefix)) == prefix) then\n   \
    \         table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, v in ipairs(strings) do\n        if util.str_startswith(v,\
    \ prefix) then\n            table.insert(result, v)\n        end\n    end\n  \
    \  return result\nend", "\tlocal result = {}\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif str:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(result, str)\n\
    \t\tend\n\tend\n\treturn result\nend", "  local result = {}\n  for _, string in\
    \ ipairs(strings) do\n    if string:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "  local results = {}\n  for\
    \ _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(results,\
    \ s)\n    end\n  end\n  return results\nend", "  local result = {}\n  for _, string\
    \ in ipairs(strings) do\n    if string:sub(1, #prefix) == prefix then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "  assert(type(strings) == 'table')\n\
    \  assert(type(prefix) == 'string')\n  local ret = {}\n  for _, s in ipairs(strings)\
    \ do\n    if (s:sub(1, #prefix) == prefix) then\n      table.insert(ret, s)\n\
    \    end\n  end\n  return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
