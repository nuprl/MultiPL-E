name: HumanEval_68_pluck
language: lua
prompt: "-- \"Given a table representing a branch of a tree that has non-negative\
  \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n-- The\
  \ plucked node should be the node with the smallest even value.\n-- If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n-- The plucked node should be returned in a table, [ smalest_value, its\
  \ index ],\n-- If there are no even values or the given table is empty, return [].\n\
  -- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n-- Example 2:\n-- >>> pluck({1, 2,\
  \ 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example 4:\n-- >>> pluck({5,\
  \ 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n-- so we will choose the first zero, which has the smallest index.\n\
  -- Constraints:\n-- * 1 <= nodes.length <= 10000\n-- * 0 <= node.value\nlocal function\
  \ pluck(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
  \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
  \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0,\
  \ 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
  \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    -- your code here\n    local min = nil\n    local idx = nil\n \
    \   for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not\
    \ min or v < min then\n                min = v\n                idx = i\n    \
    \        end\n        end\n    end\n    if min then\n        return {min, idx}\n\
    \    else\n        return {}\n    end\nend", "\tlocal minVal = math.huge\n\tlocal\
    \ minIndex = math.huge\n\tfor i = 1, #arr do\n\t\tif (arr[i] < minVal) and (arr[i]\
    \ % 2 == 0) then\n\t\t\tminVal = arr[i]\n\t\t\tminIndex = i\n\t\tend\n\tend\n\t\
    if minVal ~= math.huge then\n\t\treturn {minVal, minIndex}\n\telse\n\t\treturn\
    \ {}\n\tend\nend", "  local function filt(node)\n    return node % 2 == 0\n  end\n\
    \  local function min(a, b)\n    return a < b and a or b\n  end\n  local function\
    \ argmin(arr)\n    local best, best_idx = math.huge, 0\n    for i = 1, #arr do\n\
    \      if arr[i] < best then\n        best = arr[i]\n        best_idx = i\n  \
    \    end\n    end\n    return best, best_idx\n  end\n  local evens = {}\n  for\
    \ i = 1, #arr do\n    if filt(arr[i]) then\n      table.insert(evens, arr[i])\n\
    \    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n  local best, best_idx\
    \ = argmin(evens)\n  return {best, best_idx}\nend", "  local t = {}\n  local min\
    \ = math.huge\n  local minindex = math.huge\n  for i = 1, #arr do\n    if arr[i]\
    \ % 2 == 0 then\n      if arr[i] < min then\n        min = arr[i]\n        minindex\
    \ = i\n      elseif arr[i] == min then\n        if i < minindex then\n       \
    \   minindex = i\n        end\n      end\n    end\n  end\n  if min ~= math.huge\
    \ then\n    t[1] = min\n    t[2] = minindex\n  end\n  return t\nend", "  local\
    \ s = {}\n  for i, v in ipairs(arr) do\n    if v%2 == 0 then\n      table.insert(s,\
    \ {v, i})\n    end\n  end\n  table.sort(s, function(a, b) return a[1] < b[1] end)\n\
    \  if #s > 0 then\n    return s[1]\n  else\n    return {}\n  end\nend", "    local\
    \ smallest, smallest_index\n    for index, val in ipairs(arr) do\n        if val\
    \ % 2 == 0 then\n            if not smallest or val < smallest then\n        \
    \        smallest = val\n                smallest_index = index\n            end\n\
    \        end\n    end\n    return smallest and {smallest, smallest_index} or {}\n\
    end", "  local smallest_even_value = math.huge\n  local smallest_even_value_index\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < smallest_even_value\
    \ then\n      smallest_even_value = v\n      smallest_even_value_index = i\n \
    \   end\n  end\n  if smallest_even_value ~= math.huge then\n    return {smallest_even_value,\
    \ smallest_even_value_index}\n  else\n    return {}\n  end\nend", "  local min\
    \ = -1\n  local index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ (min == -1 or v < min) then\n      min = v\n      index = i\n    end\n  end\n\
    \  if min == -1 then\n    return {}\n  else\n    return {min, index}\n  end\n\
    end", "  local smallest_value = math.huge\n  local smallest_index = math.huge\n\
    \  local smallest_even_value = math.huge\n  local smallest_even_index = math.huge\n\
    \  for index, value in ipairs(arr) do\n    if value < smallest_value then\n  \
    \    smallest_value = value\n      smallest_index = index\n    end\n    if value\
    \ % 2 == 0 and value < smallest_even_value then\n      smallest_even_value = value\n\
    \      smallest_even_index = index\n    end\n  end\n  if smallest_even_value ==\
    \ math.huge then\n    return {}\n  end\n  return { smallest_even_value, smallest_even_index\
    \ }\nend", "  local e = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      e[#e + 1] = {v, i}\n    end\n  end\n  table.sort(e, function(a, b) return\
    \ a[1] < b[1] end)\n  return e[1] or {}\nend", "  local minElem = 10001\n  local\
    \ minIndex = 10001\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < minElem\
    \ then\n      minElem = v\n      minIndex = i\n    end\n  end\n  if minElem ==\
    \ 10001 then\n    return {}\n  end\n  return {minElem, minIndex}\nend", "  local\
    \ smallest_index, smallest_value = nil, nil\n  for i, val in ipairs(arr) do\n\
    \    if val % 2 == 0 then\n      if smallest_value == nil or val < smallest_value\
    \ then\n        smallest_index, smallest_value = i, val\n      end\n    end\n\
    \  end\n  return smallest_index and {smallest_value, smallest_index} or {}\nend",
  "  local smallest = nil\n  local smallestIndex = nil\n  for k, v in ipairs(arr)\
    \ do\n    if v > 0 and v % 2 == 0 then\n      if smallest == nil or v < smallest\
    \ then\n        smallest = v\n        smallestIndex = k\n      end\n    end\n\
    \  end\n  if smallest == nil then\n    return {}\n  end\n  return {smallest, smallestIndex}\n\
    end", "    local found, val, idx = false, nil, 0\n    for i = 1, #arr do\n   \
    \     if arr[i] % 2 == 0 then\n            if not found then\n               \
    \ found, val, idx = true, arr[i], i\n            elseif arr[i] < val then\n  \
    \              val, idx = arr[i], i\n            end\n        end\n    end\n \
    \   return found and {val, idx} or {}\nend", "    local min = nil\n    local minI\
    \ = nil\n    for i,n in ipairs(arr) do\n        if n % 2 == 0 then\n         \
    \   if min == nil or n < min then\n                min = n\n                minI\
    \ = i\n            end\n        end\n    end\n    if min == nil then\n       \
    \ return {}\n    else\n        return {min, minI}\n    end\nend", "  local min,\
    \ idx = math.huge, 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min, idx = v, i\n    end\n  end\n  return min ~= math.huge and\
    \ {min, idx} or {}\nend", "  if not arr or #arr == 0 then return {} end\n  local\
    \ min, minIndex = math.huge, math.huge\n  for i, node in ipairs(arr) do\n    if\
    \ node % 2 == 0 and node < min then\n      min, minIndex = node, i\n    end\n\
    \  end\n  if min == math.huge then return {} end\n  return {min, minIndex}\nend",
  "    local evens = {}\n    local smallest = {}\n    local smallestEvenValue = nil\n\
    \    for i,v in ipairs(arr) do\n        if v % 2 == 0 then\n            evens[#evens+1]\
    \ = {i, v}\n            if smallestEvenValue == nil or v < smallestEvenValue then\n\
    \                smallestEvenValue = v\n                smallest = {i, v}\n  \
    \          end\n        end\n    end\n    return smallest\nend", "\tlocal min,\
    \ minIndex;\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\t\t\tif not\
    \ min or v < min then\n\t\t\t\tmin = v;\n\t\t\t\tminIndex = i;\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn min and {min, minIndex} or {};\nend", "  if #arr == 0 then\
    \ return {} end\n  local min, m_idx = nil, nil\n  for i, v in ipairs(arr) do\n\
    \    if (v % 2 == 0) and (min == nil or v < min) then\n      min, m_idx = v, i\n\
    \    end\n  end\n  return min and {min, m_idx} or {}\nend", "  local smallest_value\n\
    \  local smallest_index\n  for i, value in ipairs(arr) do\n    if value % 2 ==\
    \ 0 then\n      if smallest_value == nil or value < smallest_value then\n    \
    \    smallest_value = value\n        smallest_index = i\n      end\n    end\n\
    \  end\n  if smallest_value == nil then\n    return {}\n  else\n    return {smallest_value,\
    \ smallest_index}\n  end\nend", "  local smallestEvenValue = math.huge\n  local\
    \ smallestEvenValueIndex = math.huge\n  for i = 1, #arr do\n    if arr[i] % 2\
    \ == 0 and arr[i] < smallestEvenValue then\n      smallestEvenValue = arr[i]\n\
    \      smallestEvenValueIndex = i\n    end\n  end\n  if smallestEvenValue == math.huge\
    \ then\n    return {}\n  end\n  return {smallestEvenValue, smallestEvenValueIndex}\n\
    end", "  if #arr == 0 then return {} end\n  local min_even_idx = -1\n  local min_even_val\
    \ = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if min_even_idx\
    \ == -1 or v < min_even_val then\n        min_even_idx = i\n        min_even_val\
    \ = v\n      end\n    end\n  end\n  if min_even_idx == -1 then return {} end\n\
    \  return {min_even_val, min_even_idx}\nend", "  local smallest_value, smallest_index\n\
    \  for i,v in ipairs(arr) do\n    if v % 2 == 0 then\n      if smallest_value\
    \ == nil or v < smallest_value then\n        smallest_value = v\n        smallest_index\
    \ = i\n      end\n    end\n  end\n  if smallest_value then\n    return {smallest_value,\
    \ smallest_index}\n  else\n    return {}\n  end\nend", "  local even_value = nil\n\
    \  local even_index = nil\n  for index, value in ipairs(arr) do\n    if value\
    \ % 2 == 0 then\n      if even_value == nil or value < even_value then\n     \
    \   even_value = value\n        even_index = index\n      end\n    end\n  end\n\
    \  if even_value == nil then\n    return {}\n  else\n    return {even_value, even_index}\n\
    \  end\nend", "\tlocal even = {}\n\tlocal odd = {}\n\tlocal min = nil\n\tlocal\
    \ index = nil\n\tfor i = 1, #arr do\n\t\tif (arr[i] % 2 == 0) then\n\t\t\tif (min\
    \ == nil) then\n\t\t\t\tmin = arr[i]\n\t\t\t\tindex = i\n\t\t\telseif (arr[i]\
    \ < min) then\n\t\t\t\tmin = arr[i]\n\t\t\t\tindex = i\n\t\t\tend\n\t\tend\n\t\
    end\n\tif (min == nil) then\n\t\treturn {}\n\telse\n\t\treturn {min, index}\n\t\
    end\nend", "    -- your code here\nend", "    local idx = 0\n    local val = 0\n\
    \    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if idx ==\
    \ 0 then\n                idx = i\n                val = arr[i]\n            elseif\
    \ arr[i] < val then\n                idx = i\n                val = arr[i]\n \
    \           end\n        end\n    end\n    if idx > 0 then\n        return { val,\
    \ idx }\n    else\n        return {}\n    end\nend", "\tlocal min_even_index,\
    \ min_even_value = nil, nil\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\
    \t\t\tif min_even_value == nil or v < min_even_value then\n\t\t\t\tmin_even_value\
    \ = v\n\t\t\t\tmin_even_index = i\n\t\t\tend\n\t\tend\n\tend\n\tif min_even_index\
    \ == nil then\n\t\treturn {}\n\telse\n\t\treturn {min_even_value, min_even_index}\n\
    \tend\nend", "  -- TODO: your code here\nend", "    local r\n    for i,v in ipairs(arr)\
    \ do\n        if not r and v % 2 == 0 then\n            r = {v, i}\n        elseif\
    \ r and v % 2 == 0 and v < r[1] then\n            r = {v, i}\n        end\n  \
    \  end\n    return r or {}\nend", "    local val, idx\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            if not val or v < val then\n   \
    \             val = v\n                idx = i\n            end\n        end\n\
    \    end\n    return {val, idx}\nend", "    -- body\n    local min = {}\n    for\
    \ i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if #min == 0 then\n\
    \                min = {arr[i], i}\n            elseif arr[i] < min[1] then\n\
    \                min = {arr[i], i}\n            end\n        end\n    end\n  \
    \  return min\nend", "    local min = math.huge\n    local minIdx = 0\n    for\
    \ idx, val in ipairs(arr) do\n        if val % 2 == 0 and val < min then\n   \
    \         min = val\n            minIdx = idx\n        end\n    end\n    if min\
    \ == math.huge then\n        return {}\n    end\n    return {min, minIdx}\nend",
  "  local smallest = { math.huge, -1 }\n  for i = 1, #arr do\n    if arr[i] % 2 ==\
    \ 0 and arr[i] < smallest[1] then\n      smallest = { arr[i], i }\n    end\n \
    \ end\n  return smallest[2] > 0 and smallest or {}\nend", "    -- solve here\n\
    \    --\n    local len = #arr\n    if len == 0 then\n        return {}\n    end\n\
    \    local min, index\n    local i = 1\n    while i <= len do\n        if arr[i]\
    \ % 2 == 0 then\n            if not min or arr[i] < min then\n               \
    \ min = arr[i]\n                index = i\n            end\n        end\n    \
    \    i = i + 1\n    end\n    if min then\n        return {min, index}\n    else\n\
    \        return {}\n    end\nend", "  local min = 2^31\n  local pos = 2^31\n \
    \ for i, n in ipairs(arr) do\n    if n > 0 and n % 2 == 0 and n < min then\n \
    \     min = n\n      pos = i\n    end\n  end\n  if min == 2^31 then\n    return\
    \ {}\n  end\n  return {min, pos}\nend", "  local smallestEven = nil\n  local smallestEvenIndex\
    \ = 0\n  for i, elem in ipairs(arr) do\n    if elem % 2 == 0 then\n      if smallestEven\
    \ == nil then\n        smallestEven = elem\n        smallestEvenIndex = i\n  \
    \    elseif elem < smallestEven then\n        smallestEven = elem\n        smallestEvenIndex\
    \ = i\n      end\n    end\n  end\n  if smallestEven == nil then\n    return {}\n\
    \  else\n    return {smallestEven, smallestEvenIndex}\n  end\nend", "    local\
    \ min_index, min_val, even_found\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 then\n            if not even_found or v < min_val then\n         \
    \       min_index, min_val = i, v\n                even_found = true\n       \
    \     end\n        end\n    end\n    return even_found and {min_val, min_index}\
    \ or {}\nend", "  local idx = 2\n  local smallest = arr[1]\n  local pos\n  if\
    \ smallest and smallest % 2 == 0 then\n    pos = 1\n  end\n  while idx <= #arr\
    \ do\n    local x = arr[idx]\n    if x % 2 == 0 and (not smallest or x < smallest)\
    \ then\n      smallest = x\n      pos = idx\n    end\n    idx = idx + 1\n  end\n\
    \  if smallest then\n    return { smallest, pos }\n  end\n  return {}\nend", " \
    \ local even_numbers = {}\n  local indexes = {}\n  for i, e in ipairs(arr) do\n\
    \    if e % 2 == 0 then\n      if #even_numbers == 0 then\n        table.insert(even_numbers,\
    \ e)\n        table.insert(indexes, i)\n      else\n        local min = even_numbers[1]\n\
    \        local index = indexes[1]\n        if e < min then\n          even_numbers\
    \ = {e}\n          indexes = {i}\n        elseif e == min then\n          table.insert(even_numbers,\
    \ e)\n          table.insert(indexes, i)\n        end\n      end\n    end\n  end\n\
    \  if #even_numbers == 0 then\n    return {}\n  else\n    local min = even_numbers[1]\n\
    \    local index = indexes[1]\n    for i, e in ipairs(even_numbers) do\n     \
    \ if indexes[i] < index then\n        min = e\n        index = indexes[i]\n  \
    \    end\n    end\n    return {min, index}\n  end\nend", "  local smallest, smallest_index\n\
    \  for index, value in ipairs(arr) do\n    if value % 2 == 0 then\n      if smallest\
    \ == nil or value < smallest then\n        smallest = value\n        smallest_index\
    \ = index\n      end\n    end\n  end\n  if smallest == nil then\n    return {}\n\
    \  else\n    return {smallest, smallest_index}\n  end\nend", "    if #arr == 0\
    \ then\n        return {}\n    end\n    local min = nil\n    local index = nil\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if min\
    \ == nil or v < min then\n                min = v\n                index = i\n\
    \            end\n        end\n    end\n    if min == nil then\n        return\
    \ {}\n    end\n    return {min, index}\nend", "    -- your code here\n    if arr\
    \ == nil or #arr == 0 then\n        return {}\n    end\n    local min_even = math.huge\n\
    \    local min_even_idx = 0\n    for idx, val in ipairs(arr) do\n        if (val\
    \ % 2 == 0) and (val < min_even) then\n            min_even = val\n          \
    \  min_even_idx = idx\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    end\n    return {min_even, min_even_idx}\nend", "  local\
    \ even = false\n  local even_index = 0\n  local smallest_even = 0\n  for i, v\
    \ in ipairs(arr) do\n    if v % 2 == 0 then\n      even = true\n      if smallest_even\
    \ == 0 then\n        smallest_even = v\n        even_index = i\n      elseif v\
    \ < smallest_even then\n        smallest_even = v\n        even_index = i\n  \
    \    end\n    end\n  end\n  if even then\n    return {smallest_even, even_index}\n\
    \  else\n    return {}\n  end\nend", "    local index, value = nil, math.huge\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < value then\n  \
    \          index, value = i, v\n        end\n    end\n    return {value, index}\n\
    end", "  local smallest, smallest_index\n  for i, v in ipairs(arr) do\n    if\
    \ v % 2 == 0 then\n      if not smallest or v < smallest then\n        smallest\
    \ = v\n        smallest_index = i\n      end\n    end\n  end\n  return smallest\
    \ and {smallest, smallest_index} or {}\nend", "  if #arr == 0 then return {} end\n\
    \  local smallest_even_value\n  local result\n  for k,v in ipairs(arr) do\n  \
    \  if v % 2 == 0 then\n      if not smallest_even_value or v < smallest_even_value\
    \ then\n        smallest_even_value = v\n        result = {v, k}\n      end\n\
    \    end\n  end\n  return result or {}\nend", "  local evens = {}\n  local evens_idx\
    \ = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      evens[#evens\
    \ + 1] = v\n      evens_idx[#evens_idx + 1] = i\n    end\n  end\n  if #evens ==\
    \ 0 then\n    return {}\n  end\n  local smallest = evens[1]\n  local smallest_idx\
    \ = evens_idx[1]\n  for i, v in ipairs(evens) do\n    if v < smallest then\n \
    \     smallest = v\n      smallest_idx = evens_idx[i]\n    end\n  end\n  return\
    \ {smallest, smallest_idx}\nend", "  if #arr == 0 then return {} end\n  local\
    \ min = math.min(table.unpack(arr))\n  while min % 2 ~= 0 do\n    table.remove(arr,\
    \ min)\n    min = math.min(table.unpack(arr))\n  end\n  return {min, table.indexOf(arr,\
    \ min)}\nend", end, "  local min = math.huge\n  local minidx = math.huge\n  for\
    \ i,v in ipairs(arr) do\n    if (v % 2 == 0) and (v < min) then\n      min = v\n\
    \      minidx = i\n    end\n  end\n  if min == math.huge then\n    return {}\n\
    \  else\n    return {min, minidx}\n  end\nend", "    local output = {}\n    local\
    \ even = {}\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n    \
    \        table.insert(even, v)\n        end\n    end\n    if #even == 0 then\n\
    \        return {}\n    end\n    local min = even[1]\n    for _, v in ipairs(even)\
    \ do\n        if v < min then\n            min = v\n        end\n    end\n   \
    \ for i, v in ipairs(arr) do\n        if v == min then\n            table.insert(output,\
    \ min)\n            table.insert(output, i)\n            return output\n     \
    \   end\n    end\nend\nreturn pluck", "  local result = {}\n  local min_index\n\
    \  local min_value\n  for i, el in ipairs(arr) do\n    if el % 2 == 0 then\n \
    \     if min_value == nil or el < min_value then\n        min_value = el\n   \
    \     min_index = i\n      end\n    end\n  end\n  if min_value then\n    result[1]\
    \ = min_value\n    result[2] = min_index\n  end\n  return result\nend", "  local\
    \ smallestEven = {arr[1], 1}\n  local smallestEvenIndex = 1\n  local even = arr[1]\
    \ % 2 == 0\n  if even then\n    smallestEven = {arr[1], 1}\n  end\n  for i = 2,\
    \ #arr do\n    if arr[i] % 2 == 0 then\n      if not even then\n        smallestEven\
    \ = {arr[i], i}\n        even = true\n      else\n        if arr[i] < smallestEven[1]\
    \ then\n          smallestEven = {arr[i], i}\n        end\n      end\n    end\n\
    \  end\n  if even then\n    return smallestEven\n  else\n    return {}\n  end\n\
    end", "    local smallest_value = nil\n    local smallest_index = nil\n    for\
    \ index, value in ipairs(arr) do\n        if value % 2 == 0 then\n           \
    \ if smallest_value == nil or value < smallest_value then\n                smallest_value\
    \ = value\n                smallest_index = index\n            end\n        end\n\
    \    end\n    if smallest_value == nil then\n        return {}\n    else\n   \
    \     return {smallest_value, smallest_index}\n    end\nend", "  if #arr == 0\
    \ then return {} end\n  local smallest_even_value, idx = math.huge, nil\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < smallest_even_value then\n\
    \      smallest_even_value = v\n      idx = i\n    end\n  end\n  if idx then return\
    \ {smallest_even_value, idx} end\n  return {}\nend", "  local smallest, idx =\
    \ math.huge, nil\n  for i, n in ipairs(arr) do\n    if n % 2 == 0 and n < smallest\
    \ then\n      smallest, idx = n, i\n    end\n  end\n  return idx and {smallest,\
    \ idx} or {}\nend", "  local result = {}\n  local min_idx = math.huge\n  local\
    \ min_val = math.huge\n  for idx, val in ipairs(arr) do\n    if val % 2 == 0 and\
    \ val < min_val then\n      min_val = val\n      min_idx = idx\n    end\n  end\n\
    \  if min_val < math.huge then\n    result[1] = min_val\n    result[2] = min_idx\n\
    \  end\n  return result\nend", "    local min = nil\n    local min_idx = nil\n\
    \    for i, x in ipairs(arr) do\n        if x % 2 == 0 then\n            if min\
    \ == nil or x < min then\n                min = x\n                min_idx = i\n\
    \            end\n        end\n    end\n    if min == nil then\n        return\
    \ {}\n    else\n        return {min, min_idx}\n    end\nend", "  local min, idx\
    \ = nil, 0\n  for i, el in ipairs(arr) do\n    if el % 2 == 0 and (min == nil\
    \ or el < min) then\n      min, idx = el, i\n    end\n  end\n  return min and\
    \ {min, idx} or {}\nend", "  -- your code goes here\n  local index = 1\n  local\
    \ val = arr[index]\n  for i, value in ipairs(arr) do\n    if value % 2 == 0 and\
    \ value < val then\n      index = i\n      val = value\n    end\n  end\n  if val\
    \ % 2 == 0 then\n    return {val, index}\n  else\n    return {}\n  end\nend",
  "  return {}\nend", "    local t = {}\n    for i, v in ipairs(arr) do\n        if\
    \ v % 2 == 0 then\n            table.insert(t, v)\n        end\n    end\n    if\
    \ next(t) == nil then\n        return {}\n    end\n    local min = math.min(unpack(t))\n\
    \    for i, v in ipairs(arr) do\n        if v == min then\n            return\
    \ {min, i}\n        end\n    end\nend", "  -- your code here\nend", "  local index,\
    \ even_arr = 1, {}\n  while arr[index] do\n    if arr[index] % 2 == 0 then\n \
    \     table.insert(even_arr, arr[index])\n    end\n    index = index + 1\n  end\n\
    \  local sorted_even_arr = quick_sort(even_arr)\n  local min = sorted_even_arr[1]\n\
    \  for i = 1, #arr do\n    if arr[i] == min then\n      return {min, i}\n    end\n\
    \  end\n  return {}\nend", "    local index, even\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            if even == nil or v < even then\n\
    \                even = v\n                index = i\n            end\n      \
    \  end\n    end\n    return {even, index}\nend", "  local min_idx, min_val\n \
    \ for idx, val in ipairs(arr) do\n    if val % 2 == 0 then\n      if not min_val\
    \ or val < min_val then\n        min_val = val\n        min_idx = idx\n      end\n\
    \    end\n  end\n  return {min_val, min_idx}\nend", "  local index = math.huge\n\
    \  local found = nil\n  for k, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ found then\n      found = v\n      index = k\n    end\n  end\n  return found\
    \ and {found, index} or {}\nend", "    local smallest_even_value, smallest_even_value_i\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not\
    \ smallest_even_value or v < smallest_even_value then\n                smallest_even_value\
    \ = v\n                smallest_even_value_i = i\n            end\n        end\n\
    \    end\n    return smallest_even_value and {smallest_even_value, smallest_even_value_i}\
    \ or {}\nend", "  local min = math.huge\n  local minIndex = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if (v % 2 == 0) and (v < min) then\n      min = v\n\
    \      minIndex = i\n    end\n  end\n  if min ~= math.huge then\n    return {min,\
    \ minIndex}\n  else\n    return {}\n  end\nend", "  -- fill me in\nend", "   \
    \ local min_even = 2^31 - 1\n    local min_even_idx = -1\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even then\n            min_even = v\n\
    \            min_even_idx = i\n        end\n    end\n    if min_even_idx == -1\
    \ then\n        return {}\n    else\n        return {min_even, min_even_idx}\n\
    \    end\nend", "  local min = 0\n  local index = -1\n  for i = 1, #arr do\n \
    \   if arr[i] ~= 0 and arr[i] % 2 == 0 then\n      if min == 0 then\n        min\
    \ = arr[i]\n        index = i\n      elseif arr[i] < min then\n        min = arr[i]\n\
    \        index = i\n      end\n    end\n  end\n  if index > -1 then\n    return\
    \ {min, index}\n  else\n    return {}\n  end\nend", "  local smallest = math.huge\n\
    \  local smallest_index = math.huge\n  local value_found = false\n  for index,\
    \ value in ipairs(arr) do\n    if value % 2 == 0 and value < smallest then\n \
    \     smallest = value\n      smallest_index = index\n      value_found = true\n\
    \    end\n  end\n  if value_found then\n    return {smallest, smallest_index}\n\
    \  else\n    return {}\n  end\nend", "  local even = {}\n  local index = {}\n\
    \  for i,v in ipairs(arr) do\n    if v % 2 == 0 then\n      even[#even+1] = v\n\
    \      index[#index+1] = i\n    end\n  end\n  table.sort(even)\n  if #even ==\
    \ 0 then\n    return {}\n  end\n  local min = even[1]\n  for i,v in ipairs(even)\
    \ do\n    if v == min then\n      return {min, index[i]}\n    end\n  end\nend",
  "    if not arr then return {} end\n    local smallest = nil\n    local index =\
    \ -1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if\
    \ smallest == nil or arr[i] < smallest then\n                smallest = arr[i]\n\
    \                index = i\n            end\n        end\n    end\n    if smallest\
    \ == nil then return {} end\n    return {smallest, index}\nend", "  -- body\n\
    end", end, "  local smallestEvenValue = math.huge\n  local smallestEvenIndex =\
    \ -1\n  for index, value in ipairs(arr) do\n    if value % 2 == 0 and value <\
    \ smallestEvenValue then\n      smallestEvenValue = value\n      smallestEvenIndex\
    \ = index\n    end\n  end\n  if smallestEvenIndex ~= -1 then\n    return {smallestEvenValue,\
    \ smallestEvenIndex}\n  else\n    return {}\n  end\nend\nreturn pluck", "    local\
    \ res = {}\n    local min = 10000\n    for i = 1, #arr do\n        if arr[i] %\
    \ 2 == 0 and arr[i] < min then\n            min = arr[i]\n            res = {min,\
    \ i}\n        end\n    end\n    return res\nend", "  return {2, 1}\nend", "  if\
    \ #arr == 0 then return {} end\n  local smallest_even, smallest_index = nil, 10000\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and smallest_even == nil then\n\
    \      smallest_even = v\n      smallest_index = i\n    elseif v % 2 == 0 and\
    \ v < smallest_even then\n      smallest_even = v\n      smallest_index = i\n\
    \    end\n  end\n  if smallest_even == nil then return {} end\n  return {smallest_even,\
    \ smallest_index}\nend", "    local evens = {}\n    local min = {math.huge, 0}\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if v\
    \ < min[1] then\n                min = {v, i}\n            end\n        end\n\
    \    end\n    return min[1] ~= math.huge and min or {}\nend", "  if #arr == 0\
    \ then return {} end\n  local min = math.huge\n  local min_index = math.huge\n\
    \  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < min then\n      min\
    \ = arr[i]\n      min_index = i\n    end\n  end\n  if min == math.huge then return\
    \ {} end\n  return {min, min_index}\nend", "  if #arr == 0 then return {} end\n\
    \  local smallest = arr[1]\n  local smallestIndex = 1\n  for i,v in ipairs(arr)\
    \ do\n    if smallest % 2 == 0 and v % 2 == 0 then\n      if v < smallest then\n\
    \        smallest = v\n        smallestIndex = i\n      end\n    elseif smallest\
    \ % 2 ~= 0 and v % 2 == 0 then\n      smallest = v\n      smallestIndex = i\n\
    \    end\n  end\n  if smallest % 2 == 0 then\n    return {smallest, smallestIndex}\n\
    \  else\n    return {}\n  end\nend", "  local evens = { }\n  local smallest =\
    \ nil\n  local smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 then\n      if not smallest or v < smallest then\n        smallest =\
    \ v\n        smallest_index = i\n      end\n    end\n  end\n  if smallest then\n\
    \    return { smallest, smallest_index }\n  else\n    return { }\n  end\nend",
  "  local function isEven(n)\n    return n % 2 == 0\n  end\n  local function check(n)\n\
    \    return n and n > 0 and n < math.huge\n  end\n  local function findSmallestEven(arr)\n\
    \    local smallest = math.huge\n    local idx = 0\n    for i, v in ipairs(arr)\
    \ do\n      if isEven(v) and v < smallest then\n        smallest = v\n       \
    \ idx = i\n      end\n    end\n    return smallest, idx\n  end\n  local smallest,\
    \ idx = findSmallestEven(arr)\n  return smallest ~= math.huge and {smallest, idx}\
    \ or {}\nend", "    local min_even_value, min_even_index = math.huge, math.huge\n\
    \    for i, value in ipairs(arr) do\n        if value % 2 == 0 and value < min_even_value\
    \ then\n            min_even_value = value\n            min_even_index = i\n \
    \       end\n    end\n    if min_even_value == math.huge then\n        return\
    \ {}\n    end\n    return {min_even_value, min_even_index}\nend", "    if #arr\
    \ == 0 then\n        return {}\n    end\n    local min = nil\n    local minIndex\
    \ = nil\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n        \
    \    if min == nil or v < min then\n                min = v\n                minIndex\
    \ = i\n            end\n        end\n    end\n    if min == nil then\n       \
    \ return {}\n    end\n    return {min, minIndex}\nend", "\treturn {}\nend", " \
    \ local min = math.huge\n  local min_i = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_i = i\n   \
    \ end\n  end\n  if min == math.huge then\n    return {}\n  end\n  return {min,\
    \ min_i}\nend", "\tif (#arr==0) then return {} end\n\tlocal min=math.huge\n\t\
    local index=1\n\tfor i,v in ipairs(arr) do\n\t\tif (v%2==0) and (v<min) then\n\
    \t\t\tmin=v\n\t\t\tindex=i\n\t\tend\n\tend\n\tif (min==math.huge) then return\
    \ {} end\n\treturn {min,index}\nend", "    local res = {}\n    local smallest\
    \ = 0\n    local smallest_index = 0\n    local is_found = false\n    for index,\
    \ value in ipairs(arr) do\n        if (value % 2 == 0) then\n            if (not\
    \ is_found) then\n                smallest = value\n                smallest_index\
    \ = index\n                is_found = true\n            else\n               \
    \ if (value < smallest) then\n                    smallest = value\n         \
    \           smallest_index = index\n                end\n            end\n   \
    \     end\n    end\n    if (is_found) then\n        res[1] = smallest\n      \
    \  res[2] = smallest_index\n    end\n    return res\nend", "  local tmp = {}\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(tmp,\
    \ {v, i})\n    end\n  end\n  table.sort(tmp, function(a, b) return a[1] < b[1]\
    \ end)\n  return tmp[1] or {}\nend", "  local arrOfEven = {}\n  local arrOfOdd\
    \ = {}\n  local result = {}\n  local flag = false\n  local odd_ind = 0\n  local\
    \ even_ind = 0\n  for i, v in ipairs(arr) do\n    if v%2 == 0 then\n      table.insert(arrOfEven,v)\n\
    \      flag = true\n      even_ind = i\n    else\n      table.insert(arrOfOdd,v)\n\
    \      odd_ind = i\n    end\n  end\n  if flag == true then\n    if odd_ind > even_ind\
    \ then\n      table.insert(result,table.remove(arrOfEven,1))\n      table.insert(result,even_ind)\n\
    \    else\n      table.insert(result,table.remove(arrOfOdd,1))\n      table.insert(result,odd_ind)\n\
    \    end\n  end\n  return result\nend", "\tlocal min, min_ind = math.huge, math.huge\n\
    \tfor i,v in ipairs(arr) do\n\t\tif v > 0 and v % 2 == 0 and v < min then\n\t\t\
    \tmin, min_ind = v, i\n\t\tend\n\tend\n\treturn min < math.huge and {min, min_ind}\
    \ or {}\nend", "  local max_even_value = math.huge\n  local result_index\n  for\
    \ i, value in ipairs(arr) do\n    if value % 2 == 0 and value < max_even_value\
    \ then\n      max_even_value = value\n      result_index = i\n    end\n  end\n\
    \  if max_even_value == math.huge then\n    return {}\n  end\n  return {max_even_value,\
    \ result_index}\nend", "    local min_even_value, min_even_idx = math.huge, math.huge\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < min_even_value\
    \ then\n            min_even_value = v\n            min_even_idx = i\n       \
    \ end\n    end\n    if min_even_value == math.huge then\n        return {}\n \
    \   end\n    return {min_even_value, min_even_idx}\nend", "  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function select_pluck(t, smallest_index,\
    \ smallest_value)\n    local smallest_value_at_index = t[smallest_index]\n   \
    \ if is_even(smallest_value_at_index) then\n      return {smallest_value_at_index,\
    \ smallest_index}\n    end\n    return {smallest_value, smallest_index}\n  end\n\
    \  local function get_smallest_even(t)\n    local smallest_index, smallest_value\
    \ = 1, t[1]\n    for index, value in ipairs(t) do\n      if value < smallest_value\
    \ then\n        smallest_index, smallest_value = index, value\n      end\n   \
    \ end\n    return select_pluck(t, smallest_index, smallest_value)\n  end\n  local\
    \ function get_smallest_even_with_even(t)\n    local smallest_index, smallest_value\
    \ = 1, t[1]\n    for index, value in ipairs(t) do\n      if is_even(value) and\
    \ value < smallest_value then\n        smallest_index, smallest_value = index,\
    \ value\n      end\n    end\n    return select_pluck(t, smallest_index, smallest_value)\n\
    \  end\n  if #arr == 0 then\n    return {}\n  end\n  if is_even(arr[1]) then\n\
    \    return get_smallest_even_with_even(arr)\n  end\n  return get_smallest_even(arr)\n\
    end", "    local smallest = nil\n    local smallest_index = nil\n    for i, v\
    \ in ipairs(arr) do\n        if v % 2 == 0 then\n            if smallest == nil\
    \ or v < smallest then\n                smallest = v\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest == nil then\n  \
    \      return {}\n    else\n        return {smallest, smallest_index}\n    end\n\
    end", "    local min = math.huge\n    local pos = 0\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 and arr[i] < min then\n            min = arr[i]\n\
    \            pos = i\n        end\n    end\n    if min == math.huge then\n   \
    \     return {}\n    end\n    return {min, pos}\nend", "  local min_even_value,\
    \ min_index\n  for i, val in ipairs(arr) do\n    if val % 2 == 0 then\n      if\
    \ not min_even_value or val < min_even_value then\n        min_even_value = val\n\
    \        min_index = i\n      end\n    end\n  end\n  return {min_even_value, min_index}\n\
    end", "    if not arr then return {} end\n    local min_index, min_value = -1,\
    \ -1\n    for i, v in ipairs(arr) do\n        if (v % 2 == 0) and (min_value ==\
    \ -1 or v < min_value) then\n            min_index, min_value = i, v\n       \
    \ end\n    end\n    return {min_value, min_index}\nend\nreturn pluck", "  local\
    \ min_value, min_index\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n  \
    \    if not min_value or arr[i] < min_value then\n        min_value = arr[i]\n\
    \        min_index = i\n      end\n    end\n  end\n  return {min_value, min_index}\n\
    end", "  -- your code here\nend", "  local smallest_value = nil\n  local smallest_index\
    \ = nil\n  for i,v in ipairs(arr) do\n    if v % 2 == 0 then\n      if smallest_value\
    \ == nil or v < smallest_value then\n        smallest_value = v\n        smallest_index\
    \ = i\n      end\n    end\n  end\n  if smallest_value == nil then\n    return\
    \ {}\n  else\n    return {smallest_value, smallest_index}\n  end\nend", "    local\
    \ minIndex = 0\n    local minValue = 0\n    local foundEven = false\n    for i,\
    \ v in ipairs(arr) do\n        if (foundEven == false) then\n            if (v\
    \ % 2 == 0) then\n                minIndex = i\n                minValue = v\n\
    \                foundEven = true\n            end\n        else\n           \
    \ if (v % 2 == 0) then\n                if (v < minValue) then\n             \
    \       minIndex = i\n                    minValue = v\n                end\n\
    \            end\n        end\n    end\n    return foundEven and {minValue, minIndex}\
    \ or {}\nend", "  local evens = {}\n  local res = {}\n  for i, val in ipairs(arr)\
    \ do\n    if val % 2 == 0 then\n      evens[#evens + 1] = {val, i}\n    end\n\
    \  end\n  if #evens == 0 then\n    return res\n  end\n  local min = evens[1][1]\n\
    \  local idx = evens[1][2]\n  for _, val in ipairs(evens) do\n    if val[1] <\
    \ min then\n      min = val[1]\n      idx = val[2]\n    end\n  end\n  res[1] =\
    \ min\n  res[2] = idx\n  return res\nend", "  local pos = 0\n  local even = 0\n\
    \  local res = {}\n  for i, v in ipairs(arr) do\n    if v ~= 0 and math.mod(v,\
    \ 2) == 0 then\n      if even == 0 then\n        even = v\n        pos = i\n \
    \     elseif v < even then\n        even = v\n        pos = i\n      end\n   \
    \ end\n  end\n  if even == 0 then\n    return {}\n  end\n  res[1] = even\n  res[2]\
    \ = pos\n  return res\nend", "    return {2, 1}\nend", "  local smallest = nil\n\
    \  local smallestIndex = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ then\n      if smallest == nil or v < smallest then\n        smallest = v\n\
    \        smallestIndex = i\n      end\n    end\n  end\n  if smallest ~= nil then\n\
    \    return {smallest, smallestIndex}\n  else\n    return {}\n  end\nend", "\t\
    local evenArr = {}\n\tlocal arrSize = #arr\n\tfor i = 1, arrSize do\n\t\tif arr[i]\
    \ % 2 == 0 then\n\t\t\tevenArr[#evenArr + 1] = {arr[i], i}\n\t\tend\n\tend\n\t\
    if #evenArr == 0 then\n\t\treturn {}\n\tend\n\ttable.sort(evenArr, function(t1,\
    \ t2)\n\t\treturn t1[1] < t2[1]\n\tend)\n\tlocal ans = evenArr[1]\n\tfor i = 2,\
    \ #evenArr do\n\t\tif evenArr[i][1] == ans[1] then\n\t\t\tif evenArr[i][2] < ans[2]\
    \ then\n\t\t\t\tans = evenArr[i]\n\t\t\tend\n\t\telse\n\t\t\tbreak\n\t\tend\n\t\
    end\n\treturn ans\nend", "  local smin\n  local imin\n  for i = 1, #arr do\n \
    \   local val = arr[i]\n    if val % 2 == 0 then\n      if smin == nil or val\
    \ < smin then\n        smin = val\n        imin = i\n      end\n    end\n  end\n\
    \  if smin then\n    return {smin, imin}\n  else\n    return {}\n  end\nend",
  "  local smallest_value = math.huge\n  local smallest_index = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < smallest_value then\n      smallest_value\
    \ = v\n      smallest_index = i\n    end\n  end\n  if smallest_value == math.huge\
    \ then\n    return {}\n  end\n  return {smallest_value, smallest_index}\nend",
  "\tlocal minimum_even = nil\n\tlocal minimum_even_i = 0\n\tfor i, v in ipairs(arr)\
    \ do\n\t\tif v % 2 == 0 then\n\t\t\tif minimum_even == nil or v < minimum_even\
    \ then\n\t\t\t\tminimum_even = v\n\t\t\t\tminimum_even_i = i\n\t\t\tend\n\t\t\
    end\n\tend\n\tif minimum_even == nil then\n\t\treturn {}\n\telse\n\t\treturn {minimum_even,\
    \ minimum_even_i}\n\tend\nend", "  -- your code goes here\nend", "    local smallest\
    \ = nil\n    local smallestIndex = nil\n    for i, v in ipairs(arr) do\n     \
    \   if (v % 2 == 0) then\n            if (smallest == nil) then\n            \
    \    smallest = v\n                smallestIndex = i\n            elseif (v <\
    \ smallest) then\n                smallest = v\n                smallestIndex\
    \ = i\n            end\n        end\n    end\n    if (smallest == nil) then\n\
    \        return {}\n    else\n        return {smallest, smallestIndex}\n    end\n\
    end", "  local minIndex = 0\n  local minVal = nil\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 then\n      if minVal == nil or v < minVal then\n        minVal\
    \ = v\n        minIndex = i\n      end\n    end\n  end\n  if minVal then\n   \
    \ return {minVal, minIndex}\n  else\n    return {}\n  end\nend", "  local smallest_index,\
    \ smallest_value\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n     \
    \ if not smallest_value or v < smallest_value then\n        smallest_value = v\n\
    \        smallest_index = i\n      end\n    end\n  end\n  return {smallest_value,\
    \ smallest_index}\nend", "    local smallest_value = math.huge\n    local smallest_index\
    \ = math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < smallest_value\
    \ then\n            smallest_value = v\n            smallest_index = i\n     \
    \   end\n    end\n    if smallest_value == math.huge then\n        return {}\n\
    \    end\n    return {smallest_value, smallest_index}\nend", "  local smallNum\
    \ = 10000\n  local smallIdx = 10000\n  for i, num in ipairs(arr) do\n    if num\
    \ % 2 == 0 and num < smallNum then\n      smallNum = num\n      smallIdx = i\n\
    \    end\n  end\n  if smallNum == 10000 then\n    return {}\n  else\n    return\
    \ {smallNum, smallIdx}\n  end\nend", "    local min = math.huge\n    local idx\
    \ = nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 and arr[i] < min then\n\
    \            min = arr[i]\n            idx = i\n        end\n    end\n    if idx\
    \ then\n        return {min, idx}\n    else\n        return {}\n    end\nend",
  "  local min, minInd = math.huge, nil\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min then\n      min, minInd = v, i\n    end\n  end\n  return\
    \ minInd and {min, minInd} or {}\nend", "  local even = {}\n  local odd = {}\n\
    \  for k, v in ipairs(arr) do\n    if v % 2 == 0 then\n      even[k] = v\n   \
    \ else\n      odd[k] = v\n    end\n  end\n  if #even == 0 then\n    return {}\n\
    \  end\n  local minVal = math.min(unpack(even))\n  local minValIndex = nil\n \
    \ for k, v in pairs(even) do\n    if v == minVal then\n      minValIndex = k\n\
    \      break\n    end\n  end\n  return {minVal, minValIndex}\nend", "  -- TODO\n\
    end", "  local even = {}\n  local min = math.huge\n  local idx = 0\n  for i =\
    \ 1, #arr do\n    if arr[i] % 2 == 0 then\n      even[#even + 1] = {arr[i], i}\n\
    \      if arr[i] < min then\n        min = arr[i]\n        idx = i\n      end\n\
    \    end\n  end\n  if #even == 0 then\n    return {}\n  end\n  return even[idx]\n\
    end", "  local smallest_value = arr[1]\n  local smallest_value_index = 1\n  for\
    \ i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < smallest_value then\n  \
    \    smallest_value = arr[i]\n      smallest_value_index = i\n    end\n  end\n\
    \  if smallest_value % 2 == 0 then\n    return {smallest_value, smallest_value_index}\n\
    \  else\n    return {}\n  end\nend", "  local min,index\n  for i,v in ipairs(arr)\
    \ do\n    if v%2==0 then\n      if not min or v<min then\n        min=v\n    \
    \    index=i\n      end\n    end\n  end\n  return min and {min,index} or {}\n\
    end", "    local found, index, min = false, 1, -1\n    for i = 1, #arr do\n  \
    \      if arr[i] % 2 == 0 then\n            if not found then\n              \
    \  found = true\n                min = arr[i]\n                index = i\n   \
    \         else\n                if arr[i] < min then\n                    min\
    \ = arr[i]\n                    index = i\n                end\n            end\n\
    \        end\n    end\n    if found then\n        return {min, index}\n    else\n\
    \        return {}\n    end\nend", "    local sorted = {}\n    local min\n   \
    \ for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not min\
    \ or v < min then\n                min = v\n            end\n            if not\
    \ sorted[v] then\n                sorted[v] = {}\n            end\n          \
    \  table.insert(sorted[v], i)\n        end\n    end\n    if min then\n       \
    \ local min_i = sorted[min][1]\n        return {min, min_i}\n    end\n    return\
    \ {}\nend", "  -- TODO: implement pluck\nend", "  local function smallestEven(arr)\n\
    \    local i, v, evens = 0, 0, {}\n    for i, v in ipairs(arr) do\n      if v\
    \ % 2 == 0 then\n        table.insert(evens, {v, i})\n      end\n    end\n   \
    \ table.sort(evens, function(a, b) return a[1] < b[1] end)\n    return evens[1]\n\
    \  end\n  local even = smallestEven(arr)\n  return even or {}\nend", "    local\
    \ smallest_even_value = nil\n    local smallest_even_index = nil\n    for i,v\
    \ in ipairs(arr) do\n        if v % 2 == 0 then\n            if smallest_even_value\
    \ == nil or v < smallest_even_value then\n                smallest_even_value\
    \ = v\n                smallest_even_index = i\n            end\n        end\n\
    \    end\n    if smallest_even_value ~= nil then\n        return {smallest_even_value,\
    \ smallest_even_index}\n    else\n        return {}\n    end\nend", "\t-- use\
    \ the first odd value as pivot to seperate even and odd\n\t-- since we want the\
    \ smallest even value and it's index,\n\t-- we can just seperate the even and\
    \ odd to two groups\n\t-- and just pick the first one in the even group\n\tlocal\
    \ even, odd = {}, {}\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\t\
    \t\teven[#even + 1] = {v, i}\n\t\telse\n\t\t\todd[#odd + 1] = {v, i}\n\t\tend\n\
    \tend\n\ttable.sort(even, function(a, b) return a[1] < b[1] end)\n\treturn even[1]\
    \ or {}\nend", "  local smallest = {nil, nil}\n  local i = 1\n  while i <= #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      if smallest[1] == nil or arr[i] < smallest[1]\
    \ then\n        smallest = {arr[i], i}\n      end\n    end\n    i = i + 1\n  end\n\
    \  return smallest\nend", "  local even_values = {}\n  local index = 1\n  for\
    \ _, v in ipairs(arr) do\n    if v % 2 == 0 then\n      even_values[#even_values\
    \ + 1] = {v, index}\n    end\n    index = index + 1\n  end\n  if #even_values\
    \ == 0 then\n    return {}\n  end\n  table.sort(even_values, function(t1, t2)\n\
    \    return t1[1] < t2[1]\n  end)\n  return even_values[1]\nend", "    local plucked\
    \ = {}\n    local last\n    local index\n    for i,v in ipairs(arr) do\n     \
    \   if v % 2 == 0 then\n            if not last or v < last then\n           \
    \     last = v\n                index = i\n            end\n        end\n    end\n\
    \    if last then\n        plucked = {last, index}\n    end\n    return plucked\n\
    end", "  local min, index = math.huge, -1\n  for i,v in ipairs(arr) do\n    if\
    \ v % 2 == 0 and v < min then\n      min, index = v, i\n    end\n  end\n  return\
    \ index > 0 and {min, index} or {}\nend", "  -- your code here\nend", "  if type(arr)\
    \ ~= 'table' then\n    return {}\n  end\n  local min_even_value = math.huge\n\
    \  local pos = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even_value\
    \ then\n      min_even_value = v\n      pos = i\n    end\n  end\n  if pos == nil\
    \ then\n    return {}\n  end\n  return {min_even_value, pos}\nend", "  -- Write\
    \ your code here\nend", "  local result = {}\n  for i = 1, #arr do\n    if arr[i]\
    \ % 2 == 0 then\n      table.insert(result, {arr[i], i})\n    end\n  end\n  table.sort(result,\
    \ function(a, b) return a[1] < b[1] end)\n  return result[1] or {}\nend", "  \
    \  local smallestEven = nil\n    local smallestEvenIndex = nil\n    for i, n in\
    \ ipairs(arr) do\n        if n % 2 == 0 then\n            if smallestEven == nil\
    \ or n < smallestEven then\n                smallestEven = n\n               \
    \ smallestEvenIndex = i\n            end\n        end\n    end\n    if smallestEven\
    \ == nil then\n        return {}\n    else\n        return {smallestEven, smallestEvenIndex}\n\
    \    end\nend", "  local min = math.huge\n  local min_index = math.huge\n  for\
    \ i, val in ipairs(arr) do\n    if math.fmod(val, 2) == 0 and val < min then\n\
    \      min = val\n      min_index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, min_index}\nend", "  local sme, sie = nil,\
    \ 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if sme == nil\
    \ or v < sme then\n        sme = v\n        sie = i\n      end\n    end\n  end\n\
    \  return sme == nil and {} or {sme, sie}\nend", "\tlocal res = {}\n\tlocal least\
    \ = math.huge\n\tlocal least_index = math.huge\n\tfor k, v in ipairs(arr) do\n\
    \t\tif v % 2 == 0 and v < least then\n\t\t\tleast = v\n\t\t\tleast_index = k\n\
    \t\tend\n\tend\n\tres[1] = least\n\tres[2] = least_index\n\treturn res\nend",
  "  local smallest, smallest_index\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 then\n      if not smallest or v < smallest then\n        smallest = v\n \
    \       smallest_index = i\n      end\n    end\n  end\n  return smallest and {smallest,\
    \ smallest_index} or {}\nend", "  if not arr or #arr == 0 then return {} end\n\
    \  local value\n  local index\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ then\n      if not value or v < value then\n        value = v\n        index\
    \ = i\n      end\n    end\n  end\n  if not value then return {} end\n  return\
    \ {value, index}\nend", "    local minEvenIdx, minEvenValue\n    for i, v in ipairs(arr)\
    \ do\n        if (v % 2 == 0) and ((minEvenValue == nil) or (v < minEvenValue))\
    \ then\n            minEvenIdx = i\n            minEvenValue = v\n        end\n\
    \    end\n    return minEvenIdx and {minEvenValue, minEvenIdx} or {}\nend", " \
    \ local min_value, min_index, min_exists = math.huge, math.huge, false\n  for\
    \ i, value in ipairs(arr) do\n    if value % 2 == 0 and (value < min_value or\
    \ (value == min_value and i < min_index)) then\n      min_value, min_index, min_exists\
    \ = value, i, true\n    end\n  end\n  return min_exists and {min_value, min_index}\
    \ or {}\nend", "  local res = {}\n  local smallest = math.huge\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 and v < smallest then\n      smallest = v\n\
    \      res = {v, i}\n    end\n  end\n  return res\nend", "  -- Your code here\n\
    \  local node = {}\n  local res = {}\n  local index = 10001\n  for i, n in ipairs(arr)\
    \ do\n    if n % 2 == 0 then\n      if node[1] == nil then\n        node[1] =\
    \ n\n        node[2] = i\n      elseif node[1] > n then\n        node[1] = n\n\
    \        node[2] = i\n      end\n    end\n  end\n  if node[1] == nil then\n  \
    \  return {}\n  else\n    return node\n  end\nend", "  local min_value, min_index\n\
    \  for i,v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min_value or\
    \ v < min_value then\n        min_value = v\n        min_index = i\n      end\n\
    \    end\n  end\n  return min_value and {min_value, min_index} or {}\nend", " \
    \ local even = 0\n  local index = 0\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 then\n      if v <= even then\n        even = v\n        index = i\n\
    \      end\n    end\n  end\n  if even > 0 then\n    return {even, index}\n  else\n\
    \    return {}\n  end\nend", "  -- Your code here\nend", "  local res = {-1, -1}\n\
    \  for i,v in ipairs(arr) do\n    if v % 2 == 0 and v < res[1] then\n      res\
    \ = {v, i}\n    end\n  end\n  if res[1] == -1 then\n    return {}\n  end\n  return\
    \ res\nend", "  local evens = {}\n  local even_indexes = {}\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      evens[#evens + 1] = v\n      even_indexes[#even_indexes\
    \ + 1] = i\n    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n  local\
    \ smallest_even = evens[1]\n  local smallest_even_index = even_indexes[1]\n  for\
    \ i, v in ipairs(evens) do\n    if v < smallest_even then\n      smallest_even\
    \ = v\n      smallest_even_index = even_indexes[i]\n    end\n  end\n  return {smallest_even,\
    \ smallest_even_index}\nend", "  local even\n  local index\n  for k, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if not even or v < even then\n        even\
    \ = v\n        index = k\n      end\n    end\n  end\n  return index and {even,\
    \ index} or {}\nend", "    return nill\nend", "  local t = {}\n  for i,v in ipairs(arr)\
    \ do\n    if v%2 == 0 then\n      table.insert(t, {v, i})\n    end\n  end\n  if\
    \ #t == 0 then\n    return {}\n  end\n  table.sort(t, function(a,b) return a[1]\
    \ < b[1] end)\n  return t[1]\nend", "  local res, res_idx = math.huge, math.huge\n\
    \  for idx, value in ipairs(arr) do\n    if value % 2 == 0 and value < res then\n\
    \      res, res_idx = value, idx\n    end\n  end\n  return res ~= math.huge and\
    \ {res, res_idx} or {}\nend", "  -- TODO\nend", "  if #arr == 0 then return {}\
    \ end\n  local m, index = math.huge, 1\n  for i, v in ipairs(arr) do\n    if v\
    \ % 2 == 0 and v < m then\n      m = v\n      index = i\n    end\n  end\n  if\
    \ m == math.huge then return {} end\n  return {m, index}\nend", end, "    if #arr\
    \ < 1 then return {} end\n    local evens = filter(arr, function(x) return x %\
    \ 2 == 0 end)\n    local min = min_by(evens, function(x) return x end)\n    local\
    \ min_index = fp.find_index(arr, function(x) return x == min end)\n    return\
    \ {min, min_index}\nend", "  local n, i = math.huge, 0\n  for k, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < n then\n      n, i = v, k\n    end\n  end\n  return\
    \ {n, i}\nend", "  local even_min = math.huge\n  local even_min_idx = -1\n  for\
    \ idx, val in ipairs(arr) do\n    if val % 2 == 0 and val < even_min then\n  \
    \    even_min = val\n      even_min_idx = idx\n    end\n  end\n  if even_min_idx\
    \ < 0 then\n    return {}\n  end\n  return {even_min, even_min_idx}\nend", " \
    \   local function is_even(x)\n        return (x % 2) == 0\n    end\n    local\
    \ res = {}\n    local idx = #arr\n    for i = 1, #arr do\n        if is_even(arr[i])\
    \ then\n            if #res == 0 then\n                res = {arr[i], i}\n   \
    \         elseif arr[i] < res[1] then\n                res = {arr[i], i}\n   \
    \         end\n        end\n    end\n    return res\nend\npluck({5, 0, 3, 0, 4,\
    \ 2})", "    -- Returns the smallest even value,\n    -- and the index of that\
    \ value.\n    -- If there are no even values, returns nil.\n    local function\
    \ smallest_even_value(arr)\n        local min_val, min_idx = nil, nil\n      \
    \  for i = 1, #arr do\n            local value = arr[i]\n            if value\
    \ % 2 == 0 then\n                if min_val == nil or value < min_val then\n \
    \                   min_val, min_idx = value, i\n                end\n       \
    \     end\n        end\n        return min_val, min_idx\n    end", "  local res\
    \ = {math.huge, math.huge}\n  for k, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < res[1] then\n      res = {v, k}\n    end\n  end\n  return res[1] == math.huge\
    \ and {} or res\nend", "  if arr == nil or #arr == 0 then\n    return {};\n  end\n\
    \  local min = math.huge;\n  local index = math.huge;\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 and arr[i] < min then\n      min = arr[i];\n      index\
    \ = i;\n    end\n  end\n  if min == math.huge then\n    return {};\n  end\n  return\
    \ {min, index};\nend", "\tlocal index, value, evens = nil, math.huge, {}\n\tfor\
    \ i, n in ipairs(arr) do\n\t\tif n > 0 and n % 2 == 0 and n < value then\n\t\t\
    \tvalue = n\n\t\t\tindex = i\n\t\telseif n > 0 and n % 2 == 0 then\n\t\t\ttable.insert(evens,\
    \ {n, i})\n\t\tend\n\tend\n\tif #evens == 0 then\n\t\treturn {}\n\telseif index\
    \ then\n\t\treturn {index = index, value = value}\n\telse\n\t\treturn evens[1]\n\
    \tend\nend", "    local s = arr[1]\n    local ss = 1\n    for i = 2, #arr do\n\
    \        if (s > arr[i]) and (arr[i] % 2 == 0) then\n            s = arr[i]\n\
    \            ss = i\n        end\n    end\n    if (s % 2 == 0) then\n        return\
    \ {s, ss}\n    else\n        return {}\n    end\nend", "    local tmparr = {}\n\
    \    for i,v in ipairs(arr) do\n        if v%2 == 0 then\n            table.insert(tmparr,{v,i})\n\
    \        end\n    end\n    if next(tmparr) == nil then\n        return {}\n  \
    \  end\n    local tmp = tmparr[1]\n    for i,v in ipairs(tmparr) do\n        if\
    \ v[1] < tmp[1] then\n            tmp = v\n        end\n    end\n    return tmp\n\
    end", "    local even_index = nil\n    local even_value = nil\n    for i, v in\
    \ ipairs(arr) do\n        if v % 2 == 0 then\n            if even_value == nil\
    \ or v < even_value then\n                even_value = v\n                even_index\
    \ = i\n            end\n        end\n    end\n    if even_index ~= nil then\n\
    \        return {even_value, even_index}\n    else\n        return {}\n    end\n\
    end", "  local min = math.huge\n  local minind = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v > 0 and v % 2 == 0 and v < min then\n      min = v\n      minind\
    \ = i\n    end\n  end\n  if min == math.huge then\n    return {}\n  end\n  return\
    \ {min, minind}\nend", "  local minEven = math.huge\n  local result = {}\n  for\
    \ i, val in ipairs(arr) do\n    if val % 2 == 0 and val < minEven then\n     \
    \ minEven = val\n      result = {val, i}\n    end\n  end\n  return result\nend",
  "  local l = #arr\n  local smallest_even_value, smallest_even_index, val", "   \
    \ local value, index = math.huge, math.huge\n    for i, v in ipairs(arr) do\n\
    \        if v % 2 == 0 and v < value then\n            value, index = v, i\n \
    \       end\n    end\n    return value == math.huge and {} or {value, index}\n\
    end", "    local evens = {}\n    local even_index = 1\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            evens[even_index] = {v, i}\n   \
    \         even_index = even_index + 1\n        end\n    end\n    if #evens ==\
    \ 0 then\n        return {}\n    end\n    table.sort(evens, function(a, b) return\
    \ a[1] < b[1] end)\n    return evens[1]\nend", "    local min = nil\n    local\
    \ index = nil\n    for i,v in ipairs(arr) do\n        if v % 2 == 0 then\n   \
    \         if not min or v < min then\n                min = v\n              \
    \  index = i\n            end\n        end\n    end\n    if min and index then\n\
    \        return {min, index}\n    else\n        return {}\n    end\nend", "  --\
    \ your code here\n  local min\n  local min_i\n  for i, v in ipairs(arr) do\n \
    \   if v % 2 == 0 then\n      if min == nil or v < min then\n        min = v\n\
    \        min_i = i\n      end\n    end\n  end\n  if min ~= nil then\n    return\
    \ {min, min_i}\n  else\n    return {}\n  end\nend", "    local has_even, min_even_idx\
    \ = false, nil\n    for idx, value in ipairs(arr) do\n        if (value % 2 ==\
    \ 0) then\n            if (not has_even) then\n                has_even = true\n\
    \                min_even_idx = idx\n            elseif (value < arr[min_even_idx])\
    \ then\n                min_even_idx = idx\n            end\n        end\n   \
    \ end\n    if (has_even) then\n        return {arr[min_even_idx], min_even_idx}\n\
    \    else\n        return {}\n    end\nend", "  local min, min_idx = math.huge,\
    \ nil\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < min then\n  \
    \    min, min_idx = arr[i], i\n    end\n  end\n  return min_idx and {min, min_idx}\
    \ or {}\nend", "\tlocal smallest = arr[1]\n\tlocal idx = 1\n\tfor i, v in ipairs(arr)\
    \ do\n\t\tif v % 2 == 0 and v < smallest then\n\t\t\tsmallest = v\n\t\t\tidx =\
    \ i\n\t\tend\n\tend\n\tif smallest % 2 == 0 then\n\t\treturn {smallest, idx}\n\
    \telse\n\t\treturn {}\n\tend\nend", "  if not arr then return {} end\n  local\
    \ result = {}\n  local min, index\n  for i,v in ipairs(arr) do\n    if (v % 2\
    \ == 0) and ((not min) or (v < min)) then\n      min = v\n      index = i\n  \
    \  end\n  end\n  if min then table.insert(result, min) end\n  if index then table.insert(result,\
    \ index) end\n  return result\nend", "  local even = {arr[1]}\n  local index =\
    \ {1}\n  local size = #arr\n  local function is_even(value)\n    return value\
    \ % 2 == 0\n  end\n  for i = 2, size do\n    if arr[i] < even[1] and is_even(arr[i])\
    \ then\n      even = {arr[i]}\n      index = {i}\n    elseif arr[i] == even[1]\
    \ and is_even(arr[i]) then\n      table.insert(even, arr[i])\n      table.insert(index,\
    \ i)\n    end\n  end\n  if not is_even(even[1]) then\n    return {}\n  end\n \
    \ return {even[1], index[1]}\nend", "  local result = {}\n  for i,v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if #result == 0 then\n        result = {v,\
    \ i}\n      elseif v < result[1] then\n        result = {v, i}\n      end\n  \
    \  end\n  end\n  return result\nend", "  local smallestEven = {}\n  for i, v in\
    \ ipairs(arr) do\n    if (v % 2 == 0) then\n      if (#smallestEven == 0) then\n\
    \        smallestEven = {v, i}\n      elseif (v < smallestEven[1]) then\n    \
    \    smallestEven = {v, i}\n      end\n    end\n  end\n  return smallestEven\n\
    end", "  local min_even_value = math.huge\n  local min_even_value_index = math.huge\n\
    \  for i, n in ipairs(arr) do\n    if n % 2 == 0 and n < min_even_value then\n\
    \      min_even_value = n\n      min_even_value_index = i\n    end\n  end\n  if\
    \ min_even_value == math.huge then\n    return {}\n  else\n    return {min_even_value,\
    \ min_even_value_index}\n  end\nend", "    local minEven, minEvenIdx\n    for\
    \ idx, node in ipairs(arr) do\n        if node % 2 == 0 then\n            if not\
    \ minEven or node < minEven then\n                minEven = node\n           \
    \     minEvenIdx = idx\n            end\n        end\n    end\n    return minEven\
    \ and {minEven, minEvenIdx} or {}\nend", "  return {}\nend", "    if not arr or\
    \ #arr == 0 then\n        return {}\n    end\n    local least_value, least_index\
    \ = nil, nil\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n   \
    \         if not least_value or v < least_value then\n                least_value\
    \ = v\n                least_index = i\n            end\n        end\n    end\n\
    \    if least_value then\n        return {least_value, least_index}\n    else\n\
    \        return {}\n    end\nend", "  if #arr < 1 then return {} end\n  local\
    \ minEven = math.huge\n  local index = math.huge\n  for i,v in ipairs(arr) do\n\
    \    if v%2 == 0 and v < minEven then\n      minEven = v\n      index = i\n  \
    \  end\n  end\n  if minEven == math.huge then return {} end\n  return {minEven,\
    \ index}\nend", "  local r = {}\n  local z = {}\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 then\n      if z[1] == nil or z[1] > v then\n        z = {v,\
    \ i}\n      end\n    end\n  end\n  return z\nend", "  return {}\nend", "\tlocal\
    \ min, min_i = math.huge, nil\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0\
    \ and v < min then\n\t\t\tmin, min_i = v, i\n\t\tend\n\tend\n\treturn min_i and\
    \ {min, min_i} or {}\nend", "  local min = math.huge\n  local minIdx = 0\n  for\
    \ idx,val in ipairs(arr) do\n    if val % 2 == 0 and val < min then\n      min\
    \ = val\n      minIdx = idx\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, minIdx}\n  end\nend", "  if #arr == 0 then return\
    \ {} end\n  local res = {}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\
    \ table.insert(res, arr[i]) end\n  end\n  if #res == 0 then return {} end\n  table.sort(res)\n\
    \  for i = 1, #arr do\n    if arr[i] == res[1] then return {res[1], i} end\n \
    \ end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
