name: HumanEval_34_unique
language: lua
results:
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _,v in ipairs(l) do\n    if not r[v] then r[v] = true end\n  end\n\
    \  return table.keys(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb2yvwb0h.lua:9:\
    \ attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpb2yvwb0h.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpb2yvwb0h.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ hash = {}\n  local res = {}\n  for _, v in ipairs(l) do\n    if not hash[v]\
    \ then\n      res[#res+1] = v\n      hash[v] = true\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfm9pg04n.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpfm9pg04n.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ vals = {}\n  for _, v in ipairs(l) do\n    vals[v] = true\n  end\n  local uniqued\
    \ = {}\n  for v in pairs(vals) do\n    table.insert(uniqued, v)\n  end\n  table.sort(uniqued)\n\
    \  return uniqued\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ ret = {}\n    for _, val in ipairs(l) do\n        if not ret[val] then\n   \
    \         table.insert(ret, val)\n            ret[val] = true\n        end\n \
    \   end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2ge3frj.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpx2ge3frj.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n\tif not\
    \ l then return {} end\n\tlocal unique = {}\n\tfor v in each(l) do\n\t\tif not\
    \ contains(unique, v) then\n\t\t\tunique[#unique+1] = v\n\t\tend\n\tend\n\treturn\
    \ unique\nend\nM.unique = unique\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz7lmriht.lua:14: attempt to index a nil value (global 'M')\n\
    stack traceback:\n\t/tmp/tmpz7lmriht.lua:14: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n\tlocal\
    \ res = {}\n\tfor _, v in ipairs(l) do\n\t\tif not find(res, v) then\n\t\t\tres[#res+1]\
    \ = v\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4oxnuf1p.lua:7:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmp4oxnuf1p.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4oxnuf1p.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    assert(isarray(l),\
    \ \"expected an array, got \" .. type(l))\n    local ret = {}\n    local seen\
    \ = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n          \
    \  table.insert(ret, v)\n            seen[v] = true\n        end\n    end\n  \
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy7gxgiw7.lua:5:\
    \ attempt to call a nil value (global 'isarray')\nstack traceback:\n\t/tmp/tmpy7gxgiw7.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpy7gxgiw7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n\tlocal\
    \ r = {}\n\tlocal has = {}\n\tfor _, v in ipairs(l) do\n\t\tif not has[v] then\n\
    \t\t\tr[#r+1] = v\n\t\t\thas[v] = true\n\t\tend\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not tcontains(r, v) then\n      tinsert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3py5djb_.lua:7:\
    \ attempt to call a nil value (global 'tcontains')\nstack traceback:\n\t/tmp/tmp3py5djb_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3py5djb_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ n = {}\n    for _, v in ipairs(l) do\n        n[v] = true\n    end\n    local\
    \ m = {}\n    for k, _ in pairs(n) do\n        m[#m + 1] = k\n    end\n    table.sort(m)\n\
    \    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    if\
    \ type(l) ~= \"table\" then return l end\n    local r = {}\n    for _,x in ipairs(l)\
    \ do\n        r[x] = x\n    end\n    local o = {}\n    for _,x in pairs(r) do\n\
    \        o[#o+1] = x\n    end\n    return o\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe31xci4d.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 9, 2, 3, 5, 123}\nstack traceback:\n\
    \t/tmp/tmpe31xci4d.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ out = {}\n    for _, v in ipairs(l) do\n        if not set.contains(out, v)\
    \ then\n            out[#out + 1] = v\n        end\n    end\n    table.sort(out)\n\
    \    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt3wbwu80.lua:7:\
    \ attempt to index a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpt3wbwu80.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt3wbwu80.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n\tlocal\
    \ a = {}\n\tfor _, v in ipairs(l) do\n\t\tif not a[v] then a[v] = true end\n\t\
    end\n\tlocal i = 0\n\treturn function()\n\t\ti = i + 1\n\t\tfor k, v in pairs(a)\
    \ do\n\t\t\tif i == 1 then return k end\n\t\t\ta[k] = nil\n\t\tend\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfoxcowu.lua:22:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: function: 0x1f07c10\nstack traceback:\n\
    \t/tmp/tmpmfoxcowu.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, x in ipairs(l) do\n    u[x] = true\n  end\n  return table.sortkeys(u)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkkpy88pd.lua:9:\
    \ attempt to call a nil value (field 'sortkeys')\nstack traceback:\n\t/tmp/tmpkkpy88pd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkkpy88pd.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  assert(type(l)\
    \ == \"table\", \"expected a table, got \" .. type(l))\n  local s = {}\n  for\
    \ k, v in pairs(l) do\n    if (not _indexOf(s, v)) then s[#s + 1] = v end\n  end\n\
    \  _sort(s)\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmxk3esd3.lua:8:\
    \ attempt to call a nil value (global '_indexOf')\nstack traceback:\n\t/tmp/tmpmxk3esd3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpmxk3esd3.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        r[v] = true\n    end\n    local\
    \ ri = 0\n    local rt = {}\n    for k, _ in pairs(r) do\n        ri = ri + 1\n\
    \        rt[ri] = k\n    end\n    table.sort(rt)\n    return rt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for i = 1, #l do\n        local elem = l[i]\n        if not contains(res,\
    \ elem) then\n            res[#res + 1] = elem\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp70ubqus3.lua:8:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp70ubqus3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp70ubqus3.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if r[v] == nil then\n        \
    \    r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxp6pfxm1.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpxp6pfxm1.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tr[v] = true\n\tend\n\treturn table.keys(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp66z0ep62.lua:9:\
    \ attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp66z0ep62.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp66z0ep62.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    local used = {}\n    for _, v in ipairs(l) do\n        if not\
    \ used[v] then\n            res[#res + 1] = v\n            used[v] = true\n  \
    \      end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_x5sl4l.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp1_x5sl4l.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
