language: lua
name: HumanEval_101_words_string
results:
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   local\
    \ words = {}\n   for w in s:gmatch('%S+') do\n      words[#words+1] = w\n   end\n\
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa38ajsml.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpa38ajsml.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ t = {}\n\tfor w in s:gmatch('%w+') do\n\t\tt[#t+1] = w\n\tend\n\treturn t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local ret = {}\n    for match in string.gmatch(s, '([^,%s]+)') do\n        table.insert(ret,\
    \ match)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  return\
    \ setmetatable(split(s, '%s*,%s*'), nil)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4wqtcayk.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp4wqtcayk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4wqtcayk.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tfor word in string.gmatch(s, '[^,%s]+') do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  local c = 1\n  local function f(s)\n    while s:sub(c, c) == ' ' do\n\
    \      c = c + 1\n    end\n    local match = s:match('(.-),', c)\n    if match\
    \ then\n      t[#t + 1] = match\n      c = c + #match + 1\n      return f(s)\n\
    \    else\n      t[#t + 1] = s:sub(c)\n      return t\n    end\n  end\n  return\
    \ f(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps07_kmet.lua:31:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    my name is John\"}\nstack traceback:\n\t/tmp/tmps07_kmet.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ l = {}\n  local s = s:gsub('%s*,%s*', ',')\n  for w in s:gmatch('([^,]+)') do\n\
    \    l[#l+1] = w\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2aymbxh.lua:20:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    my name is John\"}\nstack traceback:\n\t/tmp/tmpj2aymbxh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    local pattern = string.format('([^%s]+)', '%s,;')\n  \
    \  for word in string.gmatch(s, pattern) do\n        table.insert(words, word)\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ t = {}\n\tlocal w = \"\"\n\tfor i = 1, #s do\n\t\tlocal char = string.sub(s,\
    \ i, i)\n\t\tif char == \" \" or char == \",\" then\n\t\t\tif #w > 0 then\n\t\t\
    \t\ttable.insert(t, w)\n\t\t\t\tw = \"\"\n\t\t\tend\n\t\telse\n\t\t\tw = w ..\
    \ char\n\t\tend\n\tend\n\tif #w > 0 then\n\t\ttable.insert(t, w)\n\tend\n\treturn\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   return\
    \ string.split(s, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4kkccujb.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp4kkccujb.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4kkccujb.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in s:gmatch('%S+') do table.insert(words, word) end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvlkaduh.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpwvlkaduh.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ s = s .. \",\"\n    local words = {}\n    for word in s:gmatch(\"([^,]*),\"\
    ) do\n        table.insert(words, word)\n    end\n    return words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdp1h0d3t.lua:20:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmpdp1h0d3t.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ t = {}\n\ts:gsub(\"%S+\", function(v) t[#t+1] = v end)\n\treturn t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmv5i_x8.lua:17:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpwmv5i_x8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, '%S+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4pf79oi.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpk4pf79oi.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tfor w in s:gmatch('[^,%s]+') do\n\t\ttable.insert(words, w)\n\t\
    end\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4celxlm.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpa4celxlm.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return lpeg.split(lpeg.S(', '), s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyd6aa5hb.lua:9:\
    \ attempt to index a nil value (global 'lpeg')\nstack traceback:\n\t/tmp/tmpyd6aa5hb.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpyd6aa5hb.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    local pos = 1\n    local ind = string.find(s, '%s', pos)\n\
    \    while ind do\n        local word = string.sub(s, pos, ind - 1)\n        table.insert(words,\
    \ word)\n        pos = ind + 1\n        ind = string.find(s, '%s', pos)\n    end\n\
    \    if pos <= #s then\n        table.insert(words, string.sub(s, pos))\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09d2glxs.lua:27:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp09d2glxs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tfor word in s:gmatch('[^,%s]+') do\n\t\ttable.insert(words, word)\n\
    \tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\ts\
    \ = s:gsub('%s*$', '')\n\ts = s:gsub('%s+', ' ')\n\ts = s:gsub('([^,])%s+([^,])',\
    \ '%1,%2')\n\ts = s:gsub('([^,])%s+([^,])', '%1,%2')\n\treturn { lua:split(s,\
    \ ',') }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa342zart.lua:13:\
    \ attempt to index a nil value (global 'lua')\nstack traceback:\n\t/tmp/tmpa342zart.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpa342zart.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  for word in s:gmatch('%w+') do\n    t[#t+1] = word\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in string.gmatch(s, '%w+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in string.gmatch(s, '%S+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6lj9zio.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpl6lj9zio.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tif\
    \ s == nil then return {} end\n\tlocal function t(s)\n\t\tlocal w = {}\n\t\tlocal\
    \ k = 1\n\t\tfor v in string.gmatch(s, '([^%s,]+)') do\n\t\t\tw[k] = v\n\t\t\t\
    k = k + 1\n\t\tend\n\t\treturn w\n\tend\n\treturn t(s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ res = {}\n  for word in string.gmatch(s, '%w+') do\n    table.insert(res, word)\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ if s == nil then\n        error('Unable to parse a nil string')\n    end\n \
    \   local words = {}\n    for w in string.gmatch(s, '%S+') do\n        table.insert(words,\
    \ w)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpts79t17d.lua:22:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpts79t17d.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   local\
    \ words = {}\n   for word in s:gmatch('[^,%s]+') do\n      table.insert(words,\
    \ word)\n   end\n   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4celxlm.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpa4celxlm.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in string.gmatch(s, '%w+') do\n        table.insert(t,\
    \ w)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    local temp = ''\n    for i = 1, #s do\n        if s:sub(i,\
    \ i) == ' ' or s:sub(i, i) == ',' then\n            if temp ~= '' then\n     \
    \           table.insert(words, temp)\n                temp = ''\n           \
    \ end\n        else\n            temp = temp .. s:sub(i, i)\n        end\n   \
    \ end\n    if temp ~= '' then\n        table.insert(words, temp)\n    end\n  \
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for word in s:gmatch('%w+') do\n        table.insert(t, word)\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, '%S+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4pf79oi.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpk4pf79oi.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   local\
    \ t = {}\n   for w in s:gmatch('%S+') do\n      t[#t+1] = w\n   end\n   return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1w_g5sj.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpy1w_g5sj.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tfor word in s:gmatch('%S+') do\n\t\ttable.insert(words, word)\n\
    \tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgaw6wski.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpgaw6wski.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  return\
    \ split_string(s, '%s*[, ]%s*')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj8543hgc.lua:9:\
    \ attempt to call a nil value (global 'split_string')\nstack traceback:\n\t/tmp/tmpj8543hgc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpj8543hgc.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggp2560y.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpggp2560y.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   local\
    \ t = {}\n   for word in s:gmatch('[^,%s]+') do\n      t[#t+1] = word\n   end\n\
    \   return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for w in s:gmatch('%S+') do\n        table.insert(words,\
    \ w)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyif6ijo.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpiyif6ijo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggp2560y.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpggp2560y.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ if s == nil then\n        return {}\n    end\n    local t = {}\n    for w in\
    \ string.gmatch(s, '([^,%s]+)') do\n        table.insert(t, w)\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp536hzxiy.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp536hzxiy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in s:gmatch('%S+') do\n    table.insert(words, word)\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzm8lral.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpnzm8lral.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for word in s:gmatch('%w+') do\n        table.insert(t, word)\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tlocal i = 1\n\tfor word in s:gmatch('%w+') do\n\t\twords[i] =\
    \ word\n\t\ti = i + 1\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   local\
    \ words = {}\n   for word in s:gmatch('[^%s,]+') do\n      words[#words + 1] =\
    \ word\n   end\n   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    if s ~= nil then\n        for word in s:gmatch(\"%S+\") do\n\
    \            t[#t+1] = word\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtqjr9bl.lua:21:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpdtqjr9bl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp536hzxiy.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp536hzxiy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\treturn\
    \ split(s, '%s*[,%s]%s*')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5x1fdp6l.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp5x1fdp6l.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5x1fdp6l.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tif\
    \ type(s) ~= 'string' then return end\n\tlocal words = {}\n\tfor word in s:gmatch('[^%s]+')\
    \ do\n\t\ttable.insert(words, word)\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf42tcppc.lua:20:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpf42tcppc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in s:gmatch('[^,%s]+') do\n    words[#words + 1] = word\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tfor word in string.gmatch(s, \"%w+\") do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in s:gmatch('%w+') do\n    words[#words + 1] = word\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  assert(type(s)\
    \ == 'string')\n  local words = {}\n  for word in s:gmatch('%w+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    local i = 1\n    local word\n    repeat\n        word, i =\
    \ str_next_word(s, i)\n        if word then t[#t+1] = word end\n    until not\
    \ word\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpverxs1eu.lua:13:\
    \ attempt to call a nil value (global 'str_next_word')\nstack traceback:\n\t/tmp/tmpverxs1eu.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpverxs1eu.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return split(s, \"[, ]+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45hjjb0k.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp45hjjb0k.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp45hjjb0k.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ str = s\n\tlocal words = {}\n\tfor word in str:gmatch(\"%w+\") do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local strs = {}\n    local word = ''\n    for i = 1, #s do\n        if s:sub(i,\
    \ i) == ' ' or s:sub(i, i) == ',' then\n            if word ~= '' then\n     \
    \           table.insert(strs, word)\n                word = ''\n            end\n\
    \        else\n            word = word .. s:sub(i, i)\n        end\n    end\n\
    \    if word ~= '' then\n        table.insert(strs, word)\n    end\n    return\
    \ strs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  for m in s:gmatch('[^,%s]+') do\n    t[#t+1] = m\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp536hzxiy.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp536hzxiy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in s:gmatch('[^,%s]+') do\n        t[#t+1] = w\n   \
    \ end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, '%S+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4pf79oi.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpk4pf79oi.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in string.gmatch(s, '%w+') do\n        table.insert(t,\
    \ w)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  for w in s:gmatch('[^%s,]+') do\n    t[#t+1] = w\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for w in string.gmatch(s, '%g+') do\n    table.insert(words, w)\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomei5u2h.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpomei5u2h.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for str in string.gmatch(s, '([^,%s]+)') do\n        table.insert(words,\
    \ str)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ result = {}\n\tfor v in s:gmatch('%S+') do\n\t\ttable.insert(result, v)\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6s1585n8.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp6s1585n8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(t,\
    \ word)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in s:gmatch('%S+') do\n        t[#t+1] = w\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnzk1lv3.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpjnzk1lv3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  s:gsub('[^, ]+', function(x) table.insert(t, x) end)\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, '%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return string.split(s, '%s*[, ]%s*')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdzk9oq3i.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpdzk9oq3i.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdzk9oq3i.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local ret = {}\n    for word in s:gmatch('%w+') do\n        table.insert(ret,\
    \ word)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in s:gmatch('%w+') do\n    words[#words + 1] = word\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpde112g7x.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpde112g7x.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  if\
    \ s:len() == 0 then\n    return {}\n  end\n  return split(s, \",%s\")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxokmavwn.lua:12:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpxokmavwn.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxokmavwn.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ if not s then return {} end\n    local t = {}\n    for word in s:gmatch('[^,%s]+')\
    \ do\n        table.insert(t, word)\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for w in s:gmatch('[^,%s]+') do\n        table.insert(words,\
    \ w)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  return\
    \ strsplit(', ', s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkri9c3p.lua:9:\
    \ attempt to call a nil value (global 'strsplit')\nstack traceback:\n\t/tmp/tmpdkri9c3p.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdkri9c3p.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, '%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return string_words(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi54gh1sg.lua:9:\
    \ attempt to call a nil value (global 'string_words')\nstack traceback:\n\t/tmp/tmpi54gh1sg.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi54gh1sg.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for s in s:gmatch('%S+') do\n        table.insert(t, s)\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphauq9yle.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmphauq9yle.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ ret = {}\n\tfor word in s:gmatch('[^%s,]+') do\n\t\ttable.insert(ret, word)\n\
    \tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, '%S+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4pf79oi.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpk4pf79oi.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  --\
    \ Table to store the words\n  local words = {}\n  -- The current word (what we're\
    \ currently parsing)\n  local word = ''\n  -- The current character\n  local ch\
    \ = ''\n  -- The next character\n  local next_ch = ''\n  -- The index of the character\n\
    \  local i = 1\n  -- Do we need to skip a space?\n  local skip_space = false\n\
    \  -- The length of the string\n  local length = string.len(s)\n  while i <= length\
    \ do\n    -- Get the current character\n    ch = string.sub(s, i, i)\n    -- Get\
    \ the next character\n    next_ch = string.sub(s, i + 1, i + 1)\n    -- If the\
    \ current character is a space, and we don't need to skip the space,\n    -- then\n\
    \    if ch == ' ' and not skip_space then\n      -- Add the current word to the\
    \ list of words\n      table.insert(words, word)\n      -- Clear the current word\n\
    \      word = ''\n      -- Otherwise if the current character is a comma or a\
    \ space and we need to\n      -- skip a space\n    elseif (ch == ',' or ch ==\
    \ ' ') and skip_space then\n      -- Then, we don't need to skip a space any more\n\
    \      skip_space = false\n      -- If the current character is a comma and the\
    \ next character is a space,\n      -- then we need to skip a space\n    elseif\
    \ ch == ',' and next_ch == ' ' then\n      skip_space = true\n      -- Otherwise,\
    \ add the current character to the current word\n    else\n      word = word ..\
    \ ch\n    end\n    -- Increment the index\n    i = i + 1\n  end\n  -- If the current\
    \ word is not empty, then add it to the list of words\n  if word ~= '' then\n\
    \    table.insert(words, word)\n  end\n  -- Return the list of words\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm8qss58.lua:62:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Himy\", \"\
    name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpnm8qss58.lua:62: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local result = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(result,\
    \ word)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ -- your code here\n    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6w0p98g.lua:16:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpy6w0p98g.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    local word = ''\n    local is_word = false\n    for i\
    \ = 1, #s do\n        local b = s:sub(i, i)\n        if is_word then\n       \
    \     if b == ' ' or b == ',' then\n                table.insert(words, word)\n\
    \                word = ''\n                is_word = false\n            else\n\
    \                word = word .. b\n            end\n        else\n           \
    \ if b ~= ' ' and b ~= ',' then\n                word = word .. b\n          \
    \      is_word = true\n            end\n        end\n    end\n    if is_word then\n\
    \        table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    local i = 1\n    while i < #s do\n        local b, e = s:find('%w+',\
    \ i)\n        if b then\n            t[#t + 1] = s:sub(b, e)\n            i =\
    \ e + 1\n        else\n            break\n        end\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for w in string.gmatch(s, '%g+') do\n    table.insert(words, w)\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomei5u2h.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpomei5u2h.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in s:gmatch('%w+') do\n        t[#t+1] = w\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ tokens = {}\n  for token in s:gmatch('%w+') do\n    table.insert(tokens, token)\n\
    \  end\n  return tokens\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ result = {}\n  for w in string.gmatch(s, \"%w+\") do\n    table.insert(result,\
    \ w)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for w in string.gmatch(s, '%w+') do\n    table.insert(words, w)\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in s:gmatch('%S+') do\n        t[#t+1] = w\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnzk1lv3.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpjnzk1lv3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for word in s:gmatch('%w+') do\n        table.insert(t, word)\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpde112g7x.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpde112g7x.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj22dffj3.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpj22dffj3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, '%g+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdkg6ljc.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmppdkg6ljc.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for w in s:gmatch('%w+') do\n    words[#words + 1] = w\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ t = {}\n\tlocal i = 1\n\t\n\ts = s..','\n\tfor word in s:gmatch('(.-),') do\n\
    \t\tt[i] = word\n\t\ti = i + 1\n\tend\n\t\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k3yg3h6.lua:24:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmp1k3yg3h6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tlocal index = 1\n\tfor w in s:gmatch('%g+') do\n\t\twords[index]\
    \ = w\n\t\tindex = index + 1\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7o13sz_4.lua:21:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp7o13sz_4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local i = 0\n    local t = {}\n    for word in s:gmatch('%w+') do\n        i\
    \ = i + 1\n        t[i] = word\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for w in string.gmatch(s, \"%S+\") do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05_gb7to.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp05_gb7to.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    local pattern = '(%w+)'\n    string.gsub(s, pattern, function(w)\
    \ table.insert(words, w) end)\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggp2560y.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpggp2560y.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   local\
    \ t = {}\n   local i = 1\n   while i <= #s do\n      if string.match(s, '^%s',\
    \ i) then\n         i = i + 1\n      else\n         local j = string.find(s, '[%s,]',\
    \ i)\n         if j then\n            table.insert(t, string.sub(s, i, j-1))\n\
    \            i = j + 1\n         else\n            table.insert(t, string.sub(s,\
    \ i))\n            i = #s + 1\n         end\n      end\n   end\n   return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kpgyrmm.lua:34:\
    \ expected: {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\nactual:\
    \ {\"One\", \"\", \"two\", \"three\", \"four\", \"five\", \"six\"}\nstack traceback:\n\
    \t/tmp/tmp4kpgyrmm.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for w in string.gmatch(s, \"%w+\") do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, \"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ if not s then return {} end\n    local res = {}\n    for word in s:gmatch('%w+')\
    \ do\n        table.insert(res, word)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ -- strip off leading and trailing whitespace and then split the string\n   \
    \ -- into a table of words\n    return string.split(string.trim(s), '[%s,]+')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpktzuhqe9.lua:11:\
    \ attempt to call a nil value (field 'trim')\nstack traceback:\n\t/tmp/tmpktzuhqe9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpktzuhqe9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\treturn\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps494y_xm.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmps494y_xm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  if string.find(s, \",\") then\n    for word in string.gmatch(s, \"\
    [^,]+\") do\n      table.insert(t, word)\n    end\n  else\n    for word in string.gmatch(s,\
    \ \"[^%s]+\") do\n      table.insert(t, word)\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd40bvbjk.lua:25:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my name is John\"}\nstack traceback:\n\t/tmp/tmpd40bvbjk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local r = {}\n    for word in s:gmatch('%w+') do\n        r[#r + 1] = word\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tlocal pattern = ''\n\tif s:match('%,%s') then\n\t\tpattern = '%S+%s'\n\
    \telse\n\t\tpattern = '%S+'\n\tend\n\tfor word in s:gmatch(pattern) do\n\t\ttable.insert(words,\
    \ word:gsub(' ', ''))\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj1srpk19.lua:17:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpj1srpk19.lua:17: in local 'candidate'\n\t/tmp/tmpj1srpk19.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\treturn\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps494y_xm.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmps494y_xm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for word in s:gmatch('%w+') do\n        table.insert(t, word)\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ words = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tfor word in s:gmatch('[^%s]+') do\n\t\ttable.insert(words, word)\n\
    \tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qtr6533.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp0qtr6533.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  --\
    \ TODO: Implement this function.\n  local words = {}\n  local index = 1\n  local\
    \ word = \"\"\n  local whitespace = \" \"\n  local comma = \",\"\n  for i = 1,\
    \ string.len(s) do\n    local c = string.sub(s, i, i)\n    if c == whitespace\
    \ or c == comma then\n      if word ~= \"\" then\n        words[index] = word\n\
    \        index = index + 1\n        word = \"\"\n      end\n    else\n      word\
    \ = word .. c\n    end\n  end\n  if word ~= \"\" then\n    words[index] = word\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local c = {}\n    for s in s:gmatch('%S+') do\n        c[#c+1] = s\n    end\n\
    \    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyp3l8d4.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpyyp3l8d4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local s = s:gsub('^%s*(.-)%s*$', '%1')\n    local t = {}\n    for word in s:gmatch('[^%s,]+')\
    \ do\n        t[#t + 1] = word\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for w in s:gmatch('%S+') do\n    words[#words + 1] = w\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9r0vgeo.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpe9r0vgeo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\t--\
    \ split the string into words\n\tlocal words = {}\n\tlocal start_index = 1\n\t\
    local last_space_index = 1\n\t\n\tfor i = 1, #s do\n\t\tif s:sub(i, i) == ' '\
    \ or s:sub(i, i) == ',' then\n\t\t\t-- Check if it's not a consecutive space\n\
    \t\t\tif i ~= last_space_index + 1 then\n\t\t\t\t-- Insert the word between the\
    \ last space and the current space\n\t\t\t\twords[#words + 1] = s:sub(start_index,\
    \ i - 1)\n\t\t\t\tstart_index = i + 1\n\t\t\tend\n\t\t\tlast_space_index = i\n\
    \t\tend\n\tend\n\t\n\t-- Insert the last word\n\twords[#words + 1] = s:sub(start_index,\
    \ #s)\n\t\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps184phsr.lua:35:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\
    \ my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmps184phsr.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return split(s, \",%s*\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwcboihh.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpuwcboihh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpuwcboihh.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in string.gmatch(s, '%S+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6lj9zio.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpl6lj9zio.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp69h03y_.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpp69h03y_.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ pattern = '[^,%s]+'\n  local t = {}\n  for word in string.gmatch(s, pattern)\
    \ do\n    table.insert(t, word)\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return string.tokenize(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0fh7xbl.lua:9:\
    \ attempt to call a nil value (field 'tokenize')\nstack traceback:\n\t/tmp/tmp_0fh7xbl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_0fh7xbl.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return string.split(s, '%s+')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp59bhu4hp.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp59bhu4hp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp59bhu4hp.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in s:gmatch('%w+') do\n    words[#words + 1] = word\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in s:gmatch('%S+') do\n        t[#t+1] = w\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnzk1lv3.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpjnzk1lv3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in s:gmatch('%S+') do\n        t[#t+1] = w\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnzk1lv3.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpjnzk1lv3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return split(s, ', ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplt60oqvr.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmplt60oqvr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplt60oqvr.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for w in s:gmatch('[^ ,]+') do\n    words[#words + 1] = w\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for w in string.gmatch(s, '[^,%s]+') do\n        table.insert(words,\
    \ w)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  for w in s:gmatch('[^,%s]+') do\n    t[#t+1] = w\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tlocal pattern = '([^,%s]+)'\n\ts:gsub(pattern, function(w) table.insert(words,\
    \ w) end)\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in string.gmatch(s, \"[^%s,]+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in string.gmatch(s, \"%S+\") do\n        table.insert(t,\
    \ w)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirtqd12z.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpirtqd12z.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  local current = ''\n  for i = 1, #s do\n    local char = s:sub(i,\
    \ i)\n    if char == ' ' or char == ',' then\n      table.insert(words, current)\n\
    \      current = ''\n    else\n      current = current .. char\n    end\n  end\n\
    \  table.insert(words, current)\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_6t6ebp.lua:27:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi\", \"\"\
    , \"my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpr_6t6ebp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\treturn\
    \ luawt.util.string.parseWords(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp461zm72p.lua:9:\
    \ attempt to index a nil value (global 'luawt')\nstack traceback:\n\t/tmp/tmp461zm72p.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp461zm72p.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return setmetatable(split(s), nil)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_dp_3dfi.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp_dp_3dfi.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_dp_3dfi.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\treturn\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps494y_xm.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmps494y_xm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for w in string.gmatch(s, '[^%s,]+') do\n        table.insert(words,\
    \ w)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  for w in s:gmatch('[^,%s]+') do\n    t[#t+1] = w\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for w in s:gmatch('%S+') do\n    words[#words + 1] = w\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9r0vgeo.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpe9r0vgeo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local l = {}\n    for x in s:gmatch(\"%S+\") do\n        l[#l+1] = x\n    end\n\
    \    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis8z5khw.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpis8z5khw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tfor match in string.gmatch(s, \"[^,%s]+\") do\n\t\ttable.insert(words,\
    \ match)\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    local it = s:gmatch('[^ ,]+')\n    for w in it do table.insert(words,\
    \ w) end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ ws = {}\n  for w in string.gmatch(s, \"%S+\") do\n    table.insert(ws, w)\n\
    \  end\n  return ws\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1l_4qc9.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpd1l_4qc9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    s:gsub('[^,%s]+', function(w) table.insert(t, w) end)\n  \
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tif\
    \ not s then return {} end\n\tlocal words = {}\n\tfor w in string.gmatch(s, '([^,%s]+)')\
    \ do\n\t\ttable.insert(words, w)\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('[^%s,]+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in s:gmatch('%w+') do\n    words[#words + 1] = word\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in s:gmatch('[^%s,]+') do\n    words[#words + 1] = word\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\treturn\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps494y_xm.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmps494y_xm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local r = {}\n    local i = 1\n    for w in s:gmatch('[^,%s]+') do\n       \
    \ r[i] = w\n        i = i + 1\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\t--[[\n\
    \tassert(\n\t\ttype(s) == 'string',\n\t\t\"Bad argument to 'words_string' (string\
    \ expected, got \" .. type(s) .. \")\"\n\t)\n\t--]]\n\tlocal temp = {}\n\tlocal\
    \ i = 1\n\twhile i <= #s do\n\t\tlocal ws, we = s:find('[^%s]+', i)\n\t\tif ws\
    \ then\n\t\t\ttable.insert(temp, s:sub(ws, we))\n\t\t\ti = we + 1\n\t\telse\n\t\
    \t\tbreak\n\t\tend\n\tend\n\treturn temp\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplk4o_7hu.lua:32:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmplk4o_7hu.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  for word in s:gmatch('%g+') do\n    t[#t+1] = word\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3w9v4sbw.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp3w9v4sbw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp536hzxiy.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp536hzxiy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  return\
    \ {s:match((s:gsub(\"%s*([^%s,]+)\", \" %1\")))}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08qwo_ut.lua:15:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp08qwo_ut.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ word_table = {}\n  local word_count = 0\n  s = s .. \",\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd9qnk93r.lua:24: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in s:gmatch('%w+') do\n    words[#words + 1] = word\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  for w in s:gmatch('[^,%s]+') do\n    t[#t+1] = w\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for word in s:gmatch('%w+') do\n        table.insert(t, word)\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for w in s:gmatch('%w+') do\n        table.insert(words,\
    \ w)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in string.gmatch(s, \"%a+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(t,\
    \ word)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ words = {}\n  for word in string.gmatch(s, \"[^%s,]+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ a = {}\n  for word in s:gmatch('%w+') do a[#a+1] = word end\n  return a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ ret = {}\n\tfor i in string.gmatch(s, '([^,%s]+)') do\n\t\ttable.insert(ret,\
    \ i)\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  return\
    \ type(s) == 'string' and _M.words(s) or {s}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp38nlw_wy.lua:9:\
    \ attempt to index a nil value (global '_M')\nstack traceback:\n\t/tmp/tmp38nlw_wy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp38nlw_wy.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  if\
    \ type(s) ~= 'string' then\n    return {}\n  end\n  s = s:gsub('[%s,]+', ' ')\n\
    \  return iterate(s:gmatch('%S+'))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2hp9nc9u.lua:13:\
    \ attempt to call a nil value (global 'iterate')\nstack traceback:\n\t/tmp/tmp2hp9nc9u.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2hp9nc9u.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\tfor word in s:gmatch('%w+') do\n\t\ttable.insert(words, word)\n\
    \tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in s:gmatch('%w+') do\n        t[#t+1] = w\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  if\
    \ not s then return {} end\n  local words = {}\n  for word in string.gmatch(s,\
    \ '[^,%s]+') do\n    words[#words + 1] = word\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
    \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
    \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'),\
    \ {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ return l.split(s, \"%s+\", nil, true)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp66vt29zr.lua:9:\
    \ attempt to index a nil value (global 'l')\nstack traceback:\n\t/tmp/tmp66vt29zr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp66vt29zr.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ words = {}\n\t\n\tfor word in s:gmatch('%S+') do\n\t\ttable.insert(words, word)\n\
    \tend\n\t\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xplks4z.lua:21:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp4xplks4z.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  --\
    \ Split the string.\n  local words = {}\n  for word in string.gmatch(s, '[^,%s]+')\
    \ do\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  local\
    \ t = {}\n  for word in s:gmatch('%w+') do\n    t[#t+1] = word\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979235
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for w in s:gmatch('%w+') do\n        table.insert(words,\
    \ w)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tif\
    \ not s then return end\n\tlocal t = {}\n\tfor word in s:gmatch('%w+') do\n\t\t\
    table.insert(t, word)\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local res = {}\n    for word in string.gmatch(s, '%S+') do\n        table.insert(res,\
    \ word)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wac9_uy.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmp3wac9_uy.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979236
- exit_code: 0
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local t = {}\n    for w in string.gmatch(s, \"%w+\") do\n        table.insert(t,\
    \ w)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ local words = {}\n    for word in s:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is\
    \ John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggp2560y.lua:19:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpggp2560y.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979235
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n  if\
    \ s:match('^$') then\n    return {}\n  else\n    local result = {}\n    for match\
    \ in s:gmatch('%S+') do\n      table.insert(result, match)\n    end\n    return\
    \ result\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'),\
    \ {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two,\
    \ three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3k4jmes.lua:23:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {\"Hi,\", \"\
    my\", \"name\", \"is\", \"John\"}\nstack traceback:\n\t/tmp/tmpd3k4jmes.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n\tlocal\
    \ t = {}\n\tlocal i = 1\n\twhile i <= #s do\n\t\tlocal si = s:find(' ', i)\n\t\
    \tlocal ci = s:find(',', i)\n\t\tif (si == nil or ci ~= nil) and ci ~= i then\n\
    \t\t\tsi = ci\n\t\tend\n\t\tif si ~= nil then\n\t\t\tlocal word = s:sub(i, si\
    \ - 1)\n\t\t\tif word ~= '' then\n\t\t\t\ttable.insert(t, word)\n\t\t\tend\n\t\
    \t\ti = si + 1\n\t\telse\n\t\t\tlocal word = s:sub(i)\n\t\t\tif word ~= '' then\n\
    \t\t\t\ttable.insert(t, word)\n\t\t\tend\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi',\
    \ 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three,\
    \ four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi,\
    \ my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two,\
    \ three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply6bqpn1.lua:38:\
    \ expected: {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\nactual:\
    \ {\"One\", \" two\", \" three\", \" four\", \" five\", \"six\"}\nstack traceback:\n\
    \t/tmp/tmply6bqpn1.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979236
- exit_code: 1
  program: "-- You will be given a string of words separated by commas or spaces.\
    \ Your task is\n-- to split the string into words and return a table of the words.\n\
    -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
    \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
    \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n   \
    \ -- TODO: Implement\n    return {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi,\
    \ my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One,\
    \ two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,,\
    \ two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed\
    \     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_k_1x6kc.lua:16:\
    \ expected: {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp_k_1x6kc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979236
