name: HumanEval_55_fib
language: lua
results:
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n <= 1 then\n    return\
    \ n\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local a, b = 0, 1\n  while\
    \ n > 0 do\n    a, b = b, a + b\n    n = n - 1\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local a, b = 0, 1\n  for\
    \ i = 1, n do\n    a, b = b, a + b\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 2 then\n\t\treturn\
    \ n\n\tend\n\treturn fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local a, b = 0, 1\n  for\
    \ i = 1, n do\n    a, b = b, a + b\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local a, b = 0, 1\n  for\
    \ i = 1, n do\n    a, b = b, a + b\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n < 2 then\n       \
    \ return n\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n \
    \   lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local x = 0\n  local y =\
    \ 1\n  for i = 1, n do\n    x, y = y, x + y\n  end\n  return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tlocal a, b = 0, 1\n\tfor\
    \ i = 1, n do\n\t\ta, b = b, a + b\n\tend\n\treturn a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  local t = {}\n  t[1] = 1\n\
    \  t[2] = 1\n  for i = 3, n do\n    t[i] = t[i-1] + t[i-2]\n  end\n  return t[n]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n <= 1 then\n      \
    \  return n\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n\tif n < 1 then\n\t\treturn\
    \ 0\n\telseif n == 1 then\n\t\treturn 1\n\telse\n\t\treturn fib(n-1) + fib(n-2)\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n\
    \        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy763b7ps.lua:15:\
    \ expected: 55, actual: 10\nstack traceback:\n\t/tmp/tmpy763b7ps.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n <= 1 then\n      \
    \  return n\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n == 1 or n == 2 then\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n <= 2 then\n      \
    \  return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n <= 1 then\n      \
    \  return n\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
