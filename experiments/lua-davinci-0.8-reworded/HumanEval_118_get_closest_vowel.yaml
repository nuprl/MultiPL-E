name: HumanEval_118_get_closest_vowel
language: lua
prompt: "-- You are given a word. Your task is to find the closest vowel that stands\
  \ between \n-- two consonants from the right side of the word (case sensitive).\n\
  -- Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n-- find any vowel met the above condition. \n-- You may assume that the\
  \ given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
  -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
  -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
  \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
  \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
  \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
  \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
  \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
  \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
  \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- Write your code here\n    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    for i = #word, 2, -1 do\n        local front, back = word:sub(i -\
    \ 1, i - 1), word:sub(i, i)\n        if not back:find('[aeiou]') and back:find('[A-Za-z]')\
    \ and not front:find('[aeiou]') and front:find('[A-Za-z]') then\n            return\
    \ back\n        end\n    end\n    return ''\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local vowels_str = 'aeiou'\n    local word_size = string.len(word)\n\
    \    local closest_vowel = ''\n    local found_vowel = false\n    local found_consonant\
    \ = false\n    local last_consonant = ''\n    local last_consonant_index = 0\n\
    \    for i = 1, word_size do\n        local char = string.sub(word, i, i)\n  \
    \      local is_vowel = string.find(vowels_str, char)\n        if is_vowel then\n\
    \            if found_consonant then\n                found_vowel = true\n   \
    \             if i - last_consonant_index < 3 then\n                    closest_vowel\
    \ = char\n                end\n            end\n        else\n            if found_vowel\
    \ then\n                last_consonant = char\n                last_consonant_index\
    \ = i\n                found_vowel = false\n            end\n        end\n   \
    \ end\n    return closest_vowel\nend", "  for i = #word - 1, 1, -1 do\n    local\
    \ right = word:sub(i, i)\n    local left = word:sub(i - 1, i - 1)\n    if is_consonant(right)\
    \ and is_consonant(left) then\n      return left\n    end\n  end\n  return ''\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local is_consonant =\
    \ function(ch)\n        return not in_arr(vowels, ch)\n    end\n    local offset\
    \ = 0\n    local last_index\n    while offset < #word do\n        local index\
    \ = #word - offset\n        if is_consonant(word:sub(index, index)) then\n   \
    \         if last_index and is_consonant(word:sub(index - 1, index - 1)) then\n\
    \                return word:sub(index, index)\n            end\n            last_index\
    \ = index\n        end\n        offset = offset + 1\n    end\n    return ''\n\
    end", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal ret = ''\n\tlocal index\
    \ = 0\n\tlocal state = 1\n\tlocal i = 0\n\tfor i = #word, 1, -1 do\n\t\tif state\
    \ == 1 then\n\t\t\tif table.indexof(vowels, word:sub(i, i)) ~= -1 then\n\t\t\t\
    \tstate = 2\n\t\t\tend\n\t\telseif state == 2 then\n\t\t\tif table.indexof(vowels,\
    \ word:sub(i, i)) == -1 then\n\t\t\t\tret = word:sub(i + 1, i + 1)\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn ret\nend", "    -- TODO: implement this function\n\
    end", "\tlocal vowels = \"aeiouAEIOU\"\n\tlocal consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n\tfor i = #word, 1, -1 do\n\t\tlocal char = word:sub(i, i)\n\t\tif vowels:find(char)\
    \ then\n\t\t\tif i == #word then return \"\" end\n\t\t\tif consonants:find(word:sub(i+1,\
    \ i+1)) then\n\t\t\t\treturn char\n\t\t\tend\n\t\tend\n\tend\n\treturn \"\"\n\
    end", "  local vowels = 'aeiouAEIOU'\n  local position = #word\n  while position\
    \ > 0 do\n    local char = word:sub(position, position)\n    if vowels:find(char)\
    \ then\n      local prev_char = word:sub(position - 1, position - 1)\n      if\
    \ prev_char == nil or vowels:find(prev_char) == nil then\n        return char\n\
    \      end\n    end\n    position = position - 1\n  end\n  return ''\nend", " \
    \ local vowel = \"aeiouAEIOU\"\n  local l = string.len(word)\n  for i = l,2,-1\
    \ do\n    if string.find(vowel,string.sub(word,i,i)) then\n      if not string.find(vowel,string.sub(word,i-1,i-1))\
    \ then\n        return string.sub(word,i,i)\n      end\n    end\n  end\n  return\
    \ \"\"\nend", end, "  if not word or word == '' then\n    return ''\n  end\n \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local len = #word\n  local pos =\
    \ 0\n  local rword = string.reverse(word)\n  local left = nil\n  local right =\
    \ nil\n  local result = ''\n  for i=1, len do\n    left = string.sub(rword, i,\
    \ i)\n    right = string.sub(rword, i+1, i+1)\n    if left and right then\n  \
    \    if not contains(vowels, left) and not contains(vowels, right) then\n    \
    \    result = left\n        break\n      end\n    end\n  end\n  return result\n\
    end", "    for i = #word,1,-1 do\n        local index = word:sub(i,i)\n      \
    \  if index == 'a' or index == 'e' or index == 'i' or index == 'o' or index ==\
    \ 'u' or\n            index == 'A' or index == 'E' or index == 'I' or index ==\
    \ 'O' or index == 'U' then\n            return index\n        end\n    end\n \
    \   return ''\nend", "  if #word < 2 then\n    return ''\n  end\n  local length\
    \ = #word\n  local closest_vowel = ''\n  local length_to_vowel = length\n  for\
    \ i = length, 2, -1 do\n    local char = word:sub(i, i)\n    if char == 'a' or\
    \ char == 'e' or char == 'i' or char == 'o' or char == 'u' or\n       char ==\
    \ 'A' or char == 'E' or char == 'I' or char == 'O' or char == 'U' then\n     \
    \ if i < length_to_vowel then\n        closest_vowel = char\n        length_to_vowel\
    \ = i\n      end\n    end\n  end\n  return closest_vowel\nend", "\tlocal vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n\tlocal consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \tlocal closest_vowel = ''\n\tlocal closest_index = nil\n\tlocal vowel_index =\
    \ nil\n\tfor i = #word, 1, -1 do\n\t\tfor _, v in ipairs(vowels) do\n\t\t\tif\
    \ word:sub(i, i) == v then\n\t\t\t\tvowel_index = i\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\t\tif vowel_index then\n\t\t\tfor _, v in ipairs(consonants) do\n\t\t\
    \t\tif word:sub(i, i) == v then\n\t\t\t\t\tif i > vowel_index then\n\t\t\t\t\t\
    \tclosest_index = i\n\t\t\t\t\t\tclosest_vowel = word:sub(vowel_index, vowel_index)\n\
    \t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif closest_index\
    \ then\n\t\t\tbreak\n\t\tend\n\tend\n\treturn closest_vowel\nend", "  \nend",
  "  if #word < 2 then return '' end\n  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n\
    \  local rev_w = string.reverse(word)\n  local prev = ''\n  for i=1,#rev_w do\n\
    \    if prev == '' then\n      if table.contains(vowels, rev_w:sub(i,i)) then\n\
    \        prev = rev_w:sub(i,i)\n      end\n    else\n      if table.contains(vowels,\
    \ rev_w:sub(i,i)) then\n        return prev\n      else\n        prev = ''\n \
    \     end\n    end\n  end\n  return ''\nend", "\t--[[\n\t-- if beginning and ending\
    \ of a word doesn't count, then split the word\n\t-- into a list of characters\
    \ and loop through the middle portion only\n\t-- return '' if the entire word\
    \ is a vowel; otherwise, return ''\n\tlocal list = {}\n\tfor c in word:gmatch(\"\
    .\") do\n\t\ttable.insert(list, c)\n\tend\n\tif #list < 3 then return '' end\n\
    \tlocal result = ''\n\tfor i = 2, #list - 1 do\n\t\tif not is_vowel(list[i]) then\n\
    \t\t\tif is_vowel(list[i-1]) and is_vowel(list[i+1]) then\n\t\t\t\tresult = list[i]\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\t--]]\n\t\n\t-- the\
    \ string.match() function returns the longest match and the start\n\t-- position\
    \ of the match for a given pattern\n\tlocal s, e = string.match(word, \"[^aeiouAEIOU]+([aeiouAEIOU]+)[^aeiouAEIOU]+\"\
    )\n\tif s and e then\n\t\treturn e\n\telse\n\t\treturn ''\n\tend\nend", "    --\
    \ TODO: return the closest vowel that stands between two consonants from the right\n\
    \    -- side of the word\n    -- For example, the closest vowel in yogurt is 'u'\n\
    \    -- The function is case sensitive, so the closest vowel in FULL is 'U'\n\
    \    -- The function should return empty string if no vowel stands between consonants.\n\
    \    -- For example, the closest vowel in quick is '', because there is no vowel\
    \ between\n    -- consonants.\n    -- You may assume that the given string contains\
    \ English letter only.\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ prev_i, prev_is_vowel, curr_i, curr_is_vowel\n  for i=1, #word do\n    prev_i\
    \ = #word - i\n    prev_is_vowel = false\n    curr_i = #word - i + 1\n    curr_is_vowel\
    \ = false\n    for _, char in ipairs(vowels) do\n      if word:sub(prev_i, prev_i)\
    \ == char then\n        prev_is_vowel = true\n      end\n      if word:sub(curr_i,\
    \ curr_i) == char then\n        curr_is_vowel = true\n      end\n    end\n   \
    \ if prev_is_vowel == false and curr_is_vowel == true then\n      return word:sub(curr_i,\
    \ curr_i)\n    end\n  end\n  return ''\nend", "    local result = ''\n    local\
    \ pos = word:len()\n    local vowel = false\n    while pos > 0 do\n        local\
    \ c = word:sub(pos, pos)\n        if string.find(c, '[aeiouAEIOU]') then\n   \
    \         if not vowel then\n                vowel = true\n            else\n\
    \                result = c\n                break\n            end\n        else\n\
    \            vowel = false\n        end\n        pos = pos - 1\n    end\n    return\
    \ result\nend", "    local vowels = 'aeiouAEIOU'\n    local ind, lw = 0, #word\n\
    \    local inLeft, inRight = false, false\n    local closest, closetInd = '',\
    \ 0\n    for i = lw, 1, -1 do\n        ind = string.find(vowels, word:sub(i, i))\n\
    \        if ind ~= nil then\n            if i ~= 1 and i ~= lw then\n        \
    \        inLeft = string.find(vowels, word:sub(i - 1, i - 1)) == nil\n       \
    \         inRight = string.find(vowels, word:sub(i + 1, i + 1)) == nil\n     \
    \           if inLeft and inRight then\n                    closest = word:sub(i,\
    \ i)\n                    closetInd = i\n                    break\n         \
    \       end\n            end\n        end\n    end\n    return closest\nend\n\
    print('get_closest_vowel', get_closest_vowel('yogurt'))\nprint('get_closest_vowel',\
    \ get_closest_vowel('FULL'))\nprint('get_closest_vowel', get_closest_vowel('quick'))\n\
    print('get_closest_vowel', get_closest_vowel('ab'))", "  -- TODO: implement me!\n\
    end", end, end, "    if not word then\n        return ''\n    end\n    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    for i = #word, 1, -1 do\n        local char\
    \ = word:sub(i, i)\n        if not tb.contains(vowels, char) then\n          \
    \  -- not vowel\n            local next_char = word:sub(i + 1, i + 1)\n      \
    \      if tb.contains(vowels, next_char) then\n                return next_char\n\
    \            end\n        end\n    end\n    return ''\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local res = ''\n    local vowel_count = 0\n\
    \    for i = #word, 1, -1 do\n        if vowel_count == 2 then\n            break\n\
    \        end\n        if vowels[word:sub(i, i)] then\n            vowel_count\
    \ = vowel_count + 1\n            res = word:sub(i, i)\n        end\n    end\n\
    \    return res\nend", "    local vowel = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ pos = 0\n    local index = 0\n    local tmp = 0\n    local ret = ''\n    if\
    \ word == nil then\n        return ''\n    end\n    -- loop the word\n    for\
    \ i = 1, word:len() do\n        if index == 0 then\n            if table.contains(vowel,\
    \ word:sub(i, i)) then\n                tmp = i\n            else\n          \
    \      index = i\n            end\n        else\n            if table.contains(vowel,\
    \ word:sub(i, i)) then\n                if i < index and tmp ~= 0 then\n     \
    \               pos = tmp\n                else\n                    pos = i\n\
    \                end\n                break\n            end\n        end\n  \
    \  end\n    if pos ~= 0 then\n        ret = word:sub(pos, pos)\n    end\n    return\
    \ ret\nend", "    -- TODO: Write your code here\n    return ''\nend", "    local\
    \ w = string.reverse(word)\n    local v = string.find(w, '[AEIOUaeiou]')\n   \
    \ local c = string.find(w, '[^AEIOUaeiou]')\n    if not v or not c or c <= v then\n\
    \        return ''\n    end\n    return string.sub(w, v, v)\nend", "    -- your\
    \ code here\nend", "    local result = nil\n    local distance = 0\n    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local word_length = word:len()\n   \
    \ for vowel in vowels do\n        local last_vowel_pos = word:find(vowel, 1, true)\n\
    \        while last_vowel_pos do\n            local left_char = last_vowel_pos\
    \ - 1\n            local right_char = last_vowel_pos + 1\n            local is_valid\
    \ = false\n            if left_char > 0 and right_char <= word_length then\n \
    \               is_valid = true\n                for i = 1, #vowels do\n     \
    \               if vowels[i] == word:sub(left_char, left_char) or vowels[i] ==\
    \ word:sub(right_char, right_char) then\n                        is_valid = false\n\
    \                        break\n                    end\n                end\n\
    \            end\n            if is_valid then\n                local temp_distance\
    \ = right_char - last_vowel_pos\n                if distance == 0 or temp_distance\
    \ < distance then\n                    distance = temp_distance\n            \
    \        result = vowel\n                end\n            end\n            last_vowel_pos\
    \ = word:find(vowel, last_vowel_pos + 1, true)\n        end\n    end\n    return\
    \ result or ''\nend", "    local previous_is_consonant = false\n    local distance\
    \ = 999\n    local answer = ''\n    for i = word:len(), 1, -1 do\n        local\
    \ c = word:sub(i, i)\n        if not previous_is_consonant and is_vowel(c) then\n\
    \            break\n        elseif previous_is_consonant and is_vowel(c) then\n\
    \            if distance > word:len() - i then\n                distance = word:len()\
    \ - i\n                answer = c\n            end\n        end\n        previous_is_consonant\
    \ = not is_vowel(c)\n    end\n    return answer\nend", "  \nend", "\tlocal closest_vowel\
    \ = ''\n\t\n\tlocal word_len = #word\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \tlocal vowel_count = 0\n\t\n\tfor i = word_len, 1, -1 do\n\t\tlocal char = word:sub(i,\
    \ i)\n\t\t\n\t\tif char == 'a' or char == 'e' or char == 'i' or char == 'o' or\
    \ char == 'u' then\n\t\t\tvowel_count = vowel_count + 1\n\t\t\t\n\t\t\tif vowel_count\
    \ == 2 then\n\t\t\t\tclosest_vowel = char\n\t\t\t\tbreak\n\t\t\tend\n\t\telse\n\
    \t\t\tvowel_count = 0\n\t\tend\n\tend\n\t\n\treturn closest_vowel\nend", "\tfor\
    \ i = string.len(word), 2, -1 do\n\t\tif (string.sub(word, i, i) == 'a' or string.sub(word,\
    \ i, i) == 'e' or string.sub(word, i, i) == 'i' or string.sub(word, i, i) == 'o'\
    \ or string.sub(word, i, i) == 'u') and (string.sub(word, i - 1, i - 1) ~= 'a'\
    \ and string.sub(word, i - 1, i - 1) ~= 'e' and string.sub(word, i - 1, i - 1)\
    \ ~= 'i' and string.sub(word, i - 1, i - 1) ~= 'o' and string.sub(word, i - 1,\
    \ i - 1) ~= 'u') then\n\t\t\treturn string.sub(word, i, i)\n\t\tend\n\tend\n\t\
    return ''\nend", "  local vowel_pairs = {a='A', e='E', i='I', o='O', u='U'}\n\
    \  local last_vowel = ''\n  local last_consonant = ''\n  for i = 1, #word do\n\
    \    local char = word:sub(i, i)\n    if vowel_pairs[char] then\n      last_vowel\
    \ = char\n    else\n      if last_vowel ~= '' then\n        last_consonant = char\n\
    \      end\n    end\n  end\n  if last_vowel ~= '' and last_consonant ~= '' then\n\
    \    return last_vowel\n  end\n  return ''\nend", "    if word:match('[aeiouAEIOU]')\
    \ == nil then\n        return ''\n    end\n    local pattern = '[^aeiouAEIOU]*[aeiouAEIOU][^aeiouAEIOU]*'\n\
    \    return word:match(pattern)\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local word_len = #word\n  for i = word_len, 1, -1 do\n    if is_vowel(word:sub(i,\
    \ i)) then\n      for j = i - 1, 1, -1 do\n        if is_vowel(word:sub(j, j))\
    \ then\n          return word:sub(j, j)\n        end\n      end\n    end\n  end\n\
    \  return ''\nend", end, "    local index = 0\n    for i = 1, #word do\n     \
    \   local c = word:sub(i, i)\n        if not is_vowel(c) then\n            if\
    \ i > 1 and is_vowel(word:sub(i - 1, i - 1)) then\n                index = i -\
    \ 1\n            end\n        end\n    end\n    return index == 0 and '' or word:sub(index,\
    \ index)\nend", "    local result = ''\n    local consonants = {'B', 'C', 'D',\
    \ 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X',\
    \ 'Y', 'Z'}\n    local vowels = {'A', 'E', 'I', 'O', 'U'}\n    local i = #word\n\
    \    while i > 0 do\n        local c = word:sub(i, i)\n        if table_contains(consonants,\
    \ c) then\n            local j = i\n            while j > 0 do\n             \
    \   local v = word:sub(j, j)\n                if table_contains(vowels, v) then\n\
    \                    result = v\n                    break\n                end\n\
    \                j = j - 1\n            end\n            break\n        end\n\
    \        i = i - 1\n    end\n    return result\nend", "  --your code here\nend",
  "  -- body\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel\
    \ = ''\n    local closest_len = 0\n    for i = #word, 1, -1 do\n        local\
    \ c = word:sub(i, i)\n        if is_consonant(c) then\n            closest_len\
    \ = closest_len + 1\n        elseif is_vowel(c) then\n            closest_vowel\
    \ = c\n            break\n        end\n    end\n    if closest_len > 1 then\n\
    \        return closest_vowel\n    else\n        return ''\n    end\nend", " \
    \ return 'TODO'\nend", end, end, end, "    local vowel = 'aeiouAEIOU'\n    local\
    \ s, e = 1, #word", "  local start_index = -1\n  local end_index = -1\n  local\
    \ vowel_list = 'aeiouAEIOU'\n  for i = 1, #word do\n    local char = word:sub(i,\
    \ i)\n    if vowel_list:find(char) then\n      if start_index ~= -1 then\n   \
    \     end_index = i\n        break\n      end\n    else\n      if start_index\
    \ == -1 then\n        start_index = i\n      end\n    end\n  end\n  if start_index\
    \ ~= -1 and end_index ~= -1 then\n    return word:sub(start_index + 1, end_index\
    \ - 1)\n  else\n    return ''\n  end\nend", "\t-- Your code goes here:\n\treturn\
    \ string.match(word, \"[^aeiouAEIOU]*[aeiouAEIOU]([^aeiouAEIOU]*)$\")\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local word_table = {}\n    local word_table_consonants =\
    \ {}\n    local word_table_vowels = {}\n    local word_table_vowels_2 = {}\n \
    \   local word_table_vowels_3 = {}\n    local word_table_vowels_4 = {}\n    local\
    \ word_table_vowels_5 = {}\n    local word_table_vowels_6 = {}\n    local result\
    \ = ''\n    local result_2 = ''\n    local result_3 = ''\n    local result_4 =\
    \ ''\n    local result_5 = ''\n    local result_6 = ''\n    local result_check\
    \ = ''\n    local vowel_check = ''\n    local vowel_check_2 = ''\n    local vowel_check_3\
    \ = ''\n    local vowel_check_4 = ''\n    local vowel_check_5 = ''\n    local\
    \ vowel_check_6 = ''\n    for value in string.gmatch(word, '.') do\n        if\
    \ (value == 'a' or value == 'e' or value == 'i' or value == 'o' or value == 'u')\
    \ then\n            table.insert(word_table_vowels, value)\n        elseif (value\
    \ == 'b' or value == 'c' or value == 'd' or value == 'f' or value == 'g' or value\
    \ == 'h' or value == 'j' or value == 'k' or value == 'l' or value == 'm' or value\
    \ == 'n' or value == 'p' or value == 'q' or value == 'r' or value == 's' or value\
    \ == 't' or value == 'v' or value == 'w' or value == 'x' or value == 'y' or value\
    \ == 'z') then\n            table.insert(word", "    local l = word:len()\n  \
    \  local c\n    local p\n    local start = false\n    local i\n    for i = l,\
    \ 1, -1 do\n        c = word:sub(i, i)\n        if not is_vowel(c) then\n    \
    \        start = true\n        elseif is_vowel(c) and start and not p then\n \
    \           p = c\n        end\n    end\n    return p or ''\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel_pos = 0\n  local last_consonant_pos\
    \ = 0\n  for i = #word, 1, -1 do\n    if table.indexof(vowels, word:sub(i, i))\
    \ ~= nil then\n      last_vowel_pos = i\n    else\n      last_consonant_pos =\
    \ i\n      break\n    end\n  end\n  if last_vowel_pos ~= 0 and last_consonant_pos\
    \ < last_vowel_pos then\n    return word:sub(last_vowel_pos, last_vowel_pos)\n\
    \  end\n  return ''\nend", "\t-- write your solution here\nend", "    return word:gsub('.*[bcdfghjklmnpqrstvwxyz]([aeiou])[bcdfghjklmnpqrstvwxyz].*',\
    \ '%1')\nend", "    local pattern = \"([^aeiouAEIOU])([aeiouAEIOU])([^aeiouAEIOU])\"\
    \n    local result = word:match(pattern)\n    return result and result:sub(2,2)\
    \ or \"\"\nend", "\t-- check if the word starts with a vowel\n\tif not string.find(word,\
    \ '^[aeiou]') then\n\t\t-- search for consonants that are followed by a vowel\n\
    \t\tlocal match = string.match(word, '([^aeiou]+)([aeiou])')\n\t\tif match then\n\
    \t\t\treturn match:sub(2, 2)\n\t\tend\n\tend\n\treturn ''\nend", "    -- Your\
    \ code here\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n\tlocal is_vowel = {a = true, e = true, i = true,\
    \ o = true, u = true}\n\tlocal closest_vowel = ''\n\t\n\tfor i = #word, 1, -1\
    \ do\n\t\tif is_vowel[word:sub(i, i)] then\n\t\t\tif #closest_vowel == 0 then\n\
    \t\t\t\tclosest_vowel = word:sub(i, i)\n\t\t\tend\n\t\telse\n\t\t\tif #closest_vowel\
    \ > 0 then\n\t\t\t\treturn closest_vowel\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn\
    \ closest_vowel\nend", "    local vowels = 'aeiouAEIOU'\n    local consonants\
    \ = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    local closest_vowel = ''\n\
    \    local new_vowel = ''\n    for i = #word, 2, -1 do\n        local char = word:sub(i,\
    \ i)\n        if (vowels:find(char) and consonants:find(word:sub(i - 1, i - 1))\n\
    \            and consonants:find(word:sub(i + 1, i + 1))) then\n            new_vowel\
    \ = char\n            break\n        end\n    end\n    if (closest_vowel == '')\
    \ then\n        closest_vowel = new_vowel\n    elseif (#new_vowel < #closest_vowel)\
    \ then\n        closest_vowel = new_vowel\n    end\n    return closest_vowel\n\
    end", "\t-- body\nend", "    return word:gsub('.*[^aeiou]([aeiou])[^aeiou].*',\
    \ '%1')\nend", "    local vowels = {\n        'a', 'e', 'i', 'o', 'u',\n     \
    \   'A', 'E', 'I', 'O', 'U'\n    }\n    for i=#word,1,-1 do\n        local character\
    \ = word:sub(i,i)\n        if table.index_of(vowels, character) then\n       \
    \     for j=i-1,1,-1 do\n                local character = word:sub(j,j)\n   \
    \             if table.index_of(vowels, character) then\n                    return\
    \ character\n                end\n            end\n        end\n    end\n    return\
    \ ''\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = #word, 1, -1\
    \ do\n    local ch = word:sub(i, i)\n    if vowels[ch] then\n      local left_ok,\
    \ right_ok = false, false\n      if i > 1 then\n        local left = word:sub(i\
    \ - 1, i - 1)\n        left_ok = not vowels[left]\n      end\n      if i < #word\
    \ then\n        local right = word:sub(i + 1, i + 1)\n        right_ok = not vowels[right]\n\
    \      end\n      if left_ok and right_ok then\n        return ch\n      end\n\
    \    end\n  end\n  return ''\nend", "    local vowel = { a = true, e = true, i\
    \ = true, o = true, u = true }\n    for i = #word, 2, -1 do\n        if not vowel[word:sub(i,\
    \ i)] and vowel[word:sub(i - 1, i - 1)] then\n            return word:sub(i -\
    \ 1, i - 1)\n        end\n    end\n    return ''\nend", "    -- Write your code\
    \ here\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result\
    \ = \"\"\n    for i = string.len(word), 1, -1 do\n        if table.indexof(vowels,\
    \ string.lower(word:sub(i, i))) then\n            local j = i - 1\n          \
    \  while j > 0 do\n                if table.indexof(vowels, string.lower(word:sub(j,\
    \ j))) then\n                    j = j - 1\n                else\n           \
    \         if table.indexof(vowels, string.lower(word:sub(j-1, j-1))) then\n  \
    \                      result = word:sub(i, i)\n                    end\n    \
    \                break\n                end\n            end\n        end\n  \
    \  end\n    return result\nend", "    -- TODO: your code here\nend", "    local\
    \ vowels = 'aeiouAEIOU'\n    local word_len = #word\n    local i = word_len\n\
    \    while i > 0 do\n        local ch = word:sub(i, i)\n        local vowel_idx\
    \ = vowels:find(ch)\n        if vowel_idx then\n            local prev_ch = word:sub(i\
    \ - 1, i - 1)\n            local next_ch = word:sub(i + 1, i + 1)\n          \
    \  if prev_ch and not vowels:find(prev_ch) and\n               next_ch and not\
    \ vowels:find(next_ch) then\n                return ch\n            end\n    \
    \    end\n        i = i - 1\n    end\n    return ''\nend", "\t-- Implement your\
    \ solution here\nend", "    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local\
    \ before = {}\n    local after = {}\n    local result = ''\n    local found =\
    \ false\n    -- start from the right side\n    for i = #word, 1, -1 do\n     \
    \   local c = word:sub(i, i)\n        if not found then\n            -- look for\
    \ vowel\n            if table.has_value(vowels, c) then\n                -- start\
    \ building the after array\n                table.insert(after, c)\n         \
    \       found = true\n            end\n        else\n            -- look for consonant\n\
    \            if not table.has_value(vowels, c) then\n                -- build\
    \ the before array\n                table.insert(before, c)\n            else\n\
    \                -- found the closest vowel, stop\n                break\n   \
    \         end\n        end\n    end\n    -- combine the before and after, reverse\
    \ the after array\n    for _, v in ipairs(before) do\n        table.insert(after,\
    \ v)\n    end\n    if #after > 0 then\n        for i = #after, 1, -1 do\n    \
    \        result = result .. after[i]\n        end\n    end\n    return result\n\
    end", "    if type(word) ~= 'string' then return '' end\n    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local is_consonant = function(letter) return not table.index(vowels,\
    \ letter) end\n    local last_index, first_index = #word, 1\n    for i = #word,\
    \ 1, -1 do\n        if is_consonant(word:sub(i, i)) then\n            last_index\
    \ = i\n            break\n        end\n    end\n    for i = 1, #word do\n    \
    \    if is_consonant(word:sub(i, i)) then\n            first_index = i\n     \
    \       break\n        end\n    end\n    local index = nil\n    for i = last_index,\
    \ first_index, -1 do\n        if table.index(vowels, word:sub(i, i)) then\n  \
    \          index = i\n            break\n        end\n    end\n    return index\
    \ and word:sub(index, index) or ''\nend", "    return 'TODO'\nend", end, "   \
    \ -- Implement your code here.\nend", "  local word = word:lower()\n  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \  local not_vowel = false\n  local not_consonant = false\n  local is_vowel =\
    \ false\n  local is_consonant = false\n  local position = 0\n  local closest_vowel\
    \ = ''\n  for i = 1, #word do\n    for j = 1, #vowels do\n      if word:sub(i,\
    \ i) == vowels[j] then\n        is_vowel = true\n      end\n    end\n    for j\
    \ = 1, #consonants do\n      if word:sub(i, i) == consonants[j] then\n       \
    \ is_consonant = true\n      end\n    end\n    if not_vowel and is_consonant then\n\
    \      not_vowel = false\n      is_consonant = false\n    elseif not_consonant\
    \ and is_vowel then\n      not_consonant = false\n      is_vowel = false\n   \
    \   position = i\n      closest_vowel = word:sub(i, i)\n    elseif not_vowel and\
    \ is_vowel then\n      not_vowel = false\n      is_vowel = false\n    elseif not_consonant\
    \ and is_consonant then\n      not_consonant = false\n      is_consonant = false\n\
    \    elseif is_vowel then\n      not_vowel = true\n      is_vowel = false\n  \
    \  elseif is_consonant then\n      not_consonant = true\n      is_consonant =\
    \ false\n    end\n  end\n  return closest_vowel\nend", "\tif not word or not word:find(\"\
    [bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\") then\n\t\treturn \"\"\n\tend\n\
    \t\n\tlocal vowels = \"aeiouAEIOU\"\n\t\n\tlocal start\n\tlocal i = #word\n\t\
    while i > 0 do\n\t\tlocal ch = word:sub(i, i)\n\t\tif ch:find(\"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
    ) then\n\t\t\tif start then\n\t\t\t\treturn \"\"\n\t\t\tend\n\t\telse\n\t\t\t\
    if not start then\n\t\t\t\tstart = i\n\t\t\tend\n\t\tend\n\t\ti = i - 1\n\tend\n\
    \t\n\tlocal i = start - 1\n\twhile i > 0 do\n\t\tlocal ch = word:sub(i, i)\n\t\
    \tif ch:find(\"[aeiouAEIOU]\") then\n\t\t\treturn ch\n\t\tend\n\t\ti = i - 1\n\
    \tend\n\t\n\treturn \"\"\nend", "  local consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \  local vowels = 'aeiouAEIOU'\n  local closest_vowel = ''\n  for i=1, #word do\n\
    \    local letter = word:sub(i, i)\n    local is_vowel = false\n    for j=1, #vowels\
    \ do\n      if letter == vowels:sub(j, j) then\n        is_vowel = true\n    \
    \    break\n      end\n    end\n    if is_vowel then\n      closest_vowel = letter\n\
    \    else\n      if closest_vowel ~= '' then\n        local is_last_letter = true\n\
    \        for j=i+1, #word do\n          local next_letter = word:sub(j, j)\n \
    \         local is_next_vowel = false\n          for k=1, #vowels do\n       \
    \     if next_letter == vowels:sub(k, k) then\n              is_next_vowel = true\n\
    \              break\n            end\n          end\n          if is_next_vowel\
    \ then\n            is_last_letter = false\n            break\n          end\n\
    \        end\n        if is_last_letter then\n          return closest_vowel\n\
    \        end\n      end\n    end\n  end\n  return ''\nend", "  -- TODO: implement\
    \ here\nend", "    local l = word:len()\n    local vowels = {['a'] = true, ['e']\
    \ = true, ['i'] = true, ['o'] = true, ['u'] = true}\n    for i = l, 1, -1 do\n\
    \        if vowels[word:sub(i, i)] then\n            return word:sub(i, i)\n \
    \       end\n    end\n    return ''\nend", "    local s, e = 0, string.len(word)\n\
    \    local vowel = ''\n    for i = e, 1, -1 do\n        if string.find('aeiouAEIOU',\
    \ string.sub(word, i, i)) then\n            vowel = string.sub(word, i, i)\n \
    \           e = i - 1\n            break\n        end\n    end\n    for i = e,\
    \ 1, -1 do\n        if string.find('aeiouAEIOU', string.sub(word, i, i)) then\n\
    \            s = i + 1\n            break\n        end\n    end\n    if s >= e\
    \ then\n        return ''\n    else\n        return vowel\n    end\nend", "\t\
    if word == nil then return nil end\n\tif #word < 3 then return '' end\n\tfor i\
    \ = #word, 3, -1 do\n\t\tlocal v = word:sub(i, i)\n\t\tif vowels[v] then\n\t\t\
    \tlocal c1 = word:sub(i - 1, i - 1)\n\t\t\tlocal c2 = word:sub(i + 1, i + 1)\n\
    \t\t\tif consonants[c1] and consonants[c2] then\n\t\t\t\treturn v\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn ''\nend", "\tassert(type(word) == 'string')\n\t\n\tlocal\
    \ vowels = {['a'] = true, ['e'] = true, ['i'] = true, ['o'] = true, ['u'] = true}\n\
    \tlocal l = #word\n\tlocal cnt = 0\n\tfor i = l, 1, -1 do\n\t\tif not vowels[word:sub(i,\
    \ i)] then\n\t\t\tcnt = cnt + 1\n\t\t\tif cnt == 2 then\n\t\t\t\treturn word:sub(i\
    \ + 1, i + 1)\n\t\t\tend\n\t\tend\n\tend\n\treturn ''\nend", end, "  return ''\n\
    end", "\tlocal vowels,lastindex = {'a','e','i','o','u','A','E','I','O','U'},0\n\
    \tlocal stringlen = string.len(word)\n\tif stringlen < 3 then return '' end\n\t\
    for i = 1, stringlen - 1 do\n\t\tif isvowel(word:sub(i,i)) then lastindex = i\
    \ end\n\tend\n\treturn word:sub(lastindex,lastindex)\nend", "   return word:match('[^aeiou]?([aeiou])[^aeiou]')\
    \ or ''\nend", "    return 'TODO'\nend", "    if word == '' then\n        return\
    \ ''\n    end\n    local vowel = {\n        ['a'] = true, ['e'] = true, ['i']\
    \ = true, ['o'] = true, ['u'] = true,\n        ['A'] = true, ['E'] = true, ['I']\
    \ = true, ['O'] = true, ['U'] = true\n    }\n    local closest_vowel = ''\n  \
    \  local closest_vowel_idx = -1\n    for i = #word, 1, -1 do\n        if not vowel[word:sub(i,\
    \ i)] then\n            for j = i - 1, 1, -1 do\n                if vowel[word:sub(j,\
    \ j)] then\n                    closest_vowel = word:sub(j, j)\n             \
    \       closest_vowel_idx = j\n                    break\n                end\n\
    \            end\n            break\n        end\n    end\n    if closest_vowel_idx\
    \ < 1 then\n        return ''\n    end\n    local possible_closest_vowel = ''\n\
    \    local possible_closest_vowel_idx = -1\n    for i = closest_vowel_idx - 1,\
    \ 1, -1 do\n        if not vowel[word:sub(i, i)] then\n            for j = i -\
    \ 1, 1, -1 do\n                if vowel[word:sub(j, j)] then\n               \
    \     possible_closest_vowel = word:sub(j, j)\n                    possible_closest_vowel_idx\
    \ = j\n                    break\n                end\n            end\n     \
    \       break\n        end\n    end\n    if possible_closest_vowel_idx < 1 then\n\
    \        return closest_vowel\n    end\n    return possible_closest_vowel\nend",
  "\treturn word:match(\"%a*([aeiouAEIOU])%a*$\") or \"\"\nend", "    local vowels\
    \ = 'aeiouAEIOU'\n    local left = 0\n    local right = 0\n    local m = 0\n \
    \   for i = word:len(), 1, -1 do\n        m = vowels:find(word:sub(i, i))\n  \
    \      if m then \n            right = i\n            break\n        end\n   \
    \ end\n    for i = right - 1, 1, -1 do\n        m = vowels:find(word:sub(i, i))\n\
    \        if m then \n            left = i\n            break\n        end\n  \
    \  end\n    return word:sub(left + 1, right - 1)\nend", "    local vowels = \"\
    aeiouAEIOU\"\n    local vowel_char\n    local index = 0\n    local last_non_vowel_index\
    \ = 0\n    for i=1,#word do\n        local ch = word:sub(i,i)\n        if vowels:find(ch)\
    \ then\n            if not vowel_char then vowel_char = ch end\n            last_non_vowel_index\
    \ = index\n        else\n            if vowel_char and index - last_non_vowel_index\
    \ == 1 then\n                return vowel_char\n            end\n            vowel_char\
    \ = nil\n        end\n        index = index + 1\n    end\n    return \"\"\nend",
  "\t-- TODO: Implement this function\nend", "    local vowels = 'aeiouAEIOU'\n  \
    \  local last_consonant_pos, first_vowel_pos = -1, -1\n    local strlen = string.len(word)\n\
    \    local tmp_pos = 0\n    for i = strlen, 1, -1 do\n        tmp_pos = string.find(vowels,\
    \ string.sub(word, i, i))\n        if tmp_pos ~= nil then\n            if first_vowel_pos\
    \ < 0 then\n                first_vowel_pos = i\n            end\n        else\n\
    \            if first_vowel_pos >= 0 then\n                last_consonant_pos\
    \ = i\n                break\n            end\n        end\n    end\n    if first_vowel_pos\
    \ >= 0 and last_consonant_pos >= 0 then\n        return string.sub(word, first_vowel_pos,\
    \ first_vowel_pos)\n    end\n    return ''\nend", end, "\t-- TODO: Your code here\n\
    end", "  local found = word:match(\".*[^aeiou]([aeiou])[^aeiou].*\")\n  return\
    \ found or \"\"\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i =\
    \ string.len(word), 1, -1 do\n    local char = string.sub(word, i, i)\n    for\
    \ _,v in ipairs(vowels) do\n      if char == v then return char end\n    end\n\
    \  end\n  return ''\nend", end, "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local right_consonants = {}\n  local right_vowels = {}\n  for i = 1, #word\
    \ do\n    local current_letter = word:sub(i, i)\n    if not vowels[current_letter]\
    \ then -- consonant\n      if #right_vowels == 0 then\n        table.insert(right_consonants,\
    \ current_letter)\n      else\n        return right_vowels[1]\n      end\n   \
    \ else -- vowel\n      table.insert(right_vowels, current_letter)\n    end\n \
    \ end\n  return ''\nend", "\t-- TODO: Solve here\nend", "    local s,e = string.find(word,\"\
    [^aeiouAEIOU][aeiouAEIOU][^aeiouAEIOU]\")\n    if s then return string.sub(word,s+1,s+1)\
    \ end\n    return \"\"\nend", "  local vowel_pos = string.find(word, '[AEIOUaeiou]')\n\
    \  local word_rev = word:reverse()\n  local vowel_pos_rev = string.find(word_rev,\
    \ '[AEIOUaeiou]')\n  if vowel_pos == nil or vowel_pos_rev == nil then return ''\
    \ end\n  local dist = math.abs(vowel_pos - vowel_pos_rev)\n  local vowel = string.sub(word,\
    \ vowel_pos, vowel_pos)\n  local vowel_rev = string.sub(word_rev, vowel_pos_rev,\
    \ vowel_pos_rev)\n  if dist == 1 then return vowel end\n  return vowel_rev\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_map = {}\n    for\
    \ i,v in ipairs(vowels) do\n        vowels_map[v] = true\n    end\n    local prev_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n      \
    \  if vowels_map[c] then\n            if prev_vowel == '' then\n             \
    \   prev_vowel = c\n            else\n                return prev_vowel\n    \
    \        end\n        else\n            prev_vowel = ''\n        end\n    end\n\
    \    return ''\nend", "\t-- write your code here\nend", "    local vowels = {a\
    \ = true, e = true, i = true, o = true, u = true, A = true, E = true, I = true,\
    \ O = true, U = true}\n    local closest_vowel = ''\n    local last_consonant_index\
    \ = -1\n    for i = #word, 1, -1 do\n        if vowels[word:sub(i, i)] then\n\
    \            if last_consonant_index ~= -1 then\n                closest_vowel\
    \ = word:sub(i, i)\n                break\n            end\n        else\n   \
    \         last_consonant_index = i\n        end\n    end\n    return closest_vowel\n\
    end", "  local vowel = ''\n  local position = 0\n  for i = 1, #word do\n    local\
    \ char = word:sub(i, i)\n    if is_vowel(char) then\n      vowel = char\n    \
    \  position = i\n    end\n  end\n  if vowel == '' then\n    return ''\n  end\n\
    \  local start = word:sub(1, position - 1)\n  local end_str = word:sub(position\
    \ + 1, #word)\n  local start_last = start:sub(-1, -1)\n  local end_first = end_str:sub(1,\
    \ 1)\n  if is_vowel(start_last) or is_vowel(end_first) then\n    return ''\n \
    \ end\n  return vowel\nend", "  local vowels = {a=true, e=true, i=true, o=true,\
    \ u=true, y=true}\n  local last_consonant = 0\n  for i = #word, 1, -1 do\n   \
    \ if vowels[word:sub(i, i)] then\n      return i - last_consonant == 1 and word:sub(i,\
    \ i) or ''\n    else\n      last_consonant = i\n    end\n  end\n  return ''\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local pre = false\n \
    \   local vowel = ''\n    for i = string.len(word), 1, -1 do\n        local letter\
    \ = string.sub(word, i, i)\n        if pre then\n            if table.indexOf(vowels,\
    \ letter) > 0 then\n                vowel = letter\n                break\n  \
    \          end\n        else\n            if table.indexOf(vowels, letter) > 0\
    \ then\n                pre = true\n            end\n        end\n    end\n  \
    \  return vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ res = ''\n    local last_cons = ''\n    for i = 1, #word do\n        if not\
    \ table.has_value(vowels, word:sub(i, i)) then\n            last_cons = word:sub(i,\
    \ i)\n        else\n            if last_cons ~= '' then\n                res =\
    \ word:sub(i, i)\n                break\n            end\n        end\n    end\n\
    \    return res\nend", "    -- TODO: Implement this function.\n    -- Hint:\n\
    \    -- use string.find to find the closest vowel from the right hand side.\n\
    \    -- you may find string.find useful.\n    -- http://www.lua.org/manual/5.1/manual.html#pdf-string.find\n\
    \    -- http://www.lua.org/pil/20.2.html\n    local i = 0\n    local j = 0\n \
    \   local c = 0\n    local index = 0\n    local r = ''\n    for a = string.len(word),\
    \ 1, -1 do\n        local g = string.sub(word, a, a)\n        if g == 'a' or g\
    \ == 'e' or g == 'i' or g == 'o' or g == 'u' or g == 'A' or g == 'E' or g == 'I'\
    \ or g == 'O' or g == 'U' then\n            if c > 0 then\n                r =\
    \ g\n                break\n            end\n        else\n            c = c +\
    \ 1\n        end\n    end\n    return r\nend", "    -- TODO: Your code here.\n\
    end", "  local text = word:reverse()\n  local find_char = text:find('[aieou]')\n\
    \  if find_char == nil then\n    return ''\n  end\n  return word:sub(#word - find_char\
    \ + 2, #word - find_char + 2)\nend", "    local vowels = { 'a', 'e', 'i', 'o',\
    \ 'u' }\n    local previous = ''\n    local next_vowel = ''\n    for _, letter\
    \ in pairs(word:reverse()) do\n        if table.contains(vowels, letter) then\n\
    \            next_vowel = letter\n        elseif next_vowel ~= '' and previous\
    \ ~= '' then\n            return next_vowel\n        end\n        previous = letter\n\
    \    end\n    return ''\nend", "    local idx = string.find(word, '%a[aeiouAEIOU].*%a')\n\
    \    if idx then\n        return word:sub(idx, idx)\n    else\n        return\
    \ ''\n    end\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ s, e = string.find(word, '[b-df-hj-np-tv-z]')\n    if s == nil then return ''\
    \ end\n    while e <= #word do\n        local letter = string.sub(word, e, e)\n\
    \        for i = 1, #vowels do\n            if letter == vowels[i] then\n    \
    \            return letter\n            end\n        end\n        s, e = string.find(word,\
    \ '[b-df-hj-np-tv-z]', e + 1)\n    end\n    return ''\nend", "  return ''\nend",
  "\t-- TODO: you code here\nend", "\treturn ''\nend", "    local res = ''\n    local\
    \ last_c, next_c = word:match('([^aeiouAEIOU])([aeiouAEIOU])')\n    if last_c\
    \ and next_c then res = next_c end\n    last_c, next_c = word:match('([aeiouAEIOU])([^aeiouAEIOU])')\n\
    \    if last_c and next_c then res = last_c end\n    return res\nend", "    if\
    \ type(word) == 'string' then\n        local n = 0\n        local result = ''\n\
    \        local index = 0\n        local is_consonant = false\n        for i =\
    \ 1, #word do\n            if word:match('[aeiou]', i) then\n                if\
    \ is_consonant then\n                    if i - index <= n then\n            \
    \            result = word:sub(i, i)\n                        n = i - index\n\
    \                    end\n                end\n                is_consonant =\
    \ false\n            else\n                is_consonant = true\n             \
    \   index = i\n            end\n        end\n        return result\n    end\n\
    end", "  local word_len = #word\n  local i = word_len\n  local is_prev_consonant\
    \ = false\n  local is_curr_consonant = false\n  local closest_vowel = ''\n  while\
    \ i > 0 do\n    local char = word:sub(i, i)\n    is_curr_consonant = not is_vowel(char)\n\
    \    if not is_prev_consonant and is_curr_consonant then\n      closest_vowel\
    \ = char\n      break\n    end\n    is_prev_consonant = is_curr_consonant\n  \
    \  i = i - 1\n  end\n  return closest_vowel\nend", "    if not word or #word <\
    \ 3 then return '' end\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local last, res = word:sub(-1,\
    \ -1), ''\n    word = word:sub(1, -2)\n    if table.contains(vowels, last) then\
    \ return last end\n    for i = #word, 1, -1 do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            if i < #word and table.contains(consonants,\
    \ word:sub(i + 1, i + 1)) then\n                return word:sub(i, i)\n      \
    \      elseif i > 1 and table.contains(consonants, word:sub(i - 1, i - 1)) then\n\
    \                return word:sub(i, i)\n            end\n        end\n    end\n\
    \    return res\nend", "  -- TODO: Your code here.\nend", "    -- write your code\
    \ here\nend", "  local vowel = {'a', 'e', 'i', 'o', 'u'}\n  local len = string.len(word)\n\
    \  for i = len, 1, -1 do\n    if vowel[string.lower(string.sub(word, i, i))] then\n\
    \      return string.sub(word, i, i)\n    end\n  end\n  return ''\nend", "   \
    \ if type(word) ~= 'string' then return nil end\n    local vowels = 'aeiouAEIOU'\n\
    \    local last_index = #word\n    local vowel_index = last_index", "    -- TODO:\
    \ Complete get_closest_vowel\n    local word = word:lower()\n    if word:find(\"\
    a\") == nil and word:find(\"e\") == nil and word:find(\"i\") == nil and word:find(\"\
    o\") == nil and word:find(\"u\") == nil then return '' end\n    local current_idx\
    \ = 0\n    local i\n    for i=1,#word do\n        if not is_vowel(word:sub(i,i))\
    \ then\n            current_idx = i\n        else\n            if current_idx>0\
    \ then return word:sub(i,i) end\n        end\n    end\n    return ''\nend", " \
    \   local vowel = 'aeiouAEIOU'\n    local subword = string.sub(word, -2)\n   \
    \ --print(subword)\n    if string.find(vowel, string.sub(subword, 1, 1)) == nil\
    \ and string.find(vowel, string.sub(subword, 2, 2)) ~= nil then\n        return\
    \ string.sub(subword, 2, 2)\n    else\n        return ''\n    end\nend", "\tlocal\
    \ last_consonant = false\n\tlocal vowel = ''\n\tfor i = #word, 1, -1 do\n\t\t\
    if last_consonant then\n\t\t\tif word:sub(i, i):match('[AEIOUaeiou]') then\n\t\
    \t\t\tvowel = word:sub(i, i)\n\t\t\t\tbreak\n\t\t\tend\n\t\telse\n\t\t\tif not\
    \ word:sub(i, i):match('[AEIOUaeiou]') then\n\t\t\t\tlast_consonant = true\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn vowel\nend", "    local vowels = 'aeiouAEIOU'\n\
    \    local found\n    for i = #word, 2, -1 do\n        if vowels:find(word:sub(i,\
    \ i)) then\n            if not vowels:find(word:sub(i - 1, i - 1)) then\n    \
    \            found = i\n                break\n            end\n        end\n\
    \    end\n    return found and word:sub(found, found) or ''\nend", "\tlocal vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n\tlocal prev = ''\n\tfor i = string.len(word),\
    \ 1, -1 do\n\t\tif prev == '' then\n\t\t\tprev = string.sub(word, i, i)\n\t\t\
    else\n\t\t\tlocal c = string.sub(word, i, i)\n\t\t\tif not table.contains(vowels,\
    \ c) and table.contains(vowels, prev) then\n\t\t\t\treturn prev\n\t\t\tend\n\t\
    \t\tprev = c\n\t\tend\n\tend\n\treturn ''\nend", "    local vowels = 'aeiouAEIOU'\n\
    \    local consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    local\
    \ closest_vowel, prev_consonant, curr_consonant\n    local curr_char, new_idx\n\
    \    local word_len = string.len(word)\n    local i = word_len\n    while i >\
    \ 0 do\n        curr_char = string.sub(word, i, i)\n        curr_consonant = string.find(consonants,\
    \ curr_char)\n        if curr_consonant ~= nil then\n            if prev_consonant\
    \ ~= nil then\n                for new_idx = i + 1, word_len do\n            \
    \        closest_vowel = string.find(vowels, string.sub(word, new_idx, new_idx))\n\
    \                    if closest_vowel ~= nil then\n                        return\
    \ string.sub(word, new_idx, new_idx)\n                    end\n              \
    \  end\n            end\n            prev_consonant = curr_consonant\n       \
    \ end\n        i = i - 1\n    end\n    return ''\nend", end, "    -- INSERT YOUR\
    \ CODE HERE\nend", "    local letter = word:sub(-1)\n    local vowel = ' '\n \
    \   while vowel == ' ' do\n        if letter:find('[aeiou]') then\n          \
    \  vowel = letter\n        else\n            letter = word:sub(-2, -2)\n     \
    \       word = word:sub(1, -2)\n        end\n    end\n    return vowel\nend",
  "  \nend", "    if word == nil then return '' end\n    local temp = word:lower()\n\
    \    local cnt = string.len(temp)\n    for i = string.len(temp), 1, -1 do\n  \
    \      if temp:sub(i, i) == 'a' or temp:sub(i, i) == 'e' or temp:sub(i, i) ==\
    \ 'i' or temp:sub(i, i) == 'o' or temp:sub(i, i) == 'u' then\n            for\
    \ j = i-1, 1, -1 do\n                if temp:sub(j, j) ~= 'a' and temp:sub(j,\
    \ j) ~= 'e' and temp:sub(j, j) ~= 'i' and temp:sub(j, j) ~= 'o' and temp:sub(j,\
    \ j) ~= 'u' then\n                    for k = j+1, cnt do\n                  \
    \      if temp:sub(k, k) ~= 'a' and temp:sub(k, k) ~= 'e' and temp:sub(k, k) ~=\
    \ 'i' and temp:sub(k, k) ~= 'o' and temp:sub(k, k) ~= 'u' then\n             \
    \               return temp:sub(i, i)\n                        end\n         \
    \           end\n                end\n            end\n        end\n    end\n\
    \    return ''\nend", "    for i = #word, 2, -1 do\n        local c = word:sub(i,\
    \ i)\n        if not is_vowel(c) then\n            local closest_vowel = is_vowel(word:sub(i-1,\
    \ i-1)) and word:sub(i-1, i-1) or ''\n            if closest_vowel == '' then\n\
    \                closest_vowel = is_vowel(word:sub(i-2, i-2)) and word:sub(i-2,\
    \ i-2) or ''\n            end\n            return closest_vowel\n        end\n\
    \    end\n    return ''\nend", "  return ''\nend", "  return word:gsub('[^aeiouAEIOU]*([aeiouAEIOU])([^aeiouAEIOU]+)$',\
    \ '%1')\nend", "\t-- your code here\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local vowel_index\n    for i = #word, 1, -1 do\n        for _,\
    \ v in ipairs(vowels) do\n            if word:sub(i, i) == v then\n          \
    \      vowel_index = i\n                break\n            end\n        end\n\
    \        if vowel_index then\n            break\n        end\n    end\n    if\
    \ vowel_index == 1 or vowel_index == #word then\n        return ''\n    end\n\
    \    return word:sub(vowel_index, vowel_index)\nend", "\tlocal vowels = {\n\t\t\
    [1] = \"A\",\n\t\t[2] = \"E\",\n\t\t[3] = \"I\",\n\t\t[4] = \"O\",\n\t\t[5] =\
    \ \"U\",\n\t\t[6] = \"a\",\n\t\t[7] = \"e\",\n\t\t[8] = \"i\",\n\t\t[9] = \"o\"\
    ,\n\t\t[10] = \"u\"\n\t}\n\tlocal n = #word\n\tlocal found = false\n\tlocal l,\
    \ r = 0, 0\n\tfor i = n, 1, -1 do\n\t\tlocal c = word:sub(i, i)\n\t\tfor _,v in\
    \ ipairs(vowels) do\n\t\t\tif v == c then\n\t\t\t\tfound = true\n\t\t\t\tr = i\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif found then\n\t\t\tfor j = i - 1, 1,\
    \ -1 do\n\t\t\t\tlocal c = word:sub(j, j)\n\t\t\t\tfor _,v in ipairs(vowels) do\n\
    \t\t\t\t\tif v == c then\n\t\t\t\t\t\tr = i\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\t\tif c ~= v then\n\t\t\t\t\tl = j\n\t\t\t\t\tbreak\n\t\t\t\t\
    end\n\t\t\tend\n\t\t\tbreak\n\t\tend\n\tend\n\tif not found then\n\t\treturn \"\
    \"\n\tend\n\tlocal result = \"\"\n\tfor i = l + 1, r - 1 do\n\t\tlocal c = word:sub(i,\
    \ i)\n\t\tfor _,v in ipairs(vowels) do\n\t\t\tif v == c then\n\t\t\t\tresult =\
    \ c\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend", "    --\
    \ your code here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local word\
    \ = word:lower()\n    local closest_vowel = ''\n    for i = #word, 1, -1 do\n\
    \    \tif word:sub(i, i) == ' ' then\n    \t\treturn ''\n    \tend\n    \tif vowels[word:sub(i,\
    \ i)] then\n    \t\tclosest_vowel = word:sub(i, i)\n    \t\tbreak\n    \tend\n\
    \    end\n    return closest_vowel\nend", "    local word = string.lower(word)\n\
    \    local v = {'a', 'e', 'i', 'o', 'u'}\n    local prev = \"\"\n    local found\
    \ = \"\"\n    for i = 1, string.len(word) do\n        if (string.find(word, v[1],\
    \ i) or string.find(word, v[2], i) or string.find(word, v[3], i) or string.find(word,\
    \ v[4], i) or string.find(word, v[5], i)) then\n            local j = i\n    \
    \        while (string.find(word, v[1], j) or string.find(word, v[2], j) or string.find(word,\
    \ v[3], j) or string.find(word, v[4], j) or string.find(word, v[5], j)) do\n \
    \               prev = string.sub(word, j, j)\n                j = j + 1\n   \
    \         end\n            local nxt = string.sub(word, j, j)\n            if\
    \ (prev ~= nxt) then\n                found = prev\n                break\n  \
    \          end\n        end\n    end\n    return found\nend", end, "    local\
    \ vowels = 'aeiouAEIOU'\n    local char = nil\n    local index = nil\n    for\
    \ i = 1, #word do\n        char = word:sub(i, i)\n        if vowels:find(char)\
    \ then\n            index = i\n            break\n        end\n    end\n    if\
    \ index == nil then\n        return ''\n    end\n    local left = word:sub(1,\
    \ index)\n    local right = word:sub(index)\n    local current = nil\n    local\
    \ c_index = nil\n    for i = 1, #right do\n        current = right:sub(i, i)\n\
    \        if vowels:find(current) then\n            c_index = i\n        else\n\
    \            if c_index then\n                break\n            end\n       \
    \ end\n    end\n    if c_index then\n        local temp = right:sub(c_index +\
    \ 1)\n        for i = 1, #temp do\n            current = temp:sub(i, i)\n    \
    \        if vowels:find(current) then\n                c_index = c_index + i\n\
    \                break\n            end\n        end\n    end\n    if c_index\
    \ then\n        return word:sub(c_index, c_index)\n    else\n        return ''\n\
    \    end\nend", "    local vowel = {'a', 'e', 'i', 'o', 'u'}\n    local cons =\
    \ {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local first = false\n    local vowel_pos\
    \ = 0\n    local cons_pos = 0\n    local found = false\n    for i = #word, 1,\
    \ -1 do\n        for j = 1, #vowel do\n            if word:sub(i, i) == vowel[j]\
    \ then\n                if first == false then\n                    vowel_pos\
    \ = i\n                    first = true\n                else\n              \
    \      cons_pos = i\n                    found = true\n                    break\n\
    \                end\n            end\n        end\n        if found == true then\n\
    \            break\n        end\n    end\n    if found == true then\n        return\
    \ word:sub(vowel_pos, vowel_pos)\n    else\n        return ''\n    end\nend",
  "\t-- TODO: your code here", "    local vowels = \"aeiouAEIOU\"\n    for i=#word,2,-1\
    \ do\n        local c = word:sub(i,i)\n        if vowels:find(c) and vowels:find(word:sub(i-1,i-1))\
    \ == nil and vowels:find(word:sub(i+1,i+1)) == nil then\n            return c\n\
    \        end\n    end\n    return \"\"\nend", "  local vowels = 'aeiouAEIOU'\n\
    \  local last = nil\n  for i = 1, #word do\n    if vowels:find(word:sub(i, i))\
    \ and last then\n      return word:sub(i, i)\n    end\n    if not vowels:find(word:sub(i,\
    \ i)) then\n      last = i\n    end\n  end\n  return ''\nend", "  -- TODO: implement\
    \ this function.\nend", "  -- Write your code here\n  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local flag = false\n  local isfirst = true\n  local islast\
    \ = true\n  local last = ''\n  local first = ''\n  for i = #word, 1, -1 do\n \
    \   if not isfirst then\n      if not table.contains(vowels, word:sub(i, i)) then\n\
    \        first = word:sub(i, i)\n        break\n      end\n    else\n      if\
    \ table.contains(vowels, word:sub(i, i)) then\n        isfirst = false\n     \
    \ end\n    end\n  end\n  for i = 1, #word do\n    if not islast then\n      if\
    \ not table.contains(vowels, word:sub(i, i)) then\n        last = word:sub(i,\
    \ i)\n        break\n      end\n    else\n      if table.contains(vowels, word:sub(i,\
    \ i)) then\n        islast = false\n      end\n    end\n  end\n  if first == ''\
    \ or last == '' then\n    return ''\n  end\n  local vowel = ''\n  for i = #word,\
    \ 1, -1 do\n    if table.contains(vowels, word:sub(i, i)) then\n      if not flag\
    \ then\n        vowel = word:sub(i, i)\n        if word:sub(i + 1, i + 1) == last\
    \ then\n          flag = true\n        end\n      else\n        if word:sub(i,\
    \ i) == first then\n          return vowel\n        end\n      end\n    end\n\
    \  end\n  return ''\nend", "    local vowel_set = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local previous_char, char\n    for i=1,#word do\n        char = word:sub(i,i)\n\
    \        if not is_in_set(vowel_set, char) then\n            if previous_char\
    \ and is_in_set(vowel_set, previous_char) then\n                return previous_char\n\
    \            end\n        else\n            previous_char = char\n        end\n\
    \    end\n    return ''\nend", "    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ local last_consonant = ''\n    for i = 1, #word do\n        local letter = word:sub(i,\
    \ i)\n        for _, value in ipairs(vowels) do\n            if letter == value\
    \ then\n                last_vowel = letter\n            end\n        end\n  \
    \      for _, value in ipairs(consonants) do\n            if letter == value then\n\
    \                if last_vowel ~= '' then\n                    return last_vowel\n\
    \                end\n                last_consonant = letter\n            end\n\
    \        end\n    end\n    return ''\nend", "    local str = word:lower()\n  \
    \  local idx = str:find('[aeiou]')\n    if idx == nil then\n        return ''\n\
    \    end\n    local idx_r = str:reverse():find('[aeiou]')\n    if idx_r == nil\
    \ then\n        return ''\n    end\n    local str_r = str:reverse()\n    local\
    \ vowel = str_r:sub(idx_r, idx_r)\n    return vowel\nend", "\tlocal vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n\tlocal closest_vowel = ''\n\tlocal flag = 0\n\tfor i=1,\
    \ #word do\n\t\tfor j=1, #vowels do\n\t\t\tif word[i] == vowels[j] then\n\t\t\t\
    \tflag = flag + 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag > 1 then\n\t\
    \t\tclosest_vowel = word[i]\n\t\t\tbreak\n\t\tend\n\tend\n\treturn closest_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = #word, 1, -1\
    \ do\n        local c = word:sub(i, i)\n        if c:match('[aeiou]') then\n \
    \           return c\n        end\n    end\n    return ''\nend", "    local vowel\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local tmp = string.reverse(word)\n    local\
    \ found = false\n    local res = ''\n    for i = 1, string.len(tmp) do\n     \
    \   if found == false then\n            for _, v in ipairs(vowel) do\n       \
    \         if v == tmp:sub(i, i) then\n                    res = tmp:sub(i, i)\n\
    \                    found = true\n                end\n            end\n    \
    \    else\n            for _, v in ipairs(vowel) do\n                if v == tmp:sub(i,\
    \ i) then\n                    res = ''\n                    found = false\n \
    \               end\n            end\n        end\n    end\n    return res\nend",
  "  -- Fill in your code here\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowels_flag = {}\n\
    \    local i = #word\n    local max_i = 1\n    while i > 1 do\n        if not\
    \ vowels_flag[i] then\n            for k, v in ipairs(vowels) do\n           \
    \     if word:sub(i, i) == v then\n                    vowels_flag[i] = true\n\
    \                    break\n                end\n            end\n        end\n\
    \        if not vowels_flag[i] then\n            for k, v in ipairs(consonants)\
    \ do\n                if word:sub(i, i) == v then\n                    if vowels_flag[i\
    \ + 1] then\n                        max_i = i\n                        break\n\
    \                    end\n                end\n            end\n        end\n\
    \        i = i - 1\n    end\n    return word:sub(max_i, max_i)\nend\nprint('get_closest_vowel',\
    \ 'yogurt', get_closest_vowel('yogurt'))\nprint('get_closest_vowel', 'FULL', get_closest_vowel('FULL'))\n\
    print('get_closest_vowel', 'quick', get_closest_vowel('quick'))\nprint('get_closest_vowel',\
    \ 'ab', get_closest_vowel('ab'))", "  local letters = string.gmatch(word, \".\"\
    )\n  local vowels, last_consonant = 'aeiou', nil\n  for letter in letters do\n\
    \    if vowels:find(letter) then\n      if last_consonant then\n        return\
    \ letter\n      end\n    else\n      last_consonant = letter\n    end\n  end\n\
    \  return ''\nend", "    -- your code here\nend", "    -- insert your code here\n\
    \    return \"Please provide your solution here\"\nend", "  local len = #word\n\
    \  for i = len, 2, -1 do\n    local c = word:sub(i, i)\n    if not (c == 'a' or\
    \ c == 'e' or c == 'i' or c == 'o' or c == 'u') then\n      local c1 = word:sub(i\
    \ - 1, i - 1)\n      if (c1 == 'a' or c1 == 'e' or c1 == 'i' or c1 == 'o' or c1\
    \ == 'u') then\n        return c1\n      end\n    end\n  end\n  return ''\nend",
  "  if word:find('%a') == nil then return '' end\n  local i, _ = word:find('[^aeiouAEIOU]*([aeiouAEIOU])[^aeiouAEIOU]*$')\n\
    \  return i and word:sub(i, i) or ''\nend", "  -- TODO: implement the function\
    \ here\nend", "\treturn word\nend", "\tfor i=#word,1,-1 do\n\t\tlocal ch = word:sub(i,i)\n\
    \t\tif ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u' or\n\t\t\t\
    ch == 'A' or ch == 'E' or ch == 'I' or ch == 'O' or ch == 'U' then\n\t\t\tif i\
    \ > 1 and i < #word then\n\t\t\t\tlocal pre = word:sub(i-1,i-1)\n\t\t\t\tlocal\
    \ nxt = word:sub(i+1,i+1)\n\t\t\t\tif pre ~= 'a' and pre ~= 'e' and pre ~= 'i'\
    \ and pre ~= 'o' and pre ~= 'u' and\n\t\t\t\t\tpre ~= 'A' and pre ~= 'E' and pre\
    \ ~= 'I' and pre ~= 'O' and pre ~= 'U' and\n\t\t\t\t\tnxt ~= 'a' and nxt ~= 'e'\
    \ and nxt ~= 'i' and nxt ~= 'o' and nxt ~= 'u' and\n\t\t\t\t\tnxt ~= 'A' and nxt\
    \ ~= 'E' and nxt ~= 'I' and nxt ~= 'O' and nxt ~= 'U' then\n\t\t\t\t\treturn ch\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn ''\nend", "  local vowel = {a\
    \ = true, e = true, i = true, o = true, u = true, y = true}\n  local last = nil\n\
    \  for i = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if not vowel[c]\
    \ then\n      if last and vowel[last] then\n        return last\n      end\n \
    \   else\n      last = c\n    end\n  end\n  return ''\nend", "    -- write your\
    \ code here\nend", "\tif word == '' then\n\t\treturn ''\n\tend\n\tlocal vowel\
    \ = {'a', 'e', 'i', 'o', 'u'}\n\tlocal temp = ''\n\tfor i = string.len(word),\
    \ 1, -1 do\n\t\tfor j = 1, 5 do\n\t\t\tif word:sub(i, i) == vowel[j] then\n\t\t\
    \t\ttemp = word:sub(i, i)\n\t\t\t\tif i == string.len(word) or i == 1 then\n\t\
    \t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif not (word:sub(i + 1, i + 1) == vowel[j]\
    \ or word:sub(i - 1, i - 1) == vowel[j]) then\n\t\t\t\t\treturn temp\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn ''\nend", "\t--return ''\n\t-- write\
    \ your code here\n\t-- ...\n\t-- ...\n\t-- ...\n\tlocal vowel = 'aeiouAEIOU'\n\
    \tlocal ch = ''\n\tlocal len = #word\n\tfor i = 1, len do\n\t\tch = string.sub(word,\
    \ len - i + 1, len - i + 1)\n\t\tif (string.find(vowel, ch) ~= nil) then\n\t\t\
    \tfor j = 1, i - 1 do\n\t\t\t\tch = string.sub(word, len - i + 1 - j, len - i\
    \ + 1 - j)\n\t\t\t\tif (string.find(vowel, ch) == nil) then\n\t\t\t\t\treturn\
    \ string.sub(word, len - i + 1, len - i + 1)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn ''\nend", "  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local position = string.len(word)\n  local\
    \ index = 0\n  local last_vowel = ''\n  local first_consonant = ''\n  for i=1,string.len(word)\
    \ do\n    local letter = string.sub(word,i,i)\n    local pos = string.find(vowels,letter)\n\
    \    if pos ~= nil then\n      if index == 0 then\n        last_vowel = letter\n\
    \        index = i\n      end\n    else\n      pos = string.find(consonants,letter)\n\
    \      if pos ~= nil then\n        if first_consonant == '' then\n          first_consonant\
    \ = letter\n        end\n      end\n    end\n  end\n  if last_vowel == '' then\n\
    \    return ''\n  else\n    if index > string.len(word) - index then\n      return\
    \ ''\n    else\n      return last_vowel\n    end\n  end\nend", "  for i = #word,\
    \ 1, -1 do\n    if word:sub(i, i):match('[AEIOU]') then\n      return word:sub(i,\
    \ i)\n    end\n  end\n  return ''\nend", "    local vowel_list = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local vowel_set = {a = true, e = true, i = true, o = true, u\
    \ = true}\n    local wv_index = 0\n    local wc_index = 0\n    local wv_index_list\
    \ = {}\n    local wc_index_list = {}\n    for i = 1, #word do\n        if vowel_set[word:sub(i,\
    \ i)] then\n            wv_index = i\n            table.insert(wv_index_list,\
    \ wv_index)\n        else\n            wc_index = i\n            table.insert(wc_index_list,\
    \ wc_index)\n        end\n    end\n    for i = 1, #wc_index_list do\n        for\
    \ j = 1, #wv_index_list do\n            if wc_index_list[i] < wv_index_list[j]\
    \ then\n                return word:sub(wv_index_list[j], wv_index_list[j])\n\
    \            end\n        end\n    end\n    return ''\nend", "    local vowels\
    \ = 'aeiouAEIOU'\n    local closest_vowel = ''\n    local index = string.len(word)\n\
    \    while index > 0 do\n        if vowels:find(word:sub(index, index)) == nil\
    \ then\n            index = index - 1\n        else\n            closest_vowel\
    \ = word:sub(index, index)\n            break\n        end\n    end\n    return\
    \ closest_vowel\nend", "\tfor i=#word,1,-1 do\n\t\tif word:find('[aeiou]',i) then\n\
    \t\t\treturn word:sub(i,i)\n\t\tend\n\tend\n\treturn ''\nend", "\t-- your code\
    \ goes here\nend", "  local vowel_index = {}\n  local n = 1\n  for k, v in word:gmatch('([^aeiou]?)([aeiou])')\
    \ do\n    if #k > 0 then\n      vowel_index[n] = v\n      n = n + 1\n    end\n\
    \  end\n  return vowel_index[#vowel_index] or ''\nend", "\tlocal vowels = 'aeiouAEIOU'\n\
    \tfor i = #word, 2, -1 do\n\t\tlocal char = word:sub(i, i)\n\t\tif not vowels:find(char)\
    \ then\n\t\t\tlocal vowel = word:sub(i-1, i-1)\n\t\t\tif vowels:find(vowel) then\n\
    \t\t\t\treturn vowel\n\t\t\tend\n\t\tend\n\tend\n\treturn ''\nend", "    local\
    \ vowels = 'aeiouAEIOU'\n    local vowel_found = false\n    local closest_vowel\
    \ = ''\n    local vowel_pos = 0\n    local cons_count = 0\n    local cons_found\
    \ = false\n    for i = #word, 1, -1 do\n        if not vowel_found then\n    \
    \        local ch = word:sub(i, i)\n            if not vowels:find(ch) then\n\
    \                cons_count = cons_count + 1\n                cons_found = true\n\
    \            else\n                vowel_found = true\n                vowel_pos\
    \ = i\n            end\n        else\n            if cons_found then\n       \
    \         local ch = word:sub(i, i)\n                if not vowels:find(ch) then\n\
    \                    cons_count = cons_count + 1\n                else\n     \
    \               break\n                end\n            end\n        end\n   \
    \ end\n    if cons_count > 1 then\n        closest_vowel = word:sub(vowel_pos,\
    \ vowel_pos)\n    end\n    return closest_vowel\nend", "\t-- your code here\n\t\
    local vowels, conants = {a = true, e = true, i = true, o = true, u = true, A =\
    \ true, E = true, I = true, O = true, U = true}, {q = true, w = true, r = true,\
    \ t = true, p = true, s = true, d = true, f = true, g = true, h = true, j = true,\
    \ k = true, l = true, z = true, x = true, c = true, v = true, b = true, n = true,\
    \ m = true, Q = true, W = true, R = true, T = true, P = true, S = true, D = true,\
    \ F = true, G = true, H = true, J = true, K = true, L = true, Z = true, X = true,\
    \ C = true, V = true, B = true, N = true, M = true}\n\tlocal prev, next\n\tfor\
    \ i=1, #word do\n\t\tif vowels[word:sub(i,i)] then\n\t\t\tnext = word:sub(i,i)\n\
    \t\t\tif prev ~= nil then\n\t\t\t\tif conants[prev] and conants[word:sub(i+1,i+1)]\
    \ then\n\t\t\t\t\treturn next\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tprev = word:sub(i,i)\n\
    \tend\n\treturn ''\nend", "    return ''\nend", "    -- YOUR CODE HERE\n    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local idx = #word\n    local prev =\
    \ ''\n    local curr = ''\n    while idx > 0 do\n        curr = word:sub(idx,\
    \ idx)\n        if table.has_value(vowels, curr) then\n            return prev\
    \ == '' and '' or curr\n        end\n        prev = curr\n        idx = idx -\
    \ 1\n    end\n    return ''\nend", "    for i = #word, 1, -1 do\n        local\
    \ c = word:sub(i, i)\n        if is_vowel(c) then\n            if i > 1 and is_consonant(word:sub(i\
    \ - 1, i - 1)) then\n                return c\n            elseif i < #word and\
    \ is_consonant(word:sub(i + 1, i + 1)) then\n                return c\n      \
    \      end\n        end\n    end\n    return ''\nend", "    -- TODO Implement\
    \ this function\nend", "    local vowels = 'AEIOUaeiou'\n    for i = #word, 1,\
    \ -1 do\n        if vowels:find(word:sub(i, i)) and not vowels:find(word:sub(i\
    \ - 1, i - 1)) and not vowels:find(word:sub(i + 1, i + 1)) then\n            return\
    \ word:sub(i, i)\n        end\n    end\n    return ''\nend", "\tlocal vowels =\
    \ \"AEIOUaeiou\"\n\tlocal consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n\tlocal left, right\n\tlocal last_index, first_index", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local index = #word\n    while index > 0 do\n     \
    \   if not vowels[word:sub(index, index)] then\n            local temp = index\n\
    \            while index > 0 do\n                if vowels[word:sub(index, index)]\
    \ then\n                    return word:sub(index, index)\n                end\n\
    \                index = index - 1\n            end\n            index = temp\n\
    \        end\n        index = index - 1\n    end\n    return ''\nend", "    --\
    \ YOUR CODE HERE\n    local list = {'a','e','i','o','u'}\n    local l = #word\n\
    \    for i = 1, l do\n        if  (word:sub(l-i+1,l-i+1)=='a' or word:sub(l-i+1,l-i+1)=='e'\
    \ or word:sub(l-i+1,l-i+1)=='i' or word:sub(l-i+1,l-i+1)=='o' or word:sub(l-i+1,l-i+1)=='u')\n\
    \        and (word:sub(l-i,l-i)~='a' and word:sub(l-i,l-i)~='e' and word:sub(l-i,l-i)~='i'\
    \ and word:sub(l-i,l-i)~='o' and word:sub(l-i,l-i)~='u')\n        and (word:sub(l-i-1,l-i-1)~='a'\
    \ and word:sub(l-i-1,l-i-1)~='e' and word:sub(l-i-1,l-i-1)~='i' and word:sub(l-i-1,l-i-1)~='o'\
    \ and word:sub(l-i-1,l-i-1)~='u') then\n            return word:sub(l-i+1,l-i+1)\n\
    \        end\n    end\n    return ''\nend", "  local function get_last_index(s,\
    \ c)\n    local i = #s\n    while i > 0 do\n      if s:sub(i, i) == c then\n \
    \       return i\n      end\n      i = i - 1\n    end\n    return -1\n  end\n\
    \  local function get_first_index(s, c)\n    local i = 1\n    while i <= #s do\n\
    \      if s:sub(i, i) == c then\n        return i\n      end\n      i = i + 1\n\
    \    end\n    return -1\n  end\n  local function is_vowel(c)\n    return c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n      c == 'A' or c\
    \ == 'E' or c == 'I' or c == 'O' or c == 'U'\n  end\n  local function get_closest_vowel_from_right(word)\n\
    \    local result = ''\n    local i = #word\n    while i > 0 do\n      if not\
    \ is_vowel(word:sub(i, i)) then\n        local next_vowel_index = get_first_index(word:sub(i),\
    \ 'aeiouAEIOU')\n        if next_vowel_index ~= -1 then\n          result = word:sub(i\
    \ + next_vowel_index - 1, i + next_vowel_index - 1)\n        end\n        break\n\
    \      end\n      i = i - 1\n    end\n    return result\n  end\n  local function\
    \ get_closest_vowel_from_left(word)\n    local result = ''\n    local i = 1\n\
    \    while i <= #word do\n      if not is_vowel(word:sub(i, i)) then\n       \
    \ local next_vowel_index = get_last_index(word:sub(1, i), 'aeiouAEIOU')\n    \
    \    if next_vowel_index ~= -1 then\n          result = word:sub(next_vowel_index,\
    \ next_vowel_index)\n        end\n       ", end, "\t-- your code goes here\nend",
  "  return nil\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result\
    \ = nil\n  for i = 1, #word do\n    local found = false\n    for _,v in ipairs(vowels)\
    \ do\n      if v == word:sub(i, i) then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      local next_vowel = nil\n   \
    \   for j = i+1, #word do\n        for _,v in ipairs(vowels) do\n          if\
    \ v == word:sub(j, j) then\n            next_vowel = v\n            break\n  \
    \        end\n        end\n        if next_vowel then\n          break\n     \
    \   end\n      end\n      if next_vowel then\n        result = next_vowel\n  \
    \      break\n      end\n    end\n  end\n  return result\nend", "\tlocal vowels,\
    \ consonents = 'aeiou', 'bcdfghjklmnpqrstvwxyz'\n\tlocal vowel = ''\n\tlocal index\
    \ = 0\n\t\n\tfor i = #word, 1, -1 do\n\t\tlocal char = word:sub(i, i)\n\t\t\n\t\
    \tif string.find(consonents, char, 1, true) then\n\t\t\tvowel = word:sub(i + 1,\
    \ i + 1)\n\t\t\tindex = i + 1\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\tif string.find(vowels,\
    \ vowel, 1, true) and index ~= 0 then\n\t\tfor i = index + 1, #word do\n\t\t\t\
    local char = word:sub(i, i)\n\t\t\t\n\t\t\tif string.find(consonents, char, 1,\
    \ true) then\n\t\t\t\treturn vowel\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn ''\n\
    end", "\t-- TODO: complete this function\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
