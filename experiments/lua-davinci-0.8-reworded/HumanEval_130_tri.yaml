name: HumanEval_130_tri
language: lua
prompt: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n\
  -- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) =\
  \ 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You are given\
  \ a non-negative integer number n, you have to a return a table of the \n-- first\
  \ n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n-- {1,\
  \ 3, 2, 8}\nlocal function tri(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
  \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
  \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n   \
  \ lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
  \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
  \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n\
  \    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: [end, "    local function h(x)\n        if x == 1 then return 3\n   \
    \     elseif x % 2 == 0 then return 1 + x / 2\n        else return h(x - 1) +\
    \ h(x - 2) + h(x + 1)\n        end\n    end\n    local t = {}\n    for i = 1,\
    \ n + 1 do t[i] = h(i) end\n    return t\nend", "\tlocal t = {1, 3, 2}\n\tfor\
    \ i = 4, n + 1 do\n\t\tif i % 2 == 0 then\n\t\t\tt[i] = 1 + i / 2\n\t\telse\n\t\
    \t\tt[i] = t[i - 1] + t[i - 2] + t[i + 1]\n\t\tend\n\tend\n\treturn t\nend", " \
    \   assert(n >= 0)\n    local t = {1, 3, 2}\n    for i = 4, n + 1 do\n       \
    \ t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n    end\n    return t\nend", "    --\
    \ your code here\nend", "  if n == 0 then return {} end\n  local r = {1, 3, 2}\n\
    \  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      r[i] = 1 + i / 2\n    else\n\
    \      r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n    end\n  end\n  return r\nend",
  "    local t = {0, 1, 3}\n    for i = 1, n do\n        if i%2 == 0 then\n      \
    \      t[i + 1] = 1 + i / 2\n        else\n            t[i + 1] = t[i] + t[i -\
    \ 1] + t[i + 2]\n        end\n    end\n    return t\nend", "    local r, i = {1,\
    \ 3, 2}, 3\n    while i <= n do\n        r[i + 1] = ((i % 2 == 0) and (1 + i /\
    \ 2) or (r[i] + r[i - 1] + r[i + 1]))\n        i = i + 1\n    end\n    return\
    \ r\nend", "  local result = {1, 3, 2}\n  for i = 1, n - 2 do\n    result[i +\
    \ 3] = result[i + 2] + result[i + 1] + result[i]\n  end\n  return result\nend",
  "    local out = {1, 3, 2}\n    for i = 3, n do\n        out[i + 1] = (i % 2 ==\
    \ 0) and (1 + i / 2) or (out[i] + out[i - 1] + out[i + 1])\n    end\n    return\
    \ out\nend", "    local res = {1, 3, 2}\n    for i = 4, n + 1 do\n        if i\
    \ % 2 == 0 then\n            res[i] = 1 + i / 2\n        else\n            res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1]\n        end\n    end\n    return res\n\
    end", "    -- Code here\nend", "    local t = {[0] = 1, [1] = 3, [2] = 2}\n  \
    \  for i = 3, n do\n        t[i] = 1 + i / 2\n        if i % 2 == 1 then\n   \
    \         t[i] = t[i] + t[i - 1] + t[i - 2] + t[i + 1]\n        end\n    end\n\
    \    return t\nend", end, "\tlocal t = {3}\n\tlocal a, b, c = 3, 2, 1\n\tfor i\
    \ = 1, n do\n\t\ta, b, c = c, a, a + b + c\n\t\tt[i + 1] = c\n\tend\n\treturn\
    \ t\nend", "\nend", "  local tri = {1, 3, 2}\n  if n < 2 then return {} end\n\
    \  if n == 2 then return {1, 3, 2} end\n  if n == 3 then return {1, 3, 2, 8} end\n\
    \  for i = 4, n do\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n  end\n\
    \  return tri\nend", end, "\nend", "\tif not n then\n\t\treturn nil\n\tend\n\t\
    if n == 0 then\n\t\treturn {1}\n\tend\n\tlocal t = {1, 3, 2}\n\tlocal k = #t\n\
    \tfor i = 3, n do\n\t\tif i % 2 == 0 then\n\t\t\tt[k + 1] = 1 + i / 2\n\t\telse\n\
    \t\t\tt[k + 1] = t[k] + t[k - 1] + t[k - 2]\n\t\tend\n\t\tk = k + 1\n\tend\n\t\
    return t\nend", "    -- Write your code here\n    local t = {1, 3, 2}\n    for\
    \ i = 4, n do\n        if i % 2 == 0 then\n            t[i] = 1 + i / 2\n    \
    \    else\n            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n        end\n  \
    \  end\n    return t\nend", "  local t = {1, 3, 2}\n  if n < 3 then\n    return\
    \ {unpack(t, 1, n + 1)}\n  end\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n\
    \      t[i] = 1 + i / 2\n    else\n      t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n\
    \    end\n  end\n  return t\nend", "    local fib = {1, 3, 2}\n    for i = 3,\
    \ n do\n        local fib_i = fib[i - 1] + fib[i - 2] + fib[i - 3]\n        table.insert(fib,\
    \ fib_i)\n    end\n    return fib\nend", end, end, "  local t = {1, 3, 2}\n  for\
    \ i = 3, n do\n    if i % 2 == 0 then\n      t[i + 1] = 1 + i / 2\n    else\n\
    \      t[i + 1] = t[i] + t[i - 1] + t[i + 1]\n    end\n  end\n  return t\nend",
  "  local t = {1, 3, 2}\n  for i = 3, n do\n    local v\n    if (i % 2) == 0 then\n\
    \      v = 1 + i / 2\n    else\n      v = t[i] + t[i - 1] + t[i + 1]\n    end\n\
    \    table.insert(t, v)\n  end\n  return t\nend", "  local t = {3}\n  for i =\
    \ 1, n do\n    local v = (i % 2 == 0) and (1 + i / 2) or t[i] + t[i - 1] + t[i\
    \ + 1]\n    table.insert(t, v)\n  end\n  return t\nend", "  local tri = { 1, 3,\
    \ 2 }\n  for i = 4, n + 1 do\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n\
    \  end\n  return tri\nend", "  local t = {[0] = 0, 1, 3}\n  for i = 3, n do\n\
    \    if i % 2 == 0 then\n      t[i + 1] = 1 + i / 2\n    else\n      t[i + 1]\
    \ = t[i] + t[i - 1] + t[i - 2]\n    end\n  end\n  return t\nend", "    local tab\
    \ = {1, 3, 2}\n    if n <= 3 then return tab end\n    for i = 4, n + 1 do\n  \
    \      if i % 2 == 0 then\n            tab[i] = 1 + i / 2\n        else\n    \
    \        tab[i] = tab[i - 1] + tab[i - 2] + tab[i + 1]\n        end\n    end\n\
    \    return tab\nend", "    if n <= 0 then return {} end\n    local result = {1,\
    \ 3, 2}\n    if n <= 2 then return result end\n    local t1, t2, t3 = 1, 3, 2\n\
    \    for i = 4, n + 1 do\n        local tmp = t1 + t2 + t3\n        t1, t2, t3\
    \ = t2, t3, tmp\n        result[i] = tmp\n    end\n    return result\nend", " \
    \   local arr = {1, 3, 2}\n    if n < 3 then return {1, 3, 2} end\n    for i =\
    \ 4, n + 1 do\n        if i % 2 == 0 then\n            arr[i] = 1 + i / 2\n  \
    \      else\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1]\n     \
    \   end\n    end\n    return arr\nend", "\tif n == 0 then\n\t\treturn {}\n\telseif\
    \ n == 1 then\n\t\treturn {3}\n\telseif n == 2 then\n\t\treturn {3, 2}\n\telseif\
    \ n == 3 then\n\t\treturn {3, 2, 8}\n\telse\n\t\tlocal prev = tri(n - 1)\n\t\t\
    local last = prev[#prev]\n\t\tlocal last2 = prev[#prev - 1]\n\t\tlocal last3 =\
    \ prev[#prev - 2]\n\t\tif last % 2 == 0 then\n\t\t\treturn add(prev, 1 + last\
    \ / 2)\n\t\telse\n\t\t\treturn add(prev, last + last2 + last3)\n\t\tend\n\tend\n\
    end", "  -- your code here\nend", "\tlocal result = {1, 3, 2}\n\tfor i = 3, n\
    \ do\n\t\tresult[i + 1] = result[i] + result[i - 1] + result[i - 2]\n\tend\n\t\
    return result\nend", "    local nums = {1, 3, 2}\n    for i = 4, n + 1 do\n  \
    \      if i % 2 == 0 then\n            nums[i] = 1 + i / 2\n        else\n   \
    \         nums[i] = nums[i - 1] + nums[i - 2] + nums[i + 1]\n        end\n   \
    \ end\n    return nums\nend", "    local result = {1, 3, 2}\n    if n == 0 then\
    \ return {} end\n    if n == 1 then return {1} end\n    if n == 2 then return\
    \ {1, 3} end\n    if n == 3 then return {1, 3, 2} end\n    for i = 4, n + 1 do\n\
    \        result[i] = result[i - 1] + result[i - 2] + result[i - 3]\n    end\n\
    \    return result\nend", "  if n == 0 then return {} end\n  local t = {1, 3,\
    \ 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      t[i] = 1 + i / 2\n\
    \    else\n      t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n    end\n  end\n  return\
    \ t\nend", "  local t = {1, 3, 2}\n  for i = 4, n + 1 do\n    t[i] = (t[i - 1]\
    \ + t[i - 2] + t[i - 3]) + ((i % 2) and -1 or 0.5)\n  end\n  return t\nend", " \
    \ if n < 0 then\n    return {}\n  end\n  local t = {1, 3, 2}\n  for i = 4, n +\
    \ 1 do\n    local v = t[i - 1] + t[i - 2] + t[i - 3]\n    t[i] = v\n  end\n  return\
    \ t\nend", "    local r = {1, 3, 2}\n    local l = 3\n    if n == 0 then return\
    \ {} end\n    if n == 1 then return {1} end\n    if n == 2 then return {1, 3}\
    \ end\n    if n == 3 then return {1, 3, 2} end\n    for i = 4, n do\n        local\
    \ v = i\n        if i % 2 == 0 then\n            v = 1 + (i / 2)\n        else\n\
    \            v = r[l] + r[l - 1] + r[l - 2]\n        end\n        l = l + 1\n\
    \        r[l] = v\n    end\n    return r\nend", "    local result = {1, 3, 2}\n\
    \    if n < 2 then return {1, 3} end\n    if n < 3 then return {1, 3, 2} end\n\
    \    for i = 4, n + 1 do\n        if (i % 2) == 0 then\n            result[i]\
    \ = 1 + i / 2\n        else\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1]\n        end\n    end\n    return result\nend\nreturn tri",
  "  if n == 0 then return {} end\n  local t = {1, 3, 2}\n  for i = 4, n + 1 do\n\
    \    t[i] = t[i - 1] + t[i - 2] + t[i - 3]\n  end\n  return t\nend", "  local\
    \ t = {1, 3, 2}\n  for i = 3, n do\n    local nxt = (i % 2 == 0) and (1 + i /\
    \ 2) or (t[i] + t[i - 1] + t[i + 1])\n    table.insert(t, nxt)\n  end\n  return\
    \ t\nend", "    if n <= 0 then return {1} end\n    local t = {1, 3, 2}\n    for\
    \ i = 3, n do\n        if (i + 1) % 2 == 0 then\n            t[i + 1] = 1 + (i\
    \ + 1) / 2\n        else\n            t[i + 1] = t[i] + t[i - 1] + t[i + 2]\n\
    \        end\n    end\n    return t\nend", end, "  if n < 0 then\n    return nil\n\
    \  end\n  local result = {1, 3, 2}\n  for i = 3, n do\n    result[i + 1] = result[i]\
    \ + result[i - 1] + result[i - 2]\n  end\n  return result\nend", "  local arr\
    \ = {1, 3, 2}\n  for i = 4, n do\n    arr[i] = (arr[i - 1] + arr[i - 2] + arr[i\
    \ - 3])\n  end\n  return arr\nend", "    local d = {1, 3, 2}\n    for i = 4, n\
    \ do\n        if i % 2 == 0 then\n            d[i] = 1 + i / 2\n        else\n\
    \            d[i] = d[i - 1] + d[i - 2] + d[i + 1]\n        end\n    end\n   \
    \ return d\nend", "    local function _tr(i)\n        if i < 0 then return 0 end\n\
    \        if i == 0 then return 1 end\n        if i == 1 then return 3 end\n  \
    \      if i == 2 then return 2 end\n        if i % 2 == 0 then return 1 + i /\
    \ 2 end\n        return _tr(i - 1) + _tr(i - 2) + _tr(i + 1)\n    end\n    local\
    \ res = {}\n    for i = 0, n do\n        res[i + 1] = _tr(i)\n    end\n    return\
    \ res\nend", end, "    if n == 0 then\n        return {1}\n    elseif n == 1 then\n\
    \        return {1, 3}\n    elseif n == 2 then\n        return {1, 3, 2}\n   \
    \ else\n        local tri = {1, 3, 2}\n        for i = 3, n do\n            if\
    \ i % 2 == 0 then\n                tri[i + 1] = 1 + i / 2\n            else\n\
    \                tri[i + 1] = tri[i] + tri[i - 1] + tri[i + 1 - 1]\n         \
    \   end\n        end\n        return tri\n    end\nend", "  assert(type(n) ==\
    \ \"number\" and n >= 0, \"tri: invalid number\")\n  local t = {1, 3, 2}\n  for\
    \ i = 3, n do\n    t[i + 1] = t[i] * (i % 2 == 0 and 1 or 2) + t[i - 1] + t[i\
    \ - 2]\n  end\n  return t\nend", "\nend", "    local fibs = {1, 3, 2}\n    for\
    \ i = 3, n do\n        fibs[i + 1] = fibs[i] + fibs[i - 1] + fibs[i - 2]\n   \
    \ end\n    return fibs\nend", "    local t = {1, 3, 2}\n    if n < 3 then\n  \
    \      return t\n    end\n    for i = 3, n do\n        local a = t[#t - 2]\n \
    \       local b = t[#t - 1]\n        local c = t[#t]\n        t[#t + 1] = a +\
    \ b + c\n    end\n    return t\nend", "    local t = {1, 3, 2}\n    for i = 3,\
    \ n do\n        t[i + 1] = t[i] + t[i - 1] + t[i - 2]\n    end\n    return t\n\
    end\n \n ", "  local function tri_rec(l, n)\n    if n == 0 then return {} end\n\
    \    if l[n] then return l[n] end\n    if n == 1 then return {1, 3} end\n    if\
    \ n == 2 then return {1, 3, 2} end\n    if n % 2 == 0 then\n      l[n] = tri_rec(l,\
    \ n - 1)\n      table.insert(l[n], 1 + n / 2)\n    else\n      l[n] = tri_rec(l,\
    \ n - 1)\n      table.insert(l[n], l[n][#l[n]] + l[n][#l[n] - 1] + l[n][#l[n]\
    \ - 2])\n    end\n    return l[n]\n  end\n  return tri_rec({}, n)\nend", "\tlocal\
    \ function f(n)\n\t\tif n % 2 == 0 then\n\t\t\treturn 1 + n / 2\n\t\telse\n\t\t\
    \treturn tri(n - 1) + tri(n - 2) + tri(n + 1)\n\t\tend\n\tend\n\tlocal seq = {}\n\
    \tfor i = 1, n + 1 do\n\t\tseq[i] = f(i)\n\tend\n\treturn seq\nend", end, "\t\
    t = {3}\n\tfor i = 1, n do\n\t\tif i == 1 then\n\t\t\tt[i] = 3\n\t\telseif i %\
    \ 2 == 0 then\n\t\t\tt[i] = 1 + i / 2\n\t\telse\n\t\t\tt[i] = t[i - 1] + t[i -\
    \ 2] + t[i + 1]\n\t\tend\n\tend\n\treturn t\nend", "    -- code here\nend", end,
  "  -- your code here\nend", "  local result = {1, 3, 2}\n  if n <= 2 then\n    return\
    \ {1, 3, 2, unpack(result, 1, n)}\n  end\n  local sum\n  for i = 3, n do\n   \
    \ if i % 2 == 0 then\n      sum = 1 + i / 2\n    else\n      sum = result[i] +\
    \ result[i - 1] + result[i + 1]\n    end\n    table.insert(result, sum)\n  end\n\
    \  return {1, 3, 2, unpack(result)}\nend", "    -- your code here\n    if n ==\
    \ 0 then return {} end\n    if n == 1 then return {1} end\n    if n == 2 then\
    \ return {1,3} end\n    local v = {1,3,2}\n    for i = 3, n do\n        if i %\
    \ 2 == 0 then\n            table.insert(v, 1 + i / 2)\n        else\n        \
    \    table.insert(v, v[i - 1] + v[i - 2] + v[i + 1])\n        end\n    end\n \
    \   return v\nend", "    local t = {1, 3, 2}\n    if n < 3 then\n        return\
    \ {table.unpack(t, 1, n + 1)}\n    end\n    for i = 4, n + 1 do\n        t[i]\
    \ = t[i - 1] + t[i - 2] + t[i - 3]\n    end\n    return t\nend", "  local t={1,3,2}\n\
    \  for i=4,n+1 do\n    if i%2==0 then\n      t[i]=1+i/2\n    else\n      t[i]=t[i-1]+t[i-2]+t[i+1]\n\
    \    end\n  end\n  return t\nend", "    local sequence = {1, 3, 2}\n    for i\
    \ = 3, n do\n        if i % 2 == 0 then\n            sequence[i + 1] = 1 + i /\
    \ 2\n        else\n            sequence[i + 1] = sequence[i] + sequence[i - 1]\
    \ + sequence[i + 1]\n        end\n    end\n    return sequence\nend", "  local\
    \ memo = {1, 3, 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      memo[i]\
    \ = 1 + i / 2\n    else\n      memo[i] = memo[i - 1] + memo[i - 2] + memo[i +\
    \ 1]\n    end\n  end\n  return memo\nend", "  local t = {1, 3, 2}\n  for i = 3,\
    \ n do\n    t[i + 1] = t[i] + t[i - 1] + t[i - 2]\n  end\n  return t\nend", " \
    \   local function fn(m)\n        if m == 1 then\n            return 3\n     \
    \   elseif m % 2 == 0 then\n            return 1 + m / 2\n        else\n     \
    \       return fn(m - 1) + fn(m - 2) + fn(m + 1)\n        end\n    end\n    local\
    \ ret = {}\n    for i = 1, n + 1 do\n        ret[i] = fn(i)\n    end\n    return\
    \ ret\nend", "    local t = {1, 3, 2}\n    for i = 3, n do\n        if (i % 2\
    \ == 0) then\n            t[i + 1] = 1 + i / 2\n        else\n            t[i\
    \ + 1] = t[i] + t[i - 1] + t[i + 1]\n        end\n    end\n    return t\nend",
  "  if n == 0 then return {} end\n  local a, b, c = 3, 2, 1\n  local v = {a}\n  while\
    \ #v < n do\n    if #v % 2 == 0 then\n      v[#v + 1] = 1 + #v / 2\n    else\n\
    \      v[#v + 1] = v[#v - 2] + v[#v - 1] + v[#v]\n    end\n  end\n  return v\n\
    end", "\tlocal ret = {3}\n\tfor i = 1, n do\n\t\tret[i + 1] = ret[i] + ret[i -\
    \ 1] + ret[i - 2]\n\tend\n\treturn ret\nend", "  local result = {1, 3, 2}\n  for\
    \ i = 4, n + 1 do\n    result[i] = (i - 1) / 2 + result[i - 1] + result[i - 2]\
    \ + result[i - 3]\n  end\n  return result\nend", "  local result = {1, 3, 2}\n\
    \  for i = 3, n do\n    local s = result[i] + result[i - 1] + result[i - 2]\n\
    \    table.insert(result, s)\n  end\n  return result\nend", "\tlocal a, b, c =\
    \ 1, 3, 2\n\tlocal t = {1, 3, 2}\n\tfor i = 4, n do\n\t\tt[i] = (i % 2 == 0) and\
    \ math.floor(1 + i / 2) or (a + b + c)\n\t\ta, b, c = b, c, t[i]\n\tend\n\treturn\
    \ t\nend", end, "    local a = {1, 3, 2}\n    local i = 3\n    while i <= n do\n\
    \        if i % 2 == 0 then\n            a[i + 1] = 1 + i / 2\n        else\n\
    \            a[i + 1] = a[i] + a[i - 1] + a[i - 2]\n        end\n        i = i\
    \ + 1\n    end\n    return a\nend", "    local t = {1, 3, 2}\n    for i = 4, n\
    \ + 1 do\n        t[i] = (i % 2 ~= 0) and (t[i - 1] + t[i - 2] + t[i + 1]) or\
    \ (1 + i / 2)\n    end\n    return t\nend", "  local function even(m)\n    return\
    \ m / 2\n  end\n  local function odd(m)\n    return tri(m - 1) + tri(m - 2) +\
    \ tri(m + 1)\n  end\n  if n == 1 then\n    return {1, 3}\n  elseif n % 2 == 0\
    \ then\n    return tri(n - 1) .. even(n)\n  else\n    return tri(n - 1) .. odd(n)\n\
    \  end\nend", "    local t = {1, 3, 2}\n    if n == 2 then\n        return t\n\
    \    end\n    local i = 3\n    while i <= n do\n        if i % 2 == 0 then\n \
    \           table.insert(t, 1 + i / 2)\n        else\n            table.insert(t,\
    \ t[i] + t[i - 1] + t[i + 1])\n        end\n        i = i + 1\n    end\n    return\
    \ t\nend", "  local t = {1, 3, 2}\n  for i = 4, n + 1 do\n    t[i] = t[i - 1]\
    \ + t[i - 2] + t[i - 3]\n  end\n  return t\nend", "  local r = {1, 3, 2}\n  if\
    \ n < 3 then\n    return r\n  end\n  for i = 4, n + 1 do\n    local a, b, c =\
    \ r[i - 3], r[i - 2], r[i - 1]\n    r[i] = i % 2 == 0 and 1 + i / 2 or a + b +\
    \ c\n  end\n  return r\nend", "\tlocal t = {1, 3, 2}\n\tfor i = 3, n do\n\t\t\
    local j = i + 1\n\t\tif j % 2 == 0 then\n\t\t\tt[j] = 1 + j / 2\n\t\telse\n\t\t\
    \tt[j] = t[j - 1] + t[j - 2] + t[j + 1]\n\t\tend\n\tend\n\treturn t\nend", end,
  "    local t = { 1, 3, 2 }\n    if n == 0 then return {} end\n    if n == 1 then\
    \ return { 1 } end\n    if n == 2 then return { 1, 3 } end\n    if n == 3 then\
    \ return { 1, 3, 2 } end\n    for i = 4, n + 1 do\n        t[i] = t[i - 1] + t[i\
    \ - 2] + t[i - 3]\n    end\n    return t\nend", "  local seq = {1, 3, 2}\n  for\
    \ i = 3, n do\n    seq[i + 1] = seq[i] + seq[i - 1] + seq[i - 2]\n  end\n  return\
    \ seq\nend", "  local t = {1, 3, 2}\n  for i = 3, n do\n    t[i + 1] = t[i] +\
    \ t[i - 1] + t[i - 2]\n  end\n  return t\nend", "    if n < 2 then return {1,\
    \ 3} end\n    local res = {1, 3, 2}\n    for i = 3, n do\n        res[i + 1] =\
    \ res[i] + res[i - 1] + res[i - 2]\n    end\n    return res\nend", "    local\
    \ l = {1, 3, 2}\n    for i = 4, n + 1 do\n        if i % 2 == 0 then\n       \
    \     l[i] = 1 + i / 2\n        else\n            l[i] = l[i - 1] + l[i - 2] +\
    \ l[i + 1]\n        end\n    end\n    return l\nend", "  local t = {1, 3, 2}\n\
    \  if n <= 2 then\n    return {1, 3, 2, table.unpack(t, 1, n + 1)}\n  end\n  for\
    \ i = 4, n + 1 do\n    t[i] = (i % 2 == 0) and (1 + (i / 2)) or (t[i - 1] + t[i\
    \ - 2] + t[i + 1])\n  end\n  return {1, 3, 2, table.unpack(t)}\nend", "    local\
    \ t = {1, 3, 2}\n    for i = 4, n + 1 do\n        if i % 2 == 0 then\n       \
    \     t[i] = 1 + i / 2\n        else\n            t[i] = t[i - 1] + t[i - 2] +\
    \ t[i + 1]\n        end\n    end\n    return t\nend", "    local res = {[0] =\
    \ 1, [1] = 3, [2] = 2}\n    for i = 3, n do\n        res[i] = i % 2 == 0 and (1\
    \ + i / 2) or res[i - 1] + res[i - 2] + res[i + 1]\n    end\n    return res\n\
    end", "\tlocal function trionacci(n)\n\t\treturn (n % 2 == 0) and (1 + n / 2)\
    \ or (trionacci(n - 1) + trionacci(n - 2) + trionacci(n + 1))\n\tend\n\tlocal\
    \ res = {}\n\tfor i = 1, n + 1 do\n\t\tres[i] = trionacci(i)\n\tend\n\treturn\
    \ res\nend", "\tlocal tri, a, b, c = {1, 3, 2}, 1, 3, 2\n\tfor i = 4, n + 1 do\n\
    \t\tif (i % 2 == 0) then\n\t\t\ttri[i] = 1 + i / 2\n\t\telse\n\t\t\ttri[i] = a\
    \ + b + c\n\t\t\ta, b, c = b, c, tri[i]\n\t\tend\n\tend\n\treturn tri\nend", " \
    \   return {}\nend", "    local s = {1, 3, 2}\n    for i = 4, n + 1 do\n     \
    \   if i % 2 == 0 then\n            s[i] = 1 + i / 2\n        else\n         \
    \   s[i] = s[i - 1] + s[i - 2] + s[i + 1]\n        end\n    end\n    return s\n\
    end", "    local tab = {1, 3, 2}\n    if n <= 2 then\n        return tab\n   \
    \ end\n    for i = 3, n do\n        if i % 2 == 0 then\n            tab[i + 1]\
    \ = 1 + i / 2\n        else\n            tab[i + 1] = tab[i] + tab[i - 1] + tab[i\
    \ + 1]\n        end\n    end\n    return tab\nend", "    local a = { 1, 3, 2 }\n\
    \    for i = 4, n + 1 do\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n    end\n\
    \    return a\nend", "    return {}\nend", end, "    local ret = {1, 3, 2}\n \
    \   local i = 4\n    while i <= n + 1 do\n        local sum = 0\n        if i\
    \ % 2 == 0 then\n            sum = 1 + (i / 2)\n        else\n            sum\
    \ = tri(i - 1) + tri(i - 2) + tri(i + 1)\n        end\n        table.insert(ret,\
    \ sum)\n        i = i + 1\n    end\n    return ret\nend", "  local result = {1,\
    \ 3, 2}\n  for i = 3, n do\n    local v = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n    table.insert(result, v)\n  end\n  return result\nend", "    local\
    \ t = {1, 3, 2}\n    if n == 0 then\n        return {1}\n    elseif n == 1 then\n\
    \        return {1, 3}\n    elseif n == 2 then\n        return {1, 3, 2}\n   \
    \ else\n        for i = 4, n+1 do\n            if i % 2 == 0 then\n          \
    \      t[i] = 1 + i / 2\n            else\n                t[i] = t[i-1] + t[i-2]\
    \ + t[i-3]\n            end\n        end\n    end\n    return t\nend", "\tlocal\
    \ t={1,3,2}\n\tfor i=3,n do\n\t\tlocal s=t[i-1]+t[i-2]+t[i-3]\n\t\ttable.insert(t,s)\n\
    \tend\n\treturn t\nend", "  local t = {1, 3, 2}\n  for i = 4, n do\n    if i %\
    \ 2 == 0 then\n      t[i] = 1 + i / 2\n    else\n      t[i] = t[i - 1] + t[i -\
    \ 2] + t[i + 1]\n    end\n  end\n  return t\nend", "    if n == 0 then\n     \
    \   return {3}\n    end\n    if n == 1 then\n        return {1, 3}\n    end\n\
    \    if n == 2 then\n        return {3, 2, 8}\n    end\n    local t = tri(n -\
    \ 1)\n    table.insert(t, t[#t - 2] + t[#t - 1] + t[#t])\n    return t\nend",
  "  local arr = {1, 3, 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      arr[i]\
    \ = i / 2\n    else\n      arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1]\n   \
    \ end\n  end\n  return arr\nend", "  local a, b, c = 1, 3, 2\n  local ret = {a,\
    \ b, c}\n  for i = 4, n + 1 do\n    local d = (i % 2 == 0) and (1 + i / 2) or\
    \ (a + b + c)\n    a, b, c = b, c, d\n    ret[i] = d\n  end\n  return ret\nend",
  "  local t = {1, 3, 2}\n  for i = 4, n + 1 do\n    t[i] = t[i - 1] + t[i - 2] +\
    \ t[i - 3]\n  end\n  return t\nend", "  local t = {1, 3, 2}\n  for i = 4, n +\
    \ 1 do\n    if i % 2 == 0 then\n      t[i] = 1 + i / 2\n    else\n      t[i] =\
    \ t[i - 1] + t[i - 2] + t[i + 1]\n    end\n  end\n  return t\nend", "\tlocal t\
    \ = {1, 3, 2}\n\tlocal i = 3\n\twhile i <= n do\n\t\tt[i + 1] = (i % 2 ~= 0) and\
    \ (t[i] + t[i - 1] + t[i - 2]) or (1 + i / 2)\n\t\ti = i + 1\n\tend\n\treturn\
    \ t\nend", "    local res = {1, 3, 2}\n    if n == 2 then\n        return res\n\
    \    end\n    local t = 3\n    for i = 4, n + 1 do\n        local a = res[i -\
    \ 1]\n        local b = res[i - 2]\n        local c = res[i - 3]\n        if i\
    \ % 2 == 0 then\n            res[i] = 1 + i / 2\n        else\n            res[i]\
    \ = a + b + c\n        end\n    end\n    return res\nend", "    local result =\
    \ {1, 3, 2}\n    for i = 4, n + 1 do\n        if i % 2 == 0 then\n           \
    \ result[i] = 1 + i / 2\n        else\n            result[i] = result[i - 1] +\
    \ result[i - 2] + result[i + 1]\n        end\n    end\n    return result\nend",
  "  local t = {3}\n  local sum = 0\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     sum = sum + i / 2\n    else\n      sum = sum + t[#t - 2] + t[#t - 1] + t[#t]\n\
    \    end\n    table.insert(t, sum)\n  end\n  return t\nend", "  local t = {1,\
    \ 3, 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      t[i] = 1 + i / 2\n\
    \    else\n      t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n    end\n  end\n  return\
    \ t\nend", "  if n < 1 then\n    return {}\n  end\n  local arr = {1, 3, 2}\n \
    \ local evenFunc = function(i) return 1 + (i / 2) end\n  local oddFunc = function(i)\
    \ return arr[i - 1] + arr[i - 2] + arr[i + 1] end\n  for i = 3, n do\n    arr[i\
    \ + 1] = i % 2 == 0 and evenFunc(i) or oddFunc(i)\n  end\n  return arr\nend",
  "\tif n < 0 then\n\t\treturn {1}\n\tend\n\tlocal fib = {1, 3, 2}\n\tlocal i = 3\n\
    \twhile i <= n do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(fib, 1 + i / 2)\n\
    \t\telse\n\t\t\ttable.insert(fib, fib[i] + fib[i - 1] + fib[i + 1])\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn fib\nend", "  -- Your code here\nend", "    local\
    \ r = {1, 3, 2}\n    if n < 2 then\n        return {r[1], r[n + 1]}\n    end\n\
    \    if n < 3 then\n        return r\n    end\n    for i = 3, n do\n        if\
    \ i % 2 == 0 then\n            r[i + 1] = 1 + i / 2\n        else\n          \
    \  r[i + 1] = r[i] + r[i - 1] + r[i + 2]\n        end\n    end\n    return r\n\
    end", "  -- your code here\nend", "  local function next(n, v1, v2, v3)\n    if\
    \ n == 0 then return {} end\n    return next(n - 1, v2, v3, v1 + v2 + v3)\n  end\n\
    \  return { 1, 3, 2 } + next(n, 1, 3, 2)\nend", "  local t = {1, 3, 2}\n  for\
    \ i = 3, n do\n    if i % 2 == 0 then\n      t[i + 1] = 1 + i / 2\n    else\n\
    \      t[i + 1] = t[i] + t[i - 1] + t[i + 1]\n    end\n  end\n  return t\nend",
  "    local t = {1, 3, 2}\n    for i = 4, n + 1 do\n        if i % 2 == 0 then\n\
    \            t[i] = 1 + i / 2\n        else\n            t[i] = t[i - 1] + t[i\
    \ - 2] + t[i + 1]\n        end\n    end\n    return t\nend", "  local result =\
    \ {1, 3, 2}\n  for i = 3, n do\n    local last = result[#result]\n    local second_last\
    \ = result[#result - 1]\n    local third_last = result[#result - 2]\n    if i\
    \ % 2 == 0 then\n      result[#result + 1] = 1 + i / 2\n    else\n      result[#result\
    \ + 1] = last + second_last + third_last\n    end\n  end\n  return result\nend",
  "  local t = {1, 3, 2}\n  for i = 3, n do\n    if i % 2 == 0 then\n      t[i + 1]\
    \ = t[i]\n    else\n      t[i + 1] = t[i] + t[i - 1] + t[i - 2]\n    end\n  end\n\
    \  return t\nend", "\nend", "    local t = {1, 3, 2}\n    for i = 4, n + 1 do\n\
    \        t[i] = t[i - 1] + t[i - 2] + t[i - 3]\n    end\n    return t\nend", end,
  "\t-- code goes here\nend", "    --your code here\nend", "    local r = {1, 3, 2}\n\
    \    for i = 4, n + 1 do\n        if i % 2 == 0 then\n            r[i] = 1 + i\
    \ / 2\n        else\n            r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n     \
    \   end\n    end\n    return r\nend", "  local fib = {}\n  for i = 1, n + 1 do\n\
    \    if i == 1 then\n      fib[i] = 1\n    elseif i == 2 then\n      fib[i] =\
    \ 3\n    elseif i == 3 then\n      fib[i] = 2\n    else\n      fib[i] = fib[i\
    \ - 1] + fib[i - 2] + fib[i - 3]\n    end\n  end\n  return fib\nend", "  return\
    \ assert(loadstring(string.format([[\n    return {1, 3, 2, 8, 13, 21, 34, 55,\
    \ 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368,\
    \ 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296,\
    \ 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049,\
    \ 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445,\
    \ 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961,\
    \ 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288,\
    \ 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129,\
    \ 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707,\
    \ 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906,\
    \ 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585,\
    \ 420196140727489673, 679891637638612258, 1100087778366101931, 1779979416004714189,\
    \ 2880067194370816120, 4660046610375530309, 7540113804746346429, 12200160415",
  "   local function triIter(x, y, z, count)\n      if count == 0 then\n         return\
    \ nil\n      else\n         local next = (x + y + z) / 2\n         if count ==\
    \ 1 then\n            next = math.floor(next)\n         end\n         return next,\
    \ x, y, z, count - 1\n      end\n   end\n   return function()\n      return triIter(1,\
    \ 3, 2, n + 1)\n   end\nend", "  local t = {1, 3, 2}\n  for i = 3, n + 1 do\n\
    \    if i % 2 == 0 then\n      t[i + 1] = 1 + i / 2\n    else\n      t[i + 1]\
    \ = t[i] + t[i - 1] + t[i + 2]\n    end\n  end\n  return t\nend", "    local result\
    \ = { 1, 3, 2 }\n    for i = 4, n + 1 do\n        result[i] = result[i - 1] +\
    \ result[i - 2] + result[i - 3]\n    end\n    return result\nend", "    local\
    \ result = {1, 3, 2}\n    local r = result\n    for i = 4, n + 1 do\n        if\
    \ i % 2 == 0 then\n            table.insert(r, 1 + i / 2)\n        else\n    \
    \        table.insert(r, r[i - 1] + r[i - 2] + r[i + 1])\n        end\n    end\n\
    \    return r\nend", "\tlocal ret = {3}\n\tfor i = 1, n do\n\t\tif (i % 2 == 0)\
    \ then\n\t\t\tret[i + 1] = 1 + i / 2\n\t\telse\n\t\t\tret[i + 1] = ret[i] + ret[i\
    \ - 1] + ret[i + 2]\n\t\tend\n\tend\n\treturn ret\nend", "  local t={1,3,2}\n\
    \  for i=4,n+1 do\n    if i%2==0 then\n      t[i]=1+i/2\n    else\n      t[i]=t[i-1]+t[i-2]+t[i+1]\n\
    \    end\n  end\n  return t\nend", "    local array = {1, 3, 2}\n    if n == 0\
    \ then\n        return {}\n    elseif n == 1 then\n        return {1}\n    elseif\
    \ n == 2 then\n        return {1, 3}\n    elseif n == 3 then\n        return {1,\
    \ 3, 2}\n    else\n        for i = 4, n + 1 do\n            if i % 2 == 0 then\n\
    \                array[i] = 1 + i / 2\n            else\n                array[i]\
    \ = array[i - 1] + array[i - 2] + array[i - 3]\n            end\n        end\n\
    \    end\n    return array\nend", "  --your code here\nend", "    local a = 1\n\
    \    local b = 3\n    local c = 2\n    local t = {a, b, c}\n    for i = 3, n do\n\
    \        a, b, c = b, c, a + b + c\n        table.insert(t, c)\n    end\n    return\
    \ t\nend", end, "\tlocal result = {1, 3, 2}\n\tfor i = 3, n do\n\t\tlocal x =\
    \ result[i] + result[i - 1] + result[i - 2]\n\t\tif i % 2 == 0 then x = 1 + i\
    \ / 2 end\n\t\tresult[i + 1] = x\n\tend\n\treturn result\nend", "    local res\
    \ = {1, 3, 2}\n    if n < 3 then return res end\n    for i = 4, n + 1 do\n   \
    \     res[i] = res[i - 1] + res[i - 2] + res[i - 3]\n    end\n    return res\n\
    end", "  local res = {[0] = 1, 3, 2}\n  for i = 3, n do\n    res[i] = res[i -\
    \ 1] + res[i - 2] + res[i + 1]\n  end\n  return res\nend", "  local ret = {1,\
    \ 3, 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      ret[i] = 1 + i /\
    \ 2\n    else\n      ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1]\n    end\n\
    \  end\n  return ret\nend", "  local t = {1, 3, 2}\n  if n <= 2 then\n    return\
    \ {1, 3, 2, n + 1}\n  end\n  for i = 3, n do\n    if i % 2 == 0 then\n      t[i\
    \ + 1] = 1 + i / 2\n    else\n      t[i + 1] = t[i] + t[i - 1] + t[i + 1]\n  \
    \  end\n  end\n  return t\nend", "    local r = {1, 3, 2}\n    local i = 3\n \
    \   while i <= n do\n        if i % 2 == 0 then\n            table.insert(r, 1\
    \ + i / 2)\n        else\n            table.insert(r, r[i] + r[i-1] + r[i+1])\n\
    \        end\n        i = i + 1\n    end\n    return r\nend", "    if n == 0 then\n\
    \        return {}\n    end\n    local t = {1, 3, 2}\n    local i = 4\n    while\
    \ i <= n + 1 do\n        if i % 2 == 0 then\n            t[i] = 1 + i / 2\n  \
    \      else\n            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n        end\n\
    \        i = i + 1\n    end\n    return t\nend", "  local res = {3}\n  for i =\
    \ 1, n do\n    res[i + 1] = (i % 2 == 0) and (1 + i / 2) or (res[i] + res[i -\
    \ 1] + res[i + 1])\n  end\n  return res\nend", "\tlocal res = {1, 3, 2}\n\tfor\
    \ i = 3, n do\n\t\tres[i + 1] = res[i] + res[i - 1] + res[i - 2]\n\tend\n\treturn\
    \ res\nend", "    local tri = {1, 3, 2}\n    if n < 3 then return {1, 3, 2} end\n\
    \    for i = 3, n do\n        tri[i + 1] = tri[i] + tri[i - 1] + tri[i - 2]\n\
    \    end\n    return tri\nend", "  local t = {1, 3, 2}\n  for i = 4, n + 1 do\n\
    \    t[i] = (i % 2 == 0) and (1 + i / 2) or (t[i - 1] + t[i - 2] + t[i + 1])\n\
    \  end\n  return t\nend", "  local sequence = {1, 3, 2}\n  for i = 3, n do\n \
    \   if i % 2 == 0 then\n      sequence[i + 1] = 1 + i / 2\n    else\n      sequence[i\
    \ + 1] = sequence[i] + sequence[i - 1] + sequence[i + 1]\n    end\n  end\n  return\
    \ sequence\nend", "  local t = {1, 3, 2}\n  for i = 4, n + 1 do\n    t[i] = t[i\
    \ - 3] + t[i - 2] + t[i - 1]\n  end\n  return t\nend", "  -- your code here\n\
    end", "  local t = {3}\n  local s = 0\n  local i = 1\n  while i <= n do\n    local\
    \ x = t[i]\n    if x % 2 == 0 then\n      s = s + 1 + x / 2\n    else\n      local\
    \ k = #t - 1\n      s = s + t[k] + t[k - 1] + t[k + 1]\n    end\n    t[i + 1]\
    \ = s\n    i = i + 1\n  end\n  return t\nend", "  local t = {1, 3, 2}\n  if n\
    \ <= 3 then\n    return t\n  end\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n\
    \      t[i] = 1 + i / 2\n    else\n      t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n\
    \    end\n  end\n  return t\nend", "    local t = {1, 3, 2}\n    for i = 4, n\
    \ + 1 do\n        if i % 2 == 0 then\n            t[i] = 1 + i / 2\n        else\n\
    \            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n        end\n    end\n   \
    \ return t\nend", "\treturn nil\nend", "  local a = {1, 3, 2}\n  if n < 3 then\
    \ return {a[1], a[2], a[3], a[n + 1]} end\n  for i = 3, n do\n    a[i + 1] = a[i]\
    \ + a[i - 1] + a[i - 2]\n  end\n  return a\nend", "    local t = {1, 3, 2}\n \
    \   for i = 4, n do\n        t[i] = t[i - 1] + t[i - 2] + t[i - 3]\n    end\n\
    \    return t\nend", "    local t = {1, 3, 2}\n    for i = 4, n do\n        t[i]\
    \ = t[i - 1] + t[i - 2] + t[i - 3]\n    end\n    return t\nend", "\tlocal t =\
    \ {1, 3, 2}\n\tfor i = 3, n do\n\t\tlocal a = t[i]\n\t\tlocal b = t[i - 1]\n\t\
    \tlocal c = t[i - 2]\n\t\tlocal d = t[i + 1]\n\t\tif (i % 2 == 0) then\n\t\t\t\
    t[i + 1] = 1 + (i / 2)\n\t\telse\n\t\t\tt[i + 1] = a + b + d\n\t\tend\n\tend\n\
    \treturn t\nend", "    local result = {1, 3, 2}\n    local size = 3\n    while\
    \ size <= n do\n        local nextValue = result[size] + result[size - 1] + result[size\
    \ - 2]\n        table.insert(result, nextValue)\n        size = size + 1\n   \
    \ end\n    return result\nend", "\tif n == 0 then return {0} end\n\tif n == 1\
    \ then return {1, 3} end\n\tif n == 2 then return {1, 3, 2} end\n\tlocal t = {1,\
    \ 3, 2}\n\tfor i = 3, n do\n\t\tlocal j = t[#t - 2] + t[#t - 1] + t[#t]\n\t\t\
    t[#t + 1] = j\n\tend\n\treturn t\nend", "  local t = {1, 3, 2}\n  for i = 3, n\
    \ do\n    if i % 2 == 0 then\n      t[i + 1] = 1 + i / 2\n    else\n      t[i\
    \ + 1] = t[i] + t[i - 1] + t[i + 1]\n    end\n  end\n  return t\nend", "  local\
    \ t = {1, 3, 2}\n  for i = 4, n do\n    if i % 2 == 0 then\n      t[i] = 1 + i\
    \ / 2\n    else\n      t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n    end\n  end\n\
    \  return t\nend", "  local t = {1, 3, 2}\n  for i = 1, n do\n    local x = t[i]\n\
    \    if x % 2 == 0 then\n      t[i + 1] = math.floor(1 + x / 2)\n    else\n  \
    \    t[i + 1] = t[i - 1] + t[i - 2] + t[i + 1]\n    end\n  end\n  return t\nend",
  "\nend", "  local t = {1, 3, 2}\n  if n <= 2 then return {t[1], t[2], t[3]} end\n\
    \  for i = 3, n do\n    if i % 2 == 0 then\n      t[i + 1] = 1 + i / 2\n    else\n\
    \      t[i + 1] = t[i] + t[i - 1] + t[i + 1]\n    end\n  end\n  return t\nend",
  "  -- your code here\nend", "  local r = {1, 3, 2}\n  for i = 3, n do\n    local\
    \ v\n    if i % 2 == 0 then\n      v = 1 + i / 2\n    else\n      v = r[i] + r[i\
    \ - 1] + r[i + 1]\n    end\n    table.insert(r, v)\n  end\n  return r\nend", " \
    \   assert(type(n) == \"number\", \"n must be a number\")\n    assert(n >= 0,\
    \ \"n must be non-negative\")\n    local res = {1, 3, 2}\n    for i = 3, n do\n\
    \        if i % 2 == 0 then\n            res[i + 1] = 1 + i / 2\n        else\n\
    \            res[i + 1] = res[i] + res[i - 1] + res[i + 1]\n        end\n    end\n\
    \    return res\nend", "\tlocal out = {1, 3, 2}\n\tfor i = 3, n do\n\t\tout[i\
    \ + 1] = (i % 2 == 0) and (1 + i / 2) or out[i] + out[i - 1] + out[i + 1]\n\t\
    end\n\treturn out\nend", "    local result = {1, 3, 2}\n    for i = 3, n do\n\
    \        if i % 2 == 0 then\n            result[i + 1] = 1 + i / 2\n        else\n\
    \            result[i + 1] = result[i] + result[i - 1] + result[i + 1]\n     \
    \   end\n    end\n    return result\nend", "    local tri_seq = {[0] = 0, [1]\
    \ = 1, [2] = 1}\n    for i = 3, n + 1 do\n        tri_seq[i] = tri_seq[i - 1]\
    \ + tri_seq[i - 2] + tri_seq[i - 3]\n    end\n    return tri_seq\nend", "  local\
    \ r = {1, 3, 2}\n  for i = 3, n do\n    r[i + 1] = r[i] + r[i - 1] + r[i - 2]\n\
    \  end\n  return r\nend", "    local res = {1, 3, 2}\n    for i = 4, n + 1 do\n\
    \        if i % 2 == 0 then\n            res[i] = 1 + i / 2\n        else\n  \
    \          res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        end\n    end\n\
    \    return res\nend", "\tlocal T = {1, 3, 2}\n\tfor i = 3, n + 1 do\n\t\tT[i\
    \ + 1] = T[i] + T[i - 1] + T[i - 2]\n\tend\n\treturn T\nend", "    return nil\n\
    end", "    local t = {1, 3, 2}\n    for i = 4, n + 1 do\n        t[i] = t[i -\
    \ 1] + t[i - 2] + t[i - 3]\n    end\n    return t\nend", "  local t = {1, 3, 2}\n\
    \  if n <= 3 then return t end\n  for i = 4, n do t[i] = (i % 2 == 0) and 1 +\
    \ i / 2 or t[i - 1] + t[i - 2] + t[i + 1] end\n  return t\nend", "  local t =\
    \ {1, 3, 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      t[i] = 1 + i\
    \ / 2\n    else\n      t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n    end\n  end\n\
    \  return t\nend", "    local r = {3}\n    for i = 1, n do\n        local v =\
    \ 1 + i / 2\n        if i % 2 == 0 then\n            r[i + 1] = v\n        else\n\
    \            r[i + 1] = r[i] + r[i - 1] + r[i + 2]\n        end\n    end\n   \
    \ return r\nend", "  local function t(n)\n    if n == 1 then return 3\n    elseif\
    \ n % 2 == 0 then return 1 + n / 2\n    else return t(n - 1) + t(n - 2) + t(n\
    \ + 1)\n    end\n  end\n  return map(function (i) return t(i) end, range(n + 1))\n\
    end", "  local res = {1, 3, 2}\n  for i = 3, n do\n    if i % 2 == 0 then\n  \
    \    res[i + 1] = 1 + i / 2\n    else\n      res[i + 1] = res[i] + res[i - 1]\
    \ + res[i + 1]\n    end\n  end\n  return res\nend", "\tlocal a, b, c = 1, 1, 1\n\
    \tlocal t = {a, b, c}\n\tfor i = 3, n do\n\t\tlocal d = a + b + c\n\t\ta, b, c\
    \ = b, c, d\n\t\tt[i+1] = d\n\tend\n\treturn t\nend", "  local a, b, c = 0, 1,\
    \ 1\n  local seq = {1}\n  for i = 1, n do\n    a, b, c = b, c, (b + c + a)\n \
    \   seq[i + 1] = a\n  end\n  return seq\nend", "    if n == 0 then return {1}\
    \ end\n    if n == 1 then return {1, 3} end\n    if n == 2 then return {1, 3,\
    \ 2} end\n    local result = {1, 3, 2}\n    local i = 3\n    while i <= n do\n\
    \        local k = 0\n        if i % 2 == 0 then\n            k = 1 + i / 2\n\
    \        else\n            k = result[i] + result[i - 1] + result[i + 1]\n   \
    \     end\n        table.insert(result, k)\n        i = i + 1\n    end\n    return\
    \ result\nend", "    local result = {1, 3, 2}\n    for i = 4, n + 1 do\n     \
    \   if i % 2 == 0 then\n            result[i] = 1 + i / 2\n        else\n    \
    \        result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n        end\n\
    \    end\n    return result\nend", "    local a = 1\n    local b = 3\n    local\
    \ c = 2\n    local l = {1, 3, 2}\n    for i = 1, n - 2 do\n        local next\
    \ = a + b + c\n        table.insert(l, next)\n        a = b\n        b = c\n \
    \       c = next\n    end\n    return l\nend", "  local t = {1, 3, 2}\n  for i\
    \ = 4, n do\n    t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n  end\n  return t\nend",
  "    local t = {1, 3, 2}\n    for i = 4, n + 1 do\n        if i % 2 == 0 then\n\
    \            t[i] = 1 + i / 2\n        else\n            t[i] = t[i - 1] + t[i\
    \ - 2] + t[i + 1]\n        end\n    end\n    return t\nend", "    local t = {1,\
    \ 3, 2}\n    for i = 4, n + 1 do\n        if i % 2 == 0 then\n            t[i]\
    \ = 1 + i / 2\n        else\n            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n\
    \        end\n    end\n    return t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
