name: HumanEval_130_tri
language: lua
prompt: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n\
  -- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) =\
  \ 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You are given\
  \ a non-negative integer number n, you have to a return a table of the \n-- first\
  \ n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n-- {1,\
  \ 3, 2, 8}\nlocal function tri(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
  \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
  \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n   \
  \ lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
  \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
  \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n\
  \    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: [end, "    local function h(x)\n        if x == 1 then return 3\n   \
    \     elseif x % 2 == 0 then return 1 + x / 2\n        else return h(x - 1) +\
    \ h(x - 2) + h(x + 1)\n        end\n    end\n    local t = {}\n    for i = 1,\
    \ n + 1 do t[i] = h(i) end\n    return t\nend", "\tlocal t = {1, 3, 2}\n\tfor\
    \ i = 4, n + 1 do\n\t\tif i % 2 == 0 then\n\t\t\tt[i] = 1 + i / 2\n\t\telse\n\t\
    \t\tt[i] = t[i - 1] + t[i - 2] + t[i + 1]\n\t\tend\n\tend\n\treturn t\nend", " \
    \   assert(n >= 0)\n    local t = {1, 3, 2}\n    for i = 4, n + 1 do\n       \
    \ t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n    end\n    return t\nend", "    --\
    \ your code here\nend", "  if n == 0 then return {} end\n  local r = {1, 3, 2}\n\
    \  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      r[i] = 1 + i / 2\n    else\n\
    \      r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n    end\n  end\n  return r\nend",
  "    local t = {0, 1, 3}\n    for i = 1, n do\n        if i%2 == 0 then\n      \
    \      t[i + 1] = 1 + i / 2\n        else\n            t[i + 1] = t[i] + t[i -\
    \ 1] + t[i + 2]\n        end\n    end\n    return t\nend", "    local r, i = {1,\
    \ 3, 2}, 3\n    while i <= n do\n        r[i + 1] = ((i % 2 == 0) and (1 + i /\
    \ 2) or (r[i] + r[i - 1] + r[i + 1]))\n        i = i + 1\n    end\n    return\
    \ r\nend", "  local result = {1, 3, 2}\n  for i = 1, n - 2 do\n    result[i +\
    \ 3] = result[i + 2] + result[i + 1] + result[i]\n  end\n  return result\nend",
  "    local out = {1, 3, 2}\n    for i = 3, n do\n        out[i + 1] = (i % 2 ==\
    \ 0) and (1 + i / 2) or (out[i] + out[i - 1] + out[i + 1])\n    end\n    return\
    \ out\nend", "    local res = {1, 3, 2}\n    for i = 4, n + 1 do\n        if i\
    \ % 2 == 0 then\n            res[i] = 1 + i / 2\n        else\n            res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1]\n        end\n    end\n    return res\n\
    end", "    -- Code here\nend", "    local t = {[0] = 1, [1] = 3, [2] = 2}\n  \
    \  for i = 3, n do\n        t[i] = 1 + i / 2\n        if i % 2 == 1 then\n   \
    \         t[i] = t[i] + t[i - 1] + t[i - 2] + t[i + 1]\n        end\n    end\n\
    \    return t\nend", end, "\tlocal t = {3}\n\tlocal a, b, c = 3, 2, 1\n\tfor i\
    \ = 1, n do\n\t\ta, b, c = c, a, a + b + c\n\t\tt[i + 1] = c\n\tend\n\treturn\
    \ t\nend", "\nend", "  local tri = {1, 3, 2}\n  if n < 2 then return {} end\n\
    \  if n == 2 then return {1, 3, 2} end\n  if n == 3 then return {1, 3, 2, 8} end\n\
    \  for i = 4, n do\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n  end\n\
    \  return tri\nend", end, "\nend", "\tif not n then\n\t\treturn nil\n\tend\n\t\
    if n == 0 then\n\t\treturn {1}\n\tend\n\tlocal t = {1, 3, 2}\n\tlocal k = #t\n\
    \tfor i = 3, n do\n\t\tif i % 2 == 0 then\n\t\t\tt[k + 1] = 1 + i / 2\n\t\telse\n\
    \t\t\tt[k + 1] = t[k] + t[k - 1] + t[k - 2]\n\t\tend\n\t\tk = k + 1\n\tend\n\t\
    return t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
