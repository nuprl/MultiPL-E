name: HumanEval_13_greatest_common_divisor
language: lua
prompt: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
  \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
  \ b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
  \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
  \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
  \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- Validate arguments\n    assert(a == math.floor(a), \"a must\
    \ be an integer\")\n    assert(b == math.floor(b), \"b must be an integer\")\n\
    \    assert(a > 0, \"a must be positive\")\n    assert(b > 0, \"b must be positive\"\
    )", "  -- Ensure that a > b\n  if a < b then\n    a, b = b, a\n  end", "  a =\
    \ math.abs(a)\n  b = math.abs(b)\n  if b > a then\n    a, b = b, a\n  end\n  local\
    \ r = a % b\n  while r ~= 0 do\n    a = b\n    b = r\n    r = a % b\n  end\n \
    \ return b\nend", "    if a == 0 then\n        return b\n    elseif b == 0 then\n\
    \        return a\n    else\n        return greatest_common_divisor(b, a % b)\n\
    \    end\nend", "    return b == 0 and a or greatest_common_divisor(b, a % b)\n\
    end", "  if a < b then\n    a, b = b, a\n  end\n  if a % b == 0 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "    --\
    \ Make sure a >= b\n    if a < b then\n        a, b = b, a\n    end", "    while\
    \ b ~= 0 do\n        a, b = b, a % b\n    end\n    return a\nend", "  if b ==\
    \ 0 then\n    return a\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "\twhile b ~= 0 do\n\t\tlocal temp = a % b\n\t\ta = b\n\t\tb = temp\n\
    \tend\n\treturn a\nend", "  while b ~= 0 do\n    local t = b\n    b = a % b\n\
    \    a = t\n  end\n  return a\nend", "  if (b > a) then\n    a, b = b, a\n  end\n\
    \  while b ~= 0 do\n    a, b = b, a % b\n  end\n  return a\nend", "\tif a == 0\
    \ then\n\t\treturn b\n\telseif b == 0 then\n\t\treturn a\n\telse\n\t\treturn greatest_common_divisor(b,\
    \ a % b)\n\tend\nend", "    -- Euclidean algorithm\n    -- Find remainder r of\
    \ a / b\n    -- a = bq + r\n    -- If r = 0 then the last divisor is b\n    local\
    \ q = 0\n    local r = a\n    local t = 0\n    while r ~= 0 do\n        q = math.floor(b\
    \ / r)\n        t = r\n        r = b - q * r\n        b = t\n    end\n    return\
    \ b\nend", "    if a % b == 0 then\n        return b\n    else\n        return\
    \ greatest_common_divisor(b, a % b)\n    end\nend", "    if a < b then\n     \
    \   a, b = b, a\n    end\n    while b ~= 0 do\n        a, b = b, a % b\n    end\n\
    \    return a\nend", "    a = math.abs(a)\n    b = math.abs(b)\n    if a == 0\
    \ or b == 0 then\n        return 0\n    end\n    while b ~= 0 do\n        local\
    \ c = a % b\n        a = b\n        b = c\n    end\n    return a\nend", "    local\
    \ r = a % b\n    while r ~= 0 do\n        a = b\n        b = r\n        r = a\
    \ % b\n    end\n    return b\nend", "    -- Ensure that 'a' is the greater number\n\
    \    if a < b then\n        a, b = b, a\n    end", "    -- Reassign a and b, such\
    \ that b > a\n    if a > b then\n        a, b = b, a\n    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
