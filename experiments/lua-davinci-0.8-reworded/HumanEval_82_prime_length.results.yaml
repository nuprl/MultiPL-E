name: HumanEval_82_prime_length
language: lua
results:
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \  --[[Fill out this function]]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihlr0x0d.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpihlr0x0d.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \    local prime_num = false\n    for i = 2, string.len(string) do\n        if\
    \ string.len(string) % i == 0 then\n            prime_num = false\n          \
    \  break\n        else\n            prime_num = true\n        end\n    end\n \
    \   return prime_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdclc4i1.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfdclc4i1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \    local count = 0\n    for char in string:gmatch('.') do\n        count = count\
    \ + 1\n    end\n    local upper_limit = math.floor(math.sqrt(count))\n    for\
    \ i = 2, upper_limit do\n        if count % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3z55dqg.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp3z55dqg.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \  local length = string.len(string)\n  local prime = true\n  for i = 2, length\
    \ - 1 do\n    if length % i == 0 then\n      prime = false\n      break\n    end\n\
    \  end\n  return prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6p5gmbe4.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6p5gmbe4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \    local l = string.len(string)\n    if l == 1 then\n        return false\n\
    \    end\n    for i = 2, l - 1 do\n        if l % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyoao7dz.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiyoao7dz.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \    local prime = true\n    local s_len = string.len(string)\n    if s_len <\
    \ 2 then\n        prime = false\n    else\n        for i = 2, s_len - 1 do\n \
    \           if s_len % i == 0 then\n                prime = false\n          \
    \      break\n            end\n        end\n    end\n    return prime\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \    -- Implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qrqi1y4.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp6qrqi1y4.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \  local length = #string\n  if length == 1 then\n    return false\n  end\n  local\
    \ divisor = 2\n  while divisor < length do\n    if length % divisor == 0 then\n\
    \      return false\n    end\n    divisor = divisor + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprekp5y36.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprekp5y36.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \  return is_prime(#string)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyfsjngqt.lua:13:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpyfsjngqt.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpyfsjngqt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6oi1odj3.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp6oi1odj3.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \    -- TODO: implement me\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfioxlq0w.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpfioxlq0w.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \    local len = string.len(string)\n    for i = 2, len - 1 do\n        if len\
    \ % i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2o4_9a3.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy2o4_9a3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \    local length = string.len(string)\n    if length == 2 then\n        return\
    \ true\n    end\n    for i = 2, length - 1 do\n        if length % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpsuqi_0.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxpsuqi_0.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \    local strlen = #string\n    local result = true\n    for i = 2, strlen -\
    \ 1 do\n        if (strlen % i) == 0 then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdx81nkp.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxdx81nkp.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \    return is_prime(#string)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw689cz08.lua:13:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpw689cz08.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpw689cz08.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf43mjin.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvf43mjin.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \  local count = string.len(string)\n  for i = 2, count - 1 do\n    if count %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q_i8zux.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0q_i8zux.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \  local function is_prime(x)\n    for i = 2, x - 1 do\n      if x % i == 0 then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  return is_prime(#string)\n\
    end\nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\n\
    print(prime_length('orange'))\nprint('\\n')\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\ntrue\ntrue\nfalse\n\n\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpvncgpvb2.lua:40: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvncgpvb2.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \  local len = #string\n  if len == 2 or len == 3 or len == 5 or len == 7 then\n\
    \    return true\n  elseif len % 2 == 0 or len % 3 == 0 or len % 5 == 0 or len\
    \ % 7 == 0 then\n    return false\n  else\n    return true\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3km55c9x.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3km55c9x.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns true if the string\n\
    -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
    -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
    -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n\
    \  local length = string.len(string)\n  for i = 2, length - 1 do\n    if length\
    \ % i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdkaddm7.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppdkaddm7.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
