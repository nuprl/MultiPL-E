name: HumanEval_19_sort_numbers
language: lua
prompt: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to\
  \ largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function\
  \ sort_numbers(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
  \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
  \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five\
  \ seven eight nine')\n    lu.assertEquals(candidate('six five four three two one\
  \ zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local numbers_list = split(numbers, \" \")\n    for k, v in pairs(numbers_list)\
    \ do\n        numbers_list[k] = numberals[v]\n    end\n    sort(numbers_list)\n\
    \    for k, v in pairs(numbers_list) do\n        numbers_list[k] = numeral_by_number[v]\n\
    \    end\n    return implode(numbers_list, \" \")\nend", "  local tbl = {}\n \
    \ for w in numbers:gmatch('%S+') do\n    tbl[#tbl+1] = w\n  end\n  table.sort(tbl,\
    \ function(a,b)\n    if to_numbers[a] < to_numbers[b] then\n      return true\n\
    \    else\n      return false\n    end\n  end)\n  return table.concat(tbl, ' ')\n\
    end", "  local nums = {}\n  local function number_to_number(number)\n    local\
    \ num = {\n      zero = 0,\n      one = 1,\n      two = 2,\n      three = 3,\n\
    \      four = 4,\n      five = 5,\n      six = 6,\n      seven = 7,\n      eight\
    \ = 8,\n      nine = 9\n    }\n    return num[number]\n  end\n  for n in numbers:gmatch('%S+')\
    \ do\n    table.insert(nums, number_to_number(n))\n  end\n  table.sort(nums)\n\
    \  local function number_to_string(number)\n    local str = {\n      [0] = 'zero',\n\
    \      [1] = 'one',\n      [2] = 'two',\n      [3] = 'three',\n      [4] = 'four',\n\
    \      [5] = 'five',\n      [6] = 'six',\n      [7] = 'seven',\n      [8] = 'eight',\n\
    \      [9] = 'nine'\n    }\n    return str[number]\n  end\n  local str = ''\n\
    \  for _, n in ipairs(nums) do\n    str = str .. number_to_string(n) .. ' '\n\
    \  end\n  return str:sub(1, -2)\nend", "  local numeral_to_number = {\n    zero\
    \ = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five =\
    \ 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local\
    \ numbers_in_order = {}\n  for number in numbers:gmatch('%a+') do\n    table.insert(numbers_in_order,\
    \ numeral_to_number[number])\n  end\n  table.sort(numbers_in_order)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numbers_in_order) do\n    for numeral, numeral_number\
    \ in pairs(numeral_to_number) do\n      if number == numeral_number then\n   \
    \     table.insert(sorted_numbers, numeral)\n      end\n    end\n  end\n  return\
    \ table.concat(sorted_numbers, ' ')\nend", "  -- TODO\nend", "  local function\
    \ compare(a, b)\n    return a.value < b.value\n  end\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_array = {}\n  for numeral in numbers:gmatch('(%w+)') do\n   \
    \ table.insert(numeral_array, {\n      name = numeral,\n      value = numeral_map[numeral]\n\
    \    })\n  end\n  table.sort(numeral_array, compare)\n  local result = ''\n  for\
    \ _, numeral in ipairs(numeral_array) do\n    result = result .. numeral.name\
    \ .. ' '\n  end\n  return result:sub(1, #result - 1)\nend", "    local numbers\
    \ = numbers:split(\" \")\n    local words   = numbers:values()\n    local refs\
    \    = {}\n    for i, word in ipairs(words) do\n        local num = string.match(word,\
    \ \"%d+\")\n        if num then\n            refs[i] = num\n        else\n   \
    \         refs[i] = number_words[word]\n        end\n    end\n    table.sort(refs)\n\
    \    local output = {}\n    for i, num in ipairs(refs) do\n        output[i] =\
    \ numbers[num]\n    end\n    return table.concat(output, \" \")\nend", "  local\
    \ numbers = stringx.split(numbers)\n  table.sort(numbers, function(a, b)\n   \
    \ local map = {zero = 0, one = 1, two = 2, three = 3, four = 4, five = 5, six\
    \ = 6, seven = 7, eight = 8, nine = 9}\n    if map[a] == map[b] then\n      return\
    \ a < b\n    else\n      return map[a] < map[b]\n    end\n  end)\n  return table.concat(numbers,\
    \ ' ')\nend", "  local nums = {}\n  for num in numbers:gmatch(\"%w+\") do\n  \
    \  table.insert(nums, num)\n  end\n  local result = {'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine'}\n  local output = {}\n  for\
    \ i = 1, #nums do\n    for j = 1, #result do\n      if nums[i] == result[j] then\n\
    \        table.insert(output, nums[i])\n      end\n    end\n  end\n  return table.concat(output,\
    \ ' ')\nend", "  local numberals = {}\n  for number in numbers:gmatch('%S+') do\n\
    \    local numeral = vocab[number]\n    table.insert(numberals, numeral)\n  end\n\
    \  table.sort(numberals)\n  return table.concat(numberals, ' ')\nend", "    local\
    \ num_map = {\n        zero = 0,\n        one = 1,\n        two = 2,\n       \
    \ three = 3,\n        four = 4,\n        five = 5,\n        six = 6,\n       \
    \ seven = 7,\n        eight = 8,\n        nine = 9\n    }\n    local nums = {}\n\
    \    for word in numbers:gmatch('%S+') do\n        local num = num_map[word]\n\
    \        if num then\n            table.insert(nums, num)\n        end\n    end\n\
    \    table.sort(nums)\n    for i, num in ipairs(nums) do\n        for word, check\
    \ in pairs(num_map) do\n            if check == num then\n                nums[i]\
    \ = word\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(nums, ' ')\nend", "    local nums = {}\n    for _, n in ipairs(numbers:split('\
    \ ')) do\n        local n = n:lower()\n        local num\n        if n == 'zero'\
    \ then\n            num = 0\n        elseif n == 'one' then\n            num =\
    \ 1\n        elseif n == 'two' then\n            num = 2\n        elseif n ==\
    \ 'three' then\n            num = 3\n        elseif n == 'four' then\n       \
    \     num = 4\n        elseif n == 'five' then\n            num = 5\n        elseif\
    \ n == 'six' then\n            num = 6\n        elseif n == 'seven' then\n   \
    \         num = 7\n        elseif n == 'eight' then\n            num = 8\n   \
    \     elseif n == 'nine' then\n            num = 9\n        end\n        if num\
    \ then\n            table.insert(nums, num)\n        end\n    end\n    table.sort(nums)\n\
    \    local words = {}\n    for _, n in ipairs(nums) do\n        local word\n \
    \       if n == 0 then\n            word = 'zero'\n        elseif n == 1 then\n\
    \            word = 'one'\n        elseif n == 2 then\n            word = 'two'\n\
    \        elseif n == 3 then\n            word = 'three'\n        elseif n == 4\
    \ then\n            word = 'four'\n        elseif n == 5 then\n            word\
    \ = 'five'\n        elseif n == 6 then\n            word = 'six'\n        elseif\
    \ n == 7 then\n            word = 'seven'\n        elseif n == 8 then\n      \
    \      word = 'eight'\n        elseif n == 9 then\n            word = 'nine'\n\
    \        end\n        if word then\n            table.insert(words, word)\n  \
    \      end\n    end\n    return table.concat(words, ' ')\nend", "    local my_numbers\
    \ = { 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine' }\n    local sorted_numbers = {}\n    for _, i in ipairs(numbers:split('\
    \ ')) do\n        table.insert(sorted_numbers, my_numbers[i])\n    end\n    table.sort(sorted_numbers)\n\
    \    local output = ''\n    for i = 1, #sorted_numbers do\n        output = output\
    \ .. sorted_numbers[i] .. ' '\n    end\n    return output:sub(1, -2)\nend", " \
    \  local numbers_list = {}\n   local output = {}\n   local word2number = {zero=0,\
    \ one=1, two=2, three=3, four=4, five=5, six=6, seven=7, eight=8, nine=9}\n  \
    \ for word in numbers:gmatch('%S+') do\n      table.insert(numbers_list, word2number[word])\n\
    \   end\n   table.sort(numbers_list)\n   for i,num in ipairs(numbers_list) do\n\
    \      for word,num2 in pairs(word2number) do\n         if num == num2 then\n\
    \            table.insert(output, word)\n         end\n      end\n   end\n   return\
    \ table.concat(output, ' ')\nend", "    local numMap = {zero = 0, one = 1, two\
    \ = 2, three = 3, four = 4, five = 5, six = 6, seven = 7, eight = 8, nine = 9}\n\
    \    local nums = {}\n    for num in numbers:gmatch(\"[^%s]+\") do\n        table.insert(nums,\
    \ numMap[num])\n    end\n    table.sort(nums)\n    local result = \"\"\n    for\
    \ _,num in ipairs(nums) do\n        result = result .. getKey(numMap, num) ..\
    \ \" \"\n    end\n    return result:sub(1, -2)\nend", "    local tbl = {}\n  \
    \  for num in numbers:gmatch('%S+') do\n        tbl[#tbl+1] = num\n    end\n \
    \   table.sort(tbl, function(a, b)\n        return D[a] < D[b]\n    end)\n   \
    \ return table.concat(tbl, ' ')\nend", "\tnumbers = numbers:gsub('and', '')\n\t\
    local t = {}\n\tfor word in numbers:gmatch('%S+') do\n\t\tt[#t + 1] = numeral_to_number(word)\n\
    \tend\n\ttable.sort(t)\n\tfor i = 1, #t do\n\t\tt[i] = number_to_numeral(t[i])\n\
    \tend\n\treturn table.concat(t, ' ')\nend", "\tlocal nums = {}\n\tfor num in string.gmatch(numbers,\
    \ '%a+') do\n\t\tnums[#nums + 1] = num\n\tend\n\t\n\ttable.sort(nums, function(a,\
    \ b) return rpn[a] < rpn[b] end)\n\t\n\treturn table.concat(nums, ' ')\nend",
  "  local num_lookup = {zero = 0, one = 1, two = 2, three = 3, four = 4, five = 5,\
    \ six = 6, seven = 7, eight = 8, nine = 9}\n  local number_list = stringx.split(numbers)\n\
    \  table.sort(number_list, function(a, b) return num_lookup[a] < num_lookup[b]\
    \ end)\n  return table.concat(number_list, ' ')\nend", "\treturn nil\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
