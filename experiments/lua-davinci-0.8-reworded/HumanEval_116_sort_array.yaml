name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort a table of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
  \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
  -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  table.sort(arr, function(a, b)\n    local an, bn = a:tobinary(),\
    \ b:tobinary()\n    local cn = an:match(\"1\") and #an:match(\"1\") or 0\n   \
    \ local dn = bn:match(\"1\") and #bn:match(\"1\") or 0\n    if cn == dn then\n\
    \      return a < b\n    else\n      return cn < dn\n    end\n  end)\n  return\
    \ arr\nend", "  local bits = {}\n  for _, v in ipairs(arr) do\n    local count\
    \ = 0\n    for c in tostring(v):gmatch('1') do\n      count = count + 1\n    end\n\
    \    if bits[count] == nil then\n      bits[count] = {}\n    end\n    table.insert(bits[count],\
    \ v)\n  end\n  local ans = {}\n  for _, v in ipairs(bits) do\n    table.sort(v)\n\
    \    for _, val in ipairs(v) do\n      table.insert(ans, val)\n    end\n  end\n\
    \  return ans\nend", "  local bits_table = {}\n  for _, v in ipairs(arr) do\n\
    \    local bin = to_binary(v)\n    if not bits_table[bin] then\n      bits_table[bin]\
    \ = {}\n    end\n    table.insert(bits_table[bin], v)\n  end\n  local bits_keys\
    \ = {}\n  for k, _ in pairs(bits_table) do\n    table.insert(bits_keys, k)\n \
    \ end\n  table.sort(bits_keys)\n  local result = {}\n  for _, key in ipairs(bits_keys)\
    \ do\n    for _, v in ipairs(bits_table[key]) do\n      table.insert(result, v)\n\
    \    end\n  end\n  return result\nend", "  local function ones_in_binary(n)\n\
    \    local bin = string.format(\"%b\", n)\n    local res = 0\n    for _ in bin:gmatch(\"\
    1\") do\n      res = res + 1\n    end\n    return res\n  end\n  local t = {}\n\
    \  for _, v in ipairs(arr) do\n    t[#t + 1] = {v, ones_in_binary(v)}\n  end\n\
    \  table.sort(t, function(a, b)\n    if a[2] == b[2] then\n      return a[1] <\
    \ b[1]\n    else\n      return a[2] < b[2]\n    end\n  end)\n  for i, v in ipairs(t)\
    \ do\n    arr[i] = v[1]\n  end\n  return arr\nend", "  -- your code here\n  if\
    \ #arr < 2 then return arr end\n  local f = function(a, b)\n    local aOnes =\
    \ a:gsub('-', ''):gsub('0', ''):len()\n    local bOnes = b:gsub('-', ''):gsub('0',\
    \ ''):len()\n    return aOnes < bOnes or (aOnes == bOnes and a < b)\n  end\n \
    \ table.sort(arr, f)\n  return arr\nend", "  local t = {}\n  for i = 1, #arr do\n\
    \    t[i] = { arr[i], count_ones(arr[i]) }\n  end\n  table.sort(t, function(a,\
    \ b)\n    if a[2] == b[2] then\n      return a[1] < b[1]\n    else\n      return\
    \ a[2] < b[2]\n    end\n  end)\n  for i = 1, #arr do\n    arr[i] = t[i][1]\n \
    \ end\n  return arr\nend", "  table.sort(arr,function(a,b)\n    if bit.band(a,b)\
    \ == a then\n      return false\n    elseif bit.band(a,b) == b then\n      return\
    \ true\n    else\n      return a < b\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    if string.format(\"%b\", a):match('1') ==\
    \ string.format(\"%b\", b):match('1') then\n      return a < b\n    else\n   \
    \   return string.format(\"%b\", a):match('1') < string.format(\"%b\", b):match('1')\n\
    \    end\n  end)\n  return arr\nend", "  return {}\nend", "  local len = #arr\n\
    \  for i = 1, len do\n    for j = 1, len do\n      if arr[i] > arr[j] then\n \
    \       local tmp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = tmp\n  \
    \    end\n    end\n  end\n  return arr\nend", "    local function binary_ones(n)\n\
    \        return n - (n % 2)\n    end\n    local function compare(a, b)\n     \
    \   local a_ones = binary_ones(a)\n        local b_ones = binary_ones(b)\n   \
    \     if a_ones == b_ones then\n            return a < b\n        else\n     \
    \       return a_ones < b_ones\n        end\n    end\n    table.sort(arr, compare)\n\
    \    return arr\nend", "  table.sort(arr, function(a, b)\n    if a == b then return\
    \ a < b end\n    local ones_a = 0\n    local ones_b = 0\n    for i = 2, 32 do\n\
    \      if a >= (1 << i) then\n        if a & (1 << i) > 0 then\n          ones_a\
    \ = ones_a + 1\n        end\n      else\n        break\n      end\n    end\n \
    \   for i = 2, 32 do\n      if b >= (1 << i) then\n        if b & (1 << i) > 0\
    \ then\n          ones_b = ones_b + 1\n        end\n      else\n        break\n\
    \      end\n    end\n    if ones_a == ones_b then\n      return a < b\n    else\n\
    \      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", "  local function\
    \ cmp(a, b)\n    if a == b then return 0 end\n    local c = bit.band(a, b)\n \
    \   local count1 = 0\n    local count2 = 0\n    for i = 1, bit.bsize(c) do\n \
    \     if bit.test(a, i) then count1 = count1 + 1 end\n      if bit.test(b, i)\
    \ then count2 = count2 + 1 end\n    end\n    if count1 ~= count2 then return count1\
    \ < count2 end\n    return a < b\n  end\n  table.sort(arr, cmp)\n  return arr\n\
    end", "  local mapping = {}\n  for _, v in ipairs(arr) do\n    local t = {}\n\
    \    t.value = v\n    t.ones = binCount(v)\n    table.insert(mapping, t)\n  end\n\
    \  table.sort(mapping, function(a, b)\n    if a.ones == b.ones then\n      return\
    \ a.value < b.value\n    else\n      return a.ones < b.ones\n    end\n  end)\n\
    \  local result = {}\n  for _, v in ipairs(mapping) do\n    table.insert(result,\
    \ v.value)\n  end\n  return result\nend", "    table.sort(arr, function(a, b)\n\
    \        if a < 0 and b < 0 then\n            return a > b\n        elseif a <\
    \ 0 then\n            return false\n        elseif b < 0 then\n            return\
    \ true\n        else\n            local ones_a = string.gsub(string.format(\"\
    %b\", a), \"0\", \"\")\n            local ones_b = string.gsub(string.format(\"\
    %b\", b), \"0\", \"\")\n            if #ones_a == #ones_b then\n             \
    \   return a < b\n            else\n                return #ones_a < #ones_b\n\
    \            end\n        end\n    end)\n    return arr\nend", "  local function\
    \ get_ones(n)\n    local ones = 0\n    while n ~= 0 do\n      ones = ones + 1\n\
    \      n = bit32.band(n, n - 1)\n    end\n    return ones\n  end\n  table.sort(arr,\
    \ function(a, b)\n    if a == b then return false end\n    if a > 0 and b > 0\
    \ then\n      local a_ones = get_ones(a)\n      local b_ones = get_ones(b)\n \
    \     if a_ones == b_ones then\n        return a < b\n      else\n        return\
    \ a_ones < b_ones\n      end\n    elseif a > 0 and b < 0 then\n      return true\n\
    \    elseif a < 0 and b > 0 then\n      return false\n    else\n      local a_ones\
    \ = get_ones(-a)\n      local b_ones = get_ones(-b)\n      if a_ones == b_ones\
    \ then\n        return a > b\n      else\n        return a_ones < b_ones\n   \
    \   end\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n\
    \    local ones_a = bit.band(bit.bnot(0), a)\n    local ones_b = bit.band(bit.bnot(0),\
    \ b)\n    if ones_a ~= ones_b then\n      return ones_a < ones_b\n    else\n \
    \     return a < b\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local bits_a = to_bits(a)\n    local bits_b = to_bits(b)\n    local\
    \ ones_a = count_ones(bits_a)\n    local ones_b = count_ones(bits_b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "    local function count_ones(n)\n    \
    \    local count = 0\n        while n > 0 do\n            if n % 2 == 1 then\n\
    \                count = count + 1\n            end\n            n = math.floor(n\
    \ / 2)\n        end\n        return count\n    end\n    table.sort(arr, function(a,\
    \ b)\n        local ones_a = count_ones(a)\n        local ones_b = count_ones(b)\n\
    \        if ones_a == ones_b then\n            return a < b\n        else\n  \
    \          return ones_a < ones_b\n        end\n    end)\n    return arr\nend",
  "  table.sort(arr, function(a, b)\n    local s_a = string.format(\"%x\", a)\n  \
    \  local s_b = string.format(\"%x\", b)\n    if a < 0 then\n      s_a = string.format(\"\
    %x\", 4294967296 + a)\n    end\n    if b < 0 then\n      s_b = string.format(\"\
    %x\", 4294967296 + b)\n    end\n    local bits_a = 0\n    local bits_b = 0\n \
    \   for i = 1, #s_a do\n      bits_a = bits_a + tonumber(s_a:sub(i, i), 16)\n\
    \    end\n    for i = 1, #s_b do\n      bits_b = bits_b + tonumber(s_b:sub(i,\
    \ i), 16)\n    end\n    if bits_a == bits_b then\n      return a < b\n    end\n\
    \    return bits_a < bits_b\n  end)\n  return arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
