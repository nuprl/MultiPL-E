name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort a table of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
  \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
  -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  table.sort(arr, function(a, b)\n    local an, bn = a:tobinary(),\
    \ b:tobinary()\n    local cn = an:match(\"1\") and #an:match(\"1\") or 0\n   \
    \ local dn = bn:match(\"1\") and #bn:match(\"1\") or 0\n    if cn == dn then\n\
    \      return a < b\n    else\n      return cn < dn\n    end\n  end)\n  return\
    \ arr\nend", "  local bits = {}\n  for _, v in ipairs(arr) do\n    local count\
    \ = 0\n    for c in tostring(v):gmatch('1') do\n      count = count + 1\n    end\n\
    \    if bits[count] == nil then\n      bits[count] = {}\n    end\n    table.insert(bits[count],\
    \ v)\n  end\n  local ans = {}\n  for _, v in ipairs(bits) do\n    table.sort(v)\n\
    \    for _, val in ipairs(v) do\n      table.insert(ans, val)\n    end\n  end\n\
    \  return ans\nend", "  local bits_table = {}\n  for _, v in ipairs(arr) do\n\
    \    local bin = to_binary(v)\n    if not bits_table[bin] then\n      bits_table[bin]\
    \ = {}\n    end\n    table.insert(bits_table[bin], v)\n  end\n  local bits_keys\
    \ = {}\n  for k, _ in pairs(bits_table) do\n    table.insert(bits_keys, k)\n \
    \ end\n  table.sort(bits_keys)\n  local result = {}\n  for _, key in ipairs(bits_keys)\
    \ do\n    for _, v in ipairs(bits_table[key]) do\n      table.insert(result, v)\n\
    \    end\n  end\n  return result\nend", "  local function ones_in_binary(n)\n\
    \    local bin = string.format(\"%b\", n)\n    local res = 0\n    for _ in bin:gmatch(\"\
    1\") do\n      res = res + 1\n    end\n    return res\n  end\n  local t = {}\n\
    \  for _, v in ipairs(arr) do\n    t[#t + 1] = {v, ones_in_binary(v)}\n  end\n\
    \  table.sort(t, function(a, b)\n    if a[2] == b[2] then\n      return a[1] <\
    \ b[1]\n    else\n      return a[2] < b[2]\n    end\n  end)\n  for i, v in ipairs(t)\
    \ do\n    arr[i] = v[1]\n  end\n  return arr\nend", "  -- your code here\n  if\
    \ #arr < 2 then return arr end\n  local f = function(a, b)\n    local aOnes =\
    \ a:gsub('-', ''):gsub('0', ''):len()\n    local bOnes = b:gsub('-', ''):gsub('0',\
    \ ''):len()\n    return aOnes < bOnes or (aOnes == bOnes and a < b)\n  end\n \
    \ table.sort(arr, f)\n  return arr\nend", "  local t = {}\n  for i = 1, #arr do\n\
    \    t[i] = { arr[i], count_ones(arr[i]) }\n  end\n  table.sort(t, function(a,\
    \ b)\n    if a[2] == b[2] then\n      return a[1] < b[1]\n    else\n      return\
    \ a[2] < b[2]\n    end\n  end)\n  for i = 1, #arr do\n    arr[i] = t[i][1]\n \
    \ end\n  return arr\nend", "  table.sort(arr,function(a,b)\n    if bit.band(a,b)\
    \ == a then\n      return false\n    elseif bit.band(a,b) == b then\n      return\
    \ true\n    else\n      return a < b\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    if string.format(\"%b\", a):match('1') ==\
    \ string.format(\"%b\", b):match('1') then\n      return a < b\n    else\n   \
    \   return string.format(\"%b\", a):match('1') < string.format(\"%b\", b):match('1')\n\
    \    end\n  end)\n  return arr\nend", "  return {}\nend", "  local len = #arr\n\
    \  for i = 1, len do\n    for j = 1, len do\n      if arr[i] > arr[j] then\n \
    \       local tmp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = tmp\n  \
    \    end\n    end\n  end\n  return arr\nend", "    local function binary_ones(n)\n\
    \        return n - (n % 2)\n    end\n    local function compare(a, b)\n     \
    \   local a_ones = binary_ones(a)\n        local b_ones = binary_ones(b)\n   \
    \     if a_ones == b_ones then\n            return a < b\n        else\n     \
    \       return a_ones < b_ones\n        end\n    end\n    table.sort(arr, compare)\n\
    \    return arr\nend", "  table.sort(arr, function(a, b)\n    if a == b then return\
    \ a < b end\n    local ones_a = 0\n    local ones_b = 0\n    for i = 2, 32 do\n\
    \      if a >= (1 << i) then\n        if a & (1 << i) > 0 then\n          ones_a\
    \ = ones_a + 1\n        end\n      else\n        break\n      end\n    end\n \
    \   for i = 2, 32 do\n      if b >= (1 << i) then\n        if b & (1 << i) > 0\
    \ then\n          ones_b = ones_b + 1\n        end\n      else\n        break\n\
    \      end\n    end\n    if ones_a == ones_b then\n      return a < b\n    else\n\
    \      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", "  local function\
    \ cmp(a, b)\n    if a == b then return 0 end\n    local c = bit.band(a, b)\n \
    \   local count1 = 0\n    local count2 = 0\n    for i = 1, bit.bsize(c) do\n \
    \     if bit.test(a, i) then count1 = count1 + 1 end\n      if bit.test(b, i)\
    \ then count2 = count2 + 1 end\n    end\n    if count1 ~= count2 then return count1\
    \ < count2 end\n    return a < b\n  end\n  table.sort(arr, cmp)\n  return arr\n\
    end", "  local mapping = {}\n  for _, v in ipairs(arr) do\n    local t = {}\n\
    \    t.value = v\n    t.ones = binCount(v)\n    table.insert(mapping, t)\n  end\n\
    \  table.sort(mapping, function(a, b)\n    if a.ones == b.ones then\n      return\
    \ a.value < b.value\n    else\n      return a.ones < b.ones\n    end\n  end)\n\
    \  local result = {}\n  for _, v in ipairs(mapping) do\n    table.insert(result,\
    \ v.value)\n  end\n  return result\nend", "    table.sort(arr, function(a, b)\n\
    \        if a < 0 and b < 0 then\n            return a > b\n        elseif a <\
    \ 0 then\n            return false\n        elseif b < 0 then\n            return\
    \ true\n        else\n            local ones_a = string.gsub(string.format(\"\
    %b\", a), \"0\", \"\")\n            local ones_b = string.gsub(string.format(\"\
    %b\", b), \"0\", \"\")\n            if #ones_a == #ones_b then\n             \
    \   return a < b\n            else\n                return #ones_a < #ones_b\n\
    \            end\n        end\n    end)\n    return arr\nend", "  local function\
    \ get_ones(n)\n    local ones = 0\n    while n ~= 0 do\n      ones = ones + 1\n\
    \      n = bit32.band(n, n - 1)\n    end\n    return ones\n  end\n  table.sort(arr,\
    \ function(a, b)\n    if a == b then return false end\n    if a > 0 and b > 0\
    \ then\n      local a_ones = get_ones(a)\n      local b_ones = get_ones(b)\n \
    \     if a_ones == b_ones then\n        return a < b\n      else\n        return\
    \ a_ones < b_ones\n      end\n    elseif a > 0 and b < 0 then\n      return true\n\
    \    elseif a < 0 and b > 0 then\n      return false\n    else\n      local a_ones\
    \ = get_ones(-a)\n      local b_ones = get_ones(-b)\n      if a_ones == b_ones\
    \ then\n        return a > b\n      else\n        return a_ones < b_ones\n   \
    \   end\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n\
    \    local ones_a = bit.band(bit.bnot(0), a)\n    local ones_b = bit.band(bit.bnot(0),\
    \ b)\n    if ones_a ~= ones_b then\n      return ones_a < ones_b\n    else\n \
    \     return a < b\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local bits_a = to_bits(a)\n    local bits_b = to_bits(b)\n    local\
    \ ones_a = count_ones(bits_a)\n    local ones_b = count_ones(bits_b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "    local function count_ones(n)\n    \
    \    local count = 0\n        while n > 0 do\n            if n % 2 == 1 then\n\
    \                count = count + 1\n            end\n            n = math.floor(n\
    \ / 2)\n        end\n        return count\n    end\n    table.sort(arr, function(a,\
    \ b)\n        local ones_a = count_ones(a)\n        local ones_b = count_ones(b)\n\
    \        if ones_a == ones_b then\n            return a < b\n        else\n  \
    \          return ones_a < ones_b\n        end\n    end)\n    return arr\nend",
  "  table.sort(arr, function(a, b)\n    local s_a = string.format(\"%x\", a)\n  \
    \  local s_b = string.format(\"%x\", b)\n    if a < 0 then\n      s_a = string.format(\"\
    %x\", 4294967296 + a)\n    end\n    if b < 0 then\n      s_b = string.format(\"\
    %x\", 4294967296 + b)\n    end\n    local bits_a = 0\n    local bits_b = 0\n \
    \   for i = 1, #s_a do\n      bits_a = bits_a + tonumber(s_a:sub(i, i), 16)\n\
    \    end\n    for i = 1, #s_b do\n      bits_b = bits_b + tonumber(s_b:sub(i,\
    \ i), 16)\n    end\n    if bits_a == bits_b then\n      return a < b\n    end\n\
    \    return bits_a < bits_b\n  end)\n  return arr\nend", "  if #arr == 0 then\
    \ return arr end\n  local cmp = function(a, b)\n    local c = string.format(\"\
    %b\", a)\n    local d = string.format(\"%b\", b)\n    local count_a = c:gsub(\"\
    [^1]\", \"\"):len()\n    local count_b = d:gsub(\"[^1]\", \"\"):len()\n    if\
    \ count_a ~= count_b then\n      return count_a < count_b\n    else\n      return\
    \ a < b\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local\
    \ function get_ones(n)\n    local n = n\n    local ones = 0\n    while n ~= 0\
    \ do\n      if n % 2 == 1 then\n        ones = ones + 1\n      end\n      n =\
    \ n // 2\n    end\n    return ones\n  end\n  local function compare(a, b)\n  \
    \  local a_ones = get_ones(a)\n    local b_ones = get_ones(b)\n    if a_ones ==\
    \ b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n  \
    \  end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a % 2 + math.floor(a / 2) % 2 + math.floor(a\
    \ / 4) % 2\n    local b_ones = b % 2 + math.floor(b / 2) % 2 + math.floor(b /\
    \ 4) % 2\n    if a_ones == b_ones then\n      return a < b\n    else\n      return\
    \ a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  return table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones < b_ones then\n      return true\n    elseif a_ones > b_ones then\n\
    \      return false\n    else\n      return a < b\n    end\n  end)\nend", "  \
    \  table.sort(arr, function(a, b)\n        local num_a = tonumber(a)\n       \
    \ local num_b = tonumber(b)\n        local bit_a = (num_a > 0) and tonumber(string.format(\"\
    %x\", num_a), 16) or num_a\n        local bit_b = (num_b > 0) and tonumber(string.format(\"\
    %x\", num_b), 16) or num_b\n        local bit_a_1 = (bit_a > 0) and string.len(string.gsub(bit_a,\
    \ \"1\", \"\")) or 0\n        local bit_b_1 = (bit_b > 0) and string.len(string.gsub(bit_b,\
    \ \"1\", \"\")) or 0\n        return bit_a_1 < bit_b_1 or (bit_a_1 == bit_b_1\
    \ and bit_a < bit_b)\n    end)\n    return arr\nend", "    local function get_ones(x)\n\
    \        local res = 0\n        for _ in tostring(x):gmatch\"1\" do\n        \
    \    res = res + 1\n        end\n        return res\n    end\n    table.sort(arr,\
    \ function(a, b)\n        local ones_a, ones_b = get_ones(a), get_ones(b)\n  \
    \      if ones_a == ones_b then\n            return a < b\n        else\n    \
    \        return ones_a < ones_b\n        end\n    end)\n    return arr\nend",
  "  if #arr < 2 then return arr end\n  local sorted = {}\n  local count = {}\n  for\
    \ _, v in ipairs(arr) do\n    count[v] = count[v] or {}\n    count[v][1] = count[v][1]\
    \ or string.format(\"%08b\", v):gsub(\"0\", \"\"):len()\n    count[v][2] = count[v][2]\
    \ or string.format(\"%08b\", v):gsub(\"0\", \"\"):len()\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted, function(a, b)\n    return count[a][1] < count[b][1]\
    \ or (count[a][1] == count[b][1] and count[a][2] < count[b][2])\n  end)\n  return\
    \ sorted\nend", "  table.sort(arr, function(a, b)\n    local an, bn = a, b\n \
    \   if a < 0 then an = -a end\n    if b < 0 then bn = -b end\n    local c, d =\
    \ count_ones(an), count_ones(bn)\n    if c == d then\n      return an < bn\n \
    \   else\n      return c < d\n    end\n  end)\n  return arr\nend", "    table.sort(arr,\
    \ function(a, b)\n        local bin_a = string.format(\"%b\", a)\n        local\
    \ bin_b = string.format(\"%b\", b)\n        local num_ones_a = bin_a:match(1)\
    \ and #bin_a or 0\n        local num_ones_b = bin_b:match(1) and #bin_b or 0\n\
    \        if num_ones_a ~= num_ones_b then\n            return num_ones_a < num_ones_b\n\
    \        else\n            return a < b\n        end\n    end)\n    return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a1 = count_bits(a)\n    local\
    \ b1 = count_bits(b)\n    if a1 == b1 then\n      return a < b\n    else\n   \
    \   return a1 < b1\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local s = 0\n    while n > 0 do\n      s = s + (n & 1)\n      n = n >> 1\n\
    \    end\n    return s\n  end\n  local function cmp(a, b)\n    local a1, b1 =\
    \ count_ones(a), count_ones(b)\n    if a1 == b1 then\n      return a < b\n   \
    \ else\n      return a1 < b1\n    end\n  end\n  table.sort(arr, cmp)\n  return\
    \ arr\nend", "    local function _calc_num_ones(n)\n        local ones = 0\n \
    \       while n > 0 do\n            if n % 2 == 1 then\n                ones =\
    \ ones + 1\n            end\n            n = math.floor(n / 2)\n        end\n\
    \        return ones\n    end", "  local function sortBinary(a, b)\n    local\
    \ aOnes = math.tointeger(string.match(string.format(\"%b\", a), '1+'))\n    local\
    \ bOnes = math.tointeger(string.match(string.format(\"%b\", b), '1+'))\n    if\
    \ (aOnes == bOnes) then\n      return a < b\n    else\n      return aOnes < bOnes\n\
    \    end\n  end\n  table.sort(arr, sortBinary)\n  return arr\nend", "  local convert\
    \ = function(n)\n    return {\n      dec = n,\n      bin = (function(t)\n    \
    \    local s = \"\"\n        for i = 1, 32 do\n          s = (i == 32 and \"1\"\
    \ or \"0\") .. s\n        end\n        for i = 1, #t do\n          s = s:sub(1,\
    \ t[i]) .. \"1\" .. s:sub(t[i] + 1)\n        end\n        return s\n      end)((function(n)\n\
    \        local t = {}\n        while n > 0 do\n          local digit = (n & 1)\
    \ == 1\n          n = n >> 1\n          if digit then\n            table.insert(t,\
    \ 1, n)\n          end\n        end\n        return t\n      end)(n))\n    }\n\
    \  end\n  local comp = function(n1, n2)\n    local i1, i2 = convert(n1), convert(n2)\n\
    \    if i1.bin:match(\"1\") == i2.bin:match(\"1\") then\n      return i1.dec <\
    \ i2.dec\n    else\n      return #i1.bin:match(\"1\") < #i2.bin:match(\"1\")\n\
    \    end\n  end\n  table.sort(arr, comp)\n  return arr\nend", "  local function\
    \ bit_count(n)\n    local count = 0\n    for _ in tostring(n):gmatch('1') do\n\
    \      count = count + 1\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(x, y)\n    local x_bit = bit_count(x)\n    local y_bit = bit_count(y)\n\
    \    if x_bit == y_bit then\n      return x < y\n    else\n      return x_bit\
    \ < y_bit\n    end\n  end)\n  return arr\nend", "  -- TODO: implement this function\n\
    end", "  table.sort(arr, function(a, b)\n    local a1, b1 = a:count('1'), b:count('1')\n\
    \    if a1 == b1 then\n      return a < b\n    else\n      return a1 < b1\n  \
    \  end\n  end)\n  return arr\nend", "  local function sort(a, b)\n    local c\
    \ = 0\n    local d = 0\n    while (a > 0) do\n      c = c + (a % 2)\n      a =\
    \ math.floor(a / 2)\n    end\n    while (b > 0) do\n      d = d + (b % 2)\n  \
    \    b = math.floor(b / 2)\n    end\n    if (c > d) then\n      return false\n\
    \    elseif (c < d) then\n      return true\n    else\n      return a < b\n  \
    \  end\n  end\n  return table.sort(arr, sort)\nend", "  return arr\nend", "  --\
    \ you code here\n  --table.sort(arr, function(a, b) return a > b end)\n  table.sort(arr,\
    \ function(a, b) return a < b end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_bin = tostring(a):gsub('^-', ''):gsub('0', '')\n    local b_bin\
    \ = tostring(b):gsub('^-', ''):gsub('0', '')\n    if #a_bin == #b_bin then\n \
    \     return a < b\n    else\n      return #a_bin < #b_bin\n    end\n  end\n \
    \ table.sort(arr, compare)\n  return arr\nend", "    return {}\nend", "  table.sort(arr,\
    \ function(a, b)\n    local x = count_ones(a)\n    local y = count_ones(b)\n \
    \   if x == y then\n      return a < b\n    else\n      return x < y\n    end\n\
    \  end)\n  return arr\nend", "  local newarr = {}\n  for i, v in ipairs(arr) do\n\
    \    newarr[i] = {v, string.gsub(v .. \"\", \"1\", \"\")}\n  end\n  table.sort(newarr,\
    \ function(a, b)\n    if a[2] == b[2] then\n      return a[1] < b[1]\n    else\n\
    \      return a[2] < b[2]\n    end\n  end)\n  for i, v in ipairs(newarr) do\n\
    \    newarr[i] = v[1]\n  end\n  return newarr\nend", "  local function number_of_ones(num)\n\
    \    local res = 0\n    while num > 0 do\n      if math.fmod(num, 2) == 1 then\n\
    \        res = res + 1\n      end\n      num = math.floor(num / 2)\n    end\n\
    \    return res\n  end\n  local function get_key(n)\n    return string.format(\"\
    %d:%d\", number_of_ones(n), n)\n  end\n  table.sort(arr, function(a, b)\n    return\
    \ get_key(a) < get_key(b)\n  end)\n  return arr\nend", "  return table.sort(arr,\
    \ function(a, b)\n    return a == b and a or tostring(a):count'1' == tostring(b):count'1'\
    \ and a < b or tostring(a):count'1' < tostring(b):count'1'\n  end)\nend", "  \
    \  local function count_ones(num)\n        local function bit_count(n)\n     \
    \       if n == 0 then return 0 end\n            local count = 0\n           \
    \ for i = 1, 31 do\n                if n % 2 == 1 then count = count + 1 end\n\
    \                n = n // 2\n            end\n            return count\n     \
    \   end\n        return bit_count(num)\n    end\n    table.sort(arr, function(a,\
    \ b)\n        local a_ones = count_ones(a)\n        local b_ones = count_ones(b)\n\
    \        if a_ones == b_ones then return a < b end\n        return a_ones < b_ones\n\
    \    end)\n    return arr\nend", "  local function cmp(a, b)\n    local a_bin\
    \ = (2):totable(a)\n    local b_bin = (2):totable(b)\n    local na = #a_bin\n\
    \    local nb = #b_bin\n    if na == nb then\n      if a < b then\n        return\
    \ true\n      else\n        return false\n      end\n    elseif na < nb then\n\
    \      return true\n    else\n      return false\n    end\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_str\
    \ = tostring(a)\n    local b_str = tostring(b)\n    local a_bin = string.format(\"\
    %b\", a_str)\n    local b_bin = string.format(\"%b\", b_str)\n    local a_len\
    \ = #a_bin\n    local b_len = #b_bin\n    local a_ones = a_bin:gsub(\"0\", \"\"\
    ):len()\n    local b_ones = b_bin:gsub(\"0\", \"\"):len()\n    if a_ones == b_ones\
    \ then\n      return a_str < b_str\n    else\n      return a_ones < b_ones\n \
    \   end\n  end)\n  return arr\nend", "  return arr\nend", "  local bit = require(\"\
    bit\")\n  local t = {}\n  for i = 1, #arr do\n    local bin = 0\n    local val\
    \ = arr[i]\n    while val > 0 do\n      bin = bin + bit.band(val, 1)\n      val\
    \ = bit.rshift(val, 1)\n    end\n    t[i] = {bin, arr[i]}\n  end\n  table.sort(t,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] < b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  for i = 1, #arr do\n    arr[i] =\
    \ t[i][2]\n  end\n  return arr\nend", "  table.sort(arr, function(x, y)\n    local\
    \ x_ones = x % 2 == 1 and 1 or 0\n    local y_ones = y % 2 == 1 and 1 or 0\n \
    \   x = x / 2\n    y = y / 2\n    while x > 0 do\n      x_ones = x_ones + (x %\
    \ 2 == 1 and 1 or 0)\n      x = x / 2\n    end\n    while y > 0 do\n      y_ones\
    \ = y_ones + (y % 2 == 1 and 1 or 0)\n      y = y / 2\n    end\n    if x_ones\
    \ ~= y_ones then\n      return x_ones < y_ones\n    else\n      return x < y\n\
    \    end\n  end)\n  return arr\nend", "    return arr\nend", "    local l = {}\n\
    \    for i,v in ipairs(arr) do\n        table.insert(l, {v, v, v})\n    end\n\
    \    table.sort(l, function(a, b)\n        return a[2] == b[2] and a[1] < b[1]\
    \ or a[2] < b[2]\n    end)\n    local r = {}\n    for i,v in ipairs(l) do\n  \
    \      table.insert(r, v[3])\n    end\n    return r\nend", "  local function count_ones(num)\n\
    \    local cnt = 0\n    while num > 0 do\n      if num % 2 == 1 then\n       \
    \ cnt = cnt + 1\n      end\n      num = math.floor(num / 2)\n    end\n    return\
    \ cnt\n  end\n  table.sort(arr, function(a, b)\n    local cnt_a = count_ones(a)\n\
    \    local cnt_b = count_ones(b)\n    if cnt_a == cnt_b then\n      return a <\
    \ b\n    else\n      return cnt_a < cnt_b\n    end\n  end)\n  return arr\nend",
  "    table.sort(arr, function(a, b)\n        local f = string.format\n        local\
    \ count_ones = function(x)\n            return string.gsub(f(\"%b\", x), \"[01]\"\
    , \"\")\n        end\n        local c1, c2 = count_ones(a), count_ones(b)\n  \
    \      if c1 == c2 then\n            return a < b\n        else\n            return\
    \ c1 < c2\n        end\n    end)\n    return arr\nend", "  local function count(num)\n\
    \    local cnt = 0\n    while num > 0 do\n      cnt = cnt + (num % 2)\n      num\
    \ = math.floor(num / 2)\n    end\n    return cnt\n  end\n  table.sort(arr, function(a,\
    \ b)\n    if a < 0 then a = -a end\n    if b < 0 then b = -b end\n    local cnta\
    \ = count(a)\n    local cntb = count(b)\n    if cnta == cntb then\n      return\
    \ a < b\n    else\n      return cnta < cntb\n    end\n  end)\n  return arr\nend",
  "  table.sort(arr, function(a, b)\n    local ba = tostring(a):sub(1, 2) == '-1'\
    \ and a+1 or a\n    local bb = tostring(b):sub(1, 2) == '-1' and b+1 or b\n  \
    \  local a_bin = tostring(ba):gsub('-', ''):reverse()\n    local b_bin = tostring(bb):gsub('-',\
    \ ''):reverse()\n    local a_ones = a_bin:gsub('0', ''):len()\n    local b_ones\
    \ = b_bin:gsub('0', ''):len()\n    if a_ones ~= b_ones then\n      return a_ones\
    \ < b_ones\n    else\n      return ba < bb\n    end\n  end)\n  return arr\nend",
  "    table.sort(arr, function(a, b)\n        local na, nb = math.floor(math.log(a)\
    \ / math.log(2)) + 1, math.floor(math.log(b) / math.log(2)) + 1\n        if na\
    \ == nb then\n            return a < b\n        else\n            return na <\
    \ nb\n        end\n    end)\n    return arr\nend", "    return table.sort(arr,\
    \ function(a, b)\n        local aBits = bit.tonumb", "  local function cmp(x,\
    \ y)\n    local xb = x:bit():to_string(2)\n    local yb = y:bit():to_string(2)\n\
    \    local xx = xb:match('1+') or ''\n    local yy = yb:match('1+') or ''\n  \
    \  if #xx ~= #yy then\n      return #xx < #yy\n    else\n      return x < y\n\
    \    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "    local function\
    \ ones(x)\n        local count = 0\n        for i = 1, 32 do\n            count\
    \ = count + (x & 1)\n            x = x >> 1\n        end\n        return count\n\
    \    end\n    local function cmp(a, b)\n        local oa, ob = ones(a), ones(b)\n\
    \        if oa ~= ob then\n            return oa < ob\n        else\n        \
    \    return a < b\n        end\n    end\n    table.sort(arr, cmp)\n    return\
    \ arr\nend", "  local function comp(a, b)\n    local ones_a = a:gsub('0', ''):len()\n\
    \    local ones_b = b:gsub('0', ''):len()\n    if ones_a == ones_b then\n    \
    \  return tonumber(a) < tonumber(b)\n    else\n      return ones_a < ones_b\n\
    \    end\n  end\n  table.sort(arr, comp)\n  return arr\nend", "  -- Implement\
    \ your solution here\nend", "  table.sort(arr, function(a, b)\n    local ba =\
    \ tostring(a:as_binary()):gsub(' ', '')\n    local bb = tostring(b:as_binary()):gsub('\
    \ ', '')\n    local n1 = ba:gsub('0', ''):len()\n    local n2 = bb:gsub('0', ''):len()\n\
    \    if n1 == n2 then\n      return a < b\n    else\n      return n1 < n2\n  \
    \  end\n  end)\n  return arr\nend", "  if #arr < 2 then return arr end\n  table.sort(arr,\
    \ function(x, y)\n    local xb = num.tobits(x)\n    local yb = num.tobits(y)\n\
    \    local b1 = xb:count(1)\n    local b2 = yb:count(1)\n    if b1 == b2 then\n\
    \      return x < y\n    else\n      return b1 < b2\n    end\n  end)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    local bin_a = tostring(a):gsub('.',\
    \ '1'):reverse()\n    local bin_b = tostring(b):gsub('.', '1'):reverse()\n   \
    \ local a_ones = bin_a:gsub('0', ''):len()\n    local b_ones = bin_b:gsub('0',\
    \ ''):len()\n    if a_ones ~= b_ones then\n      return a_ones < b_ones\n    else\n\
    \      return a < b\n    end\n  end)\n  return arr\nend", "    local T = {}\n\
    \    for i, v in ipairs(arr) do\n        local c = 0\n        local t = v\n  \
    \      while t > 0 do\n            c = c + t % 2\n            t = math.floor(t\
    \ / 2)\n        end\n        table.insert(T, {c, v})\n    end\n    table.sort(T,\
    \ function(x, y)\n        if x[1] == y[1] then\n            return x[2] < y[2]\n\
    \        else\n            return x[1] < y[1]\n        end\n    end)\n    local\
    \ result = {}\n    for i, v in ipairs(T) do\n        table.insert(result, v[2])\n\
    \    end\n    return result\nend", "    local function numones(n)\n        local\
    \ c = 0\n        while n > 0 do\n            c = c + (n % 2)\n            n =\
    \ math.floor(n / 2)\n        end\n        return c\n    end\n    table.sort(arr,\
    \ function(a, b)\n        local c = numones(a) - numones(b)\n        if c == 0\
    \ then\n            return a < b\n        else\n            return c < 0\n   \
    \     end\n    end)\n    return arr\nend", "    local function numones(n)\n  \
    \      local i = 0\n        while n > 0 do\n            i = i + (n & 1)\n    \
    \        n = n >> 1\n        end\n        return i\n    end\n    local function\
    \ compare(a, b)\n        local ones_a, ones_b = numones(a), numones(b)\n     \
    \   if ones_a == ones_b then\n            return a < b\n        else\n       \
    \     return ones_a < ones_b\n        end\n    end\n    table.sort(arr, compare)\n\
    \    return arr\nend", "\ttable.sort(arr, function(a, b)\n\t\tlocal ao = ones(a)\n\
    \t\tlocal bo = ones(b)\n\t\tif ao == bo then\n\t\t\treturn a < b\n\t\telse\n\t\
    \t\treturn ao < bo\n\t\tend\n\tend)\n\treturn arr\nend", "    local function ones(n)\n\
    \        local count = 0\n        for _ in tostring(n):gmatch('1') do\n      \
    \      count = count + 1\n        end\n        return count\n    end\n    table.sort(arr,\
    \ function(a, b)\n        if ones(a) == ones(b) then\n            return a < b\n\
    \        else\n            return ones(a) < ones(b)\n        end\n    end)\n \
    \   return arr\nend", "\tlocal len = #arr\n\tlocal result = {}\n\tfor i = 1, len\
    \ do\n\t\tlocal index = 1\n\t\tlocal ones = get_ones(arr[i])\n\t\twhile index\
    \ <= len and (get_ones(result[index]) < ones or\n\t\t\t(get_ones(result[index])\
    \ == ones and result[index] < arr[i])) do\n\t\t\tindex = index + 1\n\t\tend\n\t\
    \ttable.insert(result, index, arr[i])\n\tend\n\treturn result\nend", "  local\
    \ function bitcount(n)\n    if n == 0 then return 0 end\n    local c = 0\n   \
    \ while n > 0 do\n      c = c + 1\n      n = n & (n - 1)\n    end\n    return\
    \ c\n  end\n  return table.sort(arr, function(a, b)\n    local ac, bc = bitcount(a),\
    \ bitcount(b)\n    if ac == bc then return a < b end\n    return ac < bc\n  end)\n\
    end", "    local function bin_ones(value)\n        local count = 0\n        while\
    \ value > 0 do\n            if value % 2 == 1 then\n                count = count\
    \ + 1\n            end\n            value = math.floor(value / 2)\n        end\n\
    \        return count\n    end\n    table.sort(arr, function(a, b)\n        if\
    \ bin_ones(a) == bin_ones(b) then\n            return a < b\n        else\n  \
    \          return bin_ones(a) < bin_ones(b)\n        end\n    end)\n    return\
    \ arr\nend", "    local function binary_ones(n)\n        local ret = 0\n     \
    \   for i = n, 0, -1 do\n            ret = ret + (i % 2)\n        end\n      \
    \  return ret\n    end\n    table.sort(arr, function(a, b)\n        local ones_a\
    \ = binary_ones(a)\n        local ones_b = binary_ones(b)\n        if ones_a ==\
    \ ones_b then\n            return a < b\n        else\n            return ones_a\
    \ < ones_b\n        end\n    end)\n    return arr\nend", "  local function compare(a,\
    \ b)\n    local ones_a = assert(string.gsub(string.format(\"%08s\", string.gsub(string.format(\"\
    %b\", a), \"%D\", \"\")), \" \", \"0\"), a)\n    local ones_b = assert(string.gsub(string.format(\"\
    %08s\", string.gsub(string.format(\"%b\", b), \"%D\", \"\")), \" \", \"0\"), b)\n\
    \    if #ones_a > #ones_b then\n      return true\n    elseif #ones_a < #ones_b\
    \ then\n      return false\n    else\n      return a < b\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "    local function num_of_ones(num)\n       \
    \ return (tostring(num):gsub('0', ''):len())\n    end\n    local function count_ones(a,\
    \ b)\n        if num_of_ones(a) == num_of_ones(b) then\n            return a <\
    \ b\n        else\n            return num_of_ones(a) < num_of_ones(b)\n      \
    \  end\n    end\n    table.sort(arr, count_ones)\n    return arr\nend", "  local\
    \ function f(a, b)\n    local ba, bb = a:byte(), b:byte()\n    return (ba == bb\
    \ and a < b) or (ba < bb)\n  end\n  table.sort(arr, f)\n  return arr\nend", " \
    \ local function sort_ascending(a, b)\n    local ones_a = tonumber(a:gsub('[^1]',\
    \ ''), 2)\n    local ones_b = tonumber(b:gsub('[^1]', ''), 2)\n    if ones_a ==\
    \ ones_b then\n      return a < b\n    end\n    return ones_a < ones_b\n  end\n\
    \  local function sort_descending(a, b)\n    local ones_a = tonumber(a:gsub('[^1]',\
    \ ''), 2)\n    local ones_b = tonumber(b:gsub('[^1]', ''), 2)\n    if ones_a ==\
    \ ones_b then\n      return a > b\n    end\n    return ones_a > ones_b\n  end\n\
    \  local function to_binary(a)\n    return string.format('%b', a)\n  end\n  local\
    \ function sign(a)\n    return a > 0 and 1 or a < 0 and -1 or 0\n  end\n  local\
    \ bin_arr = {}\n  for i,v in ipairs(arr) do\n    bin_arr[i] = to_binary(v)\n \
    \ end\n  local function sorter(a, b)\n    return sign(a) * sign(b) > 0 and sort_ascending(a,\
    \ b) or sort_descending(a, b)\n  end\n  table.sort(bin_arr, sorter)\n  for i,v\
    \ in ipairs(bin_arr) do\n    bin_arr[i] = tonumber(v, 2)\n  end\n  return bin_arr\n\
    end", "    local l = {}\n    for i = 1, #arr do\n        table.insert(l, { tostring(arr[i]),\
    \ tostring(arr[i]):gsub('[^1]', ''):len(), arr[i] })\n    end\n    table.sort(l,\
    \ function(a, b)\n        if a[2] == b[2] then\n            return a[3] < b[3]\n\
    \        else\n            return a[2] < b[2]\n        end\n    end)\n    for\
    \ i = 1, #l do\n        arr[i] = tonumber(l[i][1])\n    end\n    return arr\n\
    end", "    local array = {}\n    for i, x in ipairs(arr) do\n        if x >= 0\
    \ then\n            local b = x % 2\n            x = x / 2\n            while\
    \ x > 0 do\n                b = b + 1\n                x = x / 2\n           \
    \ end\n            table.insert(array, {x = arr[i], y = b})\n        else\n  \
    \          table.insert(array, {x = arr[i], y = -1})\n        end\n    end\n \
    \   table.sort(array, function(a, b)\n        if a.y == b.y then\n           \
    \ return a.x < b.x\n        else\n            return a.y < b.y\n        end\n\
    \    end)\n    local result = {}\n    for i, x in ipairs(array) do\n        table.insert(result,\
    \ x.x)\n    end\n    return result\nend", "    local comp = function(x, y)\n \
    \       local x_ones = x:count_ones()\n        local y_ones = y:count_ones()\n\
    \        if x_ones ~= y_ones then\n            return x_ones < y_ones\n      \
    \  else\n            return x < y\n        end\n    end\n    return arr:sort(comp)\n\
    end", "    local f = function(a, b)\n        if a == b then return 0 end\n   \
    \     local a2 = tonumber(a, 2)\n        local b2 = tonumber(b, 2)\n        local\
    \ ca = a2 - a2 % 10\n        local cb = b2 - b2 % 10\n        local c = ca ==\
    \ cb and a < b or ca < cb\n        return c and -1 or 1\n    end\n    table.sort(arr,\
    \ f)\n    return arr\nend", "  local sort_arr = {}\n  for i = 1, #arr do\n   \
    \ local n = arr[i]\n    local f = function(m)\n      local s = 0\n      while\
    \ m > 0 do\n        local d = m % 2\n        if d == 1 then\n          s = s +\
    \ 1\n        end\n        m = math.floor(m / 2)\n      end\n      return s\n \
    \   end\n    table.insert(sort_arr, {n, f(n)})\n  end\n  table.sort(sort_arr,\
    \ function(a, b)\n    if a[2] == b[2] then\n      return a[1] < b[1]\n    else\n\
    \      return a[2] < b[2]\n    end\n  end)\n  local result = {}\n  for i = 1,\
    \ #sort_arr do\n    table.insert(result, sort_arr[i][1])\n  end\n  return result\n\
    end", "  local function bin(x)\n    local b = {}\n    while x > 0 do\n      b[#b+1]\
    \ = x % 2\n      x = x // 2\n    end\n    return b\n  end\n  local function ones(x)\n\
    \    return table.concat(bin(x)):gsub(\"0\", \"\"):len()\n  end\n  table.sort(arr,\
    \ function(a, b)\n    return ones(a) < ones(b) or ones(a) == ones(b) and a < b\n\
    \  end)\n  return arr\nend", "  local tab = {}\n  for i, v in ipairs(arr) do\n\
    \    tab[i] = {\n      value = v,\n      one = string.len(v:toBin():gsub(\"1\"\
    , \"\"))\n    }\n  end\n  table.sort(tab, function(a, b)\n    if a.one == b.one\
    \ then\n      return a.value < b.value\n    else\n      return a.one < b.one\n\
    \    end\n  end)\n  for i, v in ipairs(tab) do\n    arr[i] = v.value\n  end\n\
    \  return arr\nend", "  return table.sort(arr, function(a, b)\n    local a_bin\
    \ = string.format(\"%b\", a)\n    local b_bin = string.format(\"%b\", b)\n   \
    \ local a_count = string.gsub(a_bin, \"[^1]\", \"\")\n    local b_count = string.gsub(b_bin,\
    \ \"[^1]\", \"\")\n    if #a_count == #b_count then\n      return a < b\n    else\n\
    \      return #a_count < #b_count\n    end\n  end)\nend", "  local sorted = {}\n\
    \  for _, v in ipairs(arr) do\n    local ones = 0\n    for _ in tostring(v):gmatch('1')\
    \ do\n      ones = ones + 1\n    end\n    table.insert(sorted, {v, ones})\n  end\n\
    \  table.sort(sorted, function(a, b)\n    if a[2] == b[2] then\n      return a[1]\
    \ < b[1]\n    else\n      return a[2] < b[2]\n    end\n  end)\n  local result\
    \ = {}\n  for _, v in ipairs(sorted) do\n    table.insert(result, v[1])\n  end\n\
    \  return result\nend", "  local function comp(x, y)\n    return tostring(x):match(\"\
    1\") and #tostring(x):match(\"1\") < #tostring(y):match(\"1\") or tonumber(x)\
    \ < tonumber(y)\n  end\n  table.sort(arr, comp)\n  return arr\nend", "  local\
    \ function ones(x)\n    local function loop(x, acc)\n      return x == 0 and acc\
    \ or loop(x // 2, (x % 2) + acc)\n    end\n    return loop(x, 0)\n  end\n  local\
    \ function compare(x, y)\n    local ox, oy = ones(x), ones(y)\n    return ox <\
    \ oy or (ox == oy and x < y)\n  end\n  table.sort(arr, compare)\n  return arr\n\
    end", "  local function ones(n)\n    if n == 0 then return 0 end\n    local c\
    \ = 0\n    while n > 0 do\n      c = c + n % 2\n      n = math.floor(n / 2)\n\
    \    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n      return\
    \ ones(a) < ones(b) or (ones(a) == ones(b) and a < b)\n    end)\n  return arr\n\
    end", "  local function num1s(x)\n    local n = 0\n    while x > 0 do\n      if\
    \ x % 2 == 1 then\n        n = n + 1\n      end\n      x = math.floor(x / 2)\n\
    \    end\n    return n\n  end\n  local function aux(a, i, j)\n    if i < j then\n\
    \      local pivot = math.random(i, j)\n      local p1, p2 = i, j\n      while\
    \ p1 < p2 do\n        while p1 < p2 and num1s(a[p1]) <= num1s(a[pivot]) do\n \
    \         p1 = p1 + 1\n        end\n        while p1 < p2 and num1s(a[p2]) >=\
    \ num1s(a[pivot]) do\n          p2 = p2 - 1\n        end\n        if p1 < p2 then\n\
    \          a[p1], a[p2] = a[p2], a[p1]\n        end\n      end\n      a[p1], a[pivot]\
    \ = a[pivot], a[p1]\n      aux(a, i, p1 - 1)\n      aux(a, p1 + 1, j)\n    end\n\
    \  end\n  aux(arr, 1, #arr)\n  return arr\nend", "  local function helper(a, b)\n\
    \    local f = function(x)\n      local s = 0\n      while x > 0 do\n        s\
    \ = s + (x % 2)\n        x = math.floor(x / 2)\n      end\n      return s\n  \
    \  end\n    local ta, tb = f(a), f(b)\n    if ta == tb then\n      return a <\
    \ b\n    else\n      return ta < tb\n    end\n  end\n  table.sort(arr, helper)\n\
    \  return arr\nend", "  local function get_ones(n)\n    local ones = 0\n    local\
    \ str = tostring(n)\n    for i=1, #str do\n      if str:sub(i, i) == '1' then\n\
    \        ones = ones + 1\n      end\n    end\n    return ones\n  end\n  local\
    \ function compare(a, b)\n    local ones_a = get_ones(a)\n    local ones_b = get_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local new_array = {}\n  for i, value in ipairs(arr) do\n    new_array[i] = {value,\
    \ tostring(value):gsub('%d', ''):len()}\n  end\n  table.sort(new_array, function(a,\
    \ b)\n    if a[2] == b[2] then\n      return a[1] < b[1]\n    else\n      return\
    \ a[2] < b[2]\n    end\n  end)\n  for i, value in ipairs(new_array) do\n    new_array[i]\
    \ = value[1]\n  end\n  return new_array\nend", "  local function num_bits(n)\n\
    \    local c = 0\n    while n > 0 do\n      c = c + 1\n      n = n & (n - 1)\n\
    \    end\n    return c\n  end\n  local function comparator(a, b)\n    local n1,\
    \ n2 = num_bits(a), num_bits(b)\n    if n1 < n2 then\n      return true\n    elseif\
    \ n1 > n2 then\n      return false\n    else\n      return a < b\n    end\n  end\n\
    \  table.sort(arr, comparator)\n  return arr\nend", "  local t = {}\n  for _,\
    \ v in ipairs(arr) do\n    t[#t + 1] = {v, v % 2, v}\n  end\n  table.sort(t, function(a,\
    \ b)\n    return (a[2] == b[2] and a[3] < b[3]) or a[2] < b[2]\n  end)\n  for\
    \ i, v in ipairs(t) do\n    arr[i] = v[1]\n  end\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local ta, tb = string.format(\"%b\", a), string.format(\"\
    %b\", b)\n    if string.len(ta) ~= string.len(tb) then\n      return ta < tb\n\
    \    end\n    return a < b\n  end)\n  return arr\nend", "  -- Variables\n  local\
    \ swapped, temp, ones\n  -- Functions\n  local function count_ones(num)\n    local\
    \ ones = 0\n    for i=1,32 do\n      if math.floor(num/2^(i-1)) % 2 == 1 then\n\
    \        ones = ones + 1\n      end\n    end\n    return ones\n  end\n  -- Body\n\
    \  repeat\n    swapped = false\n    for i=1,#arr-1 do\n      if count_ones(arr[i])\
    \ > count_ones(arr[i+1]) or\n         (count_ones(arr[i]) == count_ones(arr[i+1])\
    \ and arr[i] > arr[i+1]) then\n        temp = arr[i]\n        arr[i] = arr[i+1]\n\
    \        arr[i+1] = temp\n        swapped = true\n      end\n    end\n  until\
    \ not swapped\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_n = num_ones(a)\n    local b_n = num_ones(b)\n    if a_n ~= b_n then\n   \
    \   return a_n < b_n\n    else\n      return a < b\n    end\n  end)\n  return\
    \ arr\nend", "  local function count(a)\n    local s = \"\"\n    while a > 0 do\n\
    \      if a % 2 == 0 then\n        s = \"0\" .. s\n      else\n        s = \"\
    1\" .. s\n      end\n      a = math.floor(a / 2)\n    end\n    return tonumber(s,\
    \ 2)\n  end\n  return table.sort(arr, function(a, b)\n    return count(a) < count(b)\n\
    \  end)\nend", "  local n = #arr\n  local has_negative = false\n  for i = 1, n\
    \ do\n    if arr[i] < 0 then\n      has_negative = true\n      break\n    end\n\
    \  end\n  if has_negative then\n    local f, i, j = {}, 1, 1\n    while i <= n\
    \ do\n      if arr[i] < 0 then\n        f[j] = arr[i]\n        j = j + 1\n   \
    \   end\n      i = i + 1\n    end\n    i = 1\n    while i <= n do\n      if arr[i]\
    \ >= 0 then\n        f[j] = arr[i]\n        j = j + 1\n      end\n      i = i\
    \ + 1\n    end\n    return f\n  end\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_bin = tostring(a)\n    local b_bin = tostring(b)\n    local\
    \ a_ones = string.gsub(a_bin, \"[^1]\", \"\")\n    local b_ones = string.gsub(b_bin,\
    \ \"[^1]\", \"\")\n    if #a_ones == #b_ones then\n      return a < b\n    else\n\
    \      return #a_ones < #b_ones\n    end\n  end)\n  return arr\nend", "  local\
    \ sorted = {}\n  -- table.sort sorts by binary value\n  table.sort(arr, function(a,\
    \ b)\n    if a < 0 then a = -a end\n    if b < 0 then b = -b end\n    local onesA\
    \ = count_ones(a)\n    local onesB = count_ones(b)\n    if onesA == onesB then\n\
    \      return a < b\n    else\n      return onesA < onesB\n    end\n  end)\n \
    \ for _,n in ipairs(arr) do\n    sorted[#sorted+1] = n\n  end\n  return sorted\n\
    end", "  local r = {}\n  local n = #arr\n  local t = {}\n  for i = 1, n do\n \
    \   local bin = arr[i]\n    local count = 0\n    while bin > 0 do\n      local\
    \ rest = bin % 2\n      bin = (bin - rest) / 2\n      count = count + rest\n \
    \   end\n    t[i] = {count, arr[i]}\n  end\n  table.sort(t, function(x, y)\n \
    \   if x[1] == y[1] then\n      return x[2] < y[2]\n    else\n      return x[1]\
    \ < y[1]\n    end\n  end)\n  for i = 1, n do\n    r[i] = t[i][2]\n  end\n  return\
    \ r\nend", "  if arr == nil then return arr end\n  table.sort(arr, function(a,\
    \ b)\n    if math.abs(a) == math.abs(b) then\n      return a < b\n    else\n \
    \     return ones(math.abs(a)) < ones(math.abs(b))\n    end\n  end)\n  return\
    \ arr\nend", "\tlocal function cmp(a, b)\n\t\tlocal onesa = a:frombase(2):match(\"\
    [1]+\"):len()\n\t\tlocal onesb = b:frombase(2):match(\"[1]+\"):len()\n\t\tif onesa\
    \ == onesb then\n\t\t\treturn a < b\n\t\telse\n\t\t\treturn onesa < onesb\n\t\t\
    end\n\tend\n\treturn arr:sort(cmp)\nend", "  local function bit_len(n)\n    return\
    \ #tostring(n):gsub('[^1]', '')\n  end\n  local function comp(a, b)\n    local\
    \ la, lb = bit_len(a), bit_len(b)\n    if la == lb then\n      return a < b\n\
    \    else\n      return la < lb\n    end\n  end\n  table.sort(arr, comp)\n  return\
    \ arr\nend", "  table.sort(arr,\n    function(a, b)\n      local ones = function(x)\n\
    \        return x:gsub('[^1]', ''):len()\n      end\n      local a1, b1 = ones(('0'):rep(32\
    \ - a:len()) .. a), ones(('0'):rep(32 - b:len()) .. b)\n      return a1 == b1\
    \ and a < b or a1 < b1\n    end\n  )\n  return arr\nend", "  -- We first need\
    \ to transform each number into a table holding the number of\n  -- ones in its\
    \ binary representation and the original number.\n  local function mapper(x)\n\
    \    local ones = 0\n    while x > 0 do\n      x = x - 2^math.floor(math.log(x,\
    \ 2))\n      ones = ones + 1\n    end\n    return {ones, x}\n  end\n  arr = map(mapper,\
    \ arr)\n  -- We then sort by number of ones\n  table.sort(arr, function(a, b)\
    \ return a[1] < b[1] end)\n  -- Then we sort by the original number for each group\n\
    \  for i=1, #arr-1 do\n    local min = i\n    for j=i+1, #arr do\n      if arr[j][1]\
    \ == arr[i][1] and arr[j][2] < arr[min][2] then\n        min = j\n      end\n\
    \    end\n    arr[i], arr[min] = arr[min], arr[i]\n  end\n  -- Finally we return\
    \ the original numbers\n  return map(head, arr)\nend", "    local onecnt = {}\n\
    \    for _, v in ipairs(arr) do\n        onecnt[v] = get_one_cnt(v)\n    end\n\
    \    table.sort(arr, function(a, b)\n        if onecnt[a] == onecnt[b] then\n\
    \            return a < b\n        else\n            return onecnt[a] < onecnt[b]\n\
    \        end\n    end)\n    return arr\nend", "    local function sort_binary(x,\
    \ y)\n        return y[1] == x[1] and y[2] < x[2] or y[1] < x[1]\n    end\n  \
    \  local function get_digits(i)\n        local res = 0\n        local n = i\n\
    \        while n > 0 do\n            res = res + (n % 2)\n            n = math.floor(n\
    \ / 2)\n        end\n        return res\n    end\n    local t = {}\n    for i\
    \ = 1, #arr do\n        t[i] = {get_digits(arr[i]), arr[i]}\n    end\n    table.sort(t,\
    \ sort_binary)\n    for i = 1, #arr do\n        arr[i] = t[i][2]\n    end\n  \
    \  return arr\nend", "  if #arr <= 1 then return arr end\n  local ones = {}\n\
    \  for _, n in ipairs(arr) do\n    ones[n] = (\"%b\"):format(n):gsub(\"0\", \"\
    \"):len()\n  end\n  table.sort(arr, function(a, b)\n    if ones[a] ~= ones[b]\
    \ then\n      return ones[a] < ones[b]\n    else\n      return a < b\n    end\n\
    \  end)\n  return arr\nend", "  local function dec(x)\n    return #(string.gsub(string.format(\"\
    %x\",x),\"1\",\"\"))\n  end\n  local function rdec(x)\n    return -dec(x)\n  end\n\
    \  local function ddec(x)\n    return -x\n  end\n  table.sort(arr,function(a,b)\n\
    \      if dec(a)==dec(b) then\n        return ddec(a)<ddec(b)\n      else\n  \
    \      return rdec(a)<rdec(b)\n      end\n    end)\n  return arr\nend", "    --\
    \ Sort by number of ones in binary representation in ascending order\n    table.sort(arr,\
    \ function(a, b)\n        local a_b = string.match(string.format(\"%b\", a), \"\
    [1]+\")\n        local b_b = string.match(string.format(\"%b\", b), \"[1]+\")\n\
    \        return a_b and #a_b < #b_b or a < b\n    end)\n    return arr\nend",
  "  -- Sort array using Lua's table.sort()\n  table.sort(arr, function(a, b)\n  \
    \  -- Get number of ones\n    local function get_ones(x)\n      local s = string.format(\"\
    %b\", x)\n      local count = 0\n      for _ in s:gmatch(\"1\") do\n        count\
    \ = count + 1\n      end\n      return count\n    end\n    -- Compare ones\n \
    \   local ones_a = get_ones(a)\n    local ones_b = get_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a1 = a < 0 and -a or a\n    local b1 = b < 0 and -b or b\n    local a2 = bin(a1)\n\
    \    local b2 = bin(b1)\n    local a3 = a2:gsub('[01]', '01')\n    local b3 =\
    \ b2:gsub('[01]', '01')\n    return #a3 < #b3 or (#a3 == #b3 and a1 < b1)\n  end)\n\
    \  return arr\nend", "  local compare = function(a, b)\n    local x, y = tostring(a):gsub('1',\
    \ ''), tostring(b):gsub('1', '')\n    return #x < #y or (#x == #y and a < b)\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local bitsA = bit.tonumb(bit.tobits(a))\n\
    \    local bitsB = bit.tonumb(bit.tobits(b))\n    if bitsA == bitsB then\n   \
    \   return a < b\n    else\n      return bitsA < bitsB\n    end\n  end)\n  return\
    \ arr\nend", "  local function numones(n)\n    local count = 0\n    while n >\
    \ 0 do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n     \
    \ n = n / 2\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n\
    \    local n1, n2 = numones(a), numones(b)\n    if n1 == n2 then\n      return\
    \ a < b\n    else\n      return n1 < n2\n    end\n  end)\n  return arr\nend",
  "    local function ones(n)\n        return ({n:byte(1, -1)})\n            :map(string.format(\"\
    %08d\"):format)\n            :concat\"\"\n            :gsub(\"0\", \"\")\n   \
    \         :len()\n    end\n    return arr:sort(function(a, b)\n        return\
    \ ones(a) < ones(b) or ones(a) == ones(b) and a < b\n    end)\nend", "    local\
    \ qsort = function(arr, fn)\n        if #arr <= 1 then return arr end\n      \
    \  local left, right = {}, {}\n        local pivot = arr[1]\n        for i = 2,\
    \ #arr do\n            if fn(arr[i], pivot) then\n                table.insert(left,\
    \ arr[i])\n            else\n                table.insert(right, arr[i])\n   \
    \         end\n        end\n        return qsort(left, fn) + {pivot} + qsort(right,\
    \ fn)\n    end\n    local counter = {}\n    for _, v in ipairs(arr) do\n     \
    \   local num_ones = 0\n        while v > 0 do\n            num_ones = num_ones\
    \ + v % 2\n            v = math.floor(v / 2)\n        end\n        counter[num_ones]\
    \ = counter[num_ones] or {}\n        table.insert(counter[num_ones], v)\n    end\n\
    \    local sorted_counter = {}\n    for k, v in pairs(counter) do\n        table.insert(sorted_counter,\
    \ qsort(v, function(a, b) return a < b end))\n    end\n    local sorted_arr =\
    \ {}\n    for _, v in ipairs(sorted_counter) do\n        for _, elem in ipairs(v)\
    \ do\n            table.insert(sorted_arr, elem)\n        end\n    end\n    return\
    \ sorted_arr\nend", "  local compare = function(a, b)\n    local as, bs = tostring(a),\
    \ tostring(b)\n    local ac, bc = 0, 0\n    for i = 1, #as do\n      if string.find(as,\
    \ '1', i, true) then\n        ac = ac + 1\n      end\n    end\n    for i = 1,\
    \ #bs do\n      if string.find(bs, '1', i, true) then\n        bc = bc + 1\n \
    \     end\n    end\n    if ac == bc then\n      return a < b\n    else\n     \
    \ return ac < bc\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend",
  "    table.sort(arr, function(lhs, rhs)\n        local lhs_bin = string.gsub(string.format(\"\
    %b\", lhs), \"0\", \"\")\n        local rhs_bin = string.gsub(string.format(\"\
    %b\", rhs), \"0\", \"\")\n        if #lhs_bin == #rhs_bin then\n            return\
    \ lhs < rhs\n        else\n            return #lhs_bin < #rhs_bin\n        end\n\
    \    end)\n    return arr\nend", "\ttable.sort(arr, function(a, b)\n\t\tlocal\
    \ _a, _b = to_binary(a), to_binary(b)\n\t\tif count_ones(_a) == count_ones(_b)\
    \ then\n\t\t\treturn a < b\n\t\telse\n\t\t\treturn count_ones(_a) < count_ones(_b)\n\
    \t\tend\n\tend)\n\treturn arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ c, d = a > 0 and a or -a, b > 0 and b or -b\n    local bin1, bin2 = num2bin(c),\
    \ num2bin(d)\n    local cnt1, cnt2 = 0, 0\n    for i = 1, #bin1 do\n      if bin1:sub(i,\
    \ i) == '1' then cnt1 = cnt1 + 1 end\n    end\n    for i = 1, #bin2 do\n     \
    \ if bin2:sub(i, i) == '1' then cnt2 = cnt2 + 1 end\n    end\n    if cnt1 == cnt2\
    \ then\n      return a < b\n    else\n      return cnt1 < cnt2\n    end\n  end)\n\
    \  return arr\nend", "  local function cmp(a, b)\n    local na, nb = bit.tonumber(a),\
    \ bit.tonumber(b)\n    if na == nb then\n      return a < b\n    else\n      return\
    \ na < nb\n    end\n  end\n  local function nb_ones(n)\n    local nb = 0\n   \
    \ while n > 0 do\n      if n % 2 == 1 then\n        nb = nb + 1\n      end\n \
    \     n = math.floor(n / 2)\n    end\n    return nb\n  end\n  table.sort(arr,\
    \ function(a, b)\n    return cmp(nb_ones(a), nb_ones(b))\n  end)\n  return arr\n\
    end", "  local s = {}\n  for i = 1, #arr do\n    if arr[i] >= 0 then\n      local\
    \ ones = select(2, string.gsub(string.format(\"%b\", arr[i]), \"1\", \"\"))\n\
    \      if s[ones] == nil then\n        s[ones] = {}\n      end\n      table.insert(s[ones],\
    \ arr[i])\n    end\n  end\n  local t = {}\n  for i, v in pairs(s) do\n    table.sort(v)\n\
    \    for j = 1, #v do\n      table.insert(t, v[j])\n    end\n  end\n  for i =\
    \ 1, #arr do\n    if arr[i] < 0 then\n      table.insert(t, arr[i])\n    end\n\
    \  end\n  return t\nend", "    local t = {}\n    for _, v in ipairs(arr) do\n\
    \        local key = string.format(\"%05d\", tonumber(v))\n        local c = {}\n\
    \        for k in string.gmatch(key, \"1\") do\n            table.insert(c, k)\n\
    \        end\n        t[#c * 100000 + v] = v\n    end\n    local arr = {}\n  \
    \  for _, v in pairs(t) do\n        table.insert(arr, v)\n    end\n    return\
    \ arr\nend", "  local by_ones = {}\n  for i = 1, #arr do\n    local n = arr[i]\n\
    \    local ones = string.gsub(string.format(\"%b\", n), \"[^1]\", \"\")\n    local\
    \ index = (n >= 0 and ones) or (\"-\" .. ones)\n    if not by_ones[index] then\n\
    \      by_ones[index] = {}\n    end\n    table.insert(by_ones[index], n)\n  end\n\
    \  local sorted = {}\n  for i = 1, #arr do\n    local index = next(by_ones)\n\
    \    table.insert(sorted, table.remove(by_ones[index], 1))\n    if #by_ones[index]\
    \ == 0 then\n      by_ones[index] = nil\n    end\n  end\n  return sorted\nend",
  "  table.sort(arr, function(a, b)\n    local ax, bx = a, b\n    if a < 0 then ax\
    \ = -a end\n    if b < 0 then bx = -b end\n    local ax_ones = tostring(ax):gsub('0',\
    \ ''):len()\n    local bx_ones = tostring(bx):gsub('0', ''):len()\n    if ax_ones\
    \ == bx_ones then\n      return a < b\n    else\n      return ax_ones < bx_ones\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = select(2, string.gsub(string.format(\"%b\", a), \"1\", \"\"))\n   \
    \ local b_ones = select(2, string.gsub(string.format(\"%b\", b), \"1\", \"\"))\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "    table.sort(arr, function(a,\
    \ b)\n        local x = bit.count(a)\n        local y = bit.count(b)\n       \
    \ if x == y then\n            return a < b\n        else\n            return x\
    \ < y\n        end\n    end)\n    return arr\nend", "  local function countBits(x)\n\
    \    local count = 0\n    while x > 0 do\n      count = count + (x % 2)\n    \
    \  x = x / 2\n    end\n    return count\n  end\n  local function comp(x, y)\n\
    \    local bx, by = countBits(x), countBits(y)\n    if bx ~= by then\n      return\
    \ bx < by\n    else\n      return x < y\n    end\n  end\n  table.sort(arr, comp)\n\
    \  return arr\nend", "  table.sort(arr, function(a, b)\n    local aones = 0\n\
    \    local bones = 0\n    for i = 1, 32 do\n      if a > 0 then\n        aones\
    \ = aones + (a % 2)\n        a = math.floor(a / 2)\n      end\n      if b > 0\
    \ then\n        bones = bones + (b % 2)\n        b = math.floor(b / 2)\n     \
    \ end\n    end\n    if aones == bones then\n      return a < b\n    else\n   \
    \   return aones < bones\n    end\n  end)\n  return arr\nend", "  local function\
    \ cmp(a, b)\n    local an, bn = a:len(), b:len()\n    if an == bn then\n     \
    \ return a < b\n    else\n      return an < bn\n    end\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local as, bs = string.format(\"%b\", a), string.format(\"\
    %b\", b)\n    local al, bl = as:len() - as:reverse():find(\"1\"), bs:len() - bs:reverse():find(\"\
    1\")\n    if al == bl then\n      return cmp(as, bs)\n    else\n      return al\
    \ < bl\n    end\n  end)\n  return arr\nend", "  local res = {}\n  for k, v in\
    \ pairs(arr) do\n    res[k] = {string.format(\"%o\", v), v}\n  end\n  table.sort(res,\
    \ function(a, b)\n    if string.len(a[1]) == string.len(b[1]) then\n      return\
    \ a[2] < b[2]\n    else\n      return string.len(a[1]) < string.len(b[1])\n  \
    \  end\n  end)\n  for k, v in pairs(res) do\n    res[k] = v[2]\n  end\n  return\
    \ res\nend", "  local function comp(x, y)\n    local binx = x:__tostring(2)\n\
    \    local biny = y:__tostring(2)\n    local cntx = 0\n    local cnty = 0\n  \
    \  for c in binx:gmatch('1') do\n      cntx = cntx + 1\n    end\n    for c in\
    \ biny:gmatch('1') do\n      cnty = cnty + 1\n    end\n    if cntx == cnty then\n\
    \      return x < y\n    else\n      return cntx < cnty\n    end\n  end\n  table.sort(arr,\
    \ comp)\n  return arr\nend", "    return sort_by(arr, function(x)\n        local\
    \ b = x > 0 and tostring(x, 2) or tostring(bit32.bnot(math.abs(x)) + 1, 2)\n \
    \       local i = 0\n        for _ in b:gmatch('1') do\n            i = i + 1\n\
    \        end\n        return { i, x }\n    end)\nend", "  local t = {}\n  for\
    \ i, v in ipairs(arr) do\n    local b = dec2bin(v)\n    t[i] = {v, b, string.match(b,\
    \ \"1\") and #string.match(b, \"1\") or 0}\n  end\n  table.sort(t, function(a,\
    \ b) return a[3] < b[3] or (a[3] == b[3] and a[1] < b[1]) end)\n  local r = {}\n\
    \  for i, v in ipairs(t) do\n    r[i] = v[1]\n  end\n  return r\nend", "  local\
    \ get_ones = function(x)\n    local n = 0\n    for _ in x:gmatch(\"1\") do\n \
    \     n = n + 1\n    end\n    return n\n  end\n  local val, ones = {}, {}\n  for\
    \ _, v in ipairs(arr) do\n    table.insert(val, v)\n    table.insert(ones, get_ones(tostring(math.abs(v),\
    \ 2)))\n  end\n  table.sort(val, function(a, b)\n    if ones[a] == ones[b] then\n\
    \      return a < b\n    else\n      return ones[a] < ones[b]\n    end\n  end)\n\
    \  return val\nend", "  table.sort(arr, function(a, b)\n    local diff = tostring(a):gsub('[^1]',\
    \ ''):len() - tostring(b):gsub('[^1]', ''):len()\n    if diff == 0 then\n    \
    \  return a < b\n    end\n    return diff < 0\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(x, y)\n    local bx = dec2bin(x)\n    local by = dec2bin(y)\n\
    \    local xones = num_ones(bx)\n    local yones = num_ones(by)\n    if xones\
    \ == yones then\n      return x < y\n    else\n      return xones < yones\n  \
    \  end\n  end)\n  return arr\nend", "  local ones = {}\n  for _, x in ipairs(arr)\
    \ do\n    ones[x] = string.gsub(string.format(\"%b\", x), '0', '')\n  end\n  table.sort(arr,\
    \ function(a, b)\n    if ones[a] == ones[b] then\n      return a < b\n    else\n\
    \      return ones[a] < ones[b]\n    end\n  end)\n  return arr\nend", "  local\
    \ ret = {}\n  local ones = {}\n  for i = 1, #arr do\n    local dec, ones_ = arr[i],\
    \ 0\n    if dec > 0 then\n      while dec > 0 do\n        ones_ = ones_ + (dec\
    \ % 2)\n        dec = dec / 2\n      end\n    end\n    if not ones[ones_] then\n\
    \      ones[ones_] = {}\n    end\n    ones[ones_][#ones[ones_] + 1] = arr[i]\n\
    \  end\n  for i = 1, #ones do\n    table.sort(ones[i])\n    for j = 1, #ones[i]\
    \ do\n      ret[#ret + 1] = ones[i][j]\n    end\n  end\n  return ret\nend", " \
    \ local sorted = table.sort(arr, function(a, b)\n    local bina, binb = string.format(\"\
    %b\", a), string.format(\"%b\", b)\n    return bina:len() < binb:len() or (bina:len()\
    \ == binb:len() and a < b)\n  end)\n  return sorted\nend", "  local function sort_by_ones(a,\
    \ b)\n    local function bitcount(n)\n      local count = 0\n      for i = 0,\
    \ 31 do\n        count = count + n % 2\n        n = n // 2\n      end\n      return\
    \ count\n    end\n    local ones_a, ones_b = bitcount(a), bitcount(b)\n    if\
    \ ones_a == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end\n  table.sort(arr, sort_by_ones)\n  return arr\nend", "    table.sort(arr,\
    \ function(a, b)\n        if a ~= 0 and b ~= 0 then\n            local bits_a\
    \ = math.log(a) / math.log(2)\n            local bits_b = math.log(b) / math.log(2)\n\
    \            return (bits_a - bits_b) < 0\n        elseif a == 0 then\n      \
    \      return false\n        elseif b == 0 then\n            return true\n   \
    \     end\n    end)\n    return arr\nend", "    if not arr then\n        return\
    \ nil\n    end\n    local ret = {}\n    for i, v in ipairs(arr) do\n        local\
    \ n = string.format(\"%b\", v)\n        local n1 = 0\n        for i in n:gmatch(\"\
    1\") do\n            n1 = n1 + 1\n        end\n        table.insert(ret, {v, n1})\n\
    \    end\n    table.sort(ret, function(a, b)\n        if a[2] == b[2] then\n \
    \           return a[1] < b[1]\n        else\n            return a[2] < b[2]\n\
    \        end\n    end)\n    return getCol(ret, 1)\nend", "  return table.sort(arr,\
    \ function(a, b)\n    local x = bit.band(a, 1)\n    local y = bit.band(b, 1)\n\
    \    return x < y or (x == y and a < b)\n  end)\nend", "  local sort = {}\n  local\
    \ sorted = {}\n  for k, v in pairs(arr) do\n    local ones = 0\n    while v >\
    \ 0 do\n      ones = ones + v % 2\n      v = math.floor(v / 2)\n    end\n    table.insert(sort,\
    \ {ones, arr[k]})\n  end\n  table.sort(sort, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] < b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  for k, v in pairs(sort) do\n    table.insert(sorted, v[2])\n  end\n\
    \  return sorted\nend", "    return utils.sortBy(arr, function(i)\n        return\
    \ {num_ones = utils.bin2dec(i):match('[^0]+'):len(), i}\n    end)\nend", "  --\
    \ your code here\n  return arr\nend", "  local f = function(a, b)\n    local bin_a\
    \ = a == 0 and '0' or table.concat(table.map(\n      table.range(0, math.floor(math.log(a)\
    \ / math.log(2))),\n      function(i) return bit.band(a, bit.lshift(1, i)) ==\
    \ 0 and '0' or '1' end\n    ))\n    local bin_b = b == 0 and '0' or table.concat(table.map(\n\
    \      table.range(0, math.floor(math.log(b) / math.log(2))),\n      function(i)\
    \ return bit.band(b, bit.lshift(1, i)) == 0 and '0' or '1' end\n    ))\n    local\
    \ bin_a_ones = bin_a:gsub('0', ''):len()\n    local bin_b_ones = bin_b:gsub('0',\
    \ ''):len()\n    if bin_a_ones < bin_b_ones then\n      return true\n    elseif\
    \ bin_a_ones > bin_b_ones then\n      return false\n    else\n      return a <\
    \ b\n    end\n  end\n  table.sort(arr, f)\n  return arr\nend", "  local convert\
    \ = {}\n  for i = 1, #arr do\n    convert[i] = {ones = string.format(\"%b\", math.abs(arr[i])):match(\"\
    1+\") or \"\", value = arr[i]}\n  end\n  local function compare(a, b)\n    return\
    \ (#a.ones == #b.ones and a.value < b.value) or (#a.ones < #b.ones)\n  end\n \
    \ table.sort(convert, compare)\n  for i = 1, #arr do\n    arr[i] = convert[i].value\n\
    \  end\n  return arr\nend", "  -- Your code here\nend", "  local function bin_to_dec(num)\n\
    \    local dec = 0\n    local one_cnt = 0\n    local i = 0\n    while num > 0\
    \ do\n      if math.fmod(num, 2) == 1 then\n        one_cnt = one_cnt + 1\n  \
    \      dec = dec + 2^i\n      end\n      num = math.floor(num / 2)\n      i =\
    \ i + 1\n    end\n    return {dec = dec, ones = one_cnt}\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_tbl = bin_to_dec(a)\n    local b_tbl = bin_to_dec(b)\n\
    \    if a_tbl.ones == b_tbl.ones then\n      return a_tbl.dec < b_tbl.dec\n  \
    \  else\n      return a_tbl.ones < b_tbl.ones\n    end\n  end)\n  return arr\n\
    end", "  -- it is assumed that arr contains only non-negative integers\n  local\
    \ function count_ones(num)\n    local s = num\n    local count = 0\n    while\
    \ s > 0 do\n      local b = s % 2\n      s = math.floor(s / 2)\n      if b ==\
    \ 1 then\n        count = count + 1\n      end\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local c_a = count_ones(a)\n    local c_b\
    \ = count_ones(b)\n    if c_a == c_b then\n      return a < b\n    else\n    \
    \  return c_a < c_b\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = number.count_ones(a)\n    local b_ones = number.count_ones(b)\n\
    \    if a_ones < b_ones then\n      return true\n    elseif a_ones > b_ones then\n\
    \      return false\n    else\n      return a < b\n    end\n  end)\n  return arr\n\
    end", "  local count = 0\n  local final = {}\n  local ones = {}\n  local zeros\
    \ = {}\n  local others = {}\n  for k,v in pairs(arr) do\n    if v < 0 then\n \
    \     others[#others+1] = v\n    elseif v == 0 then\n      zeros[#zeros+1] = v\n\
    \    else\n      local str = tostring(v)\n      for i=1,#str do\n        local\
    \ c = str:sub(i,i)\n        if c == \"1\" then\n          count = count + 1\n\
    \        end\n      end\n      if not ones[count] then\n        ones[count] =\
    \ {}\n      end\n      ones[count][#ones[count]+1] = v\n      count = 0\n    end\n\
    \  end\n  for k,v in pairs(ones) do\n    table.sort(v)\n    for i=1,#v do\n  \
    \    final[#final+1] = v[i]\n    end\n  end\n  table.sort(zeros)\n  for i=1,#zeros\
    \ do\n    final[#final+1] = zeros[i]\n  end\n  table.sort(others)\n  for i=1,#others\
    \ do\n    final[#final+1] = others[i]\n  end\n  return final\nend", "  table.sort(arr,\n\
    \    function(a, b)\n      return a % 2 > b % 2 or (a % 2 == b % 2 and a < b)\n\
    \    end\n  )\n  return arr\nend", "  local function count_ones(x)\n    local\
    \ b, r = 0, 0\n    while x > 0 do\n      b = x % 2\n      if b == 1 then r = r\
    \ + 1 end\n      x = math.floor(x / 2)\n    end\n    return r\n  end\n  local\
    \ function to_ones(a, b)\n    local count_a, count_b = count_ones(a), count_ones(b)\n\
    \    if count_a == count_b then\n      return a < b\n    else\n      return count_a\
    \ < count_b\n    end\n  end\n  table.sort(arr, to_ones)\n  return arr\nend", " \
    \ local f = function(a, b)\n    local f1 = function(n)\n      local s = string.format(\"\
    %b\", n)\n      local t = {}\n      for k in s:gmatch(\".\") do t[#t+1] = k end\n\
    \      return #t\n    end\n    if f1(a) == f1(b) then return a < b end\n    return\
    \ f1(a) < f1(b)\n  end\n  table.sort(arr, f)\n  return arr\nend", "  local res\
    \ = {}\n  local sorted = {}\n  for _, v in ipairs(arr) do\n    if v >= 0 then\n\
    \      table.insert(res, {v, v % 2, 0})\n    else\n      table.insert(res, {v,\
    \ (-v) % 2, 1})\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[2]\
    \ == b[2] then\n      if a[3] == b[3] then\n        return a[1] < b[1]\n     \
    \ else\n        return a[3] < b[3]\n      end\n    else\n      return a[2] < b[2]\n\
    \    end\n  end)\n  for _, v in ipairs(res) do\n    table.insert(sorted, v[1])\n\
    \  end\n  return sorted\nend", "  local function compare(n1, n2)\n    local bin1\
    \ = bit.tobits(n1)\n    local bin2 = bit.tobits(n2)\n    local n1_ones = 0\n \
    \   local n2_ones = 0\n    for _, b in ipairs(bin1) do\n      if b == 1 then\n\
    \        n1_ones = n1_ones + 1\n      end\n    end\n    for _, b in ipairs(bin2)\
    \ do\n      if b == 1 then\n        n2_ones = n2_ones + 1\n      end\n    end\n\
    \    if n1_ones == n2_ones then\n      return n1 < n2\n    else\n      return\
    \ n1_ones < n2_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\n\
    end", "  return table.sort(arr, function(a, b)\n    local a_ones = a:countones()\n\
    \    local b_ones = b:countones()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\nend", "  if\
    \ #arr == 0 then return arr end\n  local one_count = {}\n  for i, v in ipairs(arr)\
    \ do\n    local t = {}\n    t.val = v\n    t.one_count = tostring(v):gsub('0',\
    \ ''):len()\n    table.insert(one_count, t)\n  end\n  table.sort(one_count, function(a,\
    \ b)\n    if a.one_count == b.one_count then\n      return a.val < b.val\n   \
    \ else\n      return a.one_count < b.one_count\n    end\n  end)\n  local ret =\
    \ {}\n  for i, v in ipairs(one_count) do\n    table.insert(ret, v.val)\n  end\n\
    \  return ret\nend", "  local array = {}\n  for _, v in ipairs(arr) do\n    array[#array\
    \ + 1] = {v, v % 2 + math.modf(v / 2 % 2) + math.modf(v / 4 % 2) + math.modf(v\
    \ / 8 % 2) + math.modf(v / 16 % 2) + math.modf(v / 32 % 2) + math.modf(v / 64\
    \ % 2) + math.modf(v / 128 % 2) + math.modf(v / 256 % 2) + math.modf(v / 512 %\
    \ 2) + math.modf(v / 1024 % 2) + math.modf(v / 2048 % 2) + math.modf(v / 4096\
    \ % 2) + math.modf(v / 8192 % 2) + math.modf(v / 16384 % 2) + math.modf(v / 32768\
    \ % 2) + math.modf(v / 65536 % 2) + math.modf(v / 131072 % 2) + math.modf(v /\
    \ 262144 % 2) + math.modf(v / 524288 % 2) + math.modf(v / 1048576 % 2) + math.modf(v\
    \ / 2097152 % 2) + math.modf(v / 4194304 % 2) + math.modf(v / 8388608 % 2) + math.modf(v\
    \ / 16777216 % 2) + math.modf(v / 33554432 % 2) + math.modf(v / 67108864 % 2)\
    \ + math.modf(v / 134217728 % 2) + math.modf(v / 268435456 % 2) + math.modf(v\
    \ / 536870912 % 2) + math.modf(v / 1073741824 % 2) + math.modf(v / 2147483648\
    \ % 2) + math.modf(v / 4294967296 % 2) + math.modf(v / 8589934592 % 2) + math.modf(v\
    \ / 17179869184 % 2) + math.modf(v / 34359738368 % 2)", "  local function dec_to_bin(dec)\n\
    \    local bin = ''\n    local r = 0\n    repeat\n      r = dec % 2\n      dec\
    \ = math.floor(dec / 2)\n      bin = tostring(r) .. bin\n    until dec == 0\n\
    \    return bin\n  end\n  local arr_bin = {}\n  for i = 1, #arr do\n    arr_bin[i]\
    \ = dec_to_bin(arr[i])\n  end\n  local ones = {}\n  for i = 1, #arr_bin do\n \
    \   ones[i] = {}\n    for _, c in pairs(arr_bin[i]) do\n      if c == '1' then\
    \ ones[i][#ones[i] + 1] = 1 end\n    end\n  end\n  local function get_one_count(t)\n\
    \    local c = 0\n    for _, v in pairs(t) do c = c + v end\n    return c\n  end\n\
    \  local function get_bin_value(t)\n    local v = 0\n    for i = 1, #t do\n  \
    \    v = v + t[i] * (2 ^ (i - 1))\n    end\n    return v\n  end\n  local function\
    \ sort_func(a, b)\n    local a_one_count = get_one_count(a)\n    local b_one_count\
    \ = get_one_count(b)\n    if a_one_count == b_one_count then\n      return get_bin_value(a)\
    \ < get_bin_value(b)\n    else\n      return a_one_count < b_one_count\n    end\n\
    \  end\n  table.sort(ones, sort_func)\n  local new_arr = {}\n  for i = 1, #ones\
    \ do\n    new_arr[i] = get_bin_value(ones[i])\n  end\n  return new_arr\nend",
  "  table.sort(arr, function(a, b)\n    local a_ones = math.floor(math.log(a) / math.log(2))\n\
    \    local b_ones = math.floor(math.log(b) / math.log(2))\n    if a_ones ~= b_ones\
    \ then\n      return a_ones < b_ones\n    else\n      return a < b\n    end\n\
    \  end)\n  return arr\nend", "  local function hamming_weight(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  local\
    \ function bin_compare(a, b)\n    local hw_a = hamming_weight(a)\n    local hw_b\
    \ = hamming_weight(b)\n    if hw_a == hw_b then\n      return a < b\n    else\n\
    \      return hw_a < hw_b\n    end\n  end\n  table.sort(arr, bin_compare)\n  return\
    \ arr\nend", "  local count_ones = function(n)\n    local count = 0\n    while\
    \ n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n \
    \     n = math.floor(n / 2)\n    end\n    return count\n  end\n  local sort_by_ones\
    \ = function(a, b)\n    local count_a = count_ones(a)\n    local count_b = count_ones(b)\n\
    \    if count_a == count_b then\n      return a < b\n    else\n      return count_a\
    \ < count_b\n    end\n  end\n  table.sort(arr, sort_by_ones)\n  return arr\nend",
  "\ttable.sort(arr, function(x, y)\n\t\tlocal x_ones = string.gsub(string.format(\"\
    %b\", x), \"[^1]\", \"\")\n\t\tlocal y_ones = string.gsub(string.format(\"%b\"\
    , y), \"[^1]\", \"\")\n\t\tif #x_ones == #y_ones then\n\t\t\treturn x < y\n\t\t\
    else\n\t\t\treturn #x_ones < #y_ones\n\t\tend\n\tend)\n\treturn arr\nend", " \
    \ local function count_ones(n)\n    local ones = 0\n    while n > 0 do\n     \
    \ if n % 2 == 1 then\n        ones = ones + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return ones\n  end\n  table.sort(arr, function(a, b)\n  \
    \  local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ ~= b_ones then\n      return a_ones < b_ones\n    else\n      return a < b\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = #a:tobytes():gsub('0', '')\n    local b_ones = #b:tobytes():gsub('0',\
    \ '')\n    if a_ones ~= b_ones then\n      return a_ones < b_ones\n    else\n\
    \      return a < b\n    end\n  end)\n  return arr\nend", "    local r = {}\n\
    \    local t = {}\n    for i,v in ipairs(arr) do\n        local f = true\n   \
    \     for j,k in ipairs(r) do\n            if k == v then\n                t[i]\
    \ = j\n                f = false\n                break\n            end\n   \
    \     end\n        if f then\n            table.insert(r, v)\n            t[i]\
    \ = #r\n        end\n    end\n    local a = {}\n    for i,v in ipairs(t) do\n\
    \        a[v] = arr[i]\n    end\n    local c = {}\n    for i,v in ipairs(a) do\n\
    \        c[i] = v\n    end\n    local b = {}\n    for i,v in ipairs(c) do\n  \
    \      local d = {}\n        d.d = v\n        d.b = string.format(\"%o\", v)\n\
    \        b[i] = d\n    end\n    local function compare(a, b)\n        if a.b ==\
    \ b.b then\n            return a.d < b.d\n        else\n            return a.b\
    \ < b.b\n        end\n    end\n    table.sort(b, compare)\n    local f = {}\n\
    \    for i,v in ipairs(b) do\n        f[i] = v.d\n    end\n    return f\nend",
  "    local t = {}\n    for i = 1, #arr do\n        local n = arr[i]\n        local\
    \ ones = 0\n        while n > 0 do\n            if n % 2 == 1 then\n         \
    \       ones = ones + 1\n            end\n            n = math.floor(n / 2)\n\
    \        end\n        local p = ones + 1\n        t[p] = t[p] or {}\n        table.insert(t[p],\
    \ arr[i])\n    end\n    local result = {}\n    for i = 1, #t do\n        if t[i]\
    \ then\n            table.sort(t[i])\n            for j = 1, #t[i] do\n      \
    \          table.insert(result, t[i][j])\n            end\n        end\n    end\n\
    \    return result\nend", "  table.sort(arr, function(a, b)\n    return bit.tohex(a):match('1')\
    \ > bit.tohex(b):match('1')\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local num1 = bit.count(a)\n    local num2 = bit.count(b)\n    if num1\
    \ == num2 then\n      return a < b\n    else\n      return num1 < num2\n    end\n\
    \  end)\n  return arr\nend", "    -- ensure non-negative integers\n    if arr\
    \ and arr[1] and arr[1] < 0 then return arr end\n    -- sort by number of ones\
    \ in binary representation\n    table.sort(arr, function(a, b)\n        local\
    \ ones_a = count_ones(a)\n        local ones_b = count_ones(b)\n        if ones_a\
    \ == ones_b then\n            return a < b\n        else\n            return ones_a\
    \ < ones_b\n        end\n    end)\n    return arr\nend", "  local f = function(x,\
    \ y)\n    local bx = math.tointeger(x) > 0 and ('%b'):format(x) or ('%b'):format(x\
    \ * -1)\n    local by = math.tointeger(y) > 0 and ('%b'):format(y) or ('%b'):format(y\
    \ * -1)\n    local c1 = bx:gsub('1', '')\n    local c2 = by:gsub('1', '')\n  \
    \  if #bx - #c1 == #by - #c2 then\n      return x < y\n    else\n      return\
    \ #bx - #c1 < #by - #c2\n    end\n  end\n  table.sort(arr, f)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local binary_a = dec2bin(a)\n   \
    \ local binary_b = dec2bin(b)\n    local count_a = select(2, binary_a:gsub('1',\
    \ ''))\n    local count_b = select(2, binary_b:gsub('1', ''))\n    if count_a\
    \ == count_b then\n      return a < b\n    else\n      return count_a < count_b\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ bin_a = (a < 0 and -a or a) .. ''\n    local bin_b = (b < 0 and -b or b) ..\
    \ ''\n    local ones_a = bin_a:gsub('[^1]', ''):len()\n    local ones_b = bin_b:gsub('[^1]',\
    \ ''):len()\n    if ones_a ~= ones_b then\n      return ones_a < ones_b\n    else\n\
    \      return (a < 0 and -a or a) < (b < 0 and -b or b)\n    end\n  end)\n  return\
    \ arr\nend", "  local function bit_count(n)\n    n = n - n % 2\n    local c =\
    \ n % 2\n    while n > 0 do\n      n = n / 2\n      c = c + n % 2\n    end\n \
    \   return c\n  end\n  local function bit_count_sort(arr)\n    table.sort(arr,\
    \ function(a, b)\n      local na, nb = bit_count(a), bit_count(b)\n      if na\
    \ == nb then\n        return a < b\n      else\n        return na < nb\n     \
    \ end\n    end)\n    return arr\n  end\n  return bit_count_sort(arr)\nend", " \
    \ table.sort(arr, function(lhs, rhs)\n      if (lhs < 0 and rhs < 0) or (lhs >=\
    \ 0 and rhs >= 0) then\n        local lnum = popcount(lhs)\n        local rnum\
    \ = popcount(rhs)\n        if lnum == rnum then\n          return lhs < rhs\n\
    \        else\n          return lnum < rnum\n        end\n      else\n       \
    \ return lhs < rhs\n      end\n    end)\n  return arr\nend", "\tlocal function\
    \ bitCount(n)\n\t\tlocal count = 0\n\t\twhile n > 0 do\n\t\t\tcount = count +\
    \ (n % 2)\n\t\t\tn = math.floor(n / 2)\n\t\tend\n\t\treturn count\n\tend\n\ttable.sort(arr,\
    \ function(a, b)\n\t\tlocal count_a = bitCount(a)\n\t\tlocal count_b = bitCount(b)\n\
    \t\tif count_a == count_b then\n\t\t\treturn a < b\n\t\telse\n\t\t\treturn count_a\
    \ < count_b\n\t\tend\n\tend)\n\treturn arr\nend", "  local function binary_ones(x)\n\
    \    local str = tostring(x)\n    local sum = 0\n    for i = 1, #str do\n    \
    \  sum = sum + tonumber(str:sub(i, i))\n    end\n    return sum\n  end\n  local\
    \ function abs(x)\n    return x > 0 and x or -x\n  end\n  local function cmp(a,\
    \ b)\n    if a > 0 and b > 0 then\n      local count_a = binary_ones(a)\n    \
    \  local count_b = binary_ones(b)\n      if count_a == count_b then\n        return\
    \ a < b\n      else\n        return count_a < count_b\n      end\n    elseif a\
    \ > 0 then\n      return true\n    elseif b > 0 then\n      return false\n   \
    \ else\n      return abs(a) < abs(b)\n    end\n  end\n  table.sort(arr, cmp)\n\
    \  return arr\nend", "  local function key(v)\n    if v < 0 then\n      return\
    \ {-1, -v}\n    end\n    local n = 0\n    while v > 0 do\n      if v % 2 == 1\
    \ then\n        n = n + 1\n      end\n      v = math.floor(v / 2)\n    end\n \
    \   return {n, v}\n  end\n  table.sort(arr, function(a, b)\n    if a == b then\n\
    \      return false\n    end\n    local akey, bkey = key(a), key(b)\n    for i,\
    \ v in ipairs(akey) do\n      if bkey[i] ~= v then\n        return v < bkey[i]\n\
    \      end\n    end\n    return false\n  end)\n  return arr\nend", "    local\
    \ sorted_ones_table = {}\n    local one_numbers = {}\n    local tmp_table = {}\n\
    \    local result = {}\n    for i = 1, #arr do\n        local number = arr[i]\n\
    \        local ones = 0\n        if number >= 0 then\n            while number\
    \ > 0 do\n                if number % 2 == 1 then\n                    ones =\
    \ ones + 1\n                end\n                number = math.floor(number /\
    \ 2)\n            end\n        else\n            ones = -1\n        end\n    \
    \    one_numbers[i] = ones\n        if tmp_table[ones] == nil then\n         \
    \   tmp_table[ones] = {}\n        end\n        table.insert(tmp_table[ones], arr[i])\n\
    \    end\n    for i = 1, #one_numbers do\n        local one_number = one_numbers[i]\n\
    \        if one_number == -1 then\n            table.insert(sorted_ones_table,\
    \ -1)\n        else\n            local tmp_one_table = tmp_table[one_number]\n\
    \            table.sort(tmp_one_table)\n            for j = 1, #tmp_one_table\
    \ do\n                table.insert(sorted_ones_table, tmp_one_table[j])\n    \
    \        end\n        end\n    end\n    return sorted_ones_table\nend", "  local\
    \ numbers = {}\n  for _, n in ipairs(arr) do\n    local bits = {}\n    local v\
    \ = math.abs(n)\n    while v > 0 do\n      local b = v % 2\n      v = math.floor(v\
    \ / 2)\n      table.insert(bits, b)\n    end\n    local ones = #bits - #bits %\
    \ 2\n    local zeros = #bits - ones\n    local count = 0\n    for i = 1, #bits\
    \ do\n      count = count + bits[i] * math.pow(2, zeros + ones - i)\n    end\n\
    \    table.insert(numbers, {\n      ones = ones,\n      value = n,\n      order\
    \ = count,\n    })\n  end\n  table.sort(numbers, function(a, b)\n    if a.ones\
    \ == b.ones then\n      return a.value < b.value\n    else\n      return a.ones\
    \ < b.ones\n    end\n  end)\n  local result = {}\n  for _, n in ipairs(numbers)\
    \ do\n    table.insert(result, n.value)\n  end\n  return result\nend", "  local\
    \ sort_table = {}\n  for _, x in ipairs(arr) do\n    table.insert(sort_table,\
    \ {ones = bit.tonumb(bit.band(x, bit.blshift(1, 31))), dec = x})\n  end\n  table.sort(sort_table,\
    \ function(a, b)\n    if a.ones == b.ones then\n      return a.dec < b.dec\n \
    \   else\n      return a.ones < b.ones\n    end\n  end)\n  local ret = {}\n  for\
    \ _, x in ipairs(sort_table) do\n    table.insert(ret, x.dec)\n  end\n  return\
    \ ret\nend", "  local sorted = {}\n  for i = 0, 10 do\n    for _, v in ipairs(arr)\
    \ do\n      if count_ones(v) == i then\n        table.insert(sorted, v)\n    \
    \  end\n    end\n  end\n  return sorted\nend", "    local function one_count(n)\n\
    \        local c = 0\n        while n > 0 do\n            if n % 2 == 1 then\n\
    \                c = c + 1\n            end\n            n = math.floor(n / 2)\n\
    \        end\n        return c\n    end\n    table.sort(arr, function(a, b)\n\
    \        if one_count(a) == one_count(b) then\n            return a < b\n    \
    \    else\n            return one_count(a) < one_count(b)\n        end\n    end)\n\
    \    return arr\nend", "  return table.sort(arr, function(a, b)\n    local a_ones\
    \ = select(2, (string.gsub(string.format(\"%b\", a), \"1\", \"\")))\n    local\
    \ b_ones = select(2, (string.gsub(string.format(\"%b\", b), \"1\", \"\")))\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\nend", "  table.sort(arr, function(a, b)\n    local\
    \ aa = bit.band(a, 1) == 1\n    local bb = bit.band(b, 1) == 1\n    if aa == bb\
    \ then\n      return a < b\n    else\n      return aa\n    end\n  end)\n  return\
    \ arr\nend", "    local function to_binary(n)\n        return n < 0 and -1 or\
    \ n > 0 and 2 or 0\n    end\n    table.sort(arr, function(a, b)\n        local\
    \ a, b = to_binary(a), to_binary(b)\n        local one_a, one_b = bit.band(a,\
    \ 1), bit.band(b, 1)\n        return one_a == one_b and a < b or one_a < one_b\n\
    \    end)\n    return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ abin = string.format(\"%b\", a)\n    local bbin = string.format(\"%b\", b)\n\
    \    local aone = #abin:gsub(\"1\", \"\")\n    local bone = #bbin:gsub(\"1\",\
    \ \"\")\n    if aone ~= bone then\n      return aone < bone\n    else\n      return\
    \ a < b\n    end\n  end)\n  return arr\nend", "  local function bit_ones(n)\n\
    \    local count = 0\n    for i = n, n - 1, -1 do\n      count = count + i % 2\n\
    \      i = math.floor(i / 2)\n    end\n    return count\n  end\n  local function\
    \ compare(a, b)\n    local fst = bit_ones(a) - bit_ones(b)\n    if fst == 0 then\
    \ return a - b end\n    return fst\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
