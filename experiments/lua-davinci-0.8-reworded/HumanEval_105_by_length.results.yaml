name: HumanEval_105_by_length
language: lua
results:
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68j7px49.lua:19:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp68j7px49.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        if result[i] ==\
    \ 1 then\n            result[i] = \"One\"\n        elseif result[i] == 2 then\n\
    \            result[i] = \"Two\"\n        elseif result[i] == 3 then\n       \
    \     result[i] = \"Three\"\n        elseif result[i] == 4 then\n            result[i]\
    \ = \"Four\"\n        elseif result[i] == 5 then\n            result[i] = \"Five\"\
    \n        elseif result[i] == 6 then\n            result[i] = \"Six\"\n      \
    \  elseif result[i] == 7 then\n            result[i] = \"Seven\"\n        elseif\
    \ result[i] == 8 then\n            result[i] = \"Eight\"\n        elseif result[i]\
    \ == 9 then\n            result[i] = \"Nine\"\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpygtvzprg.lua:21:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpygtvzprg.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpygtvzprg.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyf_vc_p.lua:19:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpiyf_vc_p.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local r = {}\n    for\
    \ i = 1, #arr do\n        if arr[i] < 1 or arr[i] > 9 then\n            goto continue\n\
    \        end\n        r[#r + 1] = arr[i]\n        ::continue::\n    end\n    table.sort(r)\n\
    \    local sorted = {}\n    for i = #r, 1, -1 do\n        sorted[#sorted + 1]\
    \ = r[i]\n    end\n    local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'}\n    for i = 1, #sorted do\n        sorted[i] = names[sorted[i]]\n\
    \    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  -- TODO: Implement this\
    \ function!\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_le2nv7n.lua:21:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp_le2nv7n.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  -- your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdek1l_r1.lua:20:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpdek1l_r1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n\tlocal ret = {}\n\tlocal\
    \ tmp = {}\n\tfor _, v in ipairs(arr) do\n\t\tif v >= 1 and v <= 9 then\n\t\t\t\
    table.insert(tmp, v)\n\t\tend\n\tend\n\ttable.sort(tmp)\n\tfor i = #tmp, 1, -1\
    \ do\n\t\ttable.insert(ret, string_of_num[tmp[i]])\n\tend\n\treturn ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpedc7csr5.lua:23:\
    \ attempt to index a nil value (global 'string_of_num')\nstack traceback:\n\t\
    /tmp/tmpedc7csr5.lua:23: in local 'candidate'\n\t/tmp/tmpedc7csr5.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    local str = \"\"\n    for i = 0, 9 do\n      if\
    \ v == i then\n        str = reverse[i]\n      end\n    end\n    table.insert(res,\
    \ str)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6u3cw4sf.lua:19:\
    \ attempt to index a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmp6u3cw4sf.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp6u3cw4sf.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local r = {}\n  local\
    \ function name(k)\n    if k == 1 then return 'One'\n    elseif k == 2 then return\
    \ 'Two'\n    elseif k == 3 then return 'Three'\n    elseif k == 4 then return\
    \ 'Four'\n    elseif k == 5 then return 'Five'\n    elseif k == 6 then return\
    \ 'Six'\n    elseif k == 7 then return 'Seven'\n    elseif k == 8 then return\
    \ 'Eight'\n    elseif k == 9 then return 'Nine'\n    end\n  end\n  for i = 1,\
    \ #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(r, name(arr[i]))\n\
    \    end\n  end\n  table.sort(r)\n  local result = {}\n  for i = #r, 1, -1 do\n\
    \    table.insert(result, r[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn5rdm3x.lua:43:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmphn5rdm3x.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local digits = {\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}\n    local ans = {}\n    for i = 1, #arr do\n        local digit =\
    \ arr[i]\n        if digit >= 1 and digit <= 9 then\n            ans[#ans + 1]\
    \ = digits[digit]\n        end\n    end\n    reverse(ans)\n    return ans\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg30_dayr.lua:22:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpg30_dayr.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpg30_dayr.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcugf2ghw.lua:19:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpcugf2ghw.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    table.sort(arr)\n \
    \   table.reverse(arr)\n    local result = {}\n    for i = 1, #arr do\n      \
    \  if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(result, arr[i])\n\
    \        end\n    end\n    for i = 1, #result do\n        if result[i] == 1 then\n\
    \            result[i] = \"One\"\n        elseif result[i] == 2 then\n       \
    \     result[i] = \"Two\"\n        elseif result[i] == 3 then\n            result[i]\
    \ = \"Three\"\n        elseif result[i] == 4 then\n            result[i] = \"\
    Four\"\n        elseif result[i] == 5 then\n            result[i] = \"Five\"\n\
    \        elseif result[i] == 6 then\n            result[i] = \"Six\"\n       \
    \ elseif result[i] == 7 then\n            result[i] = \"Seven\"\n        elseif\
    \ result[i] == 8 then\n            result[i] = \"Eight\"\n        elseif result[i]\
    \ == 9 then\n            result[i] = \"Nine\"\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx34r51zs.lua:15:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpx34r51zs.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpx34r51zs.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local out = {}\n  \
    \  for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(out,\
    \ v)\n        end\n    end\n    table.sort(out)\n    for i, v in ipairs(out) do\n\
    \        out[i] = get_english_number(v)\n    end\n    return reverse(out)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgftxp5b.lua:22:\
    \ attempt to call a nil value (global 'get_english_number')\nstack traceback:\n\
    \t/tmp/tmprgftxp5b.lua:22: in local 'candidate'\n\t/tmp/tmprgftxp5b.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local t = {}\n  local\
    \ str = \"OneTwoThreeFourFiveSixSevenEightNine\"\n  for i, v in ipairs(arr) do\n\
    \    if v > 0 and v < 10 then\n      table.insert(t, str:sub(v*4-3, v*4))\n  \
    \  end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinqgel78.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"OneT\", \"OneT\", \"ight\", \"iveS\", \"ourF\", \"reeF\"\
    , \"woTh\", \"woTh\"}\nstack traceback:\n\t/tmp/tmpinqgel78.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local dict = {'', 'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    local\
    \ res = {}\n    for i = 1, #arr do\n        if arr[i] < 1 or arr[i] > 9 then\n\
    \            goto continue\n        end\n        res[#res + 1] = dict[arr[i] +\
    \ 1]\n        ::continue::\n    end\n    for i = 1, #res / 2 do\n        res[i],\
    \ res[#res - i + 1] = res[#res - i + 1], res[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqorpg4c.lua:32:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Three\", \"Two\", \"Eight\", \"Five\", \"Four\", \"One\"\
    , \"One\", \"Two\"}\nstack traceback:\n\t/tmp/tmpzqorpg4c.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i]\
    \ = nums[result[i]]\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvni0dag.lua:22:\
    \ attempt to index a nil value (global 'nums')\nstack traceback:\n\t/tmp/tmpjvni0dag.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpjvni0dag.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local ans = {}\n  \
    \  for i = 1, 9 do\n        for _, x in ipairs(arr) do\n            if x == i\
    \ then\n                table.insert(ans, conv(i))\n            end\n        end\n\
    \    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_arogbqw.lua:18:\
    \ attempt to call a nil value (global 'conv')\nstack traceback:\n\t/tmp/tmp_arogbqw.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp_arogbqw.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local names = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    local\
    \ valid_numbers = {}\n    for _, number in ipairs(arr) do\n        if number >\
    \ 0 and number < 10 then\n            table.insert(valid_numbers, number)\n  \
    \      end\n    end\n    table.sort(valid_numbers)\n    local result = {}\n  \
    \  for i = #valid_numbers, 1, -1 do\n        table.insert(result, names[valid_numbers[i]])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local words = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3]\
    \ = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6]\
    \ = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9]\
    \ = \"Nine\"\n    }\n    for i = 1, #arr do\n        local n = arr[i]\n      \
    \  if n >= 1 and n <= 9 then\n            res[#res + 1] = n\n        end\n   \
    \ end\n    table.sort(res)\n    for i = 1, #res do\n        res[i] = words[res[i]]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauc6r4wz.lua:42:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpauc6r4wz.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local map = {\n   \
    \     [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n     \
    \   [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n       \
    \ [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n\
    \    table.sort(arr)\n    local result = {}\n    for _,v in ipairs(arr) do\n \
    \       if v >= 1 and v <= 9 then\n            table.insert(result, 1, map[v])\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
