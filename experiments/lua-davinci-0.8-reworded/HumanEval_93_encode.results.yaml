name: HumanEval_93_encode
language: lua
results:
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   local cypher = {}\n   for letter\
    \ in message:gmatch(\".\") do\n      local is_vowel = false\n      for _,vowel\
    \ in ipairs(vowels) do\n         if letter == vowel then\n            is_vowel\
    \ = true\n            break\n         end\n      end\n      if is_vowel then\n\
    \         if letter == 'u' then\n            table.insert(cypher, 'a')\n     \
    \    else\n            table.insert(cypher, vowels[vowels_indices[letter] + 1])\n\
    \         end\n      else\n         table.insert(cypher, letter)\n      end\n\
    \   end\n   return table.concat(cypher)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16g95wns.lua:38:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp16g95wns.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    return string.gsub(string.gsub(message, \"%a\", function(letter)\n      \
    \  if string.find(letter, \"[aeiou]\") then\n            return string.char(string.byte(letter)\
    \ + 2)\n        else\n            return string.upper(letter)\n        end\n \
    \   end), \"Y\", \"A\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hy_4bgy.lua:24:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp1hy_4bgy.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmz9vzh2.lua:17:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmptmz9vzh2.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {['a']=1, ['e']=1, ['i']=1, ['o']=1, ['u']=1}\n    local output\
    \ = ''\n    for i = 1, #message do\n        local curr = message:sub(i, i)\n \
    \       if vowels[curr:lower()] == 1 then\n            output = output .. string.char(string.byte(curr)\
    \ + 2)\n        else\n            if curr:lower() == curr then\n             \
    \   output = output .. curr:upper()\n            else\n                output\
    \ = output .. curr:lower()\n            end\n        end\n    end\n    return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ehxj876.lua:32:\
    \ expected: \"tgst\"\nactual: \"tGst\"\nstack traceback:\n\t/tmp/tmp6ehxj876.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    message = message:lower()\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    for i=1, #message do\n        local c = message:sub(i,i)\n        local index\
    \ = alphabet:find(c)\n        if index then\n            local swap = index +\
    \ 2\n            if swap > #alphabet then\n                swap = swap - #alphabet\n\
    \            end\n            message = message:sub(1,i-1) .. alphabet:sub(swap,swap)\
    \ .. message:sub(i+1)\n        end\n    end\n    return message\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0p_4tr71.lua:31:\
    \ expected: \"tgst\"\nactual: \"vguv\"\nstack traceback:\n\t/tmp/tmp0p_4tr71.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymxza4my.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpymxza4my.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    assert(type(message) == 'string', 'message must be a string')\n    local\
    \ newMessage = ''\n    for char in message:gmatch('%a') do\n        if char:match('[aeiou]')\
    \ then\n            char = vowels[char]\n        end\n        char = string.upper(char)\n\
    \        newMessage = newMessage .. char\n    end\n    return newMessage\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzcfls6j.lua:27:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpzzcfls6j.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqk8boif.lua:17:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpyqk8boif.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurp3gbsw.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpurp3gbsw.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2do1oz2e.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmp2do1oz2e.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local encode = message:gsub('%a', function(ch)\n        if ch == ch:upper()\
    \ then\n            return ch:lower()\n        else\n            return ch:upper()\n\
    \        end\n    end)\n    -- return encode:gsub('[aeiou]', function(ch)\n  \
    \  --     return string.char(string.byte(ch) + 2)\n    -- end)\n    return encode:gsub('[aeiou]',\
    \ function(ch)\n        return ENCODINGS[ch]\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ca75o5g.lua:23:\
    \ attempt to index a nil value (global 'ENCODINGS')\nstack traceback:\n\t/tmp/tmp9ca75o5g.lua:23:\
    \ in function </tmp/tmp9ca75o5g.lua:22>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmp9ca75o5g.lua:22: in local 'candidate'\n\t/tmp/tmp9ca75o5g.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \   local swap_case = {\n      ['a'] = 'A',\n      ['b'] = 'B',\n      ['c'] =\
    \ 'C',\n      ['d'] = 'D',\n      ['e'] = 'E',\n      ['f'] = 'F',\n      ['g']\
    \ = 'G',\n      ['h'] = 'H',\n      ['i'] = 'I',\n      ['j'] = 'J',\n      ['k']\
    \ = 'K',\n      ['l'] = 'L',\n      ['m'] = 'M',\n      ['n'] = 'N',\n      ['o']\
    \ = 'O',\n      ['p'] = 'P',\n      ['q'] = 'Q',\n      ['r'] = 'R',\n      ['s']\
    \ = 'S',\n      ['t'] = 'T',\n      ['u'] = 'U',\n      ['v'] = 'V',\n      ['w']\
    \ = 'W',\n      ['x'] = 'X',\n      ['y'] = 'Y',\n      ['z'] = 'Z',\n      ['A']\
    \ = 'a',\n      ['B'] = 'b',\n      ['C'] = 'c',\n      ['D'] = 'd',\n      ['E']\
    \ = 'e',\n      ['F'] = 'f',\n      ['G'] = 'g',\n      ['H'] = 'h',\n      ['I']\
    \ = 'i',\n      ['J'] = 'j',\n      ['K'] = 'k',\n      ['L'] = 'l',\n      ['M']\
    \ = 'm',\n      ['N'] = 'n',\n      ['O'] = 'o',\n      ['P'] = 'p',\n      ['Q']\
    \ = 'q',\n      ['R'] = 'r',\n      ['S'] = 's',\n      ['T'] = 't',\n      ['U']\
    \ = 'u',\n      ['V'] = 'v',\n      ['W'] = 'w',\n      ['X'] = 'x',\n      ['Y']\
    \ = 'y',\n      ['Z'] = 'z',\n   }\n   local substitute_vowel = {\n      ['a']\
    \ = 'c',\n      ['e'] = 'g',\n      ['i']\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4078dycv.lua:70: '=' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal _, result = string.gsub(message,\
    \ '[a-zA-Z]', function(c)\n\t\tif string.find(vowels, string.lower(c)) then\n\t\
    \t\treturn string.char(string.byte(c) + 2)\n\t\telse\n\t\t\treturn string.lower(c)\n\
    \t\tend\n\tend)\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7r6t2gb.lua:14:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmp_7r6t2gb.lua:14: in function </tmp/tmp_7r6t2gb.lua:13>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmp_7r6t2gb.lua:13: in local 'candidate'\n\t/tmp/tmp_7r6t2gb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrj4yczb.lua:17:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsrj4yczb.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizr31ekd.lua:17:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpizr31ekd.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \t-- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qq5rw0f.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmp5qq5rw0f.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozuu4o65.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpozuu4o65.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplf9nhxca.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmplf9nhxca.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    for\
    \ i = 1, #message do\n        local letter = message:sub(i, i)\n        local\
    \ is_lowercase = letter == letter:lower()\n        local is_vowel = table.contains(vowels,\
    \ letter:lower())\n        if is_vowel then\n            letter = next_letter(letter)\n\
    \            letter = next_letter(letter)\n        end\n        if is_lowercase\
    \ then\n            letter = letter:upper()\n        else\n            letter\
    \ = letter:lower()\n        end\n        result = result .. letter\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_nrzzdak.lua:17:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp_nrzzdak.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp_nrzzdak.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local function encode_char(c)\n    if not c:match('%a') then\n      return\
    \ c\n    end\n    local lower = c:lower()\n    local shifted = 2\n    if lower\
    \ == 'w' then\n      shifted = shifted - 2\n    elseif lower == 'y' then\n   \
    \   shifted = shifted - 1\n    end\n    local new_char = lower:byte() + shifted\n\
    \    if new_char > 122 then\n      new_char = new_char - 26\n    end\n    new_char\
    \ = string.char(new_char)\n    if c == c:upper() then\n      new_char = new_char:upper()\n\
    \    end\n    return new_char\n  end\n  return message:gsub('%a', encode_char)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidkkz_oj.lua:39:\
    \ expected: \"tgst\"\nactual: \"VGUV\"\nstack traceback:\n\t/tmp/tmpidkkz_oj.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
