language: lua
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local output = {}\n  for\
    \ i = 0, n do\n    output[#output + 1] = tostring(i)\n  end\n  return table.concat(output,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local res = { }\n   \
    \ for i = 0, n do\n        res[#res + 1] = tostring(i)\n    end\n    return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\treturn table.concat( map(tostring,\
    \ range(n+1)), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1teu8bvq.lua:7:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp1teu8bvq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1teu8bvq.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n < 0 then return\
    \ '' end\n    local s = ''\n    for i = 0, n do\n        s = s .. tostring(i)\
    \ .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznfsueoh.lua:18:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpznfsueoh.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return table.concat({string_sequence(n-1),'\
    \ ',n},'')\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal tmp = {}\n\tfor i\
    \ = 0, n do\n\t\ttmp[i+1] = tostring(i)\n\tend\n\treturn table.concat(tmp, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(table.range(n\
    \ + 1), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6cbd2pai.lua:7:\
    \ attempt to call a nil value (field 'range')\nstack traceback:\n\t/tmp/tmp6cbd2pai.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6cbd2pai.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal s = {}\n\tfor i =\
    \ 0, n do\n\t\ts[i+1] = i\n\tend\n\treturn table.concat(s, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal values = {}\n\tfor\
    \ i = 0, n do\n\t\tvalues[i] = i\n\tend\n\treturn table.concat(values, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhb9_cr9.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxhb9_cr9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = i\n  end\n  return table.concat(s, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. tostring(i) .. ' '\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcm_8mtg.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpvcm_8mtg.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal i, seq = 0, {}\n\t\
    while i <= n do\n\t\tseq[#seq + 1] = i\n\t\ti = i + 1\n\tend\n\treturn table.concat(seq,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal sequence = {}\n\t\
    for i = 0, n do\n\t\tsequence[i] = tostring(i)\n\tend\n\treturn table.concat(sequence,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3oe3w4j.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpy3oe3w4j.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n > 0 then\n     \
    \   return string_sequence(n-1) .. ' ' .. tostring(n)\n    else\n        return\
    \ tostring(n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = {}\n    for\
    \ i = 0, n do\n        str[#str + 1] = tostring(i)\n    end\n    return table.concat(str,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. i .. \" \"\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz768w9er.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpz768w9er.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal s = ''\n\tfor i =\
    \ 0, n do\n\t\ts = s .. ' ' .. i\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6vvg0q9.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpf6vvg0q9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local sequence = {}\n\
    \    for i = 0, n do\n        table.insert(sequence, tostring(i))\n    end\n \
    \   return table.concat(sequence, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. string.format('%d ', i)\n    end\n    return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_bqr_hq.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpv_bqr_hq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n < 0 then\n     \
    \   return ''\n    end\n    local ret = {}\n    for i = 0, n do\n        ret[#ret\
    \ + 1] = tostring(i)\n    end\n    return table.concat(ret, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local a = {}\n  for i =\
    \ 0, n do\n    a[i+1] = tostring(i)\n  end\n  return table.concat(a, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(table.map({math.range(n\
    \ + 1)}, tostring), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy7au2c0t.lua:7:\
    \ attempt to call a nil value (field 'range')\nstack traceback:\n\t/tmp/tmpy7au2c0t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpy7au2c0t.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv350npn.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpyv350npn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = i\n\tend\n\treturn table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local v = {}\n    for\
    \ i = 0, n do\n        v[i] = i\n    end\n    return table.concat(v, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprof3przb.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmprof3przb.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i+1] = tostring(i)\n  end\n  return table.concat(s, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = ''\n \
    \   for i = 0, n do\n        result = result .. i .. ' '\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoy82s_h.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpyoy82s_h.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n > 0 then\n    return\
    \ string_sequence(n-1) .. ' ' .. tostring(n)\n  else\n    return tostring(n)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local tbl = {}\n    for\
    \ i = 0, n do\n        tbl[i + 1] = i\n    end\n    return join(tbl, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpweyg_or7.lua:11:\
    \ attempt to call a nil value (global 'join')\nstack traceback:\n\t/tmp/tmpweyg_or7.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpweyg_or7.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2l17otp.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpy2l17otp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal out = {}\n\tfor i\
    \ = 0, n do\n\t\tout[i+1] = tostring(i)\n\tend\n\treturn table.concat(out, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = s .. \" \" .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vzchzyo.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp1vzchzyo.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(\n\
    \        table.map(\n            function(i) return tostring(i) end,\n       \
    \     range(n+1)),\n        ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcze1hxoc.lua:10:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpcze1hxoc.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpcze1hxoc.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local out = {}\n    for\
    \ i = 0, n do\n        out[#out + 1] = i\n    end\n    return table.concat(out,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tif n < 0 then\n\t\treturn\
    \ ''\n\tend\n\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[#t + 1] = i\n\tend\n\treturn\
    \ table.concat(t, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = {}\n \
    \   for i = 0, n do\n        result[i + 1] = i\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local tmp = {}\n    for\
    \ i = 0, n do\n        tmp[#tmp + 1] = tostring(i)\n    end\n    return table.concat(tmp,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal acc = {}\n\tfor i\
    \ = 0, n do\n\t\tacc[#acc + 1] = i\n\tend\n\treturn table.concat(acc, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"0\"\n   \
    \ for i = 1, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = ''\n    for\
    \ i = 0, n do\n        str = str .. i .. ' '\n    end\n    return str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp748s4m1k.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp748s4m1k.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = {}\n \
    \   for i = 0, n do\n        result[i + 1] = i\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(table.range(n+1),\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5nh_qfy8.lua:7:\
    \ attempt to call a nil value (field 'range')\nstack traceback:\n\t/tmp/tmp5nh_qfy8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5nh_qfy8.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n < 0 then\n     \
    \   return ''\n    end\n    local r = {}\n    for i = 0, n do\n        r[#r +\
    \ 1] = tostring(i)\n    end\n    return table.concat(r, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local ss = {}\n  for i\
    \ = 0, n do\n    ss[i+1] = string.format('%d', i)\n  end\n  return table.concat(ss,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = s .. \" \" .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vzchzyo.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp1vzchzyo.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. tostring(i) .. ' '\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcm_8mtg.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpvcm_8mtg.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = {}\n \
    \   for i = 0, n do\n        result[i + 1] = tostring(i)\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local sequence = {}\n\
    \    for i = 0, n do\n        table.insert(sequence, i)\n    end\n    return table.concat(sequence,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local l = {}\n  for i =\
    \ 0, n do\n    l[#l + 1] = tostring(i)\n  end\n  return table.concat(l, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(table.pack(string.rep('%d\
    \ ', n), '%d'), ' '):format(table.unpack(table.pack(integer_sequence(n))))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxnlq3lgw.lua:7:\
    \ attempt to call a nil value (global 'integer_sequence')\nstack traceback:\n\t\
    /tmp/tmpxnlq3lgw.lua:7: in local 'candidate'\n\t/tmp/tmpxnlq3lgw.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. tostring(i) .. \" \"\n    end\n    return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b1524yl.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp6b1524yl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat({string.rep(\"\
    0 \", n), n}, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcg5plck.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpqcg5plck.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = tostring(i)\n  end\n  return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal retval = \"\"\n\t\
    for i = 0, n do\n\t\tretval = retval .. \" \" .. i\n\tend\n\treturn retval\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckv1hv17.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpckv1hv17.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat({\
    \ select(1, string.gmatch(('%d+ '):rep(n), '(%d+) ')) }, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe1rrc4jj.lua:7:\
    \ invalid value (function) at index 1 in table for 'concat'\nstack traceback:\n\
    \t/tmp/tmpe1rrc4jj.lua:7: in local 'candidate'\n\t/tmp/tmpe1rrc4jj.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze0jzowl.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpze0jzowl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat({numeric_sequence(n)},\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0_p9p6g.lua:7:\
    \ attempt to call a nil value (global 'numeric_sequence')\nstack traceback:\n\t\
    /tmp/tmpc0_p9p6g.lua:7: in local 'candidate'\n\t/tmp/tmpc0_p9p6g.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tif n < 0 then\n\t\treturn\
    \ nil\n\tend\n\tlocal s = ''\n\tfor i = 0, n do\n\t\ts = s .. i .. ' '\n\tend\n\
    \treturn string.sub(s, 1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = ''\n    for\
    \ i = 0, n do\n        str = str .. ' ' .. i\n    end\n    return string.sub(str,\
    \ 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(map(tostring,\
    \ range(n + 1)), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkoi2nd28.lua:7:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpkoi2nd28.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkoi2nd28.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. tostring(i) .. \" \"\n    end\n    return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b1524yl.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp6b1524yl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = ''\n    for\
    \ i = 0, n do\n        str = str .. ' ' .. i\n    end\n    return str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopefhcyf.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpopefhcyf.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal str = ''\n\tfor i\
    \ = 0, n do\n\t\tstr = str .. i .. ' '\n\tend\n\treturn str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxpdbfum.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpzxpdbfum.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local a = {}\n    for\
    \ i = 0, n do\n        a[#a + 1] = tostring(i)\n    end\n    return table.concat(a,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal out = ''\n\tfor i\
    \ = 0, n do\n\t\tout = out .. i .. ' '\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfd18bri.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpxfd18bri.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tif n == 0 then\n\t\treturn\
    \ '0'\n\telse\n\t\treturn range(0, n):map(tostring):concat(' ')\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6c1oyqzf.lua:10:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp6c1oyqzf.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp6c1oyqzf.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ''\n  for i\
    \ = 0, n do\n    str = str .. ' ' .. i\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp213i8j8g.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp213i8j8g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = tostring(n)\n\
    \    for i = n - 1, 0, -1 do\n        s = tostring(i) .. ' ' .. s\n    end\n \
    \   return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = tostring(i)\n  end\n  return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = i\n    end\n    return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal ret = {}\n\tfor i\
    \ = 0, n do\n\t\tret[i + 1] = i\n\tend\n\treturn table.concat(ret, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal s = \"\"\n\tfor i\
    \ = 0, n do\n\t\ts = s .. i .. \" \"\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0w40f74h.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp0w40f74h.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tif n < 0 then return ''\
    \ end\n\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[#t+1] = i\n\tend\n\treturn concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6r143vg.lua:12:\
    \ attempt to call a nil value (global 'concat')\nstack traceback:\n\t/tmp/tmpm6r143vg.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpm6r143vg.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2l17otp.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpy2l17otp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = s .. \" \" .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vzchzyo.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp1vzchzyo.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = '0'\n    for\
    \ i = 1, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = ''\n    for\
    \ i = 0, n do\n        str = str .. i .. ' '\n    end\n    return str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp748s4m1k.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp748s4m1k.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = i\n    end\n    return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal res = {}\n\tfor i\
    \ = 0, n do\n\t\tres[#res + 1] = tostring(i)\n\tend\n\treturn table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal s = ''\n\tfor i =\
    \ 0, n do\n\t\ts = s .. ' ' .. i\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6vvg0q9.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpf6vvg0q9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = {}\n \
    \   for i = 0, n do\n        result[i + 1] = tostring(i)\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = s .. i .. \" \"\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurcda_v9.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpurcda_v9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat(Fold.range(0,\
    \ n), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphbwtpnbn.lua:7:\
    \ attempt to index a nil value (global 'Fold')\nstack traceback:\n\t/tmp/tmphbwtpnbn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphbwtpnbn.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat(range(n\
    \ + 1), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzdle568c.lua:7:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpzdle568c.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzdle568c.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local _, s = pcall(string.format,\
    \ string.rep(\"%d \", n) .. \"%d\", unpack(table.pack(range(n + 1))))\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcmdzl5p.lua:7:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpzcmdzl5p.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzcmdzl5p.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat(range(n+1),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphydyce7i.lua:7:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmphydyce7i.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphydyce7i.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal ret = ''\n\tfor i\
    \ = 0, n do\n\t\tret = ret .. ' ' .. i\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppiwpqj5t.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmppiwpqj5t.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat(table.map(tostring,\
    \ range(n + 1)), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn60vovvj.lua:7:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpn60vovvj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn60vovvj.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat(table_sequence(n),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9dm74bg.lua:7:\
    \ attempt to call a nil value (global 'table_sequence')\nstack traceback:\n\t\
    /tmp/tmpf9dm74bg.lua:7: in local 'candidate'\n\t/tmp/tmpf9dm74bg.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {'0'}\n  for\
    \ i = 1, n do\n    s[i+1] = tostring(i)\n  end\n  return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local result = {}\n  for\
    \ i = 0, n do\n    result[i + 1] = i\n  end\n  return table.concat(result, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local res = {}\n    for\
    \ i = 0, n do\n        res[#res + 1] = tostring(i)\n    end\n    return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat(numbers(n),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb0bfgg0b.lua:7:\
    \ attempt to call a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmpb0bfgg0b.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpb0bfgg0b.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = {}\n  for i\
    \ = 0, n do\n    str[i+1] = tostring(i)\n  end\n  return table.concat(str, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local arr = {}\n    for\
    \ i = 0, n do\n        arr[i + 1] = tostring(i)\n    end\n    return table.concat(arr,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local r = {}\n  for i =\
    \ 0, n do\n    r[#r + 1] = tostring(i)\n  end\n  return table.concat(r, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i+1] = tostring(i)\n  end\n  return table.concat(s, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local numbers = {}\n  for\
    \ i = 0, n do\n    numbers[i + 1] = i\n  end\n  return table.concat(numbers, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = s .. i .. \" \"\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurcda_v9.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpurcda_v9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local res = { }\n  for\
    \ i = 0, n do\n    res[#res + 1] = tostring(i)\n  end\n  return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return ((('%%s %%s'):format(n)):format(string_sequence(n-1)))\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6kxex108.lua:10:\
    \ bad argument #2 to 'format' (no value)\nstack traceback:\n\t/tmp/tmp6kxex108.lua:10:\
    \ in upvalue 'string_sequence'\n\t/tmp/tmp6kxex108.lua:10: in upvalue 'string_sequence'\n\
    \t/tmp/tmp6kxex108.lua:10: in local 'candidate'\n\t/tmp/tmp6kxex108.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local ret = {}\n  for i\
    \ = 0, n do\n    ret[i + 1] = i\n  end\n  return table.concat(ret, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal res = {}\n\tfor i\
    \ = 0, n do\n\t\tres[#res + 1] = tostring(i)\n\tend\n\treturn table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local r = { }\n    for\
    \ i = 0, n do\n        r[#r + 1] = tostring(i)\n    end\n    return table.concat(r,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i+1] = tostring(i)\n  end\n  return table.concat(s, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = \"0\"\n \
    \   for i = 1, n do\n        str = str .. \" \" .. i\n    end\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. i .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykqjx2w6.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpykqjx2w6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal space = ''\n\tlocal\
    \ str = ''\n\tfor i = 0, n do\n\t\tstr = str .. space .. i\n\t\tspace = ' '\n\t\
    end\n\treturn str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(utils.imap(tostring,\
    \ utils.range(n+1)), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe8o20sjt.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpe8o20sjt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe8o20sjt.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal sequence = {}\n\t\
    for i = 0, n do\n\t\tsequence[i + 1] = i\n\tend\n\treturn table.concat(sequence,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local r = \"\"\n  for i\
    \ = 0, n do\n    r = r .. i .. \" \"\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8fbzt3o.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpj8fbzt3o.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local result = {}\n  for\
    \ i = 0, n do\n    result[i + 1] = i\n  end\n  return table.concat(result, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local b = {}\n    for\
    \ i = 0, n do\n        b[#b + 1] = tostring(i)\n    end\n    return table.concat(b,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local out = {}\n    for\
    \ i = 0, n do\n        out[#out + 1] = tostring(i)\n    end\n    return table.concat(out,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local seq = ''\n    for\
    \ i = 0, n do\n        seq = seq .. tostring(i) .. ' '\n    end\n    return seq\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6v76uk2.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpp6v76uk2.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local sequence = {}\n \
    \ for i = 0, n do\n    table.insert(sequence, i)\n  end\n  return table.concat(sequence,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat(map(tostring,\
    \ range(n + 1)), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdavc3834.lua:7:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpdavc3834.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdavc3834.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = {}\n \
    \   for i = 0, n do\n        result[i + 1] = i\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = s .. \" \" .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vzchzyo.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp1vzchzyo.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal result = { }\n\t\
    for k = 0, n do\n\t\tresult[#result + 1] = tostring(k)\n\tend\n\treturn table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(utility.map(range(n\
    \ + 1), tostring), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahjt52s8.lua:7:\
    \ attempt to index a nil value (global 'utility')\nstack traceback:\n\t/tmp/tmpahjt52s8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpahjt52s8.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = i\n    end\n    return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n < 0 then\n    return\
    \ ''\n  end\n  local s = {}\n  for i = 0, n do\n    s[#s + 1] = tostring(i)\n\
    \  end\n  return table.concat(s, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local sequence = {}\n \
    \ for i = 0, n do\n    table.insert(sequence, tostring(i))\n  end\n  return table.concat(sequence,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return coroutine.wrap(function\
    \ ()\n        for i = 0, n do\n            coroutine.yield(i)\n        end\n \
    \   end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4b43w7n.lua:17:\
    \ expected: \"0\"\nactual: function: 0x55cd5c52a7a0\nstack traceback:\n\t/tmp/tmpr4b43w7n.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze0jzowl.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpze0jzowl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal s = \"\"\n\tfor i\
    \ = 0, n do\n\t\ts = s .. tostring(i) .. \" \"\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_oet58f.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpi_oet58f.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(table.pack(table.unpack(range(n\
    \ + 1))), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi9lne4xl.lua:7:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpi9lne4xl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpi9lne4xl.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local list = {}\n  for\
    \ i = 0, n do\n    list[#list + 1] = i\n  end\n  return table.concat(list, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv350npn.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpyv350npn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local result = {};\n  for\
    \ i = 0, n do\n    result[i+1] = tostring(i);\n  end\n  return table.concat(result,\
    \ ' ');\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(sequence(n),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rq6389d.lua:7:\
    \ attempt to call a nil value (global 'sequence')\nstack traceback:\n\t/tmp/tmp6rq6389d.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6rq6389d.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2l17otp.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpy2l17otp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. i .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykqjx2w6.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpykqjx2w6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = ''\n \
    \   for i = 0, n do\n        result = result .. i .. ' '\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoy82s_h.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpyoy82s_h.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return subrange(0, n):tostring('\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg3vsfzis.lua:7:\
    \ attempt to call a nil value (global 'subrange')\nstack traceback:\n\t/tmp/tmpg3vsfzis.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpg3vsfzis.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal out = {}\n\tfor i\
    \ = 0, n do\n\t\tout[i + 1] = tostring(i)\n\tend\n\treturn table.concat(out, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local r = {}\n    for\
    \ i = 0, n do\n        r[#r + 1] = tostring(i)\n    end\n    return table.concat(r,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  assert(type(n) == 'number')\n\
    \  if n == 0 then\n    return '0'\n  else\n    return table.concat({string_sequence(n-1),\
    \ ' ', tostring(n)}, '')\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal s = \"0\"\n\tfor\
    \ i = 1, n do\n\t\ts = s .. \" \" .. i\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = { n }\n\
    \    for i = n, 1, -1 do\n        result[i] = tostring(i-1)\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpream_hz2.lua:18:\
    \ expected: \"0 1 2 3\"\nactual: \"0 1 2\"\nstack traceback:\n\t/tmp/tmpream_hz2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsmy4n_0.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpvsmy4n_0.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local retval = {}\n  for\
    \ i = 0, n do\n    retval[i + 1] = i\n  end\n  return table.concat(retval, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local sequence = {}\n \
    \ for i = 0, n do\n    table.insert(sequence, tostring(i))\n  end\n  return table.concat(sequence,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local values = {}\n \
    \   for i = 0, n do\n        values[i + 1] = tostring(i)\n    end\n    return\
    \ table.concat(values, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. i .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykqjx2w6.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpykqjx2w6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local out = {}\n  for i\
    \ = 0, n do\n    out[#out + 1] = tostring(i)\n  end\n  return table.concat(out,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local out = {}\n  for i\
    \ = 0, n do\n    out[#out + 1] = tostring(i)\n  end\n  return table.concat(out,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local buffer = {}\n \
    \   for i = 0, n do\n        buffer[#buffer + 1] = tostring(i)\n    end\n    return\
    \ table.concat(buffer, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = i\n\tend\n\treturn table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal r = ''\n\tfor i =\
    \ 0, n do\n\t\tr = r .. i .. ' '\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0w0falke.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp0w0falke.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ''\n  for i\
    \ = 0, n do\n    str = str .. i .. ' '\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4f60ghi.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpm4f60ghi.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978141
