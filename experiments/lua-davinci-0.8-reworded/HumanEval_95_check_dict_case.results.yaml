name: HumanEval_95_check_dict_case
language: lua
results:
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \tlocal num_lower, num_upper = 0, 0\n\tfor key, value in pairs(dict) do\n\t\t\
    if type(key) == 'string' then\n\t\t\tif key == key:lower() then num_lower = num_lower\
    \ + 1 end\n\t\t\tif key == key:upper() then num_upper = num_upper + 1 end\n\t\t\
    end\n\tend\n\treturn num_lower == 0 or num_upper == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc49h6pk1.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc49h6pk1.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lowerKeys =\
    \ true\n    local upperKeys = true\n    for key, value in pairs(dict) do\n   \
    \     if type(key) ~= 'string' then\n            return false\n        end\n \
    \       if not key:lower() == key then\n            lowerKeys = false\n      \
    \  end\n        if not key:upper() == key then\n            upperKeys = false\n\
    \        end\n    end\n    return lowerKeys or upperKeys\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxiakbtg.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphxiakbtg.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local is_lower, is_upper = true, true\n    local is_lower_triggered, is_upper_triggered\
    \ = false, false\n    for k, _ in pairs(dict) do\n        if not (type(k) == 'string')\
    \ then\n            return false\n        end\n        is_lower_triggered = is_lower_triggered\
    \ or not k:match('%l')\n        is_upper_triggered = is_upper_triggered or not\
    \ k:match('%u')\n        is_lower = is_lower and k:match('%l')\n        is_upper\
    \ = is_upper and k:match('%u')\n    end\n    return is_lower or is_upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2ku9gpm.lua:33:\
    \ expected: true, actual: \"p\"\nstack traceback:\n\t/tmp/tmpk2ku9gpm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if type(dict) ~= 'table' then\n        error('bad argument #1 to check_dict_case()\
    \ (table expected, got ' .. type(dict) .. ')', 2)\n    end\n    local key_count\
    \ = 0\n    local lower_count = 0\n    local upper_count = 0\n    for key, _ in\
    \ pairs(dict) do\n        key_count = key_count + 1\n        if type(key) == 'string'\
    \ then\n            if key:lower() == key then\n                lower_count =\
    \ lower_count + 1\n            elseif key:upper() == key then\n              \
    \  upper_count = upper_count + 1\n            end\n        end\n    end\n    return\
    \ (lower_count == key_count or upper_count == key_count) and lower_count ~= 0\
    \ and upper_count ~= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8ia216a.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi8ia216a.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        lower = lower and type(k) == 'string' and k == string.lower(k)\n    \
    \    upper = upper and type(k) == 'string' and k == string.upper(k)\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_nlr4pn.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw_nlr4pn.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local case = nil\n    for key, _ in pairs(dict) do\n        if type(key)\
    \ == 'string' then\n            local str = tostring(key)\n            if case\
    \ == nil then\n                case = str:upper() == str\n            elseif case\
    \ and str:upper() ~= str then\n                return false\n            elseif\
    \ not case and str:lower() ~= str then\n                return false\n       \
    \     end\n        else\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmzityft.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmmzityft.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if next(dict) == nil then\n        return false\n    end\n    local upper\
    \ = false\n    local lower = false\n    for key, _ in pairs(dict) do\n       \
    \ if type(key) == 'string' then\n            if key == string.upper(key) then\n\
    \                upper = true\n            elseif key == string.lower(key) then\n\
    \                lower = true\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return upper ~= lower\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local flag = true\n  if next(dict) == nil then\n    flag = false\n  else\n\
    \    for k,v in pairs(dict) do\n      if type(k) == 'string' then\n        if\
    \ string.upper(k) == k then\n          for k1,v1 in pairs(dict) do\n         \
    \   if type(k1) == 'string' then\n              if string.lower(k1) == k1 then\n\
    \                flag = false\n                break\n              end\n    \
    \        else\n              flag = false\n              break\n            end\n\
    \          end\n        elseif string.lower(k) == k then\n          for k1,v1\
    \ in pairs(dict) do\n            if type(k1) == 'string' then\n              if\
    \ string.upper(k1) == k1 then\n                flag = false\n                break\n\
    \              end\n            else\n              flag = false\n           \
    \   break\n            end\n          end\n        else\n          flag = false\n\
    \          break\n        end\n      else\n        flag = false\n        break\n\
    \      end\n    end\n  end\n  return flag\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local low_case_keys = {}\n    local up_case_keys = {}\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if string.lower(k) == k\
    \ then\n                low_case_keys[k] = v\n            elseif string.upper(k)\
    \ == k then\n                up_case_keys[k] = v\n            end\n        end\n\
    \    end\n    return next(low_case_keys) ~= nil and next(up_case_keys) == nil\
    \ or\n        next(low_case_keys) == nil and next(up_case_keys) ~= nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx15s_k1g.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx15s_k1g.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- code\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0l_1rrg2.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0l_1rrg2.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \tif not dict then return false end\n\tlocal tbl_lower, tbl_upper = {}, {}\n\t\
    local flag_lower, flag_upper = true, true\n\tfor k, v in pairs(dict) do\n\t\t\
    if type(k) == 'string' then\n\t\t\tif k:match('%u') then\n\t\t\t\ttbl_upper[k]\
    \ = v\n\t\t\telse\n\t\t\t\ttbl_lower[k] = v\n\t\t\tend\n\t\telse\n\t\t\tflag_lower,\
    \ flag_upper = false, false\n\t\tend\n\tend\n\treturn flag_lower and tbl_lower\
    \ or flag_upper and tbl_upper or false\nend\nM.check_dict_case = check_dict_case\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptsdezmmg.lua:32: attempt to index a nil value (global 'M')\n\
    stack traceback:\n\t/tmp/tmptsdezmmg.lua:32: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \t--\n\tif is_empty(dict) then\n\t\treturn false\n\tend\n\t--\n\tlocal lower_case\
    \ = true\n\tlocal upper_case = true\n\t--\n\tfor key, value in pairs(dict) do\n\
    \t\tif type(key) == 'string' then\n\t\t\tif key ~= string.lower(key) then\n\t\t\
    \t\tlower_case = false\n\t\t\tend\n\t\t\tif key ~= string.upper(key) then\n\t\t\
    \t\tupper_case = false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\
    \t--\n\treturn lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiskwti7v.lua:17:\
    \ attempt to call a nil value (global 'is_empty')\nstack traceback:\n\t/tmp/tmpiskwti7v.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpiskwti7v.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  if (type(dict) ~= 'table') then\n    error('Table expected. Got: ' .. type(dict))\n\
    \  end\n  if (table.getn(dict) == 0) then\n    return false\n  end\n  local first_key\
    \ = next(dict)\n  if (type(first_key) ~= 'string') then\n    return false\n  end\n\
    \  if (string.match(first_key, '%u') ~= nil) then\n    for key, value in pairs(dict)\
    \ do\n      if (type(key) ~= 'string') then\n        return false\n      end\n\
    \      if (string.match(key, '%l') ~= nil) then\n        return false\n      end\n\
    \    end\n  else\n    for key, value in pairs(dict) do\n      if (type(key) ~=\
    \ 'string') then\n        return false\n      end\n      if (string.match(key,\
    \ '%u') ~= nil) then\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp58d8z8fs.lua:19:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmp58d8z8fs.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp58d8z8fs.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local len = 0\n    for key, value in pairs(dict) do\n        len = len +\
    \ 1\n        if key ~= string.upper(key) and key ~= string.lower(key) then\n \
    \           return false\n        end\n    end\n    if len == 0 then\n       \
    \ return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74_y4jn_.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp74_y4jn_.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- return value\n    local r\n    -- check if the table is empty\n    if\
    \ table.getn(dict) == 0 then\n        r = false\n    else\n        -- flags for\
    \ keys\n        local lower = true\n        local upper = true\n        -- check\
    \ if each key is a string in lower case or upper case\n        for k, _ in pairs(dict)\
    \ do\n            if type(k) ~= 'string' then\n                lower = false\n\
    \                upper = false\n                break\n            else\n    \
    \            if string.find(k, '[A-Z]') then\n                    lower = false\n\
    \                end\n                if string.find(k, '[a-z]') then\n      \
    \              upper = false\n                end\n            end\n        end\n\
    \        r = lower or upper\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk1n0bzu7.lua:19:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpk1n0bzu7.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpk1n0bzu7.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \   local u_count = 0\n   local l_count = 0\n   for k, v in pairs(dict) do\n \
    \     if type(k) == 'string' then\n         if k == string.upper(k) then\n   \
    \         u_count = u_count + 1\n         elseif k == string.lower(k) then\n \
    \           l_count = l_count + 1\n         end\n      end\n   end\n   if u_count\
    \ == #dict or l_count == #dict then\n      return true\n   else\n      return\
    \ false\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao9_sh47.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpao9_sh47.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \t--checks to see if dictionary is empty\n\tif next(dict) == nil then\n\t\treturn\
    \ false\n\tend\n\t--sets variables for first key and case of first key\n\tlocal\
    \ case = nil\n\tlocal firstKey = next(dict)\n\t--if the first key is a string\
    \ then it sets case to lower or upper if it is lower or upper\n\tif type(firstKey)\
    \ == \"string\" then\n\t\tif firstKey == firstKey:lower() then\n\t\t\tcase = \"\
    lower\"\n\t\telseif firstKey == firstKey:upper() then\n\t\t\tcase = \"upper\"\n\
    \t\tend\n\tend\n\t--loops through the dictionary checking if keys are all in the\
    \ same case\n\tfor key, value in pairs(dict) do\n\t\tif type(key) == \"string\"\
    \ then\n\t\t\tif key == key:lower() and case == \"upper\" then\n\t\t\t\treturn\
    \ false\n\t\t\telseif key == key:upper() and case == \"lower\" then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfekbr175.lua:52:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfekbr175.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_cnt = 0\n    local upper_cnt = 0\n    local empty = true\n  \
    \  for k, v in pairs(dict) do\n        if type(k) == 'string' then\n         \
    \   if k == string.lower(k) then\n                lower_cnt = lower_cnt + 1\n\
    \            elseif k == string.upper(k) then\n                upper_cnt = upper_cnt\
    \ + 1\n            end\n        end\n        empty = false\n    end\n    if empty\
    \ then\n        return false\n    elseif lower_cnt == 0 and upper_cnt == 0 then\n\
    \        return false\n    elseif lower_cnt > 0 and upper_cnt > 0 then\n     \
    \   return false\n    else\n        return true\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0p5eq5p.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn0p5eq5p.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local count_lower, count_upper = 0, 0\n  for k,v in pairs(dict) do\n    if\
    \ type(k) == 'string' then\n      if string.upper(k) == k then count_upper = count_upper\
    \ + 1\n      else count_lower = count_lower + 1 end\n    else return false end\n\
    \  end\n  if count_lower * count_upper == 0 then return true\n  else return false\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8mujst8.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph8mujst8.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoueqf8i3.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoueqf8i3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
