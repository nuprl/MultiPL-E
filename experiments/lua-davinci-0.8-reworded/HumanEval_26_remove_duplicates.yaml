name: HumanEval_26_remove_duplicates
language: lua
prompt: "-- From a table of integers, remove all elements that occur more than once.\n\
  -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
  \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1,\
  \ 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local t = {}\n  for _, v in ipairs(numbers) do\n    if not t[v] then\n\
    \      t[v] = true\n      coroutine.yield(v)\n    end\n  end\nend", "    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n     \
    \   if not seen[v] then\n            seen[v] = true\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local found = {}\n \
    \   local result = {}\n    for _,n in ipairs(numbers) do\n        if not found[n]\
    \ then\n            table.insert(result, n)\n            found[n] = true\n   \
    \     end\n    end\n    return result\nend", "    local seen = {}\n    local results\
    \ = {}\n    for _, n in ipairs(numbers) do\n        if not seen[n] then\n    \
    \        table.insert(results, n)\n            seen[n] = true\n        end\n \
    \   end\n    return results\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           seen[number] = true\n            table.insert(result, number)\n  \
    \      end\n    end\n    return result\nend", "  local dupes = {}\n  local result\
    \ = {}\n  for _, x in ipairs(numbers) do\n    if dupes[x] then\n      dupes[x]\
    \ = true\n    else\n      table.insert(result, x)\n      dupes[x] = false\n  \
    \  end\n  end\n  return result\nend", "    local seen = {}\n    local function\
    \ helper(i)\n        local n = numbers[i]\n        if seen[n] then\n         \
    \   return\n        end\n        seen[n] = true\n        return i\n    end\n \
    \   return map(helper, 1, #numbers)\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      seen[number] = true\n      table.insert(result, number)\n    end\n  end\n\
    \  return result\nend", "    local unique = {}\n    for _, v in ipairs(numbers)\
    \ do\n        unique[v] = (unique[v] or 0) + 1\n    end\n    local ordered = {}\n\
    \    for _, v in ipairs(numbers) do\n        if unique[v] == 1 then\n        \
    \    table.insert(ordered, v)\n        end\n    end\n    return ordered\nend",
  "    local seen = {}\n    for i = 1, #numbers do\n        local current = numbers[i]\n\
    \        if seen[current] then\n            table.remove(numbers, i)\n       \
    \     i = i - 1\n        else\n            seen[current] = true\n        end\n\
    \    end\n    return numbers\nend", "    local seen = {}\n    local result = {}\n\
    \    for _,v in ipairs(numbers) do\n        if not seen[v] then\n            seen[v]\
    \ = true\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    local set = {}\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not set[n] then\n            set[n] = true\n            table.insert(result,\
    \ n)\n        end\n    end\n    return result\nend", "  local seen = {}\n  local\
    \ result = {}\n  for _,v in ipairs(numbers) do\n    if not seen[v] then\n    \
    \  table.insert(result, v)\n      seen[v] = true\n    end\n  end\n  return result\n\
    end", "  local table_to_keep = {}\n  local table_to_remove = {}\n  for _, i in\
    \ ipairs(numbers) do\n    if table_to_keep[i] then\n      table_to_remove[i] =\
    \ true\n    else\n      table_to_keep[i] = true\n    end\n  end\n  local result\
    \ = {}\n  for _, i in ipairs(numbers) do\n    if not table_to_remove[i] then\n\
    \      table.insert(result, i)\n    end\n  end\n  return result\nend", "    local\
    \ seen = {}\n    local no_dupes = {}\n    for _, num in ipairs(numbers) do\n \
    \       if not seen[num] then\n            no_dupes[#no_dupes + 1] = num\n   \
    \         seen[num] = true\n        end\n    end\n    return no_dupes\nend", " \
    \ -- TODO: Implement\n  local duplicates = {}\n  local final = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if duplicates[number] == nil then\n      duplicates[number]\
    \ = number\n      table.insert(final, number)\n    end\n  end\n  return final\n\
    end", "  local result = {}\n  local ids = {}\n  for _, num in ipairs(numbers)\
    \ do\n    if not ids[num] then\n      table.insert(result, num)\n      ids[num]\
    \ = true\n    end\n  end\n  return result\nend", "    local res = {}\n    local\
    \ map = {}\n    for i = 1, #numbers do\n        local num = numbers[i]\n     \
    \   if not map[num] then\n            map[num] = true\n            res[#res +\
    \ 1] = num\n        end\n    end\n    return res\nend", "    local ret = {}\n\
    \    local counts = {}\n    for _, n in ipairs(numbers) do\n        if counts[n]\
    \ == nil then\n            ret[#ret + 1] = n\n            counts[n] = 1\n    \
    \    else\n            counts[n] = counts[n] + 1\n        end\n    end\n    return\
    \ ret\nend", "  local result = {}\n  local seen = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not seen[number] then\n      table.insert(result, number)\n     \
    \ seen[number] = true\n    end\n  end\n  return result\nend", "    local output\
    \ = {}\n    local lookup = {}\n    for _, i in ipairs(numbers) do\n        if\
    \ not lookup[i] then\n            table.insert(output, i)\n            lookup[i]\
    \ = true\n        end\n    end\n    return output\nend", "    local result = {}\n\
    \    local seen = {}\n    for _, e in ipairs(numbers) do\n        if not seen[e]\
    \ then\n            table.insert(result, e)\n            seen[e] = true\n    \
    \    end\n    end\n    return result\nend", "    return null\nend", "  local seen\
    \ = {}\n  local result = {}\n  for _, v in ipairs(numbers) do\n    if not seen[v]\
    \ then\n      seen[v] = true\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend", "  local output = {}\n  local counter = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not counter[number] then\n      table.insert(output,\
    \ number)\n      counter[number] = 1\n    else\n      counter[number] = counter[number]\
    \ + 1\n    end\n  end\n  return output\nend", "  local seen = {}\n  local results\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(results, number)\n      seen[number] = true\n    end\n  end\n\
    \  return results\nend", "    local seen = {}\n    local result = {}\n    for\
    \ _, num in ipairs(numbers) do\n        if not seen[num] then\n            table.insert(result,\
    \ num)\n            seen[num] = true\n        end\n    end\n    return result\n\
    end", "\tlocal uniques = {}\n\tlocal seen = {}\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\tif not seen[number] then\n\t\t\tuniques[#uniques + 1] = number\n\t\t\
    \tseen[number] = true\n\t\tend\n\tend\n\treturn uniques\nend", "    local d =\
    \ {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n        if not\
    \ d[n] then\n            d[n] = true\n            table.insert(result, n)\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ results = {}\n    for _, n in ipairs(numbers) do\n        if not seen[n] then\n\
    \            seen[n] = true\n            table.insert(results, n)\n        end\n\
    \    end\n    return results\nend", "  local result = {}\n  local all = {}\n \
    \ for _, n in ipairs(numbers) do\n    if not all[n] then\n      all[n] = true\n\
    \      table.insert(result, n)\n    end\n  end\n  return result\nend", "    local\
    \ seen = {}\n    local unique = {}\n    for i, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            unique[#unique + 1] = number\n\
    \            seen[number] = true\n        end\n    end\n    return unique\nend",
  "    local seen = {}\n    local no_dups = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(no_dups, number)\n\
    \            seen[number] = true\n        end\n    end\n    return no_dups\nend",
  "    local unique = {}\n    for i, n in ipairs(numbers) do\n        unique[n] =\
    \ true\n    end\n    local result = {}\n    for i, n in ipairs(numbers) do\n \
    \       if unique[n] then\n            table.insert(result, n)\n            unique[n]\
    \ = false\n        end\n    end\n    return result\nend", "    local ret = {}\n\
    \    local lookup = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ lookup[number] then\n            table.insert(ret, number)\n            lookup[number]\
    \ = true\n        end\n    end\n    return ret\nend", "    local output = {}\n\
    \    local used = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ used[number] then\n            output[#output + 1] = number\n            used[number]\
    \ = true\n        end\n    end\n    return output\nend", "    local single = {}\n\
    \    local seen = {}\n    for _,number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            seen[number] = true\n            table.insert(single, number)\n\
    \        end\n    end\n    return single\nend", "  local seen = {}\n  local unique\
    \ = {}\n  for _,n in ipairs(numbers) do\n    if not seen[n] then\n      table.insert(unique,\
    \ n)\n      seen[n] = true\n    end\n  end\n  return unique\nend", "\tlocal map\
    \ = {}\n\tlocal result = {}\n\tfor i,v in ipairs(numbers) do\n\t\tif not map[v]\
    \ then\n\t\t\tmap[v] = true\n\t\t\tresult[#result+1] = v\n\t\tend\n\tend\n\treturn\
    \ result\nend", "\tlocal unique = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif\
    \ unique[n] == nil then\n\t\t\tunique[n] = true\n\t\tend\n\tend\n\treturn remove_keys(unique)\n\
    end", "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local indexes = {}\n    local result = {}\n    for i, num in ipairs(numbers)\
    \ do\n        if not indexes[num] then\n            result[#result + 1] = num\n\
    \            indexes[num] = true\n        end\n    end\n    return result\nend",
  "\tlocal array = {}\n\tlocal non_repeated = {}\n\tfor _, v in ipairs(numbers) do\n\
    \t\tif array[v] then\n\t\t\tnon_repeated[v] = nil\n\t\telse\n\t\t\tarray[v] =\
    \ true\n\t\t\tnon_repeated[v] = true\n\t\tend\n\tend\n\treturn non_repeated\n\
    end", "  local already_seen = {}\n  local uniques = {}\n  for _, i in ipairs(numbers)\
    \ do\n    if not already_seen[i] then\n      table.insert(uniques, i)\n      already_seen[i]\
    \ = true\n    end\n  end\n  return uniques\nend", "    local result = {}\n   \
    \ local last_number\n    for i = 1, #numbers do\n        local number = numbers[i]\n\
    \        if number ~= last_number then\n            table.insert(result, number)\n\
    \            last_number = number\n        end\n    end\n    return result\nend",
  "  local i = 1\n  while i <= #numbers do\n    local seen = false\n    for j = 1,\
    \ i - 1 do\n      if numbers[i] == numbers[j] then\n        seen = true\n    \
    \    break\n      end\n    end\n    if seen then\n      table.remove(numbers,\
    \ i)\n    else\n      i = i + 1\n    end\n  end\n  return numbers\nend", "\tlocal\
    \ result = {}\n\tlocal seen = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif not\
    \ seen[n] then\n\t\t\ttable.insert(result, n)\n\t\t\tseen[n] = true\n\t\tend\n\
    \tend\n\treturn result\nend", "  local seen = {}\n  local result = {}\n  for _,\
    \ number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, x in ipairs(numbers) do\n\
    \        if not seen[x] then\n            table.insert(result, x)\n          \
    \  seen[x] = true\n        end\n    end\n    return result\nend", "    local unique\
    \ = {}\n    for _, v in ipairs(numbers) do\n        unique[v] = true\n    end\n\
    \    local result = {}\n    for _, v in ipairs(numbers) do\n        if unique[v]\
    \ then\n            table.insert(result, v)\n            unique[v] = nil\n   \
    \     end\n    end\n    return result\nend", "  return filter(numbers, function(n)\n\
    \    return count(numbers, n) == 1\n  end)\nend", "  local uniques = {}\n  for\
    \ _, n in ipairs(numbers) do\n    uniques[n] = true\n  end\n  local uniques_list\
    \ = {}\n  for n, _ in pairs(uniques) do\n    table.insert(uniques_list, n)\n \
    \ end\n  return uniques_list\nend", "  local seen = {}\n  local unique = {}\n\
    \  for _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(unique,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return unique\nend", " \
    \   local output = {}\n    local seen = {}\n    for i, n in ipairs(numbers) do\n\
    \        if not seen[n] then\n            table.insert(output, n)\n          \
    \  seen[n] = true\n        end\n    end\n    return output\nend", "    local seen\
    \ = {}\n    local result = {}\n    for _, x in ipairs(numbers) do\n        if\
    \ not seen[x] then\n            table.insert(result, x)\n            seen[x] =\
    \ true\n        end\n    end\n    return result\nend", "\tlocal unique = {}\n\t\
    for _, v in ipairs(numbers) do\n\t\tunique[v] = true\n\tend\n\tlocal result =\
    \ {}\n\tfor _, v in ipairs(numbers) do\n\t\tif unique[v] then\n\t\t\ttable.insert(result,\
    \ v)\n\t\t\tunique[v] = nil\n\t\tend\n\tend\n\treturn result\nend", "    local\
    \ counts = {}\n    for i = 1, #numbers do\n        local c = numbers[i]\n    \
    \    counts[c] = (counts[c] or 0) + 1\n    end\n    local no_duplicates = {}\n\
    \    for i = 1, #numbers do\n        local c = numbers[i]\n        if counts[c]\
    \ == 1 then\n            no_duplicates[#no_duplicates + 1] = c\n        end\n\
    \    end\n    return no_duplicates\nend", "    local result = {}\n    local seen\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number] then\n\
    \            table.insert(result, number)\n            seen[number] = true\n \
    \       end\n    end\n    return result\nend", "    -- empty table\n    if #numbers\
    \ == 0 then\n        return numbers\n    end", "\tlocal result = {}\n\tlocal in_progress\
    \ = {}\n\tfor i = 1, #numbers do\n\t\tlocal num = numbers[i]\n\t\tif not in_progress[num]\
    \ then\n\t\t\tin_progress[num] = true\n\t\t\tresult[#result + 1] = num\n\t\tend\n\
    \tend\n\treturn result\nend", "  local seen = {}\n  local result = {}\n  for _,\
    \ value in ipairs(numbers) do\n    if not seen[value] then\n      seen[value]\
    \ = true\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end", "  return {x for x in values(numbers)\n    if x not in numbers - {x}}\n\
    end", "    local keys = {}\n    local result = {}\n    for _,v in ipairs(numbers)\
    \ do\n        if not keys[v] then\n            keys[v] = true\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "  return iter(numbers):unique():totable()\n\
    end", "    local unique = {}\n    for _, n in ipairs(numbers) do\n        unique[n]\
    \ = true\n    end\n    local output = {}\n    for _, n in ipairs(numbers) do\n\
    \        if unique[n] then\n            unique[n] = nil\n            table.insert(output,\
    \ n)\n        end\n    end\n    return output\nend", "  local r = {}\n  local\
    \ seen = {}\n  for _, n in ipairs(numbers) do\n    if not seen[n] then\n     \
    \ table.insert(r, n)\n      seen[n] = true\n    end\n  end\n  return r\nend",
  "    local seen = {}\n    local out = {}\n    for _,v in ipairs(numbers) do\n  \
    \      if not seen[v] then\n            table.insert(out, v)\n            seen[v]\
    \ = true\n        end\n    end\n    return out\nend", "    local indexed = {}\n\
    \    for _, number in ipairs(numbers) do\n        indexed[number] = true\n   \
    \ end\n    local set = {}\n    for number, _ in pairs(indexed) do\n        table.insert(set,\
    \ number)\n    end\n    return set\nend", "\tlocal n = {}\n\tfor _, i in ipairs(numbers)\
    \ do\n\t\tif not n[i] then\n\t\t\tn[i] = true\n\t\t\ttable.insert(n, i)\n\t\t\
    end\n\tend\n\treturn n\nend", "  local found = {}\n  local result = {}\n  for\
    \ k, v in ipairs(numbers) do\n    if found[v] == nil then\n      table.insert(result,\
    \ v)\n      found[v] = true\n    end\n  end\n  return result\nend", "  local seen\
    \ = {}\n  local result = {}\n  for _, v in ipairs(numbers) do\n    if not seen[v]\
    \ then\n      seen[v] = true\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local output = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(output,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return output\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not seen[v] then\n            table.insert(result, v)\n          \
    \  seen[v] = true\n        end\n    end\n    return result\nend", "\tlocal hash\
    \ = {}\n\tlocal list = {}\n\tfor _, value in ipairs(numbers) do\n\t\tif not hash[value]\
    \ then\n\t\t\thash[value] = true\n\t\t\ttable.insert(list, value)\n\t\tend\n\t\
    end\n\treturn list\nend", "    local seen = {}\n    local ret = {}\n    for _,\
    \ num in ipairs(numbers) do\n        if not seen[num] then\n            ret[#ret\
    \ + 1] = num\n            seen[num] = true\n        end\n    end\n    return ret\n\
    end", "    local result = {}\n    local hashed = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not hashed[n] then\n            table.insert(result, n)\n   \
    \         hashed[n] = true\n        end\n    end\n    return result\nend", " \
    \ local seen = {}\n  local result = {}\n  for _, value in ipairs(numbers) do\n\
    \    if not seen[value] then\n      seen[value] = true\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend", "\tlocal seen = {}\n\tlocal result\
    \ = {}\n\tfor _, x in ipairs(numbers) do\n\t\tif not seen[x] then\n\t\t\tresult[#result\
    \ + 1] = x\n\t\t\tseen[x] = true\n\t\tend\n\tend\n\treturn result\nend", "   \
    \ local result = {}\n    local number_occurences = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not number_occurences[number] then\n            table.insert(result,\
    \ number)\n            number_occurences[number] = true\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    local hash = {}\n    for\
    \ _, n in ipairs(numbers) do\n        if not hash[n] then\n            hash[n]\
    \ = true\n            table.insert(result, n)\n        end\n    end\n    return\
    \ result\nend", "  local seen = {}\n  local result = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if not seen[n] then\n      seen[n] = true\n      table.insert(result,\
    \ n)\n    end\n  end\n  return result\nend", "\tlocal result = {}\n\tlocal occurrences\
    \ = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not occurrences[number]\
    \ then\n\t\t\toccurrences[number] = true\n\t\t\ttable.insert(result, number)\n\
    \t\tend\n\tend\n\treturn result\nend", "  local unique = {}\n  for _, number in\
    \ ipairs(numbers) do\n    if not unique[number] then\n      unique[number] = true\n\
    \      table.insert(unique, number)\n    end\n  end\n  return unique\nend", "\t\
    local res = {}\n\tlocal has = {}\n\tfor i,v in ipairs(numbers) do\n\t\tif not\
    \ has[v] then\n\t\t\ttable.insert(res, v)\n\t\t\thas[v] = true\n\t\tend\n\tend\n\
    \treturn res\nend", "    local index = {}\n    local result = {}\n    for _, number\
    \ in ipairs(numbers) do\n        if not index[number] then\n            index[number]\
    \ = true\n            table.insert(result, number)\n        end\n    end\n   \
    \ return result\nend", "    local uniques = {}\n    local element_counts = {}\n\
    \    for _, number in ipairs(numbers) do\n        element_counts[number] = (element_counts[number]\
    \ or 0) + 1\n    end\n    for _, number in ipairs(numbers) do\n        if element_counts[number]\
    \ == 1 then\n            table.insert(uniques, number)\n        end\n    end\n\
    \    return uniques\nend", "    local output = {}\n    local used = {}\n    for\
    \ _, v in ipairs(numbers) do\n        if not used[v] then\n            table.insert(output,\
    \ v)\n            used[v] = true\n        end\n    end\n    return output\nend",
  "    local result = {}\n    local set = {}\n    for i = 1, #numbers do\n       \
    \ local num = numbers[i]\n        if not set[num] then\n            result[#result\
    \ + 1] = num\n            set[num] = true\n        end\n    end\n    return result\n\
    end", "    local found = {}\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not found[n] then\n            result[#result + 1] = n\n    \
    \        found[n] = true\n        end\n    end\n    return result\nend", "  local\
    \ seen = {}\n  local result = {}\n  for _, v in ipairs(numbers) do\n    if not\
    \ seen[v] then\n      seen[v] = true\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "    local count = {}\n    for _,n in ipairs(numbers)\
    \ do\n        count[n] = (count[n] or 0) + 1\n    end\n    local filtered = {}\n\
    \    for _,n in ipairs(numbers) do\n        if count[n] == 1 then\n          \
    \  filtered[#filtered+1] = n\n        end\n    end\n    return filtered\nend",
  "    local seen = {}\n    local function handler(result, element)\n        if not\
    \ seen[element] then\n            seen[element] = true\n            table.insert(result,\
    \ element)\n        end\n        return result\n    end\n    return reduce(handler,\
    \ {}, numbers)\nend\nprint(remove_duplicates({1, 2, 3, 2, 4}))", "    local occurrence\
    \ = {}\n    local unique = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if occurrence[number] then\n            occurrence[number] = occurrence[number]\
    \ + 1\n        else\n            occurrence[number] = 1\n        end\n    end\n\
    \    for _, number in ipairs(numbers) do\n        if occurrence[number] == 1 then\n\
    \            table.insert(unique, number)\n        end\n    end\n    return unique\n\
    end", "    local seen_once = {}\n    local seen_more_than_once = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if seen_once[number] then\n          \
    \  seen_more_than_once[number] = true\n        else\n            seen_once[number]\
    \ = true\n        end\n    end\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen_more_than_once[number] then\n            table.insert(result,\
    \ number)\n        end\n    end\n    return result\nend", "  local seen = {}\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      seen[number] = true\n      table.insert(result, number)\n    end\n\
    \  end\n  return result\nend", "    local used = {}\n    local res = {}\n    for\
    \ _, n in ipairs(numbers) do\n        if not used[n] then\n            res[#res\
    \ + 1] = n\n            used[n] = true\n        end\n    end\n    return res\n\
    end", "  local used = {}\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not used[number] then\n      used[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend", "\tlocal no_duplicates = {}\n\
    \tfor _, n in ipairs(numbers) do\n\t\tif is_in(n, no_duplicates) == false then\n\
    \t\t\ttable.insert(no_duplicates, n)\n\t\tend\n\tend\n\treturn no_duplicates\n\
    end", "  local seen = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n\
    \    if not seen[n] then\n      seen[n] = true\n      table.insert(result, n)\n\
    \    end\n  end\n  return result\nend", "    local duplicates = {}\n    local\
    \ seen = {}\n    for _, number in ipairs(numbers) do\n        if seen[number]\
    \ then\n            duplicates[number] = true\n        else\n            seen[number]\
    \ = true\n        end\n    end\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not duplicates[number] then\n            table.insert(result,\
    \ number)\n        end\n    end\n    return result\nend", "    local output =\
    \ {}\n    local temp = {}\n    for _, v in ipairs(numbers) do\n        if not\
    \ temp[v] then\n            table.insert(output, v)\n            temp[v] = true\n\
    \        end\n    end\n    return output\nend", "    local counts = {}\n    for\
    \ i, n in ipairs(numbers) do\n        counts[n] = (counts[n] or 0) + 1\n    end\n\
    \    local uniques = {}\n    for i, n in ipairs(numbers) do\n        if counts[n]\
    \ == 1 then\n            uniques[#uniques + 1] = n\n        end\n    end\n   \
    \ return uniques\nend", "    if not numbers then return nil end\n    if numbers[1]\
    \ == nil then return {} end\n    local count = {}\n    for i = 1, #numbers do\n\
    \        count[numbers[i]] = (count[numbers[i]] or 0) + 1\n    end\n    local\
    \ result = {}\n    for i = 1, #numbers do\n        if count[numbers[i]] == 1 then\n\
    \            result[#result + 1] = numbers[i]\n        end\n    end\n    return\
    \ result\nend", "    if not numbers then return {} end\n    local result = {}\n\
    \    local already_seen = {}\n    for _, num in ipairs(numbers) do\n        if\
    \ not already_seen[num] then\n            table.insert(result, num)\n        \
    \    already_seen[num] = true\n        end\n    end\n    return result\nend",
  "    local results = {}\n    local visited = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not visited[number] then\n            table.insert(results, number)\n\
    \            visited[number] = true\n        end\n    end\n    return results\n\
    end", "  local n = #numbers\n  local seen = {}\n  local result = {}\n  for i =\
    \ 1, n do\n    local val = numbers[i]\n    if not seen[val] then\n      seen[val]\
    \ = true\n      result[#result + 1] = val\n    end\n  end\n  return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local res = {}\n    local map = {}\n    for _, n in ipairs(numbers) do\n  \
    \      if not map[n] then\n            res[#res + 1] = n\n            map[n] =\
    \ true\n        end\n    end\n    return res\nend", "\tlocal unique = {}\n\tfor\
    \ _, v in ipairs(numbers) do\n\t\tif not unique[v] then\n\t\t\tunique[v] = true\n\
    \t\t\ttable.insert(unique, v)\n\t\tend\n\tend\n\treturn unique\nend", "  local\
    \ map = {}\n  local result = {}\n  for i, number in ipairs(numbers) do\n    if\
    \ not map[number] then\n      map[number] = true\n      result[#result + 1] =\
    \ number\n    end\n  end\n  return result\nend", "  local result = {}\n  local\
    \ occurrences = {}\n  for _, number in ipairs(numbers) do\n    if occurrences[number]\
    \ == nil then\n      occurrences[number] = true\n      table.insert(result, number)\n\
    \    end\n  end\n  return result\nend", "    local already_seen = {}\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        if not already_seen[n]\
    \ then\n            table.insert(result, n)\n            already_seen[n] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local unique\
    \ = {}\n  for _, n in ipairs(numbers) do\n    if not seen[n] then\n      unique[#unique\
    \ + 1] = n\n      seen[n] = true\n    end\n  end\n  return unique\nend", "\treturn\
    \ table.keys(table.count(numbers))\nend", "    -- First, sort the table.\n   \
    \ -- Then, go through it, and if there are two consecutive equal elements, remove\
    \ the second one.\n    local last_number = numbers[1]\n    for index, number in\
    \ ipairs(numbers) do\n        if number == last_number then\n            table.remove(numbers,\
    \ index)\n        else\n            last_number = number\n        end\n    end\n\
    \    return numbers\nend", "    local result = {}\n    local seen = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not seen[number] then\n        \
    \    table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local numbers_seen = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not numbers_seen[number]\
    \ then\n            table.insert(result, number)\n            numbers_seen[number]\
    \ = true\n        end\n    end\n    return result\nend", "    local uniques =\
    \ {}\n    local positions = {}\n    for i, number in ipairs(numbers) do\n    \
    \    if not positions[number] then\n            uniques[#uniques + 1] = number\n\
    \            positions[number] = i\n        end\n    end\n    return uniques\n\
    end", "  -- Insert elements into a set.\n  local s = {}\n  for k,v in ipairs(numbers)\
    \ do\n    s[v] = v\n  end\n  -- Report elements back in order of appearance.\n\
    \  local t = {}\n  for k,v in ipairs(numbers) do\n    if s[v] then\n      table.insert(t,\
    \ v)\n      s[v] = nil\n    end\n  end\n  return t\nend", "\tlocal counts = {}\n\
    \tfor _, n in ipairs(numbers) do\n\t\tif counts[n] then\n\t\t\tcounts[n] = counts[n]\
    \ + 1\n\t\telse\n\t\t\tcounts[n] = 1\n\t\tend\n\tend\n\tlocal out = {}\n\tfor\
    \ _, n in ipairs(numbers) do\n\t\tif counts[n] == 1 then\n\t\t\ttable.insert(out,\
    \ n)\n\t\tend\n\tend\n\treturn out\nend", "\tassert(type(numbers) == \"table\"\
    , \"Invalid parameter type\")\n\tlocal buf = {}\n\tlocal function add_to_buf(n)\n\
    \t\tbuf[n] = true\n\tend\n\ttable.foreach(numbers, add_to_buf)\n\tlocal new_table\
    \ = {}\n\tfor k, _ in pairs(buf) do\n\t\ttable.insert(new_table, k)\n\tend\n\t\
    return new_table\nend", "  local unique = {}\n  for i = 1, #numbers do\n    local\
    \ n = numbers[i]\n    unique[n] = unique[n] or i\n  end\n  local result = {}\n\
    \  for i = 1, #numbers do\n    local n = numbers[i]\n    if unique[n] == i then\n\
    \      table.insert(result, n)\n    end\n  end\n  return result\nend", "    local\
    \ deduped = {}\n    local seen = {}\n    for _, n in ipairs(numbers) do\n    \
    \    if not seen[n] then\n            seen[n] = true\n            table.insert(deduped,\
    \ n)\n        end\n    end\n    return deduped\nend", "    local seen = {}\n \
    \   local result = {}\n    for i, number in ipairs(numbers) do\n        if not\
    \ seen[number] then\n            seen[number] = true\n            result[#result\
    \ + 1] = number\n        end\n    end\n    return result\nend", "\tlocal seen\
    \ = {}\n\tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not\
    \ seen[number] then\n\t\t\tresult[#result + 1] = number\n\t\t\tseen[number] =\
    \ true\n\t\tend\n\tend\n\treturn result\nend", "    local no_dupes = {}\n    local\
    \ found = {}\n    for _, number in ipairs(numbers) do\n        if not found[number]\
    \ then\n            table.insert(no_dupes, number)\n            found[number]\
    \ = true\n        end\n    end\n    return no_dupes\nend", "    local table_of_occurrences\
    \ = {}\n    local result = {}\n    for _, value in ipairs(numbers) do\n      \
    \  if table_of_occurrences[value] == nil then\n            table_of_occurrences[value]\
    \ = 1\n            table.insert(result, value)\n        else\n            table_of_occurrences[value]\
    \ = table_of_occurrences[value] + 1\n        end\n    end\n    return result\n\
    end", "    local numbers_set = {}\n    local result = {}\n    for _, number in\
    \ ipairs(numbers) do\n        if not numbers_set[number] then\n            numbers_set[number]\
    \ = true\n            table.insert(result, number)\n        end\n    end\n   \
    \ return result\nend", "  local seen = {}\n  local unique = {}\n  for _, v in\
    \ ipairs(numbers) do\n    if not seen[v] then\n      unique[#unique+1] = v\n \
    \     seen[v] = true\n    end\n  end\n  return unique\nend", "    local seen =\
    \ {}\n    local unique = {}\n    for _, number in ipairs(numbers) do\n       \
    \ if not seen[number] then\n            table.insert(unique, number)\n       \
    \     seen[number] = true\n        end\n    end\n    return unique\nend", "  \
    \  local lastNumber = 0\n    local encountered = {}\n    for i = 1, #numbers do\n\
    \        local num = numbers[i]\n        if num ~= lastNumber and not encountered[num]\
    \ then\n            encountered[num] = true\n        else\n            table.remove(numbers,\
    \ i)\n            i = i - 1\n        end\n        lastNumber = num\n    end\n\
    \    return numbers\nend", "    local seen = {}\n    local results = {}\n    for\
    \ _, x in ipairs(numbers) do\n        if not seen[x] then\n            table.insert(results,\
    \ x)\n            seen[x] = true\n        end\n    end\n    return results\nend",
  "  local uniques = {}\n  local occurrences = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if occurrences[number] == nil then\n      occurrences[number] = 1\n\
    \      uniques[#uniques + 1] = number\n    else\n      occurrences[number] = occurrences[number]\
    \ + 1\n    end\n  end\n  local result = {}\n  for _, number in ipairs(uniques)\
    \ do\n    if occurrences[number] == 1 then\n      result[#result + 1] = number\n\
    \    end\n  end\n  return result\nend", "    local result = {}\n    local known\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not known[number]\
    \ then\n            table.insert(result, number)\n            known[number] =\
    \ true\n        end\n    end\n    return result\nend", "\tlocal seen = {}\n\t\
    local result = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not seen[number]\
    \ then\n\t\t\tresult[#result + 1] = number\n\t\t\tseen[number] = true\n\t\tend\n\
    \tend\n\treturn result\nend", "    local unique = {}\n    for _, v in ipairs(numbers)\
    \ do\n        unique[v] = true\n    end\n    local unique_list = {}\n    for _,\
    \ v in ipairs(numbers) do\n        if unique[v] then\n            table.insert(unique_list,\
    \ v)\n            unique[v] = nil\n        end\n    end\n    return unique_list\n\
    end", "\tlocal i = 1\n\twhile i <= #numbers do\n\t\tif count_elements(numbers,\
    \ numbers[i]) > 1 then\n\t\t\tremove_element(numbers, numbers[i])\n\t\telse\n\t\
    \t\ti = i + 1\n\t\tend\n\tend\n\treturn numbers\nend", "    local uniques = {}\n\
    \    local result = {}\n    for i = 1, #numbers do\n        local num = numbers[i]\n\
    \        if not uniques[num] then\n            uniques[num] = true\n         \
    \   result[#result + 1] = num\n        end\n    end\n    return result\nend",
  "    local new = {}\n    local table = {}\n    for k, v in ipairs(numbers) do\n\
    \        if not table[v] then\n            table[v] = true\n            new[#new\
    \ + 1] = v\n        end\n    end\n    return new\nend", "    local out = {}\n\
    \    local count = {}\n    for _, v in ipairs(numbers) do\n        if count[v]\
    \ then\n            count[v] = count[v] + 1\n        else\n            count[v]\
    \ = 1\n        end\n    end\n    for _, v in ipairs(numbers) do\n        if count[v]\
    \ == 1 then\n            table.insert(out, v)\n        end\n    end\n    return\
    \ out\nend", "    local seen = {}\n    for index, number in ipairs(numbers) do\n\
    \        if seen[number] then\n            table.remove(numbers, index)\n    \
    \    else\n            seen[number] = true\n        end\n    end\n    return numbers\n\
    end", "  local unique = {}\n  for _, v in ipairs(numbers) do\n    unique[v] =\
    \ true\n  end\n  local result = {}\n  for _, v in ipairs(numbers) do\n    if unique[v]\
    \ then\n      table.insert(result, v)\n      unique[v] = nil\n    end\n  end\n\
    \  return result\nend", "\tlocal seen = {}\n\tlocal unique = {}\n\tfor _, number\
    \ in ipairs(numbers) do\n\t\tif not seen[number] then\n\t\t\ttable.insert(unique,\
    \ number)\n\t\t\tseen[number] = true\n\t\tend\n\tend\n\treturn unique\nend", " \
    \ local seen = {}\n  for _, number in ipairs(numbers) do\n    if seen[number]\
    \ then\n      seen[number] = true\n    else\n      seen[number] = false\n    end\n\
    \  end\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if not\
    \ seen[number] then\n      table.insert(result, number)\n    end\n  end\n  return\
    \ result\nend", "\tlocal result = {}\n\tlocal found = {}\n\tfor i, num in ipairs(numbers)\
    \ do\n\t\tif not found[num] then\n\t\t\tresult[#result + 1] = num\n\t\t\tfound[num]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend", "  local result = {}\n  local\
    \ used = {}\n  for _, number in ipairs(numbers) do\n    if not used[number] then\n\
    \      table.insert(result, number)\n      used[number] = true\n    end\n  end\n\
    \  return result\nend", "  local unique = {}\n  for _, number in ipairs(numbers)\
    \ do\n    unique[number] = true\n  end\n  local result = {}\n  for i, number in\
    \ ipairs(numbers) do\n    if unique[number] then\n      result[#result + 1] =\
    \ number\n      unique[number] = false\n    end\n  end\n  return result\nend",
  "  local found = {}\n  local unique = {}\n  for i = 1, #numbers do\n    local value\
    \ = numbers[i]\n    if not found[value] then\n      unique[#unique + 1] = value\n\
    \      found[value] = true\n    end\n  end\n  return unique\nend", "    local\
    \ result = {}\n    local hash = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not hash[number] then\n            hash[number] = true\n         \
    \   table.insert(result, number)\n        end\n    end\n    return result\nend",
  "\tlocal seen = {}\n\tlocal result = {}\n\tfor _, num in ipairs(numbers) do\n\t\t\
    if not seen[num] then\n\t\t\ttable.insert(result, num)\n\t\t\tseen[num] = true\n\
    \t\tend\n\tend\n\treturn result\nend", "  local result = {}\n  local already_seen\
    \ = {}\n  for i, x in ipairs(numbers) do\n    if not already_seen[x] then\n  \
    \    result[#result + 1] = x\n      already_seen[x] = true\n    end\n  end\n \
    \ return result\nend", "  local set = {}\n  local result = {}\n  for _, v in ipairs(numbers)\
    \ do\n    if not set[v] then\n      set[v] = true\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, n in ipairs(numbers) do\n    if not seen[n] then\n      table.insert(result,\
    \ n)\n      seen[n] = true\n    end\n  end\n  return result\nend", "    local\
    \ seen = {}\n    local result = {}\n    for _, num in ipairs(numbers) do\n   \
    \     if not seen[num] then\n            table.insert(result, num)\n         \
    \   seen[num] = true\n        end\n    end\n    return result\nend", "    local\
    \ output = {}\n    local already_found = {}\n    for i = 1, #numbers do\n    \
    \    local element = numbers[i]\n        if not already_found[element] then\n\
    \            output[#output + 1] = element\n            already_found[element]\
    \ = true\n        end\n    end\n    return output\nend", "    local set = {}\n\
    \    local result = {}\n    for i = 1, #numbers do\n        local number = numbers[i]\n\
    \        if not set[number] then\n            set[number] = true\n           \
    \ result[#result + 1] = number\n        end\n    end\n    return result\nend",
  "  local unique = {}\n  for _, number in ipairs(numbers) do\n    unique[number]\
    \ = (unique[number] or 0) + 1\n  end\n  local result = {}\n  for _, number in\
    \ ipairs(numbers) do\n    if unique[number] == 1 then\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend", "  local res = {}\n  local hash\
    \ = {}\n  for i, v in ipairs(numbers) do\n    if not hash[v] then\n      res[#res\
    \ + 1] = v\n      hash[v] = true\n    end\n  end\n  return res\nend", "    local\
    \ seen = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n     \
    \   if not seen[n] then\n            table.insert(result, n)\n            seen[n]\
    \ = true\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    local known = {}\n    for _, v in ipairs(numbers) do\n        if not known[v]\
    \ then\n            table.insert(result, v)\n            known[v] = true\n   \
    \     end\n    end\n    return result\nend", "  local has_seen = {}\n  local unique_numbers\
    \ = {}\n  for _, v in ipairs(numbers) do\n    if not has_seen[v] then\n      has_seen[v]\
    \ = true\n      table.insert(unique_numbers, v)\n    end\n  end\n  return unique_numbers\n\
    end", "    local result = {}\n    local met = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not met[number] then\n            table.insert(result, number)\n\
    \            met[number] = true\n        end\n    end\n    return result\nend",
  "  local new_tbl = {}\n  local exist = {}\n  for _, v in ipairs(numbers) do\n  \
    \  if not exist[v] then\n      new_tbl[#new_tbl + 1] = v\n      exist[v] = true\n\
    \    end\n  end\n  return new_tbl\nend", "    local helper = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not helper[number]\
    \ then\n            table.insert(result, number)\n            helper[number] =\
    \ true\n        end\n    end\n    return result\nend", "\tlocal no_duplicates\
    \ = {}\n\tlocal seen = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif not seen[n]\
    \ then\n\t\t\ttable.insert(no_duplicates, n)\n\t\t\tseen[n] = true\n\t\tend\n\t\
    end\n\treturn no_duplicates\nend", "\treturn set.from_list(numbers)\nend", "\t\
    local result = {}\n\tlocal seen = {}\n\tfor _,number in ipairs(numbers) do\n\t\
    \tif not seen[number] then\n\t\t\ttable.insert(result, number)\n\t\t\tseen[number]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        if not seen[n] then\n\
    \            seen[n] = true\n            table.insert(result, n)\n        end\n\
    \    end\n    return result\nend", "  local seen = {}\n  local result = {}\n \
    \ for _, n in ipairs(numbers) do\n    if not seen[n] then\n      seen[n] = true\n\
    \      table.insert(result, n)\n    end\n  end\n  return result\nend", "  -- <Your\
    \ code here>\nend", "\tlocal numbers_copy = {}\n\tlocal numbers_set = {}\n\tfor\
    \ _, n in ipairs(numbers) do\n\t\tif not numbers_set[n] then\n\t\t\tnumbers_copy[#numbers_copy\
    \ + 1] = n\n\t\t\tnumbers_set[n] = true\n\t\tend\n\tend\n\treturn numbers_copy\n\
    end", "    local seen = {}\n    local result = {}\n    for _,v in ipairs(numbers)\
    \ do\n        if not seen[v] then\n            table.insert(result, v)\n     \
    \       seen[v] = true\n        end\n    end\n    return result\nend", "  local\
    \ result = {}\n  local count = {}\n  for _, number in ipairs(numbers) do\n   \
    \ if not count[number] then\n      result[#result + 1] = number\n      count[number]\
    \ = 1\n    else\n      count[number] = count[number] + 1\n    end\n  end\n  return\
    \ result\nend", "    local aux_table = {}\n    local result = {}\n    for _, number\
    \ in ipairs(numbers) do\n        if not aux_table[number] then\n            aux_table[number]\
    \ = true\n            table.insert(result, number)\n        end\n    end\n   \
    \ return result\nend", "\tlocal set = {}\n\tlocal result = {}\n\tfor _,v in ipairs(numbers)\
    \ do\n\t\tif not set[v] then\n\t\t\tset[v] = true\n\t\t\ttable.insert(result,\
    \ v)\n\t\tend\n\tend\n\treturn result\nend", "    local dict = {}\n    local result\
    \ = {}\n    for i = 1, #numbers do\n        local number = numbers[i]\n      \
    \  if dict[number] == nil then\n            dict[number] = number\n          \
    \  result[#result + 1] = number\n        end\n    end\n    return result\nend",
  "\tlocal no_duplicates = {}\n\tfor i = 1, #numbers do\n\t\tlocal number = numbers[i]\n\
    \t\tif not no_duplicates[number] then\n\t\t\tno_duplicates[number] = true\n\t\t\
    \tno_duplicates[#no_duplicates + 1] = number\n\t\tend\n\tend\n\treturn no_duplicates\n\
    end", "    local seen = {}\n    local unique = {}\n    for _,number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(unique, number)\n\
    \            seen[number] = true\n        end\n    end\n    return unique\nend",
  "    local result = {}\n    local hash = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not hash[number] then\n            table.insert(result, number)\n\
    \            hash[number] = true\n        end\n    end\n    return result\nend",
  "\tassert_table(numbers)\n\tlocal t = {}\n\tlocal ordered = {}\n\tfor _, v in ipairs(numbers)\
    \ do\n\t\tif not t[v] then\n\t\t\ttable.insert(ordered, v)\n\t\t\tt[v] = true\n\
    \t\tend\n\tend\n\treturn ordered\nend", "    local res = {}\n    local seen =\
    \ {}\n    for _, i in ipairs(numbers) do\n        if not seen[i] then\n      \
    \      res[#res + 1] = i\n            seen[i] = true\n        end\n    end\n \
    \   return res\nend", "    local map = {}\n    local result = {}\n    for i, number\
    \ in ipairs(numbers) do\n        if not map[number] then\n            map[number]\
    \ = true\n            result[#result + 1] = number\n        end\n    end\n   \
    \ return result\nend", "  local set = {}\n  local result = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if not set[n] then\n      set[n] = true\n      table.insert(result,\
    \ n)\n    end\n  end\n  return result\nend", "    local unique = {}\n    for _,n\
    \ in ipairs(numbers) do\n        unique[n] = true\n    end\n    local result =\
    \ {}\n    for i,n in ipairs(numbers) do\n        if unique[n] then\n         \
    \   unique[n] = nil\n            result[#result+1] = n\n        end\n    end\n\
    \    return result\nend", "\tlocal s = Set.new(numbers)\n\treturn s:to_sequence()\n\
    end", "    local deduped = {}\n    local hashed = {}\n    for _,number in ipairs(numbers)\
    \ do\n        if not hashed[number] then\n            table.insert(deduped, number)\n\
    \            hashed[number] = true\n        end\n    end\n    return deduped\n\
    end", "    local unique = {}\n    for _,v in ipairs(numbers) do\n        unique[v]\
    \ = true\n    end\n    return table_keys(unique)\nend", "    local values = {}\n\
    \    local copy = {}\n    for _, v in ipairs(numbers) do\n        if not values[v]\
    \ then\n            values[v] = true\n            table.insert(copy, v)\n    \
    \    end\n    end\n    return copy\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, value in ipairs(numbers) do\n        if not seen[value] then\n\
    \            table.insert(result, value)\n            seen[value] = true\n   \
    \     end\n    end\n    return result\nend", "    local uniques = {}\n    local\
    \ has_duplicates = {}\n    for _,n in ipairs(numbers) do\n        if not uniques[n]\
    \ then\n            uniques[n] = true\n        else\n            has_duplicates[n]\
    \ = true\n        end\n    end\n    local result = {}\n    for _,n in ipairs(numbers)\
    \ do\n        if not has_duplicates[n] then\n            table.insert(result,\
    \ n)\n        end\n    end\n    return result\nend", "    local unique = {}\n\
    \    for _,num in ipairs(numbers) do\n        unique[num] = true\n    end\n  \
    \  local result = {}\n    for num,_ in pairs(unique) do\n        table.insert(result,\
    \ num)\n    end\n    return result\nend", "  local out = {}\n  local seen = {}\n\
    \  for i,n in ipairs(numbers) do\n    if not seen[n] then\n      out[#out+1] =\
    \ n\n      seen[n] = true\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "  local s = Set()\n  local t = {}\n  for _, n\
    \ in ipairs(numbers) do\n    if not s[n] then\n      s[n] = true\n      t[#t+1]\
    \ = n\n    end\n  end\n  return t\nend", "    local unique = {}\n    for _, number\
    \ in ipairs(numbers) do\n        unique[number] = true\n    end\n    local result\
    \ = {}\n    for number, _ in pairs(unique) do\n        table.insert(result, number)\n\
    \    end\n    return result\nend", "  local result = {}\n  local table_of_occurences\
    \ = {}\n  for i = 1, #numbers do\n    local number = numbers[i]\n    if not table_of_occurences[number]\
    \ then\n      table_of_occurences[number] = true\n      result[#result + 1] =\
    \ number\n    end\n  end\n  return result\nend", "  local temp_set = {}\n  local\
    \ result = {}\n  for _, n in ipairs(numbers) do\n    if not temp_set[n] then\n\
    \      table.insert(result, n)\n      temp_set[n] = true\n    end\n  end\n  return\
    \ result\nend", "  local seen = {}\n  local output = {}\n  for n in all(numbers)\
    \ do\n    if not seen[n] then\n      append(output, n)\n      seen[n] = true\n\
    \    end\n  end\n  return output\nend", "    local buf = {}\n    local ret = {}\n\
    \    for _,v in ipairs(numbers) do\n        if not buf[v] then\n            ret[#ret+1]\
    \ = v\n            buf[v] = true\n        end\n    end\n    return ret\nend",
  "  local seen = {}\n  local output = {}\n  for k, v in ipairs(numbers) do\n    if\
    \ not seen[v] then\n      table.insert(output, v)\n      seen[v] = true\n    end\n\
    \  end\n  return output\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
