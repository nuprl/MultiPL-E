name: HumanEval_26_remove_duplicates
language: lua
prompt: "-- From a table of integers, remove all elements that occur more than once.\n\
  -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates({1,\
  \ 2, 3, 2, 4})\n-- {1, 3, 4}\nlocal function remove_duplicates(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1,\
  \ 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local t = {}\n  for _, v in ipairs(numbers) do\n    if not t[v] then\n\
    \      t[v] = true\n      coroutine.yield(v)\n    end\n  end\nend", "    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n     \
    \   if not seen[v] then\n            seen[v] = true\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local found = {}\n \
    \   local result = {}\n    for _,n in ipairs(numbers) do\n        if not found[n]\
    \ then\n            table.insert(result, n)\n            found[n] = true\n   \
    \     end\n    end\n    return result\nend", "    local seen = {}\n    local results\
    \ = {}\n    for _, n in ipairs(numbers) do\n        if not seen[n] then\n    \
    \        table.insert(results, n)\n            seen[n] = true\n        end\n \
    \   end\n    return results\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           seen[number] = true\n            table.insert(result, number)\n  \
    \      end\n    end\n    return result\nend", "  local dupes = {}\n  local result\
    \ = {}\n  for _, x in ipairs(numbers) do\n    if dupes[x] then\n      dupes[x]\
    \ = true\n    else\n      table.insert(result, x)\n      dupes[x] = false\n  \
    \  end\n  end\n  return result\nend", "    local seen = {}\n    local function\
    \ helper(i)\n        local n = numbers[i]\n        if seen[n] then\n         \
    \   return\n        end\n        seen[n] = true\n        return i\n    end\n \
    \   return map(helper, 1, #numbers)\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      seen[number] = true\n      table.insert(result, number)\n    end\n  end\n\
    \  return result\nend", "    local unique = {}\n    for _, v in ipairs(numbers)\
    \ do\n        unique[v] = (unique[v] or 0) + 1\n    end\n    local ordered = {}\n\
    \    for _, v in ipairs(numbers) do\n        if unique[v] == 1 then\n        \
    \    table.insert(ordered, v)\n        end\n    end\n    return ordered\nend",
  "    local seen = {}\n    for i = 1, #numbers do\n        local current = numbers[i]\n\
    \        if seen[current] then\n            table.remove(numbers, i)\n       \
    \     i = i - 1\n        else\n            seen[current] = true\n        end\n\
    \    end\n    return numbers\nend", "    local seen = {}\n    local result = {}\n\
    \    for _,v in ipairs(numbers) do\n        if not seen[v] then\n            seen[v]\
    \ = true\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    local set = {}\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not set[n] then\n            set[n] = true\n            table.insert(result,\
    \ n)\n        end\n    end\n    return result\nend", "  local seen = {}\n  local\
    \ result = {}\n  for _,v in ipairs(numbers) do\n    if not seen[v] then\n    \
    \  table.insert(result, v)\n      seen[v] = true\n    end\n  end\n  return result\n\
    end", "  local table_to_keep = {}\n  local table_to_remove = {}\n  for _, i in\
    \ ipairs(numbers) do\n    if table_to_keep[i] then\n      table_to_remove[i] =\
    \ true\n    else\n      table_to_keep[i] = true\n    end\n  end\n  local result\
    \ = {}\n  for _, i in ipairs(numbers) do\n    if not table_to_remove[i] then\n\
    \      table.insert(result, i)\n    end\n  end\n  return result\nend", "    local\
    \ seen = {}\n    local no_dupes = {}\n    for _, num in ipairs(numbers) do\n \
    \       if not seen[num] then\n            no_dupes[#no_dupes + 1] = num\n   \
    \         seen[num] = true\n        end\n    end\n    return no_dupes\nend", " \
    \ -- TODO: Implement\n  local duplicates = {}\n  local final = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if duplicates[number] == nil then\n      duplicates[number]\
    \ = number\n      table.insert(final, number)\n    end\n  end\n  return final\n\
    end", "  local result = {}\n  local ids = {}\n  for _, num in ipairs(numbers)\
    \ do\n    if not ids[num] then\n      table.insert(result, num)\n      ids[num]\
    \ = true\n    end\n  end\n  return result\nend", "    local res = {}\n    local\
    \ map = {}\n    for i = 1, #numbers do\n        local num = numbers[i]\n     \
    \   if not map[num] then\n            map[num] = true\n            res[#res +\
    \ 1] = num\n        end\n    end\n    return res\nend", "    local ret = {}\n\
    \    local counts = {}\n    for _, n in ipairs(numbers) do\n        if counts[n]\
    \ == nil then\n            ret[#ret + 1] = n\n            counts[n] = 1\n    \
    \    else\n            counts[n] = counts[n] + 1\n        end\n    end\n    return\
    \ ret\nend", "  local result = {}\n  local seen = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not seen[number] then\n      table.insert(result, number)\n     \
    \ seen[number] = true\n    end\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
