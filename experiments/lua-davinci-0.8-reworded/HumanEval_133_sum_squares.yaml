name: HumanEval_133_sum_squares
language: lua
prompt: "-- You are given a table of numbers.\n-- You need to return the sum of squared\
  \ numbers in the given table,\n-- round each element in the table to the upper int(Ceiling)\
  \ first.\n-- Examples:\n-- >>> lst({1.0, 2.0, 3.0})\n-- 14\n-- >>> lst({1.0, 4.0,\
  \ 9.0})\n-- 98\n-- >>> lst({1.0, 3.0, 5.0, 7.0})\n-- 84\n-- >>> lst({1.4, 4.2, 0.0})\n\
  -- 29\n-- >>> lst({-2.4, 1.0, 1.0})\n-- 6\nlocal function sum_squares(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n  \
  \  lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
  \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
  \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
  \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
  \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
  \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = 0\n  for _,v in ipairs(lst) do\n    result = result\
    \ + (math.ceil(v) * math.ceil(v))\n  end\n  return result\nend", "  local sum\
    \ = 0\n  for _, n in ipairs(lst) do\n    sum = sum + math.ceil(n) ^ 2\n  end\n\
    \  return sum\nend", "    local result = 0\n    for i = 1, #lst do\n        result\
    \ = result + math.ceil(lst[i]) ^ 2\n    end\n    return result\nend", "    return\
    \ table.reduce(table.map(lst, function(i) return math.ceil(i) * math.ceil(i) end),\
    \ function(acc, i) return acc + i end, 0)\nend", '  local result = 0', "    local\
    \ sum = 0\n    for _, value in ipairs(lst) do\n        sum = sum + (math.ceil(value)\
    \ ^ 2)\n    end\n    return sum\nend", "  local n = #lst\n  local result = 0\n\
    \  for i = 1, n do\n    local element = lst[i]\n    result = result + element\
    \ * element\n  end\n  return result\nend", "  local sum = 0\n  for i,v in ipairs(lst)\
    \ do\n    sum = sum + math.ceil(v)^2\n  end\n  return sum\nend", "    local sum\
    \ = 0\n    for i = 1, #lst do\n        sum = sum + (math.ceil(lst[i]) ^ 2)\n \
    \   end\n    return sum\nend", "  local sqr = function(x) return x * x end\n \
    \ local sum = function(x, y) return x + y end\n  local z = map(sqr, lst)\n  return\
    \ reduce(sum, z)\nend", "  local res = 0\n  for _, x in ipairs(lst) do\n    res\
    \ = res + x ^ 2\n  end\n  return res\nend", "    local sum = 0\n    for i = 1,\
    \ #lst do\n        sum = sum + math.ceil(lst[i]) ^ 2\n    end\n    return sum\n\
    end", "\tlocal sum = 0\n\tfor _, v in ipairs(lst) do\n\t\tsum = sum + math.ceil(v)\
    \ ^ 2\n\tend\n\treturn sum\nend", "\tlocal result = 0\n\tfor i = 1, #lst do\n\t\
    \tresult = result + math.ceil(lst[i])^2\n\tend\n\treturn result\nend", "  return\
    \ sum(map(ceil, lst)) ^ 2\nend", "    local nums = {}\n    for i = 1, #lst do\n\
    \        local num = math.ceil(lst[i])\n        table.insert(nums, num * num)\n\
    \    end\n    return sum(nums)\nend", "    return sum(map(lst, function(x)\n \
    \       return x ^ 2\n    end))\nend", "  local sum = 0\n  for _, x in ipairs(lst)\
    \ do\n    sum = sum + math.ceil(x)^2\n  end\n  return sum\nend", "  local sum\
    \ = 0\n  for i, n in ipairs(lst) do\n    sum = sum + math.ceil(n) ^ 2\n  end\n\
    \  return sum\nend", "    local sum = 0\n    for _, value in ipairs(lst) do\n\
    \        sum = sum + math.ceil(value) ^ 2\n    end\n    return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
