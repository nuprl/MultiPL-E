name: HumanEval_4_mean_absolute_deviation
language: lua
prompt: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
  -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute\
  \ difference between each\n-- element and a centerpoint (mean in this case):\n--\
  \ MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n\
  -- 1.0\nlocal function mean_absolute_deviation(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
  \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sum = 0.0\n    local mean = mean(numbers)\n    for i = 1,\
    \ #numbers do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return\
    \ sum / #numbers\nend", "  local mean = sum(numbers) / #numbers\n  local deviations\
    \ = {}\n  for _, value in ipairs(numbers) do\n    deviations[#deviations + 1]\
    \ = math.abs(value - mean)\n  end\n  return sum(deviations) / #deviations\nend",
  "    local n = #numbers\n    local n_sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        n_sum = n_sum + number\n    end\n    local n_mean = n_sum / n\n\
    \    local variance = 0\n    for _, number in ipairs(numbers) do\n        variance\
    \ = variance + math.abs(number - n_mean)\n    end\n    return variance / n\nend",
  "    if not numbers or #numbers == 0 then\n        return 0.0\n    end\n    local\
    \ sum = 0.0\n    local count = 0\n    for _, n in ipairs(numbers) do\n       \
    \ sum = sum + n\n        count = count + 1\n    end\n    local mean = sum / count\n\
    \    local mad = 0.0\n    for _, n in ipairs(numbers) do\n        mad = mad +\
    \ math.abs(n - mean)\n    end\n    return mad / count\nend", "    local mean =\
    \ math.average(numbers)\n    local result = 0.0\n    for _, n in ipairs(numbers)\
    \ do\n        result = result + math.abs(n - mean)\n    end\n    return result\
    \ / #numbers\nend", "  local mean = mean(numbers)\n  local abs_mean_deviations\
    \ = {}\n  for _,n in ipairs(numbers) do\n    abs_mean_deviations[#abs_mean_deviations+1]\
    \ = math.abs(n - mean)\n  end\n  return mean(abs_mean_deviations)\nend", "   \
    \ local abs = math.abs\n    local sum = 0\n    local n = #numbers\n    local mean\
    \ = sum_of_table(numbers) / n\n    for _, number in ipairs(numbers) do\n     \
    \   sum = sum + abs(number - mean)\n    end\n    return sum / n\nend", "  local\
    \ mean = mean(numbers)\n  local deviations = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(deviations, math.abs(number - mean))\n  end\n  return mean(deviations)\n\
    end", "\tlocal mean = mean(numbers)\n\tlocal sum = 0\n\tfor i, n in ipairs(numbers)\
    \ do\n\t\tsum = sum + math.abs(n - mean)\n\tend\n\treturn sum / #numbers\nend",
  "  local sum = 0\n  local mean = mean(numbers)\n  for _, n in ipairs(numbers) do\n\
    \    sum = sum + math.abs(n - mean)\n  end\n  return sum / #numbers\nend", " \
    \ return mean(absolute_values(differences(numbers, mean(numbers))))\nend", " \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end", "    local mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - mean)\n    end\n    return sum / (#numbers)\n\
    end", "  local number_count = #numbers\n  if number_count == 0 then\n    return\
    \ 0\n  end\n  local sum = 0\n  local mean = mean(numbers)\n  for i = 1, number_count\
    \ do\n    sum = sum + math.abs(numbers[i] - mean)\n  end\n  return sum / number_count\n\
    end", "    local s = setmetatable({}, set_mt)\n    for _, v in ipairs(numbers)\
    \ do\n        s:add(v)\n    end\n    return s:mean_absolute_deviation()\nend",
  "  local mean = mean(numbers)\n  local total = 0\n  for _, x in ipairs(numbers)\
    \ do\n    total = total + math.abs(x - mean)\n  end\n  return total / #numbers\n\
    end", "    local centerpoint = mean(numbers)\n    local diffs = map(function(n)\
    \ return math.abs(n - centerpoint) end, numbers)\n    return mean(diffs)\nend",
  "    local n = #numbers\n    local sum = 0.0\n    local mean = numbers_mean(numbers)\n\
    \    for i = 1, n do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n\
    \    return sum / n\nend", "  local sum = 0\n  local count = 0\n  for k, v in\
    \ pairs(numbers) do\n    sum = sum + v\n    count = count + 1\n  end\n  local\
    \ mean = sum / count\n  sum = 0\n  for k, v in pairs(numbers) do\n    sum = sum\
    \ + math.abs(v - mean)\n  end\n  return sum / count\nend", "\tlocal sum = 0\n\t\
    local n = 0\n\tlocal mean = mean(numbers)\n\tfor i = 1, #numbers do\n\t\tsum =\
    \ sum + math.abs(numbers[i] - mean)\n\t\tn = n + 1\n\tend\n\treturn sum / n\n\
    end", "    local count = table.getn(numbers)\n    if count == 0 then\n       \
    \ return math.nan\n    end\n    local sum = 0\n    for i = 1, count do\n     \
    \   sum = sum + numbers[i]\n    end\n    local mean = sum / count\n    sum = 0\n\
    \    for i = 1, count do\n        sum = sum + math.abs(numbers[i] - mean)\n  \
    \  end\n    return sum / count\nend", "    local mean = mean(numbers)\n    local\
    \ abs_diff_sum = 0\n    for _, number in ipairs(numbers) do\n        abs_diff_sum\
    \ = abs_diff_sum + math.abs(number - mean)\n    end\n    return abs_diff_sum /\
    \ #numbers\nend", "    local sum = 0\n    local count = 0\n    for _, v in pairs(numbers)\
    \ do\n        sum = sum + v\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_deviation = 0\n    for _, v in pairs(numbers) do\n\
    \        sum_deviation = sum_deviation + math.abs(v - mean)\n    end\n    return\
    \ sum_deviation / count\nend", "  local mean = mean(numbers)\n  local sum = 0\n\
    \  for i, x in ipairs(numbers) do\n    sum = sum + math.abs(x - mean)\n  end\n\
    \  return sum / #numbers\nend", "    local mean = mean(numbers)\n    local deviations\
    \ = {}\n    for k, v in pairs(numbers) do\n        deviations[k] = math.abs(v\
    \ - mean)\n    end\n    return mean(deviations)\nend", "  local mean = mean(numbers)\n\
    \  local total = 0\n  for _, n in ipairs(numbers) do\n    total = total + math.abs(n\
    \ - mean)\n  end\n  return total / #numbers\nend", "    assert(numbers, \"No input\
    \ numbers\")\n    assert(#numbers > 0, \"Input is empty\")\n    local sum = 0\n\
    \    local count = 0\n    for _, v in ipairs(numbers) do\n        sum = sum +\
    \ v\n        count = count + 1\n    end\n    local mean = sum / count\n    local\
    \ m_absolute_deviation = 0\n    for _, v in ipairs(numbers) do\n        m_absolute_deviation\
    \ = m_absolute_deviation + math.abs(v - mean)\n    end\n    return m_absolute_deviation\
    \ / count\nend", "  local centerpoint = mean(numbers)\n  local sum = 0\n  for\
    \ _, number in ipairs(numbers) do\n    sum = sum + math.abs(number - centerpoint)\n\
    \  end\n  return sum / #numbers\nend", "    local _mean = mean(numbers)\n    local\
    \ sum = 0.0\n    for _, x in ipairs(numbers) do\n        sum = sum + math.abs(x\
    \ - _mean)\n    end\n    return sum / #numbers\nend", "  local mean = mean(numbers)\n\
    \  local dev = {}\n  for _,n in ipairs(numbers) do\n    table.insert(dev, math.abs(n\
    \ - mean))\n  end\n  return mean(dev)\nend", "  local sum = 0\n  local mean =\
    \ mean(numbers)\n  for i, number in ipairs(numbers) do\n    sum = sum + math.abs(number\
    \ - mean)\n  end\n  return sum / (#numbers)\nend", "  local mean = sum(numbers)\
    \ / #numbers\n  local summation = 0.0\n  for i = 1, #numbers do\n    summation\
    \ = summation + math.abs(numbers[i] - mean)\n  end\n  return summation / #numbers\n\
    end", "    local sum = 0\n    local mean = mean(numbers)\n    for i = 1, #numbers\
    \ do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return sum\
    \ / #numbers\nend", "    local n = #numbers\n    if n == 0 then\n        return\
    \ 0.0\n    end\n    local sum = 0.0\n    local mean = 0.0\n    for i = 1, n do\n\
    \        local val = numbers[i]\n        sum = sum + val\n    end\n    mean =\
    \ sum / n\n    local sum_diff = 0.0\n    for i = 1, n do\n        local val =\
    \ numbers[i]\n        local diff = val - mean\n        sum_diff = sum_diff + math.abs(diff)\n\
    \    end\n    return sum_diff / n\nend", "    local sum = 0\n    local count =\
    \ 0\n    for _, x in ipairs(numbers) do\n        sum = sum + x\n        count\
    \ = count + 1\n    end\n    local mean = sum / count\n    local abs_deviation_sum\
    \ = 0\n    for _, x in ipairs(numbers) do\n        abs_deviation_sum = abs_deviation_sum\
    \ + math.abs(x - mean)\n    end\n    return abs_deviation_sum / count\nend", " \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, value in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(value - mean)\n  end\n  return sum / #numbers\n\
    end", "  local mean = math.mean(numbers)\n  local absolute_deviations = {}\n \
    \ for _, value in ipairs(numbers) do\n    absolute_deviations[#absolute_deviations\
    \ + 1] = math.abs(value - mean)\n  end\n  return math.mean(absolute_deviations)\n\
    end", "  local mean = arithmetic_mean(numbers)\n  local deviation_sum = 0.0\n\
    \  for _, number in ipairs(numbers) do\n    deviation_sum = deviation_sum + math.abs(number\
    \ - mean)\n  end\n  return deviation_sum / #numbers\nend", "    local sum, mean\
    \ = 0, mean(numbers)\n    for i, v in ipairs(numbers) do\n        sum = sum +\
    \ math.abs(v - mean)\n    end\n    return sum / #numbers\nend", "  local mean\
    \ = sum(numbers) / #numbers\n  local deviations = {}\n  for _,v in ipairs(numbers)\
    \ do\n    table.insert(deviations, math.abs(v - mean))\n  end\n  return sum(deviations)\
    \ / #deviations\nend", "\tlocal sum = 0\n\tlocal centerpoint = mean(numbers)\n\
    \tlocal count = #numbers\n\tfor i = 1, count do\n\t\tsum = sum + math.abs(numbers[i]\
    \ - centerpoint)\n\tend\n\treturn sum / count\nend", "  local sum = 0\n  local\
    \ count = 0\n  for _, number in pairs(numbers) do\n    sum = sum + number\n  \
    \  count = count + 1\n  end\n  local mean = sum / count\n  local sum_abs_deviation\
    \ = 0\n  for _, number in pairs(numbers) do\n    sum_abs_deviation = sum_abs_deviation\
    \ + math.abs(number - mean)\n  end\n  return sum_abs_deviation / count\nend",
  "    local _mean = mean(numbers)\n    local sum = 0\n    for _, i in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(i - _mean)\n    end\n    return sum / #numbers\n\
    end", "  local mean = mean(numbers)\n  local result = 0.0\n  for i, v in ipairs(numbers)\
    \ do\n    result = result + math.abs(v - mean)\n  end\n  return result / #numbers\n\
    end", "    local numbers_mean = mean(numbers)\n    local sum = 0\n    for _, n\
    \ in ipairs(numbers) do\n        sum = sum + math.abs(n - numbers_mean)\n    end\n\
    \    return sum / #numbers\nend", "\tlocal sum, count = 0, 0\n\tfor i = 1, #numbers\
    \ do\n\t\tsum = sum + numbers[i]\n\t\tcount = count + 1\n\tend\n\tlocal mean =\
    \ sum / count\n\tlocal sum_of_squares = 0\n\tfor i = 1, #numbers do\n\t\tsum_of_squares\
    \ = sum_of_squares + math.abs(numbers[i] - mean)\n\tend\n\treturn sum_of_squares\
    \ / count\nend", "  local sum = 0\n  local count = 0\n  for _, x in pairs(numbers)\
    \ do\n    sum = sum + x\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x - mean)\n\
    \  end\n  return sum / count\nend", "  local sum = 0\n  local mean = mean(numbers)\n\
    \  for _, v in ipairs(numbers) do\n    sum = sum + math.abs(v - mean)\n  end\n\
    \  return sum / #numbers\nend", "  local mean = mean(numbers)\n  local deviation\
    \ = {}\n  for i = 1, #numbers do\n    deviation[i] = math.abs(numbers[i] - mean)\n\
    \  end\n  return mean(deviation)\nend", "  local mean = mean(numbers)\n  local\
    \ sum = 0\n  for _, num in ipairs(numbers) do\n    sum = sum + math.abs(num -\
    \ mean)\n  end\n  return sum / #numbers\nend", "    local n = 0.0\n    local sum\
    \ = 0.0\n    local mean = 0.0\n    local total = 0.0\n    local diff = 0.0\n \
    \   local diff_sum = 0.0\n    local abs_diff = 0.0\n    -- Get the mean\n    for\
    \ _,v in pairs(numbers) do\n        sum = sum + v\n        n = n + 1\n    end\n\
    \    mean = sum / n\n    -- Now calculate mean absolute deviation\n    for _,v\
    \ in pairs(numbers) do\n        diff = v - mean\n        abs_diff = math.abs(diff)\n\
    \        diff_sum = diff_sum + abs_diff\n    end\n    total = diff_sum / n\n \
    \   return total\nend", "    local mean = mean(numbers)\n    local N = #numbers\n\
    \    local sum = 0\n    for i = 1, N do\n        sum = sum + math.abs(numbers[i]\
    \ - mean)\n    end\n    return sum / N\nend", "    assert(#numbers > 0, \"No numbers\
    \ in given table\")\n    local sum = 0\n    local mean = 0\n    for _, number\
    \ in ipairs(numbers) do\n        mean = mean + number\n    end\n    mean = mean\
    \ / #numbers\n    for _, number in ipairs(numbers) do\n        sum = sum + math.abs(number\
    \ - mean)\n    end\n    return sum / #numbers\nend", "  local mean = sum(numbers)\
    \ / #numbers\n  local diffs = {}\n  for _,x in ipairs(numbers) do\n    table.insert(diffs,\
    \ math.abs(x - mean))\n  end\n  return sum(diffs) / #diffs\nend", "    local mean\
    \ = mean(numbers)\n    local sum = 0\n    for _, n in ipairs(numbers) do\n   \
    \     sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\nend",
  "    local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end", "  local mean = mean(numbers)\n  local sum = 0\n  for _, v in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend",
  "    local mad = 0.0\n    local mean = table.average(numbers)\n    for _,x in ipairs(numbers)\
    \ do\n        mad = mad + math.abs(x - mean)\n    end\n    return mad / #numbers\n\
    end", "    local mean = basic_stats.mean(numbers)\n    local abs_diff_sum = 0.0\n\
    \    for _,x in ipairs(numbers) do\n        abs_diff_sum = abs_diff_sum + math.abs(x\
    \ - mean)\n    end\n    return abs_diff_sum / #numbers\nend", "    local avg =\
    \ mean(numbers)\n    local mad = 0\n    for _,number in pairs(numbers) do\n  \
    \      mad = mad + math.abs(number - avg)\n    end\n    return mad / #numbers\n\
    end", "    local mean = avg(numbers)\n    local sum = 0\n    for _, number in\
    \ ipairs(numbers) do\n        sum = sum + math.abs(number - mean)\n    end\n \
    \   return sum / #numbers\nend", "  local x_bar = mean(numbers)\n  local n = #numbers\n\
    \  local sum = 0.0\n  for i = 1, n do\n    sum = sum + math.abs(numbers[i] - x_bar)\n\
    \  end\n  return sum / n\nend", "    local mean = math.mean(numbers)\n    local\
    \ dev_sum = 0\n    for _, v in ipairs(numbers) do\n        dev_sum = dev_sum +\
    \ math.abs(v - mean)\n    end\n    return dev_sum / #numbers\nend", "  local n\
    \ = 0\n  local sum = 0\n  local mean = 0\n  for k, v in pairs(numbers) do\n  \
    \  n = n + 1\n    sum = sum + v\n  end\n  mean = sum / n\n  local mad = 0\n  for\
    \ k, v in pairs(numbers) do\n    mad = mad + math.abs(v - mean)\n  end\n  return\
    \ mad / n\nend", "    assert(#numbers > 0, \"Array must not be empty\")\n    local\
    \ total = 0\n    local mean = mean(numbers)\n    for _, x in ipairs(numbers) do\n\
    \        total = total + math.abs(x - mean)\n    end\n    return total / #numbers\n\
    end", "  assert(type(numbers) == \"table\", \"must pass a table\")\n  local sum,\
    \ mean = 0.0, 0.0\n  for i,number in ipairs(numbers) do\n    sum = sum + number\n\
    \  end\n  mean = sum / #numbers\n  local mad = 0.0\n  for i,number in ipairs(numbers)\
    \ do\n    mad = mad + math.abs(number - mean)\n  end\n  return mad / #numbers\n\
    end", "  local sum, count = 0, 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  local mean = sum / count\n  local\
    \ sum_deviation = 0\n  for _, value in pairs(numbers) do\n    sum_deviation =\
    \ sum_deviation + math.abs(value - mean)\n  end\n  return sum_deviation / count\n\
    end", "    local mean = average(numbers)\n    local deviation = 0.0\n    for _,\
    \ number in ipairs(numbers) do\n        deviation = deviation + math.abs(number\
    \ - mean)\n    end\n    return deviation / #numbers\nend", "    local sum = 0\n\
    \    local count = 0\n    for _, number in ipairs(numbers) do\n        sum = sum\
    \ + number\n        count = count + 1\n    end\n    local mean = sum / count\n\
    \    local sum_of_abs_deviations = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum_of_abs_deviations = sum_of_abs_deviations +\n            math.abs(number\
    \ - mean)\n    end\n    return sum_of_abs_deviations / count\nend", "    local\
    \ total = 0\n    local count = 0\n    local mean = mean(numbers)\n    for _, n\
    \ in ipairs(numbers) do\n        total = total + math.abs(n - mean)\n        count\
    \ = count + 1\n    end\n    return total / count\nend", "\tlocal sum = 0.0\n\t\
    local count = 0\n\tfor _, v in pairs(numbers) do\n\t\tsum = sum + v\n\t\tcount\
    \ = count + 1\n\tend\n\tlocal mean = sum / count\n\tlocal mad = 0.0\n\tfor _,\
    \ v in pairs(numbers) do\n\t\tmad = mad + math.abs(v - mean)\n\tend\n\treturn\
    \ mad / count\nend", "    local sum = 0\n    local size = #numbers\n    local\
    \ mean = sum_table(numbers) / size\n    for _, x in ipairs(numbers) do\n     \
    \   sum = sum + math.abs(x - mean)\n    end\n    return sum / size\nend", "  \
    \  local sum = 0.0\n    local mean = mean(numbers)\n    for i,x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - mean)\n    end\n    return sum / #numbers\n\
    end", "  local mean = mean(numbers)\n  local deviation = {}\n  for _, v in ipairs(numbers)\
    \ do\n    table.insert(deviation, math.abs(v - mean))\n  end\n  return mean(deviation)\n\
    end", "    local mean = mean(numbers)\n    local sum = 0.0\n    for i = 1, #numbers\
    \ do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return sum\
    \ / #numbers\nend", "  return mean(absolute_value(difference(numbers, mean(numbers))))\n\
    end", "    return calculate_mean(\n        map(numbers, function(x) return math.abs(x\
    \ - calculate_mean(numbers)) end)\n    )\nend", "\tlocal mean = mean(numbers)\n\
    \tlocal count = 0\n\tlocal sum = 0\n\tfor _, number in ipairs(numbers) do\n\t\t\
    count = count + 1\n\t\tsum = sum + math.abs(number - mean)\n\tend\n\treturn sum\
    \ / count\nend", "    local mean = mean(numbers)\n    local sum = 0\n    for _,\
    \ num in ipairs(numbers) do\n        sum = sum + math.abs(num - mean)\n    end\n\
    \    return sum / #numbers\nend", "  local mean = average(numbers)\n  local total\
    \ = 0\n  for i = 1, #numbers do\n    total = total + math.abs(numbers[i] - mean)\n\
    \  end\n  return total / #numbers\nend", "    if not numbers or #numbers == 0\
    \ then\n        return nil\n    end\n    local sum = 0\n    local mean = mean(numbers)\n\
    \    for i, x in ipairs(numbers) do\n        sum = sum + math.abs(x - mean)\n\
    \    end\n    return sum / #numbers\nend", "    local mean = average(numbers)\n\
    \    local sum = 0\n    for _, v in ipairs(numbers) do\n        sum = sum + math.abs(v\
    \ - mean)\n    end\n    return sum / #numbers\nend", "    local mean = 0\n   \
    \ for _, v in ipairs(numbers) do\n        mean = mean + v\n    end\n    mean =\
    \ mean / #numbers", "\tlocal total = 0\n\tlocal count = 0\n\tlocal mean = mean(numbers)\n\
    \tfor _, x in ipairs(numbers) do\n\t\ttotal = total + math.abs(x - mean)\n\t\t\
    count = count + 1\n\tend\n\treturn total / count\nend", "  local n = #numbers\n\
    \  if n == 0 then\n    return 0\n  end\n  local sum = 0\n  local mean = mean(numbers)\n\
    \  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value - mean)\n\
    \  end\n  return sum / n\nend", "    assert(type(numbers) == \"table\", \"invalid\
    \ 'numbers' argument\")\n    assert(#numbers > 0, \"invalid 'numbers' argument:\
    \ no numbers\")\n    local mean = mean(numbers)\n    local sum = 0\n    for _,x\
    \ in ipairs(numbers) do\n        sum = sum + math.abs(x - mean)\n    end\n   \
    \ return sum / #numbers\nend", "  local sum = 0\n  local count = 0\n  for _, n\
    \ in ipairs(numbers) do\n    sum = sum + n\n    count = count + 1\n  end\n  local\
    \ mean = sum / count\n  local mad = 0\n  for _, n in ipairs(numbers) do\n    mad\
    \ = mad + math.abs(n - mean)\n  end\n  return mad / count\nend", "    local mean\
    \ = mean(numbers)\n    local sum = 0\n    for i, v in ipairs(numbers) do\n   \
    \     sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\nend",
  "    local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local abs_diff_sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        abs_diff_sum = abs_diff_sum + math.abs(number - mean)\n    end\n\
    \    return abs_diff_sum / count\nend", "  local num_count = #numbers\n  local\
    \ sum = 0.0\n  local sum_sq = 0.0\n  for _, n in ipairs(numbers) do\n    sum =\
    \ sum + n\n    sum_sq = sum_sq + n * n\n  end\n  local mean = sum / num_count\n\
    \  local variance = (sum_sq - sum * sum / num_count) / (num_count - 1)\n  local\
    \ stddev = math.sqrt(variance)\n  local sum_abs_dev = 0.0\n  for _, n in ipairs(numbers)\
    \ do\n    sum_abs_dev = sum_abs_dev + math.abs(n - mean)\n  end\n  return sum_abs_dev\
    \ / num_count, mean, stddev\nend", "    local mean = Mean:new(numbers)\n    return\
    \ mean:mean_absolute_deviation()\nend", "\treturn sum(map(function(x) return math.abs(x\
    \ - mean(numbers)) end, numbers)) / #numbers\nend", "  local mean = lib.mean(numbers)\n\
    \  local result = 0\n  for _, number in ipairs(numbers) do\n    result = result\
    \ + math.abs(number - mean)\n  end\n  return result / #numbers\nend", "    return\
    \ sum(map(abs, map(subtract, numbers, {mean(numbers)}))) / #numbers\nend", " \
    \ local mean = sum(numbers) / #numbers\n  local sum_deviations = 0\n  for _, number\
    \ in ipairs(numbers) do\n    sum_deviations = sum_deviations + math.abs(number\
    \ - mean)\n  end\n  return sum_deviations / #numbers\nend", "  local mean = mean(numbers)\n\
    \  local sum = 0\n  for _, num in ipairs(numbers) do\n    sum = sum + math.abs(num\
    \ - mean)\n  end\n  return sum / #numbers\nend", "  local sum = 0\n  local mean\
    \ = mean(numbers)\n  for _, number in ipairs(numbers) do\n    sum = sum + math.abs(number\
    \ - mean)\n  end\n  return sum / #numbers\nend", "    local sum, count = 0, 0\n\
    \    for _, x in ipairs(numbers) do\n        sum = sum + x\n        count = count\
    \ + 1\n    end\n    local mean = sum / count\n    local sum_of_squares = 0\n \
    \   for _, x in ipairs(numbers) do\n        sum_of_squares = sum_of_squares +\
    \ (x - mean)^2\n    end\n    return math.sqrt(sum_of_squares / count)\nend", " \
    \   local sum = 0.0\n    local mean = average(numbers)\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end", "  if #numbers == 0 then\n    return nil\n  end\n  local mean = average(numbers)\n\
    \  local sum = 0\n  for i, n in ipairs(numbers) do\n    sum = sum + math.abs(n\
    \ - mean)\n  end\n  return sum / #numbers\nend", "  local deviation_sum = 0.0\n\
    \  local mean = mean(numbers)\n  for _, number in ipairs(numbers) do\n    deviation_sum\
    \ = deviation_sum + math.abs(number - mean)\n  end\n  return deviation_sum / #numbers\n\
    end", "    local avg_abs_dev = 0\n    local avg = mean(numbers)\n    for i, v\
    \ in ipairs(numbers) do\n        avg_abs_dev = avg_abs_dev + math.abs(v - avg)\n\
    \    end\n    return avg_abs_dev / #numbers\nend", "    local N = #numbers\n \
    \   if N == 0 then\n        return 0.0\n    end\n    local x_mean = sum(numbers)\
    \ / N\n    local devs = map(numbers, function(x) return math.abs(x - x_mean) end)\n\
    \    return sum(devs) / N\nend", "  local count = 0\n  local sum = 0\n  local\
    \ mean = 0\n  local mad = 0\n  local diff = 0\n  local abs = math.abs", "    local\
    \ n = #numbers\n    if n == 0 then\n        return nil\n    end\n    local mean\
    \ = sum(numbers) / n\n    local sum_abs_diffs = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum_abs_diffs = sum_abs_diffs + math.abs(number - mean)\n    end\n\
    \    return sum_abs_diffs / n\nend", "  assert(numbers)\n  assert(type(numbers)\
    \ == \"table\")\n  assert(#numbers > 0)", "  local mean = average(numbers)\n \
    \ local total = 0\n  for _, number in ipairs(numbers) do\n    total = total +\
    \ math.abs(number - mean)\n  end\n  return total / #numbers\nend", "  local t_len\
    \ = #numbers\n  assert(t_len > 0, \"numbers table must have a non-zero length\"\
    )\n  local mean = simple_mean(numbers)\n  local abs_diffs = map(numbers, function(x)\
    \ return math.abs(x - mean) end)\n  return simple_mean(abs_diffs)\nend", "   \
    \ assert(type(numbers) == \"table\", \"numbers is a table\")\n    assert(#numbers\
    \ > 0, \"There must be at least one number\")\n    local total = 0\n    local\
    \ average = 0\n    for _,v in pairs(numbers) do\n        total = total + v\n \
    \   end\n    average = total / #numbers\n    local abs_differences = {}\n    for\
    \ _,v in pairs(numbers) do\n        table.insert(abs_differences, math.abs(v -\
    \ average))\n    end\n    return mean(abs_differences)\nend", "  local mean =\
    \ mean(numbers)\n  local total = 0.0\n  for _, number in ipairs(numbers) do\n\
    \    total = total + math.abs(number - mean)\n  end\n  return total / #numbers\n\
    end", "  local mean = mean(numbers)\n  local absolute_deviations = {}\n  for _,\
    \ num in ipairs(numbers) do\n    table.insert(absolute_deviations, math.abs(num\
    \ - mean))\n  end\n  return mean(absolute_deviations)\nend", "    local length\
    \ = #numbers\n    if length == 0 then\n        return 0\n    end\n    local sum\
    \ = 0\n    local mean = mean(numbers)\n    for _, n in ipairs(numbers) do\n  \
    \      sum = sum + math.abs(n - mean)\n    end\n    return sum / length\nend",
  "\tlocal mean = mean(numbers)\n\tlocal absolute_differences = {}\n\tfor _, number\
    \ in ipairs(numbers) do\n\t\ttable.insert(absolute_differences, math.abs(number\
    \ - mean))\n\tend\n\treturn mean(absolute_differences)\nend", "    local mean\
    \ = stats.mean(numbers)\n    local abs_diff_from_mean = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(abs_diff_from_mean, math.abs(n - mean))\n    end\n\
    \    return stats.mean(abs_diff_from_mean)\nend", "    local mean = common.mean(numbers)\n\
    \    local total = 0\n    for _, v in ipairs(numbers) do\n        total = total\
    \ + math.abs(v - mean)\n    end\n    return total / #numbers\nend", "    local\
    \ numbers_mean = mean(numbers)\n    local mean_deviations = {}\n    for i, v in\
    \ ipairs(numbers) do\n        mean_deviations[i] = math.abs(v - numbers_mean)\n\
    \    end\n    return mean(mean_deviations)\nend", "    local mean = mean(numbers)\n\
    \    local diffs = {}\n    for _, number in ipairs(numbers) do\n        table.insert(diffs,\
    \ math.abs(number - mean))\n    end\n    return mean(diffs)\nend", "    local\
    \ sum = 0\n    local len = 0\n    for _, num in pairs(numbers) do\n        sum\
    \ = sum + num\n        len = len + 1\n    end\n    local mean = sum / len\n  \
    \  local sum_absolute_difference = 0\n    for _, num in pairs(numbers) do\n  \
    \      sum_absolute_difference = sum_absolute_difference + math.abs(num - mean)\n\
    \    end\n    return sum_absolute_difference / len\nend", "  local mean = mean(numbers)\n\
    \  local differences = {}\n  for _, number in ipairs(numbers) do\n    table.insert(differences,\
    \ math.abs(number - mean))\n  end\n  return mean(differences)\nend", "    local\
    \ x_mean = mean(numbers)\n    local total = 0\n    for _, n in ipairs(numbers)\
    \ do\n        total = total + math.abs(n - x_mean)\n    end\n    return total\
    \ / #numbers\nend", "    assert(#numbers > 0, \"Can't get MAD for an empty table\"\
    )\n    local mean = mean(numbers)\n    local deviations = {}\n    for i, num in\
    \ ipairs(numbers) do\n        table.insert(deviations, math.abs(num - mean))\n\
    \    end\n    return mean(deviations)\nend", "    local numbers_sum = 0\n    local\
    \ count = 0\n    for _, number in pairs(numbers) do\n        numbers_sum = numbers_sum\
    \ + number\n        count = count + 1\n    end\n    local mean = numbers_sum /\
    \ count\n    local sum_abs_deviation = 0\n    for _, number in pairs(numbers)\
    \ do\n        sum_abs_deviation = sum_abs_deviation + math.abs(number - mean)\n\
    \    end\n    return sum_abs_deviation / count\nend", "  local sum = 0\n  local\
    \ count = 0\n  for _, number in pairs(numbers) do\n    sum = sum + number\n  \
    \  count = count + 1\n  end\n  local mean = sum / count\n  local abs_sum = 0\n\
    \  for _, number in pairs(numbers) do\n    abs_sum = abs_sum + math.abs(number\
    \ - mean)\n  end\n  return abs_sum / count\nend", "  local abs_values = {}\n \
    \ local mean = Mean(numbers)\n  for _, n in ipairs(numbers) do\n    abs_values[#abs_values\
    \ + 1] = math.abs(n - mean)\n  end\n  return Mean(abs_values)\nend", "  -- Calculate\
    \ the mean of the input dataset\n  local mean = mean(numbers)\n  -- Calculate\
    \ the absolute difference between each element and the mean\n  local differences\
    \ = {}\n  for _, number in ipairs(numbers) do\n    table.insert(differences, math.abs(number\
    \ - mean))\n  end\n  -- Calculate the average of the differences\n  return mean(differences)\n\
    end", "  local sum = 0\n  local mean = mean(numbers)\n  for _, num in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(num - mean)\n  end\n  return sum / #numbers\nend",
  "  local sum = 0\n  local mean = mean(numbers)\n  for _, val in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(val - mean)\n  end\n  return sum / #numbers\nend",
  "    local mean = average(numbers)\n    local sum = 0\n    for _,number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end", "    local mean = table.avg(numbers)\n    local abs_diff_squared = table.sum(table.map(function(v)\
    \ return math.abs(v - mean) end, numbers))\n    return abs_diff_squared / #numbers\n\
    end", "  local mean = average(numbers)\n  local sum = 0.0\n  for _, v in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend",
  "  local mean = mean(numbers)\n  local sum = 0\n  for i, v in ipairs(numbers) do\n\
    \    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend", " \
    \   local mean = mean(numbers)\n    local sum = 0\n    for i, n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end", "\tlocal mean = mean(numbers)\n\tlocal sum = 0.0\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\tsum = sum + math.abs(number - mean)\n\tend\n\treturn sum / #numbers\n\
    end", "  local mean = sum(numbers) / #numbers\n  local sum_of_diffs = 0\n  for\
    \ _, num in ipairs(numbers) do\n    sum_of_diffs = sum_of_diffs + math.abs(num\
    \ - mean)\n  end\n  return sum_of_diffs / #numbers\nend", "  local mean = mean(numbers)\n\
    \  local total = 0\n  for _, number in ipairs(numbers) do\n    total = total +\
    \ math.abs(number - mean)\n  end\n  return total / #numbers\nend", "  local mean\
    \ = mean(numbers)\n  local deviation = 0\n  for i, v in ipairs(numbers) do\n \
    \   deviation = deviation + math.abs(v - mean)\n  end\n  return deviation / #numbers\n\
    end", "  local result = 0\n  local mean = mean(numbers)\n  for _,n in ipairs(numbers)\
    \ do\n    result = result + math.abs(n - mean)\n  end\n  return result / #numbers\n\
    end", "    local mean = mean(numbers)\n    local total = 0\n    for i, n in ipairs(numbers)\
    \ do\n        total = total + math.abs(n - mean)\n    end\n    return total /\
    \ #numbers\nend", "    local count = #numbers\n    local sum, mean, variance =\
    \ 0.0, 0.0, 0.0\n    for i = 1, count do\n        sum = sum + numbers[i]\n   \
    \ end\n    mean = sum / count\n    -- variance = sigma(n)((x_i - x_mean)^2) /\
    \ n\n    for i = 1, count do\n        variance = variance + (numbers[i] - mean)^2\n\
    \    end\n    variance = variance / count\n    return math.sqrt(variance)\nend",
  "\treturn mean(numbers, math.abs)\nend", "    local num_total = 0\n    local num_mean\
    \ = 0\n    for _, num in ipairs(numbers) do\n        num_total = num_total + num\n\
    \    end\n    num_mean = num_total / #numbers\n    local sum_deviations = 0\n\
    \    for _, num in ipairs(numbers) do\n        sum_deviations = sum_deviations\
    \ + math.abs(num - num_mean)\n    end\n    return sum_deviations / #numbers\n\
    end", "    local sum = 0\n    local count = 0\n    for _, n in ipairs(numbers)\
    \ do\n        if n == n then -- exclude NaN\n            sum = sum + n\n     \
    \       count = count + 1\n        end\n    end\n    if count == 0 then\n    \
    \    error(\"mean_absolute_deviation: no valid data in table\")\n    end\n   \
    \ local mean = sum / count\n    local diff_abs_sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        if n == n then -- exclude NaN\n            diff_abs_sum = diff_abs_sum\
    \ + math.abs(n - mean)\n        end\n    end\n    return diff_abs_sum / count\n\
    end", "    if #numbers == 0 then\n        return 0\n    end\n    local sum = 0\n\
    \    local num_of_numbers = #numbers\n    local mean = mean(numbers)\n    for\
    \ i = 1, num_of_numbers do\n        sum = sum + math.abs(numbers[i] - mean)\n\
    \    end\n    return sum / num_of_numbers\nend", "    local sum = 0.0\n    local\
    \ mean = mean(numbers)\n    for i = 1, #numbers do\n        sum = sum + math.abs(numbers[i]\
    \ - mean)\n    end\n    return sum / #numbers\nend", "    local mean = mean(numbers)\n\
    \    local sum = 0\n    for _, value in ipairs(numbers) do\n        sum = sum\
    \ + math.abs(value - mean)\n    end\n    return sum / #numbers\nend", "    local\
    \ m = mean(numbers)\n    local total = 0\n    for _, n in ipairs(numbers) do\n\
    \        total = total + math.abs(n - m)\n    end\n    return total / #numbers\n\
    end", "    local mean = mean(numbers)\n    local absolute_deviations = {}\n  \
    \  for _, x in ipairs(numbers) do\n        absolute_deviations[#absolute_deviations\
    \ + 1] = math.abs(x - mean)\n    end\n    return mean(absolute_deviations)\nend",
  "    local n = #numbers\n    local sum = 0.0\n    local mean = 0.0\n    local abs_diffs\
    \ = { }\n    for i, x in ipairs(numbers) do\n        sum = sum + x\n    end\n\
    \    mean = sum / n\n    for i, x in ipairs(numbers) do\n        abs_diffs[i]\
    \ = math.abs(x - mean)\n    end\n    return mean_deviation(abs_diffs)\nend", " \
    \ assert(numbers, \"No input\")\n  assert(#numbers > 0, \"Need at least one number\"\
    )\n  local x_mean = mean(numbers)\n  local mad = 0\n  for _, num in ipairs(numbers)\
    \ do\n    mad = mad + math.abs(num - x_mean)\n  end\n  return mad / #numbers\n\
    end", "    local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + number\n        count = count + 1\n    end\n    local\
    \ mean = sum / count\n    local deviation_sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        deviation_sum = deviation_sum + math.abs(number - mean)\n    end\n\
    \    return deviation_sum / count\nend", "    local mean = mean(numbers)\n   \
    \ local result = 0.0\n    for _, value in ipairs(numbers) do\n        result =\
    \ result + math.abs(value - mean)\n    end\n    return result / #numbers\nend",
  "  local mean = mean(numbers)\n  local sum = 0\n  for _, x in ipairs(numbers) do\n\
    \    sum = sum + math.abs(x - mean)\n  end\n  return sum / #numbers\nend", " \
    \ local mean = mean(numbers)\n  local deviations = {}\n  for i = 1, #numbers do\n\
    \    deviations[i] = math.abs(numbers[i] - mean)\n  end\n  return mean(deviations)\n\
    end", "    assert(#numbers > 0, \"mean_absolute_deviation: Empty array given\"\
    )\n    local x_mean = mean(numbers)\n    local sum = 0\n    for i, x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - x_mean)\n    end\n    return sum / #numbers\n\
    end", "  local total = 0.0\n  local count = 0\n  local mean = average(numbers)\n\
    \  for i = 1, #numbers do\n    total = total + math.abs(numbers[i] - mean)\n \
    \   count = count + 1\n  end\n  return total / count\nend", "    if #numbers <\
    \ 2 then\n        return nil\n    end\n    local mean = mean(numbers)\n    local\
    \ abs_diffs = {}\n    for _, number in ipairs(numbers) do\n        table.insert(abs_diffs,\
    \ math.abs(number - mean))\n    end\n    return mean(abs_diffs)\nend", "    local\
    \ n = #numbers\n    if n < 2 then\n        return nil\n    end\n    local sum\
    \ = 0\n    local mean = mean(numbers)\n    for _, value in ipairs(numbers) do\n\
    \        sum = sum + math.abs(value - mean)\n    end\n    return sum / n\nend",
  "  assert(#numbers > 0, \"Can't calculate MAD with no numbers.\")\n  local total\
    \ = 0\n  local mean = 0\n  for _, n in ipairs(numbers) do\n    total = total +\
    \ n\n  end\n  mean = total / #numbers\n  total = 0\n  for _, n in ipairs(numbers)\
    \ do\n    total = total + math.abs(n - mean)\n  end\n  return total / #numbers\n\
    end", "    local sum = 0\n    local mean = mean(numbers)\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - mean)\n    end\n    return sum / #numbers\n\
    end", "  local mean = compute_mean(numbers)\n  local sum = 0\n  for _, x in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(x - mean)\n  end\n  return sum / #numbers\nend",
  "  local total = 0\n  local count = 0\n  local average = mean(numbers)\n  for _,\
    \ v in pairs(numbers) do\n    total = total + math.abs(v - average)\n    count\
    \ = count + 1\n  end\n  return total / count\nend", "  local result = 0.0\n  for\
    \ _, x in ipairs(numbers) do\n    result = result + math.abs(x - mean(numbers))\n\
    \  end\n  return result / #numbers\nend", "    local x_mean = mean(numbers)\n\
    \    local count = #numbers\n    local mad = 0.0\n    for _, x in ipairs(numbers)\
    \ do\n        mad = mad + math.abs(x - x_mean)\n    end\n    return mad / count\n\
    end", "  assert(numbers, \"No numbers given\")\n  local total = 0\n  local count\
    \ = 0\n  for _, x in ipairs(numbers) do\n    total = total + x\n    count = count\
    \ + 1\n  end\n  local mean = total / count\n  local mad = 0\n  for _, x in ipairs(numbers)\
    \ do\n    mad = mad + math.abs(x - mean)\n  end\n  return mad / count\nend", " \
    \   local total = 0\n    local mean = mean(numbers)\n    for i = 1, #numbers do\n\
    \        total = total + math.abs(numbers[i] - mean)\n    end\n    return total\
    \ / #numbers\nend", "  local sum = 0\n  local mean = mean(numbers)\n  for _, number\
    \ in ipairs(numbers) do\n    sum = sum + math.abs(number - mean)\n  end\n  return\
    \ sum / #numbers\nend", "\tlocal sum = 0\n\tlocal mean = mean(numbers)\n\tfor\
    \ i = 1, #numbers do\n\t\tsum = sum + math.abs(numbers[i] - mean)\n\tend\n\treturn\
    \ sum / #numbers\nend", "    local mean = average(numbers)\n    local abs_devs\
    \ = {}\n    for _, n in ipairs(numbers) do\n        table.insert(abs_devs, math.abs(n\
    \ - mean))\n    end\n    return average(abs_devs)\nend", "    local dataset_mean\
    \ = mean(numbers)\n    local mean_absolute_deviations = {}\n    for _, x in ipairs(numbers)\
    \ do\n        local mean_absolute_deviation = math.abs(x - dataset_mean)\n   \
    \     table.insert(mean_absolute_deviations, mean_absolute_deviation)\n    end\n\
    \    return mean(mean_absolute_deviations)\nend", "  local mean = mean(numbers)\n\
    \  local deviations = {}\n  for i, v in ipairs(numbers) do\n    table.insert(deviations,\
    \ math.abs(v - mean))\n  end\n  return mean(deviations)\nend", "    local count\
    \ = #numbers\n    local mean = average(numbers)\n    local sum = 0.0\n    for\
    \ i = 1, count do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n\
    \    return sum / count\nend", "  local n = #numbers\n  if n < 2 then\n    return\
    \ 0\n  end\n  local mean = central_moment(numbers, 1, 0)\n  local sum = 0\n  for\
    \ i, v in ipairs(numbers) do\n    sum = sum + math.abs(v - mean)\n  end\n  return\
    \ sum / n\nend", "  local mean = sum(numbers) / #numbers\n  local absolute_deviations\
    \ = {}\n  for _, n in ipairs(numbers) do\n    absolute_deviations[#absolute_deviations\
    \ + 1] = math.abs(n - mean)\n  end\n  return sum(absolute_deviations) / #absolute_deviations\n\
    end", "    local mean = mean(numbers)\n    local sum = 0\n    for i, num in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(num - mean)\n    end\n    return sum / #numbers\n\
    end", "    local sum = 0\n    local mean = mean(numbers)\n    for _, number in\
    \ ipairs(numbers) do\n        sum = sum + math.abs(number - mean)\n    end\n \
    \   return sum / #numbers\nend", "  local mean = sum(numbers) / #numbers\n  local\
    \ deviations = {}\n  for _, v in ipairs(numbers) do\n    table.insert(deviations,\
    \ math.abs(v - mean))\n  end\n  return sum(deviations) / #deviations\nend", " \
    \   local mean = average(numbers)\n    local dev_total = 0.0\n    for _, number\
    \ in ipairs(numbers) do\n        dev_total = dev_total + math.abs(number - mean)\n\
    \    end\n    return dev_total / #numbers\nend", "  local mean = mean(numbers)\n\
    \  local sum = 0.0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - mean)\n  end\n  return sum / #numbers\nend", "  local x_mean = mean(numbers)\n\
    \  local abs_diffs = {}\n  for _, x in ipairs(numbers) do\n    table.insert(abs_diffs,\
    \ math.abs(x - x_mean))\n  end\n  return mean(abs_diffs)\nend", "    local mean\
    \ = mean(numbers)\n    local sum = 0.0\n    for _, x in ipairs(numbers) do\n \
    \       sum = sum + math.abs(x - mean)\n    end\n    return sum / #numbers\nend",
  "  local result = 0\n  local total = 0\n  local mean = mean(numbers)\n  for _, v\
    \ in ipairs(numbers) do\n    result = result + math.abs(v - mean)\n    total =\
    \ total + 1\n  end\n  return result / total\nend", "  local mean = mean(numbers)\n\
    \  local sum = 0.0\n  for i = 1, #numbers do\n    sum = sum + math.abs(numbers[i]\
    \ - mean)\n  end\n  return sum / #numbers\nend", "  -- mean of the numbers\n \
    \ local mean = sum(numbers) / #numbers\n  -- make a list of the differences between\
    \ each number and the mean\n  local differences = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(differences, math.abs(number - mean))\n  end\n  -- take\
    \ the mean of the differences\n  return sum(differences) / #differences\nend",
  "  local sum = 0\n  local abs_diff\n  local mean = average(numbers)\n  for _, n\
    \ in ipairs(numbers) do\n    abs_diff = math.abs(n - mean)\n    sum = sum + abs_diff\n\
    \  end\n  return sum / #numbers\nend", "  local mean = sum(numbers) / #numbers\n\
    \  local absolute_deviations = {}\n  for _, number in ipairs(numbers) do\n   \
    \ absolute_deviations[#absolute_deviations + 1] = math.abs(number - mean)\n  end\n\
    \  return sum(absolute_deviations) / #absolute_deviations\nend", "  assert(type(numbers)\
    \ == \"table\",\n         \"Please give a table of numbers to mean_absolute_deviation().\"\
    )\n  local count = #numbers\n  assert(count > 0,\n         \"mean_absolute_deviation()\
    \ called on an empty table.\")\n  local sum = 0\n  for _,n in ipairs(numbers)\
    \ do\n    sum = sum + n\n  end\n  local mean = sum / count\n  local madsum = 0\n\
    \  for _,n in ipairs(numbers) do\n    madsum = madsum + math.abs(n - mean)\n \
    \ end\n  return madsum / count\nend", "    local mean = 0.0\n    local count =\
    \ 0.0\n    for _, x in ipairs(numbers) do\n        mean = mean + x\n        count\
    \ = count + 1.0\n    end\n    if count < 1.0 then return nil end\n    mean = mean\
    \ / count\n    local mad = 0.0\n    for _, x in ipairs(numbers) do\n        mad\
    \ = mad + math.abs(x - mean)\n    end\n    return mad / count\nend", "  local\
    \ avg = mean(numbers)\n  local diffs = {}\n  for _, n in ipairs(numbers) do\n\
    \    table.insert(diffs, math.abs(n - avg))\n  end\n  return mean(diffs)\nend",
  "  local sum, mean = 0.0, 0.0\n  for _, number in ipairs(numbers) do\n    sum =\
    \ sum + number\n  end\n  mean = sum / #numbers\n  local mad = 0.0\n  for _, number\
    \ in ipairs(numbers) do\n    mad = mad + math.abs(number - mean)\n  end\n  return\
    \ mad / #numbers\nend", "\tlocal mean = mean(numbers)\n\tlocal sum = 0\n\tfor\
    \ _, number in ipairs(numbers) do\n\t\tsum = sum + math.abs(number - mean)\n\t\
    end\n\treturn sum / #numbers\nend", "    local mean = mean(numbers)\n    local\
    \ sum = 0\n    for _,n in ipairs(numbers) do\n        sum = sum + abs(n - mean)\n\
    \    end\n    return sum / #numbers\nend", "    assert(type(numbers) == \"table\"\
    , \"mean_absolute_deviation: numbers is not a table!\")\n    assert(#numbers >\
    \ 0, \"mean_absolute_deviation: numbers table is empty!\")\n    assert(is_numbers(numbers),\
    \ \"mean_absolute_deviation: numbers table contains non-numbers!\")", "  local\
    \ function abs(x) return x >= 0 and x or -x end\n  local mean = sum(numbers) /\
    \ #numbers\n  local deviations = map(function(x) return abs(x - mean) end, numbers)\n\
    \  return sum(deviations) / #deviations\nend", "  local mean = mean(numbers)\n\
    \  local sum = 0\n  for _, v in ipairs(numbers) do\n    sum = sum + math.abs(v\
    \ - mean)\n  end\n  return sum / #numbers\nend", "    local mean = average(numbers)\n\
    \    local mad = 0\n    for i, x in ipairs(numbers) do\n        mad = mad + math.abs(x\
    \ - mean)\n    end\n    return mad / #numbers\nend", "    local mean = mean(numbers)\n\
    \    local total = 0\n    for _, value in ipairs(numbers) do\n        total =\
    \ total + math.abs(value - mean)\n    end\n    return total / #numbers\nend",
  "  local mean_absolute_deviation = 0\n  local mean = mean(numbers)\n  for i,v in\
    \ ipairs(numbers) do\n    mean_absolute_deviation = mean_absolute_deviation +\
    \ math.abs(v - mean)\n  end\n  return mean_absolute_deviation / #numbers\nend",
  "  assert(numbers)\n  assert(#numbers > 0)\n  local mean = mean(numbers)\n  local\
    \ sum = 0\n  for i = 1, #numbers do\n    sum = sum + math.abs(numbers[i] - mean)\n\
    \  end\n  return sum / #numbers\nend", "  local mean = mean(numbers)\n  local\
    \ sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - mean)\n  end\n  return sum / #numbers\nend", "  -- Calculate mean of the dataset\n\
    \  local mean = mean(numbers)\n  -- Take an average of the absolute difference\
    \ from the mean\n  local total = 0\n  for _, number in ipairs(numbers) do\n  \
    \  total = total + math.abs(number - mean)\n  end\n  return total / #numbers\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
