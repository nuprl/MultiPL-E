name: HumanEval_4_mean_absolute_deviation
language: lua
prompt: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
  -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute\
  \ difference between each\n-- element and a centerpoint (mean in this case):\n--\
  \ MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n\
  -- 1.0\nlocal function mean_absolute_deviation(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
  \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sum = 0.0\n    local mean = mean(numbers)\n    for i = 1,\
    \ #numbers do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return\
    \ sum / #numbers\nend", "  local mean = sum(numbers) / #numbers\n  local deviations\
    \ = {}\n  for _, value in ipairs(numbers) do\n    deviations[#deviations + 1]\
    \ = math.abs(value - mean)\n  end\n  return sum(deviations) / #deviations\nend",
  "    local n = #numbers\n    local n_sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        n_sum = n_sum + number\n    end\n    local n_mean = n_sum / n\n\
    \    local variance = 0\n    for _, number in ipairs(numbers) do\n        variance\
    \ = variance + math.abs(number - n_mean)\n    end\n    return variance / n\nend",
  "    if not numbers or #numbers == 0 then\n        return 0.0\n    end\n    local\
    \ sum = 0.0\n    local count = 0\n    for _, n in ipairs(numbers) do\n       \
    \ sum = sum + n\n        count = count + 1\n    end\n    local mean = sum / count\n\
    \    local mad = 0.0\n    for _, n in ipairs(numbers) do\n        mad = mad +\
    \ math.abs(n - mean)\n    end\n    return mad / count\nend", "    local mean =\
    \ math.average(numbers)\n    local result = 0.0\n    for _, n in ipairs(numbers)\
    \ do\n        result = result + math.abs(n - mean)\n    end\n    return result\
    \ / #numbers\nend", "  local mean = mean(numbers)\n  local abs_mean_deviations\
    \ = {}\n  for _,n in ipairs(numbers) do\n    abs_mean_deviations[#abs_mean_deviations+1]\
    \ = math.abs(n - mean)\n  end\n  return mean(abs_mean_deviations)\nend", "   \
    \ local abs = math.abs\n    local sum = 0\n    local n = #numbers\n    local mean\
    \ = sum_of_table(numbers) / n\n    for _, number in ipairs(numbers) do\n     \
    \   sum = sum + abs(number - mean)\n    end\n    return sum / n\nend", "  local\
    \ mean = mean(numbers)\n  local deviations = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(deviations, math.abs(number - mean))\n  end\n  return mean(deviations)\n\
    end", "\tlocal mean = mean(numbers)\n\tlocal sum = 0\n\tfor i, n in ipairs(numbers)\
    \ do\n\t\tsum = sum + math.abs(n - mean)\n\tend\n\treturn sum / #numbers\nend",
  "  local sum = 0\n  local mean = mean(numbers)\n  for _, n in ipairs(numbers) do\n\
    \    sum = sum + math.abs(n - mean)\n  end\n  return sum / #numbers\nend", " \
    \ return mean(absolute_values(differences(numbers, mean(numbers))))\nend", " \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end", "    local mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - mean)\n    end\n    return sum / (#numbers)\n\
    end", "  local number_count = #numbers\n  if number_count == 0 then\n    return\
    \ 0\n  end\n  local sum = 0\n  local mean = mean(numbers)\n  for i = 1, number_count\
    \ do\n    sum = sum + math.abs(numbers[i] - mean)\n  end\n  return sum / number_count\n\
    end", "    local s = setmetatable({}, set_mt)\n    for _, v in ipairs(numbers)\
    \ do\n        s:add(v)\n    end\n    return s:mean_absolute_deviation()\nend",
  "  local mean = mean(numbers)\n  local total = 0\n  for _, x in ipairs(numbers)\
    \ do\n    total = total + math.abs(x - mean)\n  end\n  return total / #numbers\n\
    end", "    local centerpoint = mean(numbers)\n    local diffs = map(function(n)\
    \ return math.abs(n - centerpoint) end, numbers)\n    return mean(diffs)\nend",
  "    local n = #numbers\n    local sum = 0.0\n    local mean = numbers_mean(numbers)\n\
    \    for i = 1, n do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n\
    \    return sum / n\nend", "  local sum = 0\n  local count = 0\n  for k, v in\
    \ pairs(numbers) do\n    sum = sum + v\n    count = count + 1\n  end\n  local\
    \ mean = sum / count\n  sum = 0\n  for k, v in pairs(numbers) do\n    sum = sum\
    \ + math.abs(v - mean)\n  end\n  return sum / count\nend", "\tlocal sum = 0\n\t\
    local n = 0\n\tlocal mean = mean(numbers)\n\tfor i = 1, #numbers do\n\t\tsum =\
    \ sum + math.abs(numbers[i] - mean)\n\t\tn = n + 1\n\tend\n\treturn sum / n\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
