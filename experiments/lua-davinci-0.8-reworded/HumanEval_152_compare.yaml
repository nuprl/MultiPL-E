name: HumanEval_152_compare
language: lua
prompt: "-- I think we all remember that feeling when the result of some long-awaited\n\
  -- event is finally known. The feelings and thoughts you have at that moment are\n\
  -- definitely worth noting down and comparing.\n-- Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n-- You are given\
  \ two tables of scores and guesses of equal length, where each index shows a match.\
  \ \n-- Return a table of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n-- the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n-- example:\n-- >>> compare({1,\
  \ 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2})\n-- {0, 0, 0, 0, 3, 3}\n-- >>> compare({0,\
  \ 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2})\n-- {4, 4, 1, 0, 0, 6}\nlocal function compare(game,\
  \ guess)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0,\
  \ 0, 0, 3, 3})\n    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0,\
  \ 0}), {0, 0, 0, 0, 0, 0})\n    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}),\
  \ {2, 4, 6})\n    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0,\
  \ 0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  for i = 1,#game do\n    game[i] = game[i] - guess[i]\n  end\n  return\
    \ game\nend", "    local diff = {}\n    for i, v in ipairs(game) do\n        if\
    \ guess[i] < 0 or guess[i] > 5 then\n            table.insert(diff, 0)\n     \
    \   else\n            table.insert(diff, math.abs(v - guess[i]))\n        end\n\
    \    end\n    return diff\nend", end, "\tlocal result = {}\n\tfor i = 1, #game\
    \ do\n\t\tif game[i] == guess[i] then\n\t\t\tresult[i] = 0\n\t\telse\n\t\t\tresult[i]\
    \ = math.abs(game[i] - guess[i])\n\t\tend\n\tend\n\treturn result\nend", "\tlocal\
    \ result = {}\n\tfor i = 1, #game do\n\t\tresult[i] = math.abs(game[i] - guess[i])\n\
    \tend\n\treturn result\nend", "    local result = {}\n    for i,v in ipairs(game)\
    \ do\n        if guess[i] < v then\n            result[i] = v - guess[i]\n   \
    \     elseif guess[i] > v then\n            result[i] = guess[i] - v\n       \
    \ else\n            result[i] = 0\n        end\n    end\n    return result\nend",
  "    local res = {}\n    for i = 1, #game do\n        if game[i] == guess[i] then\n\
    \            res[i] = 0\n        else\n            res[i] = math.abs(game[i] -\
    \ guess[i])\n        end\n    end\n    return res\nend", "    local result = {}\n\
    \    for index = 1, #game do\n        result[index] = math.abs(game[index] - guess[index])\n\
    \    end\n    return result\nend", "    local diffs = {}\n    for i = 1, #game\
    \ do\n        diffs[i] = math.abs(game[i] - guess[i])\n    end\n    return diffs\n\
    end", "    return map(zip(game, guess), function(p) return abs(p[1] - p[2]) end)\n\
    end", "    return List.map(function(a, b) return math.abs(a - b) end, game, guess)\n\
    end", "\tlocal result = {}\n\tfor i = 1, #game do\n\t\tresult[i] = math.abs(game[i]\
    \ - guess[i])\n\tend\n\treturn result\nend", "  local answer = {}\n  for i = 1,\
    \ #game do\n    answer[i] = math.abs(game[i] - guess[i])\n  end\n  return answer\n\
    end", "  local diff = {}\n  for i = 1, #game do\n    diff[i] = math.abs(game[i]\
    \ - guess[i])\n  end\n  return diff\nend", "\tlocal n = #game\n\tlocal result\
    \ = {}\n\tfor i = 1, n do\n\t\tlocal diff = game[i] - guess[i]\n\t\tresult[i]\
    \ = math.abs(diff)\n\tend\n\treturn result\nend", "  -- TODO\nend", "    local\
    \ output = {}\n    for i = 1, #game do\n        if guess[i] < 0 or guess[i] >\
    \ 5 then\n            output[i] = \"Please enter a number between 0 and 5\"\n\
    \        elseif game[i] ~= guess[i] then\n            output[i] = math.abs(game[i]\
    \ - guess[i])\n        elseif game[i] == guess[i] then\n            output[i]\
    \ = 0\n        end\n    end\n    return output\nend", "    local diff = {}\n \
    \   for i = 1, #game do\n        local g = guess[i]\n        local s = game[i]\n\
    \        diff[i] = (g > s) and (g - s) or (s - g)\n    end\n    return diff\n\
    end", "  local diffs = {}\n  for i = 1, #game do\n    diffs[i] = math.abs(game[i]\
    \ - guess[i])\n  end\n  return diffs\nend", "    local res = {}\n    for i, val\
    \ in ipairs(game) do\n        local gval = guess[i]\n        res[i] = math.abs(val\
    \ - gval)\n    end\n    return res\nend", "    local count = #game\n    local\
    \ result = {}\n    for i = 1, count do\n        result[i] = math.abs(game[i] -\
    \ guess[i])\n    end\n    return result\nend", "  local function abs_diff(x, y)\n\
    \    return math.abs(x - y)\n  end\n  return map(abs_diff, game, guess)\nend",
  "    local difference = {}\n    for k,v in pairs(game) do\n        difference[k]\
    \ = math.abs(v - guess[k])\n    end\n    return difference\nend", "    if #game\
    \ ~= #guess then\n        return\n    end\n    local result = {}\n    for i =\
    \ 1, #game do\n        result[i] = math.abs(game[i] - guess[i])\n    end\n   \
    \ return result\nend", "  local result = {}\n  for idx,game in ipairs(game) do\n\
    \    result[idx] = math.abs(game - guess[idx])\n  end\n  return result\nend",
  "\t-- body\n\tlocal result = {}\n\tfor i = 1, #game do\n\t\tif game[i] == guess[i]\
    \ then\n\t\t\tresult[i] = 0\n\t\telse\n\t\t\tresult[i] = math.abs(game[i] - guess[i])\n\
    \t\tend\n\tend\n\treturn result\nend", "    local diff = {}\n    for k, v in ipairs(game)\
    \ do\n        diff[k] = math.abs(v - guess[k])\n    end\n    return diff\nend",
  "  local result = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] -\
    \ guess[i])\n  end\n  return result\nend", "\tlocal result = {}\n\tfor i, v in\
    \ ipairs(game) do\n\t\tresult[i] = math.abs(v - guess[i])\n\tend\n\treturn result\n\
    end", "    local result = {}\n    for i,v in ipairs(game) do\n        result[i]\
    \ = math.abs(v - guess[i])\n    end\n    return result\nend", "    local result\
    \ = {}\n    for i = 1, #game do\n        result[i] = math.abs(game[i] - guess[i])\n\
    \    end\n    return result\nend", "\tlocal t = {}\n\tfor i, _ in ipairs(game)\
    \ do\n\t\tt[i] = math.abs(game[i] - guess[i])\n\tend\n\treturn t\nend", "    local\
    \ result = {}\n    for i, _ in ipairs(game) do\n        if game[i] == guess[i]\
    \ then\n            result[i] = 0\n        else\n            result[i] = math.abs(game[i]\
    \ - guess[i])\n        end\n    end\n    return result\nend", "  local result\
    \ = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return result\nend", end, "    local result = {}\n    for i = 1, #game\
    \ do\n        result[i] = math.abs(game[i] - guess[i])\n    end\n    return result\n\
    end", end, "  local offs = {}\n  for i = 1, #game do\n    offs[i] = math.abs(game[i]\
    \ - guess[i])\n  end\n  return offs\nend", "    local err = {}\n    for i, g in\
    \ ipairs(game) do\n        err[i] = math.abs(g - guess[i])\n    end\n    return\
    \ err\nend", "  local result = {}\n  for i, v in ipairs(game) do\n    result[i]\
    \ = math.abs(v - guess[i])\n  end\n  return result\nend", "\tlocal result = {}\n\
    \tfor i, v in ipairs(game) do\n\t\tif game[i] == guess[i] then\n\t\t\tresult[i]\
    \ = 0\n\t\telse\n\t\t\tresult[i] = math.abs(game[i] - guess[i])\n\t\tend\n\tend\n\
    \treturn result\nend", "    local diffs = {}\n    local n = #game\n    for i =\
    \ 1, n do\n        diffs[i] = math.abs(game[i] - guess[i])\n    end\n    return\
    \ diffs\nend", "    local results = {}\n    for i = 1, #game do\n        results[i]\
    \ = math.abs(game[i] - guess[i])\n    end\n    return results\nend", "\tlocal\
    \ result = {}\n\tfor i = 1, #game do\n\t\tresult[i] = math.abs(game[i] - guess[i])\n\
    \tend\n\treturn result\nend", "  local result = {}\n  for idx, val in ipairs(game)\
    \ do\n    local diff = math.abs(val - guess[idx])\n    table.insert(result, diff)\n\
    \  end\n  return result\nend", "  return tablex.map2(function(g,s) return math.abs(g-s)\
    \ end, game, guess)\nend", "    local result = {}\n    for i, v in ipairs(game)\
    \ do\n        result[i] = math.abs(v - guess[i])\n    end\n    return result\n\
    end", "  local result = {}\n  for i, j in ipairs(game) do\n    if game[i] > guess[i]\
    \ then\n      result[i] = game[i] - guess[i]\n    elseif game[i] < guess[i] then\n\
    \      result[i] = guess[i] - game[i]\n    else\n      result[i] = 0\n    end\n\
    \  end\n  return result\nend", "    -- your code here\nend", "\tlocal result =\
    \ {}\n\tfor i = 1, #game do\n\t\tif (game[i] < 0 and guess[i] < 0) then\n\t\t\t\
    result[i] = math.abs(game[i] - guess[i])\n\t\telseif (game[i] > 0 and guess[i]\
    \ > 0) then\n\t\t\tresult[i] = math.abs(game[i] - guess[i])\n\t\telseif (game[i]\
    \ == 0 and guess[i] == 0) then\n\t\t\tresult[i] = 0\n\t\telse\n\t\t\tresult[i]\
    \ = math.abs(game[i] - guess[i])\n\t\tend\n\tend\n\treturn result\nend", "  local\
    \ res = {}\n  for i, score in ipairs(game) do\n    res[i] = math.abs(score - guess[i])\n\
    \  end\n  return res\nend", "  local result = {}\n  for i = 1, #game do\n    result[i]\
    \ = math.abs(game[i] - guess[i])\n  end\n  return result\nend", "    if #game\
    \ ~= #guess then\n        return nil\n    end\n    local result = {}\n    for\
    \ i, v in ipairs(game) do\n        result[i] = v - guess[i]\n        if result[i]\
    \ < 0 then\n            result[i] = -result[i]\n        end\n    end\n    return\
    \ result\nend", "  local results = {}\n  for i = 1, #game do\n    local result\
    \ = game[i] - guess[i]\n    if result < 0 then\n      result = result * -1\n \
    \   end\n    results[i] = result\n  end\n  return results\nend", "  local result\
    \ = {}\n  for i, _ in ipairs(game) do\n    if (guess[i] >= 0) then\n      result[i]\
    \ = math.abs(game[i] - guess[i])\n    else\n      result[i] = math.abs(game[i]\
    \ - (-1 * guess[i]))\n    end\n  end\n  return result\nend", "    local result\
    \ = {}\n    for i = 1, #game do\n        if game[i] == guess[i] then\n       \
    \     result[i] = 0\n        else\n            result[i] = math.abs(game[i] -\
    \ guess[i])\n        end\n    end\n    return result\nend", "\t-- your code goes\
    \ here\n\tlocal res = {}\n\tfor i = 1, #game do\n\t\tres[i] = math.abs(game[i]\
    \ - guess[i])\n\tend\n\treturn res\nend", "    if not game or not guess then\n\
    \        error(\"Invalid input\")\n    end\n    local result = {}\n    for i =\
    \ 1, #game do\n        result[i] = math.abs(game[i] - guess[i])\n    end\n   \
    \ return result\nend", "    assert(#game == #guess, \"error: game and guess should\
    \ be of the same length\")\n    local res = {}\n    for i = 1, #game do\n    \
    \    res[i] = math.abs(game[i] - guess[i])\n    end\n    return res\nend", " \
    \   local result = {}\n    for i, x in ipairs(game) do\n        if x > guess[i]\
    \ then\n            result[i] = x - guess[i]\n        elseif x < guess[i] then\n\
    \            result[i] = guess[i] - x\n        else\n            result[i] = 0\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ k,v in pairs(game) do\n        result[k] = math.abs(v - guess[k])\n    end\n\
    \    return result\nend", "  local result = {}\n  for i = 1, #game do\n    result[i]\
    \ = math.abs(game[i] - guess[i])\n  end\n  return result\nend", "\tlocal result\
    \ = {}\n\tfor i = 1, #game do\n\t\tlocal diff = math.abs(game[i] - guess[i])\n\
    \t\tresult[i] = diff\n\tend\n\treturn result\nend", "    local result = {}\n \
    \   for i = 1, #game do\n        local game_score = game[i]\n        local guess_score\
    \ = guess[i]\n        local diff = math.abs(game_score - guess_score)\n      \
    \  result[i] = diff\n    end\n    return result\nend", "  -- create a table of\
    \ answers with the same length as parameters\n  local results = {}\n  -- loop\
    \ through all the values in the table\n  for i = 1, #game do\n    -- add to the\
    \ results table the result of absolute value of subtracting guess from game\n\
    \    table.insert(results, math.abs(game[i] - guess[i]))\n  end\n  -- return the\
    \ table of results\n  return results\nend", "    if #game ~= #guess then\n   \
    \     error('invalid arguments')\n    end\n    local results = {}\n    for k,\
    \ score in ipairs(game) do\n        results[k] = math.abs(score - guess[k])\n\
    \    end\n    return results\nend", "    local results = {}\n    for i,v in ipairs(game)\
    \ do\n        results[i] = math.abs(v - guess[i])\n    end\n    return results\n\
    end", "  local result = {}\n  for i,j in ipairs(game) do\n    if game[i] == guess[i]\
    \ then\n      result[i] = 0\n    else\n      result[i] = math.abs(guess[i] - game[i])\n\
    \    end\n  end\n  return result\nend", "  local sum = {}\n  for i = 1, #game\
    \ do\n    local difference = math.abs(game[i] - guess[i])\n    sum[i] = difference\n\
    \  end\n  return sum\nend", "    local result = {}\n    for i = 1, #game do\n\
    \        result[i] = math.abs(game[i] - guess[i])\n    end\n    return result\n\
    end", "  local ret = {}\n  for i = 1, #game do\n    local gm = game[i]\n    local\
    \ gs = guess[i]\n    local diff = math.abs(gm - gs)\n    ret[i] = diff\n  end\n\
    \  return ret\nend", "    local delta = {}\n    for i,v in ipairs(game) do\n \
    \       table.insert(delta, math.abs(v - guess[i]))\n    end\n    return delta\n\
    end", "  local errors = {}\n  for i = 1, #game do\n    table.insert(errors, math.abs(game[i]\
    \ - guess[i]))\n  end\n  return errors\nend", "    local result = {}\n    for\
    \ i = 1, #game do\n        if game[i] >= 0 then\n            result[i] = math.abs(game[i]\
    \ - guess[i])\n        else\n            result[i] = game[i] + math.abs(guess[i])\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #game do\n        local diff = math.abs(game[i] - guess[i])\n       \
    \ table.insert(result, diff)\n    end\n    return result\nend", "    local diff\
    \ = {}\n    for i = 1, #game do\n        diff[i] = math.abs(game[i] - guess[i])\n\
    \    end\n    return diff\nend", "    local result = {}\n    for i = 1, #game\
    \ do\n        if game[i] >= 0 then\n            result[i] = math.abs(game[i] -\
    \ guess[i])\n        else\n            result[i] = math.abs(game[i] + guess[i])\n\
    \        end\n    end\n    return result\nend", "    return {}\nend", "    local\
    \ result = {}\n    for i = 1, #game do\n        local diff = game[i] - guess[i]\n\
    \        if diff < 0 then\n            diff = -diff\n        end\n        result[i]\
    \ = diff\n    end\n    return result\nend", "  local res = {}\n  for i, v in ipairs(game)\
    \ do\n    res[i] = math.abs(v - guess[i])\n  end\n  return res\nend", "\tlocal\
    \ guess_res = {}\n\tfor i,v in ipairs(game) do\n\t\tif v == guess[i] then\n\t\t\
    \tguess_res[i] = 0\n\t\telse\n\t\t\tguess_res[i] = math.abs(v - guess[i])\n\t\t\
    end\n\tend\n\treturn guess_res\nend", "    -- body\n    local result = {}\n  \
    \  for k, v in ipairs(game) do\n        local diff = math.abs(v - guess[k])\n\
    \        result[k] = diff\n    end\n    return result\nend", "    assert(#game\
    \ == #guess, \"The input tables have different lengths\")\n    local res = {}\n\
    \    for i = 1, #game do\n        res[i] = math.abs(game[i] - guess[i])\n    end\n\
    \    return res\nend", "  local result = {}\n  for i = 1, #game do\n    local\
    \ n = math.abs(game[i] - guess[i])\n    result[i] = n\n  end\n  return result\n\
    end", "    local results = {}\n    for i = 1, #game do\n        results[i] = math.abs(game[i]\
    \ - guess[i])\n    end\n    return results\nend", "\tlocal delta = {}\n\tfor i\
    \ = 1, #game do\n\t\tdelta[i] = math.abs(game[i] - guess[i])\n\tend\n\treturn\
    \ delta\nend", "    return tablex.imap(function(s, g) return math.abs(s - g) end,\
    \ game, guess)\nend", "    local result = {}\n    for i, value in ipairs(game)\
    \ do\n        result[i] = math.abs(value - guess[i])\n    end\n    return result\n\
    end", "    local result = {}\n    for i, v in ipairs(game) do\n        result[i]\
    \ = math.abs(v - guess[i])\n    end\n    return result\nend", "   local result\
    \ = {}\n   for k, v in ipairs(game) do\n      result[k] = math.abs(v - guess[k])\n\
    \   end\n   return result\nend", "\tlocal result = {}\n\tfor index, value in ipairs(game)\
    \ do\n\t\tresult[index] = math.abs(value - guess[index])\n\tend\n\treturn result\n\
    end", "    -- write your code here\nend", "    local result = {}\n    for k, v\
    \ in ipairs(game) do\n        if v == guess[k] then\n            result[k] = 0\n\
    \        else\n            result[k] = math.abs(v - guess[k])\n        end\n \
    \   end\n    return result\nend", "  local res = {}\n  for i, v in ipairs(game)\
    \ do\n    res[i] = math.abs(v - guess[i])\n  end\n  return res\nend", "\tresult\
    \ = {}\n\tfor i = 1, #game do\n\t\tresult[i] = math.abs(game[i] - guess[i])\n\t\
    end\n\treturn result\nend", "    local result = {}\n    for i = 1, #game do\n\
    \        local delta = math.abs(game[i] - guess[i])\n        table.insert(result,\
    \ delta)\n    end\n    return result\nend", "    local res = {}\n    for i = 1,\
    \ #game do\n        res[i] = math.abs(game[i] - guess[i])\n    end\n    return\
    \ res\nend", "\tlocal  res = {}\n\tfor i = 1, #game do\n\t\tres[i] = math.abs(game[i]\
    \ - guess[i])\n\tend\n\treturn res\nend", "    local result = {}\n    for i =\
    \ 1, #game do\n        local value = math.abs(game[i] - guess[i])\n        table.insert(result,\
    \ value)\n    end\n    return result\nend", "    local scores = {}\n    for k,v\
    \ in pairs(game) do\n        table.insert(scores, math.abs(v - guess[k]))\n  \
    \  end\n    return scores\nend", "  local r = {}\n  for i = 1, #game do\n    r[i]\
    \ = math.abs(game[i] - guess[i])\n  end\n  return r\nend", "  local result = {}\n\
    \  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n  end\n\
    \  return result\nend", "  assert(#game == #guess, 'wrong number of items')\n\
    \  local res = {}\n  for i, g in ipairs(game) do\n    res[i] = math.abs(g - guess[i])\n\
    \  end\n  return res\nend", "    local array = {}\n    for i = 1, #game do\n \
    \       if game[i] == guess[i] then\n            array[i] = 0\n        else\n\
    \            array[i] = math.abs(game[i] - guess[i])\n        end\n    end\n \
    \   return array\nend", "    local result = {}\n    for idx, val in ipairs(game)\
    \ do\n        result[idx] = math.abs(val - guess[idx])\n    end\n    return result\n\
    end", "\tlocal out = {}\n\tfor i,v in ipairs(game) do\n\t\tout[i] = math.abs(game[i]\
    \ - guess[i])\n\tend\n\treturn out\nend", "\tlocal out = {}\n\tfor i,v in ipairs(game)\
    \ do\n\t\tout[i] = math.abs(v - guess[i])\n\tend\n\treturn out\nend", "    local\
    \ game = table.pack(table.unpack(game))\n    local guess = table.pack(table.unpack(guess))\n\
    \    local guessDiff = {}\n    for i = 1, game.n do\n        guessDiff[i] = math.abs(game[i]\
    \ - guess[i])\n    end\n    return guessDiff\nend", end, "  local result = {}\n\
    \  for i,v in ipairs(game) do\n    if v == guess[i] then\n      result[i] = 0\n\
    \    else\n      result[i] = math.abs(v - guess[i])\n    end\n  end\n  return\
    \ result\nend", "    local off = {}\n    for i = 1, #game do\n        off[i] =\
    \ math.abs(game[i] - guess[i])\n    end\n    return off\nend", "  local result\
    \ = {}\n  for i = 1, #game do\n    local difference = game[i] - guess[i]\n   \
    \ result[i] = math.abs(difference)\n  end\n  return result\nend", "    local res\
    \ = {}\n    for i, v in ipairs(game) do\n        res[i] = math.abs(v - guess[i])\n\
    \    end\n    return res\nend", "    local results = {}\n    for i, v in ipairs(game)\
    \ do\n        results[i] = math.abs(v - guess[i])\n    end\n    return results\n\
    end", "    local out = {}\n    for i = 1, #game do\n        local delta = game[i]\
    \ - guess[i]\n        out[i] = delta > 0 and delta or -delta\n    end\n    return\
    \ out\nend", "  local result = {}\n  for i, v in ipairs(game) do\n    if v ==\
    \ guess[i] then\n      result[i] = 0\n    else\n      result[i] = math.abs(v -\
    \ guess[i])\n    end\n  end\n  return result\nend", "    local result = {}\n \
    \   for i = 1, #game do\n        result[i] = math.abs(game[i] - guess[i])\n  \
    \  end\n    return result\nend", "   local result = {}\n   for i, score in ipairs(game)\
    \ do\n      result[i] = math.abs(score - guess[i])\n   end\n   return result\n\
    end", "\tlocal result = {}\n\tfor i, v in ipairs(game) do\n\t\tresult[i] = math.abs(game[i]\
    \ - guess[i])\n\tend\n\treturn result\nend", "    local diff = {}\n    for i =\
    \ 1, #game do\n        diff[i] = math.abs(game[i] - guess[i])\n    end\n    return\
    \ diff\nend", "    local result = {}\n    for i,v in ipairs(game) do\n       \
    \ result[i] = math.abs(v - guess[i])\n    end\n    return result\nend", "  if\
    \ type(game) ~= \"table\" or type(guess) ~= \"table\" then\n    return nil\n \
    \ end\n  local result = {}\n  for i, v in ipairs(game) do\n    result[i] = math.abs(v\
    \ - guess[i])\n  end\n  return result\nend", "    local d = {}\n    for i = 1,\
    \ #game do\n        local g = guess[i]\n        local s = game[i]\n        d[i]\
    \ = g > s and g - s or s - g\n    end\n    return d\nend", "  -- body\nend", " \
    \   return\n        zip(game, guess)\n        :map(function(game_score, guess_score)\n\
    \            return math.abs(game_score - guess_score)\n        end)\n       \
    \ :unpack()\nend", end, "    local rtn = {}\n    for i = 1, #game do\n       \
    \ rtn[i] = math.abs(game[i] - guess[i])\n    end\n    return rtn\nend", "  --\
    \ your code here\nend", "    local x = {}\n    for i = 1, #game do\n        if\
    \ game[i] == guess[i] then\n            x[i] = 0\n        else\n            x[i]\
    \ = math.abs(game[i] - guess[i])\n        end\n    end\n    return x\nend", " \
    \   -- TODO: implement me\nend", "    return map(function(sc, gs)\n        return\
    \ math.abs(sc - gs)\n    end, game, guess)\nend", "    assert(#game == #guess,\
    \ 'games and guesses must be of equal length')\n    local difference = {}\n  \
    \  for i = 1, #game do\n        local actual = game[i]\n        local expected\
    \ = guess[i]\n        local result = math.abs(actual - expected)\n        table.insert(difference,\
    \ result)\n    end\n    return difference\nend", "  local result = {}\n  for i\
    \ = 1, #game do\n    if game[i] == guess[i] then\n      result[i] = 0\n    else\n\
    \      result[i] = math.abs(game[i] - guess[i])\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for i, v in ipairs(game) do\n        result[i]\
    \ = math.abs(v - guess[i])\n    end\n    return result\nend", "    local out =\
    \ {}\n    for i,v in ipairs(game) do\n        if v == guess[i] then\n        \
    \    out[i] = 0\n        else\n            out[i] = math.abs(v - guess[i])\n \
    \       end\n    end\n    return out\nend", "  local t = {}\n  for i, v in ipairs(game)\
    \ do\n    if guess[i] > game[i] then\n      table.insert(t, math.abs(guess[i]\
    \ - game[i]))\n    elseif guess[i] < game[i] then\n      table.insert(t, math.abs(guess[i]\
    \ - game[i]))\n    else\n      table.insert(t, 0)\n    end\n  end\n  return t\n\
    end", "\tlocal results = {}\n\tfor i,v in ipairs(game) do\n\t\tresults[i] = math.abs(game[i]\
    \ - guess[i])\n\tend\n\treturn results\nend", "    local result = {}\n    for\
    \ i, score in ipairs(game) do\n        if score == guess[i] then\n           \
    \ result[i] = 0\n        else\n            result[i] = math.abs(score - guess[i])\n\
    \        end\n    end\n    return result\nend", " \n   -- [1] The code in this\
    \ block is executed only once when the function is called.\n   local result =\
    \ {}\n   for k,v in pairs(game) do\n     -- result[k] = v -- first value\n   \
    \  if game[k] == guess[k] then\n       result[k] = 0\n     else\n       result[k]\
    \ = math.abs(game[k] - guess[k])\n     end\n   end\n   return result\n end", " \
    \ local result = {}\n  for i = 1, #game do\n    if game[i] == guess[i] then\n\
    \      result[i] = 0\n    else\n      result[i] = math.abs(game[i] - guess[i])\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for i,v in ipairs(game)\
    \ do\n    if v == guess[i] then\n      result[i] = 0\n    else\n      result[i]\
    \ = math.abs(v - guess[i])\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for i, v in ipairs(game) do\n        result[i] = math.abs(v\
    \ - guess[i])\n    end\n    return result\nend", "  local a = {}\n  for i = 1,\
    \ #game do\n    if (game[i] > guess[i]) then\n      a[i] = game[i] - guess[i]\n\
    \    elseif (game[i] < guess[i]) then\n      a[i] = guess[i] - game[i]\n    else\
    \ \n      a[i] = 0\n    end\n  end\n  return a\nend", "    local g = {}\n    for\
    \ i, v in ipairs(game) do\n        if v > guess[i] then\n            g[i] = v\
    \ - guess[i]\n        elseif v < guess[i] then\n            g[i] = guess[i] -\
    \ v\n        else\n            g[i] = 0\n        end\n    end\n    return g\n\
    end", "    -- your code here\nend", "\tlocal t = {}\n\tfor i = 1, #game do\n\t\
    \tlocal diff = math.abs(game[i] - guess[i])\n\t\ttable.insert(t, diff)\n\tend\n\
    \treturn t\nend", "    local delta = {}\n    for i = 1, #game do\n        delta[i]\
    \ = math.abs(game[i] - guess[i])\n    end\n    return delta\nend", "  -- your\
    \ code here\nend", "  if #game ~= #guess then\n    error(\"the length of the tables\
    \ are not equal\", 2)\n  end\n  local function iter(i, res)\n    if i == #game\
    \ then\n      return res\n    end\n    local diff = math.abs(game[i] - guess[i])\n\
    \    res[i] = diff\n    return iter(i + 1, res)\n  end\n  return iter(1, {})\n\
    end", "    -- TODO: YOUR CODE HERE\nend", "\tlocal result = {}\n\tfor i = 1, #game\
    \ do\n\t\tresult[i] = math.abs(game[i] - guess[i])\n\tend\n\treturn result\nend",
  "    local result = {}\n    for i = 1, #game do\n        if game[i] == guess[i]\
    \ then\n            result[i] = 0\n        else\n            result[i] = math.abs(game[i]\
    \ - guess[i])\n        end\n    end\n    return result\nend", "    local result\
    \ = {}\n    for i,v in ipairs(game) do\n        local dif = math.abs(v - guess[i])\n\
    \        result[i] = dif\n    end\n    return result\nend", "  local result =\
    \ {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n  end\n\
    \  return result\nend", "  -- Your code here\nend", "  local result = {}\n  for\
    \ i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n  end\n  return\
    \ result\nend", "    local total_matches = #game\n    local result = {}\n    for\
    \ match_index = 1, total_matches do\n        result[match_index] = math.abs(game[match_index]\
    \ - guess[match_index])\n    end\n    return result\nend", "    -- your code goes\
    \ here\nend", "\tlocal result = {}\n\tfor i = 1, #game do\n\t\tif game[i] > guess[i]\
    \ then\n\t\t\tresult[i] = game[i] - guess[i]\n\t\telseif game[i] < guess[i] then\n\
    \t\t\tresult[i] = guess[i] - game[i]\n\t\telse\n\t\t\tresult[i] = 0\n\t\tend\n\
    \tend\n\treturn result\nend", "\tlocal result = {}\n\tfor i = 1, #game do\n\t\t\
    if guess[i] == game[i] then\n\t\t\tresult[i] = 0\n\t\telse\n\t\t\tresult[i] =\
    \ math.abs(guess[i] - game[i])\n\t\tend\n\tend\n\treturn result\nend", end, "\t\
    local result = {}\n\tfor i = 1, #game do\n\t\tlocal diff = math.abs(game[i] -\
    \ guess[i])\n\t\ttable.insert(result, diff)\n\tend\n\treturn result\nend", "\t\
    return game\nend", "\tlocal result = {}\n\tfor i, v in ipairs(game) do\n\t\tif\
    \ v == guess[i] then\n\t\t\tresult[i] = 0\n\t\telse\n\t\t\tresult[i] = math.abs(v\
    \ - guess[i])\n\t\tend\n\tend\n\treturn result\nend", "  local res = {}\n  for\
    \ i = 1, #game do\n    local g = game[i] - guess[i]\n    res[i] = g > 0 and g\
    \ or -g\n  end\n  return res\nend", "    local result = {}\n    for i = 1, #game\
    \ do\n        local diff = game[i] - guess[i]\n        result[i] = math.abs(diff)\n\
    \    end\n    return result\nend", "  local res = {}\n  for i = 1, #game do\n\
    \    res[i] = math.abs(game[i] - guess[i])\n  end\n  return res\nend", "  local\
    \ result = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return result\nend", "    -- your code here\nend", "  local m = {}\n\
    \  for i = 1, #game do\n    m[i] = math.abs(game[i] - guess[i])\n  end\n  return\
    \ m\nend", "\tlocal res = {}\n\tfor i, v in ipairs(game) do\n\t\tres[i] = math.abs(v\
    \ - guess[i])\n\tend\n\treturn res\nend", "  local result = {}\n  for k, v in\
    \ pairs(game) do\n    if v == guess[k] then\n      result[k] = 0\n    else\n \
    \     result[k] = math.abs(v - guess[k])\n    end\n  end\n  return result\nend",
  "  local result = {}\n  for i = 1, #game do\n    if game[i] == guess[i] then\n \
    \     result[i] = 0\n    else\n      result[i] = math.abs(game[i] - guess[i])\n\
    \    end\n  end\n  return result\nend", "\tassert(#game == #guess, \"tables must\
    \ be of equal length\")\n\tlocal result = {}\n\tfor i = 1, #game do\n\t\tresult[i]\
    \ = math.abs(game[i] - guess[i])\n\tend\n\treturn result\nend", "  local result\
    \ = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return result\nend", "  local length = #game\n  local res = {}\n  for\
    \ i = 1, length do\n    res[i] = math.abs(game[i] - guess[i])\n  end\n  return\
    \ res\nend", "  local result = {}\n  for i = 1, #game do\n    local diff = math.abs(game[i]\
    \ - guess[i])\n    result[i] = diff\n  end\n  return result\nend", "    return\
    \ -- TODO\nend", "\tlocal result = {}\n\tfor i = 1, #game do\n\t\tif game[i] ==\
    \ guess[i] then\n\t\t\tresult[i] = 0\n\t\telse\n\t\t\tresult[i] = math.abs(game[i]\
    \ - guess[i])\n\t\tend\n\tend\n\treturn result\nend", "\tlocal results = {}\n\t\
    for i = 1, #game do\n\t\tresults[i] = math.abs(game[i] - guess[i])\n\tend\n\t\
    return results\nend", "    local compare = {}\n    for i = 1, #game do\n     \
    \   if (game[i] > guess[i]) then\n            compare[i] = math.abs(game[i] -\
    \ guess[i])\n        elseif (game[i] < guess[i]) then\n            compare[i]\
    \ = math.abs(game[i] - guess[i])\n        else\n            compare[i] = 0\n \
    \       end\n    end\n    return compare\nend", "    local result = {}\n    for\
    \ i, v in ipairs(game) do\n        local diff = math.abs(v - guess[i])\n     \
    \   table.insert(result, diff)\n    end\n    return result\nend", "\tlocal diff\
    \ = {}\n\tlocal n = #game\n\tfor i = 1, n do\n\t\tif game[i] > guess[i] then\n\
    \t\t\tdiff[i] = game[i] - guess[i]\n\t\telseif game[i] < guess[i] then\n\t\t\t\
    diff[i] = guess[i] - game[i]\n\t\telse\n\t\t\tdiff[i] = 0\n\t\tend\n\tend\n\t\
    return diff\nend", "  if #game ~= #guess then return nil end\n  local result =\
    \ {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n  end\n\
    \  return result\nend", "  local result = {}\n  for i, v in ipairs(game) do\n\
    \    result[i] = math.abs(v - guess[i])\n  end\n  return result\nend", "  local\
    \ result = {}\n  for i,j in ipairs(game) do\n    local r = j - guess[i]\n    table.insert(result,\
    \ math.abs(r))\n  end\n  return result\nend", "  local result = {}\n  for i,v\
    \ in ipairs(game) do\n    result[i] = math.abs(v - guess[i])\n  end\n  return\
    \ result\nend", "    local result = {}\n    for i, v in ipairs(game) do\n    \
    \    result[i] = math.abs(v - guess[i])\n    end\n    return result\nend", " \
    \ local result = {}\n  for i,v in ipairs(game) do\n    result[i] = math.abs(game[i]\
    \ - guess[i])\n  end\n  return result\nend", "   local result = {}\n   for k,\
    \ v in ipairs(game) do\n      if game[k] == guess[k] then\n         result[k]\
    \ = 0\n      else\n         result[k] = math.abs(game[k] - guess[k])\n      end\n\
    \   end\n   return result\nend", "    local result = {}\n    for i = 1, #game\
    \ do\n        result[i] = math.abs(game[i] - guess[i])\n    end\n    return result\n\
    end", "  local result = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i]\
    \ - guess[i])\n  end\n  return result\nend", "  local results = {}\n  for i,_\
    \ in ipairs(game) do\n    if game[i] == guess[i] then\n      results[i] = 0\n\
    \    else\n      results[i] = math.abs(game[i] - guess[i])\n    end\n  end\n \
    \ return results\nend", "    local result = {}\n    for index, score in ipairs(game)\
    \ do\n        result[index] = math.abs(score - guess[index])\n    end\n    return\
    \ result\nend", "    local t = {}\n    for i = 1, #game do\n        t[i] = math.abs(game[i]\
    \ - guess[i])\n    end\n    return t\nend", "    return map(zipWith(function(a,\
    \ b)\n        if a == b then return 0 end\n        return math.abs(a - b)\n  \
    \  end, game, guess), math.abs)\nend", "    if #game ~= #guess then\n        error(\"\
    bad arguments: tables must be of equal length\")\n    end\n    local result =\
    \ {}\n    for i = 1, #game do\n        result[i] = math.abs(game[i] - guess[i])\n\
    \    end\n    return result\nend", "    local results = {}\n    for i = 1, #game\
    \ do\n        results[i] = math.abs(game[i] - guess[i])\n    end\n    return results\n\
    end", "  local ans = {}\n  for i = 1, #game do\n    local abs = math.abs(game[i]\
    \ - guess[i])\n    table.insert(ans, abs)\n  end\n  return ans\nend", "  local\
    \ results = {}\n  for i = 1, #game do\n    results[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return results\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
