language: lua
name: HumanEval_96_count_up_to
results:
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local result = {}\n    for i = 2, n do\n    \
    \    local flag = true\n        for j = 2, i - 1 do\n            if i % j == 0\
    \ then\n                flag = false\n                break\n            end\n\
    \        end\n        if flag then\n            table.insert(result, i)\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8y_8sgei.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp8y_8sgei.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nprint(count_up_to(5))\nprint(count_up_to(11))\n\
    print(count_up_to(0))\nprint(count_up_to(20))\nprint(count_up_to(1))\nprint(count_up_to(18))\n\
    print(count_up_to(50000))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp1rr8sa3s.lua:19: attempt to call a nil value (global 'is_prime')\n\
    stack traceback:\n\t/tmp/tmp1rr8sa3s.lua:19: in local 'count_up_to'\n\t/tmp/tmp1rr8sa3s.lua:25:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local prime_set\
    \ = {}\n    local prime_count = 0\n    local prime_num = 0\n    for i = 2, n -\
    \ 1 do\n        if (i % 2 == 0 and i ~= 2) or (i % 3 == 0 and i ~= 3) or (i %\
    \ 5 == 0 and i ~= 5) then\n            goto continue\n        end\n        prime_num\
    \ = prime_num + 1\n        prime_set[prime_num] = i\n        ::continue::\n  \
    \  end\n    return prime_set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3vtq912.lua:43:\
    \ expected: \n{\n    2,\n    3,\n    5,\n    7,\n    11,\n    13,\n    17,\n \
    \   19,\n    23,\n    29,\n    31,\n    37,\n    41,\n    43,\n    47,\n    53,\n\
    \    59,\n    61,\n    67,\n    71,\n    73,\n    79,\n    83,\n    89,\n    97\n\
    }\nactual: \n{\n    2,\n    3,\n    5,\n    7,\n    11,\n    13,\n    17,\n  \
    \  19,\n    23,\n    29,\n    31,\n    37,\n    41,\n    43,\n    47,\n    49,\n\
    \    53,\n    59,\n    61,\n    67,\n    71,\n    73,\n    77,\n    79,\n    83,\n\
    \    89,\n    91,\n    97\n}\nList difference analysis:\n* list sizes differ:\
    \ list A (actual) has 28 items, list B (expected) has 25 items\n* lists A and\
    \ B start differing at index 16\n* lists A and B are equal again from index 28\
    \ for A, 25 for B\n* Common parts:\n  = A[1], B[1]: 2\n  = A[2], B[2]: 3\n  =\
    \ A[3], B[3]: 5\n  = A[4], B[4]: 7\n  = A[5], B[5]: 11\n  = A[6], B[6]: 13\n \
    \ = A[7], B[7]: 17\n  = A[8], B[8]: 19\n  = A[9], B[9]: 23\n  = A[10], B[10]:\
    \ 29\n  = A[11], B[11]: 31\n  = A[12], B[12]: 37\n  = A[13], B[13]: 41\n  = A[14],\
    \ B[14]: 43\n  = A[15], B[15]: 47\n* Differing parts:\n  - A[16]: 49\n  + B[16]:\
    \ 53\n  - A[17]: 53\n  + B[17]: 59\n  - A[18]: 59\n  + B[18]: 61\n  - A[19]: 61\n\
    \  + B[19]: 67\n  - A[20]: 67\n  + B[20]: 71\n  - A[21]: 71\n  + B[21]: 73\n \
    \ - A[22]: 73\n  + B[22]: 79\n  - A[23]: 77\n  + B[23]: 83\n  - A[24]: 79\n  +\
    \ B[24]: 89\n* Present only in one list:\n  - A[25]: 83\n  - A[26]: 89\n  - A[27]:\
    \ 91\n* Common parts at the end of the lists\n  = A[28], B[25]: 97\nstack traceback:\n\
    \t/tmp/tmp_3vtq912.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.050\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal num = 2\n\t\
    local primes = {}\n\twhile num < n do\n\t\tlocal is_prime = true\n\t\tfor i =\
    \ 2, num-1 do\n\t\t\tif num % i == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(primes, num)\n\
    \t\tend\n\t\tnum = num + 1\n\tend\n\treturn primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local function is_prime(n)\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6ohpakny.lua:41: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0a1gz4ze.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp0a1gz4ze.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp0a1gz4ze.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n <= 1 then\n\
    \        return {}\n    end\n    local is_prime = function(number)\n        if\
    \ number == 2 then\n            return true\n        end\n        for i = 2, math.floor(math.sqrt(number))\
    \ do\n            if number % i == 0 then\n                return false\n    \
    \        end\n        end\n        return true\n    end\n    local t = {}\n  \
    \  for i = 2, n do\n        if is_prime(i) then\n            table.insert(t, i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vq9r3k6.lua:43:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp9vq9r3k6.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal l = {}\n\t\
    for i = 2, n-1 do\n\t\tlocal a = 0\n\t\tfor j = 2, i-1 do\n\t\t\tif (i % j ==\
    \ 0) then\n\t\t\t\ta = 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif (a == 0) then\n\
    \t\t\ttable.insert(l, i)\n\t\tend\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local tbl = {}\n\
    \    if n < 2 then\n        return tbl\n    end\n    local sqr_of_n = math.sqrt(n)\n\
    \    for i = 2, n do\n        local flag = true\n        for _, v in ipairs(tbl)\
    \ do\n            if v > sqr_of_n then\n                break\n            end\n\
    \            if i % v == 0 then\n                flag = false\n              \
    \  break\n            end\n        end\n        if flag then\n            table.insert(tbl,\
    \ i)\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgxhi02l.lua:43:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpfgxhi02l.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n <= 1 then\n\
    \    return {}\n  end\n  local numbers = {}\n  local i = 2\n  while i < n do\n\
    \    if is_prime(i) then\n      table.insert(numbers, i)\n    end\n    i = i +\
    \ 1\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcneuls1v.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpcneuls1v.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpcneuls1v.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- TODO: implement\
    \ this function\n    if n < 0 then\n        return nil\n    end\n    local primes\
    \ = {}\n    for i = 2, n do\n        local isPrime = true\n        for j = 2,\
    \ i - 1 do\n            if i % j == 0 then\n                isPrime = false\n\
    \                break\n            end\n        end\n        if isPrime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84s0u8na.lua:40:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp84s0u8na.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local count = {}\n    for i = 2, n do\n     \
    \   count[i] = true\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n   \
    \     if count[i] then\n            for j = i*i, n, i do\n                count[j]\
    \ = false\n            end\n        end\n    end\n    local res = {}\n    for\
    \ i = 2, n do\n        if count[i] then\n            table.insert(res, i)\n  \
    \      end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn8lcgas.lua:43:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmphn8lcgas.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local t = {}\n \
    \ local is_prime = true\n  for i = 2, n do\n    for j = 2, i do\n      if i %\
    \ j == 0 and i ~= j then\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime then\n      table.insert(t, i)\n    end\n    is_prime\
    \ = true\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_79g22yq.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp_79g22yq.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n < 2 then\n\
    \    return {}\n  end\n  -- We will use the primes we have found to check if a\
    \ new number is prime.\n  local primes = {2}\n  local last_possible_prime = math.floor(math.sqrt(n))\n\
    \  -- For each number we need to check, we only need to check against the primes\
    \ before its square root.\n  for i = 3, n, 2 do\n    local is_prime = true\n \
    \   for _, prime in ipairs(primes) do\n      if prime > last_possible_prime then\n\
    \        break\n      end\n      if i % prime == 0 then\n        is_prime = false\n\
    \        break\n      end\n    end\n    if is_prime then\n      primes[#primes\
    \ + 1] = i\n    end\n  end\n  return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_a0fpzt.lua:45:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpj_a0fpzt.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n <= 0 then\n\
    \        return {}\n    end\n    local t = {}\n    local function is_prime(num)\n\
    \        if num == 1 then\n            return false\n        end\n        for\
    \ i = 2, num - 1 do\n            if num % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    for i\
    \ = 1, n do\n        if is_prime(i) then\n            table.insert(t, i)\n   \
    \     end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsohx6cmm.lua:43:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpsohx6cmm.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal primes = {}\n\
    \tfor i = 2, n do\n\t\tlocal is_prime = true\n\t\tfor j = 2, i - 1 do\n\t\t\t\
    if i % j == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tif is_prime then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\treturn\
    \ primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkj_mfq4j.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpkj_mfq4j.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    --\n    --  TODO:\
    \ implement this function\n    --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqiz6k0n7.lua:25:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpqiz6k0n7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- Write your\
    \ implementation here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpav42wft9.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpav42wft9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local tbl = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(tbl,\
    \ i)\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36z9kmui.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp36z9kmui.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp36z9kmui.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsi0lf_x.lua:22:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpgsi0lf_x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal l = {}\n\t\
    for i = 1, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(l, i)\n\t\tend\n\t\
    end\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgw0fd8c.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpjgw0fd8c.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpjgw0fd8c.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for _, p in\
    \ ipairs(primes) do\n            if i % p == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    return\
    \ primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97xuy3rp.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp97xuy3rp.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    for i = 2, n-1 do\n        if(is_prime(i)) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxc6dm4vs.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpxc6dm4vs.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpxc6dm4vs.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    if n == 0 then\n        return result\n    end\n    for i = 2, n do\n\
    \        if is_prime(i) then\n            table.insert(result, i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplamqvxbt.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmplamqvxbt.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmplamqvxbt.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffa7vk6s.lua:23:\
    \ expected: {2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpffa7vk6s.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  for i = 2, n do\n    local is_prime = true\n    for j = 2, i - 1 do\n     \
    \ if i % j == 0 then\n        is_prime = false\n        break\n      end\n   \
    \ end\n    if is_prime then\n      table.insert(primes, i)\n    end\n  end\n \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph74cg_dd.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmph74cg_dd.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n == 1 then\n\
    \        return {}\n    end\n    local primes = {}\n    local current_number =\
    \ 2\n    while current_number < n do\n        if is_prime(current_number) then\n\
    \            table.insert(primes, current_number)\n        end\n        current_number\
    \ = current_number + 1\n    end\n    return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5n1_qqlc.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5n1_qqlc.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp5n1_qqlc.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- TODO: YOUR\
    \ CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2g58cn1.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpt2g58cn1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local t = {}\n \
    \ for i = 2, n do\n    if is_prime(i) then\n      table.insert(t, i)\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx768x6la.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpx768x6la.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpx768x6la.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    return {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzso0fxtu.lua:23:\
    \ expected: {2, 3}\nactual: {2, 3, 5, 7, 11, 13, 17, 19}\nstack traceback:\n\t\
    /tmp/tmpzso0fxtu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- your code here\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_oiwj_7.lua:24:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpf_oiwj_7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local result = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(result, i)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty4zipev.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpty4zipev.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpty4zipev.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh18l3y3.lua:23:\
    \ expected: {2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmprh18l3y3.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmljk2q49.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmljk2q49.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmljk2q49.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal function is_prime(n)\n\
    \t\tif n <= 1 then\n\t\t\treturn false\n\t\telseif n == 2 then\n\t\t\treturn true\n\
    \t\telseif n % 2 == 0 then\n\t\t\treturn false\n\t\telse\n\t\t\tfor i = 3, math.sqrt(n),\
    \ 2 do\n\t\t\t\tif n % i == 0 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\
    end\n\t\t\treturn true\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwd938yj5.lua:49: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local ret = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprzyjs8b.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpprzyjs8b.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpprzyjs8b.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local found = {}\n    local max = math.floor(math.sqrt(n))\n\
    \    for i = 2, n do\n        local is_prime = true\n        for j = 2, max do\n\
    \            if i % j == 0 then\n                is_prime = false\n          \
    \      break\n            end\n        end\n        if is_prime then\n       \
    \     table.insert(found, i)\n        end\n    end\n    return found\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfcar5dtt.lua:40:\
    \ expected: {2, 3}\nactual: {3, 5}\nstack traceback:\n\t/tmp/tmpfcar5dtt.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- Your code here\n\
    \    local result={}\n    for i=2,n do\n        for j=2,i-1 do\n            if\
    \ i%j==0 then\n                break\n            elseif j==i-1 then\n       \
    \         table.insert(result,i)\n            end\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy_8fdis.lua:34:\
    \ expected: {2, 3}\nactual: {3, 5}\nstack traceback:\n\t/tmp/tmpqy_8fdis.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local count_table\
    \ = {}\n  for i = 2, n, 1 do\n    if is_prime(i) then\n      table.insert(count_table,\
    \ i)\n    end\n  end\n  return count_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvaplvlue.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvaplvlue.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpvaplvlue.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    for i = 2, n do\n        if not divisible(t, i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4d66tctw.lua:19:\
    \ attempt to call a nil value (global 'divisible')\nstack traceback:\n\t/tmp/tmp4d66tctw.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp4d66tctw.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsi0lf_x.lua:22:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpgsi0lf_x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local ret = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprzyjs8b.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpprzyjs8b.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpprzyjs8b.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh18l3y3.lua:23:\
    \ expected: {2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmprh18l3y3.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  if n == 0 then\n    return primes\n  end\n  local i = 2\n  while i < n do\n\
    \    local is_prime = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n\
    \        is_prime = false\n        break\n      end\n    end\n    if is_prime\
    \ then\n      table.insert(primes, i)\n    end\n    i = i + 1\n  end\n  return\
    \ primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsi0lf_x.lua:22:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpgsi0lf_x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local res = {}\n\
    \  if n == 0 then\n    return res\n  end\n  for i = 2, n do\n    if is_prime(i)\
    \ then\n      table.insert(res, i)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpexg24e8a.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpexg24e8a.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpexg24e8a.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local count_table\
    \ = {}\n    for i = 2, n do\n        count_table[i] = false\n    end\n    for\
    \ i = 2, n do\n        if not count_table[i] then\n            table.insert(count_table,\
    \ i)\n            local j = i\n            while i * j <= n do\n             \
    \   count_table[i * j] = true\n                j = j + 1\n            end\n  \
    \      end\n    end\n    return count_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7af4k7on.lua:37:\
    \ expected: {2, 3}\nactual: {2=false, 3=false, 4=true, 5=false, 6=2, 7=3, 8=5}\n\
    stack traceback:\n\t/tmp/tmp7af4k7on.lua:37: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- TODO: return\
    \ a table of prime numbers less than n\n    local r = {}\n    if n <= 0 then\n\
    \        return r\n    end\n    for i = 2, n - 1 do\n        if is_prime(i) then\n\
    \            table.insert(r, i)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwxhkpjz.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmwxhkpjz.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpmwxhkpjz.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsi0lf_x.lua:22:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpgsi0lf_x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n <= 1 then\n\
    \        return {}\n    end\n    local ret = {}\n    for i = 2, n - 1 do\n   \
    \     if is_prime(i) then\n            table.insert(ret, i)\n        end\n   \
    \ end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8xuu16fj.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp8xuu16fj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp8xuu16fj.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- do you know\
    \ the Sieve of Eratosthenes?\n    -- https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \    -- This is a good one to do at home!\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0um34zbl.lua:25:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmp0um34zbl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local primes = {}\n    for i = 2, n do\n    \
    \    local is_prime = true\n        for j = 2, i do\n            if i % j == 0\
    \ and j ~= i then\n                is_prime = false\n                break\n \
    \           end\n        end\n        if is_prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxqhwdih.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpqxqhwdih.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local mt = {}\n\
    \    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(mt,\
    \ i)\n        end\n    end\n    return mt\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpan6tlah7.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpan6tlah7.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpan6tlah7.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local first_prime_table\
    \ = {}\n  for i = 2, n do\n    if is_prime(i) then\n      table.insert(first_prime_table,\
    \ i)\n    end\n  end\n  return first_prime_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcypn0qcm.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpcypn0qcm.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpcypn0qcm.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n < 2 then\n\
    \    return {}\n  end\n  local table = {}\n  for i = 2, n, 1 do\n    if is_prime(i)\
    \ then\n      table[#table + 1] = i\n    end\n  end\n  return table\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfremdhxy.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpfremdhxy.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpfremdhxy.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmljk2q49.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmljk2q49.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmljk2q49.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- write your\
    \ code here\n    local prime = {2}\n    for i = 3, n do\n        for _, v in ipairs(prime)\
    \ do\n            if i % v == 0 then\n                break\n            elseif\
    \ v == prime[#prime] then\n                table.insert(prime, i)\n          \
    \  end\n        end\n    end\n    return prime\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcekcvsb2.lua:34:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpcekcvsb2.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local res = {}\n\
    \  local i = 1\n  while i < n do\n    if n % i == 0 then\n      res[#res + 1]\
    \ = i\n    end\n    i = i + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7s1z__w.lua:31:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmpa7s1z__w.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local tab = {}\n\
    \    for i = 2, n do\n        local ret = true\n        for j = 2, i - 1 do\n\
    \            if i % j == 0 then\n                ret = false\n               \
    \ break\n            end\n        end\n        if ret then\n            table.insert(tab,\
    \ i)\n        end\n    end\n    return tab\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu1mmpkh.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpyu1mmpkh.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n<2 then return\
    \ {} end\n    local primes = {}\n    for i=2,n do\n        local flag = true\n\
    \        for j=2,math.sqrt(i) do\n            if i%j==0 then\n               \
    \ flag = false\n                break\n            end\n        end\n        if\
    \ flag then\n            table.insert(primes,i)\n        end\n    end\n    return\
    \ primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkg80h4q.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpjkg80h4q.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n < 1 then\n\
    \    return {}\n  end\n  local result = {}\n  for i = 2, n do\n    local flag\
    \ = true\n    for j = 2, math.sqrt(i) do\n      if i % j == 0 then\n        flag\
    \ = false\n        break\n      end\n    end\n    if flag then\n      table.insert(result,\
    \ i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8ftwdmv.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpp8ftwdmv.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n <= 1 then\n\
    \    return {}\n  end\n  local primes = {}\n  for i = 2, n do\n    local is_prime\
    \ = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime\
    \ = false\n        break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0he00am.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp_0he00am.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    local i = 2\n    while i <= n do\n        local prime = true\n        for\
    \ j = 2, i-1 do\n            if i % j == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(t, i)\n        end\n        i = i + 1\n    end\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcdbp93k.lua:38:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpzcdbp93k.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal res = {}\n\
    \tif n > 0 then\n\t\tfor i = 2, n do\n\t\t\tlocal is_prime = true\n\t\t\tfor j\
    \ = 2, i - 1 do\n\t\t\t\tif i % j == 0 then\n\t\t\t\t\tis_prime = false\n\t\t\t\
    \t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif is_prime then\n\t\t\t\ttable.insert(res,\
    \ i)\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx6u0ke4.lua:38:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpvx6u0ke4.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local index = 1\n    local i = 2\n    while i < n do\n        if is_prime(i)\
    \ then\n            primes[index] = i\n            index = index + 1\n       \
    \ end\n        i = i + 1\n    end\n    return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr7guzhht.lua:21:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpr7guzhht.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpr7guzhht.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 1, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08lnixpn.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp08lnixpn.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp08lnixpn.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        -- the number of this loop\
    \ is greater than 2 and is not divided\n        -- by other number in the result\
    \ table, then it is a prime number.\n        if not has_factor(i, result) then\n\
    \            table.insert(result, i)\n        end\n        i = i + 1\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpykuu2voz.lua:22:\
    \ attempt to call a nil value (global 'has_factor')\nstack traceback:\n\t/tmp/tmpykuu2voz.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpykuu2voz.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwew63jio.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpwew63jio.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- start from\
    \ 2\n    local results = {}\n    for i = 2, n do\n        local is_prime = true\n\
    \        for j = 2, i-1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            table.insert(results, i)\n        end\n    end\n    return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtzicdk5.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmphtzicdk5.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmljk2q49.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmljk2q49.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmljk2q49.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh18l3y3.lua:23:\
    \ expected: {2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmprh18l3y3.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- return a table\
    \ containing {2, 3, 5, 7, 11, 13, 17, 19}\n    -- Hint: use math.mod()\n    --\
    \ Hint: use math.sqrt()\n    -- Hint: use a while-loop\n    local primes = {}\n\
    \    local table_index = 1\n    -- YOUR CODE HERE\n    local i = 2\n    while\
    \ i < n do\n        local isPrime = true\n        for j = 2, math.sqrt(i) do\n\
    \            if math.mod(i, j) == 0 then\n                isPrime = false\n  \
    \              break\n            end\n        end\n        if isPrime then\n\
    \            primes[table_index] = i\n            table_index = table_index +\
    \ 1\n        end\n        i = i + 1\n    end\n    return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpie8rmlvu.lua:28:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpie8rmlvu.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpie8rmlvu.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal t = {}\n\t\
    for i = 2, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(t, i)\n\t\tend\n\t\
    end\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxzmkkfc.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpgxzmkkfc.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpgxzmkkfc.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- Write your\
    \ code here\n    local result = {}\n    if (n < 2) then\n        return result\n\
    \    end\n    table.insert(result, 2)\n    for i = 3, n do\n        local is_prime\
    \ = true\n        for j = 2, i - 1 do\n            if (i % j == 0) then\n    \
    \            is_prime = false\n                break\n            end\n      \
    \  end\n        if (is_prime) then\n            table.insert(result, i)\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__jthn0v.lua:41:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp__jthn0v.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffa7vk6s.lua:23:\
    \ expected: {2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpffa7vk6s.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local c = {}\n \
    \ local i = 2\n  local b = false\n  while i < n do\n    for _, v in ipairs(c)\
    \ do\n      if i % v == 0 then\n        b = true\n        break\n      end\n \
    \   end\n    if not b then\n      table.insert(c, i)\n    end\n    b = false\n\
    \    i = i + 1\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh18l3y3.lua:23:\
    \ expected: {2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmprh18l3y3.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local prime = {}\n\
    \  local found = false\n  for i = 2, n do\n    for j = 2, i-1 do\n      if i %\
    \ j == 0 then\n        found = true\n        break\n      end\n    end\n    if\
    \ not found then\n      table.insert(prime, i)\n    end\n    found = false\n \
    \ end\n  return prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm993nv6.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpbm993nv6.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmljk2q49.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmljk2q49.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmljk2q49.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local ret = {}\n\
    \    local i = 1\n    while i <= n do\n        if is_prime(i) then\n         \
    \   table.insert(ret, i)\n        end\n        i = i + 1\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpad9eo6dy.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpad9eo6dy.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpad9eo6dy.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  -- implementation\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqd73cbsg.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpqd73cbsg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local table =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table[#table\
    \ + 1] = i\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8totf070.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp8totf070.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp8totf070.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal result = {}\n\
    \tfor i = 1, n, 1 do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(result, i)\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9is_ywpj.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp9is_ywpj.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp9is_ywpj.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local function isPrime(num)\n\
    \    local function is_divisible(num, divisor)\n      return num % divisor ==\
    \ 0\n    end\n    for i = 2, num - 1 do\n      if is_divisible(num, i) then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local primes\
    \ = {}\n  for i = 2, n do\n    if isPrime(i) then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobyxv8hu.lua:40:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpobyxv8hu.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if (n <= 0) then\n\
    \        return {}\n    end\n    if (n <= 2) then\n        return {2}\n    end\n\
    \    local primes = {2}\n    local candidate = 3\n    while (candidate < n) do\n\
    \        is_prime = true\n        for j, prime in ipairs(primes) do\n        \
    \    if (candidate % prime == 0) then\n                is_prime = false\n    \
    \            break\n            end\n        end\n        if (is_prime) then\n\
    \            table.insert(primes, candidate)\n        end\n        candidate =\
    \ candidate + 2\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjhac6lf.lua:50:\
    \ expected: {}\nactual: {2}\nstack traceback:\n\t/tmp/tmpcjhac6lf.lua:50: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        local isPrime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                isPrime = false\n  \
    \              break\n            end\n        end\n        if isPrime then\n\
    \            table.insert(result, i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2jqv4_o.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpx2jqv4_o.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local ret = {}\n\
    \    local function is_prime(x)\n        for i = 2, x - 1 do\n            if x\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    for i = 2, n do\n        if is_prime(i) then\n\
    \            table.insert(ret, i)\n        end\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6yx8hty.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpe6yx8hty.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local ret = {}\n    for i = 2, n - 1 do\n   \
    \     if is_prime(i) then\n            table.insert(ret, i)\n        end\n   \
    \ end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaa8dltx6.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpaa8dltx6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpaa8dltx6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal p = 2\n\t\
    local result = {}\n\twhile p < n do\n\t\ttable.insert(result, p)\n\t\tp = next_prime(p)\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpay9drcul.lua:21:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmpay9drcul.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpay9drcul.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n == 0 then\n\
    \    return {}\n  end\n  local result = {}\n  local current = 1\n  while current\
    \ < n do\n    current = current + 1\n    if is_prime(current) then\n      table.insert(result,\
    \ current)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptobfcr70.lua:24:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptobfcr70.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmptobfcr70.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local results =\
    \ {}\n  for i = 1, n do\n    if is_prime(i) then\n      table.insert(results,\
    \ i)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqoxgkl1k.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpqoxgkl1k.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpqoxgkl1k.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local result = {}\n    for i = 2, n do\n    \
    \    local prime = true\n        for j = 2, i - 1 do\n            if i % j ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(result, i)\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn9rb7os.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmphn9rb7os.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    primes={}\n  \
    \  for i=2,n do\n        is_prime=true\n        for j=2,i-1 do\n            if\
    \ i%j==0 then\n                is_prime=false\n                break\n       \
    \     end\n        end\n        if is_prime then\n            table.insert(primes,i)\n\
    \        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6s7g6xvy.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp6s7g6xvy.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local numbers = {}\n    local count = 0\n    for i = 2, n do\n     \
    \   numbers[i] = true\n    end\n    for i = 2, n do\n        if numbers[i] then\n\
    \            count = count + 1\n            result[count] = i\n            for\
    \ j = i + i, n, i do\n                numbers[j] = false\n            end\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvohvz4fi.lua:38:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpvohvz4fi.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal prime_numbers\
    \ = {}\n\tlocal count = 2\n\twhile count < n do\n\t\tlocal i = 2\n\t\twhile i\
    \ < count do\n\t\t\tif count % i == 0 then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\ti\
    \ = i + 1\n\t\tend\n\t\tif i == count then\n\t\t\ttable.insert(prime_numbers,\
    \ count)\n\t\tend\n\t\tcount = count + 1\n\tend\n\treturn prime_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    if n == 0 then\n        return result\n    end\n    for i = 2, n - 1\
    \ do\n        if is_prime(i) then\n            table.insert(result, i)\n     \
    \   end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp16_iijr5.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp16_iijr5.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp16_iijr5.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local nums = {}\n    local count = 0\n    for\
    \ i = 2, n do\n        nums[i] = true\n    end\n    for i = 2, n do\n        if\
    \ nums[i] then\n            local k = i * i\n            while k <= n do\n   \
    \             nums[k] = false\n                k = k + i\n            end\n  \
    \      end\n    end\n    local ret = {}\n    for i = 2, n do\n        if nums[i]\
    \ then\n            count = count + 1\n            ret[count] = i\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cy9htvg.lua:47:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp1cy9htvg.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local ret = {}\n\
    \    for i = 2, n do\n        local prime = true\n        for j = 2, i-1 do\n\
    \            if i % j == 0 then\n                prime = false\n             \
    \   break\n            end\n        end\n        if prime then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlorjsf7.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpnlorjsf7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n <= 0 then\n\
    \    return {}\n  end\n  local primes = {}\n  for i = 2, n do\n    if not is_divisible_by_any(i,\
    \ primes) then\n      table.insert(primes, i)\n    end\n  end\n  return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkj5w7k21.lua:22:\
    \ attempt to call a nil value (global 'is_divisible_by_any')\nstack traceback:\n\
    \t/tmp/tmpkj5w7k21.lua:22: in local 'candidate'\n\t/tmp/tmpkj5w7k21.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(result, i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjdujgqm.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpmjdujgqm.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n == 0 then\n\
    \    return {}\n  end\n  local primes = {}\n  for i = 2, n do\n    if is_prime(i)\
    \ then\n      table.insert(primes, i)\n    end\n  end\n  return primes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0udeoqa_.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp0udeoqa_.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp0udeoqa_.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n, 1 do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8m4c8zhl.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp8m4c8zhl.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp8m4c8zhl.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local primes = {}\n    local is_prime = {}\n\
    \    for i = 2, n do\n        is_prime[i] = true\n    end\n    for i = 2, n do\n\
    \        if is_prime[i] then\n            table.insert(primes, i)\n          \
    \  for j = i + i, n, i do\n                is_prime[j] = false\n            end\n\
    \        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jmcg84l.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp5jmcg84l.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for num = 2, n - 1 do\n        if is_prime(num) then\n            table.insert(primes,\
    \ num)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19608iyd.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp19608iyd.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp19608iyd.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local t = {}\n    local i = 2\n    while i <\
    \ n do\n        if is_prime(i) then\n            table.insert(t, i)\n        end\n\
    \        i = i + 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2m412sm.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmps2m412sm.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmps2m412sm.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local size = 0\n    local m = 2\n    while m < n do\n        if is_prime(m)\
    \ then\n            size = size + 1\n            result[size] = m\n        end\n\
    \        m = m + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3001q7xv.lua:21:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp3001q7xv.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp3001q7xv.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    if n <= 1 then\n        return t\n    end\n    for i = 2, n - 1 do\n    \
    \    t[i] = is_prime(i)\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_n5ruo1.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpw_n5ruo1.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpw_n5ruo1.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjyxdlpv.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpcjyxdlpv.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpcjyxdlpv.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal primes = {}\n\
    \tlocal i = 2\n\twhile i < n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes,\
    \ i)\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfbjsmzzc.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpfbjsmzzc.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpfbjsmzzc.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal primes={}\n\
    \tfor i=2,n-1 do\n\t\tlocal flag=1\n\t\tfor j=2,i-1 do\n\t\t\tif i%j==0 then\n\
    \t\t\t\tflag=0\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag==1 then\n\t\t\t\
    table.insert(primes,i)\n\t\tend\n\tend\n\treturn primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal nums = {}\n\
    \tlocal is_prime = true\n\tfor i = 2, n do\n\t\tfor j = 2, i-1 do\n\t\t\tif i\
    \ % j == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tif is_prime then\n\t\t\ttable.insert(nums, i)\n\t\tend\n\t\tis_prime = true\n\
    \tend\n\treturn nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevowewwh.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpevowewwh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    local function is_prime(m)\n        if m <= 1 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(m) do\n            if m % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rnexd06.lua:40:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp3rnexd06.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 1 then\n\
    \        return {}\n    end\n    local res = {}\n    for i = 2, n - 1 do\n   \
    \     if is_prime(i) then\n            table.insert(res, i)\n        end\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6edyqyp1.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6edyqyp1.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6edyqyp1.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  for i = 2, n - 1 do\n    if is_prime(i) then\n      table.insert(primes, i)\n\
    \    end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpury3yopo.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpury3yopo.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpury3yopo.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvas1bv0a.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpvas1bv0a.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocxt01wh.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpocxt01wh.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpocxt01wh.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal result = {}\n\
    \tlocal check = 2\n\tif n <= 1 then\n\t\treturn result\n\tend\n\twhile check <\
    \ n do\n\t\tif is_prime(check) then\n\t\t\ttable.insert(result, check)\n\t\tend\n\
    \t\tcheck = check + 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp83aia9o_.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp83aia9o_.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp83aia9o_.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local list = {}\n\
    \  local count = 1\n  local i = 2\n  while count <= n do\n    local is_prime =\
    \ true\n    for k, v in ipairs(list) do\n      if i % v == 0 then\n        is_prime\
    \ = false\n        break\n      end\n    end\n    if is_prime then\n      list[count]\
    \ = i\n      count = count + 1\n    end\n    i = i + 1\n  end\n  return list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaccscr5.lua:40:\
    \ expected: {2, 3}\nactual: {2, 3, 5, 7, 11}\nstack traceback:\n\t/tmp/tmppaccscr5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n <= 1 then\n\
    \        return {}\n    end\n    local num = {}\n    for i = 2, n do\n       \
    \ local count = 0\n        for j = 1, i do\n            if i % j == 0 then\n \
    \               count = count + 1\n            end\n        end\n        if count\
    \ == 2 then\n            table.insert(num, i)\n        end\n    end\n    return\
    \ num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqdl_vfq.lua:38:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmptqdl_vfq.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n < 2 then\n\
    \    return {}\n  end\n  local primes = {}\n  for i = 2, n do\n    if is_prime(i)\
    \ then\n      table.insert(primes, i)\n    end\n  end\n  return primes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmzrjbc3i.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmzrjbc3i.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpmzrjbc3i.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal primes = {}\n\
    \tfor i = 2, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes, i)\n\t\t\
    end\n\tend\n\treturn primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy69df9en.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpy69df9en.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpy69df9en.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local function helper(n,\
    \ cur)\n    if cur == n then\n      return {}\n    elseif is_prime(cur) then\n\
    \      return {cur} + helper(n, cur + 1)\n    else\n      return helper(n, cur\
    \ + 1)\n    end\n  end\n  return helper(n, 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_jrn4e9h.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_jrn4e9h.lua:20:\
    \ in function </tmp/tmp_jrn4e9h.lua:17>\n\t(...tail calls...)\n\t/tmp/tmp_jrn4e9h.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    if n > 1 then\n        for i = 2, n - 1 do\n            local is_prime\
    \ = true\n            for j = 2, i do\n                if i % j == 0 and j ~=\
    \ i then\n                    is_prime = false\n                    break\n  \
    \              end\n            end\n            if is_prime then\n          \
    \      table.insert(primes, i)\n            end\n        end\n    end\n    return\
    \ primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\t-- YOUR CODE HERE\n\
    \tlocal cnt_num = {}\n\tfor i = 2, n do\n\t\tlocal is_prime = true\n\t\tfor j\
    \ = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(cnt_num, i)\n\
    \t\tend\n\tend\n\treturn cnt_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybrl_j7l.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpybrl_j7l.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ic14z7z.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp1ic14z7z.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp1ic14z7z.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ic14z7z.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp1ic14z7z.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp1ic14z7z.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local c = 2\n    while c < n do\n        local isPrime = true\n    \
    \    for _, p in ipairs(primes) do\n            if c % p == 0 then\n         \
    \       isPrime = false\n                break\n            end\n        end\n\
    \        if isPrime then\n            table.insert(primes, c)\n        end\n \
    \       c = c + 1\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(primes, i)\n \
    \   end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiavf371g.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpiavf371g.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpiavf371g.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local table =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table[#table\
    \ + 1] = i\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8totf070.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp8totf070.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp8totf070.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local l = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(l,\
    \ i)\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplbze2q7f.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmplbze2q7f.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmplbze2q7f.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsi0lf_x.lua:22:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpgsi0lf_x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local num = n\n\
    \    local table = {}\n    for i = 2, n do\n        local is_prime = true\n  \
    \      local limit = math.floor(math.sqrt(i))\n        for j = 2, limit do\n \
    \           if i % j == 0 then\n                is_prime = false\n           \
    \     break\n            end\n        end\n        if is_prime then\n        \
    \    table[#table + 1] = i\n        end\n    end\n    return table\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0stglic.lua:38:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpv0stglic.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- TODO\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j71qq4h.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmp7j71qq4h.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal t = {}\n\t\
    for i = 2, n - 1 do\n\t\tlocal count = 0\n\t\tfor j = 1, i do\n\t\t\tif i % j\
    \ == 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count == 2\
    \ then\n\t\t\ttable.insert(t, i)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- body\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc37ywxyo.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpc37ywxyo.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local ret = {}\n\
    \    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2re0vubl.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp2re0vubl.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp2re0vubl.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal ret = {}\n\
    \tfor i = 2, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(ret, i)\n\t\tend\n\
    \tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuw2bcymn.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpuw2bcymn.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpuw2bcymn.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    for i = 2, n do\n        local flag = true\n        for j = 2, i - 1 do\n\
    \            if i % j == 0 then\n                flag = false\n              \
    \  break\n            end\n        end\n        if flag then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyiij6fo.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpoyiij6fo.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    if n < 2 then\n        return result\n    end\n    table.insert(result,\
    \ 2)\n    if n <= 2 then\n        return result\n    end\n    for i = 3, n, 2\
    \ do\n        local flag = true\n        for j = 3, math.sqrt(i), 2 do\n     \
    \       if i % j == 0 then\n                flag = false\n                break\n\
    \            end\n        end\n        if flag then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvtob23i.lua:43:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpgvtob23i.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local t = {}\n \
    \ local i = 1\n  while i < n do\n    if is_prime(i) then\n      table.insert(t,\
    \ i)\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplxznbzad.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmplxznbzad.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmplxznbzad.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primeTable\
    \ = {}\n    if n == 0 then\n        return {}\n    end\n    if n == 1 then\n \
    \       return {}\n    end\n    for i = 2, n - 1 do\n        if is_prime(i) then\n\
    \            table.insert(primeTable, i)\n        end\n    end\n    return primeTable\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt74wtj5e.lua:25:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpt74wtj5e.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpt74wtj5e.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- TODO: Implement\
    \ this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88pe4wxh.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmp88pe4wxh.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local function is_prime(m)\n        for i=2, m-1 do\n            if\
    \ m % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    for i=2, n do\n        if is_prime(i) then\n\
    \            table.insert(result, i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbabtftq.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpdbabtftq.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    return {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzso0fxtu.lua:23:\
    \ expected: {2, 3}\nactual: {2, 3, 5, 7, 11, 13, 17, 19}\nstack traceback:\n\t\
    /tmp/tmpzso0fxtu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal primes = {}\n\
    \tfor i = 2, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes, i)\n\t\t\
    end\n\tend\n\treturn primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy69df9en.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpy69df9en.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpy69df9en.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    if n < 2 then\n        return t\n    end\n    t[1] = 2\n    local j = 2\n\
    \    for i = 3, n do\n        local test = false\n        for k = 1, j - 1 do\n\
    \            if i % t[k] == 0 then\n                test = true\n            \
    \    break\n            end\n        end\n        if not test then\n         \
    \   t[j] = i\n            j = j + 1\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmyqbra6.lua:42:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpqmyqbra6.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local prime_list = {}\n    for i = 2, n do\n\
    \        local is_prime = true\n        for j = 2, math.sqrt(i) do\n         \
    \   if i % j == 0 then\n                is_prime = false\n                break\n\
    \            end\n        end\n        if is_prime then\n            table.insert(prime_list,\
    \ i)\n        end\n    end\n    return prime_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4mdbj7t.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpy4mdbj7t.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvas1bv0a.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpvas1bv0a.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n < 2 then\n\
    \    return {}\n  end\n  local f = {{n=2,p=true}}\n  for i=3,n,2 do\n    f[#f+1]\
    \ = {n=i,p=true}\n  end\n  for _,f1 in ipairs(f) do\n    for _,f2 in ipairs(f)\
    \ do\n      if f1.n~=f2.n and f2.n%f1.n==0 then\n        f2.p = false\n      end\n\
    \    end\n  end\n  local res = {}\n  for _,f1 in ipairs(f) do\n    if f1.p then\n\
    \      res[#res+1] = f1.n\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xa9rhna.lua:43:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp0xa9rhna.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- YOUR CODE HERE\n\
    \    local t = {}\n    for i = 2, n do\n        if is_prime(i) then\n        \
    \    table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp1hem07f.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpp1hem07f.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpp1hem07f.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local l = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(l,\
    \ i)\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplbze2q7f.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmplbze2q7f.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmplbze2q7f.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local tbl = {}\n\
    \  for i = 1, n do\n    if is_prime(i) then\n      table.insert(tbl, i)\n    end\n\
    \  end\n  return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnwo8isio.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpnwo8isio.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpnwo8isio.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local res = {}\n\
    \    if n <= 1 then\n        return res\n    end\n    res[1] = 2\n    local last\
    \ = 2\n    local count = 1\n    while last <= n do\n        local is_prime = true\n\
    \        local next = last + 1\n        while is_prime do\n            local _,\
    \ divisor = is_prime_number(next)\n            if divisor then\n             \
    \   next = next + 1\n            else\n                count = count + 1\n   \
    \             res[count] = next\n                last = next\n               \
    \ is_prime = false\n            end\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttgrf2k8.lua:28:\
    \ attempt to call a nil value (global 'is_prime_number')\nstack traceback:\n\t\
    /tmp/tmpttgrf2k8.lua:28: in local 'candidate'\n\t/tmp/tmpttgrf2k8.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- TODO: implement\
    \ the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef9tcryp.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpef9tcryp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local res = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(res,\
    \ i)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpflctromq.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpflctromq.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpflctromq.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local a = {}\n \
    \ local i = 2\n  while i < n do\n    if is_prime(i) then\n      table.insert(a,\
    \ i)\n    end\n    i = i + 1\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9l_vnt2_.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp9l_vnt2_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp9l_vnt2_.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    if n <= 1 then\n        return result\n    end\n    for i = 2, n do\n\
    \        if is_prime(i) then\n            table.insert(result, i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpko_ry4bj.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpko_ry4bj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpko_ry4bj.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal primes = {}\n\
    \tfor i = 2, n do\n\t\tlocal prime = true\n\t\tfor j = 2, i - 1 do\n\t\t\tif i\
    \ % j == 0 then\n\t\t\t\tprime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\t\
    if prime then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\treturn primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrq3489s.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwrq3489s.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n<2 then return\
    \ {} end\n    local nums={}\n    for i=2,n do\n        nums[i]=true\n    end\n\
    \    for i=2,math.sqrt(n) do\n        if nums[i] then\n            for j=i*i,n,i\
    \ do\n                nums[j]=false\n            end\n        end\n    end\n \
    \   local result={}\n    for i=2,n do\n        if nums[i] then\n            table.insert(result,i)\n\
    \        end\n    end\n    return result\nend\nprint(\"count_up_to(5) == {2, 3}\"\
    ,table.concat(count_up_to(5),\",\")==\"2,3\")\nprint(\"count_up_to(11) == {2,\
    \ 3, 5, 7}\",table.concat(count_up_to(11),\",\")==\"2,3,5,7\")\nprint(\"count_up_to(0)\
    \ == {}\",table.concat(count_up_to(0),\",\")==\"\")\nprint(\"count_up_to(20) ==\
    \ {2, 3, 5, 7, 11, 13, 17, 19}\",table.concat(count_up_to(20),\",\")==\"2,3,5,7,11,13,17,19\"\
    )\nprint(\"count_up_to(1) == {}\",table.concat(count_up_to(1),\",\")==\"\")\n\
    print(\"count_up_to(18) == {2, 3, 5, 7, 11, 13, 17}\",table.concat(count_up_to(18),\"\
    ,\")==\"2,3,5,7,11,13,17\")\nprint(\"-- END PROBLEM 3 --\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "count_up_to(5) == {2, 3}\tfalse\ncount_up_to(11) == {2, 3, 5, 7}\tfalse\n\
    count_up_to(0) == {}\ttrue\ncount_up_to(20) == {2, 3, 5, 7, 11, 13, 17, 19}\t\
    true\ncount_up_to(1) == {}\ttrue\ncount_up_to(18) == {2, 3, 5, 7, 11, 13, 17}\t\
    true\n-- END PROBLEM 3 --\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmp2u2bqckq.lua:48: expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\
    \t/tmp/tmp2u2bqckq.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    local p = 2\n    while (p < n) do\n        while (n % p == 0) do\n      \
    \      table.insert(t, p)\n            n = n / p\n        end\n        p = p +\
    \ 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_bwek9e.lua:32:\
    \ expected: {2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp3_bwek9e.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal new = {}\n\
    \tlocal c = 0\n\tfor i = 2, n do\n\t\tfor j = 2, i do\n\t\t\tif i % j == 0 then\n\
    \t\t\t\tc = c + 1\n\t\t\tend\n\t\tend\n\t\tif c == 1 then\n\t\t\ttable.insert(new,\
    \ i)\n\t\tend\n\t\tc = 0\n\tend\n\treturn new\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfimmyp2.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwfimmyp2.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    if n < 2 then\n        return result\n    end\n    local i = 2\n   \
    \ while i < n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi7cafot_.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpi7cafot_.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpi7cafot_.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local isPrime = true\n        for j = 2, i-1\
    \ do\n            if i % j == 0 then\n                isPrime = false\n      \
    \          break\n            end\n        end\n        if isPrime then\n    \
    \        table.insert(primes, i)\n        end\n    end\n    return primes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pni_de3.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp6pni_de3.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local table =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table[#table\
    \ + 1] = i\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8totf070.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp8totf070.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp8totf070.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal result = {}\n\
    \tlocal i = 1\n\twhile i < n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(result,\
    \ i)\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxe7suhs.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpyxe7suhs.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpyxe7suhs.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        local is_prime = true\n   \
    \     for j = 2, i-1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            table.insert(primes, i)\n        end\n        i = i + 1\n\
    \    end\n    return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  -- your code here\n\
    \  local list = {}\n  for i = 1, n do\n    if is_prime(i) then\n      table.insert(list,\
    \ i)\n    end\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwk2t365.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmwk2t365.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpmwk2t365.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local arr = {}\n\
    \    for i = 2, n - 1 do\n        local isPrime = true\n        for j = 2, i do\n\
    \            if i % j == 0 and i ~= j then\n                isPrime = false\n\
    \                break\n            end\n        end\n        if isPrime then\n\
    \            table.insert(arr, i)\n        end\n    end\n    return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local o = 1\n    for i = 2, n do\n        for j = 2, i do\n        \
    \    if i % j == 0 then\n                break\n            end\n            if\
    \ j == i then\n                primes[o] = i\n                o = o + 1\n    \
    \        end\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy4e2iu1.lua:36:\
    \ expected: {2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpmy4e2iu1.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmljk2q49.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmljk2q49.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmljk2q49.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- TODO: Implement\
    \ this function\n    -- Hint: You may want to use the is_prime function.\n   \
    \ -- Hint: The # operator can be used on tables.\n    local function  is_prime(n)\n\
    \        if n == 1 then\n            return false\n        end\n        if n ==\
    \ 2 then\n            return true\n        end\n        for i = 2, n - 1 do\n\
    \            if n % i == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local t = {}\n    for i = 1, n\
    \ do\n        if is_prime(i) then\n            t[#t + 1] = i\n        end\n  \
    \  end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhw8qt9g.lua:46:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpqhw8qt9g.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n <= 1 then\n\
    \        return {}\n    end\n    local t = {}\n    for i = 2, n - 1 do\n     \
    \   if is_prime(i) then\n            table.insert(t, i)\n        end\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_5f3yc2.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpi_5f3yc2.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpi_5f3yc2.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        local is_prime = true\n   \
    \     for j=2,i-1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            table.insert(result, i)\n        end\n        i = i + 1\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local ret = {}\n\
    \    for i = 2, n-1 do\n        if is_prime(i) then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphizn17ln.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmphizn17ln.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmphizn17ln.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local prime = true\n        for j = 2, i -\
    \ 1 do\n            if i % j == 0 then\n                prime = false\n      \
    \          break\n            end\n        end\n        if prime then\n      \
    \      table.insert(primes, i)\n        end\n    end\n    return primes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4nckjdt.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpk4nckjdt.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal function is_prime(n)\n\
    \t\tfor i = 2, math.sqrt(n) do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal primes = {}\n\tfor i = 2,\
    \ n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\
    \treturn primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq87nnttm.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpq87nnttm.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n <= 1 then\n\
    \        return {}\n    end\n    local t = {}\n    for i = 2, n do\n        t[i]\
    \ = true\n    end\n    local i = 2\n    while i * i <= n do\n        if t[i] then\n\
    \            local j = i * i\n            while j <= n do\n                t[j]\
    \ = false\n                j = j + i\n            end\n        end\n        i\
    \ = i + 1\n    end\n    local t2 = {}\n    for i = 2, n do\n        if t[i] then\n\
    \            table.insert(t2, i)\n        end\n    end\n    return t2\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_iw31c7.lua:47:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpo_iw31c7.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  -- fill in your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8d6fg6m7.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmp8d6fg6m7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local number = 2\n    while number < n do\n        if is_prime(number)\
    \ then\n            table.insert(result, number)\n        end\n        number\
    \ = number + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkxj0skkv.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkxj0skkv.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpkxj0skkv.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- YOUR CODE HERE\n\
    \    local t = {}\n    if (n < 2) then\n        return t\n    end\n    for i =\
    \ 2, n-1 do\n        if (is_prime(i)) then\n            table.insert(t, i)\n \
    \       end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1bmh5fw.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpc1bmh5fw.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpc1bmh5fw.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal function is_prime(n)\n\
    \t\tif n <= 1 then\n\t\t\treturn false\n\t\telseif n <= 3 then\n\t\t\treturn true\n\
    \t\telseif n % 2 == 0 or n % 3 == 0 then\n\t\t\treturn false\n\t\tend\n\t\tlocal\
    \ i = 5\n\t\twhile i * i <= n do\n\t\t\tif n % i == 0 or n % (i + 2) == 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\ti = i + 6\n\t\tend\n\t\treturn true\n\t\
    end\n\tlocal primes = {}\n\tfor i = 1, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes,\
    \ i)\n\t\tend\n\tend\n\treturn primes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpat6_bpdt.lua:46:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpat6_bpdt.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local result = {}\n    for i = 2, n - 1 do\n\
    \        if math.prime(i) then\n            table.insert(result, i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_4fo6bqc.lua:22:\
    \ attempt to call a nil value (field 'prime')\nstack traceback:\n\t/tmp/tmp_4fo6bqc.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_4fo6bqc.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    assert(n >= 0)\n\
    \    local primes = {}\n    for number = 2, n do\n        if is_prime(number)\
    \ then\n            table.insert(primes, number)\n        end\n    end\n    return\
    \ primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsc9g81_x.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpsc9g81_x.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpsc9g81_x.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tif n < 2 then\n\t\
    \treturn {}\n\tend\n\tlocal list = {}\n\tfor i = 2, n do\n\t\tlocal is_prime =\
    \ true\n\t\tfor j = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tis_prime =\
    \ false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(list,\
    \ i)\n\t\tend\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw17jwoa.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpqw17jwoa.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  if n < 1 then\n\
    \    return {}\n  end\n  local t = {}\n  local i = 2\n  while i < n do\n    local\
    \ j = 1\n    local is_prime = true\n    while is_prime and j < #t do\n      if\
    \ i % t[j] == 0 then\n        is_prime = false\n      end\n      j = j + 1\n \
    \   end\n    if is_prime then\n      t[#t + 1] = i\n    end\n    i = i + 1\n \
    \ end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal result = {}\n\
    \tfor i = 2, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(result, i)\n\t\t\
    end\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd1ygi754.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpd1ygi754.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpd1ygi754.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local function is_prime(m)\n\
    \    for i = 2, m - 1 do\n      if m % i == 0 then\n        return false\n   \
    \   end\n    end\n    return true\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzwojangt.lua:41: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 1, n - 1 do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphzi_nrac.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmphzi_nrac.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmphzi_nrac.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  -- your solution\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdx80qurw.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpdx80qurw.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp1jst0yv.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpp1jst0yv.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpp1jst0yv.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- your code goes\
    \ here\n    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1ma3o9q.lua:24:\
    \ expected: {2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpu1ma3o9q.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh18l3y3.lua:23:\
    \ expected: {2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmprh18l3y3.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009100
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n == 0 then\n\
    \        return {}\n    end\n    if n == 1 then\n        return {}\n    end\n\
    \    local tb = {}\n    for i = 2, n do\n        local count = 0\n        for\
    \ j = 1, i do\n            if i % j == 0 then\n                count = count +\
    \ 1\n            end\n        end\n        if count == 2 then\n            table.insert(tb,\
    \ i)\n        end\n    end\n    return tb\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrxqzd11.lua:41:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpmrxqzd11.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    local i = 2\n    while i < n do\n        if is_prime(i) then\n          \
    \  table.insert(t, i)\n        end\n        i = i + 1\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwjp96vf.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkwjp96vf.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpkwjp96vf.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 1 then\n\
    \        return {}\n    end\n    local primes = {}\n    for i = 2, n do\n    \
    \    local prime = true\n        for j = 2, i - 1 do\n            if i % j ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    return primes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvviwko_7.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpvviwko_7.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjyxdlpv.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpcjyxdlpv.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpcjyxdlpv.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 1\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowhkn6w1.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpowhkn6w1.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpowhkn6w1.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal t = {}\n\t\
    local i = 1\n\twhile i < n do\n\t\tlocal k = n - i\n\t\tlocal j = 1\n\t\twhile\
    \ j < k do\n\t\t\tlocal x = k - j\n\t\t\tif x % j == 0 then\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\tif j == k then\n\t\t\ttable.insert(t, k)\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8tfkvw0.lua:40:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmpf8tfkvw0.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal temp = {}\n\
    \tfor i = 2, n do\n\t\ttemp[i] = true\n\tend\n\tfor i = 2, n do\n\t\tif temp[i]\
    \ then\n\t\t\tlocal j = i + i\n\t\t\twhile j <= n do\n\t\t\t\ttemp[j] = false\n\
    \t\t\t\tj = j + i\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor i = 2,\
    \ n do\n\t\tif temp[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75vdqre4.lua:42:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp75vdqre4.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ a table of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n\tlocal table = {}\n\
    \tfor i = 2, n do\n\t\tlocal isPrime = true\n\t\tfor j = 2, i do\n\t\t\tif i %\
    \ j == 0 and i ~= j then\n\t\t\t\tisPrime = false\n\t\t\tend\n\t\tend\n\t\tif\
    \ isPrime then\n\t\t\ttable[#table + 1] = i\n\t\tend\n\tend\n\treturn table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3l25fevc.lua:35:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp3l25fevc.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009101
