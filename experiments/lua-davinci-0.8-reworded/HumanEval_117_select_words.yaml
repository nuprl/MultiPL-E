name: HumanEval_117_select_words
language: lua
prompt: "-- Given a string s and a natural number n, you have been tasked to implement\
  \ \n-- a function that returns a table of all words from string s that contain exactly\
  \ \n-- n consonants, in order these words appear in the string s.\n-- If the string\
  \ s is empty then the function should return an empty table.\n-- Note: you may assume\
  \ the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words('Mary\
  \ had a little lamb', 4)\n-- {'little'}\n-- >>> select_words('Mary had a little\
  \ lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>> select_words('simple white space', 2)\n\
  -- {}\n-- >>> select_words('Hello world', 4)\n-- {'world'}\n-- >>> select_words('Uncle\
  \ sam', 3)\n-- {'Uncle'}\nlocal function select_words(s, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
  \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary\
  \ had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
  \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
  \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
  \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if #s == 0 then return {} end\n    local words = {}\n    local\
    \ word = ''\n    local function count_consonants(s)\n        local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z'}\n        local count = 0\n        for i = 1, #s do\n\
    \            for k, v in pairs(consonants) do\n                if s:sub(i, i)\
    \ == v then\n                    count = count + 1\n                end\n    \
    \        end\n        end\n        return count\n    end\n    for i = 1, #s do\n\
    \        if s:sub(i, i) ~= ' ' then\n            word = word .. s:sub(i, i)\n\
    \        else\n            if count_consonants(word) == n then\n             \
    \   table.insert(words, word)\n            end\n            word = ''\n      \
    \  end\n    end\n    if count_consonants(word) == n then\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "  if #s == 0 then return {} end\n \
    \ local s = s:lower()\n  local consonants = 'bcdfghjklmnpqrstvwxyz'\n  local result\
    \ = {}\n  for word in s:gmatch('%w+') do\n    local count = 0\n    for char in\
    \ word:gmatch('.') do\n      if consonants:find(char) then count = count + 1 end\n\
    \    end\n    if count == n then table.insert(result, word) end\n  end\n  return\
    \ result\nend", "  -- your code here\nend", "    local t = {}\n    for word in\
    \ s:gmatch(\"%S+\") do\n        local nc = 0\n        for c in word:gmatch(\"\
    %a\") do\n            nc = nc + (vowels[c] and 0 or 1)\n        end\n        if\
    \ nc == n then\n            t[#t+1] = word\n        end\n    end\n    return t\n\
    end", "\tlocal t = {}\n\tlocal u = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\tlocal\
    \ c = 0\n\t\tfor i = 1, w:len() do\n\t\t\tlocal ch = w:sub(i, i)\n\t\t\tif not\
    \ VOWELS[ch] then\n\t\t\t\tc = c + 1\n\t\t\tend\n\t\tend\n\t\tif c == n then\n\
    \t\t\ttable.insert(t, w)\n\t\tend\n\tend\n\treturn t\nend", "    s = s:lower()\n\
    \    local word = ''\n    local words = {}\n    local vowels = 'aeiou'\n    local\
    \ count = 0\n    for i = 1, s:len() do\n        local letter = s:sub(i, i)\n \
    \       if letter ~= ' ' then\n            word = word .. letter\n        else\n\
    \            for j = 1, vowels:len() do\n                if word:find(vowels:sub(j,\
    \ j)) then\n                    count = count + 1\n                end\n     \
    \       end\n            if count == n then\n                table.insert(words,\
    \ word)\n            end\n            word = ''\n            count = 0\n     \
    \   end\n    end\n    return words\nend", "    -- write your code here\nend",
  "  local function is_consonant(c)\n    return not c:match(\"[aeiouAEIOU]\")\n  end\n\
    \  local result = {}\n  for word in s:gmatch(\"%S+\") do\n    local count = 0\n\
    \    for i = 1, #word do\n      count = count + (is_consonant(word:sub(i, i))\
    \ and 1 or 0)\n    end\n    if count == n then\n      table.insert(result, word)\n\
    \    end\n  end\n  return result\nend", "    local words = {}\n    for word in\
    \ s:gmatch('%w+') do\n        local count = 0\n        for c in word:gmatch('[^aeiou]')\
    \ do\n            count = count + 1\n        end\n        if count == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end", "  local t = {}\n  local w = ''\n  for c in s:gmatch('%w') do\n    w = w\
    \ .. c\n  end\n  for wd in w:gmatch('%S+') do\n    if wd:match('[aeiou]') then\n\
    \      t[#t+1] = wd\n    end\n  end\n  return t\nend", "    local words = {}\n\
    \    for word in s:gmatch('%w+') do\n        if #word == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend", "    if s == \"\" then\n\
    \        return {}\n    end\n    local words = {}\n    local cons = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'z'}\n    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    for word in\
    \ s:gmatch(\"%S+\") do\n        local cons_cnt = 0\n        for char in word:gmatch(\"\
    %a\") do\n            if (not t_contains(vowels, char)) then\n               \
    \ cons_cnt = cons_cnt + 1\n            end\n        end\n        if cons_cnt ==\
    \ n then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend", "    local words = {}\n    if s == \"\" then return words end\n\
    \    local count = 0\n    for word in s:gmatch(\"%w+\") do\n        for letter\
    \ in word:gmatch(\"%a\") do\n            if letter:find(\"[^aeiouAEIOU]\") then\
    \ count = count + 1 end\n        end\n        if count == n then table.insert(words,\
    \ word) end\n        count = 0\n    end\n    return words\nend", "\tlocal t =\
    \ {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tlocal num = 0\n\t\tfor letter in\
    \ word:gmatch(\"[^aeiou]\") do\n\t\t\tnum = num + 1\n\t\tend\n\t\tif num == n\
    \ then\n\t\t\ttable.insert(t, word)\n\t\tend\n\tend\n\treturn t\nend", "    local\
    \ words = {}\n    local word = {}\n    for c in s:gmatch\".\" do\n        if c:match(\"\
    %a\") then\n            table.insert(word, c)\n        else\n            if #word\
    \ == n then\n                table.insert(words, table.concat(word))\n       \
    \     end\n            word = {}\n        end\n    end\n    if #word == n then\n\
    \        table.insert(words, table.concat(word))\n    end\n    return words\n\
    end", "    local w = {}\n    for x in s:gmatch(\"%S+\") do\n        if #consonants(x)\
    \ == n then\n            table.insert(w, x)\n        end\n    end\n    return\
    \ w\nend", "    -- your code here\nend", "\tlocal t = {}\n\ts:gsub('%w+', function(w)\n\
    \t\tif #w:gsub('[aeiou]', '') == n then\n\t\t\tt[#t+1] = w\n\t\tend\n\tend)\n\t\
    return t\nend", end, "    local t = {}\n    local w = {}\n    local function is_vowel(c)\n\
    \        return c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\n   \
    \ end\n    local function count_consonants(w)\n        local n = 0\n        for\
    \ c in w:gmatch(\"%a\") do\n            if not is_vowel(c) then\n            \
    \    n = n + 1\n            end\n        end\n        return n\n    end\n    for\
    \ m in s:gmatch(\"%w+\") do\n        table.insert(t, m)\n    end\n    for _, w\
    \ in ipairs(t) do\n        if count_consonants(w) == n then\n            table.insert(w,\
    \ w)\n        end\n    end\n    return w\nend", "  if #s == 0 then return {} end\n\
    \  local t = {}\n  for k, v in string.gmatch(s, '%a+') do\n    local n_consonants\
    \ = 0\n    for l in string.gmatch(v, '[^aeiou]') do\n      n_consonants = n_consonants\
    \ + 1\n    end\n    if n_consonants == n then\n      table.insert(t, v)\n    end\n\
    \  end\n  return t\nend", "    local words = {}\n    for word in s:gmatch('%a+')\
    \ do\n        local v = count_consonants(word)\n        if v == n then\n     \
    \       table.insert(words, word)\n        end\n    end\n    return words\nend",
  "  local words = {}\n  for w in s:gmatch('%S+') do\n    local ncons = w:gsub('[aeiou]',\
    \ ''):len()\n    if ncons == n then\n      table.insert(words, w)\n    end\n \
    \ end\n  return words\nend", "\tlocal s = s:lower()\n\tlocal consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n\tlocal words = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tlocal numConsonants\
    \ = 0\n\t\tfor char in word:gmatch(\".\") do\n\t\t\tif consonants:find(char) then\n\
    \t\t\t\tnumConsonants = numConsonants + 1\n\t\t\tend\n\t\tend\n\t\tif numConsonants\
    \ == n then\n\t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\treturn words\n\
    end", "  -- TODO: your code here\nend", end, "    local word_table = {}\n    local\
    \ word_count = 0\n    for word in s:gmatch(\"%S+\") do\n        local consonant_count\
    \ = 0\n        for letter in word:gmatch(\"%a\") do\n            if not letter:match(\"\
    [aeiouAEIOU]\") then\n                consonant_count = consonant_count + 1\n\
    \            end\n        end\n        if consonant_count == n then\n        \
    \    word_table[word_count] = word\n            word_count = word_count + 1\n\
    \        end\n    end\n    return word_table\nend", "  local selected = {}\n \
    \ for word in s:gmatch('%S+') do\n    local consonants = 0\n    for char in word:gmatch('%w')\
    \ do\n      if ('BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'):find(char) then\n\
    \        consonants = consonants + 1\n      end\n    end\n    if consonants ==\
    \ n then\n      table.insert(selected, word)\n    end\n  end\n  return selected\n\
    end", "    local words = {}\n    for word in s:gmatch('%w+') do\n        if word:gsub('[aeiou]',\
    \ ''):len() == n then\n            table.insert(words, word)\n        end\n  \
    \  end\n    return words\nend", "  local function is_consonant(c)\n    return\
    \ c:match(\"[^aeiouAEIOU]\")\n  end\n  local words = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    local num_consonants = 0\n    for char in word:gmatch(\".\") do\n\
    \      if is_consonant(char) then\n        num_consonants = num_consonants + 1\n\
    \      end\n    end\n    if num_consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend", "    local res = {}\n    for word\
    \ in s:gmatch('%w+') do\n        if (word:gsub('[aeiou]', ''):len() == n) then\n\
    \            table.insert(res, word)\n        end\n    end\n    return res\nend",
  "    local words = {}\n    for word in s:gmatch('%S+') do\n        if consonants(word)\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend", "    local words = {}\n    for word in s:gmatch('%S+') do\n\
    \        local temp = word:gsub('[aeiou]', '')\n        if #temp == n then\n \
    \           table.insert(words, word)\n        end\n    end\n    return words\n\
    end", "    -- TODO: Implement the function here\nend", "  local dict = {}\n  for\
    \ word in s:gmatch(\"%w+\") do\n    if word:gsub(\"[^bcdfghjklmnpqrstvwxyz]\"\
    , \"\") and word:gsub(\"[^bcdfghjklmnpqrstvwxyz]\", \"\") == word:gsub(\"[^bcdfghjklmnpqrstvwxyz]\"\
    , \"\") and #word:gsub(\"[^bcdfghjklmnpqrstvwxyz]\", \"\") == n then\n      table.insert(dict,\
    \ word)\n    end\n  end\n  return dict\nend", "  local words = {}\n  for word\
    \ in s:gmatch('%w+') do\n    local non_vowels = 0\n    for char in word:gmatch('%w')\
    \ do\n      if not char:find('[aeiou]') then\n        non_vowels = non_vowels\
    \ + 1\n      end\n    end\n    if non_vowels == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend", "    local t = {}\n    local regexp\
    \ = \"([^ ]+)\"\n    local count = 0\n    local cons = 'bcdfghjklmnpqrstvwxyz'\n\
    \    for word in string.gmatch(s, regexp) do\n        for i = 1, #word do\n  \
    \          if cons:find(word:sub(i, i)) then\n                count = count +\
    \ 1\n            end\n        end\n        if count == n then\n            table.insert(t,\
    \ word)\n        end\n        count = 0\n    end\n    return t\nend", "  local\
    \ result = {}\n  local s = s:lower()\n  local words = s:split(\" \")\n  for _,\
    \ word in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word:split(\"\
    \")) do\n      if char ~= \"a\" and char ~= \"e\" and char ~= \"i\" and char ~=\
    \ \"o\" and char ~= \"u\" then\n        count = count + 1\n      end\n    end\n\
    \    if count == n then\n      table.insert(result, word)\n    end\n  end\n  return\
    \ result\nend", "  local c = 0\n  local words = {}\n  local word = {}\n  for char\
    \ in s:gmatch(\".\") do\n    if char:find(\"%a\") then\n      c = c + 1\n    \
    \  table.insert(word, char)\n    else\n      if c == n then\n        table.insert(words,\
    \ table.concat(word))\n      end\n      c = 0\n      word = {}\n    end\n  end\n\
    \  if c == n then\n    table.insert(words, table.concat(word))\n  end\n  return\
    \ words\nend", "\t-- placeholder\nend", "    local words = {}\n    for word in\
    \ s:gmatch('%w+') do\n        if num_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend", "\tlocal words = {}\n\t\
    local word = \"\"\n\tlocal word_counter = 0\n\tfor i = 1, string.len(s) do\n\t\
    \tif string.sub(s, i, i) ~= \" \" then\n\t\t\tword = word .. string.sub(s, i,\
    \ i)\n\t\telse\n\t\t\tif count_consonants(word) == n then\n\t\t\t\twords[word_counter]\
    \ = word\n\t\t\t\tword_counter = word_counter + 1\n\t\t\tend\n\t\t\tword = \"\"\
    \n\t\tend\n\tend\n\tif count_consonants(word) == n then\n\t\twords[word_counter]\
    \ = word\n\tend\n\treturn words\nend", "    -- print(s, n)\n    local words =\
    \ {}\n    local tmp = {}\n    local count = 0\n    for word in string.gmatch(s,\
    \ \"%w+\") do\n        table.insert(tmp, word)\n    end\n    for _, word in ipairs(tmp)\
    \ do\n        count = 0\n        for letter in string.gmatch(word, \"[^aeiouyAEIOUY]+\"\
    ) do\n            count = count + 1\n        end\n        if count == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end", "  local res = {}\n  for w in s:gmatch('%w+') do\n    if w:gsub('[aeiouy]',\
    \ ''):len() == n then\n      res[#res + 1] = w\n    end\n  end\n  return res\n\
    end", "  local consonants = {['b'] = true, ['c'] = true, ['d'] = true, ['f'] =\
    \ true, ['g'] = true, ['h'] = true, ['j'] = true, ['k'] = true, ['l'] = true,\
    \ ['m'] = true, ['n'] = true, ['p'] = true, ['q'] = true, ['r'] = true, ['s']\
    \ = true, ['t'] = true, ['v'] = true, ['w'] = true, ['x'] = true, ['y'] = true,\
    \ ['z'] = true}\n  local words = {}\n  local sub = ''\n  local count = 0\n  local\
    \ temp = ''\n  local ans = {}\n  for i = 1, #s do\n    sub = string.sub(s, i,\
    \ i)\n    if (string.find(sub, ' ') ~= nil) then\n      table.insert(words, temp)\n\
    \      temp = ''\n    else\n      temp = temp .. sub\n    end\n  end\n  table.insert(words,\
    \ temp)\n  for i = 1, #words do\n    count = 0\n    for j = 1, #words[i] do\n\
    \      sub = string.sub(words[i], j, j)\n      if (consonants[sub] == true) then\n\
    \        count = count + 1\n      end\n    end\n    if (count == n) then\n   \
    \   table.insert(ans, words[i])\n    end\n  end\n  return ans\nend", "  -- body\n\
    end", "    local words = {}\n    for word in s:gmatch('%w+') do\n        if #word\
    \ - word:gsub('[aeiouAEIOU]', ''):len() == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend", "    local result = {}\n\
    \    local words = {}\n    for word in s:gmatch(\"%w+\") do table.insert(words,\
    \ word) end\n    for _, word in ipairs(words) do\n        local consonants = 0\n\
    \        for letter in word:gmatch(\"%a\") do\n            if not is_vowel(letter)\
    \ then consonants = consonants + 1 end\n        end\n        if consonants ==\
    \ n then table.insert(result, word) end\n    end\n    return result\nend", "\t\
    local t = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tif count_consonants(word)\
    \ == n then\n\t\t\ttable.insert(t, word)\n\t\tend\n\tend\n\treturn t\nend", "\t\
    local words = {}\n\tlocal word = ''\n\tfor i = 1, #s do\n\t\tif s:sub(i, i) ~=\
    \ ' ' then\n\t\t\tword = word .. s:sub(i, i)\n\t\telse\n\t\t\tlocal consonants\
    \ = 0\n\t\t\tfor j = 1, #word do\n\t\t\t\tif not string.find('aeiouAEIOU', word:sub(j,\
    \ j)) then\n\t\t\t\t\tconsonants = consonants + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\
    \tif consonants == n then\n\t\t\t\ttable.insert(words, word)\n\t\t\tend\n\t\t\t\
    word = ''\n\t\tend\n\tend\n\tif #word > 0 then\n\t\tlocal consonants = 0\n\t\t\
    for j = 1, #word do\n\t\t\tif not string.find('aeiouAEIOU', word:sub(j, j)) then\n\
    \t\t\t\tconsonants = consonants + 1\n\t\t\tend\n\t\tend\n\t\tif consonants ==\
    \ n then\n\t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\treturn words\nend",
  "    -- your code here\nend", "    local res = {}\n    for w in s:gmatch('%w+')\
    \ do\n        if (w:gsub('[AEIOUaeiou]', ''):len() == n) then\n            table.insert(res,\
    \ w)\n        end\n    end\n    return res\nend", "    local words = s:split()\n\
    \    local result = {}\n    for _, word in ipairs(words) do\n        if is_word_valid(word,\
    \ n) then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ result\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal result\
    \ = {}\n\tfor word in s:gmatch('%w+') do\n\t\tlocal count = 0\n\t\tfor letter\
    \ in word:gmatch('%a') do\n\t\t\tif not vowels[letter] then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\t\tif count == n then\n\t\t\tresult[#result + 1] =\
    \ word\n\t\tend\n\tend\n\treturn result\nend", "  local words = {}\n  local current_word\
    \ = {}\n  local num_consonants = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  for c in s:gmatch\".\" do\n    local is_space = c == ' '\n    local is_vowel\
    \ = false\n    for _, v in ipairs(vowels) do\n      if c == v then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_space or is_vowel then\n\
    \      if num_consonants == n then\n        words[#words + 1] = table.concat(current_word)\n\
    \      end\n      current_word = {}\n      num_consonants = 0\n    else\n    \
    \  current_word[#current_word + 1] = c\n      num_consonants = num_consonants\
    \ + 1\n    end\n  end\n  return words\nend", "    s = s:lower()\n    s = s:gsub('[^%a\
    \ ]', '')\n    local words = s:split(' ')\n    local c = {a = 1, e = 1, i = 1,\
    \ o = 1, u = 1}\n    local consonants = {}\n    for i, v in ipairs(words) do\n\
    \        local nc = 0\n        for k, l in v:gmatch('%l') do\n            if not\
    \ c[l] then\n                nc = nc + 1\n            end\n        end\n     \
    \   if nc == n then\n            table.insert(consonants, v)\n        end\n  \
    \  end\n    return consonants\nend", "  local words = {}\n  local word = ''\n\
    \  local consonants = 0\n  local vowels = 0\n  for c in s:gmatch('%w') do\n  \
    \  if c == ' ' then\n      if word ~= '' then\n        if consonants == n then\n\
    \          table.insert(words, word)\n        end\n        word = ''\n       \
    \ consonants = 0\n        vowels = 0\n      end\n    else\n      if not (c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u') then\n        consonants\
    \ = consonants + 1\n      else\n        vowels = vowels + 1\n      end\n     \
    \ word = word .. c\n    end\n  end\n  if word ~= '' then\n    if consonants ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend",
  "\tlocal words = {}\n\tlocal word = ''\n\tlocal word_count = 0\n\tfor i = 1, #s\
    \ do\n\t\tif s:sub(i, i) == ' ' then\n\t\t\tif word_count == n then\n\t\t\t\t\
    table.insert(words, word)\n\t\t\tend\n\t\t\tword = ''\n\t\t\tword_count = 0\n\t\
    \telse\n\t\t\tif s:sub(i, i) ~= 'a' and s:sub(i, i) ~= 'e' and s:sub(i, i) ~=\
    \ 'i' and s:sub(i, i) ~= 'o' and s:sub(i, i) ~= 'u' then\n\t\t\t\tword_count =\
    \ word_count + 1\n\t\t\tend\n\t\t\tword = word .. s:sub(i, i)\n\t\tend\n\tend\n\
    \tif word_count == n then\n\t\ttable.insert(words, word)\n\tend\n\treturn words\n\
    end", "    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    local words = {}\n  \
    \  local s_start = s:find('%S')\n    local s_end = s:find('%s')\n    local counter\
    \ = 0\n    if s_start == nil then\n        return {}\n    end\n    if s_end ==\
    \ nil then\n        s_end = s:len()\n    end\n    for i = s_start, s_end do\n\
    \        for j = 1, #consonants do\n            if s:sub(i, i) == consonants[j]\
    \ then\n                counter = counter + 1\n            end\n        end\n\
    \    end\n    if counter == n then\n        table.insert(words, s:sub(s_start,\
    \ s_end))\n    end\n    if s_end + 1 > s:len() then\n        return words\n  \
    \  end\n    s = s:sub(s_end + 1, s:len())\n    return select_words(s, n)\nend",
  "  -- Write the body of this function\nend", "    local t = {}\n    for w in s:gmatch('%w+')\
    \ do\n        local count = #w - w:gsub('[aeiou]', ''):len()\n        if count\
    \ == n then\n            t[#t + 1] = w\n        end\n    end\n    return t\nend",
  "  -- your implementation here\nend", "    local words = {}\n    local current_word\
    \ = \"\"\n    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == \" \" then\n            if count == n then\n           \
    \     table.insert(words, current_word)\n            end\n            current_word\
    \ = \"\"\n            count = 0\n        else\n            if not contains(c,\
    \ VOWELS) then\n                count = count + 1\n            end\n         \
    \   current_word = current_word .. c\n        end\n    end\n    if count == n\
    \ then\n        table.insert(words, current_word)\n    end\n    return words\n\
    end", "\tlocal res = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tlocal nc = 0\n\
    \t\tfor c in word:gmatch(\"[^aeiouAEIOU]\") do\n\t\t\tnc = nc + 1\n\t\tend\n\t\
    \tif nc == n then\n\t\t\ttable.insert(res, word)\n\t\tend\n\tend\n\treturn res\n\
    end", "    local vowels = {['a'] = true, ['e'] = true, ['i'] = true, ['o'] = true,\
    \ ['u'] = true}\n    local words = {}\n    for word in s:gmatch('%S+') do\n  \
    \      local count = 0\n        for char in word:gmatch('%a') do\n           \
    \ if not vowels[char:lower()] then\n                count = count + 1\n      \
    \      end\n        end\n        if count == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend", "    if not s or n < 0\
    \ then\n        return {}\n    end\n    local ret = {}\n    local cnt = 0\n  \
    \  local result = \"\"\n    for i = 1, string.len(s) do\n        local c = string.sub(s,\
    \ i, i)\n        if c == \" \" then\n            if cnt == n then\n          \
    \      table.insert(ret, result)\n            end\n            cnt = 0\n     \
    \       result = \"\"\n        elseif c ~= \"a\" and c ~= \"e\" and c ~= \"i\"\
    \ and c ~= \"o\" and c ~= \"u\" then\n            cnt = cnt + 1\n            result\
    \ = result .. c\n        end\n    end\n    if cnt == n then\n        table.insert(ret,\
    \ result)\n    end\n    return ret\nend", "  -- your implementation\nend", " \
    \   local words = {}\n    local consonants = 'bcdfghjklmnpqrstvwxyz'\n    for\
    \ w in s:gmatch('%w+') do\n        local word = w:lower()\n        local count\
    \ = 0\n        for l in word:gmatch('[^aeiou]') do\n            if consonants:find(l)\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    if count == n then\n            table.insert(words, w)\n        end\n   \
    \ end\n    return words\nend", end, "\tlocal words = {}\n\tlocal result = {}\n\
    \tfor word in s:gmatch(\"%w+\") do\n\t\twords[#words + 1] = word\n\tend\n\tfor\
    \ i = 1, #words do\n\t\tlocal count = 0\n\t\tfor j = 1, #words[i] do\n\t\t\tif\
    \ not words[i]:sub(j, j):match(\"[aAeEiIoOuU]\") then\n\t\t\t\tcount = count +\
    \ 1\n\t\t\tend\n\t\tend\n\t\tif count == n then\n\t\t\tresult[#result + 1] = words[i]\n\
    \t\tend\n\tend\n\treturn result\nend", "\t-- The set of words containing exactly\
    \ n consonants.\n\tlocal words = {}\n\t-- Words to search for n consonants.\n\t\
    for word in s:gmatch('%S+') do\n\t\t-- Count consonants in the word.\n\t\tlocal\
    \ n_consonants = 0\n\t\tfor letter in word:gmatch('%w') do\n\t\t\tif not letter:match('[aeiouy]')\
    \ then\n\t\t\t\tn_consonants = n_consonants + 1\n\t\t\tend\n\t\tend\n\t\t-- Check\
    \ if the word satisfies the requirement.\n\t\tif n_consonants == n then\n\t\t\t\
    words[#words + 1] = word\n\t\tend\n\tend\n\treturn words\nend", "  local t = {}\n\
    \  local n = n\n  local words = {}\n  for match in string.gmatch(s, \"[^%s]+\"\
    ) do\n    table.insert(words, match)\n  end\n  for _, v in ipairs(words) do\n\
    \    local count = count_consonants(v)\n    if count == n then\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend", "    local words = {}\n    if s == ''\
    \ then\n        return words\n    end\n    for w in s:gmatch('%w+') do\n     \
    \   local vowels = w:gsub('[^aeiouAEIOU]', '')\n        if n == w:len() - vowels:len()\
    \ then\n            table.insert(words, w)\n        end\n    end\n    return words\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local words = {}\n  \
    \  local word = ''\n    local count = 0\n    for i = 1, #s do\n        if s:sub(i,\
    \ i) ~= ' ' then\n            word = word .. s:sub(i, i)\n        else\n     \
    \       local cur_count = 0\n            for j = 1, #word do\n               \
    \ local is_vowel = false\n                for k = 1, #vowels do\n            \
    \        if word:sub(j, j) == vowels[k] then\n                        is_vowel\
    \ = true\n                        break\n                    end\n           \
    \     end\n                if not is_vowel then\n                    cur_count\
    \ = cur_count + 1\n                end\n            end\n            if cur_count\
    \ == n then\n                words[#words + 1] = word\n            end\n     \
    \       word = ''\n        end\n    end\n    local cur_count = 0\n    for j =\
    \ 1, #word do\n        local is_vowel = false\n        for k = 1, #vowels do\n\
    \            if word:sub(j, j) == vowels[k] then\n                is_vowel = true\n\
    \                break\n            end\n        end\n        if not is_vowel\
    \ then\n            cur_count = cur_count + 1\n        end\n    end\n    if cur_count\
    \ == n then\n        words[#words + 1] = word\n    end\n    return words\nend",
  "    local consonants = 'bcdfghjklmnpqrstvwxyz'\n    local vowels = 'aeiou'\n  \
    \  local words = {}\n    local i = 1\n    while i <= #s do\n        local word\
    \ = {}\n        local consonantCount = 0\n        while i <= #s and s:sub(i, i)\
    \ ~= ' ' do\n            local ch = s:sub(i, i)\n            if consonants:find(ch,\
    \ 1, true) then\n                consonantCount = consonantCount + 1\n       \
    \     end\n            word[#word + 1] = ch\n            i = i + 1\n        end\n\
    \        if consonantCount == n then\n            words[#words + 1] = table.concat(word)\n\
    \        end\n        while i <= #s and s:sub(i, i) == ' ' do\n            i =\
    \ i + 1\n        end\n    end\n    return words\nend", "    local t = {}\n   \
    \ local cons = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    local word = ''\n    local word_count\
    \ = 0\n    for i = 1, #s do\n        for j = 1, #cons do\n            if s:sub(i,\
    \ i) == cons[j] then\n                word_count = word_count + 1\n          \
    \  end\n        end\n        if s:sub(i, i) == ' ' then\n            if word_count\
    \ == n then\n                table.insert(t, word)\n            end\n        \
    \    word = ''\n            word_count = 0\n        else\n            word = word\
    \ .. s:sub(i, i)\n        end\n    end\n    if word_count == n then\n        table.insert(t,\
    \ word)\n    end\n    return t\nend", "    s = s..' '\n    local t = {}\n    local\
    \ k = 1\n    local w = ''\n    local count = 0\n    local cons = 'bcdfghjklmnpqrstvwxyz'\n\
    \    for i = 1, #s do\n        if s:sub(i, i) == ' ' then\n            if count\
    \ == n then\n                t[k] = w\n                k = k + 1\n           \
    \ end\n            w = ''\n            count = 0\n        else\n            w\
    \ = w..s:sub(i, i)\n            if cons:find(s:sub(i, i)) then\n             \
    \   count = count + 1\n            end\n        end\n    end\n    return t\nend",
  end, "    if not s then return {} end\n    local words = {}\n    for word in s:gmatch('%w+')\
    \ do\n        if n_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend", "  local function get_words(s)\n\
    \    local t = {}\n    for w in s:gmatch('%w+') do\n      t[#t + 1] = w\n    end\n\
    \    return t\n  end\n  local function count_consonants(s)\n    local s = s:lower()\n\
    \    local consonants = 0\n    for i = 1, #s do\n      if s:sub(i, i):match('[bcdfghjklmnpqrstvwxyz]')\
    \ then\n        consonants = consonants + 1\n      end\n    end\n    return consonants\n\
    \  end\n  local function unique(t)\n    local unique = {}\n    for _, v in ipairs(t)\
    \ do\n      if not unique[v] then\n        unique[v] = true\n      end\n    end\n\
    \    return unique\n  end\n  local words = get_words(s)\n  local words_with_n_consonants\
    \ = {}\n  for _, w in ipairs(words) do\n    if count_consonants(w) == n then\n\
    \      words_with_n_consonants[#words_with_n_consonants + 1] = w\n    end\n  end\n\
    \  return unique(words_with_n_consonants)\nend", "    local words = {}\n    for\
    \ word in s:gmatch('%S+') do\n        if (word:gsub('[aeiou]', ''):len() == n)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend", "    if #s == 0 then return {} end\n    local count_consonants\
    \ = 0\n    local consonants = {}\n    local word = {}\n    local selected_words\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == '\
    \ ' then\n            if count_consonants == n then\n                table.insert(selected_words,\
    \ table.concat(word))\n            end\n            count_consonants = 0\n   \
    \         word = {}\n        else\n            if not consonants[c] then\n   \
    \             count_consonants = count_consonants + 1\n            end\n     \
    \       table.insert(word, c)\n        end\n    end\n    if count_consonants ==\
    \ n then\n        table.insert(selected_words, table.concat(word))\n    end\n\
    \    return selected_words\nend", "  local t = {}\n  local words = split(s, '\
    \ ')\n  for _, w in ipairs(words) do\n    if count_consonants(w) == n then table.insert(t,\
    \ w) end\n  end\n  return t\nend", "    local result = {}\n    local pre_space_idx\
    \ = 1\n    local space_idx = string.find(s, ' ', pre_space_idx)\n    while space_idx\
    \ do\n        local word = string.sub(s, pre_space_idx, space_idx - 1)\n     \
    \   if count_consonants(word) == n then\n            table.insert(result, word)\n\
    \        end\n        pre_space_idx = space_idx + 1\n        space_idx = string.find(s,\
    \ ' ', pre_space_idx)\n    end\n    if count_consonants(string.sub(s, pre_space_idx))\
    \ == n then\n        table.insert(result, string.sub(s, pre_space_idx))\n    end\n\
    \    return result\nend", "    -- TODO: Your code here!\n    -- all_words = {}\n\
    \    -- for w in string.gmatch(s, '%a+') do table.insert(all_words, w) end\n \
    \   -- return all_words\n    local words = {}\n    for w in string.gmatch(s, '%a+')\
    \ do\n        local nc = 0\n        for c in string.gmatch(w, '[^aeiouAEIOU]')\
    \ do\n            nc = nc + 1\n        end\n        if nc == n then table.insert(words,\
    \ w) end\n    end\n    return words\nend", "    local words, word, i = {}, ''\n\
    \    for c in s:gmatch('.') do\n        if c:match('%a') then\n            word\
    \ = word .. c\n        elseif #word > 0 then\n            if consonants(word)\
    \ == n then\n                table.insert(words, word)\n            end\n    \
    \        word = ''\n        end\n    end\n    if #word > 0 and consonants(word)\
    \ == n then\n        table.insert(words, word)\n    end\n    return words\nend",
  end, "  local res = {}\n  local vowels = {a = true, e = true, i = true, o = true,\
    \ u = true}\n  for w in s:gmatch('%S+') do\n    local c = 0\n    for char in w:gmatch('%l')\
    \ do\n      if not vowels[char:lower()] then\n        c = c + 1\n      end\n \
    \   end\n    if c == n then\n      res[#res + 1] = w\n    end\n  end\n  return\
    \ res\nend", "    local consonants = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K',\
    \ 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'}\n    local\
    \ res = {}\n    for word in s:gmatch('%S+') do\n        local count = 0\n    \
    \    for letter in word:gmatch('%u') do\n            if utils.contains(consonants,\
    \ letter) then\n                count = count + 1\n            end\n        end\n\
    \        if count == n then\n            table.insert(res, word)\n        end\n\
    \    end\n    return res\nend", "  -- your implementation goes here\nend", " \
    \   local t = {}\n    for word in s:gmatch(\"%S+\") do\n        local cnt = 0\n\
    \        for c in word:gmatch(\"[bcdfghjklmnpqrstvwxz]\") do\n            cnt\
    \ = cnt + 1\n        end\n        if cnt == n then\n            table.insert(t,\
    \ word)\n        end\n    end\n    return t\nend", "\tlocal words = {}\n\tlocal\
    \ word = {}\n\tfor char in s:gmatch('%a') do\n\t\tif #word == 0 and char == '\
    \ ' then\n\t\t\t-- skip spaces at the beginning of the string\n\t\telseif char\
    \ == ' ' then\n\t\t\tif #word == n then\n\t\t\t\ttable.insert(words, table.concat(word))\n\
    \t\t\tend\n\t\t\tword = {}\n\t\telse\n\t\t\ttable.insert(word, char)\n\t\tend\n\
    \tend\n\tif #word == n then\n\t\ttable.insert(words, table.concat(word))\n\tend\n\
    \treturn words\nend", end, "    local words = {}\n    for word in s:gmatch('%w+')\
    \ do\n        if select(2, word:gsub('[^aeiou]', '')) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend", "    -- your code here\n\
    \    local words = {}\n    local consonants = {}\n    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local res = {}\n    local flag = 0\n    for i = 1, string.len(s)\
    \ do\n        if not string.find(string.sub(s, i, i), '[a-zA-Z ]') then\n    \
    \        words[i] = \" \"\n        else\n            words[i] = string.sub(s,\
    \ i, i)\n        end\n    end\n    for _, v in ipairs(words) do\n        flag\
    \ = 0\n        for _, x in ipairs(vowels) do\n            if v == x then\n   \
    \             flag = 1\n            end\n        end\n        if flag == 0 then\n\
    \            table.insert(consonants, v)\n        end\n    end\n    local temp\
    \ = {}\n    local tmp = 0\n    local tmp_flag = 0\n    local flag2 = 0\n    for\
    \ i = 1, string.len(s) do\n        tmp_flag = 0\n        if words[i] == \" \"\
    \ then\n            tmp = 0\n            if #temp ~= 0 then\n                for\
    \ j = 1, #temp do\n                    tmp = tmp + 1\n                    if not\
    \ table.contains(vowels, temp[j]) then\n                        tmp = tmp + 1\n\
    \                    end\n                end\n                if tmp == n then\n\
    \                    flag2 = 0\n                    for _, v in ipairs(res) do\n\
    \                        if v == table.concat(temp) then\n                   \
    \         flag2 = 1\n                        end\n                    end\n  \
    \                  if flag2 == 0 then\n                        table.insert(res,\
    \ table.concat(temp))\n                    end\n                end\n        \
    \    end\n            temp = {}\n        else\n            tmp_flag = 1\n    \
    \        table.insert(temp, words[i])\n        end\n    end\n    if tmp_flag ==\
    \ 1 then\n        tmp = 0\n        for j = 1, #temp do\n            tmp = tmp\
    \ + 1\n            if not table.contains(vowels, temp[j]) then\n             \
    \   tmp = tmp + 1\n            end\n        end\n        if tmp ==", "   local\
    \ words = {}\n   local start = 1\n   local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \   local test = function(x)\n   \tfor i = 1, #vowels do\n   \t\tif x == vowels[i]\
    \ then\n   \t\t\treturn true\n   \t\tend\n   \tend\n   \treturn false\n   end\n\
    \   for i = 1, #s do\n   \tif s:sub(i, i) == ' ' then\n   \t\tlocal word = s:sub(start,\
    \ i-1)\n   \t\tlocal count = 0\n   \t\tfor j = 1, #word do\n   \t\t\tif not test(word:sub(j,\
    \ j)) then\n   \t\t\t\tcount = count + 1\n   \t\t\tend\n   \t\tend\n   \t\tif\
    \ count == n then\n   \t\t\ttable.insert(words, word)\n   \t\tend\n   \t\tstart\
    \ = i + 1\n   \tend\n   end\n   return words\nend", "    local words = {}\n  \
    \  for w in s:gmatch('%w+') do\n        if #w == n then table.insert(words, w)\
    \ end\n    end\n    return words\nend", "\tlocal words = {}\n\tfor w in s:gmatch(\"\
    %w+\") do\n\t\tif #w == n then\n\t\t\ttable.insert(words, w)\n\t\tend\n\tend\n\
    \treturn words\nend", "    local words = {}\n    for w in s:gmatch('%w+') do\n\
    \        if count_consonants(w) == n then\n            table.insert(words, w)\n\
    \        end\n    end\n    return words\nend", "\tlocal function is_consonant(letter)\n\
    \t\tlocal c = letter:lower()\n\t\treturn c ~= 'a' and c ~= 'e' and c ~= 'i' and\
    \ c ~= 'o' and c ~= 'u'\n\tend\n\tlocal function count_consonants(word)\n\t\t\
    local count = 0\n\t\tfor c in word:gmatch(\".\") do\n\t\t\tif is_consonant(c)\
    \ then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\n\
    \tlocal words = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\tif count_consonants(word)\
    \ == n then\n\t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\treturn words\n\
    end", "    local words = {}\n    local pattern = \"[%a]+\"\n    for word in s:gmatch(pattern)\
    \ do\n        if #string.gsub(word, \"[aeiou]\", \"\") == n then\n           \
    \ table.insert(words, word)\n        end\n    end\n    return words\nend", " \
    \ local words = {}\n  for w in s:gmatch('%w+') do\n    local nc = 0\n    for c\
    \ in w:gmatch('[^aeiou]') do\n      nc = nc + 1\n    end\n    if nc == n then\n\
    \      table.insert(words, w)\n    end\n  end\n  return words\nend", "  local\
    \ vowels = {a=true,e=true,i=true,o=true,u=true}\n  local words = {}\n  local word\
    \ = \"\"\n  local num_consonants = 0\n  for c in s:gmatch(\"%w\") do\n    if vowels[c:lower()]\
    \ then\n      if num_consonants == n then\n        words[#words+1] = word\n  \
    \    end\n      word = \"\"\n      num_consonants = 0\n    else\n      word =\
    \ word .. c\n      num_consonants = num_consonants + 1\n    end\n  end\n  if num_consonants\
    \ == n then\n    words[#words+1] = word\n  end\n  return words\nend", end, " \
    \   return {}\nend", "  local consonants = 'bcdfghjklmnpqrstvwxyz'\n  local words\
    \ = {}\n  local t = ''\n  for i = 1, s:len() do\n    local v = s:sub(i, i)\n \
    \   if v == ' ' then\n      table.insert(words, t)\n      t = ''\n    else\n \
    \     t = t .. v\n    end\n  end\n  table.insert(words, t)\n  local result = {}\n\
    \  for i = 1, #words do\n    local counter = 0\n    for j = 1, words[i]:len()\
    \ do\n      if consonants:find(words[i]:sub(j, j)) then\n        counter = counter\
    \ + 1\n      end\n    end\n    if counter == n then\n      table.insert(result,\
    \ words[i])\n    end\n  end\n  return result\nend", "  local words = {}\n  for\
    \ word in s:gmatch('%S+') do\n    local consonants = 0\n    for letter in word:gmatch('%l')\
    \ do\n      if not ('aeiou'):find(letter, 1, true) then\n        consonants =\
    \ consonants + 1\n      end\n    end\n    if consonants == n then\n      words[#words\
    \ + 1] = word\n    end\n  end\n  return words\nend", "\tlocal t = {}\n\tlocal\
    \ iter = 0\n\tfor word in s:gmatch(\"%S+\") do\n\t\tlocal count = 0\n\t\tfor letter\
    \ in word:gmatch(\"%a\") do\n\t\t\tif letter:match(\"[^aeiouAEIOU]\") then\n\t\
    \t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count == n then\n\t\t\tt[iter]\
    \ = word\n\t\t\titer = iter + 1\n\t\tend\n\tend\n\treturn t\nend", "\twords =\
    \ {}\n\tlocal i = 1\n\tlocal is_word = false\n\tlocal word = ''\n\tfor c in s:gmatch('.')\
    \ do\n\t\tif c == ' ' then\n\t\t\tis_word = false\n\t\t\tif #word == n then\n\t\
    \t\t\twords[i] = word\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\t\tword = ''\n\t\telse\n\
    \t\t\tif not is_word then\n\t\t\t\tis_word = true\n\t\t\tend\n\t\t\tword = word\
    \ .. c\n\t\tend\n\tend\n\tif #word == n then\n\t\twords[i] = word\n\tend\n\treturn\
    \ words\nend", "  local res = {}\n  for word in s:gmatch(\"%w+\") do\n    local\
    \ has_n_consonants = true\n    for char in word:gmatch(\"[aeiou]\") do\n     \
    \ has_n_consonants = false\n      break\n    end\n    if word:len() == n and has_n_consonants\
    \ then\n      table.insert(res, word)\n    end\n  end\n  return res\nend\nprint(table.concat(select_words('Mary\
    \ had a little lamb', 4), ' '))\nprint(table.concat(select_words('Mary had a little\
    \ lamb', 3), ' '))\nprint(table.concat(select_words('simple white space', 2),\
    \ ' '))\nprint(table.concat(select_words('Hello world', 4), ' '))\nprint(table.concat(select_words('Uncle\
    \ sam', 3), ' '))", "    local res = {}\n    for v in s:gmatch(\"%w+\") do\n \
    \       local len = v:gsub(\"[^aeiouAEIOU]\", \"\"):len()\n        if len == n\
    \ then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end", "    local words = {}\n    local word = ''\n    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local i = 1\n    local last = ''\n    while i <= #s do\n\
    \        if s:sub(i, i) == ' ' then\n            if #word == n then\n        \
    \        words[#words + 1] = word\n            end\n            last = ''\n  \
    \          word = ''\n        else\n            if last ~= s:sub(i, i) then\n\
    \                last = s:sub(i, i)\n                if not vowels[last] then\n\
    \                    word = word .. last\n                end\n            end\n\
    \        end\n        i = i + 1\n    end\n    if #word == n then\n        words[#words\
    \ + 1] = word\n    end\n    return words\nend", "  local words = {}\n  for w in\
    \ s:gmatch('%w+') do\n    if consonants(w) == n then\n      table.insert(words,\
    \ w)\n    end\n  end\n  return words\nend", "  local t = {}\n  local word, cnt\
    \ = \"\", 0\n  for c in s:gmatch(\"%a\") do\n    word = word .. c\n    if c:match(\"\
    [^aeiou]\") then\n      cnt = cnt + 1\n    end\n    if c:match(\"%s\") then\n\
    \      if cnt == n then\n        t[#t + 1] = word:match(\"^(%a+)\")\n      end\n\
    \      word, cnt = \"\", 0\n    end\n  end\n  if cnt == n then\n    t[#t + 1]\
    \ = word:match(\"^(%a+)\")\n  end\n  return t\nend", "\tlocal t = {}\n\tlocal\
    \ c = 0\n\tfor w in s:gmatch('%S+') do\n\t\tfor i = 1, #w do\n\t\t\tlocal l =\
    \ w:sub(i, i)\n\t\t\tif not l:match('[aeiou]') then\n\t\t\t\tc = c + 1\n\t\t\t\
    end\n\t\tend\n\t\tif c == n then\n\t\t\ttable.insert(t, w)\n\t\tend\n\t\tc = 0\n\
    \tend\n\treturn t\nend", "    local words = {}\n    local xs = split(s, ' ')\n\
    \    for i = 1, #xs do\n        local ys = split(xs[i], '')\n        local num\
    \ = 0\n        for j = 1, #ys do\n            if ys[j] ~= 'a' and ys[j] ~= 'e'\
    \ and ys[j] ~= 'i' and ys[j] ~= 'o' and ys[j] ~= 'u' then\n                num\
    \ = num + 1\n            end\n        end\n        if num == n then\n        \
    \    words[#words + 1] = xs[i]\n        end\n    end\n    return words\nend",
  "\tlocal t = {}\n\t-- no elements or nil?\n\tif not s or not #s then\n\t\treturn\
    \ t\n\tend\n\tlocal s = s:lower()\n\tlocal start = 1\n\tlocal fin = 1\n\tlocal\
    \ cnt\n\tfor i = 1, #s do\n\t\t-- reached a space?\n\t\tif s:sub(i, i) == ' '\
    \ then\n\t\t\tfin = i - 1\n\t\t\t-- count consonants\n\t\t\tcnt = 0\n\t\t\tfor\
    \ k = start, fin do\n\t\t\t\tif not CONSONANTS[s:sub(k, k)] then\n\t\t\t\t\tcnt\
    \ = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\t-- if number of consonants = n?\n\t\
    \t\tif cnt == n then\n\t\t\t\tt[#t + 1] = s:sub(start, fin)\n\t\t\tend\n\t\t\t\
    start = i + 1\n\t\tend\n\tend\n\t-- last word\n\tfin = #s\n\tcnt = 0\n\tfor k\
    \ = start, fin do\n\t\tif not CONSONANTS[s:sub(k, k)] then\n\t\t\tcnt = cnt +\
    \ 1\n\t\tend\n\tend\n\tif cnt == n then\n\t\tt[#t + 1] = s:sub(start, fin)\n\t\
    end\n\treturn t\nend", "\tlocal st = \"\"\n\tlocal t = {}\n\tlocal words = {}\n\
    \tfor i = 1, string.len(s) do\n\t\tlocal c = string.sub(s, i, i)\n\t\tif c ~=\
    \ \" \" then\n\t\t\tst = st .. c\n\t\telse\n\t\t\ttable.insert(t, st)\n\t\t\t\
    st = \"\"\n\t\tend\n\tend\n\tif st ~= \"\" then\n\t\ttable.insert(t, st)\n\tend\n\
    \tfor _, v in ipairs(t) do\n\t\tlocal cnt = 0\n\t\tfor i = 1, string.len(v) do\n\
    \t\t\tlocal c = string.sub(v, i, i)\n\t\t\tif c ~= \"a\" and c ~= \"e\" and c\
    \ ~= \"i\" and c ~= \"o\" and c ~= \"u\" and c ~= \"y\" then\n\t\t\t\tcnt = cnt\
    \ + 1\n\t\t\tend\n\t\tend\n\t\tif cnt == n then\n\t\t\ttable.insert(words, v)\n\
    \t\tend\n\tend\n\treturn words\nend", "    local function count_consonants(word)\n\
    \        word = word:gsub('[aeiouAEIOU]', '')\n        return #word\n    end\n\
    \    local result = {}\n    for word in s:gmatch('%w+') do\n        if count_consonants(word)\
    \ == n then\n            table.insert(result, word)\n        end\n    end\n  \
    \  return result\nend", "  -- write your code here\nend", "    local result =\
    \ {}\n    for word in s:gmatch('%w+') do\n        local counter = 0\n        for\
    \ i = 1, #word do\n            if not word:sub(i, i):match('[aeiou]') then\n \
    \               counter = counter + 1\n            end\n        end\n        if\
    \ counter == n then\n            table.insert(result, word)\n        end\n   \
    \ end\n    return result\nend", "    local words = {}\n    for w in s:gmatch('%w+')\
    \ do\n        if count_consonants(w) == n then\n            table.insert(words,\
    \ w)\n        end\n    end\n    return words\nend", "    local words = {}\n  \
    \  local current_word = ''\n    local counter = 0\n    for i = 1, #s do\n    \
    \    local char = s:sub(i, i)\n        if char ~= ' ' then\n            if not\
    \ is_vowel(char) then\n                counter = counter + 1\n            end\n\
    \            current_word = current_word .. char\n        else\n            if\
    \ counter == n then\n                table.insert(words, current_word)\n     \
    \       end\n            current_word = ''\n            counter = 0\n        end\n\
    \    end\n    if counter == n then\n        table.insert(words, current_word)\n\
    \    end\n    return words\nend", "  local res = {}\n  for w in s:gmatch('%S+')\
    \ do\n    if consonants(w) == n then\n      res[#res + 1] = w\n    end\n  end\n\
    \  return res\nend", "    if #s == 0 then\n        return {}\n    end\n    local\
    \ words = {}\n    local word_buf = {}\n    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    for i = 1, #s do\n        if s:sub(i, i) == ' ' then\n           \
    \ if #word_buf > 0 then\n                table.insert(words, table.concat(word_buf))\n\
    \                word_buf = {}\n            end\n        else\n            table.insert(word_buf,\
    \ s:sub(i, i))\n        end\n    end\n    if #word_buf > 0 then\n        table.insert(words,\
    \ table.concat(word_buf))\n    end\n    local result = {}\n    for i = 1, #words\
    \ do\n        local count = 0\n        for j = 1, #words[i] do\n            if\
    \ not vowels[words[i]:sub(j, j)] then\n                count = count + 1\n   \
    \         end\n        end\n        if count == n then\n            table.insert(result,\
    \ words[i])\n        end\n    end\n    return result\nend", "\tlocal words = {}\n\
    \tlocal count = 0\n\tlocal len = string.len(s)\n\tlocal word = {}\n\tfor c in\
    \ string.gmatch(s, '.') do\n\t\tif c == ' ' then\n\t\t\tif count == n then\n\t\
    \t\t\twords[#words + 1] = table.concat(word)\n\t\t\tend\n\t\t\tcount = 0\n\t\t\
    \tword = {}\n\t\telse\n\t\t\tword[#word + 1] = c\n\t\t\tif not is_vowel(c) then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tif count == n then\n\t\
    \twords[#words + 1] = table.concat(word)\n\tend\n\treturn words\nend", "    local\
    \ t = {}\n    for w in s:gmatch('%w+') do\n        if #w == n then\n         \
    \   table.insert(t, w)\n        end\n    end\n    return t\nend", "    -- TODO\n\
    end", "  local consonants = {\n    'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'\n  }\n  local map = {}\n\
    \  for _, c in ipairs(consonants) do\n    map[c] = 0\n  end\n  local result =\
    \ {}\n  local word = ''\n  for c in s:gmatch('.') do\n    if c == ' ' then\n \
    \     if map[word] == n then\n        table.insert(result, word)\n      end\n\
    \      word = ''\n    else\n      word = word .. c\n    end\n  end\n  if map[word]\
    \ == n then\n    table.insert(result, word)\n  end\n  return result\nend", " \
    \ local m = s:match('[^%s]+')\n  local function next_word(s)\n    local next_s,\
    \ next_m = s:match('%s*([^%s]+)%s*(.*)')\n    return next_s, next_m and next_m:match('[^%s]+')\n\
    \  end\n  local result = {}\n  for k = 1, #s do\n    if #m == n and count_consonants(m)\
    \ == n then\n      result[#result + 1] = m\n    end\n    s, m = next_word(s)\n\
    \  end\n  return result\nend", "    local words = {}\n    local word_count = 0\n\
    \    local current_word = {}\n    local vowel = { 'a', 'e', 'i', 'o', 'u' }\n\
    \    local function is_vowel(char)\n        for i = 1, #vowel do\n           \
    \ if char == vowel[i] then\n                return true\n            end\n   \
    \     end\n        return false\n    end\n    for i = 1, #s do\n        local\
    \ char = s:sub(i, i)\n        if char == ' ' then\n            if #current_word\
    \ > 0 then\n                if #current_word == n then\n                    words[#words\
    \ + 1] = table.concat(current_word)\n                end\n                current_word\
    \ = {}\n            end\n        else\n            if not is_vowel(char) then\n\
    \                current_word[#current_word + 1] = char\n            end\n   \
    \     end\n    end\n    if #current_word > 0 then\n        if #current_word ==\
    \ n then\n            words[#words + 1] = table.concat(current_word)\n       \
    \ end\n    end\n    return words\nend", "    local words = {}\n    local curr_word\
    \ = ''\n    local function count_consonants(w)\n        local consonants = 0\n\
    \        for i = 1, #w do\n            if not is_vowel(w:sub(i, i)) then\n   \
    \             consonants = consonants + 1\n            end\n        end\n    \
    \    return consonants\n    end\n    for c in s:gmatch('.') do\n        if c ==\
    \ ' ' then\n            if #curr_word > 0 then\n                if count_consonants(curr_word)\
    \ == n then\n                    table.insert(words, curr_word)\n            \
    \    end\n                curr_word = ''\n            end\n        else\n    \
    \        curr_word = curr_word .. c\n        end\n    end\n    if #curr_word >\
    \ 0 then\n        if count_consonants(curr_word) == n then\n            table.insert(words,\
    \ curr_word)\n        end\n    end\n    return words\nend", "\t-- body\nend",
  "    local t = {}\n    local currentWord = ''\n    local i = 1\n    for word in\
    \ s:gmatch('%S+') do\n        if (consonantsCount(word) == n) then\n         \
    \   t[i] = word\n            i = i + 1\n        end\n    end\n    return t\nend",
  "    local words = {}\n    for word in s:gmatch('%S+') do\n        local consonants\
    \ = 0\n        for char in word:gmatch('[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]')\
    \ do\n            consonants = consonants + 1\n        end\n        if consonants\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend", "  local words = {}\n  for word in s:gmatch('%S+') do\n\
    \    if count_consonants(word) == n then\n      table.insert(words, word)\n  \
    \  end\n  end\n  return words\nend", "    local words = {}\n    local k = 1\n\
    \    local i = 1\n    local j = 1\n    while i <= #s do\n        if s:sub(i, i)\
    \ == ' ' then\n            if is_word(s:sub(j, i - 1), n) then\n             \
    \   words[k] = s:sub(j, i - 1)\n                k = k + 1\n            end\n \
    \           j = i + 1\n        end\n        i = i + 1\n    end\n    if is_word(s:sub(j,\
    \ i - 1), n) then\n        words[k] = s:sub(j, i - 1)\n    end\n    return words\n\
    end", end, "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local words = {}\n\
    \    for w in s:gmatch('%S+') do\n        local count = 0\n        for l in w:gmatch('%a')\
    \ do\n            if not contains(vowels, l) then\n                count = count\
    \ + 1\n            end\n        end\n        if count == n then\n            words[#words\
    \ + 1] = w\n        end\n    end\n    return words\nend", "  local words = {}\n\
    \  for w in s:gmatch('%S+') do\n    local c = 0\n    for ch in w:gmatch('[^aeiou]')\
    \ do\n      c = c + 1\n    end\n    if c == n then\n      table.insert(words,\
    \ w)\n    end\n  end\n  return words\nend", "    return {}\nend", "    local t\
    \ = {}\n    local words = {}\n    local count = 0\n    local i = 1\n    while\
    \ i <= string.len(s) do\n        if string.sub(s, i, i) == ' ' then\n        \
    \    if count == n then\n                table.insert(words, table.concat(t))\n\
    \            end\n            count = 0\n            t = {}\n        else\n  \
    \          local c = string.sub(s, i, i)\n            local r = is_consonant(c)\n\
    \            if r then\n                count = count + 1\n            end\n \
    \           table.insert(t, c)\n        end\n        i = i + 1\n    end\n    if\
    \ count == n then\n        table.insert(words, table.concat(t))\n    end\n   \
    \ return words\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local words\
    \ = {}\n  local word = ''\n  local consonants = 0\n  for c in s:gmatch('%a') do\n\
    \    local is_vowel = false\n    for i, v in ipairs(vowels) do\n      if c ==\
    \ v then\n        is_vowel = true\n        break\n      end\n    end\n    if is_vowel\
    \ then\n      consonants = 0\n    else\n      consonants = consonants + 1\n  \
    \  end\n    if c == ' ' then\n      if consonants == n then\n        table.insert(words,\
    \ word)\n      end\n      word = ''\n    else\n      word = word .. c\n    end\n\
    \  end\n  if consonants == n then\n    table.insert(words, word)\n  end\n  return\
    \ words\nend", "    local res = {}\n    local vowels = \"aeiou\"\n    for word\
    \ in s:gmatch(\"%w+\") do\n        local count = 0\n        for c in word:gmatch(\"\
    %a\") do\n            if vowels:find(c:lower()) == nil then\n                count\
    \ = count + 1\n            end\n        end\n        if count == n then\n    \
    \        res[#res + 1] = word\n        end\n    end\n    return res\nend", " \
    \ if s == '' then\n    return {}\n  end\n  local count = 0\n  local words = {}\n\
    \  local word = ''\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  local consonants_length\
    \ = 21\n  for i = 1, #s do\n    if s:sub(i, i) == ' ' then\n      if count ==\
    \ n then\n        words[#words + 1] = word\n      end\n      count = 0\n     \
    \ word = ''\n    else\n      for j = 1, consonants_length do\n        if s:sub(i,\
    \ i) == consonants[j] then\n          count = count + 1\n        end\n      end\n\
    \      word = word .. s:sub(i, i)\n    end\n  end\n  if count == n then\n    words[#words\
    \ + 1] = word\n  end\n  return words\nend", "  local t = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    if (n==num_consonants(word)) then\n      table.insert(t, word)\n\
    \    end\n  end\n  return t\nend", "\tlocal r = {}\n\tlocal t = {}\n\t-- Since\
    \ there is no standard library in Lua, we have to implement\n\t-- split function\
    \ ourselves.\n\tfor token in string.gmatch(s, \"[^%s]+\") do\n\t\ttable.insert(t,\
    \ token)\n\tend\n\t-- table.insert(t, \"\") -- add an empty string to the table\n\
    \tfor i = 1, #t do\n\t\tlocal count = 0\n\t\tfor _ in string.gmatch(t[i], \"[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]\"\
    ) do\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count == n then\n\t\t\ttable.insert(r,\
    \ t[i])\n\t\tend\n\tend\n\treturn r\nend", "\tlocal function check_consonants(str)\n\
    \t\tlocal consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n\t\tlocal count = 0\n\t\tfor i\
    \ = 1, #str do\n\t\t\tfor j = 1, #consonants do\n\t\t\t\tif string.sub(str, i,\
    \ i) == consonants[j] then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\t\treturn count\n\tend\n\tlocal table_of_words = {}\n\tif #s > 0 then\n\
    \t\tfor word in string.gmatch(s, \"%S+\") do\n\t\t\tif check_consonants(word)\
    \ == n then\n\t\t\t\ttable.insert(table_of_words, word)\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn table_of_words\nend", "  assert(type(s) == 'string')\n  assert(type(n)\
    \ == 'number')\n  local res = {}\n  local words = utils.split(s)\n  for _, word\
    \ in ipairs(words) do\n    if utils.count_consonants(word) == n then\n      table.insert(res,\
    \ word)\n    end\n  end\n  return res\nend", "    local  result = {}\n    local\
    \ function aux(s, n, word, pos)\n        if pos > string.len(s) then\n       \
    \     if #word == n then\n                table.insert(result, word)\n       \
    \     end\n            return\n        end\n        local char = string.sub(s,\
    \ pos, pos)\n        if char ~= ' ' then\n            aux(s, n, word .. char,\
    \ pos + 1)\n        else\n            aux(s, n, '', pos + 1)\n        end\n  \
    \  end\n    aux(s, n, '', 1)\n    return result\nend", "   local words = {}\n\
    \   local word = \"\"\n   local letter = \"\"\n   local consonants = 0\n   local\
    \ vowels = 0\n   local result = {}\n   local tmp = \"\"\n   for letter in s:gmatch(\"\
    %S+\") do\n      words[#words + 1] = letter\n   end\n   for i = 1, #words do\n\
    \      word = words[i]\n      for j = 1, word:len() do\n         tmp = word:sub(j,\
    \ j)\n         if tmp == \"a\" or tmp == \"e\" or tmp == \"i\" or tmp == \"o\"\
    \ or tmp == \"u\" or tmp == \"y\" then\n            vowels = vowels + 1\n    \
    \     else\n            consonants = consonants + 1\n         end\n      end\n\
    \      if consonants == n then\n         result[#result + 1] = word\n      end\n\
    \      consonants = 0\n      vowels = 0\n   end\n   return result\nend", "  local\
    \ t = {}\n  local a = {}\n  local b = {}\n  local word = \"\"\n  local words =\
    \ {}\n  local consonants = \"bcdfghjklmnpqrstvwxyz\"\n  local vowels = \"aeiou\"\
    \n  -- Write your code here\n  for i=1, string.len(s) do\n    table.insert(t,\
    \ string.sub(s, i, i))\n  end\n  for i=1, #t do\n    if string.find(vowels, t[i])\
    \ then\n      table.insert(a, t[i])\n    elseif string.find(consonants, t[i])\
    \ then\n      table.insert(b, t[i])\n    end\n  end\n  word = word..table.concat(a)\n\
    \  table.insert(words, word)\n  for i=1, #b do\n    table.insert(words, table.concat(b))\n\
    \  end\n  return words\nend", "    local words = {}\n    local word_buffer = {}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    for i = 1, #s do\n       \
    \ for j = 1, #consonants do\n            if s:sub(i, i) == consonants[j] then\n\
    \                table.insert(word_buffer, s:sub(i, i))\n            end\n   \
    \     end\n        if s:sub(i, i) == ' ' or i == #s then\n            if #word_buffer\
    \ == n then\n                table.insert(words, table.concat(word_buffer))\n\
    \            end\n            word_buffer = {}\n        end\n    end\n    return\
    \ words\nend", "    local words = {}\n    local vowels = {a = true, e = true,\
    \ i = true, o = true, u = true}\n    for word in s:gmatch('%w+') do\n        local\
    \ consonants = 0\n        for i = 1, #word do\n            local letter = word:sub(i,\
    \ i)\n            if not vowels[letter:lower()] then\n                consonants\
    \ = consonants + 1\n            end\n        end\n        if consonants == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end", "    local words = s:gmatch(\"%S+\")\n    local res = {}\n    for word in\
    \ words do\n        local vowels = word:gsub(\"[^aeiouyAEIOUY]\", \"\"):len()\n\
    \        if vowels == n then\n            table.insert(res, word)\n        end\n\
    \    end\n    return res\nend", "    local consonents = 'bcdfghjklmnpqrstvwxyz'\n\
    \    local vowel = 'aeiou'\n    local ret = {}\n    local words = {}\n    local\
    \ count = 1\n    for i = 1, #s do\n        if s:sub(i, i) == ' ' then\n      \
    \      count = count + 1\n        end\n        words[count] = words[count] and\
    \ words[count] .. s:sub(i, i) or s:sub(i, i)\n    end\n    for i = 1, #words do\n\
    \        local num = 0\n        for j = 1, #words[i] do\n            if consonents:find(words[i]:sub(j,\
    \ j)) then\n                num = num + 1\n            end\n        end\n    \
    \    if num == n then\n            ret[#ret + 1] = words[i]\n        end\n   \
    \ end\n    return ret\nend", "  local arr, i, word = {}, 1, \"\"\n  for j=1, #s\
    \ do\n    local c = s:sub(j, j)\n    if c ~= \" \" then\n      word = word ..\
    \ c\n    else\n      if #word == n then\n        arr[i] = word\n        i = i\
    \ + 1\n      end\n      word = \"\"\n    end\n  end\n  if #word == n then\n  \
    \  arr[i] = word\n  end\n  return arr\nend", "  local function is_vowel(c)\n \
    \   if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      return\
    \ true\n    else\n      return false\n    end\n  end\n  local function count_consonants(word)\n\
    \    local consonants = 0\n    for char in word:gmatch('%w') do\n      if not\
    \ is_vowel(char) then\n        consonants = consonants + 1\n      end\n    end\n\
    \    return consonants\n  end\n  local result = {}\n  for word in s:gmatch('%w+')\
    \ do\n    if count_consonants(word) == n then\n      table.insert(result, word)\n\
    \    end\n  end\n  return result\nend", end, end, "\tlocal words = {}\n\tfor w\
    \ in s:gmatch(\"%w+\") do\n\t\tif w:gsub(\"[^aeiouAEIOU]\", \"\"):len() == n then\n\
    \t\t\ttable.insert(words, w)\n\t\tend\n\tend\n\treturn words\nend", "    local\
    \ res = {}\n    for word in s:gmatch('%S+') do\n        local cnt = 0\n      \
    \  for c in word:gmatch('[^aeiou]') do\n            cnt = cnt + 1\n        end\n\
    \        if cnt == n then\n            res[#res + 1] = word\n        end\n   \
    \ end\n    return res\nend", "    local tbl = {}\n    for word in s:gmatch(\"\
    %S+\") do\n        if (string.gsub(word, '[aeiouAEIOU]', '')):len() == n then\n\
    \            table.insert(tbl, word)\n        end\n    end\n    return tbl\nend",
  "\t--TODO: Implement the function!\n\tlocal vowels = {\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"}\n\tlocal words = {}\n\tlocal count = 0\n\tfor i = 1, #s do\n\t\
    \tfor j = 1, #vowels do\n\t\t\tif s:sub(i, i) == vowels[j] then\n\t\t\t\tcount\
    \ = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor i = 1, #s\
    \ do\n\t\tif s:sub(i, i) == \" \" then\n\t\t\ttable.insert(words, s:sub(i - count,\
    \ i - 1))\n\t\t\tcount = 0\n\t\tend\n\tend\n\ttable.insert(words, s:sub(#s - count\
    \ + 1, #s))\n\tfor i = 1, #words do\n\t\tif #words[i] == n then\n\t\t\ttable.insert(result,\
    \ words[i])\n\t\tend\n\tend\n\treturn result\nend", "  local res = {}\n  for word\
    \ in s:gmatch(\"%w+\") do\n    local count = 0\n    for c in word:gmatch(\"[^aeiouAEIOU]\"\
    ) do\n      count = count + 1\n    end\n    if count == n then\n      res[#res\
    \ + 1] = word\n    end\n  end\n  return res\nend", "\ts = string.lower(s)\n\t\
    local words = {}\n\tfor m in string.gmatch(s, '%w+') do\n\t\tlocal count = 0\n\
    \t\tfor c in string.gmatch(m, '[^aeiou]') do\n\t\t\tcount = count + 1\n\t\tend\n\
    \t\tif count == n then\n\t\t\ttable.insert(words, m)\n\t\tend\n\tend\n\treturn\
    \ words\nend", "    local result = {}\n    local pattern = '%g+'\n    string.gsub(s,\
    \ pattern, function(w)\n        if #(string.gsub(w, '[aeiou]', '')) == n then\n\
    \            table.insert(result, w)\n        end\n    end)\n    return result\n\
    end", "  local words = {}\n  for word in s:gmatch('%S+') do\n    if count_consonants(word)\
    \ == n then\n      table.insert(words, word)\n    end\n  end\n  return words\n\
    end", "    local list = {}\n    for i in string.gmatch(s, '%S+') do\n        local\
    \ count = 0\n        for v in string.gmatch(i, '[^aeiouAEIOU]') do\n         \
    \   count = count + 1\n        end\n        if count == n then\n            table.insert(list,\
    \ i)\n        end\n    end\n    return list\nend", end, "  local words = {}\n\
    \  for word in s:gmatch('%w+') do\n    if word:find('[^aeiouAEIOU]') and #word:gsub('[aeiouAEIOU]',\
    \ '') == n then\n      table.insert(words, word)\n    end\n  end\n  return words\n\
    end", "  local t = {}\n  for word in s:gmatch(\"%w+\") do\n    if (not word:find(\"\
    [aeiou]\")) == n then\n      table.insert(t, word)\n    end\n  end\n  return t\n\
    end", "  local result = {}\n  local cons = 'bcdfghjklmnpqrstvwxyz'\n  for _, word\
    \ in ipairs(s:split()) do\n    local c = 0\n    for i = 1, #word do\n      local\
    \ letter = word:sub(i, i)\n      if cons:find(letter) then\n        c = c + 1\n\
    \      end\n    end\n    if c == n then\n      table.insert(result, word)\n  \
    \  end\n  end\n  return result\nend", "    local words = {}\n    for word in s:gmatch('%w+')\
    \ do\n        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend", "  local t = {}\n  for\
    \ w in s:gmatch(\"%S+\") do\n    if string.gsub(w, \"[aeiouAEIOU]\", \"\") ==\
    \ string.rep(\"c\", n) then\n      table.insert(t, w)\n    end\n  end\n  return\
    \ t\nend", end, "    -- your code goes here\nend", "    -- split the string at\
    \ every whitespace\n    local words = s:split()\n    local result = {}\n    for\
    \ _, word in ipairs(words) do\n        -- the word has n consonants\n        if\
    \ word:n_consonants() == n then\n            table.insert(result, word)\n    \
    \    end\n    end\n    return result\nend", "    local consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    local vowels = \"aeiou\"\n    local words = {}\n    local word = \"\"\n\
    \    local buffer = {}\n    local m = 0\n    local j = 0\n    local l = s:len()\n\
    \    for i = 1, l do\n        local c = s:sub(i, i)\n        if c ~= \" \" then\n\
    \            word = word .. c\n        else\n            if word ~= \"\" then\n\
    \                for k = 1, word:len() do\n                    local ch = word:sub(k,\
    \ k)\n                    if consonants:find(ch) ~= nil then\n               \
    \         m = m + 1\n                    end\n                end\n          \
    \      if m == n then\n                    table.insert(buffer, word)\n      \
    \          end\n                m = 0\n                word = \"\"\n         \
    \   end\n        end\n    end\n    return buffer\nend", "\tlocal words = {}\n\t\
    local word = {}\n\tlocal word_size = 0\n\tlocal word_start = false\n\tlocal word_end\
    \ = false\n\tlocal c\n\tfor i = 1, #s do\n\t\tc = s:sub(i, i)\n\t\tif c ~= ' '\
    \ then\n\t\t\tword_size = word_size + 1\n\t\t\tword_start = true\n\t\t\tword[word_size]\
    \ = c\n\t\t\tword_end = false\n\t\telse\n\t\t\tword_end = true\n\t\tend\n\t\t\
    if word_end == true and word_start == true then\n\t\t\tword_start = false\n\t\t\
    \tword_end = false\n\t\t\tword_size = 0\n\t\t\ttable.insert(words, table.concat(word))\n\
    \t\t\tword = {}\n\t\tend\n\tend\n\tif word_start == true then\n\t\ttable.insert(words,\
    \ table.concat(word))\n\tend\n\tlocal function is_consonant(letter)\n\t\tlocal\
    \ consonants = 'bcdfghjklmnpqrstvwxz'\n\t\treturn consonants:find(letter)\n\t\
    end\n\tlocal consonants = {}\n\tlocal consonant_size = 0\n\tfor i = 1, #words\
    \ do\n\t\tfor j = 1, #words[i] do\n\t\t\tif is_consonant(words[i]:sub(j, j)) then\n\
    \t\t\t\tconsonant_size = consonant_size + 1\n\t\t\tend\n\t\tend\n\t\tif consonant_size\
    \ == n then\n\t\t\ttable.insert(consonants, words[i])\n\t\tend\n\t\tconsonant_size\
    \ = 0\n\tend\n\treturn consonants\nend", "  local st, result = {}, {}\n  s:gsub('%S+',\
    \ function(w) st[#st+1] = w end)\n  for i, v in ipairs(st) do\n    if #v:gsub('[^aeiou]',\
    \ '') == n then\n      result[#result+1] = v\n    end\n  end\n  return result\n\
    end", "    local words = {}\n    for w in s:gmatch('%S+') do\n        if count_consonants(w)\
    \ == n then\n            table.insert(words, w)\n        end\n    end\n    return\
    \ words\nend", "\tlocal words = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tif\
    \ cons_count(word) == n then\n\t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\
    \treturn words\nend", "  local t = {}\n  for w in s:gmatch('%w+') do\n    if #w\
    \ - w:gsub('[aeiou]', ''):len() == n then\n      t[#t + 1] = w\n    end\n  end\n\
    \  return t\nend", "\tlocal L = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\t--\
    \ FIXME: figure out what to put here\n\tend\n\treturn L\nend", "  s = s:lower()\n\
    \  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    local count = 0\n  \
    \  for c in w:gmatch(\"[^aeiou]\") do\n      count = count + 1\n    end\n    if\
    \ count == n then\n      table.insert(words, w)\n    end\n  end\n  return words\n\
    end", "    local result = {}\n    if s == '' then\n        return result\n   \
    \ end\n    for word in s:gmatch('%w+') do\n        local n_consonants = 0\n  \
    \      for char in word:gmatch('%a') do\n            if not is_vowel(char) then\n\
    \                n_consonants = n_consonants + 1\n            end\n        end\n\
    \        if n_consonants == n then\n            table.insert(result, word)\n \
    \       end\n    end\n    return result\nend", "    -- write your code here\n\
    end", "  -- assuming s contains only letters and spaces (no punctuation)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    local vowel_count = 0\n\
    \    for letter in word:gmatch(\"%a\") do\n      if letter:match(\"[aeiou]\")\
    \ then\n        vowel_count = vowel_count + 1\n      end\n    end\n    if word:len()\
    \ - vowel_count == n then\n      table.insert(words, word)\n    end\n  end\n \
    \ return words\nend", "   local words = {}\n   local consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \   for word in s:gmatch('%w+') do\n      local consonant_count = 0\n      for\
    \ c in word:gmatch('%a') do\n         if consonants:find(c:lower()) then\n   \
    \         consonant_count = consonant_count + 1\n         end\n      end\n   \
    \   if consonant_count == n then\n         table.insert(words, word)\n      end\n\
    \   end\n   return words\nend", end, "\ts = s .. ' '\n\tlocal t = {}\n\tlocal\
    \ res = {}\n\tfor i in s:gmatch('%S+') do\n\t\ttable.insert(t, i)\n\tend\n\tfor\
    \ _, v in ipairs(t) do\n\t\tlocal count = 0\n\t\tfor j in v:gmatch('[^AEIOUaeiou]')\
    \ do\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count == n then\n\t\t\ttable.insert(res,\
    \ v)\n\t\tend\n\tend\n\treturn res\nend", "    local words = {}\n    for w in\
    \ s:gmatch('%w+') do\n        if select(2, w:gsub('[aeiou]', '')) == n then\n\
    \            words[#words + 1] = w\n        end\n    end\n    return words\nend",
  "    local t = {}\n    for w in s:gmatch('%w+') do\n        local c = 0\n      \
    \  for c1 in w:gmatch('[^aeiouAEIOU]') do\n            c = c + 1\n        end\n\
    \        if c == n then\n            t[#t + 1] = w\n        end\n    end\n   \
    \ return t\nend", "    local p = '[^aeiouy\\s]+'\n    local words = {}\n    for\
    \ w in s:gmatch(p) do\n        table.insert(words, w)\n    end\n    local result\
    \ = {}\n    for i, w in ipairs(words) do\n        if #w == n then\n          \
    \  table.insert(result, w)\n        end\n    end\n    return result\nend", " \
    \   local word_counts = {}\n    local words = {}\n    for w in s:gmatch(\"%w+\"\
    ) do\n        if not word_counts[w] then\n            local c = 0\n          \
    \  for v in w:gmatch(\"[^aeiouAEIOU]\") do\n                c = c + 1\n      \
    \      end\n            word_counts[w] = c\n        end\n        if word_counts[w]\
    \ == n then\n            table.insert(words, w)\n        end\n    end\n    return\
    \ words\nend", "  local allWords = {}\n  for word in s:gmatch(\"%w+\") do\n  \
    \  allWords[#allWords + 1] = word\n  end\n  local consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n  local selectedWords = {}\n  for _, word in ipairs(allWords) do\n    local\
    \ wordConsonants = 0\n    for i = 1, #word do\n      if consonants:find(word:sub(i,\
    \ i), 1, true) then\n        wordConsonants = wordConsonants + 1\n      end\n\
    \    end\n    if wordConsonants == n then\n      selectedWords[#selectedWords\
    \ + 1] = word\n    end\n  end\n  return selectedWords\nend", end, "  local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z'}\n  local str = s\n  local vowel = {}\n  local num =\
    \ n\n  local t = {}\n  local words = string.gmatch(str, '%w+')\n  local count\
    \ = 0\n  local word\n  while word do\n    word = words()\n    word = string.lower(word)\n\
    \    for letter in string.gmatch(word, '%a') do\n      for _,v in ipairs(consonants)\
    \ do\n        if letter == v then\n          count = count + 1\n        end\n\
    \      end\n    end\n    if count == num then\n      table.insert(t, word)\n \
    \   end\n    count = 0\n  end\n  return t\nend", "  local ret = {}\n  for w in\
    \ s:gmatch('%w+') do\n    if count_consonants(w) == n then\n      ret[#ret + 1]\
    \ = w\n    end\n  end\n  return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
