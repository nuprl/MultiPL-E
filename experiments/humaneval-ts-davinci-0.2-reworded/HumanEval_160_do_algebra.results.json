{
  "language": "ts",
  "name": "HumanEval_160_do_algebra",
  "results": [
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1fd6bg9c.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpem_r_pfn.js:48:12)\n    at Object.<anonymous> (/tmp/tmpem_r_pfn.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp4w3auvux.js:49:12)\n    at Object.<anonymous> (/tmp/tmp4w3auvux.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp8e50_hvp.js:49:12)\n    at Object.<anonymous> (/tmp/tmp8e50_hvp.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpfi948y54.js:51:12)\n    at Object.<anonymous> (/tmp/tmpfi948y54.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpj5zexv2y.js:51:12)\n    at Object.<anonymous> (/tmp/tmpj5zexv2y.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpctiid2w0.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpctiid2w0.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp21y3k004.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp21y3k004.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpk748pn2z.js:50:12)\n    at Object.<anonymous> (/tmp/tmpk748pn2z.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp69g3s0lm.js:50:12)\n    at Object.<anonymous> (/tmp/tmp69g3s0lm.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n5\nNaN\nNaN\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpj5zexv2y.js:51:12)\n    at Object.<anonymous> (/tmp/tmpj5zexv2y.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 2]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 3]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 4]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 9]));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbmsxllei.ts(53,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpxdsgws5_.js:53:12)\n    at Object.<anonymous> (/tmp/tmpxdsgws5_.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n4096\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-', '**'], [2, 3, 4, 5, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpcgkzowed.js:49:12)\n    at Object.<anonymous> (/tmp/tmpcgkzowed.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\nNaN\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpxdsgws5_.js:53:12)\n    at Object.<anonymous> (/tmp/tmpxdsgws5_.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n4096\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**', '-'], [2, 3, 4, 5, 2]));\nconsole.log(do_algebra(['+', '*', '//', '**', '-'], [2, 3, 4, 5, 3]));\nconsole.log(do_algebra(['+', '*', '//', '**', '-'], [2, 3, 4, 5, 4]));\nconsole.log(do_algebra(['+', '*', '//', '**', '-'], [2, 3, 4, 5, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpm7higrk3.js:52:12)\n    at Object.<anonymous> (/tmp/tmpm7higrk3.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\nNaN\nNaN\nNaN\nNaN\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyafdsm88.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpyafdsm88.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpk748pn2z.js:50:12)\n    at Object.<anonymous> (/tmp/tmpk748pn2z.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '//'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '//', '**', '//'], [2, 3, 4, 5, 6, 7, 8]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp6lbfnf90.js:50:12)\n    at Object.<anonymous> (/tmp/tmp6lbfnf90.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n0\n0\n0\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqpyetiha.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpxdsgws5_.js:53:12)\n    at Object.<anonymous> (/tmp/tmpxdsgws5_.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n4096\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmph83a5bhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmph83a5bhf.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp4w3auvux.js:49:12)\n    at Object.<anonymous> (/tmp/tmp4w3auvux.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp4w3auvux.js:49:12)\n    at Object.<anonymous> (/tmp/tmp4w3auvux.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-', '**'], [2, 3, 4, 5, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpcgkzowed.js:49:12)\n    at Object.<anonymous> (/tmp/tmpcgkzowed.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\nNaN\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp48zbzfmz.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu0dngj9f.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333499
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyafdsm88.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpyafdsm88.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqpyetiha.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyafdsm88.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpyafdsm88.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp48zbzfmz.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvte4ybsl.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvte4ybsl.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333499
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyafdsm88.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpyafdsm88.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnq0wpndy.ts(54,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmpnq0wpndy.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpnq0wpndy.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp7e26yryn.js:52:12)\n    at Object.<anonymous> (/tmp/tmp7e26yryn.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n15\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqpyetiha.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result: number = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5untckzo.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmp5untckzo.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvte4ybsl.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvte4ybsl.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333499
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 2]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 3]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpj_m3o3e1.js:49:12)\n    at Object.<anonymous> (/tmp/tmpj_m3o3e1.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n4\n16\n64\n256\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbg9_t_5n.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpbg9_t_5n.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp4w3auvux.js:49:12)\n    at Object.<anonymous> (/tmp/tmp4w3auvux.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-', '**'], [2, 3, 4, 5, 2]));\nconsole.log(do_algebra(['+', '*', '//', '-', '**'], [2, 3, 4, 5, 3]));\nconsole.log(do_algebra(['+', '*', '//', '-', '**'], [2, 3, 4, 5, 0]));\nconsole.log(do_algebra(['+', '*', '//', '-', '**'], [2, 3, 4, 5, -1]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpcs8jp0wp.js:52:12)\n    at Object.<anonymous> (/tmp/tmpcs8jp0wp.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\nNaN\nNaN\nNaN\nNaN\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 2]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp6pbj6ujy.js:49:12)\n    at Object.<anonymous> (/tmp/tmp6pbj6ujy.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n5\nNaN\nNaN\nNaN\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-', '//'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '-', '//', '**'], [2, 3, 4, 5, 6, 7]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmporqf55nf.js:49:12)\n    at Object.<anonymous> (/tmp/tmporqf55nf.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n2\n128\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp69g3s0lm.js:50:12)\n    at Object.<anonymous> (/tmp/tmp69g3s0lm.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n5\nNaN\nNaN\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-', '**'], [2, 3, 4, 5, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpcgkzowed.js:49:12)\n    at Object.<anonymous> (/tmp/tmpcgkzowed.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\nNaN\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmppj29m3xb.js:53:12)\n    at Object.<anonymous> (/tmp/tmppj29m3xb.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n4096\n4096\n4096\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpackwnbx3.js:52:12)\n    at Object.<anonymous> (/tmp/tmpackwnbx3.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpk748pn2z.js:50:12)\n    at Object.<anonymous> (/tmp/tmpk748pn2z.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqpyetiha.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpackwnbx3.js:52:12)\n    at Object.<anonymous> (/tmp/tmpackwnbx3.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyafdsm88.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpyafdsm88.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1fd6bg9c.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '-', '**'], [2, 3, 4, 5, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpcgkzowed.js:49:12)\n    at Object.<anonymous> (/tmp/tmpcgkzowed.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\nNaN\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5])); // 9\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6])); // 11\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7])); // 13\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8])); // 15\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9])); // 17\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10])); // 19\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // 21\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // 23\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbtblnnwj.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqpyetiha.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmppjwsmho5.js:49:12)\n    at Object.<anonymous> (/tmp/tmppjwsmho5.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n16\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp4w3auvux.js:49:12)\n    at Object.<anonymous> (/tmp/tmp4w3auvux.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp8e50_hvp.js:49:12)\n    at Object.<anonymous> (/tmp/tmp8e50_hvp.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbg9_t_5n.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpbg9_t_5n.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpfi948y54.js:51:12)\n    at Object.<anonymous> (/tmp/tmpfi948y54.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp4w3auvux.js:49:12)\n    at Object.<anonymous> (/tmp/tmp4w3auvux.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1fd6bg9c.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo58xg5js.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 2]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 3]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpjq4msvvg.js:52:12)\n    at Object.<anonymous> (/tmp/tmpjq4msvvg.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n5\nNaN\nNaN\nNaN\nNaN\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp148nxoa6.ts(53,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 2]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 3]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 4]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 9]));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbmsxllei.ts(53,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcm2z3z22.ts(53,1): error TS1005: ',' expected.\n../../../../tmp/tmpcm2z3z22.ts(53,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvte4ybsl.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvte4ybsl.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333499
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp4w3auvux.js:49:12)\n    at Object.<anonymous> (/tmp/tmp4w3auvux.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpxdsgws5_.js:53:12)\n    at Object.<anonymous> (/tmp/tmpxdsgws5_.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n4096\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp48zbzfmz.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp4w3auvux.js:49:12)\n    at Object.<anonymous> (/tmp/tmp4w3auvux.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbg9_t_5n.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpbg9_t_5n.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpj5zexv2y.js:51:12)\n    at Object.<anonymous> (/tmp/tmpj5zexv2y.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpexh4b3_r.js:51:12)\n    at Object.<anonymous> (/tmp/tmpexh4b3_r.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp4w3auvux.js:49:12)\n    at Object.<anonymous> (/tmp/tmp4w3auvux.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp4w3auvux.js:49:12)\n    at Object.<anonymous> (/tmp/tmp4w3auvux.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpun1o9q4a.js:51:12)\n    at Object.<anonymous> (/tmp/tmpun1o9q4a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n15\n15\n15\n15\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpxdsgws5_.js:53:12)\n    at Object.<anonymous> (/tmp/tmpxdsgws5_.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n4096\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmp8c7rmasp.js:46:12)\n    at Object.<anonymous> (/tmp/tmp8c7rmasp.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333500
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpxqkspj0c.js:57:12)\n    at Object.<anonymous> (/tmp/tmpxqkspj0c.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660333500
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqpyetiha.ts(54,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 1,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result: number = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmph83a5bhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmph83a5bhf.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\nNaN\n4096\n4096\n",
      "timestamp": 1660333497
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgjmbs0_.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgjmbs0_.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333496
    },
    {
      "exit_code": 2,
      "program": "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmw8rnfxn.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333497
    }
  ]
}