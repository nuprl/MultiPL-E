name: HumanEval_74_total_match
language: rkt
prompt: "#lang racket\n\n;; Write a function that accepts two lists of strings and\
  \ returns the list that has \n;; total number of chars in the all strings of the\
  \ list less than the other list.\n;; if the two lists have the same number of chars,\
  \ return the first list.\n;; Examples\n(define (total_match lst1 lst2)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate total_match))\n\
  \    (check-equal? (candidate (list ) (list )) (list ))\n    (check-equal? (candidate\
  \ (list \"hi\" \"admin\") (list \"hi\" \"hi\")) (list \"hi\" \"hi\"))\n    (check-equal?\
  \ (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\"))\
  \ (list \"hi\" \"admin\"))\n    (check-equal? (candidate (list \"4\") (list \"1\"\
  \ \"2\" \"3\" \"4\" \"5\")) (list \"4\"))\n    (check-equal? (candidate (list \"\
  hi\" \"admin\") (list \"hI\" \"Hi\")) (list \"hI\" \"Hi\"))\n    (check-equal? (candidate\
  \ (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\")) (list \"hI\" \"hi\" \"hi\"\
  ))\n    (check-equal? (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"\
  hii\")) (list \"hi\" \"admin\"))\n    (check-equal? (candidate (list ) (list \"\
  this\")) (list ))\n    (check-equal? (candidate (list \"this\") (list )) (list ))\n\
  ))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
