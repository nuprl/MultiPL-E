name: HumanEval_158_find_max
language: rkt
prompt: "#lang racket\n\n;; Write a function that accepts a list of strings.\n;; The\
  \ list contains different words. Return the word with maximum number\n;; of unique\
  \ characters. If multiple strings have maximum number of unique\n;; characters,\
  \ return the one which comes first in lexicographical order.\n(define (find_max\
  \ words)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
  \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n \
  \   (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal?\
  \ (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
  \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
  \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
  \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
  \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"\
  play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
