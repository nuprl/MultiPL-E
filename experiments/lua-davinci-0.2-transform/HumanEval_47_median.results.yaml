language: lua
name: HumanEval_47_median
results:
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  local m = math.floor(n / 2)\n  if n % 2 == 0 then\n\
    \    return (l[m] + l[m + 1]) / 2\n  else\n    return l[m + 1]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyll6i5i.lua:19:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpfyll6i5i.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n == 0 then\n    return nil\n  elseif\
    \ n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for i, v in ipairs(l) do\n        t[i] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = copy(l)\n    table.sort(sorted)\n\
    \    if n % 2 == 1 then\n      return sorted[(n + 1) / 2]\n    else\n      return\
    \ (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_xrrz_x8.lua:13:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp_xrrz_x8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_xrrz_x8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n == 0 then\n    return 0\n  elseif\
    \ n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84pwf6w3.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp84pwf6w3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp84pwf6w3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for i, v in ipairs(l) do\n        t[i] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = copy(l)\n    table.sort(t)\n    local n = #t\n    if\
    \ n % 2 == 0 then\n        return (t[n/2] + t[n/2+1]) / 2\n    else\n        return\
    \ t[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpls6qwmkd.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpls6qwmkd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpls6qwmkd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local l2 = {}\n  for _, v in ipairs(l) do\n    l2[#l2 + 1] = v\n\
    \  end\n  table.sort(l2)\n  local n = #l2\n  if n % 2 == 0 then\n    return (l2[n\
    \ / 2] + l2[n / 2 + 1]) / 2\n  else\n    return l2[(n + 1) / 2]\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = copy(l)\n    table.sort(sorted)\n    if n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gcr7aw2.lua:11:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp5gcr7aw2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5gcr7aw2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = sort(l)\n    if n % 2 == 0\
    \ then\n      return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n     \
    \ return sorted[(n + 1) / 2]\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprq4wlr_r.lua:13:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmprq4wlr_r.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmprq4wlr_r.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = copy(l)\n    table.sort(sorted)\n\
    \    if n % 2 == 1 then\n      return sorted[(n + 1) / 2]\n    else\n      return\
    \ (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_xrrz_x8.lua:13:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp_xrrz_x8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_xrrz_x8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84pwf6w3.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp84pwf6w3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp84pwf6w3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        sorted[i] = v\n\
    \    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = table.copy(l)\n  table.sort(sorted)\n  local n =\
    \ #sorted\n  if n % 2 == 0 then\n    return (sorted[n / 2] + sorted[n / 2 + 1])\
    \ / 2\n  else\n    return sorted[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0opza55u.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmp0opza55u.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0opza55u.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprsxc9za4.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmprsxc9za4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprsxc9za4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    local m = n % 2\n    local s = sort(l)\n  \
    \  if m == 0 then\n        return (s[n / 2] + s[n / 2 + 1]) / 2\n    else\n  \
    \      return s[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppmsus4ke.lua:9:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmppmsus4ke.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppmsus4ke.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = {}\n    for _, v in ipairs(l) do\n        m[#m + 1]\
    \ = v\n    end\n    table.sort(m)\n    local n = #m\n    if n % 2 == 0 then\n\
    \        return (m[n / 2] + m[n / 2 + 1]) / 2\n    else\n        return m[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  table.sort(l)\n\
    \  if n % 2 == 1 then\n    return l[(n + 1) / 2]\n  else\n    return (l[n / 2]\
    \ + l[n / 2 + 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = sort(l)\n  local n = #sorted\n  if n % 2 == 0 then\n\
    \    return (sorted[n/2] + sorted[n/2+1]) / 2\n  else\n    return sorted[(n+1)/2]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4npk0ro.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpf4npk0ro.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf4npk0ro.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local l = copy(l)\n    table.sort(l)\n    local n = #l\n    if\
    \ n % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n  \
    \      return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz2fy90oa.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpz2fy90oa.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpz2fy90oa.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        sorted[i] = v\n\
    \    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n == 0\
    \ then\n        return nil\n    elseif n % 2 == 0 then\n        return (sorted[n\
    \ / 2] + sorted[n / 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwyc7uyx.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpuwyc7uyx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpuwyc7uyx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        sorted[i] = v\n\
    \    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = sort(l)\n  local n = #sorted\n  if n % 2 == 0 then\n\
    \    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  else\n    return sorted[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph7jnnj85.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmph7jnnj85.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmph7jnnj85.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    local m = n % 2\n   \
    \ if m == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n   \
    \     return t[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local l2 = {}\n    for _, v in ipairs(l) do\n        table.insert(l2,\
    \ v)\n    end\n    table.sort(l2)\n    local n = #l2\n    if n % 2 == 0 then\n\
    \        return (l2[n / 2] + l2[n / 2 + 1]) / 2\n    else\n        return l2[(n\
    \ + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return\
    \ sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2\
    \ + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[math.ceil(n\
    \ / 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = {}\n    for _, v in ipairs(l) do\n        m[#m + 1]\
    \ = v\n    end\n    table.sort(m)\n    local n = #m\n    if n % 2 == 0 then\n\
    \        return (m[n / 2] + m[n / 2 + 1]) / 2\n    else\n        return m[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n == 0 then\n     \
    \   return 0\n    elseif n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 +\
    \ 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = copy(l)\n    table.sort(t)\n    local n = #t\n    if\
    \ n == 0 then\n        return nil\n    elseif n % 2 == 0 then\n        return\
    \ (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp86vcee7b.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp86vcee7b.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp86vcee7b.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  local m = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return (l[m] + l[m + 1]) / 2\n  else\n    return\
    \ l[m + 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3u9nys2.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpv3u9nys2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local len = #l\n    if len == 0 then\n        return nil\n  \
    \  end\n    local sorted = sort(l)\n    if len % 2 == 0 then\n        return (sorted[len\
    \ / 2] + sorted[len / 2 + 1]) / 2\n    else\n        return sorted[(len + 1) /\
    \ 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgywsjkm.lua:11:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmprgywsjkm.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmprgywsjkm.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for i, v in ipairs(l) do\n    t[i] = v\n  end\n\
    \  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] +\
    \ t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = n / 2\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1])\
    \ / 2\n    else\n        return l[math.ceil(m)]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xbom_2v.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp6xbom_2v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  local sorted =\
    \ table.sort(l)\n  if n % 2 == 1 then\n    return sorted[(n + 1) / 2]\n  else\n\
    \    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpywbhzys6.lua:11:\
    \ attempt to index a nil value (local 'sorted')\nstack traceback:\n\t/tmp/tmpywbhzys6.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpywbhzys6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84pwf6w3.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp84pwf6w3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp84pwf6w3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = n % 2\n    local s = n // 2\n    if m == 0 then\n        return\
    \ (l[s] + l[s + 1]) / 2\n    else\n        return l[s + 1]\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vwjfb4g.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp2vwjfb4g.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local t = table.copy(l)\n    table.sort(t)\n    if n % 2 == 0 then\n    \
    \    return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1)\
    \ / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0yyo9g1u.lua:11:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmp0yyo9g1u.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp0yyo9g1u.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for i, v in ipairs(l) do\n        t[i] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local l = sort(l)\n  local n = #l\n  if n % 2 == 0 then\n    return\
    \ (l[n / 2] + l[n / 2 + 1]) / 2\n  else\n    return l[(n + 1) / 2]\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp39krn33x.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp39krn33x.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp39krn33x.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        sorted[i] = v\n\
    \    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        sorted[i] = v\n\
    \    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n % 2\
    \ == 1 then\n    return l[(n + 1) / 2]\n  else\n    return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkasvfma5.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpkasvfma5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[math.ceil(n / 2)]\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = copy(l)\n  table.sort(t)\n  local n = #t\n  if n % 2\
    \ == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpct2bd1l7.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpct2bd1l7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpct2bd1l7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n == 0 then\n    return nil\n  elseif\
    \ n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84pwf6w3.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp84pwf6w3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp84pwf6w3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = list.sort(l)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphrtwsrb6.lua:7:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmphrtwsrb6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphrtwsrb6.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local s = sort(l)\n    if n % 2 == 0 then\n        return (s[n / 2] + s[n\
    \ / 2 + 1]) / 2\n    else\n        return s[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkou375re.lua:11:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpkou375re.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpkou375re.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  table.sort(l)\n\
    \  if n % 2 == 1 then\n    return l[(n + 1) / 2]\n  else\n    return (l[n / 2]\
    \ + l[n / 2 + 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local m = math.floor(n / 2)\n    if n % 2\
    \ == 0 then\n      return (l[m] + l[m + 1]) / 2\n    else\n      return l[m +\
    \ 1]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbonafh2g.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpbonafh2g.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _,v in ipairs(l) do\n    t[#t+1] = v\n  end\n\
    \  table.sort(t)\n  if #t % 2 == 0 then\n    return (t[#t/2] + t[#t/2+1]) / 2\n\
    \  else\n    return t[math.ceil(#t/2)]\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local s = sort(l)\n    if n % 2 == 0 then\n\
    \      return (s[n/2] + s[n/2+1]) / 2\n    else\n      return s[math.ceil(n/2)]\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfer93jym.lua:13:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpfer93jym.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpfer93jym.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = copy(l)\n    table.sort(sorted)\n    if n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gcr7aw2.lua:11:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp5gcr7aw2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5gcr7aw2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = sort(l)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qoyq3bv.lua:11:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp5qoyq3bv.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5qoyq3bv.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return\
    \ sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2\
    \ + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = table.copy(l)\n  table.sort(t)\n  local n = #t\n  if\
    \ n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0yqp9v3g.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmp0yqp9v3g.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0yqp9v3g.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  local m = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return (l[m] + l[m + 1]) / 2\n  else\n    return\
    \ l[m + 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3u9nys2.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpv3u9nys2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = copy(l)\n    table.sort(sorted)\n    if n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gcr7aw2.lua:11:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp5gcr7aw2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5gcr7aw2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\ttable.insert(t, v)\n\
    \tend\n\ttable.sort(t)\n\tlocal n = #t\n\tif n == 0 then\n\t\treturn nil\n\telseif\
    \ n % 2 == 0 then\n\t\treturn (t[n / 2] + t[n / 2 + 1]) / 2\n\telse\n\t\treturn\
    \ t[(n + 1) / 2]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local l = copy(l)\n    table.sort(l)\n    local n = #l\n    if\
    \ n % 2 == 0 then\n        return (l[n/2] + l[n/2+1]) / 2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgdc820m.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmppgdc820m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppgdc820m.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = table.sort(l)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxj2bm72k.lua:13:\
    \ attempt to index a nil value (local 'sorted')\nstack traceback:\n\t/tmp/tmpxj2bm72k.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpxj2bm72k.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = n / 2\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1])\
    \ / 2\n    else\n        return l[math.ceil(m)]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xbom_2v.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp6xbom_2v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    local m = n % 2\n    if m == 0 then\n     \
    \   return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[(n + 1) /\
    \ 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbot9tcq3.lua:19:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpbot9tcq3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = table.copy(l)\n    table.sort(t)\n    local n = #t\n\
    \    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9d7_oz4.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpn9d7_oz4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn9d7_oz4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = copy(l)\n    table.sort(sorted)\n    if n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gcr7aw2.lua:11:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp5gcr7aw2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5gcr7aw2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprsxc9za4.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmprsxc9za4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprsxc9za4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = copy(l)\n  table.sort(t)\n  local n = #t\n  if n % 2\
    \ == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpct2bd1l7.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpct2bd1l7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpct2bd1l7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  if n == 1 then\
    \ return l[1] end\n  table.sort(l)\n  if n % 2 == 0 then\n    return (l[n/2] +\
    \ l[n/2+1]) / 2\n  else\n    return l[(n+1)/2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = copy(l)\n    table.sort(sorted)\n    if n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gcr7aw2.lua:11:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp5gcr7aw2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5gcr7aw2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = copy(l)\n    table.sort(sorted)\n    if n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gcr7aw2.lua:11:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp5gcr7aw2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5gcr7aw2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  if n == 1 then\
    \ return l[1] end\n  table.sort(l)\n  if n % 2 == 0 then\n    return (l[n/2] +\
    \ l[n/2+1]) / 2\n  else\n    return l[(n+1)/2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return 0\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        sorted[i] = v\n\
    \    end\n    table.sort(sorted)\n    if n % 2 == 0 then\n        return (sorted[n\
    \ / 2] + sorted[n / 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84pwf6w3.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp84pwf6w3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp84pwf6w3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[math.ceil(n / 2)]\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    local m = math.floor(n / 2)\n    if n % 2 ==\
    \ 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m +\
    \ 1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp7ttidi.lua:19:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpqp7ttidi.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local m = math.floor(n / 2)\n    if n % 2\
    \ == 0 then\n      return (l[m] + l[m + 1]) / 2\n    else\n      return l[m +\
    \ 1]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbonafh2g.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpbonafh2g.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        sorted[i] = v\n\
    \    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = {}\n    for _, v in ipairs(l) do\n        m[#m + 1]\
    \ = v\n    end\n    table.sort(m)\n    local n = #m\n    if n % 2 == 0 then\n\
    \        return (m[n / 2] + m[n / 2 + 1]) / 2\n    else\n        return m[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84pwf6w3.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp84pwf6w3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp84pwf6w3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n == 0\
    \ then\n        return nil\n    elseif n % 2 == 0 then\n        return (sorted[n\
    \ / 2] + sorted[n / 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwyc7uyx.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpuwyc7uyx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpuwyc7uyx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    table.sort(l)\n    local m = math.floor(n\
    \ / 2)\n    if n % 2 == 0 then\n      return (l[m] + l[m + 1]) / 2\n    else\n\
    \      return l[m + 1]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  if #t % 2 == 0 then\n    return (t[#t / 2] + t[#t /\
    \ 2 + 1]) / 2\n  else\n    return t[math.ceil(#t / 2)]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local m = {}\n  for _, v in ipairs(l) do\n    m[#m + 1] = v\n \
    \ end\n  table.sort(m)\n  local n = #m\n  if n % 2 == 0 then\n    return (m[n\
    \ / 2] + m[n / 2 + 1]) / 2\n  else\n    return m[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = sort(l)\n    if n % 2 == 0\
    \ then\n      return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n     \
    \ return sorted[(n + 1) / 2]\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprq4wlr_r.lua:13:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmprq4wlr_r.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmprq4wlr_r.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = {}\n    for i = 1, n do\n\
    \      sorted[i] = l[i]\n    end\n    table.sort(sorted)\n    if n % 2 == 0 then\n\
    \      return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n      return\
    \ sorted[(n + 1) / 2]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        sorted[i] = v\n\
    \    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r528adn.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4r528adn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = {}\n    for _, v in ipairs(l) do\n        m[#m + 1]\
    \ = v\n    end\n    table.sort(m)\n    local n = #m\n    if n % 2 == 0 then\n\
    \        return (m[n / 2] + m[n / 2 + 1]) / 2\n    else\n        return m[math.ceil(n\
    \ / 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  local m = n %\
    \ 2\n  local s = n // 2\n  if m == 0 then\n    return (l[s] + l[s+1]) / 2\n  else\n\
    \    return l[s+1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc3nc2mf.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpyc3nc2mf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local m = {}\n  for _, v in ipairs(l) do\n    m[#m + 1] = v\n \
    \ end\n  table.sort(m)\n  local n = #m\n  if n % 2 == 0 then\n    return (m[n\
    \ / 2] + m[n / 2 + 1]) / 2\n  else\n    return m[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n == 0 then\n     \
    \   return 0\n    elseif n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 +\
    \ 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = copy(l)\n    table.sort(sorted)\n    if n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gcr7aw2.lua:11:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp5gcr7aw2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5gcr7aw2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    table.sort(l)\n    if n % 2 == 0 then\n \
    \     return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n      return l[(n + 1) /\
    \ 2]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[#t + 1] = v\n\t\
    end\n\ttable.sort(t)\n\tlocal n = #t\n\tif n % 2 == 0 then\n\t\treturn (t[n /\
    \ 2] + t[n / 2 + 1]) / 2\n\telse\n\t\treturn t[(n + 1) / 2]\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local m = {}\n  for _, v in ipairs(l) do\n    m[#m + 1] = v\n \
    \ end\n  table.sort(m)\n  local n = #m\n  if n % 2 == 0 then\n    return (m[n\
    \ / 2] + m[n / 2 + 1]) / 2\n  else\n    return m[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    local m = n % 2\n    local s = n // 2\n   \
    \ if m == 0 then\n        return (l[s] + l[s + 1]) / 2\n    else\n        return\
    \ l[s + 1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo73uj53y.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpo73uj53y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  table.sort(l)\n\
    \  if n % 2 == 1 then\n    return l[(n + 1) / 2]\n  else\n    return (l[n / 2]\
    \ + l[n / 2 + 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = sort(l)\n  local n = #sorted\n  if n % 2 == 0 then\n\
    \    return (sorted[n/2] + sorted[n/2+1]) / 2\n  else\n    return sorted[(n+1)/2]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4npk0ro.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpf4npk0ro.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf4npk0ro.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = n % 2\n    if m == 0 then\n        return (l[n / 2] + l[n / 2 +\
    \ 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ixae9qm.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp3ixae9qm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  local m = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return (l[m] + l[m + 1]) / 2\n  else\n    return\
    \ l[m + 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3u9nys2.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpv3u9nys2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = {}\n    for _, v in ipairs(l) do\n        m[#m + 1]\
    \ = v\n    end\n    table.sort(m)\n    local n = #m\n    if n % 2 == 0 then\n\
    \        return (m[n / 2] + m[n / 2 + 1]) / 2\n    else\n        return m[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
- exit_code: 0
  program: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4,\
    \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792379
