language: lua
name: HumanEval_36_fizz_buzz
results:
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local s = tostring(i)\n            for j = 1, #s do\n                if\
    \ s:sub(j, j) == '7' then\n                    count = count + 1\n           \
    \     end\n            end\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjqhksnw.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpgjqhksnw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d_jtzqt.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_d_jtzqt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local s = tostring(i)\n            for j = 1, #s do\n                if\
    \ s:sub(j, j) == '7' then\n                    count = count + 1\n           \
    \     end\n            end\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjqhksnw.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpgjqhksnw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           local num = i\n            while num > 0 do\n                if num\
    \ % 10 == 7 then\n                    count = count + 1\n                end\n\
    \                num = math.floor(num / 10)\n            end\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.030 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local str = tostring(i)\n            for j = 1, #str do\n            \
    \    if str:sub(j, j) == '7' then\n                    count = count + 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8nu_rly.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpj8nu_rly.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local str = tostring(i)\n            for j = 1, #str do\n            \
    \    if str:sub(j, j) == '7' then\n                    count = count + 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8nu_rly.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpj8nu_rly.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      count\
    \ = count + count_7(i)\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6hkq5r8.lua:12:\
    \ attempt to call global 'count_7' (a nil value)\nstack traceback:\n\t/tmp/tmpo6hkq5r8.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpo6hkq5r8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local s = tostring(i)\n            for j = 1, #s do\n                if\
    \ s:sub(j, j) == '7' then\n                    count = count + 1\n           \
    \     end\n            end\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjqhksnw.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpgjqhksnw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local s = tostring(i)\n            for j = 1, #s do\n                if\
    \ s:sub(j, j) == '7' then\n                    count = count + 1\n           \
    \     end\n            end\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjqhksnw.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpgjqhksnw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       count = count + string.gsub(tostring(i), \"7\", \"\")\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpjetvlp.lua:21:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmpqpjetvlp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if (i % 11 == 0 or i % 13 == 0) and i % 10 == 7 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ag_ufya.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_ag_ufya.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local str = tostring(i)\n            for j = 1, #str do\n            \
    \    if str:sub(j, j) == '7' then\n                    count = count + 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8nu_rly.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpj8nu_rly.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      local s\
    \ = tostring(i)\n      for j = 1, #s do\n        if s:sub(j, j) == '7' then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydkybnyz.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpydkybnyz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgum70y6c.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgum70y6c.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local s = tostring(i)\n            for j = 1, #s do\n                if\
    \ s:sub(j, j) == '7' then\n                    count = count + 1\n           \
    \     end\n            end\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjqhksnw.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpgjqhksnw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ str = tostring(i)\n      for j = 1, #str do\n        if str:sub(j, j) == '7'\
    \ then\n          count = count + 1\n        end\n      end\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.050 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750527
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ num = i\n      while num > 0 do\n        if num % 10 == 7 then\n          count\
    \ = count + 1\n        end\n        num = math.floor(num / 10)\n      end\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.020 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       count = count + string.gsub(tostring(i), \"7\", \"\")\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpjetvlp.lua:21:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmpqpjetvlp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local str = tostring(i)\n            for j = 1, #str do\n            \
    \    if str:sub(j, j) == '7' then\n                    count = count + 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8nu_rly.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpj8nu_rly.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750527
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ s = tostring(i)\n      for j = 1, #s do\n        if s:sub(j, j) == '7' then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.050 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750527
