language: lua
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _ in pairs(word_chars(word)) do\n \
    \           count = count + 1\n        end\n        if count > max_count then\n\
    \            max_count = count\n            max_word = word\n        end\n   \
    \ end\n    return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpna53g151.lua:16:\
    \ attempt to call global 'word_chars' (a nil value)\nstack traceback:\n\t/tmp/tmpna53g151.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpna53g151.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \  local max_word = words[1]\n  local max_count = 0\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local count = 0\n    for j = 1, #word do\n   \
    \   local c = word:sub(j, j)\n      if not word:find(c, j + 1) then\n        count\
    \ = count + 1\n      end\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwi6ym8_.lua:35:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpfwi6ym8_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _ in word:gmatch('.') do\n        \
    \    count = count + 1\n        end\n        if count > max_count then\n     \
    \       max_count = count\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgcuved1.lua:31:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpxgcuved1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_unique = 0\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local unique = 0\n        for j =\
    \ 1, #word do\n            local c = word:sub(j, j)\n            if word:find(c,\
    \ j + 1) == nil then\n                unique = unique + 1\n            end\n \
    \       end\n        if unique > max_unique then\n            max_unique = unique\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3274ic79.lua:35:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp3274ic79.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _ in word:gmatch('.') do\n        \
    \    count = count + 1\n        end\n        if count > max_count then\n     \
    \       max_count = count\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgcuved1.lua:31:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpxgcuved1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_unique = 0\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local unique = 0\n        for j =\
    \ 1, #word do\n            local c = word:sub(j, j)\n            if word:find(c,\
    \ j + 1) == nil then\n                unique = unique + 1\n            end\n \
    \       end\n        if unique > max_unique then\n            max_unique = unique\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3274ic79.lua:35:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp3274ic79.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \  local max_word = words[1]\n  local max_count = count_unique(max_word)\n  for\
    \ i = 2, #words do\n    local word = words[i]\n    local count = count_unique(word)\n\
    \    if count > max_count then\n      max_word = word\n      max_count = count\n\
    \    end\n  end\n  return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6j_dtofk.lua:13:\
    \ attempt to call global 'count_unique' (a nil value)\nstack traceback:\n\t/tmp/tmp6j_dtofk.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp6j_dtofk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _ in word:gmatch('.') do\n        \
    \    count = count + 1\n        end\n        if count > max_count then\n     \
    \       max_count = count\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgcuved1.lua:31:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpxgcuved1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _ in word:gmatch('.') do\n        \
    \    count = count + 1\n        end\n        if count > max_count then\n     \
    \       max_count = count\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgcuved1.lua:31:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpxgcuved1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_unique = #unique_chars(max_word)\n\
    \    for i = 2, #words do\n        local word = words[i]\n        local unique\
    \ = #unique_chars(word)\n        if unique > max_unique then\n            max_word\
    \ = word\n            max_unique = unique\n        end\n    end\n    return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpap945jpm.lua:13:\
    \ attempt to call global 'unique_chars' (a nil value)\nstack traceback:\n\t/tmp/tmpap945jpm.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpap945jpm.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = #unique_chars(max_word)\n\
    \    for i = 2, #words do\n        local word = words[i]\n        local count\
    \ = #unique_chars(word)\n        if count > max_count then\n            max_word\
    \ = word\n            max_count = count\n        end\n    end\n    return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp85p7j0gg.lua:13:\
    \ attempt to call global 'unique_chars' (a nil value)\nstack traceback:\n\t/tmp/tmp85p7j0gg.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp85p7j0gg.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_unique = #unique_chars(max_word)\n\
    \    for i = 2, #words do\n        local word = words[i]\n        local unique\
    \ = #unique_chars(word)\n        if unique > max_unique then\n            max_word\
    \ = word\n            max_unique = unique\n        end\n    end\n    return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpap945jpm.lua:13:\
    \ attempt to call global 'unique_chars' (a nil value)\nstack traceback:\n\t/tmp/tmpap945jpm.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpap945jpm.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _ in word:gmatch('.') do\n        \
    \    count = count + 1\n        end\n        if count > max_count then\n     \
    \       max_count = count\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgcuved1.lua:31:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpxgcuved1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = nil\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _ in pairs(get_chars(word)) do\n  \
    \          count = count + 1\n        end\n        if count > max_count then\n\
    \            max_count = count\n            max_word = word\n        end\n   \
    \ end\n    return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qzd85d4.lua:16:\
    \ attempt to call global 'get_chars' (a nil value)\nstack traceback:\n\t/tmp/tmp5qzd85d4.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp5qzd85d4.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _ in pairs(word:unique_chars()) do\n\
    \            count = count + 1\n        end\n        if count > max_count then\n\
    \            max_count = count\n            max_word = word\n        end\n   \
    \ end\n    return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegca6lut.lua:16:\
    \ attempt to call method 'unique_chars' (a nil value)\nstack traceback:\n\t/tmp/tmpegca6lut.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpegca6lut.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _, char in ipairs(word:split('')) do\n\
    \            if not max_word:find(char) then\n                count = count +\
    \ 1\n            end\n        end\n        if count > max_count then\n       \
    \     max_count = count\n            max_word = word\n        end\n    end\n \
    \   return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqto23fwo.lua:16:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpqto23fwo.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpqto23fwo.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _, char in ipairs(word:chars()) do\n\
    \            if not max_word:contains(char) then\n                count = count\
    \ + 1\n            end\n        end\n        if count > max_count then\n     \
    \       max_word = word\n            max_count = count\n        end\n    end\n\
    \    return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoeqkizyb.lua:16:\
    \ attempt to call method 'chars' (a nil value)\nstack traceback:\n\t/tmp/tmpoeqkizyb.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpoeqkizyb.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = #unique_chars(max_word)\n\
    \    for i = 2, #words do\n        local word = words[i]\n        local count\
    \ = #unique_chars(word)\n        if count > max_count then\n            max_word\
    \ = word\n            max_count = count\n        end\n    end\n    return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp85p7j0gg.lua:13:\
    \ attempt to call global 'unique_chars' (a nil value)\nstack traceback:\n\t/tmp/tmp85p7j0gg.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp85p7j0gg.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \    local max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _ in pairs(word_chars(word)) do\n \
    \           count = count + 1\n        end\n        if count > max_count then\n\
    \            max_count = count\n            max_word = word\n        end\n   \
    \ end\n    return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpna53g151.lua:16:\
    \ attempt to call global 'word_chars' (a nil value)\nstack traceback:\n\t/tmp/tmpna53g151.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpna53g151.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- >>> find_max({'name', 'of',\
    \ 'string'})\n-- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n\
    -- >>> find_max({'aaaaaaa', 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n\
    \  local max_word = words[1]\n  local max_count = 0\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, char in ipairs(word:split('')) do\n    \
    \  if not max_word:find(char) then\n        count = count + 1\n      end\n   \
    \ end\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpawgln86q.lua:16:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpawgln86q.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpawgln86q.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
