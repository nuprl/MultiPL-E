language: lua
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    for _, d in\
    \ ipairs(digits(v)) do\n      sum = sum + d\n    end\n    if sum > 0 then\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzbnvirgi.lua:15:\
    \ attempt to call global 'digits' (a nil value)\nstack traceback:\n\t/tmp/tmpzbnvirgi.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpzbnvirgi.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n \
    \       for _, digit in ipairs(to_digits(num)) do\n            sum = sum + digit\n\
    \        end\n        if sum > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy17rp2r6.lua:15:\
    \ attempt to call global 'to_digits' (a nil value)\nstack traceback:\n\t/tmp/tmpy17rp2r6.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpy17rp2r6.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n   \
    \     local n = v\n        if n < 0 then\n            n = -n\n        end\n  \
    \      while n > 0 do\n            sum = sum + n % 10\n            n = math.floor(n\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaiodwwv5.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpaiodwwv5.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local sum = 0\n\
    \    if num < 0 then\n      num = -num\n    end\n    while num > 0 do\n      sum\
    \ = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    if sum > 0\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbz_d7pz0.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpbz_d7pz0.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ num = arr[i]\n        if num < 0 then\n            num = -num\n        end\n\
    \        while num > 0 do\n            sum = sum + num % 10\n            num =\
    \ math.floor(num / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dolv1bz.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp6dolv1bz.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    for _, d in\
    \ ipairs(digits(v)) do\n      sum = sum + d\n    end\n    if sum > 0 then\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzbnvirgi.lua:15:\
    \ attempt to call global 'digits' (a nil value)\nstack traceback:\n\t/tmp/tmpzbnvirgi.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpzbnvirgi.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n \
    \       if num < 0 then\n            sum = sum - 1\n            num = -num\n \
    \       end\n        while num > 0 do\n            sum = sum + num % 10\n    \
    \        num = math.floor(num / 10)\n        end\n        if sum > 0 then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kgklb9b.lua:34:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3kgklb9b.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n   \
    \   count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36tu5ixu.lua:14:\
    \ attempt to call global 'sum_digits' (a nil value)\nstack traceback:\n\t/tmp/tmp36tu5ixu.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp36tu5ixu.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n   \
    \     local n = v\n        if n < 0 then\n            n = -n\n        end\n  \
    \      while n > 0 do\n            sum = sum + n % 10\n            n = math.floor(n\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaiodwwv5.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpaiodwwv5.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n \
    \       for digit in tostring(math.abs(num)):gmatch(\"%d\") do\n            sum\
    \ = sum + tonumber(digit)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgxlo27i.lua:29:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpkgxlo27i.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ num = arr[i]\n        if num < 0 then\n            num = -num\n        end\n\
    \        while num > 0 do\n            sum = sum + num % 10\n            num =\
    \ math.floor(num / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dolv1bz.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp6dolv1bz.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        if sum_digits(arr[i]) > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_o0eded.lua:14:\
    \ attempt to call global 'sum_digits' (a nil value)\nstack traceback:\n\t/tmp/tmpx_o0eded.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpx_o0eded.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n    for d in tostring(n):gmatch('[-%d]')\
    \ do\n      sum = sum + tonumber(d)\n    end\n    if sum > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwnm9uq94.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpwnm9uq94.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpwnm9uq94.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: -1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n      \
    \  local sum = 0\n        while num ~= 0 do\n            sum = sum + math.abs(num\
    \ % 10)\n            num = math.floor(num / 10)\n        end\n        if sum >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    for _, d in\
    \ ipairs(split_digits(v)) do\n      sum = sum + d\n    end\n    if sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsi05bki0.lua:15:\
    \ attempt to call global 'split_digits' (a nil value)\nstack traceback:\n\t/tmp/tmpsi05bki0.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpsi05bki0.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n   \
    \     for _, d in ipairs(to_digits(v)) do\n            sum = sum + d\n       \
    \ end\n        if sum > 0 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2j5esexi.lua:15:\
    \ attempt to call global 'to_digits' (a nil value)\nstack traceback:\n\t/tmp/tmp2j5esexi.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp2j5esexi.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local sum = 0\n    local n = arr[i]\n \
    \   if n < 0 then\n      n = -n\n    end\n    while n > 0 do\n      sum = sum\
    \ + n % 10\n      n = n // 10\n    end\n    if sum > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr8kip2iz.lua:21: unexpected symbol near ''/''

    '
  stdout: ''
  timestamp: 1659750403
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ num = arr[i]\n        if num < 0 then\n            num = -num\n        end\n\
    \        while num > 0 do\n            sum = sum + num % 10\n            num =\
    \ math.floor(num / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dolv1bz.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp6dolv1bz.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750403
- exit_code: -1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n      \
    \  local sum = 0\n        while num ~= 0 do\n            sum = sum + num % 10\n\
    \            num = math.floor(num / 10)\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
- exit_code: -1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n   \
    \     local n = v\n        while n ~= 0 do\n            sum = sum + math.abs(n\
    \ % 10)\n            n = math.floor(n / 10)\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
