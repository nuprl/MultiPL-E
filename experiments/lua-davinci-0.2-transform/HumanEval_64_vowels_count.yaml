name: HumanEval_64_vowels_count
language: lua
prompt: "-- Write a function vowels_count which takes a string representing\n-- a\
  \ word as input and returns the number of vowels in the string.\n-- Vowels in this\
  \ case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only when\
  \ it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
  -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
  \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
  \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
  \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
  \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local count = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n\
    \    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n       (c\
    \ == 'y' and i == #s) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  for i = 1, #s do\n    if s:sub(i, i) == 'a'\
    \ or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i,\
    \ i) == 'u' or s:sub(i, i) == 'y' then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for i = 1, #s do\n        if\
    \ s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i)\
    \ == 'o' or s:sub(i, i) == 'u' or s:sub(i, i) == 'y' then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend", "    local count =\
    \ 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e'\
    \ or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i,\
    \ i) == 'y' and i == #s) then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend", "    local count = 0\n    for i = 1, #s do\n \
    \       local c = s:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or\
    \ c == 'o' or c == 'u' or\n            (c == 'y' and i == #s) then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i)\
    \ == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or\
    \ s:sub(i, i) == 'y' then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or\
    \ c == 'u' or\n           (c == 'y' and i == #s) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i,\
    \ i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y'\
    \ and i == #s) then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "  -- TODO: implement this function\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a' or c ==\
    \ 'e' or c == 'i' or c == 'o' or c == 'u' or\n       (c == 'y' and i == #s) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n           (c == 'y' and\
    \ i == #s) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for i = 1, #s do\n        if s:sub(i,\
    \ i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o'\
    \ or s:sub(i, i) == 'u' or s:sub(i, i) == 'y' then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == 'a' or c ==\
    \ 'e' or c == 'i' or c == 'o' or c == 'u' or\n           (c == 'y' and i == #s)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or s:sub(i, i) == 'y' then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n\
    \           (c == 'y' and i == #s) then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend", "  local count = 0\n  for i = 1, #s\
    \ do\n    local c = s:sub(i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u' or\n       (c == 'y' and i == #s) then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local count = 0\n    for i =\
    \ 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i)\
    \ == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or s:sub(i, i) == 'y' then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == #s) then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "    local count = 0\n    for i =\
    \ 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i)\
    \ == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or s:sub(i, i) == 'y' then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == #s) then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
