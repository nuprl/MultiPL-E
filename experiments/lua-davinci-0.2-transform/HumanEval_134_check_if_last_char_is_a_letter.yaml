name: HumanEval_134_check_if_last_char_is_a_letter
language: lua
prompt: "-- Create a function that returns True if the last character\n-- of a given\
  \ string is an alphabetical character and is not\n-- a part of a word, and False\
  \ otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n--\
  \ Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n-- >>>\
  \ check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
  \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
  \ function check_if_last_char_is_a_letter(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
  \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
  \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
  \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
  \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- TODO: Implement this function.\nend", "  -- TODO: implement this\
    \ function\nend", "    local last_char = txt:sub(-1)\n    if last_char:match('%a')\
    \ and not last_char:match('%w') then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    -- TODO: implement this function\nend", "    if txt\
    \ == '' then\n        return false\n    end\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') then\n        local last_char_index = txt:len()\n\
    \        local last_char_is_a_letter = true\n        for i = last_char_index -\
    \ 1, 1, -1 do\n            local char = txt:sub(i, i)\n            if char:match('%a')\
    \ then\n                last_char_is_a_letter = false\n                break\n\
    \            end\n            if char:match('%s') then\n                break\n\
    \            end\n        end\n        return last_char_is_a_letter\n    end\n\
    \    return false\nend", "  -- TODO: implement this function\nend", "    -- TODO:\
    \ Implement this function\nend", "    -- TODO: Implement this function\nend",
  "  -- TODO: implement this function\nend", "    -- TODO: Implement the function\
    \ here\nend", "  -- TODO: implement this function\nend", "  return false\nend",
  "  -- TODO: Implement this function.\nend", "    -- TODO: implement this function\n\
    end", "    return false\nend", "  -- TODO: implement this function\nend", "  --\
    \ TODO: implement this function\nend", "    local last_char = txt:sub(-1)\n  \
    \  return last_char:match('%a') and not txt:sub(-2):match('%a')\nend", "  -- TODO:\
    \ Implement this function\nend", "  -- TODO: implement this function\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
