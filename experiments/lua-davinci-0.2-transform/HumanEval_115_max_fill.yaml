name: HumanEval_115_max_fill
language: lua
prompt: "-- You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n-- and\
  \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
  \ the wells.\n-- Output the number of times you need to lower the buckets.\n-- Example\
  \ 1:\n-- >>> max_fill({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1)\n-- 6\n-- Example\
  \ 2:\n-- >>> max_fill({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}},\
  \ 2)\n-- 5\n-- Example 3:\n-- >>> max_fill({{0, 0, 0}, {0, 0, 0}}, 5)\n-- 0\n--\
  \ Constraints:\n-- * all wells have the same length\n-- * 1 <= grid.length <= 10^2\n\
  -- * 1 <= grid[:,1].length <= 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity\
  \ <= 10\nlocal function max_fill(grid, capacity)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
  \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n\
  \    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1,\
  \ 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)\n\
  \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1,\
  \ 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function fill(grid, capacity)\n    local function fill_row(row,\
    \ capacity)\n      local function fill_cell(cell, capacity)\n        if cell ==\
    \ 1 then\n          return 1\n        else\n          return 0\n        end\n\
    \      end\n      return map(row, function(cell) return fill_cell(cell, capacity)\
    \ end)\n    end\n    return map(grid, function(row) return fill_row(row, capacity)\
    \ end)\n  end\n  local function empty(grid, capacity)\n    local function empty_row(row,\
    \ capacity)\n      local function empty_cell(cell, capacity)\n        if cell\
    \ == 1 then\n          return 0\n        else\n          return 1\n        end\n\
    \      end\n      return map(row, function(cell) return empty_cell(cell, capacity)\
    \ end)\n    end\n    return map(grid, function(row) return empty_row(row, capacity)\
    \ end)\n  end\n  local function count_filled(grid)\n    local function count_filled_row(row)\n\
    \      local function count_filled_cell(cell)\n        if cell == 1 then\n   \
    \       return 1\n        else\n          return 0\n        end\n      end\n \
    \     return sum(map(row, function(cell) return count_filled_cell(cell) end))\n\
    \    end\n    return sum(map(grid, function(row) return count_filled_row(row)\
    \ end))\n  end\n  local function count_emptied(grid)\n    local function count_emptied_row(row)\n\
    \      local function count_emptied_cell(cell)\n        if cell == 1 then\n  \
    \        return 0\n        else\n          return 1\n        end\n      end\n\
    \      return sum(map(row, function(cell) return count_emptied_cell(cell) end))\n\
    \    end\n    return sum(map(grid, function(row) return count_emptied_row(row)\
    \ end))\n  end\n  local function count_operations(grid, capacity)\n    local filled\
    \ = count_filled(grid)\n    local emptied = count_emptied(grid)\n    local filled_rows\
    \ = math.floor(filled / capacity)\n    local filled_cells = filled % capacity\n\
    \    local emptied_rows", "    local function max_fill_rec(grid, capacity, row,\
    \ col, count)\n        if row > #grid then\n            return count\n       \
    \ end\n        if col > #grid[1] then\n            return max_fill_rec(grid, capacity,\
    \ row + 1, 1, count)\n        end\n        if grid[row][col] == 1 then\n     \
    \       grid[row][col] = 0\n            count = count + 1\n            for i =\
    \ row, 1, -1 do\n                if grid[i][col] == 1 then\n                 \
    \   grid[i][col] = 0\n                    count = count + 1\n                else\n\
    \                    break\n                end\n            end\n        end\n\
    \        return max_fill_rec(grid, capacity, row, col + 1, count)\n    end\n \
    \   return max_fill_rec(grid, capacity, 1, 1, 0)\nend", "    local rows = #grid\n\
    \    local cols = #grid[1]\n    local max_height = 0\n    for i = 1, rows do\n\
    \        for j = 1, cols do\n            max_height = math.max(max_height, grid[i][j])\n\
    \        end\n    end\n    local function fill(height)\n        local count =\
    \ 0\n        for i = 1, rows do\n            for j = 1, cols do\n            \
    \    if grid[i][j] > height then\n                    count = count + grid[i][j]\
    \ - height\n                end\n            end\n        end\n        return\
    \ count\n    end\n    local function bsearch(low, high)\n        if low == high\
    \ then\n            return low\n        end\n        local mid = math.floor((low\
    \ + high) / 2)\n        if fill(mid) > capacity then\n            return bsearch(mid\
    \ + 1, high)\n        else\n            return bsearch(low, mid)\n        end\n\
    \    end\n    return bsearch(0, max_height)\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(fill_cell, row,\
    \ capacity)\n        end\n        return map(fill_row, grid, capacity)\n    end\n\
    \    local function sum_grid(grid)\n        local function sum_row(row)\n    \
    \        local function sum_cell(cell)\n                return cell\n        \
    \    end\n            return reduce(sum_cell, row, 0)\n        end\n        return\
    \ reduce(sum_row, grid, 0)\n    end\n    local function empty(grid)\n        local\
    \ function empty_row(row)\n            local function empty_cell(cell)\n     \
    \           return 0\n            end\n            return map(empty_cell, row)\n\
    \        end\n        return map(empty_row, grid)\n    end\n    local function\
    \ sum_grid_and_empty(grid, capacity)\n        return sum_grid(grid), empty(grid)\n\
    \    end\n    local function sum_grid_and_fill(grid, capacity)\n        return\
    \ sum_grid(grid), fill(grid, capacity)\n    end\n    local function sum_grid_and_fill_and_empty(grid,\
    \ capacity)\n        return sum_grid(grid), fill(grid, capacity), empty(grid)\n\
    \    end\n    local function sum_grid_and_fill_and_empty_and_fill(grid, capacity)\n\
    \        return sum_grid(grid), fill(grid, capacity), empty(grid), fill(grid,\
    \ capacity)\n    end\n    local function sum_grid_and_fill_and_empty_and_fill_and_empty(grid,\
    \ capacity)\n        return sum_grid(grid), fill(grid, capacity), empty(grid),\
    \ fill(grid, capacity), empty(grid)\n    end\n    local function sum_grid_and_fill_and_empty_and_fill_and_empty_and_fill(grid,\
    \ capacity)\n        return sum_grid(grid), fill(grid, capacity), empty(grid),\
    \ fill(grid, capacity), empty(grid), fill(grid, capacity)\n    end", "    local\
    \ function fill(row, col)\n        local function fill_row(row, col)\n       \
    \     local function fill_col(row, col)\n                if grid[row][col] ==\
    \ 1 then\n                    grid[row][col] = 0\n                    return 1\n\
    \                end\n                return 0\n            end\n            local\
    \ count = 0\n            for i = 1, #grid[row] do\n                count = count\
    \ + fill_col(row, i)\n            end\n            return count\n        end\n\
    \        local count = 0\n        for i = 1, #grid do\n            count = count\
    \ + fill_row(i, col)\n        end\n        return count\n    end\n    local count\
    \ = 0\n    for i = 1, #grid[1] do\n        count = count + fill(1, i)\n    end\n\
    \    return count * capacity\nend", "  local function get_max_fill(grid, capacity)\n\
    \    local max_fill = 0\n    for i = 1, #grid do\n      local row = grid[i]\n\
    \      local fill = 0\n      for j = 1, #row do\n        if row[j] == 1 then\n\
    \          fill = fill + 1\n        end\n      end\n      if fill > max_fill then\n\
    \        max_fill = fill\n      end\n    end\n    return max_fill\n  end\n  local\
    \ function get_max_fill_per_row(grid, capacity)\n    local max_fill_per_row =\
    \ {}\n    for i = 1, #grid do\n      local row = grid[i]\n      local fill = 0\n\
    \      for j = 1, #row do\n        if row[j] == 1 then\n          fill = fill\
    \ + 1\n        end\n      end\n      max_fill_per_row[i] = fill\n    end\n   \
    \ return max_fill_per_row\n  end\n  local function get_max_fill_per_col(grid,\
    \ capacity)\n    local max_fill_per_col = {}\n    for j = 1, #grid[1] do\n   \
    \   local fill = 0\n      for i = 1, #grid do\n        if grid[i][j] == 1 then\n\
    \          fill = fill + 1\n        end\n      end\n      max_fill_per_col[j]\
    \ = fill\n    end\n    return max_fill_per_col\n  end\n  local function get_max_fill_per_row_and_col(grid,\
    \ capacity)\n    local max_fill_per_row_and_col = {}\n    for i = 1, #grid do\n\
    \      local row = grid[i]\n      local fill = 0\n      for j = 1, #row do\n \
    \       if row[j] == 1 then\n          fill = fill + 1\n        end\n      end\n\
    \      max_fill_per_row_and_col[i] = fill\n    end\n    for j = 1, #grid[1] do\n\
    \      local fill = 0\n      for i = 1, #grid do\n        if grid[i][j] == 1 then\n\
    \          fill = fill + 1\n        end\n", "    local function fill(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(fill_cell, row, capacity)\n        end\n\
    \        return map(fill_row, grid, capacity)\n    end\n    local function sum_rows(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return map(sum_row, grid)\n    end\n    local\
    \ function sum_grid(grid)\n        local function sum_row(row)\n            local\
    \ function sum_cell(cell)\n                return cell\n            end\n    \
    \        return reduce(sum_cell, row, 0)\n        end\n        return reduce(sum_row,\
    \ grid, 0)\n    end\n    local function fill_grid(grid, capacity)\n        local\
    \ function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    if capacity > cell then\n         \
    \               return 0\n                    else\n                        return\
    \ cell - capacity\n                    end\n                end\n            end\n\
    \            return map(fill_cell, row, capacity)\n        end\n        return\
    \ map(fill_row, grid, capacity)\n    end\n    local function fill_grid_recursive(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    if capacity\
    \ > cell then\n                        return 0\n                    else\n  \
    \                      return cell - capacity\n                    end\n     \
    \           end\n            end\n            return map(fill_cell, row, capacity)\n\
    \        end\n        local function fill_grid_recursive_helper(grid, capacity)\n\
    \            local new_grid = map(fill_row, grid, capacity)\n            local\
    \ new_capacity = sum_rows(new_grid)\n            if sum_grid(new_grid) == 0 then\n\
    \                return new_grid\n            else\n                return fill",
  "    local rows = #grid\n    local cols = #grid[1]\n    local max_water = 0\n  \
    \  local max_water_count = 0\n    local water_count = 0\n    local water_level\
    \ = 0\n    local water_level_count = 0\n    local water_level_count_max = 0\n\
    \    local water_level_count_max_count = 0\n    local water_level_count_max_count_max\
    \ = 0\n    local water_level_count_max_count_max_count = 0\n    local water_level_count_max_count_max_count_max\
    \ = 0\n    local water_level_count_max_count_max_count_max_count = 0\n    local\
    \ water_level_count_max_count_max_count_max_count_max = 0\n    local water_level_count_max_count_max_count_max_count_max_count\
    \ = 0\n    local water_level_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    local water_level_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    local water_level_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    local water_level_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    local water_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    local water_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    local water_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n    local water_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n    local water_level_count_max_count_max_count_max", "    local function\
    \ fill(grid, capacity)\n        local function fill_row(row, capacity)\n     \
    \       local function fill_col(col, capacity)\n                if capacity ==\
    \ 0 then\n                    return 0\n                end\n                if\
    \ col == #row then\n                    return 1\n                end\n      \
    \          if row[col] == 0 then\n                    return fill_col(col + 1,\
    \ capacity)\n                end\n                return 1 + fill_col(col + 1,\
    \ capacity - 1)\n            end\n            return fill_col(1, capacity)\n \
    \       end\n        if #grid == 0 then\n            return 0\n        end\n \
    \       return fill_row(grid[1], capacity) + fill(grid, capacity)\n    end\n \
    \   return fill(grid, capacity)\nend", "  local function fill(grid, capacity)\n\
    \    local filled = 0\n    for i = 1, #grid do\n      local row = grid[i]\n  \
    \    local filled_row = 0\n      for j = 1, #row do\n        if row[j] == 1 then\n\
    \          filled_row = filled_row + 1\n        end\n      end\n      filled =\
    \ filled + math.ceil(filled_row / capacity)\n    end\n    return filled\n  end\n\
    \  return fill(grid, capacity)\nend", "    local function fill(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return table.map(row, fill_cell, capacity)\n   \
    \     end\n        return table.map(grid, fill_row, capacity)\n    end\n    local\
    \ function sum_grid(grid)\n        local function sum_row(row)\n            return\
    \ table.sum(row)\n        end\n        return table.sum(table.map(grid, sum_row))\n\
    \    end\n    return sum_grid(fill(grid, capacity))\nend", "    local function\
    \ max_fill_rec(grid, capacity, row, col, count)\n        if row == #grid then\n\
    \            return count\n        end\n        if col == #grid[1] then\n    \
    \        return max_fill_rec(grid, capacity, row + 1, 1, count)\n        end\n\
    \        if grid[row][col] == 1 then\n            grid[row][col] = 0\n       \
    \     count = count + 1\n            capacity = capacity - 1\n        end\n  \
    \      if capacity == 0 then\n            return max_fill_rec(grid, capacity,\
    \ row + 1, 1, count)\n        end\n        return max_fill_rec(grid, capacity,\
    \ row, col + 1, count)\n    end\n    return max_fill_rec(grid, capacity, 1, 1,\
    \ 0)\nend", "    local function max_fill_rec(grid, capacity, row, col, count)\n\
    \        if row > #grid then\n            return count\n        end\n        if\
    \ col > #grid[1] then\n            return max_fill_rec(grid, capacity, row + 1,\
    \ 1, count)\n        end\n        if grid[row][col] == 1 then\n            grid[row][col]\
    \ = 0\n            return max_fill_rec(grid, capacity, row, col + 1, count + 1)\n\
    \        end\n        return max_fill_rec(grid, capacity, row, col + 1, count)\n\
    \    end\n    return max_fill_rec(grid, capacity, 1, 1, 0)\nend", "  local n =\
    \ #grid\n  local m = #grid[1]\n  local function fill(i, j)\n    if i > n or j\
    \ > m then\n      return 0\n    end\n    local c = grid[i][j]\n    if c == 0 then\n\
    \      return fill(i, j + 1)\n    end\n    local x = fill(i, j + 1)\n    local\
    \ y = fill(i + 1, j)\n    local z = fill(i + 1, j + 1)\n    return math.max(x,\
    \ y, z) + capacity\n  end\n  return fill(1, 1)\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(row, function(cell)\
    \ return fill_cell(cell, capacity) end)\n        end\n        return map(grid,\
    \ function(row) return fill_row(row, capacity) end)\n    end\n    local function\
    \ empty(grid, capacity)\n        local function empty_row(row, capacity)\n   \
    \         local function empty_cell(cell, capacity)\n                if cell ==\
    \ 0 then\n                    return 0\n                else\n               \
    \     return cell - capacity\n                end\n            end\n         \
    \   return map(row, function(cell) return empty_cell(cell, capacity) end)\n  \
    \      end\n        return map(grid, function(row) return empty_row(row, capacity)\
    \ end)\n    end\n    local function count_steps(grid)\n        local function\
    \ count_row(row)\n            local function count_cell(cell)\n              \
    \  if cell == 0 then\n                    return 0\n                else\n   \
    \                 return 1\n                end\n            end\n           \
    \ return reduce(row, function(acc, cell) return acc + count_cell(cell) end, 0)\n\
    \        end\n        return reduce(grid, function(acc, row) return acc + count_row(row)\
    \ end, 0)\n    end\n    local function is_empty(grid)\n        local function\
    \ is_row_empty(row)\n            local function is_cell_empty(cell)\n        \
    \        if cell == 0 then\n                    return true\n                else\n\
    \                    return false\n                end\n            end\n    \
    \        return reduce(row, function(acc, cell) return acc and is_cell_empty(cell)\
    \ end, true)\n        end\n        return reduce(grid, function(acc, row) return\
    \ acc and is_row_empty(row) end, true)\n    end\n    local function fill_and_empty(grid,\
    \ capacity)\n        local filled = fill(grid, capacity)\n        local emptied\
    \ = empty(filled, capacity)\n        return emptied\n    end\n    local function\
    \ count_steps_until_empty(grid, capacity)\n        local", "    local function\
    \ fill_row(row, capacity)\n        local count = 0\n        local i = 1\n    \
    \    while i <= #row do\n            if row[i] == 1 then\n                count\
    \ = count + 1\n                i = i + capacity\n            else\n          \
    \      i = i + 1\n            end\n        end\n        return count\n    end\n\
    \    local count = 0\n    for i = 1, #grid do\n        count = count + fill_row(grid[i],\
    \ capacity)\n    end\n    return count\nend", "    local function fill(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(row, fill_cell, capacity)\n        end\n\
    \        return map(grid, fill_row, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(row,\
    \ sum_cell, 0)\n        end\n        return reduce(grid, sum_row, 0)\n    end\n\
    \    local function fill_grid(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(row, fill_cell, capacity)\n        end\n        return\
    \ map(grid, fill_row, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(row,\
    \ sum_cell, 0)\n        end\n        return reduce(grid, sum_row, 0)\n    end\n\
    \    local function fill_grid(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(row, fill_cell, capacity)\n        end\n        return\
    \ map(grid, fill_row, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(row,\
    \ sum_cell, 0)\n        end\n        return reduce(grid, sum_row, 0)\n    end\n\
    \    local function fill_grid(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_column(column, capacity)\n                if capacity == 0 then\n\
    \                    return 0\n                end\n                if column\
    \ > #row then\n                    return 0\n                end\n           \
    \     if row[column] == 1 then\n                    row[column] = 0\n        \
    \            return 1 + fill_column(column + 1, capacity - 1)\n              \
    \  end\n                return fill_column(column + 1, capacity)\n           \
    \ end\n            return fill_column(1, capacity)\n        end\n        local\
    \ function fill_grid(grid, capacity)\n            if #grid == 0 then\n       \
    \         return 0\n            end\n            return fill_row(grid[1], capacity)\
    \ + fill_grid(grid, capacity)\n        end\n        return fill_grid(grid, capacity)\n\
    \    end\n    return fill(grid, capacity)\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 1 then\n    \
    \                return capacity - 1\n                else\n                 \
    \   return capacity\n                end\n            end\n            local function\
    \ fill_row_helper(row, capacity, i)\n                if i > #row then\n      \
    \              return capacity\n                else\n                    return\
    \ fill_row_helper(row, fill_cell(row[i], capacity), i + 1)\n                end\n\
    \            end\n            return fill_row_helper(row, capacity, 1)\n     \
    \   end\n        local function fill_grid_helper(grid, capacity, i)\n        \
    \    if i > #grid then\n                return capacity\n            else\n  \
    \              return fill_grid_helper(grid, fill_row(grid[i], capacity), i +\
    \ 1)\n            end\n        end\n        return fill_grid_helper(grid, capacity,\
    \ 1)\n    end\n    local function max_fill_helper(grid, capacity, i)\n       \
    \ if fill(grid, capacity) == 0 then\n            return i\n        else\n    \
    \        return max_fill_helper(grid, capacity, i + 1)\n        end\n    end\n\
    \    return max_fill_helper(grid, capacity, 0)\nend", "  local function fill(grid,\
    \ capacity)\n    local function fill_row(row, capacity)\n      local function\
    \ fill_cell(cell, capacity)\n        if cell == 1 then\n          return capacity\
    \ - 1\n        else\n          return capacity\n        end\n      end\n     \
    \ local row_capacity = capacity\n      for i, cell in ipairs(row) do\n       \
    \ row_capacity = fill_cell(cell, row_capacity)\n        if row_capacity == 0 then\n\
    \          return i\n        end\n      end\n      return #row\n    end\n    local\
    \ filled = 0\n    for i, row in ipairs(grid) do\n      filled = filled + fill_row(row,\
    \ capacity)\n    end\n    return filled\n  end\n  local function empty(grid)\n\
    \    local function empty_row(row)\n      local function empty_cell(cell)\n  \
    \      if cell == 1 then\n          return 0\n        else\n          return cell\n\
    \        end\n      end\n      local empty_row = {}\n      for i, cell in ipairs(row)\
    \ do\n        empty_row[i] = empty_cell(cell)\n      end\n      return empty_row\n\
    \    end\n    local empty_grid = {}\n    for i, row in ipairs(grid) do\n     \
    \ empty_grid[i] = empty_row(row)\n    end\n    return empty_grid\n  end\n  local\
    \ function is_empty(grid)\n    local function is_empty_row(row)\n      local function\
    \ is_empty_cell(cell)\n        if cell == 1 then\n          return false\n   \
    \     else\n          return true\n        end\n      end\n      for i, cell in\
    \ ipairs(row) do\n        if not is_empty_cell(cell) then\n          return false\n\
    \        end\n      end\n      return true\n    end\n    for i, row in ipairs(grid)\
    \ do\n      if not is_empty_row(row) then\n        return false\n      end\n \
    \   end\n    return true\n  end\n  local filled = 0\n  while not is_empty(grid)\
    \ do\n    filled = filled + fill(grid, capacity)\n    grid = empty(grid)\n  end\n\
    \  return filled\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
