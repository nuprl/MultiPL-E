name: HumanEval_144_simplify
language: lua
prompt: "-- Your task is to implement a function that will simplify the expression\n\
  -- x * n. The function returns True if x * n evaluates to a whole number and False\n\
  -- otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n-- <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n-- You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n-- >>> simplify('1/5', '5/1')\n-- true\n\
  -- >>> simplify('1/6', '2/1')\n-- false\n-- >>> simplify('7/10', '10/2')\n-- false\n\
  local function simplify(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = simplify\n\
  \    lu.assertEquals(candidate('1/5', '5/1'), true)\n    lu.assertEquals(candidate('1/6',\
  \ '2/1'), false)\n    lu.assertEquals(candidate('5/1', '3/1'), true)\n    lu.assertEquals(candidate('7/10',\
  \ '10/2'), false)\n    lu.assertEquals(candidate('2/10', '50/10'), true)\n    lu.assertEquals(candidate('7/2',\
  \ '4/2'), true)\n    lu.assertEquals(candidate('11/6', '6/1'), true)\n    lu.assertEquals(candidate('2/3',\
  \ '5/2'), false)\n    lu.assertEquals(candidate('5/2', '3/5'), false)\n    lu.assertEquals(candidate('2/4',\
  \ '8/4'), true)\n    lu.assertEquals(candidate('2/4', '4/2'), true)\n    lu.assertEquals(candidate('1/5',\
  \ '5/1'), true)\n    lu.assertEquals(candidate('1/5', '1/5'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n   \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "  local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_numerator\n  local\
    \ denominator = x_denominator * n_denominator\n  local whole_number = numerator\
    \ / denominator\n  return whole_number % 1 == 0\nend", "  local function gcd(a,\
    \ b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local\
    \ function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function parse(s)\n\
    \    local n, d = s:match('(%d+)/(%d+)')\n    return tonumber(n), tonumber(d)\n\
    \  end\n  local xn, xd = parse(x)\n  local nn, nd = parse(n)\n  return lcm(xd,\
    \ nd) % (xn * nn) == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = x_numerator * n_denominator\n    local denominator = x_denominator * n_numerator\n\
    \    local gcd = math.gcd(numerator, denominator)\n    return numerator / gcd\
    \ == denominator / gcd\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local result = numerator / denominator\n  return result % 1 == 0\nend", " \
    \   -- your code here\nend", "  local function gcd(a, b)\n    if b == 0 then return\
    \ a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function to_number(s)\n    local a, b = s:match('(%d+)/(%d+)')\n\
    \    return tonumber(a) / tonumber(b)\n  end\n  local function to_fraction(n)\n\
    \    local a, b = math.modf(n)\n    if b == 0 then return tostring(a) .. '/1'\
    \ end\n    local g = gcd(a, b)\n    return tostring(a / g) .. '/' .. tostring(b\
    \ / g)\n  end\n  local function multiply(x, n)\n    return to_fraction(to_number(x)\
    \ * to_number(n))\n  end\n  local function is_whole_number(n)\n    return n:match('%d+/1')\
    \ ~= nil\n  end\n  return is_whole_number(multiply(x, n))\nend", "  local x_num,\
    \ x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local x_num, x_den = tonumber(x_num), tonumber(x_den)\n  local n_num, n_den\
    \ = tonumber(n_num), tonumber(n_den)\n  local x_num, x_den = x_num * n_den, x_den\
    \ * n_num\n  local x_num, x_den = x_num / math.gcd(x_num, x_den), x_den / math.gcd(x_num,\
    \ x_den)\n  return x_num % x_den == 0\nend", "    local function gcd(a, b)\n \
    \       if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local result_numerator = x_numerator * n_numerator\n    local result_denominator\
    \ = x_denominator * n_denominator\n    local result = result_numerator / result_denominator\n\
    \    return result % 1 == 0\nend", "    local function gcd(a, b)\n        if b\
    \ == 0 then\n            return a\n        else\n            return gcd(b, a %\
    \ b)\n        end\n    end", "  local function gcd(a, b)\n    if b == 0 then return\
    \ a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n    local numerator,\
    \ denominator = x:match('(%d+)/(%d+)')\n    local gcd_num_den = gcd(numerator,\
    \ denominator)\n    return numerator / gcd_num_den, denominator / gcd_num_den\n\
    \  end\n  local x_num, x_den = simplify_fraction(x)\n  local n_num, n_den = simplify_fraction(n)\n\
    \  local lcm_den = lcm(x_den, n_den)\n  local num = x_num * (lcm_den / x_den)\
    \ * n_num\n  local den = lcm_den\n  local gcd_num_den = gcd(num, den)\n  num =\
    \ num / gcd_num_den\n  den = den / gcd_num_den\n  return num % den == 0\nend",
  "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local numerator = tonumber(x_numerator)\
    \ * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n\
    \  return numerator % denominator == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local\
    \ n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local\
    \ den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return den / gcd ==\
    \ num / gcd\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result =\
    \ x_numerator * n_denominator * n_numerator * x_denominator\n  return result %\
    \ (x_denominator * n_denominator) == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  return numerator % denominator == 0\nend", "    local function\
    \ gcd(a, b)\n        while b ~= 0 do\n            local r = a % b\n          \
    \  a = b\n            b = r\n        end\n        return a\n    end\n    local\
    \ function lcm(a, b)\n        return a * b / gcd(a, b)\n    end\n    local function\
    \ simplify(x)\n        local numerator, denominator = x:match('(%d+)/(%d+)')\n\
    \        numerator, denominator = tonumber(numerator), tonumber(denominator)\n\
    \        local g = gcd(numerator, denominator)\n        return numerator / g,\
    \ denominator / g\n    end\n    local xn, xd = simplify(x)\n    local nn, nd =\
    \ simplify(n)\n    local l = lcm(xd, nd)\n    return (xn * l / xd) % (nn * l /\
    \ nd) == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    local result = numerator / denominator\n    return\
    \ result % 1 == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local\
    \ n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local\
    \ den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd ==\
    \ den / gcd\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local\
    \ n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n   \
    \ local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num\
    \ / gcd == den / gcd\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n \
    \ local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num, den = x_num * n_den,\
    \ x_den * n_num\n  return num % den == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local numerator = x_numerator * n_denominator\n    local denominator = x_denominator\
    \ * n_numerator\n    return numerator % denominator == 0\nend", "    local function\
    \ gcd(a, b)\n        if b == 0 then\n            return a\n        else\n    \
    \        return gcd(b, a % b)\n        end\n    end", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local numerator = x_numerator * n_numerator\n  local denominator\
    \ = x_denominator * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n\
    \  return numerator / gcd == denominator / gcd\nend", "    local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    return numerator % denominator\
    \ == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den\
    \ = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return gcd == den\nend", "  local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_numerator\n  local\
    \ denominator = x_denominator * n_denominator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  numerator = numerator / gcd\n  denominator = denominator / gcd\n\
    \  return numerator % denominator == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n    local\
    \ denominator = tonumber(x_denominator) * tonumber(n_numerator)\n    return numerator\
    \ % denominator == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "  \
    \  local function gcd(a, b)\n        if b == 0 then\n            return a\n  \
    \      else\n            return gcd(b, a % b)\n        end\n    end", "  local\
    \ x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n\
    \    local n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n\
    \    local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \    return result % 1 == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local div = math.gcd(num, den)\n  return num /\
    \ div == den / div\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  return numerator / gcd == denominator\
    \ / gcd\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local x_numerator\
    \ = tonumber(x_numerator)\n    local x_denominator = tonumber(x_denominator)\n\
    \    local n_numerator = tonumber(n_numerator)\n    local n_denominator = tonumber(n_denominator)\n\
    \    local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \    if result % (x_denominator * n_denominator) == 0 then\n        return true\n\
    \    else\n        return false\n    end\nend", "  local function gcd(a, b)\n\
    \    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n\
    \    local numerator, denominator = x:match('(%d+)/(%d+)')\n    numerator, denominator\
    \ = tonumber(numerator), tonumber(denominator)\n    local g = gcd(numerator, denominator)\n\
    \    return numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator\
    \ = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  return (x_numerator * l / x_denominator)\
    \ % (n_numerator * l / n_denominator) == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\n\
    end", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den\
    \ = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den\
    \ * n_den\n    local gcd = math.gcd(num, den)\n    num = num / gcd\n    den =\
    \ den / gcd\n    return num % den == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local result = (x_numerator * n_denominator) / (x_denominator * n_numerator)\n\
    \  return result % 1 == 0\nend", "    local function gcd(a, b)\n        if b ==\
    \ 0 then\n            return a\n        else\n            return gcd(b, a % b)\n\
    \        end\n    end", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ result = x_numerator * n_denominator * n_numerator * x_denominator\n    return\
    \ result % 1 == 0\nend", "  local xn, xd = x:match('(%d+)/(%d+)')\n  local nn,\
    \ nd = n:match('(%d+)/(%d+)')\n  xn, xd, nn, nd = tonumber(xn), tonumber(xd),\
    \ tonumber(nn), tonumber(nd)\n  local xn2, xd2 = xn * nd, xd * nn\n  return xn2\
    \ % xd2 == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  return numerator / gcd == denominator\
    \ / gcd\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = x_numerator * n_denominator\n    local denominator = x_denominator * n_numerator\n\
    \    local gcd = math.gcd(numerator, denominator)\n    return numerator / gcd\
    \ == denominator / gcd\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "  local\
    \ function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n\
    \  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local\
    \ function simplify_fraction(x)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n\
    \    numerator, denominator = tonumber(numerator), tonumber(denominator)\n   \
    \ local g = gcd(numerator, denominator)\n    return numerator / g, denominator\
    \ / g\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n  local\
    \ n_numerator, n_denominator = simplify_fraction(n)\n  local l = lcm(x_denominator,\
    \ n_denominator)\n  local x_numerator_l = x_numerator * l / x_denominator\n  local\
    \ n_numerator_l = n_numerator * l / n_denominator\n  return x_numerator_l % n_numerator_l\
    \ == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den\
    \ = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend",
  "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return den / gcd == num / gcd\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return\
    \ num / gcd == den / gcd\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n  return numerator % denominator == 0\nend", "    local\
    \ function gcd(a, b)\n        if b == 0 then\n            return a\n        else\n\
    \            return gcd(b, a % b)\n        end\n    end", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local x_numerator, x_denominator = tonumber(x_numerator),\
    \ tonumber(x_denominator)\n    local n_numerator, n_denominator = tonumber(n_numerator),\
    \ tonumber(n_denominator)\n    local result = x_numerator * n_denominator * n_numerator\
    \ * x_denominator\n    local result_numerator = x_numerator * n_numerator\n  \
    \  local result_denominator = x_denominator * n_denominator\n    local result_fraction\
    \ = result_numerator .. '/' .. result_denominator\n    local result_fraction_numerator,\
    \ result_fraction_denominator = result_fraction:match('(%d+)/(%d+)')\n    local\
    \ result_fraction_numerator, result_fraction_denominator = tonumber(result_fraction_numerator),\
    \ tonumber(result_fraction_denominator)\n    if result_fraction_numerator % result_fraction_denominator\
    \ == 0 then\n        return true\n    else\n        return false\n    end\nend",
  "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local numerator = x_numerator *\
    \ n_denominator\n    local denominator = x_denominator * n_numerator\n    return\
    \ numerator % denominator == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n  return numerator % denominator == 0\nend", "  local\
    \ x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = tonumber(x_num) * tonumber(n_den)\n  local den = tonumber(x_den)\
    \ * tonumber(n_num)\n  return num % den == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local result = (x_numerator * n_denominator) * (n_numerator * x_denominator)\n\
    \  return result % (x_denominator * n_denominator) == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_numerator\n  local\
    \ denominator = x_denominator * n_denominator\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  return numerator % denominator == 0\nend",
  "    local function gcd(a, b)\n        if b == 0 then\n            return a\n  \
    \      else\n            return gcd(b, a % b)\n        end\n    end", "  local\
    \ x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  return numerator\
    \ / gcd == denominator / gcd\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result =\
    \ (x_numerator * n_denominator) / (x_denominator * n_numerator)\n  return result\
    \ % 1 == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num,\
    \ n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den\
    \ * n_den\n  local gcd = math.gcd(num, den)\n  num = num / gcd\n  den = den /\
    \ gcd\n  return num % den == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    num =\
    \ num / gcd\n    den = den / gcd\n    return num % den == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local x_numerator = tonumber(x_numerator)\n  local\
    \ x_denominator = tonumber(x_denominator)\n  local n_numerator = tonumber(n_numerator)\n\
    \  local n_denominator = tonumber(n_denominator)\n  local result = x_numerator\
    \ * n_denominator * n_numerator * x_denominator\n  if result % 1 == 0 then\n \
    \   return true\n  else\n    return false\n  end\nend", "  local function gcd(a,\
    \ b)\n    while b ~= 0 do\n      a, b = b, a % b\n    end\n    return a\n  end\n\
    \  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function\
    \ simplify_fraction(x)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n\
    \    numerator, denominator = tonumber(numerator), tonumber(denominator)\n   \
    \ local g = gcd(numerator, denominator)\n    return numerator / g, denominator\
    \ / g\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n  local\
    \ n_numerator, n_denominator = simplify_fraction(n)\n  local l = lcm(x_denominator,\
    \ n_denominator)\n  local result_numerator = x_numerator * (l / x_denominator)\
    \ * n_numerator\n  local result_denominator = l\n  local g = gcd(result_numerator,\
    \ result_denominator)\n  return result_numerator / g == result_denominator\nend",
  "    local function gcd(a, b)\n        if b == 0 then\n            return a\n  \
    \      else\n            return gcd(b, a % b)\n        end\n    end", "  local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_numerator\n  local\
    \ denominator = x_denominator * n_denominator\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n  local whole_number = numerator / denominator\n  if\
    \ whole_number % 1 == 0 then\n    return true\n  else\n    return false\n  end\n\
    end", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local\
    \ n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    numerator = numerator / gcd\n  \
    \  denominator = denominator / gcd\n    return numerator % denominator == 0\n\
    end", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_numerator\n\
    \  local denominator = x_denominator * n_denominator\n  return numerator % denominator\
    \ == 0\nend", "    local function gcd(a, b)\n        if b == 0 then\n        \
    \    return a\n        else\n            return gcd(b, a % b)\n        end\n \
    \   end", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n   \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    local result = numerator / denominator\n    if\
    \ result % 1 == 0 then\n        return true\n    else\n        return false\n\
    \    end\nend", "    local function gcd(a, b)\n        if b == 0 then\n      \
    \      return a\n        else\n            return gcd(b, a % b)\n        end\n\
    \    end", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local\
    \ n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result = (x_numerator\
    \ * n_denominator) / (x_denominator * n_numerator)\n  return result % 1 == 0\n\
    end", "    local function gcd(a, b)\n        if b == 0 then\n            return\
    \ a\n        else\n            return gcd(b, a % b)\n        end\n    end", " \
    \   local function gcd(a, b)\n        if b == 0 then\n            return a\n \
    \       else\n            return gcd(b, a % b)\n        end\n    end", "    local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local result = (x_numerator * n_denominator)\
    \ * (n_numerator * x_denominator)\n    return result % (x_denominator * n_denominator)\
    \ == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = x_numerator * n_denominator\n    local denominator = x_denominator * n_numerator\n\
    \    local gcd = math.gcd(numerator, denominator)\n    numerator = numerator /\
    \ gcd\n    denominator = denominator / gcd\n    return numerator % denominator\
    \ == 0\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ product_numerator = x_numerator * n_numerator\n    local product_denominator\
    \ = x_denominator * n_denominator\n    local product = product_numerator / product_denominator\n\
    \    return product % 1 == 0\nend", "  local function gcd(a, b)\n    if b == 0\
    \ then return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a,\
    \ b)\n    return a * b / gcd(a, b)\n  end\n  local function to_fraction(x)\n \
    \   local numerator, denominator = x:match('(%d+)/(%d+)')\n    return tonumber(numerator),\
    \ tonumber(denominator)\n  end\n  local x_numerator, x_denominator = to_fraction(x)\n\
    \  local n_numerator, n_denominator = to_fraction(n)\n  local lcm_denominator\
    \ = lcm(x_denominator, n_denominator)\n  local x_factor = lcm_denominator / x_denominator\n\
    \  local n_factor = lcm_denominator / n_denominator\n  local result_numerator\
    \ = x_numerator * x_factor * n_numerator * n_factor\n  local result_denominator\
    \ = lcm_denominator\n  local result_gcd = gcd(result_numerator, result_denominator)\n\
    \  return result_numerator / result_gcd == result_denominator\nend", "    local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local numerator = tonumber(x_numerator)\
    \ * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator) *\
    \ tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local result_numerator = x_numerator\
    \ * n_numerator\n    local result_denominator = x_denominator * n_denominator\n\
    \    local result = result_numerator / result_denominator\n    return result %\
    \ 1 == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local result\
    \ = x_numerator * n_denominator * n_numerator * x_denominator\n  return result\
    \ % 1 == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0\nend", "  local function\
    \ gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n\
    \  local function lcm(a, b)\n    return (a * b) / gcd(a, b)\n  end\n  local function\
    \ simplify_fraction(x)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n\
    \    local g = gcd(numerator, denominator)\n    return numerator / g, denominator\
    \ / g\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n  local\
    \ n_numerator, n_denominator = simplify_fraction(n)\n  local l = lcm(x_denominator,\
    \ n_denominator)\n  local x_numerator_l = x_numerator * (l / x_denominator)\n\
    \  local n_numerator_l = n_numerator * (l / n_denominator)\n  return x_numerator_l\
    \ % n_numerator_l == 0\nend", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local numerator = x_numerator * n_denominator\n  local denominator = x_denominator\
    \ * n_numerator\n  return numerator % denominator == 0\nend", "  local function\
    \ gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n\
    \  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function\
    \ simplify_fraction(x)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n\
    \    numerator, denominator = tonumber(numerator), tonumber(denominator)\n   \
    \ local divisor = gcd(numerator, denominator)\n    return numerator / divisor,\
    \ denominator / divisor\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n\
    \  local n_numerator, n_denominator = simplify_fraction(n)\n  local lcm_denominator\
    \ = lcm(x_denominator, n_denominator)\n  local result_numerator = x_numerator\
    \ * (lcm_denominator / x_denominator) * n_numerator\n  return result_numerator\
    \ % lcm_denominator == 0\nend", "  local function gcd(a, b)\n    if b == 0 then\
    \ return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n\
    \    return a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n\
    \    local numerator, denominator = x:match('(%d+)/(%d+)')\n    numerator, denominator\
    \ = tonumber(numerator), tonumber(denominator)\n    local g = gcd(numerator, denominator)\n\
    \    return numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator\
    \ = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  local x_numerator_l = x_numerator\
    \ * l / x_denominator\n  local n_numerator_l = n_numerator * l / n_denominator\n\
    \  local result = x_numerator_l * n_numerator_l\n  return result % 1 == 0\nend",
  "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local result_numerator = x_numerator\
    \ * n_numerator\n    local result_denominator = x_denominator * n_denominator\n\
    \    return result_numerator % result_denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local result = (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator)\n  return result == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local x_numerator = tonumber(x_numerator)\n    local x_denominator = tonumber(x_denominator)\n\
    \    local n_numerator = tonumber(n_numerator)\n    local n_denominator = tonumber(n_denominator)\n\
    \    local result = x_numerator * n_denominator\n    local result_denominator\
    \ = x_denominator * n_numerator\n    if result % result_denominator == 0 then\n\
    \        return true\n    else\n        return false\n    end\nend", "    local\
    \ x_num, x_den = x:match('(%d+)/(%d+)')\n    local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd =\
    \ math.gcd(num, den)\n    return num / gcd == den / gcd\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local result = (x_numerator * n_denominator) / (x_denominator\
    \ * n_numerator)\n  return result % 1 == 0\nend", "    local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num\
    \ = x_num * n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num,\
    \ den)\n    return num / gcd == den / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local x_numerator = tonumber(x_numerator)\n  local x_denominator = tonumber(x_denominator)\n\
    \  local n_numerator = tonumber(n_numerator)\n  local n_denominator = tonumber(n_denominator)\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  numerator\
    \ = numerator / gcd\n  denominator = denominator / gcd\n  return numerator % denominator\
    \ == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "  \
    \  local xn = x * n\n    return xn % 1 == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local numerator = x_numerator * n_denominator\n    local denominator = x_denominator\
    \ * n_numerator\n    return numerator % denominator == 0\nend", "    local function\
    \ gcd(a, b)\n        if b == 0 then\n            return a\n        else\n    \
    \        return gcd(b, a % b)\n        end\n    end", "    local x_num, x_den\
    \ = x:match('(%d+)/(%d+)')\n    local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd =\
    \ math.gcd(num, den)\n    return num / gcd == den / gcd\nend", "    local function\
    \ gcd(a, b)\n        while b ~= 0 do\n            a, b = b, a % b\n        end\n\
    \        return a\n    end\n    local function lcm(a, b)\n        return a * b\
    \ / gcd(a, b)\n    end\n    local function simplify_fraction(x)\n        local\
    \ numerator, denominator = x:match('(%d+)/(%d+)')\n        numerator, denominator\
    \ = tonumber(numerator), tonumber(denominator)\n        local g = gcd(numerator,\
    \ denominator)\n        return numerator / g, denominator / g\n    end\n    local\
    \ x_numerator, x_denominator = simplify_fraction(x)\n    local n_numerator, n_denominator\
    \ = simplify_fraction(n)\n    local l = lcm(x_denominator, n_denominator)\n  \
    \  return (l / x_denominator) * x_numerator % l == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n  local\
    \ denominator = x_denominator * n_numerator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  numerator = numerator / gcd\n  denominator = denominator / gcd\n\
    \  return numerator % denominator == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local numerator = x_numerator * n_denominator\n    local denominator = x_denominator\
    \ * n_numerator\n    return numerator % denominator == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local x_numerator, x_denominator = tonumber(x_numerator),\
    \ tonumber(x_denominator)\n    local n_numerator, n_denominator = tonumber(n_numerator),\
    \ tonumber(n_denominator)\n    local result = x_numerator * n_denominator * n_numerator\
    \ * x_denominator\n    return result % 1 == 0\nend", "    local x_num, x_denom\
    \ = x:match('(%d+)/(%d+)')\n    local n_num, n_denom = n:match('(%d+)/(%d+)')\n\
    \    local num = x_num * n_num\n    local denom = x_denom * n_denom\n    return\
    \ num % denom == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  return numerator % denominator == 0\nend",
  "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  return\
    \ num % den == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n   \
    \ local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return\
    \ num / gcd == den / gcd\nend", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \  return result % x_denominator == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local numerator = x_numerator * n_denominator\n  local denominator\
    \ = x_denominator * n_numerator\n  return numerator % denominator == 0\nend",
  "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  return\
    \ num % den == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return\
    \ a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function is_whole(x)\n    return x % 1 ==\
    \ 0\n  end\n  local function fraction_to_number(x)\n    local numerator, denominator\
    \ = x:match('(%d+)/(%d+)')\n    return tonumber(numerator) / tonumber(denominator)\n\
    \  end\n  local function simplify_fraction(x)\n    local numerator, denominator\
    \ = x:match('(%d+)/(%d+)')\n    local common_divisor = gcd(numerator, denominator)\n\
    \    return numerator / common_divisor .. '/' .. denominator / common_divisor\n\
    \  end\n  local function multiply_fractions(x, n)\n    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    return x_numerator * n_numerator .. '/' .. x_denominator * n_denominator\n\
    \  end\n  local function is_integer(x)\n    return x % 1 == 0\n  end\n  local\
    \ function is_whole_number(x)\n    return is_integer(fraction_to_number(x))\n\
    \  end\n  local function is_simplifiable(x, n)\n    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    return x_numerator * n_denominator % x_denominator == 0\n  end\n  if is_simplifiable(x,\
    \ n) then\n    local simplified_fraction = simplify_fraction(multiply_fractions(x,\
    \ n))", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den =\
    \ n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den * n_den\n\
    \  local gcd = math.gcd(num, den)\n  num = num / gcd\n  den = den / gcd\n  return\
    \ num % den == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local\
    \ n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local\
    \ den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num / gcd\n \
    \ den = den / gcd\n  return num % den == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local result = (x_numerator * n_denominator) * (n_numerator * x_denominator)\n\
    \  return result % (x_denominator * n_denominator) == 0\nend", "  local x_num,\
    \ x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  return numerator\
    \ / gcd == denominator / gcd\nend", "  local function gcd(a, b)\n    if b == 0\
    \ then return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a,\
    \ b)\n    return a * b / gcd(a, b)\n  end\n  local function to_number(x)\n   \
    \ local a, b = x:match('(%d+)/(%d+)')\n    return tonumber(a) / tonumber(b)\n\
    \  end\n  local function is_integer(x)\n    return x % 1 == 0\n  end\n  local\
    \ x, n = to_number(x), to_number(n)\n  local l = lcm(x, n)\n  return is_integer(l)\n\
    end", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  numerator\
    \ = numerator / gcd\n  denominator = denominator / gcd\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  return numerator % denominator == 0\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "  local function gcd(a, b)\n    if b\
    \ == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a,\
    \ b)\n    return a * b / gcd(a, b)\n  end\n  local function simplify_fraction(f)\n\
    \    local n, d = f:match('(%d+)/(%d+)')\n    n, d = tonumber(n), tonumber(d)\n\
    \    local g = gcd(n, d)\n    return n / g, d / g\n  end\n  local xn, xd = simplify_fraction(x)\n\
    \  local nn, nd = simplify_fraction(n)\n  local l = lcm(xd, nd)\n  return (xn\
    \ * l / xd) % (nn * l / nd) == 0\nend", "  local function gcd(a, b)\n    if b\
    \ == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a,\
    \ b)\n    return a * b / gcd(a, b)\n  end\n  local function is_whole(x)\n    return\
    \ x % 1 == 0\n  end\n  local function to_number(x)\n    return tonumber(x:match('(%d+)/(%d+)'))\n\
    \  end\n  local x_num, x_den = to_number(x)\n  local n_num, n_den = to_number(n)\n\
    \  local den = lcm(x_den, n_den)\n  local num = x_num * (den / x_den) * n_num\n\
    \  return is_whole(num / den)\nend", "    local function gcd(a, b)\n        if\
    \ b == 0 then\n            return a\n        else\n            return gcd(b, a\
    \ % b)\n        end\n    end", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  return numerator % denominator == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n  local\
    \ denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return numerator\
    \ % denominator == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = x_numerator * n_denominator\n    local denominator = x_denominator * n_numerator\n\
    \    return numerator % denominator == 0\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = tonumber(x_num)\
    \ * tonumber(n_den)\n  local den = tonumber(x_den) * tonumber(n_num)\n  return\
    \ num % den == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n  local n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n  local result\
    \ = x_numerator * n_denominator * n_numerator * x_denominator\n  return result\
    \ % 1 == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n\
    \    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b\
    \ / gcd(a, b)\n  end\n  local function simplify(x)\n    local numerator, denominator\
    \ = x:match('(%d+)/(%d+)')\n    numerator, denominator = tonumber(numerator),\
    \ tonumber(denominator)\n    local g = gcd(numerator, denominator)\n    return\
    \ numerator / g, denominator / g\n  end\n  local xn, xd = simplify(x)\n  local\
    \ nn, nd = simplify(n)\n  local l = lcm(xd, nd)\n  return (xn * l / xd) * (nn\
    \ * l / nd) % 1 == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "  \
    \  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local result_numerator = x_numerator\
    \ * n_numerator\n    local result_denominator = x_denominator * n_denominator\n\
    \    local result = result_numerator / result_denominator\n    return result %\
    \ 1 == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = x_numerator * n_denominator\n    local denominator = x_denominator * n_numerator\n\
    \    return numerator % denominator == 0\nend", "  local function gcd(a, b)\n\
    \    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n\
    \    local numerator, denominator = x:match('(%d+)/(%d+)')\n    local g = gcd(numerator,\
    \ denominator)\n    return numerator / g, denominator / g\n  end\n  local x_numerator,\
    \ x_denominator = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  local result_numerator = x_numerator\
    \ * (l / x_denominator) * n_numerator\n  return result_numerator % l == 0\nend",
  "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  num = num / gcd\n  den = den / gcd\n  return num % den == 0\nend", " \
    \   local x_num, x_den = x:match('(%d+)/(%d+)')\n    local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd =\
    \ math.gcd(num, den)\n    return num / gcd == den / gcd\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local product_numerator = x_numerator * n_numerator\n\
    \  local product_denominator = x_denominator * n_denominator\n  local gcd = math.gcd(product_numerator,\
    \ product_denominator)\n  return product_numerator / gcd == product_denominator\
    \ / gcd\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num,\
    \ n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den\
    \ * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\n\
    end", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_numerator\n\
    \  local denominator = x_denominator * n_denominator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  return numerator / gcd == denominator / gcd\nend", "  local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n  local result = (x_numerator * n_denominator) * (n_numerator\
    \ * x_denominator)\n  return result % (x_denominator * n_denominator) == 0\nend",
  "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n  local\
    \ denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return numerator\
    \ % denominator == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    if numerator % denominator == 0 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  local function gcd(a,\
    \ b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local\
    \ function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function is_whole(x)\n\
    \    return x % 1 == 0\n  end\n  local function to_number(x)\n    return tonumber(x:match('(%d+)/(%d+)'))\n\
    \  end\n  local x_num, x_den = to_number(x)\n  local n_num, n_den = to_number(n)\n\
    \  local lcm_den = lcm(x_den, n_den)\n  local result = (x_num * (lcm_den / x_den))\
    \ * (n_num * (lcm_den / n_den))\n  return is_whole(result)\nend", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    local gcd = math.gcd(numerator,\
    \ denominator)\n    numerator = numerator / gcd\n    denominator = denominator\
    \ / gcd\n    return numerator % denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local result = (x_numerator * n_denominator) * (n_numerator\
    \ * x_denominator)\n  return result % 1 == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n  local\
    \ denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return numerator\
    \ % denominator == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n \
    \ local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n \
    \ local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num / gcd\n\
    \  den = den / gcd\n  return num % den == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \  return result % x_denominator == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local numerator = x_numerator * n_denominator\n    local denominator = x_denominator\
    \ * n_numerator\n    local gcd = math.gcd(numerator, denominator)\n    return\
    \ numerator / gcd == denominator / gcd\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n    local\
    \ denominator = tonumber(x_denominator) * tonumber(n_numerator)\n    return numerator\
    \ % denominator == 0\nend", "    local xn = x * n\n    return xn % 1 == 0\nend",
  "  local function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b,\
    \ a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n\
    \  local function is_whole(x)\n    return x % 1 == 0\n  end\n  local function\
    \ to_num(x)\n    return tonumber(x)\n  end\n  local function to_str(x)\n    return\
    \ tostring(x)\n  end\n  local function split(s, d)\n    local t = {}\n    local\
    \ i = 0\n    local f\n    f = function(s)\n      i = i + 1\n      t[i] = s\n \
    \     return \"\"\n    end\n    s = s:gsub(\"(.-)\" .. d, f)\n    t[i] = s\n \
    \   return t\n  end\n  local function to_fraction(x)\n    local t = split(x, '/')\n\
    \    return to_num(t[1]), to_num(t[2])\n  end\n  local function from_fraction(x,\
    \ y)\n    return to_str(x) .. '/' .. to_str(y)\n  end\n  local function multiply(x,\
    \ y)\n    local x_n, x_d = to_fraction(x)\n    local y_n, y_d = to_fraction(y)\n\
    \    local n = x_n * y_n\n    local d = x_d * y_d\n    local g = gcd(n, d)\n \
    \   return from_fraction(n / g, d / g)\n  end\n  local function simplify(x, n)\n\
    \    local x_n, x_d = to_fraction(x)\n    local n_n, n_d = to_fraction(n)\n  \
    \  local l = lcm(x_d, n_d)\n    local x_n = x_n * (l / x_d)\n    local n_n = n_n\
    \ * (l / n_d)\n    return is_whole(x_n * n_n)\n ", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    num =\
    \ num / gcd\n    den = den / gcd\n    return num % den == 0\nend", "    local\
    \ function gcd(a, b)\n        while b ~= 0 do\n            a, b = b, a % b\n \
    \       end\n        return a\n    end\n    local function simplify_fraction(x)\n\
    \        local numerator, denominator = x:match('(%d+)/(%d+)')\n        local\
    \ g = gcd(numerator, denominator)\n        return numerator / g, denominator /\
    \ g\n    end\n    local x_numerator, x_denominator = simplify_fraction(x)\n  \
    \  local n_numerator, n_denominator = simplify_fraction(n)\n    local numerator\
    \ = x_numerator * n_numerator\n    local denominator = x_denominator * n_denominator\n\
    \    local g = gcd(numerator, denominator)\n    return numerator / g == denominator\
    \ / g\nend", "  -- your code here\nend", "  local function gcd(a, b)\n    if b\
    \ == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a,\
    \ b)\n    return a * b / gcd(a, b)\n  end\n  local function is_whole(x)\n    return\
    \ x % 1 == 0\n  end\n  local function to_number(x)\n    return tonumber(x:match('(%d+)/(%d+)'))\n\
    \  end\n  local function to_fraction(x)\n    return x:match('(%d+)/(%d+)')\n \
    \ end\n  local function to_string(x)\n    return tostring(x)\n  end\n  local function\
    \ multiply(x, n)\n    local x_num, x_den = to_fraction(x)\n    local n_num, n_den\
    \ = to_fraction(n)\n    return to_string(x_num * n_num) .. '/' .. to_string(x_den\
    \ * n_den)\n  end\n  local function simplify_fraction(x)\n    local x_num, x_den\
    \ = to_fraction(x)\n    local gcd_num_den = gcd(x_num, x_den)\n    return to_string(x_num\
    \ / gcd_num_den) .. '/' .. to_string(x_den / gcd_num_den)\n  end\n  local function\
    \ is_simplified(x)\n    local x_num, x_den = to_fraction(x)\n    return x_num\
    \ == x_den\n  end\n  local function is_simplifiable(x)\n    local x_num, x_den\
    \ = to_fraction(x)\n    return x_num % x_den == 0\n  end\n  local function is_simplifiable_by(x,\
    \ n)\n    local x_num, x_den = to_fraction(x)\n    local n_num, n_den = to_fraction(n)\n\
    \    return x_num % n_num == 0 and x_den % n_den == 0\n  end\n  local function\
    \ is", "  local function gcd(a, b)\n    if b == 0 then return a end\n    return\
    \ gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a,\
    \ b)\n  end\n  local function simplify_fraction(x)\n    local numerator, denominator\
    \ = x:match('(%d+)/(%d+)')\n    local g = gcd(numerator, denominator)\n    return\
    \ numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator =\
    \ simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  local result_numerator = x_numerator\
    \ * l / x_denominator * n_numerator\n  local result_denominator = n_denominator\
    \ * l / n_denominator\n  return result_numerator % result_denominator == 0\nend",
  "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local numerator = x_numerator *\
    \ n_denominator\n    local denominator = x_denominator * n_numerator\n    return\
    \ numerator % denominator == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return\
    \ den / gcd == num / gcd\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    local gcd = math.gcd(numerator,\
    \ denominator)\n    return numerator / gcd == denominator / gcd\nend", "  local\
    \ x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \  return result % x_denominator == 0\nend", "    local function gcd(a, b)\n \
    \       if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "  local x_numerator, x_denominator =\
    \ x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local x_numerator = tonumber(x_numerator)\n  local x_denominator = tonumber(x_denominator)\n\
    \  local n_numerator = tonumber(n_numerator)\n  local n_denominator = tonumber(n_denominator)\n\
    \  local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \  return result % x_denominator == 0\nend", "  -- your code here\nend", "  local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n  local result = (x_numerator * n_denominator) * (n_numerator\
    \ * x_denominator)\n  return result % (x_denominator * n_denominator) == 0\nend",
  "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_numerator\n\
    \  local denominator = x_denominator * n_denominator\n  return numerator % denominator\
    \ == 0\nend", "    local function gcd(a, b)\n        if b == 0 then\n        \
    \    return a\n        else\n            return gcd(b, a % b)\n        end\n \
    \   end", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den\
    \ = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend",
  "  local function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b,\
    \ a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n\
    \  local function simplify_fraction(x)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n\
    \    numerator, denominator = tonumber(numerator), tonumber(denominator)\n   \
    \ local g = gcd(numerator, denominator)\n    return numerator / g, denominator\
    \ / g\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n  local\
    \ n_numerator, n_denominator = simplify_fraction(n)\n  local l = lcm(x_denominator,\
    \ n_denominator)\n  local x_numerator_l = x_numerator * l / x_denominator\n  local\
    \ n_numerator_l = n_numerator * l / n_denominator\n  return x_numerator_l % n_numerator_l\
    \ == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = x_numerator * n_denominator\n    local denominator = x_denominator * n_numerator\n\
    \    return numerator % denominator == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  numerator\
    \ = numerator / gcd\n  denominator = denominator / gcd\n  return numerator % denominator\
    \ == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n    local n_num,\
    \ n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num / gcd ==\
    \ den / gcd\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result =\
    \ (x_numerator * n_denominator) * (n_numerator * x_denominator)\n  return result\
    \ % (x_denominator * n_denominator) == 0\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "    local function gcd(a, b)\n      \
    \  while b ~= 0 do\n            a, b = b, a % b\n        end\n        return a\n\
    \    end\n    local function lcm(a, b)\n        return a * b / gcd(a, b)\n   \
    \ end\n    local function simplify_fraction(x)\n        local numerator, denominator\
    \ = x:match('(%d+)/(%d+)')\n        local g = gcd(numerator, denominator)\n  \
    \      return numerator / g, denominator / g\n    end\n    local function multiply_fractions(x,\
    \ n)\n        local x_numerator, x_denominator = simplify_fraction(x)\n      \
    \  local n_numerator, n_denominator = simplify_fraction(n)\n        local numerator\
    \ = x_numerator * n_numerator\n        local denominator = x_denominator * n_denominator\n\
    \        return numerator, denominator\n    end\n    local function is_whole_number(x)\n\
    \        local numerator, denominator = simplify_fraction(x)\n        return numerator\
    \ % denominator == 0\n    end\n    local numerator, denominator = multiply_fractions(x,\
    \ n)\n    return is_whole_number(numerator .. '/' .. denominator)\nend", "  local\
    \ function gcd(a, b)\n    while b ~= 0 do\n      a, b = b, a % b\n    end\n  \
    \  return a\n  end\n  local function simplify_fraction(x)\n    local numerator,\
    \ denominator = x:match('(%d+)/(%d+)')\n    local g = gcd(numerator, denominator)\n\
    \    return numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator\
    \ = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local g = gcd(numerator, denominator)\n  return numerator\
    \ / g, denominator / g\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result =\
    \ x_numerator * n_denominator * n_numerator * x_denominator\n  return result %\
    \ (x_denominator * n_denominator) == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local numerator = x_numerator * n_denominator\n  local denominator\
    \ = x_denominator * n_numerator\n  return numerator % denominator == 0\nend",
  "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local numerator = tonumber(x_numerator)\
    \ * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n\
    \  local result = numerator / denominator\n  if result % 1 == 0 then\n    return\
    \ true\n  else\n    return false\n  end\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n  local\
    \ denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return numerator\
    \ % denominator == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  return numerator % denominator == 0\nend", "    local function gcd(a, b)\n\
    \        while b ~= 0 do\n            a, b = b, a % b\n        end\n        return\
    \ a\n    end\n    local function lcm(a, b)\n        return a * b / gcd(a, b)\n\
    \    end\n    local function to_num(x)\n        local num, den = x:match('(%d+)/(%d+)')\n\
    \        return tonumber(num), tonumber(den)\n    end\n    local x_num, x_den\
    \ = to_num(x)\n    local n_num, n_den = to_num(n)\n    local l = lcm(x_den, n_den)\n\
    \    local x_num_l = x_num * (l / x_den)\n    local n_num_l = n_num * (l / n_den)\n\
    \    return x_num_l % n_num_l == 0\nend", "    local function gcd(a, b)\n    \
    \    if b == 0 then\n            return a\n        else\n            return gcd(b,\
    \ a % b)\n        end\n    end", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local result_numerator\
    \ = x_numerator * n_numerator\n    local result_denominator = x_denominator *\
    \ n_denominator\n    return result_numerator % result_denominator == 0\nend",
  "  local function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b,\
    \ a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n\
    \  local function to_num(str)\n    local num, den = str:match('(%d+)/(%d+)')\n\
    \    return tonumber(num), tonumber(den)\n  end\n  local x_num, x_den = to_num(x)\n\
    \  local n_num, n_den = to_num(n)\n  local l = lcm(x_den, n_den)\n  return l %\
    \ (x_num * n_num) == 0\nend", "  local function gcd(a, b)\n    if b == 0 then\
    \ return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n\
    \    return a * b / gcd(a, b)\n  end\n  local function is_whole(x)\n    return\
    \ x % 1 == 0\n  end\n  local function to_num(x)\n    return tonumber(x)\n  end\n\
    \  local function split(x)\n    local num, den = x:match('(%d+)/(%d+)')\n    return\
    \ to_num(num), to_num(den)\n  end\n  local x_num, x_den = split(x)\n  local n_num,\
    \ n_den = split(n)\n  local lcm_den = lcm(x_den, n_den)\n  local x_num_lcm = x_num\
    \ * (lcm_den / x_den)\n  local n_num_lcm = n_num * (lcm_den / n_den)\n  return\
    \ is_whole(x_num_lcm * n_num_lcm)\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local x_numerator = tonumber(x_numerator)\n    local x_denominator = tonumber(x_denominator)\n\
    \    local n_numerator = tonumber(n_numerator)\n    local n_denominator = tonumber(n_denominator)\n\
    \    local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \    local result_numerator = x_numerator * n_numerator\n    local result_denominator\
    \ = x_denominator * n_denominator\n    local result_whole_number = result_numerator\
    \ / result_denominator\n    if result_whole_number == math.floor(result_whole_number)\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \ local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local result = x_numerator * n_denominator\
    \ * n_numerator * x_denominator\n  return result % x_denominator == 0\nend", " \
    \   local function gcd(a, b)\n        if b == 0 then\n            return a\n \
    \       else\n            return gcd(b, a % b)\n        end\n    end", "    local\
    \ x_num, x_den = x:match('(%d+)/(%d+)')\n    local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd =\
    \ math.gcd(num, den)\n    return num / gcd == den / gcd\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
