language: lua
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_list = {}\n  for number in numbers:gmatch('%S+')\
    \ do\n    table.insert(numbers_list, number)\n  end\n  table.sort(numbers_list)\n\
    \  return table.concat(numbers_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rbh1def.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp4rbh1def.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    num_list[#num_list + 1] = num\n  end\n  table.sort(num_list)\n  return\
    \ table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksx7x0fs.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpksx7x0fs.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums, function(a,\
    \ b)\n        return number_to_numeral[a] < number_to_numeral[b]\n    end)\n \
    \   return table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3v4ntket.lua:12:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp3v4ntket.lua:12: in function </tmp/tmp3v4ntket.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp3v4ntket.lua:11: in function 'candidate'\n\t/tmp/tmp3v4ntket.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  local num_str = ''\n  for\
    \ num in numbers:gmatch('%S+') do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n\
    \  for i, num in ipairs(nums) do\n    num_str = num_str .. num .. ' '\n  end\n\
    \  return num_str:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgd5l7m9o.lua:24:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpgd5l7m9o.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums, function(a,\
    \ b)\n        return numeral_to_number(a) < numeral_to_number(b)\n    end)\n \
    \   return table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppo0lbeq8.lua:12:\
    \ attempt to call global 'numeral_to_number' (a nil value)\nstack traceback:\n\
    \t/tmp/tmppo0lbeq8.lua:12: in function </tmp/tmppo0lbeq8.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmppo0lbeq8.lua:11: in function 'candidate'\n\t/tmp/tmppo0lbeq8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        local n = tonumber(num)\n        if n then\n            nums[#nums\
    \ + 1] = n\n        else\n            local n = number_to_numeral[num]\n     \
    \       if n then\n                nums[#nums + 1] = n\n            else\n   \
    \             error('Invalid number: ' .. num)\n            end\n        end\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for i, n in ipairs(nums)\
    \ do\n        result[i] = numeral_to_number[n]\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxl9raf1f.lua:13:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpxl9raf1f.lua:13: in function 'candidate'\n\t/tmp/tmpxl9raf1f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    table.insert(num_list, num)\n  end\n  table.sort(num_list)\n  return\
    \ table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5f5gsbbc.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5f5gsbbc.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums, function(a,\
    \ b)\n        return number_to_numeral[a] < number_to_numeral[b]\n    end)\n \
    \   return table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3v4ntket.lua:12:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp3v4ntket.lua:12: in function </tmp/tmp3v4ntket.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp3v4ntket.lua:11: in function 'candidate'\n\t/tmp/tmp3v4ntket.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums, function(a, b)\n\
    \    return number_to_numeral[a] < number_to_numeral[b]\n  end)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7dhed2i.lua:12:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp_7dhed2i.lua:12: in function </tmp/tmp_7dhed2i.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp_7dhed2i.lua:11: in function 'candidate'\n\t/tmp/tmp_7dhed2i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums, function(a, b)\n\
    \    return number_to_numeral[a] < number_to_numeral[b]\n  end)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7dhed2i.lua:12:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp_7dhed2i.lua:12: in function </tmp/tmp_7dhed2i.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp_7dhed2i.lua:11: in function 'candidate'\n\t/tmp/tmp_7dhed2i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for numeral,\
    \ value in pairs(numeral_map) do\n            if value == num then\n         \
    \       table.insert(result, numeral)\n            end\n        end\n    end\n\
    \    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch(\"\
    %S+\") do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n  \
    \  return table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27lv3sfu.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp27lv3sfu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_table = {}\n  for num in numbers:gmatch(\"\
    %S+\") do\n    num_table[#num_table + 1] = num\n  end\n  table.sort(num_table)\n\
    \  return table.concat(num_table, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaulzev2d.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpaulzev2d.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    zero = 0,\n   \
    \ one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six\
    \ = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local nums = {}\n\
    \  for num in numbers:gmatch('%w+') do\n    table.insert(nums, numeral_map[num])\n\
    \  end\n  table.sort(nums)\n  local result = {}\n  for _, num in ipairs(nums)\
    \ do\n    table.insert(result, num)\n  end\n  return table.concat(result, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qn436zf.lua:35:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp4qn436zf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dsopvxu.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0dsopvxu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    zero = 0,\n   \
    \ one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six\
    \ = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local numbers_list\
    \ = {}\n  for number in numbers:gmatch('%S+') do\n    table.insert(numbers_list,\
    \ numeral_map[number])\n  end\n  table.sort(numbers_list)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numbers_list) do\n    table.insert(sorted_numbers,\
    \ number)\n  end\n  return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1y94g9lq.lua:35:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp1y94g9lq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for i, num in ipairs(nums) do\n        for numeral,\
    \ value in pairs(numeral_map) do\n            if value == num then\n         \
    \       table.insert(result, numeral)\n            end\n        end\n    end\n\
    \    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%a+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums, function(a,\
    \ b)\n        return number_to_numeral[a] < number_to_numeral[b]\n    end)\n \
    \   return table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7bas2b4e.lua:12:\
    \ attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\
    \t/tmp/tmp7bas2b4e.lua:12: in function </tmp/tmp7bas2b4e.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmp7bas2b4e.lua:11: in local 'candidate'\n\t/tmp/tmp7bas2b4e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_to_int = {\n        ['zero'] =\
    \ 0,\n        ['one'] = 1,\n        ['two'] = 2,\n        ['three'] = 3,\n   \
    \     ['four'] = 4,\n        ['five'] = 5,\n        ['six'] = 6,\n        ['seven']\
    \ = 7,\n        ['eight'] = 8,\n        ['nine'] = 9,\n    }\n    local nums =\
    \ {}\n    for num in numbers:gmatch('%S+') do\n        table.insert(nums, num_to_int[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        table.insert(result, num_to_int[num])\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_pb2imd.lua:35:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpu_pb2imd.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums, function(a, b)\n\
    \    return numeral_to_int(a) < numeral_to_int(b)\n  end)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdolpoh8n.lua:12:\
    \ attempt to call a nil value (global 'numeral_to_int')\nstack traceback:\n\t\
    /tmp/tmpdolpoh8n.lua:12: in function </tmp/tmpdolpoh8n.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmpdolpoh8n.lua:11: in local 'candidate'\n\t/tmp/tmpdolpoh8n.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_table = {}\n    for number\
    \ in numbers:gmatch('%S+') do\n        table.insert(numbers_table, number)\n \
    \   end\n    table.sort(numbers_table)\n    return table.concat(numbers_table,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4vh3sc3.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpv4vh3sc3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums, function(a,\
    \ b)\n        return numeral_to_number(a) < numeral_to_number(b)\n    end)\n \
    \   return table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppo0lbeq8.lua:12:\
    \ attempt to call global 'numeral_to_number' (a nil value)\nstack traceback:\n\
    \t/tmp/tmppo0lbeq8.lua:12: in function </tmp/tmppo0lbeq8.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmppo0lbeq8.lua:11: in function 'candidate'\n\t/tmp/tmppo0lbeq8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch(\"\
    %S+\") do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjbkrbtw.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpdjbkrbtw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    zero = 0,\n   \
    \ one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six\
    \ = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local nums = {}\n\
    \  for num in numbers:gmatch('%S+') do\n    nums[#nums + 1] = numeral_map[num]\n\
    \  end\n  table.sort(nums)\n  local sorted_numbers = {}\n  for i, num in ipairs(nums)\
    \ do\n    for numeral, value in pairs(numeral_map) do\n      if value == num then\n\
    \        sorted_numbers[i] = numeral\n      end\n    end\n  end\n  return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch(\"\
    %S+\") do\n        nums[#nums+1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7836jyyi.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp7836jyyi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local number_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local numbers_list = {}\n    for number in numbers:gmatch('%w+')\
    \ do\n        table.insert(numbers_list, number_map[number])\n    end\n    table.sort(numbers_list)\n\
    \    local sorted_numbers = {}\n    for _, number in ipairs(numbers_list) do\n\
    \        for numeral, value in pairs(number_map) do\n            if value == number\
    \ then\n                table.insert(sorted_numbers, numeral)\n            end\n\
    \        end\n    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    zero = 0,\n   \
    \ one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six\
    \ = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local nums = {}\n\
    \  for num in numbers:gmatch('%w+') do\n    table.insert(nums, numeral_map[num])\n\
    \  end\n  table.sort(nums)\n  local numeral_map_inv = {}\n  for k, v in pairs(numeral_map)\
    \ do\n    numeral_map_inv[v] = k\n  end\n  local nums_str = {}\n  for _, num in\
    \ ipairs(nums) do\n    table.insert(nums_str, numeral_map_inv[num])\n  end\n \
    \ return table.concat(nums_str, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums, function(a, b)\n\
    \    return number_to_numeral[a] < number_to_numeral[b]\n  end)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7dhed2i.lua:12:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp_7dhed2i.lua:12: in function </tmp/tmp_7dhed2i.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp_7dhed2i.lua:11: in function 'candidate'\n\t/tmp/tmp_7dhed2i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dsopvxu.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0dsopvxu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        table.insert(result,\
    \ num)\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrzbwvro.lua:35:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpvrzbwvro.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local sorted = {}\n    for _, num in ipairs(nums) do\n        for k, v in\
    \ pairs(numeral_map) do\n            if v == num then\n                table.insert(sorted,\
    \ k)\n            end\n        end\n    end\n    return table.concat(sorted, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    zero = 0,\n   \
    \ one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six\
    \ = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local nums = {}\n\
    \  for num in numbers:gmatch('%w+') do\n    table.insert(nums, numeral_map[num])\n\
    \  end\n  table.sort(nums)\n  local result = {}\n  for _, num in ipairs(nums)\
    \ do\n    for numeral, value in pairs(numeral_map) do\n      if value == num then\n\
    \        table.insert(result, numeral)\n      end\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch(\"\
    %S+\") do\n        nums[#nums+1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7836jyyi.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp7836jyyi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizwwbwb6.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpizwwbwb6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_map = {\n        ['zero'] = 0,\n\
    \        ['one'] = 1,\n        ['two'] = 2,\n        ['three'] = 3,\n        ['four']\
    \ = 4,\n        ['five'] = 5,\n        ['six'] = 6,\n        ['seven'] = 7,\n\
    \        ['eight'] = 8,\n        ['nine'] = 9,\n    }\n    local nums = {}\n \
    \   for num in numbers:gmatch('%S+') do\n        table.insert(nums, num_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for k, v in pairs(num_map) do\n            if v == num then\n  \
    \              table.insert(result, k)\n                break\n            end\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(num_list, num)\n  end\n  table.sort(num_list)\n  return\
    \ table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgv_64zc2.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpgv_64zc2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(num_list, num)\n  end\n  table.sort(num_list)\n  return\
    \ table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgv_64zc2.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpgv_64zc2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_to_number = {\n    zero = 0,\n\
    \    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n  \
    \  six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local numbers_table\
    \ = {}\n  for number in numbers:gmatch('%w+') do\n    table.insert(numbers_table,\
    \ numeral_to_number[number])\n  end\n  table.sort(numbers_table)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numbers_table) do\n    for numeral, number_value\
    \ in pairs(numeral_to_number) do\n      if number == number_value then\n     \
    \   table.insert(sorted_numbers, numeral)\n      end\n    end\n  end\n  return\
    \ table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums, function(a, b)\n\
    \    return number_to_numeral[a] < number_to_numeral[b]\n  end)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7dhed2i.lua:12:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp_7dhed2i.lua:12: in function </tmp/tmp_7dhed2i.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp_7dhed2i.lua:11: in function 'candidate'\n\t/tmp/tmp_7dhed2i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_table = {}\n    for number\
    \ in numbers:gmatch('%w+') do\n        table.insert(numbers_table, number)\n \
    \   end\n    table.sort(numbers_table)\n    return table.concat(numbers_table,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhn92rve.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpfhn92rve.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num in numbers:gmatch('%S+')\
    \ do\n\t\tnums[#nums+1] = num\n\tend\n\ttable.sort(nums, function(a, b)\n\t\t\
    return tonumber(a) < tonumber(b)\n\tend)\n\treturn table.concat(nums, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1udhxen.lua:12:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpc1udhxen.lua:12:\
    \ in function </tmp/tmpc1udhxen.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpc1udhxen.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpc1udhxen.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_map = {\n        zero = 0,\n \
    \       one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n  \
    \      five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n \
    \       nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for k, v in\
    \ pairs(num_map) do\n            if v == num then\n                table.insert(result,\
    \ k)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for numeral,\
    \ value in pairs(numeral_map) do\n            if value == num then\n         \
    \       table.insert(result, numeral)\n            end\n        end\n    end\n\
    \    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums, function(a,\
    \ b)\n        return number_to_numeral[a] < number_to_numeral[b]\n    end)\n \
    \   return table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3v4ntket.lua:12:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp3v4ntket.lua:12: in function </tmp/tmp3v4ntket.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp3v4ntket.lua:11: in function 'candidate'\n\t/tmp/tmp3v4ntket.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizwwbwb6.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpizwwbwb6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_list = {}\n  for number in numbers:gmatch('%S+')\
    \ do\n    table.insert(numbers_list, number)\n  end\n  table.sort(numbers_list)\n\
    \  return table.concat(numbers_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rbh1def.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp4rbh1def.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizwwbwb6.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpizwwbwb6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_to_number = {\n    ['zero']\
    \ = 0,\n    ['one'] = 1,\n    ['two'] = 2,\n    ['three'] = 3,\n    ['four'] =\
    \ 4,\n    ['five'] = 5,\n    ['six'] = 6,\n    ['seven'] = 7,\n    ['eight'] =\
    \ 8,\n    ['nine'] = 9,\n  }\n  local numbers_table = {}\n  for number in numbers:gmatch('%w+')\
    \ do\n    table.insert(numbers_table, numeral_to_number[number])\n  end\n  table.sort(numbers_table)\n\
    \  local sorted_numbers = {}\n  for _, number in ipairs(numbers_table) do\n  \
    \  for numeral, numeral_number in pairs(numeral_to_number) do\n      if number\
    \ == numeral_number then\n        table.insert(sorted_numbers, numeral)\n    \
    \  end\n    end\n  end\n  return table.concat(sorted_numbers, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    local numeral = num2numeral[num]\n    if numeral then\n      nums[#nums\
    \ + 1] = numeral\n    end\n  end\n  table.sort(nums)\n  local sorted = {}\n  for\
    \ i = 1, #nums do\n    sorted[i] = numeral2num[nums[i]]\n  end\n  return table.concat(sorted,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyd5gcwko.lua:9:\
    \ attempt to index a nil value (global 'num2numeral')\nstack traceback:\n\t/tmp/tmpyd5gcwko.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpyd5gcwko.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = {}\n  for number in\
    \ numbers:gmatch('%S+') do\n    table.insert(numbers_table, number)\n  end\n \
    \ table.sort(numbers_table)\n  return table.concat(numbers_table, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bu9v38o.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5bu9v38o.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch(\"\
    %S+\") do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjbkrbtw.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpdjbkrbtw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums, function(a,\
    \ b)\n        return numbers_to_digits[a] < numbers_to_digits[b]\n    end)\n \
    \   return table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcy6838lp.lua:12:\
    \ attempt to index a nil value (global 'numbers_to_digits')\nstack traceback:\n\
    \t/tmp/tmpcy6838lp.lua:12: in function </tmp/tmpcy6838lp.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmpcy6838lp.lua:11: in local 'candidate'\n\t/tmp/tmpcy6838lp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch(\"\
    %S+\") do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n  \
    \  return table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27lv3sfu.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp27lv3sfu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local words = numbers:split(' ')\n  table.sort(words,\
    \ function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\n  return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0on37usl.lua:7:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp0on37usl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0on37usl.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_to_number = {\n        ['zero']\
    \ = 0,\n        ['one'] = 1,\n        ['two'] = 2,\n        ['three'] = 3,\n \
    \       ['four'] = 4,\n        ['five'] = 5,\n        ['six'] = 6,\n        ['seven']\
    \ = 7,\n        ['eight'] = 8,\n        ['nine'] = 9,\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine',\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%S+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n3vq80u.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5n3vq80u.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_map = {\n        zero = 0,\n \
    \       one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n  \
    \      five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n \
    \       nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for k, v in\
    \ pairs(num_map) do\n            if v == num then\n                table.insert(result,\
    \ k)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_table = {}\n    for number\
    \ in numbers:gmatch('%S+') do\n        table.insert(numbers_table, number)\n \
    \   end\n    table.sort(numbers_table)\n    return table.concat(numbers_table,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4vh3sc3.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpv4vh3sc3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums, function(a, b)\n\
    \    return number_to_numeral[a] < number_to_numeral[b]\n  end)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7dhed2i.lua:12:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp_7dhed2i.lua:12: in function </tmp/tmp_7dhed2i.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp_7dhed2i.lua:11: in function 'candidate'\n\t/tmp/tmp_7dhed2i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_to_number = {\n    zero = 0,\n\
    \    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n  \
    \  six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local numbers_table\
    \ = {}\n  for number in numbers:gmatch('%a+') do\n    table.insert(numbers_table,\
    \ numeral_to_number[number])\n  end\n  table.sort(numbers_table)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numbers_table) do\n    for numeral, numeral_number\
    \ in pairs(numeral_to_number) do\n      if number == numeral_number then\n   \
    \     table.insert(sorted_numbers, numeral)\n      end\n    end\n  end\n  return\
    \ table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted = {}\n    for num in numbers:gmatch('%a+')\
    \ do\n        table.insert(sorted, num)\n    end\n    table.sort(sorted, function(a,\
    \ b)\n        return number_to_numeral[a] < number_to_numeral[b]\n    end)\n \
    \   return table.concat(sorted, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0zv5a8jx.lua:12:\
    \ attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\
    \t/tmp/tmp0zv5a8jx.lua:12: in function </tmp/tmp0zv5a8jx.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmp0zv5a8jx.lua:11: in local 'candidate'\n\t/tmp/tmp0zv5a8jx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_table = {}\n    for number\
    \ in numbers:gmatch('%S+') do\n        table.insert(numbers_table, number)\n \
    \   end\n    table.sort(numbers_table)\n    return table.concat(numbers_table,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4vh3sc3.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpv4vh3sc3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_to_number = {\n        zero\
    \ = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n        four =\
    \ 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n        eight =\
    \ 8,\n        nine = 9,\n    }\n    local number_to_numeral = {\n        [0] =\
    \ 'zero',\n        [1] = 'one',\n        [2] = 'two',\n        [3] = 'three',\n\
    \        [4] = 'four',\n        [5] = 'five',\n        [6] = 'six',\n        [7]\
    \ = 'seven',\n        [8] = 'eight',\n        [9] = 'nine',\n    }\n    local\
    \ numbers_list = {}\n    for number in numbers:gmatch('%a+') do\n        table.insert(numbers_list,\
    \ numeral_to_number[number])\n    end\n    table.sort(numbers_list)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_list) do\n        table.insert(sorted_numbers,\
    \ number_to_numeral[number])\n    end\n    return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch(\"\
    %S+\") do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n  \
    \  return table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27lv3sfu.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp27lv3sfu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dsopvxu.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0dsopvxu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums, function(a, b)\n    return\
    \ NUM_MAP[a] < NUM_MAP[b]\n  end)\n  return table.concat(nums, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppf28804i.lua:12:\
    \ attempt to index a nil value (global 'NUM_MAP')\nstack traceback:\n\t/tmp/tmppf28804i.lua:12:\
    \ in function </tmp/tmppf28804i.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmppf28804i.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmppf28804i.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local numbers_list = {}\n    for number in numbers:gmatch('%S+')\
    \ do\n        table.insert(numbers_list, numeral_map[number])\n    end\n    table.sort(numbers_list)\n\
    \    local sorted_numbers = {}\n    for _, number in ipairs(numbers_list) do\n\
    \        for numeral, numeral_number in pairs(numeral_map) do\n            if\
    \ number == numeral_number then\n                table.insert(sorted_numbers,\
    \ numeral)\n            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch(\"\
    %w+\") do\n        nums[#nums+1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62eeojkq.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp62eeojkq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    ['zero'] = 0,\n\
    \    ['one'] = 1,\n    ['two'] = 2,\n    ['three'] = 3,\n    ['four'] = 4,\n \
    \   ['five'] = 5,\n    ['six'] = 6,\n    ['seven'] = 7,\n    ['eight'] = 8,\n\
    \    ['nine'] = 9\n  }\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(nums, numeral_map[num])\n  end\n  table.sort(nums)\n  local\
    \ numeral_map_inv = {}\n  for k, v in pairs(numeral_map) do\n    numeral_map_inv[v]\
    \ = k\n  end\n  local nums_str = {}\n  for _, num in ipairs(nums) do\n    table.insert(nums_str,\
    \ numeral_map_inv[num])\n  end\n  return table.concat(nums_str, ' ')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = {}\n  for number in\
    \ numbers:gmatch('%S+') do\n    table.insert(numbers_table, number)\n  end\n \
    \ table.sort(numbers_table)\n  return table.concat(numbers_table, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bu9v38o.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5bu9v38o.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_map = {\n        zero = 0,\n \
    \       one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n  \
    \      five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n \
    \       nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for k, v in\
    \ pairs(num_map) do\n            if v == num then\n                table.insert(result,\
    \ k)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    table.insert(sorted, num)\n  end\n  table.sort(sorted, function(a, b)\n\
    \    return number_to_numeral[a] < number_to_numeral[b]\n  end)\n  return table.concat(sorted,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpijtrc8d2.lua:12:\
    \ attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\
    \t/tmp/tmpijtrc8d2.lua:12: in function </tmp/tmpijtrc8d2.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmpijtrc8d2.lua:11: in local 'candidate'\n\t/tmp/tmpijtrc8d2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    num_list[#num_list + 1] = num\n  end\n  table.sort(num_list)\n  return\
    \ table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksx7x0fs.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpksx7x0fs.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted = {}\n  for number in numbers:gmatch('%S+')\
    \ do\n    table.insert(sorted, number)\n  end\n  table.sort(sorted, function(a,\
    \ b)\n    return number_to_numeral[a] < number_to_numeral[b]\n  end)\n  return\
    \ table.concat(sorted, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5p93tj9t.lua:12:\
    \ attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\
    \t/tmp/tmp5p93tj9t.lua:12: in function </tmp/tmp5p93tj9t.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmp5p93tj9t.lua:11: in local 'candidate'\n\t/tmp/tmp5p93tj9t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num in numbers:gmatch('%w+')\
    \ do\n\t\ttable.insert(nums, num)\n\tend\n\ttable.sort(nums, function(a, b)\n\t\
    \treturn numeral_to_number(a) < numeral_to_number(b)\n\tend)\n\treturn table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnpv2mbr9.lua:12:\
    \ attempt to call a nil value (global 'numeral_to_number')\nstack traceback:\n\
    \t/tmp/tmpnpv2mbr9.lua:12: in function </tmp/tmpnpv2mbr9.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmpnpv2mbr9.lua:11: in local 'candidate'\n\t/tmp/tmpnpv2mbr9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dsopvxu.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0dsopvxu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local number_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local number_list = {}\n    for number in numbers:gmatch('%S+')\
    \ do\n        table.insert(number_list, number_map[number])\n    end\n    table.sort(number_list)\n\
    \    local sorted_numbers = {}\n    for _, number in ipairs(number_list) do\n\
    \        for key, value in pairs(number_map) do\n            if value == number\
    \ then\n                table.insert(sorted_numbers, key)\n            end\n \
    \       end\n    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    zero = 0,\n   \
    \ one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six\
    \ = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local nums = {}\n\
    \  for num in numbers:gmatch('%w+') do\n    table.insert(nums, numeral_map[num])\n\
    \  end\n  table.sort(nums)\n  local num_str = ''\n  for _, num in ipairs(nums)\
    \ do\n    for numeral, value in pairs(numeral_map) do\n      if value == num then\n\
    \        num_str = num_str .. numeral .. ' '\n      end\n    end\n  end\n  return\
    \ num_str:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(num_list, num)\n  end\n  table.sort(num_list)\n  return\
    \ table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgv_64zc2.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpgv_64zc2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch(\"\
    %w+\") do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n  \
    \  return table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon79oe2z.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpon79oe2z.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch(\"\
    %w+\") do\n        nums[#nums+1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62eeojkq.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp62eeojkq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for numeral,\
    \ value in pairs(numeral_map) do\n            if value == num then\n         \
    \       table.insert(result, numeral)\n            end\n        end\n    end\n\
    \    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    zero = 0,\n   \
    \ one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six\
    \ = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local numbers_list\
    \ = {}\n  for number in numbers:gmatch('%S+') do\n    table.insert(numbers_list,\
    \ numeral_map[number])\n  end\n  table.sort(numbers_list)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numbers_list) do\n    for numeral, numeral_number\
    \ in pairs(numeral_map) do\n      if number == numeral_number then\n        table.insert(sorted_numbers,\
    \ numeral)\n      end\n    end\n  end\n  return table.concat(sorted_numbers, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    zero = 0,\n   \
    \ one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six\
    \ = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local nums = {}\n\
    \  for num in numbers:gmatch('%S+') do\n    nums[#nums + 1] = numeral_map[num]\n\
    \  end\n  table.sort(nums)\n  local sorted_numbers = {}\n  for i, num in ipairs(nums)\
    \ do\n    for numeral, value in pairs(numeral_map) do\n      if value == num then\n\
    \        sorted_numbers[i] = numeral\n      end\n    end\n  end\n  return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizwwbwb6.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpizwwbwb6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        num_list[#num_list + 1] = num\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6i_it218.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp6i_it218.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in string.gmatch(numbers,\
    \ '%a+') do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n\
    \    return table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppecj_lyg.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmppecj_lyg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_to_number = {\n        zero\
    \ = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n        four =\
    \ 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n        eight =\
    \ 8,\n        nine = 9,\n    }\n    local numbers_list = {}\n    for number in\
    \ numbers:gmatch('%w+') do\n        table.insert(numbers_list, numeral_to_number[number])\n\
    \    end\n    table.sort(numbers_list)\n    local sorted_numbers = {}\n    for\
    \ _, number in ipairs(numbers_list) do\n        for numeral, numeral_number in\
    \ pairs(numeral_to_number) do\n            if number == numeral_number then\n\
    \                table.insert(sorted_numbers, numeral)\n            end\n    \
    \    end\n    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums, function(a, b)\n\
    \    return number_to_numeral[a] < number_to_numeral[b]\n  end)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7dhed2i.lua:12:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp_7dhed2i.lua:12: in function </tmp/tmp_7dhed2i.lua:11>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp_7dhed2i.lua:11: in function 'candidate'\n\t/tmp/tmp_7dhed2i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch(\"\
    %w+\") do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_6clr38.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpj_6clr38.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnqjbvx4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpdnqjbvx4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for numeral,\
    \ numeral_num in pairs(numeral_map) do\n            if numeral_num == num then\n\
    \                table.insert(result, numeral)\n            end\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_list = {}\n    for number\
    \ in numbers:gmatch('%S+') do\n        table.insert(numbers_list, number)\n  \
    \  end\n    table.sort(numbers_list)\n    return table.concat(numbers_list, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wop4s41.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp_wop4s41.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n3vq80u.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5n3vq80u.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_to_number = {\n    zero = 0,\n\
    \    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n  \
    \  six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local number_to_numeral\
    \ = {\n    [0] = 'zero',\n    [1] = 'one',\n    [2] = 'two',\n    [3] = 'three',\n\
    \    [4] = 'four',\n    [5] = 'five',\n    [6] = 'six',\n    [7] = 'seven',\n\
    \    [8] = 'eight',\n    [9] = 'nine'\n  }\n  local numbers_list = {}\n  for number\
    \ in numbers:gmatch('%S+') do\n    table.insert(numbers_list, numeral_to_number[number])\n\
    \  end\n  table.sort(numbers_list)\n  local sorted_numbers = {}\n  for _, number\
    \ in ipairs(numbers_list) do\n    table.insert(sorted_numbers, number_to_numeral[number])\n\
    \  end\n  return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for numeral,\
    \ value in pairs(numeral_map) do\n            if value == num then\n         \
    \       table.insert(result, numeral)\n                break\n            end\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    zero = 0,\n   \
    \ one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six\
    \ = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local nums = {}\n\
    \  for num in numbers:gmatch('%S+') do\n    table.insert(nums, numeral_map[num])\n\
    \  end\n  table.sort(nums)\n  local numeral_map_inv = {}\n  for k, v in pairs(numeral_map)\
    \ do\n    numeral_map_inv[v] = k\n  end\n  local result = {}\n  for _, num in\
    \ ipairs(nums) do\n    table.insert(result, numeral_map_inv[num])\n  end\n  return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch(\"\
    %S+\") do\n        nums[#nums+1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7836jyyi.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp7836jyyi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for numeral,\
    \ value in pairs(numeral_map) do\n            if value == num then\n         \
    \       table.insert(result, numeral)\n            end\n        end\n    end\n\
    \    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    ['zero'] = 0,\n\
    \    ['one'] = 1,\n    ['two'] = 2,\n    ['three'] = 3,\n    ['four'] = 4,\n \
    \   ['five'] = 5,\n    ['six'] = 6,\n    ['seven'] = 7,\n    ['eight'] = 8,\n\
    \    ['nine'] = 9\n  }\n  local nums = {}\n  for num in numbers:gmatch('%a+')\
    \ do\n    nums[#nums + 1] = numeral_map[num]\n  end\n  table.sort(nums)\n  local\
    \ result = {}\n  for _, num in ipairs(nums) do\n    for k, v in pairs(numeral_map)\
    \ do\n      if v == num then\n        result[#result + 1] = k\n        break\n\
    \      end\n    end\n  end\n  return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal num_list = {}\n\tlocal num_map = {\n\
    \t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\t\
    five = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\t\
    for num in numbers:gmatch('%a+') do\n\t\ttable.insert(num_list, num_map[num])\n\
    \tend\n\ttable.sort(num_list)\n\tlocal sorted_numbers = {}\n\tfor _, num in ipairs(num_list)\
    \ do\n\t\tfor name, value in pairs(num_map) do\n\t\t\tif value == num then\n\t\
    \t\t\ttable.insert(sorted_numbers, name)\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnqjbvx4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpdnqjbvx4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnqjbvx4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpdnqjbvx4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    ['zero'] = 0,\n\
    \    ['one'] = 1,\n    ['two'] = 2,\n    ['three'] = 3,\n    ['four'] = 4,\n \
    \   ['five'] = 5,\n    ['six'] = 6,\n    ['seven'] = 7,\n    ['eight'] = 8,\n\
    \    ['nine'] = 9\n  }\n  local numbers_table = {}\n  for number in numbers:gmatch('%S+')\
    \ do\n    table.insert(numbers_table, numeral_map[number])\n  end\n  table.sort(numbers_table)\n\
    \  local sorted_numbers = {}\n  for _, number in ipairs(numbers_table) do\n  \
    \  for numeral, numeral_number in pairs(numeral_map) do\n      if number == numeral_number\
    \ then\n        table.insert(sorted_numbers, numeral)\n      end\n    end\n  end\n\
    \  return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n3vq80u.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5n3vq80u.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_map = {\n        zero = 0,\n \
    \       one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n  \
    \      five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n \
    \       nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num_map[num])\n    end\n    table.sort(nums)\n\
    \    local sorted = {}\n    for _, num in ipairs(nums) do\n        for k, v in\
    \ pairs(num_map) do\n            if v == num then\n                table.insert(sorted,\
    \ k)\n            end\n        end\n    end\n    return table.concat(sorted, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch(\"\
    %S+\") do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjbkrbtw.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpdjbkrbtw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(sorted, num)\n  end\n  table.sort(sorted, function(a, b)\n\
    \    return number_to_numeral[a] < number_to_numeral[b]\n  end)\n  return table.concat(sorted,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpruirehcw.lua:12:\
    \ attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\
    \t/tmp/tmpruirehcw.lua:12: in function </tmp/tmpruirehcw.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmpruirehcw.lua:11: in local 'candidate'\n\t/tmp/tmpruirehcw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3a12sku.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe3a12sku.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_list = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(num_list, num)\n    end\n    table.sort(num_list)\n\
    \    return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl8t8kc4.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkl8t8kc4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numeral_map = {\n    zero = 0,\n   \
    \ one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six\
    \ = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local nums = {}\n\
    \  for num in numbers:gmatch('%w+') do\n    table.insert(nums, numeral_map[num])\n\
    \  end\n  table.sort(nums)\n  local result = {}\n  for _, num in ipairs(nums)\
    \ do\n    for k, v in pairs(numeral_map) do\n      if v == num then\n        table.insert(result,\
    \ k)\n      end\n    end\n  end\n  return table.concat(result, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    num_list[#num_list + 1] = num\n  end\n  table.sort(num_list)\n  return\
    \ table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksx7x0fs.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpksx7x0fs.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    num_list[#num_list + 1] = num\n  end\n  table.sort(num_list)\n  return\
    \ table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k87k_so.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp6k87k_so.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local sorted = {}\n    for _, num in ipairs(nums) do\n        for k, v in\
    \ pairs(numeral_map) do\n            if v == num then\n                table.insert(sorted,\
    \ k)\n            end\n        end\n    end\n    return table.concat(sorted, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums, function(a, b)\n    return\
    \ num_to_int(a) < num_to_int(b)\n  end)\n  return table.concat(nums, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpugol4dhy.lua:12:\
    \ attempt to call a nil value (global 'num_to_int')\nstack traceback:\n\t/tmp/tmpugol4dhy.lua:12:\
    \ in function </tmp/tmpugol4dhy.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpugol4dhy.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpugol4dhy.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n3vq80u.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5n3vq80u.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_to_number = {\n        zero\
    \ = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n        four =\
    \ 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n        eight =\
    \ 8,\n        nine = 9,\n    }\n    local numbers_list = {}\n    for number in\
    \ numbers:gmatch('%w+') do\n        table.insert(numbers_list, numeral_to_number[number])\n\
    \    end\n    table.sort(numbers_list)\n    local sorted_numbers = {}\n    for\
    \ _, number in ipairs(numbers_list) do\n        for numeral, number_value in pairs(numeral_to_number)\
    \ do\n            if number == number_value then\n                table.insert(sorted_numbers,\
    \ numeral)\n            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_table = {}\n    for num in numbers:gmatch(\"\
    %S+\") do\n        table.insert(num_table, num)\n    end\n    table.sort(num_table)\n\
    \    return table.concat(num_table, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6zmghkf.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpn6zmghkf.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3vsezr.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp0q3vsezr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n3vq80u.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5n3vq80u.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num in numbers:gmatch('%S+')\
    \ do\n\t\tnums[#nums+1] = num\n\tend\n\ttable.sort(nums, function(a, b)\n\t\t\
    return tonumber(a) < tonumber(b)\n\tend)\n\treturn table.concat(nums, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1udhxen.lua:12:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpc1udhxen.lua:12:\
    \ in function </tmp/tmpc1udhxen.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpc1udhxen.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpc1udhxen.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local number_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%S+')\
    \ do\n        table.insert(numbers_table, number_map[number])\n    end\n    table.sort(numbers_table)\n\
    \    local sorted_numbers = {}\n    for _, number in ipairs(numbers_table) do\n\
    \        for k, v in pairs(number_map) do\n            if v == number then\n \
    \               table.insert(sorted_numbers, k)\n            end\n        end\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        nums[#nums + 1] = num\n    end\n    table.sort(nums, function(a,\
    \ b)\n        return numbers_to_digits[a] < numbers_to_digits[b]\n    end)\n \
    \   return table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr03wygln.lua:12:\
    \ attempt to index a nil value (global 'numbers_to_digits')\nstack traceback:\n\
    \t/tmp/tmpr03wygln.lua:12: in function </tmp/tmpr03wygln.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmpr03wygln.lua:11: in local 'candidate'\n\t/tmp/tmpr03wygln.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659798046
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numeral_map = {\n        zero = 0,\n\
    \        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n \
    \       five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local sorted = {}\n    for _, num in ipairs(nums) do\n        for numeral,\
    \ value in pairs(numeral_map) do\n            if value == num then\n         \
    \       table.insert(sorted, numeral)\n            end\n        end\n    end\n\
    \    return table.concat(sorted, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal sorted = {}\n\tfor number in numbers:gmatch('%S+')\
    \ do\n\t\tlocal num = number_to_numeral[number]\n\t\tif num then\n\t\t\ttable.insert(sorted,\
    \ num)\n\t\tend\n\tend\n\ttable.sort(sorted)\n\tlocal result = {}\n\tfor _, num\
    \ in ipairs(sorted) do\n\t\ttable.insert(result, numeral_to_number[num])\n\tend\n\
    \treturn table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwlggo1wx.lua:9:\
    \ attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\
    \t/tmp/tmpwlggo1wx.lua:9: in local 'candidate'\n\t/tmp/tmpwlggo1wx.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%a+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums, function(a,\
    \ b)\n        return number_to_numeral[a] < number_to_numeral[b]\n    end)\n \
    \   return table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7bas2b4e.lua:12:\
    \ attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\
    \t/tmp/tmp7bas2b4e.lua:12: in function </tmp/tmp7bas2b4e.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmp7bas2b4e.lua:11: in local 'candidate'\n\t/tmp/tmp7bas2b4e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_table = {}\n    local num_str\
    \ = ''\n    for num in numbers:gmatch('%S+') do\n        table.insert(num_table,\
    \ num)\n    end\n    table.sort(num_table)\n    for i, num in ipairs(num_table)\
    \ do\n        num_str = num_str .. num .. ' '\n    end\n    return num_str:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmf85fj3l.lua:24:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmf85fj3l.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659798046
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm08r1ev.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpmm08r1ev.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
