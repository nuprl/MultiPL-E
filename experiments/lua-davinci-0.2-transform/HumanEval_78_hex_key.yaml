name: HumanEval_78_hex_key
language: lua
prompt: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n-- digits that are primes\
  \ (prime number, or a prime, is a natural number \n-- greater than 1 that is not\
  \ a product of two smaller natural numbers).\n-- Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n-- So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may assume the input is\
  \ always correct or empty string, \n-- and symbols A,B,C,D,E,F are always uppercase.\n\
  -- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n-- 2\n-- >>>\
  \ hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n-- 6\n-- >>> hex_key('2020')\n\
  -- 2\nlocal function hex_key(num)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
  \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
  \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
  \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
  \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local primes = {'2', '3', '5', '7', 'B', 'D'}\n  local count = 0\n\
    \  for i = 1, #num do\n    for j = 1, #primes do\n      if num:sub(i, i) == primes[j]\
    \ then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "  local hex_primes = {'2', '3', '5', '7', 'B', 'D'}\n  local count = 0\n\
    \  for i = 1, #num do\n    for j = 1, #hex_primes do\n      if num:sub(i, i) ==\
    \ hex_primes[j] then\n        count = count + 1\n      end\n    end\n  end\n \
    \ return count\nend", "    local primes = {'2', '3', '5', '7', 'B', 'D'}\n   \
    \ local count = 0\n    for i = 1, #num do\n        for j = 1, #primes do\n   \
    \         if num:sub(i, i) == primes[j] then\n                count = count +\
    \ 1\n            end\n        end\n    end\n    return count\nend", "  local primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n  local count = 0\n  for i = 1, #num do\n\
    \    for j = 1, #primes do\n      if num:sub(i, i) == primes[j] then\n       \
    \ count = count + 1\n      end\n    end\n  end\n  return count\nend", "    local\
    \ count = 0\n    local primes = {'2', '3', '5', '7', 'B', 'D'}\n    for i = 1,\
    \ #num do\n        for j = 1, #primes do\n            if num:sub(i, i) == primes[j]\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "  local primes = {'2', '3', '5', '7', 'B', 'D'}\n  local\
    \ count = 0\n  for i = 1, #num do\n    for j = 1, #primes do\n      if num:sub(i,\
    \ i) == primes[j] then\n        count = count + 1\n      end\n    end\n  end\n\
    \  return count\nend", "    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}\n\
    \    local count = 0\n    for i = 1, #num do\n        for j = 1, #hex_primes do\n\
    \            if num:sub(i, i) == hex_primes[j] then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "    local\
    \ primes = {'2', '3', '5', '7', 'B', 'D'}\n    local count = 0\n    for i = 1,\
    \ #num do\n        for j = 1, #primes do\n            if num:sub(i, i) == primes[j]\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "  local primes = {2, 3, 5, 7, 11, 13}\n  local hex =\
    \ {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'}\n  local count = 0\n  for i = 1, #num do\n    for j = 1, #hex do\n    \
    \  if num:sub(i, i) == hex[j] then\n        for k = 1, #primes do\n          if\
    \ j == primes[k] then\n            count = count + 1\n          end\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  local hex_primes = {'2',\
    \ '3', '5', '7', 'B', 'D'}\n  local count = 0\n  for i = 1, #num do\n    for j\
    \ = 1, #hex_primes do\n      if num:sub(i, i) == hex_primes[j] then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend", "  local hex_primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n  local count = 0\n  for i = 1, #num do\n\
    \    for j = 1, #hex_primes do\n      if num:sub(i, i) == hex_primes[j] then\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \   local primes = {'2', '3', '5', '7', 'B', 'D'}\n    local count = 0\n    for\
    \ i = 1, #num do\n        for j = 1, #primes do\n            if num:sub(i, i)\
    \ == primes[j] then\n                count = count + 1\n            end\n    \
    \    end\n    end\n    return count\nend", "    local primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    local count = 0\n    for i = 1, #num do\n        for j =\
    \ 1, #primes do\n            if num:sub(i, i) == primes[j] then\n            \
    \    count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "    local primes = {'2', '3', '5', '7', 'B', 'D'}\n    local count = 0\n\
    \    for i = 1, #num do\n        for j = 1, #primes do\n            if num:sub(i,\
    \ i) == primes[j] then\n                count = count + 1\n            end\n \
    \       end\n    end\n    return count\nend", "  local primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n  local count = 0\n  for i = 1, #num do\n    for j = 1, #primes\
    \ do\n      if num:sub(i, i) == primes[j] then\n        count = count + 1\n  \
    \    end\n    end\n  end\n  return count\nend", "  local primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n  local count = 0\n  for i = 1, #num do\n    if table.contains(primes,\
    \ num:sub(i, i)) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local primes = {'2', '3', '5', '7', 'B', 'D'}\n  local count = 0\n  for\
    \ i = 1, #num do\n    for j = 1, #primes do\n      if num:sub(i, i) == primes[j]\
    \ then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "  local primes = {2, 3, 5, 7, 11, 13}\n  local hex = {'0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n  local result\
    \ = 0\n  for i = 1, #num do\n    for j = 1, #hex do\n      if num:sub(i, i) ==\
    \ hex[j] then\n        for k = 1, #primes do\n          if j == primes[k] then\n\
    \            result = result + 1\n          end\n        end\n      end\n    end\n\
    \  end\n  return result\nend", "  local hex_primes = {'2', '3', '5', '7', 'B',\
    \ 'D'}\n  local count = 0\n  for i = 1, #num do\n    for j = 1, #hex_primes do\n\
    \      if num:sub(i, i) == hex_primes[j] then\n        count = count + 1\n   \
    \   end\n    end\n  end\n  return count\nend", "  local primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n  local count = 0\n  for i = 1, #num do\n    for j = 1, #primes\
    \ do\n      if num:sub(i, i) == primes[j] then\n        count = count + 1\n  \
    \    end\n    end\n  end\n  return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
