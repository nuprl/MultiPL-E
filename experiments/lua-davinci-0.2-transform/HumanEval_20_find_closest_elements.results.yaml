language: lua
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = math.abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff then\n            min_diff = diff\n      \
    \      min_diff_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n\
    \    return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpk6mzi_.lua:24:\
    \ expected: {5, 5.9}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpvpk6mzi_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local min_distance_elements = {0, 0}\n    for\
    \ i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n            local\
    \ distance = math.abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                min_distance_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_distance_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfzc1_p7.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpdfzc1_p7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {0,\
    \ 0}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n   \
    \         local difference = math.abs(numbers[i] - numbers[j])\n            if\
    \ difference < smallest_difference then\n                smallest_difference =\
    \ difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppp4v2ceh.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmppp4v2ceh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {numbers[1], numbers[2]}\n\
    \  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      local diff =\
    \ math.abs(numbers[i] - numbers[j])\n      if diff < min_diff then\n        min_diff\
    \ = diff\n        min_diff_elements = {numbers[i], numbers[j]}\n      end\n  \
    \  end\n  end\n  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptali7jpu.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmptali7jpu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_numbers = {math.huge, math.huge}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_numbers = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17qd5c0t.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp17qd5c0t.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_elements = {math.huge, math.huge}\n    for\
    \ i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local diff\
    \ = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n \
    \               min_diff = diff\n                min_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return min_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvwqdg8p.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpuvwqdg8p.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_pair = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            local distance = math.abs(numbers[i] - numbers[j])\n       \
    \     if distance < closest_distance then\n                closest_distance =\
    \ distance\n                closest_pair = {numbers[i], numbers[j]}\n        \
    \    end\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5l8g6xd.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpb5l8g6xd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jtwgoml.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp0jtwgoml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local min_distance_elements = {0, 0}\n    for\
    \ i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n            local\
    \ distance = math.abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                min_distance_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_distance_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfzc1_p7.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpdfzc1_p7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ closest_elements = {numbers[1], numbers[2]}\n  local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n  \
    \    local distance = math.abs(numbers[i] - numbers[j])\n      if distance < closest_distance\
    \ then\n        closest_distance = distance\n        closest_elements = {numbers[i],\
    \ numbers[j]}\n      end\n    end\n  end\n  return closest_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zthoncn.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp8zthoncn.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {0,\
    \ 0}\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n       \
    \     local difference = math.abs(numbers[i] - numbers[j])\n            if difference\
    \ < smallest_difference then\n                smallest_difference = difference\n\
    \                smallest_difference_elements = {numbers[i], numbers[j]}\n   \
    \         end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppalwwts8.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmppalwwts8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_elements = {numbers[i], numbers[j]}\n      end\n    end\n  end\n\
    \  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuaxms9sk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpuaxms9sk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_pair = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_pair = {numbers[i], numbers[j]}\n         \
    \   end\n        end\n    end\n    return min_diff_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov1796jh.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpov1796jh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_diff = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < closest_diff\
    \ then\n                closest_diff = diff\n                closest_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0gs8oif.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpl0gs8oif.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_pair = {0, 0}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_pair = {numbers[i], numbers[j]}\n      end\n    end\n  end\n  return\
    \ min_diff_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre14pgsc.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpre14pgsc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzonco1i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfzonco1i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff then\n            min_diff = diff\n            min_diff_elements\
    \ = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka5ei3n6.lua:23:\
    \ expected: {3.9, 4.0}\nactual: {5.0, 2.2}\nstack traceback:\n\t/tmp/tmpka5ei3n6.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ min_diff = math.huge\n\tlocal min_diff_elements = {0, 0}\n\tfor i = 1, #numbers\
    \ do\n\t\tfor j = i + 1, #numbers do\n\t\t\tlocal diff = math.abs(numbers[i] -\
    \ numbers[j])\n\t\t\tif diff < min_diff then\n\t\t\t\tmin_diff = diff\n\t\t\t\t\
    min_diff_elements = {numbers[i], numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfybpvs0h.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfybpvs0h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34phkp28.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp34phkp28.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {}\n\
    \    for i, number in ipairs(numbers) do\n        for j, other_number in ipairs(numbers)\
    \ do\n            if i ~= j then\n                local difference = math.abs(number\
    \ - other_number)\n                if difference < smallest_difference then\n\
    \                    smallest_difference = difference\n                    smallest_difference_elements\
    \ = {number, other_number}\n                end\n            end\n        end\n\
    \    end\n    return smallest_difference_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpus9gb0dn.lua:28:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpus9gb0dn.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local closest_pair = {numbers[1], numbers[2]}\n  \
    \  for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                closest_pair = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return closest_pair\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphebqc9lk.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmphebqc9lk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_numbers = {numbers[1], numbers[2]}\n   \
    \ for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_numbers = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return min_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4rcg57i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpl4rcg57i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local min_numbers = {0, 0}\n    for i = 1, #numbers\
    \ do\n        for j = i + 1, #numbers do\n            local distance = math.abs(numbers[i]\
    \ - numbers[j])\n            if distance < min_distance then\n               \
    \ min_distance = distance\n                min_numbers = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return min_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51u2_8nw.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp51u2_8nw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ min_diff = math.huge\n\tlocal min_diff_elements = {numbers[1], numbers[2]}\n\
    \tfor i = 1, #numbers - 1 do\n\t\tfor j = i + 1, #numbers do\n\t\t\tlocal diff\
    \ = math.abs(numbers[i] - numbers[j])\n\t\t\tif diff < min_diff then\n\t\t\t\t\
    min_diff = diff\n\t\t\t\tmin_diff_elements = {numbers[i], numbers[j]}\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2_5jvbt.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpt2_5jvbt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzonco1i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfzonco1i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_pair = {}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_pair = {numbers[i], numbers[j]}\n         \
    \   end\n        end\n    end\n    return min_diff_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjl9rr05.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpxjl9rr05.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {numbers[1],\
    \ numbers[2]}\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local difference = math.abs(numbers[i] - numbers[j])\n          \
    \  if difference < smallest_difference then\n                smallest_difference\
    \ = difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kevt02g.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp_kevt02g.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_numbers = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_numbers = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3lus9x_.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpm3lus9x_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzonco1i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfzonco1i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_diff = math.huge\n    local closest_pair = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < closest_diff\
    \ then\n                closest_diff = diff\n                closest_pair = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return closest_pair\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0eyk7k8s.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp0eyk7k8s.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_pair = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            local distance = math.abs(numbers[i] - numbers[j])\n       \
    \     if distance < closest_distance then\n                closest_distance =\
    \ distance\n                closest_pair = {numbers[i], numbers[j]}\n        \
    \    end\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5l8g6xd.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpb5l8g6xd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_pair = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_pair = {numbers[i], numbers[j]}\n         \
    \   end\n        end\n    end\n    return min_diff_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov1796jh.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpov1796jh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jtwgoml.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp0jtwgoml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_pair = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            local distance = math.abs(numbers[i] - numbers[j])\n       \
    \     if distance < closest_distance then\n                closest_distance =\
    \ distance\n                closest_pair = {numbers[i], numbers[j]}\n        \
    \    end\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5l8g6xd.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpb5l8g6xd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_elements = {}\n  for i = 1, #numbers do\n\
    \    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i] - numbers[j])\n\
    \      if diff < min_diff then\n        min_diff = diff\n        min_elements\
    \ = {numbers[i], numbers[j]}\n      end\n    end\n  end\n  return min_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2td37mm3.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp2td37mm3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {}\n    for i = 1, #numbers\
    \ - 1 do\n        local diff = numbers[i + 1] - numbers[i]\n        if diff <\
    \ min_diff then\n            min_diff = diff\n            min_diff_elements =\
    \ {numbers[i], numbers[i + 1]}\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplm7d1iwt.lua:23:\
    \ expected: {3.9, 4.0}\nactual: {5.0, 2.2}\nstack traceback:\n\t/tmp/tmplm7d1iwt.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {nil, nil}\n    for i =\
    \ 1, #numbers do\n        for j = i + 1, #numbers do\n            local diff =\
    \ math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n   \
    \             min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4aln4r3.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpi4aln4r3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff then\n            min_diff = diff\n            min_diff_elements\
    \ = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka5ei3n6.lua:23:\
    \ expected: {3.9, 4.0}\nactual: {5.0, 2.2}\nstack traceback:\n\t/tmp/tmpka5ei3n6.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = math.abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff then\n            min_diff = diff\n      \
    \      min_diff_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n\
    \    return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpk6mzi_.lua:24:\
    \ expected: {5, 5.9}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpvpk6mzi_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_pair = {numbers[1], numbers[2]}\n \
    \   for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n         \
    \   local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_pair = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_pair\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn72nesmz.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpn72nesmz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {0, 0}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_elements = {numbers[i], numbers[j]}\n      end\n    end\n  end\n\
    \  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ja4mlh9.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp2ja4mlh9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ closest_elements = {numbers[1], numbers[2]}\n  local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n  \
    \    local distance = math.abs(numbers[i] - numbers[j])\n      if distance < closest_distance\
    \ then\n        closest_distance = distance\n        closest_elements = {numbers[i],\
    \ numbers[j]}\n      end\n    end\n  end\n  return closest_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zthoncn.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp8zthoncn.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ difference = math.abs(numbers[i] - numbers[j])\n            if difference <\
    \ smallest_difference then\n                smallest_difference = difference\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3nrl407.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpf3nrl407.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_difference = math.huge\n    local min_difference_elements = {numbers[1],\
    \ numbers[2]}\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local difference = math.abs(numbers[i] - numbers[j])\n          \
    \  if difference < min_difference then\n                min_difference = difference\n\
    \                min_difference_elements = {numbers[i], numbers[j]}\n        \
    \    end\n        end\n    end\n    return min_difference_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76bolfce.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp76bolfce.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local difference = math.abs(numbers[i] - numbers[j])\n            if difference\
    \ < smallest_difference then\n                smallest_difference = difference\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1ee114l.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpd1ee114l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzx2c1m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmptxzx2c1m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {numbers[1],\
    \ numbers[2]}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            local difference = math.abs(numbers[i] - numbers[j])\n     \
    \       if difference < smallest_difference then\n                smallest_difference\
    \ = difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm9mmr50.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpgm9mmr50.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_elements = {math.huge, math.huge}\n    for\
    \ i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local diff\
    \ = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n \
    \               min_diff = diff\n                min_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return min_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvwqdg8p.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpuvwqdg8p.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ difference = math.abs(numbers[i] - numbers[j])\n            if difference <\
    \ smallest_difference then\n                smallest_difference = difference\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3nrl407.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpf3nrl407.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_pair = {}\n    for i = 1, #numbers - 1 do\n\
    \        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_pair = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return min_pair\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbba3i1aq.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpbba3i1aq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local min_distance_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ distance = math.abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                min_distance_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_distance_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplz638552.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmplz638552.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_diff = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < closest_diff\
    \ then\n                closest_diff = diff\n                closest_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0gs8oif.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpl0gs8oif.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_numbers = {numbers[1], numbers[2]}\n   \
    \ for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n           \
    \ local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_numbers = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcnbbfp0.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpwcnbbfp0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {0,\
    \ 0}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n   \
    \         local difference = math.abs(numbers[i] - numbers[j])\n            if\
    \ difference < smallest_difference then\n                smallest_difference =\
    \ difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppp4v2ceh.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmppp4v2ceh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ smallest_difference = math.huge\n\tlocal closest_elements = {numbers[1], numbers[2]}\n\
    \tfor i = 1, #numbers - 1 do\n\t\tfor j = i + 1, #numbers do\n\t\t\tlocal difference\
    \ = math.abs(numbers[i] - numbers[j])\n\t\t\tif difference < smallest_difference\
    \ then\n\t\t\t\tsmallest_difference = difference\n\t\t\t\tclosest_elements = {numbers[i],\
    \ numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\treturn closest_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yi6n3t4.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp7yi6n3t4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_elements = {numbers[1], numbers[2]}\n  \
    \  for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixgi6zva.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpixgi6zva.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {0, 0}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_elements = {numbers[i], numbers[j]}\n      end\n    end\n  end\n\
    \  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ja4mlh9.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp2ja4mlh9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_distance = math.huge\n  local min_distance_elements = {0, 0}\n  for i =\
    \ 1, #numbers do\n    for j = i + 1, #numbers do\n      local distance = math.abs(numbers[i]\
    \ - numbers[j])\n      if distance < min_distance then\n        min_distance =\
    \ distance\n        min_distance_elements = {numbers[i], numbers[j]}\n      end\n\
    \    end\n  end\n  return min_distance_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmzo4419.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpmmzo4419.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_elements = {numbers[1], numbers[2]}\n  for\
    \ i = 1, #numbers - 1 do\n    local diff = math.abs(numbers[i] - numbers[i + 1])\n\
    \    if diff < min_diff then\n      min_diff = diff\n      min_elements = {numbers[i],\
    \ numbers[i + 1]}\n    end\n  end\n  return min_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp4reclq.lua:24:\
    \ expected: {5.0, 5.9}\nactual: {1.0, 2.0}\nstack traceback:\n\t/tmp/tmpsp4reclq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {}\n    for i = 1, #numbers\
    \ - 1 do\n        local diff = numbers[i + 1] - numbers[i]\n        if diff <\
    \ min_diff then\n            min_diff = diff\n            min_diff_elements =\
    \ {numbers[i], numbers[i + 1]}\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplm7d1iwt.lua:23:\
    \ expected: {3.9, 4.0}\nactual: {5.0, 2.2}\nstack traceback:\n\t/tmp/tmplm7d1iwt.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jtwgoml.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp0jtwgoml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_a, min_b\n  for i = 1, #numbers - 1 do\n \
    \   for j = i + 1, #numbers do\n      local a, b = numbers[i], numbers[j]\n  \
    \    local diff = math.abs(a - b)\n      if diff < min_diff then\n        min_diff\
    \ = diff\n        min_a, min_b = a, b\n      end\n    end\n  end\n  return min_a,\
    \ min_b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3oowyah.lua:26:\
    \ expected: {3.9, 4.0}\nactual: 3.9\nstack traceback:\n\t/tmp/tmpi3oowyah.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {0, 0}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_elements = {numbers[i], numbers[j]}\n      end\n    end\n  end\n\
    \  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ja4mlh9.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp2ja4mlh9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_diff = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < closest_diff\
    \ then\n                closest_diff = diff\n                closest_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn71icpzu.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpn71icpzu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local min_distance_elements = {0, 0}\n    for\
    \ i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local distance\
    \ = math.abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                min_distance_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_distance_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_y2p7vs.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp8_y2p7vs.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {0, 0}\n  for i = 1, #numbers\
    \ - 1 do\n    local diff = math.abs(numbers[i] - numbers[i + 1])\n    if diff\
    \ < min_diff then\n      min_diff = diff\n      min_diff_elements = {numbers[i],\
    \ numbers[i + 1]}\n    end\n  end\n  return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw39l1t5a.lua:24:\
    \ expected: {5.0, 5.9}\nactual: {1.0, 2.0}\nstack traceback:\n\t/tmp/tmpw39l1t5a.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_diff = math.huge\n  local smallest_diff_elements = {numbers[1], numbers[2]}\n\
    \  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      local diff\
    \ = math.abs(numbers[i] - numbers[j])\n      if diff < smallest_diff then\n  \
    \      smallest_diff = diff\n        smallest_diff_elements = {numbers[i], numbers[j]}\n\
    \      end\n    end\n  end\n  return smallest_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifdw1pc4.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpifdw1pc4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = math.abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff then\n            min_diff = diff\n      \
    \      min_diff_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n\
    \    return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpk6mzi_.lua:24:\
    \ expected: {5, 5.9}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpvpk6mzi_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_pair = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_pair = {numbers[i], numbers[j]}\n            end\n  \
    \      end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrp1p9e4.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpsrp1p9e4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = math.abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff then\n            min_diff = diff\n      \
    \      min_diff_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n\
    \    return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpk6mzi_.lua:24:\
    \ expected: {5, 5.9}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpvpk6mzi_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_difference =\
    \ math.abs(numbers[1] - numbers[2])\n    for i = 1, #numbers do\n        for j\
    \ = i + 1, #numbers do\n            local difference = math.abs(numbers[i] - numbers[j])\n\
    \            if difference < closest_difference then\n                closest_elements\
    \ = {numbers[i], numbers[j]}\n                closest_difference = difference\n\
    \            end\n        end\n    end\n    return closest_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_v5ezpb.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpq_v5ezpb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_elements = {}\n  for i, a in ipairs(numbers)\
    \ do\n    for j, b in ipairs(numbers) do\n      if i ~= j then\n        local\
    \ diff = math.abs(a - b)\n        if diff < min_diff then\n          min_diff\
    \ = diff\n          min_elements = {a, b}\n        end\n      end\n    end\n \
    \ end\n  return min_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjx3ln9m.lua:28:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpkjx3ln9m.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {numbers[1],\
    \ numbers[2]}\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local difference = math.abs(numbers[i] - numbers[j])\n          \
    \  if difference < smallest_difference then\n                smallest_difference\
    \ = difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kevt02g.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp_kevt02g.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_elements = {}\n    for i = 1, #numbers do\n\
    \        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_elements = {numbers[i], numbers[j]}\n          \
    \  end\n        end\n    end\n    return min_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyic6j9tr.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpyic6j9tr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_diff = math.huge\n    local smallest_diff_elements = {0, 0}\n    for\
    \ i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local diff\
    \ = math.abs(numbers[i] - numbers[j])\n            if diff < smallest_diff then\n\
    \                smallest_diff = diff\n                smallest_diff_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ smallest_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz78nrw4y.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpz78nrw4y.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_numbers = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_numbers = {numbers[i], numbers[j]}\n      \
    \      end\n        end\n    end\n    return min_diff_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rtsqibw.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp1rtsqibw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzonco1i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfzonco1i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {numbers[1], numbers[2]}\n\
    \  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      local diff =\
    \ math.abs(numbers[i] - numbers[j])\n      if diff < min_diff then\n        min_diff\
    \ = diff\n        min_diff_elements = {numbers[i], numbers[j]}\n      end\n  \
    \  end\n  end\n  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptali7jpu.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmptali7jpu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest = {numbers[i], numbers[j]}\n            end\n       \
    \ end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2oshzfjh.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp2oshzfjh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_difference = math.huge\n    local min_difference_elements = {}\n    for\
    \ i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n            local\
    \ difference = math.abs(numbers[i] - numbers[j])\n            if difference <\
    \ min_difference then\n                min_difference = difference\n         \
    \       min_difference_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return min_difference_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil0ma0nt.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpil0ma0nt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local closest_elements = {}\n    for i\
    \ = 1, #numbers - 1 do\n        local difference = numbers[i + 1] - numbers[i]\n\
    \        if difference < smallest_difference then\n            smallest_difference\
    \ = difference\n            closest_elements = {numbers[i], numbers[i + 1]}\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptenrqqpt.lua:23:\
    \ expected: {3.9, 4.0}\nactual: {5.0, 2.2}\nstack traceback:\n\t/tmp/tmptenrqqpt.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = math.abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff then\n            min_diff = diff\n      \
    \      min_diff_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n\
    \    return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpk6mzi_.lua:24:\
    \ expected: {5, 5.9}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpvpk6mzi_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzx2c1m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmptxzx2c1m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzonco1i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfzonco1i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_diff = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < closest_diff\
    \ then\n                closest_diff = diff\n                closest_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn71icpzu.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpn71icpzu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzx2c1m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmptxzx2c1m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        local diff = numbers[i + 1] - numbers[i]\n        if diff <\
    \ min_diff then\n            min_diff = diff\n            min_diff_elements =\
    \ {numbers[i], numbers[i + 1]}\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0xr626k.lua:23:\
    \ expected: {3.9, 4.0}\nactual: {5.0, 2.2}\nstack traceback:\n\t/tmp/tmpp0xr626k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_difference = math.huge\n  local closest_elements = {numbers[1], numbers[2]}\n\
    \  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      local difference\
    \ = math.abs(numbers[i] - numbers[j])\n      if difference < smallest_difference\
    \ then\n        smallest_difference = difference\n        closest_elements = {numbers[i],\
    \ numbers[j]}\n      end\n    end\n  end\n  return closest_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp376s3kyh.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp376s3kyh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ntrz7t0.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp4ntrz7t0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {0,\
    \ 0}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n   \
    \         local difference = math.abs(numbers[i] - numbers[j])\n            if\
    \ difference < smallest_difference then\n                smallest_difference =\
    \ difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppp4v2ceh.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmppp4v2ceh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_distance = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local distance = math.abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance then\n                closest_distance = distance\n     \
    \           closest_elements = {numbers[i], numbers[j]}\n            end\n   \
    \     end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_z822fqv.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp_z822fqv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzx2c1m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmptxzx2c1m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzonco1i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfzonco1i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local min_distance_elements = {0, 0}\n    for\
    \ i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n            local\
    \ distance = math.abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                min_distance_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_distance_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfzc1_p7.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpdfzc1_p7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzonco1i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfzonco1i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzonco1i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfzonco1i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {math.huge, math.huge}\n \
    \ for i = 1, #numbers - 1 do\n    local diff = math.abs(numbers[i] - numbers[i\
    \ + 1])\n    if diff < min_diff then\n      min_diff = diff\n      min_diff_elements\
    \ = {numbers[i], numbers[i + 1]}\n    end\n  end\n  return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps81_1v4p.lua:24:\
    \ expected: {5.0, 5.9}\nactual: {1.0, 2.0}\nstack traceback:\n\t/tmp/tmps81_1v4p.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ difference = math.abs(numbers[i] - numbers[j])\n            if difference <\
    \ smallest_difference then\n                smallest_difference = difference\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3nrl407.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpf3nrl407.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_pair = {}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_pair = {numbers[i], numbers[j]}\n         \
    \   end\n        end\n    end\n    return min_diff_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjl9rr05.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpxjl9rr05.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {0, 0}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_elements = {numbers[i], numbers[j]}\n      end\n    end\n  end\n\
    \  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ja4mlh9.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp2ja4mlh9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {}\n    for i, a in ipairs(numbers)\
    \ do\n        for j, b in ipairs(numbers) do\n            if i ~= j then\n   \
    \             local diff = math.abs(a - b)\n                if diff < min_diff\
    \ then\n                    min_diff = diff\n                    min_diff_elements\
    \ = {a, b}\n                end\n            end\n        end\n    end\n    return\
    \ min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpth7e3it1.lua:28:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpth7e3it1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzx2c1m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmptxzx2c1m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jtwgoml.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp0jtwgoml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_difference = math.huge\n    local min_difference_elements = {numbers[1],\
    \ numbers[2]}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            local difference = math.abs(numbers[i] - numbers[j])\n     \
    \       if difference < min_difference then\n                min_difference =\
    \ difference\n                min_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return min_difference_elements\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppmkk14o.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpppmkk14o.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_difference = math.huge\n  local closest_elements = {}\n  for i = 1,\
    \ #numbers - 1 do\n    for j = i + 1, #numbers do\n      local difference = math.abs(numbers[i]\
    \ - numbers[j])\n      if difference < smallest_difference then\n        smallest_difference\
    \ = difference\n        closest_elements = {numbers[i], numbers[j]}\n      end\n\
    \    end\n  end\n  return closest_elements\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5q238o9.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpr5q238o9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_pair = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            local distance = math.abs(numbers[i] - numbers[j])\n       \
    \     if distance < closest_distance then\n                closest_distance =\
    \ distance\n                closest_pair = {numbers[i], numbers[j]}\n        \
    \    end\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5l8g6xd.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpb5l8g6xd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {}\n    for i = 1, #numbers\
    \ do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca42lhlq.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpca42lhlq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_difference = math.huge\n  local smallest_difference_elements = {numbers[1],\
    \ numbers[2]}\n  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n\
    \      local difference = math.abs(numbers[i] - numbers[j])\n      if difference\
    \ < smallest_difference then\n        smallest_difference = difference\n     \
    \   smallest_difference_elements = {numbers[i], numbers[j]}\n      end\n    end\n\
    \  end\n  return smallest_difference_elements\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt89yqeb8.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpt89yqeb8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_pair = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_pair = {numbers[i], numbers[j]}\n            end\n  \
    \      end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrp1p9e4.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpsrp1p9e4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ closest_elements = {numbers[1], numbers[2]}\n\tlocal closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n\tfor i = 1, #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\
    \tlocal distance = math.abs(numbers[i] - numbers[j])\n\t\t\tif distance < closest_distance\
    \ then\n\t\t\t\tclosest_distance = distance\n\t\t\t\tclosest_elements = {numbers[i],\
    \ numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\treturn closest_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpar4m4_f9.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpar4m4_f9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakka8yvu.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpakka8yvu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzonco1i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfzonco1i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {0,\
    \ 0}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n   \
    \         local difference = math.abs(numbers[i] - numbers[j])\n            if\
    \ difference < smallest_difference then\n                smallest_difference =\
    \ difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppp4v2ceh.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmppp4v2ceh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ difference = math.abs(numbers[i] - numbers[j])\n            if difference <\
    \ smallest_difference then\n                smallest_difference = difference\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3nrl407.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpf3nrl407.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {0,\
    \ 0}\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n       \
    \     local difference = math.abs(numbers[i] - numbers[j])\n            if difference\
    \ < smallest_difference then\n                smallest_difference = difference\n\
    \                smallest_difference_elements = {numbers[i], numbers[j]}\n   \
    \         end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppalwwts8.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmppalwwts8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff then\n            min_diff = diff\n            closest_elements\
    \ = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return closest_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9n70n8zq.lua:23:\
    \ expected: {3.9, 4.0}\nactual: {5.0, 2.2}\nstack traceback:\n\t/tmp/tmp9n70n8zq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzx2c1m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmptxzx2c1m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzx2c1m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmptxzx2c1m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_pair = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            local distance = math.abs(numbers[i] - numbers[j])\n       \
    \     if distance < closest_distance then\n                closest_pair = {numbers[i],\
    \ numbers[j]}\n                closest_distance = distance\n            end\n\
    \        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudcvf3a3.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpudcvf3a3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_pair = {numbers[1], numbers[2]}\n    for\
    \ i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_pair = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return min_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk048hg3a.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpk048hg3a.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakka8yvu.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpakka8yvu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_diff = math.huge\n    local smallest_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < smallest_diff\
    \ then\n                smallest_diff = diff\n                smallest_diff_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ smallest_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3_zydmi.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpd3_zydmi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i, a in\
    \ ipairs(numbers) do\n        for j, b in ipairs(numbers) do\n            if i\
    \ ~= j then\n                local diff = math.abs(a - b)\n                if\
    \ diff < min_diff then\n                    min_diff = diff\n                \
    \    min_diff_elements = {a, b}\n                end\n            end\n      \
    \  end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprltm_6lp.lua:28:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmprltm_6lp.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = math.abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff then\n            min_diff = diff\n      \
    \      min_diff_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n\
    \    return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpk6mzi_.lua:24:\
    \ expected: {5, 5.9}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpvpk6mzi_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_elements = {numbers[1], numbers[2]}\n  \
    \  for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixgi6zva.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpixgi6zva.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local min_distance_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ distance = math.abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                min_distance_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_distance_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplz638552.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmplz638552.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    assert(#numbers\
    \ >= 2)\n    local min_diff = math.huge\n    local min_diff_elements = {numbers[1],\
    \ numbers[2]}\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local diff = math.abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff then\n                min_diff = diff\n                min_diff_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx7lihm1.lua:27:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpbx7lihm1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_difference = math.huge\n    local min_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ difference = math.abs(numbers[i] - numbers[j])\n            if difference <\
    \ min_difference then\n                min_difference = difference\n         \
    \       min_elements = {numbers[i], numbers[j]}\n            end\n        end\n\
    \    end\n    return min_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphazgazwy.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmphazgazwy.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = math.abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff then\n            min_diff = diff\n      \
    \      min_diff_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n\
    \    return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpk6mzi_.lua:24:\
    \ expected: {5, 5.9}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpvpk6mzi_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jtwgoml.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp0jtwgoml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34phkp28.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp34phkp28.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_elements = {numbers[1], numbers[2]}\n  for\
    \ i = 1, #numbers - 1 do\n    local diff = math.abs(numbers[i] - numbers[i + 1])\n\
    \    if diff < min_diff then\n      min_diff = diff\n      min_elements = {numbers[i],\
    \ numbers[i + 1]}\n    end\n  end\n  return min_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp4reclq.lua:24:\
    \ expected: {5.0, 5.9}\nactual: {1.0, 2.0}\nstack traceback:\n\t/tmp/tmpsp4reclq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_pair = {0, 0}\n    for i = 1, #numbers\
    \ do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_pair = {numbers[i], numbers[j]}\n         \
    \   end\n        end\n    end\n    return min_diff_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmmkt_qu.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpmmmkt_qu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {}\n  for i = 1, #numbers\
    \ do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i] -\
    \ numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n      \
    \  min_diff_elements = {numbers[i], numbers[j]}\n      end\n    end\n  end\n \
    \ return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8pybz7q.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmps8pybz7q.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ closest_elements = {numbers[1], numbers[2]}\n\tlocal closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n\tfor i = 1, #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\
    \tlocal distance = math.abs(numbers[i] - numbers[j])\n\t\t\tif distance < closest_distance\
    \ then\n\t\t\t\tclosest_elements = {numbers[i], numbers[j]}\n\t\t\t\tclosest_distance\
    \ = distance\n\t\t\tend\n\t\tend\n\tend\n\treturn closest_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_h4f2xm.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpg_h4f2xm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ distance = math.abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                closest_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48t_8xfv.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp48t_8xfv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_pair = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_pair = {numbers[i], numbers[j]}\n            end\n  \
    \      end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrp1p9e4.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpsrp1p9e4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {0,\
    \ 0}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n   \
    \         local difference = math.abs(numbers[i] - numbers[j])\n            if\
    \ difference < smallest_difference then\n                smallest_difference =\
    \ difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppp4v2ceh.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmppp4v2ceh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ min_diff = math.huge\n\tlocal min_diff_elements = {numbers[1], numbers[2]}\n\
    \tfor i = 1, #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\tlocal diff = math.abs(numbers[i]\
    \ - numbers[j])\n\t\t\tif diff < min_diff then\n\t\t\t\tmin_diff = diff\n\t\t\t\
    \tmin_diff_elements = {numbers[i], numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\t\
    return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktgeevz1.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpktgeevz1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local min_distance_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ distance = math.abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                min_distance_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_distance_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplz638552.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmplz638552.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_difference = math.huge\n    local min_difference_elements = {numbers[1],\
    \ numbers[2]}\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local difference = math.abs(numbers[i] - numbers[j])\n          \
    \  if difference < min_difference then\n                min_difference = difference\n\
    \                min_difference_elements = {numbers[i], numbers[j]}\n        \
    \    end\n        end\n    end\n    return min_difference_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76bolfce.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp76bolfce.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_pair = {numbers[1], numbers[2]}\n  for\
    \ i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_pair = {numbers[i], numbers[j]}\n      end\n    end\n  end\n  return\
    \ min_diff_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hghwhup.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp2hghwhup.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ closest_pair = {numbers[1], numbers[2]}\n\tlocal closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n\tfor i = 1, #numbers - 1 do\n\t\tfor j = i + 1, #numbers do\n\
    \t\t\tlocal distance = math.abs(numbers[i] - numbers[j])\n\t\t\tif distance <\
    \ closest_distance then\n\t\t\t\tclosest_distance = distance\n\t\t\t\tclosest_pair\
    \ = {numbers[i], numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\treturn closest_pair\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh07_6fy.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpyh07_6fy.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {0, 0}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_elements = {numbers[i], numbers[j]}\n      end\n    end\n  end\n\
    \  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ja4mlh9.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp2ja4mlh9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ntrz7t0.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp4ntrz7t0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {numbers[1], numbers[2]}\n\
    \  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      local diff =\
    \ math.abs(numbers[i] - numbers[j])\n      if diff < min_diff then\n        min_diff\
    \ = diff\n        min_diff_elements = {numbers[i], numbers[j]}\n      end\n  \
    \  end\n  end\n  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptali7jpu.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmptali7jpu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ smallest_difference = math.huge\n\tlocal closest_elements = {numbers[1], numbers[2]}\n\
    \tfor i = 1, #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\tlocal difference\
    \ = math.abs(numbers[i] - numbers[j])\n\t\t\tif difference < smallest_difference\
    \ then\n\t\t\t\tsmallest_difference = difference\n\t\t\t\tclosest_elements = {numbers[i],\
    \ numbers[j]}\n\t\t\tend\n\t\tend\n\tend\n\treturn closest_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3m07bkvz.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp3m07bkvz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_diff = math.huge\n    local smallest_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < smallest_diff\
    \ then\n                smallest_diff = diff\n                smallest_diff_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ smallest_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0ch98lx.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpd0ch98lx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_difference = math.huge\n  local smallest_difference_elements = {0,\
    \ 0}\n  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      local difference\
    \ = math.abs(numbers[i] - numbers[j])\n      if difference < smallest_difference\
    \ then\n        smallest_difference = difference\n        smallest_difference_elements\
    \ = {numbers[i], numbers[j]}\n      end\n    end\n  end\n  return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyzlplo_.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpoyzlplo_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local closest_elements = {}\n    for i = 1, #numbers\
    \ do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                closest_elements = {numbers[i], numbers[j]}\n      \
    \      end\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7xth9nv.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpr7xth9nv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ min_diff = math.huge\n\tlocal min_diff_elements = {numbers[1], numbers[2]}\n\
    \tfor i = 1, #numbers - 1 do\n\t\tfor j = i + 1, #numbers do\n\t\t\tlocal diff\
    \ = math.abs(numbers[i] - numbers[j])\n\t\t\tif diff < min_diff then\n\t\t\t\t\
    min_diff = diff\n\t\t\t\tmin_diff_elements = {numbers[i], numbers[j]}\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2_5jvbt.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpt2_5jvbt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_numbers = {}\n    for i = 1, #numbers\
    \ - 1 do\n        local diff = numbers[i + 1] - numbers[i]\n        if diff <\
    \ min_diff then\n            min_diff = diff\n            min_diff_numbers = {numbers[i],\
    \ numbers[i + 1]}\n        end\n    end\n    return min_diff_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv2nkfoh.lua:23:\
    \ expected: {3.9, 4.0}\nactual: {5.0, 2.2}\nstack traceback:\n\t/tmp/tmpwv2nkfoh.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n\tlocal\
    \ closest_pair = {numbers[1], numbers[2]}\n\tlocal closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n\tfor i = 1, #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\
    \tlocal distance = math.abs(numbers[i] - numbers[j])\n\t\t\tif distance < closest_distance\
    \ then\n\t\t\t\tclosest_pair = {numbers[i], numbers[j]}\n\t\t\t\tclosest_distance\
    \ = distance\n\t\t\tend\n\t\tend\n\tend\n\treturn closest_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bwli2dm.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp6bwli2dm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzx2c1m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmptxzx2c1m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {numbers[1],\
    \ numbers[2]}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            local difference = math.abs(numbers[i] - numbers[j])\n     \
    \       if difference < smallest_difference then\n                smallest_difference\
    \ = difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm9mmr50.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpgm9mmr50.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_pair = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_pair = {numbers[i], numbers[j]}\n            end\n  \
    \      end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrp1p9e4.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpsrp1p9e4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {nil, nil}\n    for i =\
    \ 1, #numbers do\n        for j = i + 1, #numbers do\n            local diff =\
    \ math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n   \
    \             min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4aln4r3.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpi4aln4r3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakka8yvu.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpakka8yvu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_pair = {numbers[1], numbers[2]}\n \
    \   for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_pair = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_pair\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6k0hy8m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpo6k0hy8m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_pair = {numbers[1], numbers[2]}\n    for\
    \ i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_pair = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return min_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk048hg3a.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpk048hg3a.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzx2c1m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmptxzx2c1m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = math.abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff then\n            min_diff = diff\n      \
    \      min_diff_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n\
    \    return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpk6mzi_.lua:24:\
    \ expected: {5, 5.9}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpvpk6mzi_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_pair = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_pair = {numbers[i], numbers[j]}\n         \
    \   end\n        end\n    end\n    return min_diff_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov1796jh.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpov1796jh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_elements = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < closest_distance then\n                closest_distance = distance\n\
    \                closest_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzx2c1m.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmptxzx2c1m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzonco1i.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmpfzonco1i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {0, 0}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_elements = {numbers[i], numbers[j]}\n      end\n    end\n  end\n\
    \  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ja4mlh9.lua:26:\
    \ expected: {5.0, 5.9}\nactual: {5.9, 5.0}\nstack traceback:\n\t/tmp/tmp2ja4mlh9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798985
