language: lua
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        local diff = math.abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff then\n            min_diff = diff\n      \
    \      min_diff_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n\
    \    return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpk6mzi_.lua:24:\
    \ expected: {5, 5.9}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpvpk6mzi_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local min_distance_elements = {0, 0}\n    for\
    \ i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n            local\
    \ distance = math.abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                min_distance_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_distance_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfzc1_p7.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpdfzc1_p7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {0,\
    \ 0}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n   \
    \         local difference = math.abs(numbers[i] - numbers[j])\n            if\
    \ difference < smallest_difference then\n                smallest_difference =\
    \ difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppp4v2ceh.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmppp4v2ceh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {numbers[1], numbers[2]}\n\
    \  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      local diff =\
    \ math.abs(numbers[i] - numbers[j])\n      if diff < min_diff then\n        min_diff\
    \ = diff\n        min_diff_elements = {numbers[i], numbers[j]}\n      end\n  \
    \  end\n  end\n  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptali7jpu.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmptali7jpu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_numbers = {math.huge, math.huge}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_numbers = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17qd5c0t.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp17qd5c0t.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_elements = {math.huge, math.huge}\n    for\
    \ i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local diff\
    \ = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n \
    \               min_diff = diff\n                min_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return min_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvwqdg8p.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpuvwqdg8p.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_pair = {numbers[1], numbers[2]}\n    local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            local distance = math.abs(numbers[i] - numbers[j])\n       \
    \     if distance < closest_distance then\n                closest_distance =\
    \ distance\n                closest_pair = {numbers[i], numbers[j]}\n        \
    \    end\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5l8g6xd.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpb5l8g6xd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jtwgoml.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp0jtwgoml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_distance = math.huge\n    local min_distance_elements = {0, 0}\n    for\
    \ i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n            local\
    \ distance = math.abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                min_distance_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_distance_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfzc1_p7.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpdfzc1_p7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ closest_elements = {numbers[1], numbers[2]}\n  local closest_distance = math.abs(numbers[1]\
    \ - numbers[2])\n  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n  \
    \    local distance = math.abs(numbers[i] - numbers[j])\n      if distance < closest_distance\
    \ then\n        closest_distance = distance\n        closest_elements = {numbers[i],\
    \ numbers[j]}\n      end\n    end\n  end\n  return closest_elements\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zthoncn.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmp8zthoncn.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzwwlitk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpjzwwlitk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ smallest_difference = math.huge\n    local smallest_difference_elements = {0,\
    \ 0}\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n       \
    \     local difference = math.abs(numbers[i] - numbers[j])\n            if difference\
    \ < smallest_difference then\n                smallest_difference = difference\n\
    \                smallest_difference_elements = {numbers[i], numbers[j]}\n   \
    \         end\n        end\n    end\n    return smallest_difference_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppalwwts8.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmppalwwts8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_elements = {}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_elements = {numbers[i], numbers[j]}\n      end\n    end\n  end\n\
    \  return min_diff_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuaxms9sk.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpuaxms9sk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_pair = {0, 0}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_pair = {numbers[i], numbers[j]}\n         \
    \   end\n        end\n    end\n    return min_diff_pair\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov1796jh.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpov1796jh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhaybm8h.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpvhaybm8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n    local\
    \ closest_diff = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < closest_diff\
    \ then\n                closest_diff = diff\n                closest_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0gs8oif.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpl0gs8oif.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2})\n-- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0})\n-- {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n  local\
    \ min_diff = math.huge\n  local min_diff_pair = {0, 0}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_pair = {numbers[i], numbers[j]}\n      end\n    end\n  end\n  return\
    \ min_diff_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre14pgsc.lua:26:\
    \ expected: {5, 5.9}\nactual: {5.9, 5}\nstack traceback:\n\t/tmp/tmpre14pgsc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750404
