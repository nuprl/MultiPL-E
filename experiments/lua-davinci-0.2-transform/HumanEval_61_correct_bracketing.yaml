name: HumanEval_61_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
  -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
  -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
  \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
  \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
  \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
  \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
  \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local stack = {}\n    for i = 1, #brackets do\n        local c\
    \ = brackets:sub(i, i)\n        if c == '(' then\n            table.insert(stack,\
    \ c)\n        elseif c == ')' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "    local\
    \ stack = {}\n    for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n\
    \        if c == '(' then\n            table.insert(stack, c)\n        elseif\
    \ c == ')' then\n            if #stack == 0 then\n                return false\n\
    \            else\n                table.remove(stack)\n            end\n    \
    \    end\n    end\n    return #stack == 0\nend", "    local stack = {}\n    for\
    \ i = 1, #brackets do\n        local b = brackets:sub(i, i)\n        if b == '('\
    \ then\n            table.insert(stack, b)\n        elseif b == ')' then\n   \
    \         if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend", "    local stack = Stack()\n    for i = 1, #brackets\
    \ do\n        local c = brackets:sub(i, i)\n        if c == '(' then\n       \
    \     stack:push(c)\n        elseif c == ')' then\n            if stack:is_empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return stack:is_empty()\nend", " \
    \   local count = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i)\
    \ == '(' then\n            count = count + 1\n        elseif brackets:sub(i, i)\
    \ == ')' then\n            count = count - 1\n        end\n        if count <\
    \ 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "    local open_brackets = 0\n    for i = 1, #brackets do\n       \
    \ if brackets:sub(i, i) == '(' then\n            open_brackets = open_brackets\
    \ + 1\n        elseif brackets:sub(i, i) == ')' then\n            open_brackets\
    \ = open_brackets - 1\n        end\n        if open_brackets < 0 then\n      \
    \      return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    local count = 0\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == '(' then\n            count = count + 1\n        elseif\
    \ c == ')' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "    local count = 0\n    for i = 1, #brackets do\n        local c\
    \ = brackets:sub(i, i)\n        if c == '(' then\n            count = count +\
    \ 1\n        elseif c == ')' then\n            count = count - 1\n        end\n\
    \        if count < 0 then\n            return false\n        end\n    end\n \
    \   return count == 0\nend", "  local stack = {}\n  for i = 1, #brackets do\n\
    \    local c = brackets:sub(i, i)\n    if c == '(' then\n      table.insert(stack,\
    \ c)\n    elseif c == ')' then\n      if #stack == 0 then\n        return false\n\
    \      end\n      table.remove(stack)\n    end\n  end\n  return #stack == 0\n\
    end", "  local stack = {}\n  for i = 1, #brackets do\n    local c = brackets:sub(i,\
    \ i)\n    if c == '(' then\n      table.insert(stack, c)\n    elseif c == ')'\
    \ then\n      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n    for i\
    \ = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        elseif c == ')' then\n   \
    \         if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend", "  local stack = {}\n  for i = 1, #brackets do\n\
    \    local c = brackets:sub(i, i)\n    if c == '(' then\n      table.insert(stack,\
    \ c)\n    elseif c == ')' then\n      if #stack == 0 then\n        return false\n\
    \      end\n      table.remove(stack)\n    end\n  end\n  return #stack == 0\n\
    end", "    local stack = {}\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, c)\n        elseif\
    \ c == ')' then\n            if #stack == 0 then\n                return false\n\
    \            else\n                table.remove(stack)\n            end\n    \
    \    end\n    end\n    return #stack == 0\nend", "    local count = 0\n    for\
    \ i = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if c == '('\
    \ then\n            count = count + 1\n        elseif c == ')' then\n        \
    \    count = count - 1\n        end\n        if count < 0 then\n            return\
    \ false\n        end\n    end\n    return count == 0\nend", "    local stack =\
    \ {}\n    for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n    \
    \    if c == '(' then\n            table.insert(stack, c)\n        elseif c ==\
    \ ')' then\n            if #stack == 0 then\n                return false\n  \
    \          else\n                table.remove(stack)\n            end\n      \
    \  end\n    end\n    return #stack == 0\nend", "    local stack = {}\n    for\
    \ i = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        elseif c == ')' then\n   \
    \         if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend", "    local depth = 0\n    for i = 1, #brackets\
    \ do\n        local c = brackets:sub(i, i)\n        if c == '(' then\n       \
    \     depth = depth + 1\n        elseif c == ')' then\n            depth = depth\
    \ - 1\n            if depth < 0 then\n                return false\n         \
    \   end\n        end\n    end\n    return depth == 0\nend", "    local stack =\
    \ {}\n    for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n    \
    \    if c == '(' then\n            table.insert(stack, c)\n        elseif c ==\
    \ ')' then\n            if #stack == 0 then\n                return false\n  \
    \          else\n                table.remove(stack)\n            end\n      \
    \  end\n    end\n    return #stack == 0\nend", "    local stack = {}\n    for\
    \ i = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if c == '('\
    \ then\n            table.insert(stack, c)\n        elseif c == ')' then\n   \
    \         if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend", "    local stack = {}\n    for i = 1, #brackets\
    \ do\n        local c = brackets:sub(i, i)\n        if c == '(' then\n       \
    \     table.insert(stack, c)\n        elseif c == ')' then\n            if #stack\
    \ == 0 then\n                return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
