name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort an array of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
  \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
  -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function get_ones(n)\n    local ones = 0\n    while n > 0 do\n\
    \      ones = ones + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ ones\n  end\n  table.sort(arr, function(a, b)\n    local ones_a = get_ones(a)\n\
    \    local ones_b = get_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count = count + 1\n  \
    \  end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones\
    \ = ones(a)\n    local b_ones = ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:count('1')\n   \
    \ local b_ones = b:count('1')\n    if a_ones == b_ones then\n      return a <\
    \ b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function ones(n)\n    local count = 0\n    while n > 0 do\n   \
    \   count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = ones(a)\n\
    \    local b_ones = ones(b)\n    if a_ones == b_ones then\n      return a < b\n\
    \    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend",
  "  local function ones(n)\n    local count = 0\n    while n > 0 do\n      count\
    \ = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local oa, ob = ones(a), ones(b)\n    if\
    \ oa == ob then\n      return a < b\n    else\n      return oa < ob\n    end\n\
    \  end)\n  return arr\nend", "  local function get_ones(n)\n    local ones = 0\n\
    \    while n > 0 do\n      ones = ones + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return ones\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ ones_a = get_ones(a)\n    local ones_b = get_ones(b)\n    if ones_a == ones_b\
    \ then\n      return a < b\n    else\n      return ones_a < ones_b\n    end\n\
    \  end)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(num)\n    local\
    \ count = 0\n    while num > 0 do\n      count = count + (num % 2)\n      num\
    \ = math.floor(num / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local ones_a = a:gsub('[^1]', ''):len()\n    local ones_b = b:gsub('[^1]',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    else\n    \
    \  return ones_a < ones_b\n    end\n  end)\n  return arr\nend", "  local function\
    \ cmp(a, b)\n    local a_ones = a:gsub('[^1]', ''):len()\n    local b_ones = b:gsub('[^1]',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_bin(n)\n    local\
    \ bin = ''\n    while n > 0 do\n      bin = tostring(n % 2) .. bin\n      n =\
    \ math.floor(n / 2)\n    end\n    return bin\n  end\n  table.sort(arr, cmp)\n\
    \  for i, v in ipairs(arr) do\n    arr[i] = to_bin(v)\n  end\n  return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:to_binary():count('1')\n\
    \    local b_ones = b:to_binary():count('1')\n    if a_ones == b_ones then\n \
    \     return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function ones(n)\n    local count = 0\n    while\
    \ n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n \
    \     n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:to_binary():count('1')\n    local b_ones = b:to_binary():count('1')\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
